name: HumanEval_99_closest_integer
language: lua
prompt: "-- Create a function that takes a value (string) representing a number\n\
  -- and returns the closest integer to it. If the number is equidistant\n-- from\
  \ two integers, round it away from zero.\n-- Examples\n-- Note:\n-- Rounding away\
  \ from zero means that if the given number is equidistant\n-- from two integers,\
  \ the one you should return is the one that is the\n-- farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n-- return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nlocal function closest_integer(value)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_integer\n\
  \    lu.assertEquals(candidate('10'), 10)\n    lu.assertEquals(candidate('14.5'),\
  \ 15)\n    lu.assertEquals(candidate('-15.5'), -16)\n    lu.assertEquals(candidate('15.3'),\
  \ 15)\n    lu.assertEquals(candidate('0'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function closest(value)\n    local function is_equidistant(a,\
    \ b)\n      return math.abs(a - b) < 1e-6\n    end\n    local function is_closed(a,\
    \ b)\n      return math.abs(a - b) < 1e-4\n    end\n    local function is_closed_or_equidistant(a,\
    \ b)\n      return is_closed(a, b) or is_equidistant(a, b)\n    end\n    local\
    \ function is_equidistant_or_closed(a, b)\n      return is_equidistant(a, b) or\
    \ is_closed(a, b)\n    end\n    local function is_equidistant_or_closed_or_equidistant(a,\
    \ b)\n      return is_equidistant_or_closed(a, b) or is_equidistant(a, b)\n  \
    \  end\n    local function is_closed_or_equidistant_or_closed(a, b)\n      return\
    \ is_closed_or_equidistant(a, b) or is_closed(a, b)\n    end\n    local function\
    \ is_equidistant_or_closed_or_equidistant_or_closed(a, b)\n      return is_equidistant_or_closed_or_equidistant(a,\
    \ b) or is_closed(a, b)\n    end\n    local function is_closed_or_equidistant_or_closed_or_equidistant_or_closed(a,\
    \ b)\n      return is_closed_or_equidistant_or_closed(a, b) or is_equidistant_or_closed(a,\
    \ b)\n    end\n    local function is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed(a,\
    \ b)\n      return is_equidistant_or_closed_or_equidistant_or_closed(a, b) or\
    \ is_equidistant_or_closed(a, b)\n    end\n    local function is_closed_or_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed(a,\
    \ b)\n      return is_closed_or_equidistant_or_closed_or_equidistant_or_closed(a,\
    \ b) or is_equidistant_or_closed_or_closed(a, b)\n    end\n    local function\
    \ is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed(a,\
    \ b)\n      return is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed(a,\
    \ b) or is_equidistant_or_closed(a, b)\n    end\n    local function is_closed_or_equidistant_or_closed_or_equidistant_",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n\
    \  local function round_away_from_zero(number)\n    return math.floor(number +\
    \ 0.5)\n  end\n  local function round_to_zero(number)\n    return math.floor(number)\n\
    \  end\n  local function round_to_nearest(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_even(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_odd(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_ten(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_hundred(number)\n    return\
    \ math.floor(number + 0.5)\n  end\n  local function round_to_nearest_thousand(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_million(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_billion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_trillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quadrillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quintillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_sextillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_septillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_octillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_nonillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_decillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_undecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_duodecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_tredecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quattuordecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quindecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_", "  local\
    \ function is_equidistant(v1, v2)\n    return math.abs(v1 - v2) < 1e-6\n  end",
  "  local function is_equidistant(v1, v2)\n    return math.abs(v1 - v2) < 1e-6\n\
    \  end", "  local function is_equidistant(a, b)\n    return math.abs(a - b) <=\
    \ math.abs(a) + math.abs(b)\n  end\n  local function round_away_from_zero(number)\n\
    \    return math.floor(number / 2) + math.abs(number % 2)\n  end\n  local function\
    \ round_to_nearest(number)\n    return math.floor(number / 2) + math.abs(number\
    \ % 2)\n  end\n  local function round_to_even(number)\n    return math.floor(number\
    \ / 2) + math.abs(number % 2)\n  end\n  local function round_to_zero(number)\n\
    \    return math.floor(number / 2)\n  end\n  local function round_to_odd(number)\n\
    \    return math.floor(number / 2) + 1\n  end\n  local function round_to_even(number)\n\
    \    return math.floor(number / 2) + 1\n  end\n  local function round_to_odd_even(number)\n\
    \    return math.floor(number / 2) + 2\n  end\n  local function round_to_odd_odd(number)\n\
    \    return math.floor(number / 2) + 3\n  end\n  local function round_to_odd_even(number)\n\
    \    return math.floor(number / 2) + 4\n  end\n  local function round_to_odd_odd_even(number)\n\
    \    return math.floor(number / 2) + 5\n  end\n  local function round_to_odd_odd_odd(number)\n\
    \    return math.floor(number / 2) + 6\n  end\n  local function round_to_odd_odd_even(number)\n\
    \    return math.floor(number / 2) + 7\n  end\n  local function round_to_odd_odd_odd_even(number)\n\
    \    return math.floor(number / 2) + 8\n  end\n  local function round_to_odd_odd_odd_odd(number)\n\
    \    return math.floor(number / 2) + 9\n  end\n  local function round_to_odd_odd_odd_even(number)\n\
    \    return math.floor(number / 2) + 10\n  end\n  local function round_to_odd_odd_odd_odd_even(number)\n\
    \    return math.floor(number / 2) + 11\n  end\n  local function round_to_odd_odd_odd_odd_odd(number)\n\
    \    return math.floor(number / 2) + 12\n  end\n  local function round_to_odd_odd_odd_odd_even(number)\n\
    \    return math.floor(number / 2) + 13\n  end\n  local function round_to_odd_odd_odd_odd_odd_even(number)\n\
    \    return math.floor(number / 2) + 14\n  end\n  local function round_to_odd_odd_odd_odd_odd_odd(number)\n\
    \    return math.floor(number / 2) + 15\n  end\n  local function round_to_odd_odd_odd_odd_odd_even(number)\n\
    \    return math.floor(number ", "  local function closest(value)\n    if value\
    \ == nil then\n      return nil\n    end\n    local sign = math.sign(value)\n\
    \    local sign2 = sign * sign\n    local absValue = abs(value)\n    local absValue2\
    \ = absValue * absValue\n    local absValue3 = absValue2 * absValue\n    local\
    \ absValue4 = absValue3 * absValue\n    local absValue5 = absValue4 * absValue\n\
    \    local absValue6 = absValue5 * absValue\n    local absValue7 = absValue6 *\
    \ absValue\n    local absValue8 = absValue7 * absValue\n    local absValue9 =\
    \ absValue8 * absValue\n    local absValue10 = absValue9 * absValue\n    local\
    \ absValue11 = absValue10 * absValue\n    local absValue12 = absValue11 * absValue\n\
    \    local absValue13 = absValue12 * absValue\n    local absValue14 = absValue13\
    \ * absValue\n    local absValue15 = absValue14 * absValue\n    local absValue16\
    \ = absValue15 * absValue\n    local absValue17 = absValue16 * absValue\n    local\
    \ absValue18 = absValue17 * absValue\n    local absValue19 = absValue18 * absValue\n\
    \    local absValue20 = absValue19 * absValue\n    local absValue21 = absValue20\
    \ * absValue\n    local absValue22 = absValue21 * absValue\n    local absValue23\
    \ = absValue22 * absValue\n    local absValue24 = absValue23 * absValue\n    local\
    \ absValue25 = absValue24 * absValue\n    local absValue26 = absValue25 * absValue\n\
    \    local absValue27 = absValue26 * absValue\n    local absValue28 = absValue27\
    \ * absValue\n    local absValue29 = absValue28 * absValue\n    local absValue30\
    \ = absValue29 * absValue\n    local absValue31 = absValue30 * absValue\n    local\
    \ absValue32 = absValue31 * absValue\n    local absValue33 = absValue32 * absValue\n\
    \    local absValue34 = absValue33 * absValue\n    local absValue35 = absValue34\
    \ * absValue\n    local absValue36 = absValue35 * absValue\n    local absValue37\
    \ = absValue36 * absValue\n    local absValue38 = absValue37 * absValue\n    local\
    \ absValue39 = absValue38", "  local function closest(num)\n    local diff = math.abs(num\
    \ - value)\n    if diff < 0.5 then\n      return value\n    else\n      return\
    \ math.floor(num + 0.5)\n    end\n  end\n  return closest\nend", "  local function\
    \ closest(value)\n    if value == nil then\n      return nil\n    end\n    local\
    \ sign = math.sign(value)\n    local digits = math.abs(value)\n    local remainder\
    \ = digits % 1\n    local rounded = math.floor(digits / 1)\n    if sign == -1\
    \ then\n      return rounded - remainder\n    else\n      return rounded + remainder\n\
    \    end\n  end\n  return closest(value)\nend", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-4\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-2\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e0\n  end\n  local function is_close_to_seven(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_eight(a)\n  \
    \  return math.abs(a) < 1e2\n  end\n  local function is_close_to_nine(a)\n   \
    \ return math.abs(a) < 1e3\n  end\n  local function is_close_to_ten(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_eleven(a)\n    return\
    \ math.abs(a) < 1e5\n  end\n  local function is_close_to_twelve(a)\n    return\
    \ math.abs(a) < 1e6\n  end\n  local function is_close_to_thirteen(a)\n    return\
    \ math.abs(a) < 1e7\n  end\n  local function is_close_to_fourteen(a)\n    return\
    \ math.abs(a) < 1e8\n  end\n  local function is_close_to_fifteen(a)\n    return\
    \ math.abs(a) < 1e9\n  end\n  local function is_close_to_sixteen(a)\n    return\
    \ math.abs(a) < 1e10\n  end\n  local function is_close_to_seventeen(a)\n    return\
    \ math.abs(a) < 1e11\n  end\n  local function is_close_to_eighteen(a)\n    return\
    \ math.abs(a) < 1e12\n  end\n  local function is_close_to_nineteen(a)\n    return\
    \ math.abs(a) < 1e13\n  end\n  local function is_close_to_twenty(a)\n    return\
    \ math.abs(a) < 1e14\n  end\n  local function is_close_to_twenty_one(a)\n    return\
    \ math.abs(a) < 1e15\n  end\n  local function is_close_to_twenty_two(a)\n    return\
    \ math.abs(a) < 1e16\n  end\n  local function is_close_to_twenty_three(a)\n  \
    \  return math.abs(a) < 1e17\n  end\n  local function is_close_to_tw", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local\
    \ function is_close(a, b) return math.abs(a - b) < 1e-6 end\n  local function\
    \ is_close_to_zero(a) return math.abs(a - 0) == 0 end\n  local function is_close_to_one(a)\
    \ return math.abs(a - 1) ~= 0 end\n  local function is_close_to_two(a) return\
    \ math.abs(a - 2) ~= 0 end\n  local function is_close_to_ten(a) return math.abs(a\
    \ - 10) == 0 end\n  local function is_close_to_ten_and_not_zero(a) return is_close(a,\
    \ 10) and a ~= 0 end\n  local function is_close_to_ten_and_not_one(a) return is_close(a,\
    \ 10) and a ~= 1 end\n  local function is_close_to_ten_and_not_two(a) return is_close(a,\
    \ 10) and a ~= 2 end\n  local function is_close_to_ten_and_not_ten(a) return is_close(a,\
    \ 10) and a ~= 10 end\n  local function is_close_to_ten_and_not_ten_and_not_zero(a)\
    \ return is_close(a, 10) and a ~= 10 and a ~= 0 end\n  local function is_close_to_ten_and_not_ten_and_not_one(a)\
    \ return is_close(a, 10) and a ~= 10 and a ~= 1 end\n  local function is_close_to_ten_and_not_ten_and_not_two(a)\
    \ return is_close(a, 10) and a ~= 10 and a ~= 2 end\n  local function is_close_to_ten_and_not_ten_and_not_ten(a)\
    \ return is_close(a, 10) and a ~= 10 and a ~= 10 end\n  local function is_close_to_ten_and_not_ten_and_not_ten_and_not_zero(a)\
    \ return is_close(a, 10) and a ~= 10 and a ~= 10 and a ~= 0 end\n  local function\
    \ is_close_to_ten_and_not_ten_and_not_ten_and_not_one(a) return is_close(a, 10)\
    \ and a ~= 10 and a ~= 10 and a ~= 1 end\n  local function is_close_to_ten_and_not_ten_and_not_ten_and_not_two(a)\
    \ return is_close(a, 10) and a ~= 10 and a ~= 10 and a ~= 2 end\n  local function\
    \ is_close_to_ten_and_not_ten_and_not_ten_and_not_ten(a) return is_close(a, 10)\
    \ and a ~= 10 and a ~= 10 and a ~= 10 end\n  local function is_close_to_ten_and_not_ten_and_not_ten_and_not_ten_and_not_zero(a)\
    \ return is_close(a, 10) and a ~= 10 and a ", "  local function abs(x)\n    if\
    \ x < 0 then\n      return -x\n    else\n      return x\n    end\n  end\n  local\
    \ function closest(x, y)\n    if abs(x - y) < 1e-10 then\n      return x\n   \
    \ else\n      return y\n    end\n  end\n  local function round_away_from_zero(x)\n\
    \    if x < 0 then\n      return -x + 1\n    else\n      return x\n    end\n \
    \ end\n  local function round_to_zero(x)\n    if x < 0 then\n      return -x -\
    \ 1\n    else\n      return x\n    end\n  end\n  local function round_to_nearest(x)\n\
    \    if x < 0 then\n      return round_to_zero(x + 1)\n    else\n      return\
    \ round_to_zero(x)\n    end\n  end\n  local function round_to_nearest_even(x)\n\
    \    if x % 2 == 0 then\n      return round_to_nearest(x)\n    else\n      return\
    \ round_to_nearest(x - 1)\n    end\n  end\n  local function round_to_nearest_odd(x)\n\
    \    if x % 2 == 1 then\n      return round_to_nearest(x)\n    else\n      return\
    \ round_to_nearest(x - 1)\n    end\n  end\n  local function round_to_nearest_tenth(x)\n\
    \    if x < 10 then\n      return round_to_nearest(x)\n    else\n      return\
    \ round_to_nearest(x - 10)\n    end\n  end\n  local function round_to_nearest_hundreth(x)\n\
    \    if x < 100 then\n      return round_to_nearest(x)\n    else\n      return\
    \ round_to_nearest(x - 100)\n    end\n  end\n  local function round_to_nearest_thousandth(x)\n\
    \    if x < 1000 then\n      return round_to_nearest(x)\n    else\n      return\
    \ round_to_nearest(x - 1000)\n    end\n  end\n  local function round_to_nearest_millionth(x)\n\
    \    if x < 1000000 then\n      return round_to_nearest(x)\n    else\n      return\
    \ round_to_nearest(x - 1000000)\n    end\n  end\n  local function round_to_nearest_billionth(x)\n\
    \    if x < 1000000000 then\n      return round_to_nearest(x)\n    else\n    \
    \  return round_to_nearest(x - 1000000000)\n    end\n  end\n  local function round_to_nearest_trillionth(x)\n\
    \    if x < 1000000000000 then\n      return round_to_nearest(x)\n    else\n \
    \     return round_to_nearest(x - 1000000000000)\n    end\n  end\n  local function\
    \ round_to_nearest_quadrillionth(x)\n    if x < 1000000000000000 then\n      return\
    \ round_to_nearest(x)\n    else\n      return round_to_nearest(x - 1000000000000000)\n\
    \    end\n  end\n  local function round_to_nearest_quintillionth(x)\n    if x\
    \ < 1000000000000000000 then\n      return round_to_", "  local function closest(value)\n\
    \    if value == nil then\n      return nil\n    end\n    if value == value then\n\
    \      return value\n    end\n    if value < value then\n      return value\n\
    \    end\n    if value > value then\n      return value\n    end\n    return value\n\
    \  end\n  return closest(value)\nend", "  local function closest(num)\n    local\
    \ sign = math.sign(num) -- get sign of num\n    local num = math.abs(num) -- get\
    \ absolute value of num\n    local int_num = math.floor(num) -- get integer value\
    \ of num\n    local int_diff = num - int_num -- get difference between num and\
    \ int_num\n    local int_diff = int_diff * sign -- get difference between int_num\
    \ and num\n    local int_diff = int_diff + int_num -- get difference between int_num\
    \ and int_num\n    local int_diff = int_diff * sign -- get difference between\
    \ int_num and int_num\n    local int_diff = int_diff + int_num -- get difference\
    \ between int_num and int_num\n    local int_diff = int_diff * sign -- get difference\
    \ between int_num and int_num\n    local int_diff = int_diff + int_num -- get\
    \ difference between int_num and int_num\n    local int_diff = int_diff * sign\
    \ -- get difference between int_num and int_num\n    local int_diff = int_diff\
    \ + int_num -- get difference between int_num and int_num\n    local int_diff\
    \ = int_diff * sign -- get difference between int_num and int_num\n    local int_diff\
    \ = int_diff + int_num -- get difference between int_num and int_num\n    local\
    \ int_diff = int_diff * sign -- get difference between int_num and int_num\n \
    \   local int_diff = int_diff + int_num -- get difference between int_num and\
    \ int_num\n    local int_diff = int_diff * sign -- get difference between int_num\
    \ and int_num\n    local int_diff = int_diff + int_num -- get difference between\
    \ int_num and int_num\n    local int_diff = int_diff * sign -- get difference\
    \ between int_num and int_num\n    local int_diff = int_diff + int_num -- get\
    \ difference between int_num and int_num\n    local int_diff = int_diff * sign\
    \ -- get difference between int_num and int_num\n    local int_diff = int_diff\
    \ + int_num -- get difference between int_num and int_num\n    local int_diff\
    \ = int_diff * sign -- get difference between int_num and int_num\n    local int_diff\
    \ = int_diff + int_num -- get difference between int_num and int_num\n    local\
    \ int_diff = int_diff * sign -- get difference between int_num and int_num\n \
    \   local int_diff = int_diff + int_num -- get difference between int_num and\
    \ int_num\n    local int_diff = int_diff * sign -- get difference between int_num\
    \ and int_num\n    local int_diff = int_diff + int_num -- get difference between\
    \ int_num and int_num\n    local int_diff = ", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-4\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-2\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e0\n  end\n  local function is_close_to_seven(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_eight(a)\n  \
    \  return math.abs(a) < 1e2\n  end\n  local function is_close_to_nine(a)\n   \
    \ return math.abs(a) < 1e3\n  end\n  local function is_close_to_ten(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_eleven(a)\n    return\
    \ math.abs(a) < 1e5\n  end\n  local function is_close_to_twelve(a)\n    return\
    \ math.abs(a) < 1e6\n  end\n  local function is_close_to_thirteen(a)\n    return\
    \ math.abs(a) < 1e7\n  end\n  local function is_close_to_fourteen(a)\n    return\
    \ math.abs(a) < 1e8\n  end\n  local function is_close_to_fifteen(a)\n    return\
    \ math.abs(a) < 1e9\n  end\n  local function is_close_to_sixteen(a)\n    return\
    \ math.abs(a) < 1e10\n  end\n  local function is_close_to_seventeen(a)\n    return\
    \ math.abs(a) < 1e11\n  end\n  local function is_close_to_eighteen(a)\n    return\
    \ math.abs(a) < 1e12\n  end\n  local function is_close_to_nineteen(a)\n    return\
    \ math.abs(a) < 1e13\n  end\n  local function is_close_to_twenty(a)\n    return\
    \ math.abs(a) < 1e14\n  end\n  local function is_close_to_twenty_one(a)\n    return\
    \ math.abs(a) < 1e15\n  end\n  local function is_close_to_twenty_two(a)\n    return\
    \ math.abs(a) < 1e16\n  end\n  local function is_close_to_twenty_three(a)\n  \
    \  return math.abs(a) < 1e17\n  end\n  local function is_close_to_tw", "  local\
    \ function closest(num)\n    local diff = math.abs(num - value)\n    if diff <\
    \ 0.5 then\n      return value\n    elseif diff < 2 then\n      return math.floor(num\
    \ + 0.5)\n    else\n      return math.ceil(num - 0.5)\n    end\n  end\n  return\
    \ closest\nend", "  local function is_equidistant(a, b)\n    return math.abs(a\
    \ - b) < 1e-6\n  end\n  local function round_away_from_zero(number)\n    if number\
    \ < 0 then\n      return math.floor(number / 10) * 10 - number\n    else\n   \
    \   return math.ceil(number / 10) * 10 + number\n    end\n  end\n  local function\
    \ is_close_to_zero(number)\n    return number < 1e-6\n  end\n  local function\
    \ is_close_to_other_number(number)\n    return number > 1e-6\n  end\n  local function\
    \ is_close_to_other_number_or_zero(number)\n    return number > 0 or number <\
    \ 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n   \
    \ return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return number > 0 or number < 1e-6\n  end\n  ", "  local function closest(value)\n\
    \    local closest = value\n    local closestDiff = math.abs(value - closest)\n\
    \    local closestDiffSquared = closestDiff * closestDiff\n    local closestDiffSquaredMinusOne\
    \ = closestDiffSquared - 1\n    local closestDiffSquaredMinusTwo = closestDiffSquared\
    \ - 2\n    local closestDiffSquaredMinusThree = closestDiffSquared - 3\n    local\
    \ closestDiffSquaredMinusFour = closestDiffSquared - 4\n    local closestDiffSquaredMinusFive\
    \ = closestDiffSquared - 5\n    local closestDiffSquaredMinusSix = closestDiffSquared\
    \ - 6\n    local closestDiffSquaredMinusSeven = closestDiffSquared - 7\n    local\
    \ closestDiffSquaredMinusEight = closestDiffSquared - 8\n    local closestDiffSquaredMinusNine\
    \ = closestDiffSquared - 9\n    local closestDiffSquaredMinusTen = closestDiffSquared\
    \ - 10\n    local closestDiffSquaredMinusEleven = closestDiffSquared - 11\n  \
    \  local closestDiffSquaredMinusTwelve = closestDiffSquared - 12\n    local closestDiffSquaredMinusThirteen\
    \ = closestDiffSquared - 13\n    local closestDiffSquaredMinusFourteen = closestDiffSquared\
    \ - 14\n    local closestDiffSquaredMinusFifteen = closestDiffSquared - 15\n \
    \   local closestDiffSquaredMinusSixteen = closestDiffSquared - 16\n    local\
    \ closestDiffSquaredMinusSeventeen = closestDiffSquared - 17\n    local closestDiffSquaredMinusEighteen\
    \ = closestDiffSquared - 18\n    local closestDiffSquaredMinusNineteen = closestDiffSquared\
    \ - 19\n    local closestDiffSquaredMinusTwenty = closestDiffSquared - 20\n  \
    \  local closestDiffSquaredMinusTwentyOne = closestDiffSquared - 21\n    local\
    \ closestDiffSquaredMinusTwentyTwo = closestDiffSquared - 22\n    local closestDiffSquaredMinusTwentyThree\
    \ = closestDiffSquared - 23\n    local closestDiffSquaredMinusTwentyFour = closestDiffSquared\
    \ - 24\n    local closestDiffSquaredMinusTwentyFive = closestDiffSquared - 25\n\
    \    local closestDiffSquaredMinusTwentySix = closestDiffSquared - 26\n    local\
    \ closestDiffSquaredMinusTwentySeven = closestDiffSquared - 27\n", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function\
    \ is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local function\
    \ round_away_from_zero(a)\n    return math.floor(a) + math.abs(a - math.floor(a))\n\
    \  end\n  local function round_to_zero(a)\n    return math.floor(a) + math.abs(a\
    \ - math.floor(a))\n  end\n  local function round_to_nearest_integer(a)\n    return\
    \ round_to_zero(round_away_from_zero(a))\n  end\n  local function round_to_nearest_integer_or_zero(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero(round_away_from_zero(a))\n  end\n\
    \  local function round_to_nearest_integer_or_zero_inclusive_or_zero(a)\n    return\
    \ round_to_nearest_integer_or_zero_inclusive(round_away_from_zero(a))\n  end\n\
    \  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive_or_zero(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive_or_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive_or_",
  "  local function closest(value)\n    if value == nil then\n      return nil\n \
    \   end\n    local closest\n    if value ~= tonumber(value) then\n      closest\
    \ = (tonumber(value) + 1):round()\n    else\n      closest = (tonumber(value)\
    \ + 1):round()\n    end\n    if closest == 0 then\n      closest = 1\n    end\n\
    \    return closest\n  end\n  return closest(value)\nend", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-4\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-2\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e0\n  end\n  local function is_close_to_seven(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_eight(a)\n  \
    \  return math.abs(a) < 1e2\n  end\n  local function is_close_to_nine(a)\n   \
    \ return math.abs(a) < 1e3\n  end\n  local function is_close_to_ten(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_eleven(a)\n    return\
    \ math.abs(a) < 1e5\n  end\n  local function is_close_to_twelve(a)\n    return\
    \ math.abs(a) < 1e6\n  end\n  local function is_close_to_thirteen(a)\n    return\
    \ math.abs(a) < 1e7\n  end\n  local function is_close_to_fourteen(a)\n    return\
    \ math.abs(a) < 1e8\n  end\n  local function is_close_to_fifteen(a)\n    return\
    \ math.abs(a) < 1e9\n  end\n  local function is_close_to_sixteen(a)\n    return\
    \ math.abs(a) < 1e10\n  end\n  local function is_close_to_seventeen(a)\n    return\
    \ math.abs(a) < 1e11\n  end\n  local function is_close_to_eighteen(a)\n    return\
    \ math.abs(a) < 1e12\n  end\n  local function is_close_to_nineteen(a)\n    return\
    \ math.abs(a) < 1e13\n  end\n  local function is_close_to_twenty(a)\n    return\
    \ math.abs(a) < 1e14\n  end\n  local function is_close_to_twenty_one(a)\n    return\
    \ math.abs(a) < 1e15\n  end\n  local function is_close_to_twenty_two(a)\n    return\
    \ math.abs(a) < 1e16\n  end\n  local function is_close_to_twenty_three(a)\n  \
    \  return math.abs(a) < 1e17\n  end\n  local function is_close_to_tw", "  local\
    \ function closest(value)\n    if value == nil then\n      return nil\n    end\n\
    \    if value == value then\n      return value\n    end\n    if value < value\
    \ then\n      return value\n    end\n    if value > value then\n      return value\n\
    \    end\n    return value\n  end\n  return closest(value)\nend", "  local function\
    \ closest(num)\n    local difference = math.abs(num - value)\n    if difference\
    \ < math.abs(num - math.floor(value)) then\n      return math.floor(num)\n   \
    \ else\n      return math.ceil(num)\n    end\n  end\n  return closest\nend", " \
    \ local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n\
    \  local function round_away_from_zero(number)\n    return math.floor(number +\
    \ 0.5)\n  end\n  local function round_to_zero(number)\n    return math.floor(number)\n\
    \  end\n  local function round_to_nearest(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_even(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_odd(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_ten(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_hundred(number)\n    return\
    \ math.floor(number + 0.5)\n  end\n  local function round_to_nearest_thousand(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_million(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_billion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_trillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quadrillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quintillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_sextillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_septillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_octillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_nonillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_decillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_undecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_duodecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_tredecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quattuordecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quindecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_neare",
  "  local function closest(value)\n    local closest, err = math.modf(value)\n  \
    \  if err == nil then\n      return closest\n    else\n      return closest\n\
    \    end\n  end", "  local function is_equidistant(a, b)\n    return math.abs(a\
    \ - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ < 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a) <\
    \ 1e-5\n  end\n  local function is_close_to_two(a)\n    return math.abs(a) < 1e-4\n\
    \  end\n  local function is_close_to_three(a)\n    return math.abs(a) < 1e-3\n\
    \  end\n  local function is_close_to_four(a)\n    return math.abs(a) < 1e-2\n\
    \  end\n  local function is_close_to_five(a)\n    return math.abs(a) < 1e-1\n\
    \  end\n  local function is_close_to_six(a)\n    return math.abs(a) < 1e0\n  end\n\
    \  local function is_close_to_seven(a)\n    return math.abs(a) < 1e1\n  end\n\
    \  local function is_close_to_eight(a)\n    return math.abs(a) < 1e2\n  end\n\
    \  local function is_close_to_nine(a)\n    return math.abs(a) < 1e3\n  end\n \
    \ local function is_close_to_ten(a)\n    return math.abs(a) < 1e4\n  end\n  local\
    \ function is_close_to_eleven(a)\n    return math.abs(a) < 1e5\n  end\n  local\
    \ function is_close_to_twelve(a)\n    return math.abs(a) < 1e6\n  end\n  local\
    \ function is_close_to_thirteen(a)\n    return math.abs(a) < 1e7\n  end\n  local\
    \ function is_close_to_fourteen(a)\n    return math.abs(a) < 1e8\n  end\n  local\
    \ function is_close_to_fifteen(a)\n    return math.abs(a) < 1e9\n  end\n  local\
    \ function is_close_to_sixteen(a)\n    return math.abs(a) < 1e10\n  end\n  local\
    \ function is_close_to_seventeen(a)\n    return math.abs(a) < 1e11\n  end\n  local\
    \ function is_close_to_eighteen(a)\n    return math.abs(a) < 1e12\n  end\n  local\
    \ function is_close_to_nineteen(a)\n    return math.abs(a) < 1e13\n  end\n  local\
    \ function is_close_to_twenty(a)\n    return math.abs(a) < 1e14\n  end\n  local\
    \ function is_close_to_twenty_one(a)\n    return math.abs(a) < 1e15\n  end\n \
    \ local function is_close_to_twenty_two(a)\n    return math.abs(a) < 1e16\n  end\n\
    \  local function is_close_to_twenty_three(a)\n    return math.abs(a) < 1e17\n\
    \  end\n  local function is_close_to_tw", "  local function abs(x)\n    if x <\
    \ 0 then\n      return -x\n    else\n      return x\n    end\n  end\n  local function\
    \ closest(x, y)\n    local function abs(x)\n      if x < 0 then\n        return\
    \ -x\n      else\n        return x\n      end\n    end\n    local function closest(x,\
    \ y)\n      local function abs(x)\n        if x < 0 then\n          return -x\n\
    \        else\n          return x\n        end\n      end\n      if abs(x - y)\
    \ < abs(x - y) then\n        return x\n      else\n        return y\n      end\n\
    \    end\n    local function closest(x, y)\n      local function abs(x)\n    \
    \    if x < 0 then\n          return -x\n        else\n          return x\n  \
    \      end\n      end\n      if abs(x - y) < abs(x - y) then\n        return x\n\
    \      else\n        return y\n      end\n    end\n    local function closest(x,\
    \ y)\n      local function abs(x)\n        if x < 0 then\n          return -x\n\
    \        else\n          return x\n        end\n      end\n      if abs(x - y)\
    \ < abs(x - y) then\n        return x\n      else\n        return y\n      end\n\
    \    end\n    local function closest(x, y)\n      local function abs(x)\n    \
    \    if x < 0 then\n          return -x\n        else\n          return x\n  \
    \      end\n      end\n      if abs(x - y) < abs(x - y) then\n        return x\n\
    \      else\n        return y\n      end\n    end\n    local function closest(x,\
    \ y)\n      local function abs(x)\n        if x < 0 then\n          return -x\n\
    \        else\n          return x\n        end\n      end\n      if abs(x - y)\
    \ < abs(x - y) then\n        return x\n      else\n        return y\n      end\n\
    \    end\n    local function closest(x, y)\n      local function abs(x)\n    \
    \    if x < 0 then\n          return -x\n        else\n          return x\n  \
    \      end\n      end\n      if abs(x - y) < abs(x - y) then\n        return x\n\
    \      else\n        return y\n      end\n    end\n    local function closest(x,\
    \ y)\n      local function abs(x)\n        if x < 0 then\n          return -x\n\
    \        else\n          return x\n        end\n      end\n      if abs(x - y)\
    \ < abs(x - y) then\n        return x\n      else\n        return y\n      end\n\
    \    end\n    local function closest(x, y)\n      local function abs(x)\n    \
    \    if x < 0 then\n          return -x\n        else\n          return x\n  \
    \      end\n      end\n      if abs(x - y) < abs(x - y) then\n        return x\n\
    \      else\n        return y\n      end\n    end\n    local function closest(x,\
    \ y)\n      local function abs(x)\n        if x < 0 then\n          return -x\n\
    \        else\n          return x\n        end\n      end\n      if abs(x - y)\
    \ < ", "  local function is_equidistant(v1, v2)\n    return math.abs(v1 - v2)\
    \ < 1e-6\n  end\n  local function round_away_from_zero(v)\n    if v < 0 then\n\
    \      return math.ceil(v - 0.5)\n    else\n      return math.floor(v + 0.5)\n\
    \    end\n  end\n  local function round_to_zero(v)\n    if v < 0 then\n      return\
    \ math.ceil(v)\n    else\n      return math.floor(v)\n    end\n  end\n  local\
    \ function round_to_nearest_integer(v)\n    if v < 0 then\n      return round_away_from_zero(math.ceil(v))\n\
    \    else\n      return round_away_from_zero(math.floor(v))\n    end\n  end\n\
    \  local function round_to_nearest_integer_or_zero(v)\n    if v < 0 then\n   \
    \   return round_to_zero(math.ceil(v))\n    else\n      return round_to_zero(math.floor(v))\n\
    \    end\n  end\n  local function round_to_nearest_integer_or_zero_to_even(v)\n\
    \    if v < 0 then\n      return round_to_zero(math.ceil(v))\n    else\n     \
    \ if v % 2 == 0 then\n        return round_to_zero(math.floor(v))\n      else\n\
    \        return round_to_zero(math.ceil(v))\n      end\n    end\n  end\n  local\
    \ function round_to_nearest_integer_or_zero_to_odd(v)\n    if v < 0 then\n   \
    \   return round_to_zero(math.ceil(v))\n    else\n      if v % 2 == 1 then\n \
    \       return round_to_zero(math.floor(v))\n      else\n        return round_to_zero(math.ceil(v))\n\
    \      end\n    end\n  end\n  local function round_to_nearest_integer_or_zero_to_even_to_even(v)\n\
    \    if v < 0 then\n      return round_to_zero(math.ceil(v))\n    else\n     \
    \ if v % 2 == 0 then\n        if v % 4 == 0 then\n          return round_to_zero(math.floor(v))\n\
    \        else\n          return round_to_zero(math.ceil(v))\n        end\n   \
    \   else\n        return round_to_zero(math.floor(v))\n      end\n    end\n  end\n\
    \  local function round_to_nearest_integer_or_zero_to_odd_to_even(v)\n    if v\
    \ < 0 then\n      return round_to_zero(math.ceil(v))\n    else\n      if v % 2\
    \ == 1 then\n        if v % 4 == 0 then\n          return round_to_zero(math.floor(v))\n\
    \        else\n          return round_to_zero(math.ceil(v))\n        end\n   \
    \   else\n        return round_to_zero(math.floor(v))\n      end\n    end\n  end\n\
    \  local function round_to_neare", "  local function closest(value)\n    if value\
    \ == nil then\n      return nil\n    end\n    if value == 0 then\n      return\
    \ 0\n    end\n    if value == math.floor(value) then\n      return value\n   \
    \ end\n    if value == math.ceil(value) then\n      return value\n    end\n  \
    \  if value < 0 then\n      return math.ceil(value)\n    end\n    return math.floor(value)\n\
    \  end\n  return closest(value)\nend", "  local function closest(value)\n    local\
    \ function abs(x)\n      if x ~= nil then\n        return math.abs(x)\n      else\n\
    \        return 0\n      end\n    end\n    local function round(x)\n      if x\
    \ ~= nil then\n        return math.floor((x + 0.5) * 100) / 100\n      else\n\
    \        return 0\n      end\n    end\n    local function abs(x)\n      if x ~=\
    \ nil then\n        return math.abs(x)\n      else\n        return 0\n      end\n\
    \    end\n    local function round(x)\n      if x ~= nil then\n        return\
    \ math.floor((x + 0.5) * 100) / 100\n      else\n        return 0\n      end\n\
    \    end\n    local function abs(x)\n      if x ~= nil then\n        return math.abs(x)\n\
    \      else\n        return 0\n      end\n    end\n    local function round(x)\n\
    \      if x ~= nil then\n        return math.floor((x + 0.5) * 100) / 100\n  \
    \    else\n        return 0\n      end\n    end\n    local function abs(x)\n \
    \     if x ~= nil then\n        return math.abs(x)\n      else\n        return\
    \ 0\n      end\n    end\n    local function round(x)\n      if x ~= nil then\n\
    \        return math.floor((x + 0.5) * 100) / 100\n      else\n        return\
    \ 0\n      end\n    end\n    local function abs(x)\n      if x ~= nil then\n \
    \       return math.abs(x)\n      else\n        return 0\n      end\n    end\n\
    \    local function round(x)\n      if x ~= nil then\n        return math.floor((x\
    \ + 0.5) * 100) / 100\n      else\n        return 0\n      end\n    end\n    local\
    \ function abs(x)\n      if x ~= nil then\n        return math.abs(x)\n      else\n\
    \        return 0\n      end\n    end\n    local function round(x)\n      if x\
    \ ~= nil then\n        return math.floor((x + 0.5) * 100) / 100\n      else\n\
    \        return 0\n      end\n    end\n    local function abs(x)\n      if x ~=\
    \ nil then\n        return math.abs(x)\n      else\n        return 0\n      end\n\
    \    end\n    local function round(x)\n      if x ~= nil then\n        return\
    \ math.floor((x + 0.5) * 100) / 100\n      else\n        return 0\n      end\n\
    \    end\n    local function abs(x)\n      if x ~= nil then\n        return math.abs(x)\n\
    \      else\n        return 0\n      end\n    end\n    local function round(x)\n\
    \      if x ~= nil then\n        return math.floor((x + 0.5) * 100) / 100\n  \
    \    else\n        return 0", "  local function is_equidistant(v1, v2)\n    return\
    \ math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close(v1, v2)\n    return\
    \ math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1)\n   \
    \ return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero(v2)\n \
    \   return math.abs(v2) < 1e-6\n  end\n  local function is_close_to_zero(v1, v2)\n\
    \    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - ", "  local function closest(value)\n    if value\
    \ == nil then\n      return nil\n    end\n    if value == 0 then\n      return\
    \ 0\n    end\n    local sign = math.sign(value)\n    local int_value = math.floor(value)\n\
    \    local fraction = value - int_value\n    local int_fraction = math.floor(fraction)\n\
    \    local int_fraction_value = int_fraction * 10\n    if int_fraction_value/10\
    \ == int_fraction then\n      return int_value\n    else\n      return int_value\
    \ - int_fraction_value\n    end\n  end\n  return closest(value)\nend", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local\
    \ function round_away_from_zero(a)\n    return math.floor(a + 0.5)\n  end\n  local\
    \ function round_to_zero(a)\n    return math.floor(a - 0.5)\n  end\n  local function\
    \ round_to_nearest_integer(a)\n    return round_to_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero(a)\n    return round_to_nearest_integer(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_inclusive_or_zero(a)\n    return round_to_nearest_integer_or_zero_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero(a) or 0\n  end\n\
    \  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(a) or\
    \ 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive",
  "  local function closest(value)\n    local closest\n    local diff\n    local diff2\n\
    \    local diff3\n    local diff4\n    local diff5\n    local diff6\n    local\
    \ diff7\n    local diff8\n    local diff9\n    local diff10\n    local diff11\n\
    \    local diff12\n    local diff13\n    local diff14\n    local diff15\n    local\
    \ diff16\n    local diff17\n    local diff18\n    local diff19\n    local diff20\n\
    \    local diff21\n    local diff22\n    local diff23\n    local diff24\n    local\
    \ diff25\n    local diff26\n    local diff27\n    local diff28\n    local diff29\n\
    \    local diff30\n    local diff31\n    local diff32\n    local diff33\n    local\
    \ diff34\n    local diff35\n    local diff36\n    local diff37\n    local diff38\n\
    \    local diff39\n    local diff40\n    local diff41\n    local diff42\n    local\
    \ diff43\n    local diff44\n    local diff45\n    local diff46\n    local diff47\n\
    \    local diff48\n    local diff49\n    local diff50\n    local diff51\n    local\
    \ diff52\n    local diff53\n    local diff54\n    local diff55\n    local diff56\n\
    \    local diff57\n    local diff58\n    local diff59\n    local diff60\n    local\
    \ diff61\n    local diff62\n    local diff63\n    local diff64\n    local diff65\n\
    \    local diff66\n    local diff67\n    local diff68\n    local diff69\n    local\
    \ diff70\n    local diff71\n    local diff72\n    local diff73\n    local diff74\n\
    \    local diff75\n    local diff76\n    local diff77\n    local diff78\n    local\
    \ diff79\n    local diff80\n    local diff81\n    local diff82\n    local diff83\n\
    \    local diff84\n    local diff85\n    local diff86\n    local diff87\n    local\
    \ diff88\n    local diff89\n    local diff90\n    local diff91\n    local diff92\n\
    \    local diff93\n    local diff94\n    local diff95\n    local diff96\n    local\
    \ diff97\n    local diff98\n    local diff99\n    local diff100\n    local diff",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end",
  "  local function abs(n)\n    return math.abs(n)\n  end\n  local function is_equidistant(n1,\
    \ n2)\n    return abs(n1 - n2) <= 1e-6\n  end\n  local function round_away_from_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10) * 10\n  end\n  local function round_to_nearest_ten_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(n)\n\
    \    return math.floor(n / 10", "  local function closest_integer(value)\n   \
    \ if value == nil then\n      return nil\n    end\n    local sign = math.sign(value)\n\
    \    local sign2 = sign * sign\n    local absValue = abs(value)\n    local absValue2\
    \ = absValue * absValue\n    local absValue3 = absValue2 * absValue\n    local\
    \ absValue4 = absValue3 * absValue\n    local absValue5 = absValue4 * absValue\n\
    \    local absValue6 = absValue5 * absValue\n    local absValue7 = absValue6 *\
    \ absValue\n    local absValue8 = absValue7 * absValue\n    local absValue9 =\
    \ absValue8 * absValue\n    local absValue10 = absValue9 * absValue\n    local\
    \ absValue11 = absValue10 * absValue\n    local absValue12 = absValue11 * absValue\n\
    \    local absValue13 = absValue12 * absValue\n    local absValue14 = absValue13\
    \ * absValue\n    local absValue15 = absValue14 * absValue\n    local absValue16\
    \ = absValue15 * absValue\n    local absValue17 = absValue16 * absValue\n    local\
    \ absValue18 = absValue17 * absValue\n    local absValue19 = absValue18 * absValue\n\
    \    local absValue20 = absValue19 * absValue\n    local absValue21 = absValue20\
    \ * absValue\n    local absValue22 = absValue21 * absValue\n    local absValue23\
    \ = absValue22 * absValue\n    local absValue24 = absValue23 * absValue\n    local\
    \ absValue25 = absValue24 * absValue\n    local absValue26 = absValue25 * absValue\n\
    \    local absValue27 = absValue26 * absValue\n    local absValue28 = absValue27\
    \ * absValue\n    local absValue29 = absValue28 * absValue\n    local absValue30\
    \ = absValue29 * absValue\n    local absValue31 = absValue30 * absValue\n    local\
    \ absValue32 = absValue31 * absValue\n    local absValue33 = absValue32 * absValue\n\
    \    local absValue34 = absValue33 * absValue\n    local absValue35 = absValue34\
    \ * absValue\n    local absValue36 = absValue35 * absValue\n    local absValue37\
    \ = absValue36 * absValue\n    local absValue38 = absValue37 * absValue\n    local\
    \ absValue39 = abs", "  local function is_equidistant(v1, v2)\n    return math.abs(v1\
    \ - v2) < 1e-6\n  end\n  local function round_away_from_zero(v1, v2)\n    if v1\
    \ ~= nil and v2 ~= nil then\n      if is_equidistant(v1, v2) then\n        return\
    \ v1\n      else\n        return v2\n      end\n    end\n  end\n  local function\
    \ round_to_zero(v1, v2)\n    if v1 ~= nil and v2 ~= nil then\n      if is_equidistant(v1,\
    \ v2) then\n        return round_away_from_zero(v2, v1)\n      else\n        return\
    \ round_away_from_zero(v1, v2)\n      end\n    end\n  end\n  local function round_to_zero_to_even(v1,\
    \ v2)\n    if v1 ~= nil and v2 ~= nil then\n      if is_equidistant(v1, v2) then\n\
    \        return round_to_zero(v2, v1)\n      else\n        return round_to_zero(v1,\
    \ v2)\n      end\n    end\n  end\n  local function round_to_zero_to_odd(v1, v2)\n\
    \    if v1 ~= nil and v2 ~= nil then\n      if is_equidistant(v1, v2) then\n \
    \       return round_to_zero(v1, v2)\n      else\n        return round_to_zero(v2,\
    \ v1)\n      end\n    end\n  end\n  local function round_to_zero_to_even_to_even(v1,\
    \ v2)\n    if v1 ~= nil and v2 ~= nil then\n      if is_equidistant(v1, v2) then\n\
    \        return round_to_zero_to_even(v2, v1)\n      else\n        return round_to_zero_to_even(v1,\
    \ v2)\n      end\n    end\n  end\n  local function round_to_zero_to_odd_to_odd(v1,\
    \ v2)\n    if v1 ~= nil and v2 ~= nil then\n      if is_equidistant(v1, v2) then\n\
    \        return round_to_zero_to_odd(v1, v2)\n      else\n        return round_to_zero_to_odd(v2,\
    \ v1)\n      end\n    end\n  end\n  local function round_to_zero_to_even_to_odd_to_even(v1,\
    \ v2)\n    if v1 ~= nil and v2 ~= nil then\n      if is_equidistant(v1, v2) then\n\
    \        return round_to_zero_to_even_to_even(v2, v1)\n      else\n        return\
    \ round_to_zero_to_even_to_even(v1, v2)\n      end\n    end\n  end\n  local function\
    \ round_to_zero_to_odd_to_odd_to_", "  local function is_equidistant(v1, v2)\n\
    \    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close(v1, v2)\n\
    \    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1)\n\
    \    return math.abs(v1 - 0) < 1e-6\n  end\n  local function is_close_to_zero2(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero3(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero4(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero5(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero6(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero7(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero8(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero9(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero10(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero11(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero12(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero13(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero14(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero15(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero16(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero17(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero18(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero19(v1,\
    \ v2)\n    return math.abs(v1 - v2) < ", "  local function closest(num)\n    local\
    \ mod = math.floor(num / 10)\n    local remainder = num - mod * 10\n    if mod\
    \ > 0 then\n      return mod + 10\n    elseif remainder < 0 then\n      return\
    \ mod + 10\n    else\n      return mod\n    end\n  end", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end", "  local function closest(value,\
    \ low, high)\n    if value == low then\n      return low\n    end\n    if value\
    \ == high then\n      return high\n    end\n    local mid = (low + high) / 2\n\
    \    if value < mid then\n      return closest(value, low, mid)\n    else\n  \
    \    return closest(value, mid, high)\n    end\n  end\n  return closest(value,\
    \ \"0\", \"0\")\nend", "  local function is_equidistant(a, b)\n    return math.abs(a\
    \ - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ < 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a) <\
    \ 1e-5\n  end\n  local function is_close_to_two(a)\n    return math.abs(a) < 1e-4\n\
    \  end\n  local function is_close_to_three(a)\n    return math.abs(a) < 1e-3\n\
    \  end\n  local function is_close_to_four(a)\n    return math.abs(a) < 1e-2\n\
    \  end\n  local function is_close_to_five(a)\n    return math.abs(a) < 1e-1\n\
    \  end\n  local function is_close_to_six(a)\n    return math.abs(a) < 1e0\n  end\n\
    \  local function is_close_to_seven(a)\n    return math.abs(a) < 1e1\n  end\n\
    \  local function is_close_to_eight(a)\n    return math.abs(a) < 1e2\n  end\n\
    \  local function is_close_to_nine(a)\n    return math.abs(a) < 1e3\n  end\n \
    \ local function is_close_to_ten(a)\n    return math.abs(a) < 1e4\n  end\n  local\
    \ function is_close_to_eleven(a)\n    return math.abs(a) < 1e5\n  end\n  local\
    \ function is_close_to_twelve(a)\n    return math.abs(a) < 1e6\n  end\n  local\
    \ function is_close_to_thirteen(a)\n    return math.abs(a) < 1e7\n  end\n  local\
    \ function is_close_to_fourteen(a)\n    return math.abs(a) < 1e8\n  end\n  local\
    \ function is_close_to_fifteen(a)\n    return math.abs(a) < 1e9\n  end\n  local\
    \ function is_close_to_sixteen(a)\n    return math.abs(a) < 1e10\n  end\n  local\
    \ function is_close_to_seventeen(a)\n    return math.abs(a) < 1e11\n  end\n  local\
    \ function is_close_to_eighteen(a)\n    return math.abs(a) < 1e12\n  end\n  local\
    \ function is_close_to_nineteen(a)\n    return math.abs(a) < 1e13\n  end\n  local\
    \ function is_close_to_twenty(a)\n    return math.abs(a) < 1e14\n  end\n  local\
    \ function is_close_to_twenty_one(a)\n    return math.abs(a) < 1e15\n  end\n \
    \ local function is_close_to_twenty_two(a)\n    return math.abs(a) < 1e16\n  end\n\
    \  local function is_close_to_twenty_three(a)\n    return math.abs(a) < 1e17\n\
    \  end\n  local function is_close_to_tw", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end", "  local function closest(value)\n\
    \    local difference = value - math.floor(value)\n    if difference < 0 then\n\
    \      return math.floor(value)\n    else\n      return math.ceil(value)\n   \
    \ end\n  end", "  local function is_equidistant(a, b)\n    return math.abs(a -\
    \ b) < 1e-6\n  end\n  local function round_away_from_zero(number)\n    return\
    \ math.floor(number + 0.5)\n  end\n  local function is_negative(number)\n    return\
    \ number < 0\n  end\n  local function is_positive(number)\n    return number >\
    \ 0\n  end\n  local function is_integer(number)\n    return math.floor(number)\
    \ == number\n  end\n  local function is_zero(number)\n    return number == 0\n\
    \  end\n  local function is_positive_integer(number)\n    return is_integer(number)\
    \ and is_positive(number)\n  end\n  local function is_negative_integer(number)\n\
    \    return is_integer(number) and is_negative(number)\n  end\n  local function\
    \ is_equidistant_integer(number)\n    return is_integer(number) and is_equidistant(number,\
    \ round_away_from_zero(number))\n  end\n  local function is_equidistant_integer(number)\n\
    \    return is_integer(number) and is_equidistant(number, round_away_from_zero(number))\n\
    \  end\n  local function is_equidistant_integer(number)\n    return is_integer(number)\
    \ and is_equidistant(number, round_away_from_zero(number))\n  end\n  local function\
    \ is_equidistant_integer(number)\n    return is_integer(number) and is_equidistant(number,\
    \ round_away_from_zero(number))\n  end\n  local function is_equidistant_integer(number)\n\
    \    return is_integer(number) and is_equidistant(number, round_away_from_zero(number))\n\
    \  end\n  local function is_equidistant_integer(number)\n    return is_integer(number)\
    \ and is_equidistant(number, round_away_from_zero(number))\n  end\n  local function\
    \ is_equidistant_integer(number)\n    return is_integer(number) and is_equidistant(number,\
    \ round_away_from_zero(number))\n  end\n  local function is_equidistant_integer(number)\n\
    \    return is_integer(number) and is_equidistant(number, round_away_from_zero(number))\n\
    \  end\n  local function is_equidistant_integer(number)\n    return is_integer(number)\
    \ and is_equidistant(number, round_away_from_zero(number))\n  end\n  local function\
    \ is_equidistant_integer(number)\n    return is_integer(number) and is_equidistant(number,\
    \ round_away_from_zero(number))\n  end\n  local function is_equidistant_integer(number)\n\
    \    return is_integ", "  local function closest(value)\n    if value == nil then\n\
    \      return nil\n    end\n    local sign = math.sign(value)\n    local magnitude\
    \ = math.abs(value)\n    local magnitude2 = math.abs(value - 1)\n    local magnitude3\
    \ = math.abs(value - 2)\n    local magnitude4 = math.abs(value - 3)\n    local\
    \ magnitude5 = math.abs(value - 4)\n    local magnitude6 = math.abs(value - 5)\n\
    \    local magnitude7 = math.abs(value - 6)\n    local magnitude8 = math.abs(value\
    \ - 7)\n    local magnitude9 = math.abs(value - 8)\n    local magnitude10 = math.abs(value\
    \ - 9)\n    local magnitude11 = math.abs(value - 10)\n    local magnitude12 =\
    \ math.abs(value - 11)\n    local magnitude13 = math.abs(value - 12)\n    local\
    \ magnitude14 = math.abs(value - 13)\n    local magnitude15 = math.abs(value -\
    \ 14)\n    local magnitude16 = math.abs(value - 15)\n    local magnitude17 = math.abs(value\
    \ - 16)\n    local magnitude18 = math.abs(value - 17)\n    local magnitude19 =\
    \ math.abs(value - 18)\n    local magnitude20 = math.abs(value - 19)\n    local\
    \ magnitude21 = math.abs(value - 20)\n    local magnitude22 = math.abs(value -\
    \ 21)\n    local magnitude23 = math.abs(value - 22)\n    local magnitude24 = math.abs(value\
    \ - 23)\n    local magnitude25 = math.abs(value - 24)\n    local magnitude26 =\
    \ math.abs(value - 25)\n    local magnitude27 = math.abs(value - 26)\n    local\
    \ magnitude28 = math.abs(value - 27)\n    local magnitude29 = math.abs(value -\
    \ 28)\n    local magnitude30 = math.abs(value - 29)\n    local magnitude31 = math.abs(value\
    \ - 30)\n    local magnitude32 = math.abs(value - 31)\n    local magnitude33 =\
    \ math.abs(value - 32)\n    local magnitude34 = math.abs(value - 33)\n    local\
    \ magnitude35 = math.abs(value - 34)\n    local magnitude36 = math.abs(value -\
    \ 35)\n    local magnitude37 = math.abs(value - 36)\n    local magnitude38 = math.abs(value\
    \ - 37)\n    local magnitude39 = math.abs(value - 38)\n    local magnitude40 =\
    \ math.abs(value - 39)\n    local magnitude41 = math.abs(value - 40)\n    local\
    \ magnitude42 = math.abs(value - 41)\n    local magnitude43 = math.abs(value -\
    \ 42)\n    local magnitude44 = math.abs(value - 43)\n    local magnitude45 = math.abs(value\
    \ - 44)\n    local magnitude46 = math.abs(value - 45)\n    local magnitude47 =\
    \ math.abs(value - 46)\n    local magnitude48 = math.abs(value - 47)\n", "  local\
    \ function abs(x)\n    if x < 0 then\n      return -x\n    end\n    return x\n\
    \  end", "  local function closest(value, lower, upper)\n    if lower == upper\
    \ then return lower\n    if value < lower then return lower\n    if value > upper\
    \ then return upper\n    return value\n  end\n  local lower = tonumber(value)\n\
    \  local upper = lower + math.abs(lower)\n  return closest(lower, lower, upper)\n\
    end", "  local function closest(value)\n    local sign = math.sign(value)\n  \
    \  local signs = sign == 0 and 1 or -1\n    local abs = math.abs(value)\n    local\
    \ signabs = math.abs(sign)\n    local diffabs = abs - signabs\n    local diffsign\
    \ = signs - sign\n    local diffsigns = diffsign == 0 and 1 or -1\n    local diffabs\
    \ = diffabs * diffsigns\n    local round = math.floor(diffabs)\n    if round ==\
    \ diffabs then\n      return sign\n    else\n      return round + diffsigns\n\
    \    end\n  end\n  return closest(value)\nend", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close(a, b)\
    \ -- Returns true if a is closer to b than b\n    return math.abs(a - b) < 1e-6\n\
    \  end\n  local function is_close_to_zero(a) -- Returns true if a is close to\
    \ zero\n    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\
    \ -- Returns true if a is close to one\n    return math.abs(a) < 1e-6\n  end\n\
    \  local function is_close_to_two(a) -- Returns true if a is close to two\n  \
    \  return math.abs(a) < 1e-6\n  end\n  local function is_close_to_three(a) --\
    \ Returns true if a is close to three\n    return math.abs(a) < 1e-6\n  end\n\
    \  local function is_close_to_four(a) -- Returns true if a is close to four\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_five(a) --\
    \ Returns true if a is close to five\n    return math.abs(a) < 1e-6\n  end\n \
    \ local function is_close_to_six(a) -- Returns true if a is close to six\n   \
    \ return math.abs(a) < 1e-6\n  end\n  local function is_close_to_seven(a) -- Returns\
    \ true if a is close to seven\n    return math.abs(a) < 1e-6\n  end\n  local function\
    \ is_close_to_eight(a) -- Returns true if a is close to eight\n    return math.abs(a)\
    \ < 1e-6\n  end\n  local function is_close_to_nine(a) -- Returns true if a is\
    \ close to nine\n    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_ten(a)\
    \ -- Returns true if a is close to ten\n    return math.abs(a) < 1e-6\n  end\n\
    \  local function is_close_to_eleven(a) -- Returns true if a is close to eleven\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_twelve(a)\
    \ -- Returns true if a is close to twelve\n    return math.abs(a) < 1e-6\n  end\n\
    \  local function is_close_to_thirteen(a) -- Returns true if a is close to thirteen\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_fourteen(a)\
    \ -- Returns true if a is close to fourteen\n    return math.abs(a) < 1e-6\n \
    \ end\n  local function is_close_to_fifteen(a) -- Returns true if a is close to\
    \ fifteen\n    return math.", "  local function is_equidistant(a, b)\n    return\
    \ math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a)\
    \ < 1e-5\n  end\n  local function is_close_to_two(a)\n    return math.abs(a) <\
    \ 1e-4\n  end\n  local function is_close_to_three(a)\n    return math.abs(a) <\
    \ 1e-3\n  end\n  local function is_close_to_four(a)\n    return math.abs(a) <\
    \ 1e-2\n  end\n  local function is_close_to_five(a)\n    return math.abs(a) <\
    \ 1e-1\n  end\n  local function is_close_to_six(a)\n    return math.abs(a) < 1e0\n\
    \  end\n  local function is_close_to_seven(a)\n    return math.abs(a) < 1e1\n\
    \  end\n  local function is_close_to_eight(a)\n    return math.abs(a) < 1e2\n\
    \  end\n  local function is_close_to_nine(a)\n    return math.abs(a) < 1e3\n \
    \ end\n  local function is_close_to_ten(a)\n    return math.abs(a) < 1e4\n  end\n\
    \  local function is_close_to_eleven(a)\n    return math.abs(a) < 1e5\n  end\n\
    \  local function is_close_to_twelve(a)\n    return math.abs(a) < 1e6\n  end\n\
    \  local function is_close_to_thirteen(a)\n    return math.abs(a) < 1e7\n  end\n\
    \  local function is_close_to_fourteen(a)\n    return math.abs(a) < 1e8\n  end\n\
    \  local function is_close_to_fifteen(a)\n    return math.abs(a) < 1e9\n  end\n\
    \  local function is_close_to_sixteen(a)\n    return math.abs(a) < 1e10\n  end\n\
    \  local function is_close_to_seventeen(a)\n    return math.abs(a) < 1e11\n  end\n\
    \  local function is_close_to_eighteen(a)\n    return math.abs(a) < 1e12\n  end\n\
    \  local function is_close_to_nineteen(a)\n    return math.abs(a) < 1e13\n  end\n\
    \  local function is_close_to_twenty(a)\n    return math.abs(a) < 1e14\n  end\n\
    \  local function is_close_to_twenty_one(a)\n    return math.abs(a) < 1e15\n \
    \ end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a) < 1e16\n\
    \  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a) <\
    \ 1e17\n  end\n  local function is_close_to_tw", "  local function abs(x)\n  \
    \  return x >= 0 and x or -x\n  end\n  local function is_equidistant(x, y)\n \
    \   return abs(x - y) < 1e-6\n  end\n  local function round_away_from_zero(x)\n\
    \    return math.floor(x + 0.5)\n  end\n  local function is_negative(x)\n    return\
    \ x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n  end\n  local\
    \ function is_zero(x)\n    return x == 0\n  end\n  local function is_integer(x)\n\
    \    return x == math.floor(x)\n  end\n  local function is_close_to_zero(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_one(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_two(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_three(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_four(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_five(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_six(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_seven(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_eight(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_nine(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_ten(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_eleven(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_twelve(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_thirteen(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_fourteen(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_fifteen(x)\n\
    \    return abs(x - round_away_from_zero(x)) ", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function round_away_from_zero(value)\n\
    \    return math.floor(value / 2) + math.abs(value % 2)\n  end\n  local function\
    \ round_half_up(value)\n    return math.floor(value / 2) + math.floor(value /\
    \ 2)\n  end\n  local function round_half_down(value)\n    return math.floor(value\
    \ / 2) - math.floor(value / 2)\n  end\n  local function round_half_even(value)\n\
    \    return math.floor(value / 2) + math.floor(value / 4)\n  end\n  local function\
    \ round_half_odd(value)\n    return math.floor(value / 2) - math.floor(value /\
    \ 2)\n  end\n  local function round_half_to_even(value)\n    return math.floor(value\
    \ / 2) + math.floor(value / 8)\n  end\n  local function round_half_to_odd(value)\n\
    \    return math.floor(value / 2) - math.floor(value / 2)\n  end\n  local function\
    \ round_half_to_even_to_even(value)\n    return math.floor(value / 2) + math.floor(value\
    \ / 16)\n  end\n  local function round_half_to_odd_to_odd(value)\n    return math.floor(value\
    \ / 2) - math.floor(value / 2)\n  end\n  local function round_half_to_even_to_odd(value)\n\
    \    return math.floor(value / 2) + math.floor(value / 16)\n  end\n  local function\
    \ round_half_to_odd_to_even(value)\n    return math.floor(value / 2) - math.floor(value\
    \ / 2)\n  end\n  local function round_half_to_even_to_even_to_even(value)\n  \
    \  return math.floor(value / 2) + math.floor(value / 32)\n  end\n  local function\
    \ round_half_to_odd_to_odd_to_odd(value)\n    return math.floor(value / 2) - math.floor(value\
    \ / 2)\n  end\n  local function round_half_to_even_to_odd_to_even(value)\n   \
    \ return math.floor(value / 2) + math.floor(value / 32)\n  end\n  local function\
    \ round_half_to_odd_to_even_to_odd(value)\n    return math.floor(value / 2) -\
    \ math.floor(value / 2)\n  end\n  local function round_half_to_even_to_even_to_even_to_even(value)\n\
    \    return math.floor(value / 2) + math.floor(value / 64)\n  end\n  local function\
    \ round_half_to_odd_to_odd_to_odd_to_odd(value)\n    return math.floor(value /\
    \ 2) - math.floor(value / 2)\n  end\n  local function round_half_to_even_to_odd_to_even_to_odd(value)\n\
    \    return math.floor(value / 2) + math.floor(value / 64)\n  end\n  local function\
    \ round_half_to_odd_to_even_to_odd_to_even(value)\n    return math.floor(value\
    \ / 2) - math.floor(value / 2)\n  end\n", "  local function closest(value)\n \
    \   if value == nil then\n      return nil\n    end\n    local diff, sign = math.abs(value\
    \ - value), 1\n    if diff < 0 then\n      sign = -1\n      diff = diff * -1\n\
    \    end\n    local diff, sign = diff * sign, 1\n    if diff < 0 then\n      sign\
    \ = -1\n      diff = diff * -1\n    end\n    local diff, sign = diff * sign, 1\n\
    \    if diff < 0 then\n      sign = -1\n      diff = diff * -1\n    end\n    local\
    \ diff, sign = diff * sign, 1\n    if diff < 0 then\n      sign = -1\n      diff\
    \ = diff * -1\n    end\n    local diff, sign = diff * sign, 1\n    if diff < 0\
    \ then\n      sign = -1\n      diff = diff * -1\n    end\n    local diff, sign\
    \ = diff * sign, 1\n    if diff < 0 then\n      sign = -1\n      diff = diff *\
    \ -1\n    end\n    local diff, sign = diff * sign, 1\n    if diff < 0 then\n \
    \     sign = -1\n      diff = diff * -1\n    end\n    local diff, sign = diff\
    \ * sign, 1\n    if diff < 0 then\n      sign = -1\n      diff = diff * -1\n \
    \   end\n    local diff, sign = diff * sign, 1\n    if diff < 0 then\n      sign\
    \ = -1\n      diff = diff * -1\n    end\n    local diff, sign = diff * sign, 1\n\
    \    if diff < 0 then\n      sign = -1\n      diff = diff * -1\n    end\n    local\
    \ diff, sign = diff * sign, 1\n    if diff < 0 then\n      sign = -1\n      diff\
    \ = diff * -1\n    end\n    local diff, sign = diff * sign, 1\n    if diff < 0\
    \ then\n      sign = -1\n      diff = diff * -1\n    end\n    local diff, sign\
    \ = diff * sign, 1\n    if diff < 0 then\n      sign = -1\n      diff = diff *\
    \ -1\n    end\n    local diff, sign = diff * sign, 1\n    if diff < 0 then\n \
    \     sign = -1\n      diff = diff * -1\n    end\n    local diff, sign = diff\
    \ * sign, 1\n    if diff < 0 then\n      sign = -1\n      diff = diff * -1\n \
    \   end\n    local diff, sign = diff * sign, 1\n    if diff < 0 then\n      sign\
    \ = -1\n      diff = diff * -1\n    end\n    local diff, sign = diff * sign, 1\n\
    \    if diff ", "  local function closest(num)\n    local diff = math.abs(num\
    \ - value)\n    if diff < 0.5 then\n      return value\n    else\n      return\
    \ math.floor(num + 0.5)\n    end\n  end\n  return closest\nend", "  local function\
    \ is_equidistant(v1, v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local\
    \ function is_close(v1, v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local\
    \ function is_close_to_zero(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero2(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero3(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero4(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero5(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero6(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero7(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero8(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero9(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero10(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero11(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero12(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero13(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero14(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero15(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero16(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero17(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero18(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero19(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero20(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close_to_zero21(v1)\n    return math.abs(v1) < 1e-6\n  end\n  local\
    \ function is_close", "  local function is_equidistant(a, b)\n    return math.abs(a\
    \ - b) < 1e-6\n  end\n  local function round_away_from_zero(a)\n    return math.floor(a\
    \ + 0.5)\n  end\n  local function round_to_zero(a)\n    return math.floor(a -\
    \ 0.5)\n  end\n  local function round_to_nearest_integer(a)\n    return round_to_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero(a)\n    return round_to_nearest_integer(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero(round_away_from_zero(a))\n  end\n\
    \  local function round_to_nearest_integer_or_zero_inclusive_or_zero(a)\n    return\
    \ round_to_nearest_integer_or_zero_inclusive(round_away_from_zero(a))\n  end\n\
    \  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_in",
  "  local function closest(value)\n    local diff\n    if value == \"-\" then\n \
    \     diff = 1\n    else\n      diff = tonumber(value)\n    end\n    local closest\n\
    \    if diff > 0 then\n      closest = (math.floor(diff + 0.5) + diff / 2)\n \
    \   else\n      closest = (math.floor(diff - 0.5) + diff / 2)\n    end\n    return\
    \ closest\n  end\n  local closest\n  if value == \"-\" then\n    closest = (math.floor(value\
    \ + 0.5) + value / 2)\n  else\n    closest = (math.floor(value - 0.5) + value\
    \ / 2)\n  end\n  return closest\nend", "  local function is_equidistant(a, b)\n\
    \    return math.abs(a - b) <= math.abs(a) + math.abs(b)\n  end\n  local function\
    \ is_close_to_zero(a)\n    return math.abs(a) <= math.abs(a) + math.abs(a)\n \
    \ end\n  local function is_close_to_one(a)\n    return math.abs(a) <= math.abs(a)\
    \ + math.abs(a)\n  end\n  local function is_close_to_two(a)\n    return math.abs(a)\
    \ <= math.abs(a) + math.abs(a)\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) <= math.abs(a) + math.abs(a)\n  end\n  local function\
    \ is_close_to_four(a)\n    return math.abs(a) <= math.abs(a) + math.abs(a)\n \
    \ end\n  local function is_close_to_five(a)\n    return math.abs(a) <= math.abs(a)\
    \ + math.abs(a)\n  end\n  local function is_close_to_six(a)\n    return math.abs(a)\
    \ <= math.abs(a) + math.abs(a)\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) <= math.abs(a) + math.abs(a)\n  end\n  local function\
    \ is_close_to_eight(a)\n    return math.abs(a) <= math.abs(a) + math.abs(a)\n\
    \  end\n  local function is_close_to_nine(a)\n    return math.abs(a) <= math.abs(a)\
    \ + math.abs(a)\n  end\n  local function is_close_to_ten(a)\n    return math.abs(a)\
    \ <= math.abs(a) + math.abs(a)\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) <= math.abs(a) + math.abs(a)\n  end\n  local function\
    \ is_close_to_twelve(a)\n    return math.abs(a) <= math.abs(a) + math.abs(a)\n\
    \  end\n  local function is_close_to_thirteen(a)\n    return math.abs(a) <= math.abs(a)\
    \ + math.abs(a)\n  end\n  local function is_close_to_fourteen(a)\n    return math.abs(a)\
    \ <= math.abs(a) + math.abs(a)\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + math.abs(a)\n  end\n  local function\
    \ is_close_to_sixteen(a)\n    return math.abs(a) <= math.abs(a) + math.abs(a)\n\
    \  end\n  local function is_close_to_seventeen(a)\n    return math.abs(a) <= math.abs(a)\
    \ + math.abs(a)\n  end\n  local function is_close_to_eighteen(a)\n    return math.abs(a)\
    \ <= math.abs(a) + math.abs(a)\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(", "  local function is_equidistant(a, b)\n    return math.abs(a\
    \ - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ < 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a) >\
    \ 1e-6\n  end\n  local function is_close_to_two(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_three(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_four(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_five(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_six(a)\n    return math.abs(a) > 1e-6\n \
    \ end\n  local function is_close_to_seven(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_eight(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_nine(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_ten(a)\n    return math.abs(a) > 1e-6\n \
    \ end\n  local function is_close_to_eleven(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_twelve(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_thirteen(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_fourteen(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_fifteen(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_sixteen(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_seventeen(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_eighteen(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_nineteen(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_twenty(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_twenty_one(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a) > 1e-6\n\
    \  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a) >\
    \ 1e-6\n  end\n  local function is_close_to_", "  local function closest(num)\n\
    \    local difference = math.abs(num - value)\n    if difference < 0.1 then\n\
    \      return value\n    elseif difference < 0.3 then\n      return math.floor(num\
    \ + 0.5)\n    elseif difference < 0.5 then\n      return math.floor(num + 0.2)\n\
    \    else\n      return math.floor(num + 0.1)\n    end\n  end\n  return closest\n\
    end", "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n\
    \  end\n  local function round_away_from_zero(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function is_negative(number)\n    return number < 0\n\
    \  end\n  local function is_positive(number)\n    return number > 0\n  end\n \
    \ local function is_integer(number)\n    return type(number) == \"number\" and\
    \ math.floor(number) == number\n  end\n  local function is_float(number)\n   \
    \ return type(number) == \"number\" and math.floor(number) == number\n  end\n\
    \  local function is_nan(number)\n    return type(number) == \"number\" and math.floor(number)\
    \ == number\n  end\n  local function is_integer(number)\n    return type(number)\
    \ == \"number\" and math.floor(number) == number\n  end\n  local function is_float(number)\n\
    \    return type(number) == \"number\" and math.floor(number) == number\n  end\n\
    \  local function is_nan(number)\n    return type(number) == \"number\" and math.floor(number)\
    \ == number\n  end\n  local function is_integer(number)\n    return type(number)\
    \ == \"number\" and math.floor(number) == number\n  end\n  local function is_float(number)\n\
    \    return type(number) == \"number\" and math.floor(number) == number\n  end\n\
    \  local function is_nan(number)\n    return type(number) == \"number\" and math.floor(number)\
    \ == number\n  end\n  local function is_integer(number)\n    return type(number)\
    \ == \"number\" and math.floor(number) == number\n  end\n  local function is_float(number)\n\
    \    return type(number) == \"number\" and math.floor(number) == number\n  end\n\
    \  local function is_nan(number)\n    return type(number) == \"number\" and math.floor(number)\
    \ == number\n  end\n  local function is_integer(number)\n    return type(number)\
    \ == \"number\" and math.floor(number) == number\n  end\n  local function is_float(number)\n\
    \    return type(number) == \"number\" and math.floor(number) == number\n  end\n\
    \  local function is_nan(number)\n    return type(number) == \"number\" and math.floor(number)\
    \ == number\n  end\n  local function is_integer(number)\n    return type(number)\
    \ == \"number\" and math.floor(number) == number\n  end\n  local function is_float(number)\n\
    \    return type(number) == \"number\" and math.floor(number) == number\n  end\n\
    \  local function is_nan(number)\n    return type(number) == \"number\" and math.floor(number)\
    \ == number\n  end\n  local function is_integer(number)\n    return type(number)\
    \ == \"number\" and math.floor(number) == number\n  end\n  local function is_float(number)\n\
    \    return type(number) == \"number\" and math.floor(number) == number\n  end\n\
    \  local function is_nan(number)\n", "  local function closest(num)\n    local\
    \ num = tonumber(num)\n    if num == nil then\n      return nil\n    end\n   \
    \ local diff\n    if num < 0 then\n      diff = num\n    else\n      diff = tonumber(math.abs(num))\n\
    \    end\n    local closest\n    if diff < 0 then\n      closest = math.floor(diff)\n\
    \    else\n      closest = math.ceil(diff)\n    end\n    if closest == 0 then\n\
    \      return nil\n    end\n    return closest\n  end\n  local function closest(num)\n\
    \    local num = tonumber(num)\n    if num == nil then\n      return nil\n   \
    \ end\n    local diff\n    if num < 0 then\n      diff = num\n    else\n     \
    \ diff = tonumber(math.abs(num))\n    end\n    local closest\n    if diff < 0\
    \ then\n      closest = math.floor(diff)\n    else\n      closest = math.ceil(diff)\n\
    \    end\n    if closest == 0 then\n      return nil\n    end\n    return closest\n\
    \  end\n  local function closest(num)\n    local num = tonumber(num)\n    if num\
    \ == nil then\n      return nil\n    end\n    local diff\n    if num < 0 then\n\
    \      diff = num\n    else\n      diff = tonumber(math.abs(num))\n    end\n \
    \   local closest\n    if diff < 0 then\n      closest = math.floor(diff)\n  \
    \  else\n      closest = math.ceil(diff)\n    end\n    if closest == 0 then\n\
    \      return nil\n    end\n    return closest\n  end\n  local function closest(num)\n\
    \    local num = tonumber(num)\n    if num == nil then\n      return nil\n   \
    \ end\n    local diff\n    if num < 0 then\n      diff = num\n    else\n     \
    \ diff = tonumber(math.abs(num))\n    end\n    local closest\n    if diff < 0\
    \ then\n      closest = math.floor(diff)\n    else\n      closest = math.ceil(diff)\n\
    \    end\n    if closest == 0 then\n      return nil\n    end\n    return closest\n\
    \  end\n  local function closest(num)\n    local num = tonumber(num)\n    if num\
    \ == nil then\n      return nil\n    end\n    local diff\n    if num < 0 then\n\
    \      diff = num\n    else\n      diff = tonumber(math.abs(num))\n    end\n \
    \   local closest\n    if diff < 0 then\n      closest = math.floor(diff)\n  \
    \  else\n      closest = math.ceil(diff)\n    end\n    if closest == 0 then\n\
    \      return nil\n    end\n    return closest\n  end\n  local function closest(num)\n",
  "  local function closest(value)\n    if value == nil then\n      return nil\n \
    \   end\n    if value == 0 then\n      return 0\n    end\n    if value == math.floor(value)\
    \ then\n      return value\n    end\n    if value == math.ceil(value) then\n \
    \     return value\n    end\n    if math.abs(value) < 1e-10 then\n      return\
    \ value\n    end\n    local sign = math.sign(value)\n    local magnitude = math.abs(value)\n\
    \    local magnitude2 = math.pow(magnitude, 2)\n    local magnitude3 = math.pow(magnitude,\
    \ 3)\n    local magnitude4 = math.pow(magnitude, 4)\n    local magnitude5 = math.pow(magnitude,\
    \ 5)\n    local magnitude6 = math.pow(magnitude, 6)\n    local magnitude7 = math.pow(magnitude,\
    \ 7)\n    local magnitude8 = math.pow(magnitude, 8)\n    local magnitude9 = math.pow(magnitude,\
    \ 9)\n    local magnitude10 = math.pow(magnitude, 10)\n    local magnitude11 =\
    \ math.pow(magnitude, 11)\n    local magnitude12 = math.pow(magnitude, 12)\n \
    \   local magnitude13 = math.pow(magnitude, 13)\n    local magnitude14 = math.pow(magnitude,\
    \ 14)\n    local magnitude15 = math.pow(magnitude, 15)\n    local magnitude16\
    \ = math.pow(magnitude, 16)\n    local magnitude17 = math.pow(magnitude, 17)\n\
    \    local magnitude18 = math.pow(magnitude, 18)\n    local magnitude19 = math.pow(magnitude,\
    \ 19)\n    local magnitude20 = math.pow(magnitude, 20)\n    local magnitude21\
    \ = math.pow(magnitude, 21)\n    local magnitude22 = math.pow(magnitude, 22)\n\
    \    local magnitude23 = math.pow(magnitude, 23)\n    local magnitude24 = math.pow(magnitude,\
    \ 24)\n    local magnitude25 = math.pow(magnitude, 25)\n    local magnitude26\
    \ = math.pow(magnitude, 26)\n    local magnitude27 = math.pow(magnitude, 27)\n\
    \    local magnitude28 = math.pow(magnitude, 28)\n    local magnitude29 = math.pow(magnitude,\
    \ 29)\n    local magnitude30 = math.pow(magnitude, 30)\n    local magnitude31\
    \ = math.pow(magnitude, 31)\n    local magnitude32 = math.pow(magnitude, 32)\n\
    \    local magnitude33 = math.pow(magnitude, 33)\n    local magnitude34 = math.pow(magnitude,\
    \ 34)\n    local magnitude35 = math.pow(magnitude, 35)\n    local magnitude36\
    \ = math.pow(magnitude, 36)\n    local magnitude37 = math.pow(magnitude, 37)\n\
    \    local magnitude38 = math.pow(magnitude, 38)\n    local magnitude39 = math.pow(magnitude,\
    \ 39)\n    local magnitude40 = math.pow(magnitude", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function round_away_from_zero(v)\n\
    \    return math.floor(math.abs(v) + 0.5)\n  end\n  local function is_close(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero2(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero3(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero4(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero5(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero6(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero7(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero8(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero9(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero10(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero11(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero12(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero13(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero14(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero15(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero16(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero17(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero18(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero19(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero20(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero21(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero22(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_", "  local\
    \ function closest(num)\n    local diff = math.abs(num - value)\n    if diff <\
    \ 0.5 then\n      return value\n    else\n      return math.floor(num + 0.5)\n\
    \    end\n  end\n  return closest\nend", "  local function is_equidistant(a, b)\n\
    \    return math.abs(a - b) < 1e-6\n  end\n  local function is_close(a, b) return\
    \ math.abs(a - b) < 1e-6 end\n  local function is_close_to_zero(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero2(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero3(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero4(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero5(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero6(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero7(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero8(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero9(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero10(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero11(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero12(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero13(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero14(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero15(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero16(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero17(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero18(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero19(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero20(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero21(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero22(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero23(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero24(a)\n    return\
    \ math.abs(a) < ", "  local function abs(x)\n    return x >= 0 and x or -x\n \
    \ end\n  local function closest(x, y)\n    return abs(x - y) < abs(y - x) and\
    \ x or y\n  end\n  local function round_away_from_zero(x)\n    return closest(x,\
    \ -x)\n  end\n  local function is_equidistant(x, y)\n    return abs(x - y) < abs(y\
    \ - x)\n  end\n  local function is_close_to_zero(x, y)\n    return abs(x - y)\
    \ < abs(y + x)\n  end\n  local function is_close_to_one(x, y)\n    return abs(x\
    \ - y) < abs(y - x)\n  end\n  local function is_close_to_two(x, y)\n    return\
    \ abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_three(x, y)\n \
    \   return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_four(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_five(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_six(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_seven(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_eight(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_nine(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_ten(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_eleven(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_twelve(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_thirteen(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_fourteen(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_fifteen(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_sixteen(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_seventeen(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_eighteen(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n  end\n  local function is_close_to_nineteen(x,\
    \ y)\n    return abs(x - y) < abs(y - x)\n  end\n  local function is_close_to_twenty(x,\
    \ y)\n    return abs(x - y) < abs(y + x)\n", "  local function closest(num)\n\
    \    local difference = math.abs(num - value)\n    if difference < 0.5 then\n\
    \      return value\n    else\n      return math.floor(value + 0.5)\n    end\n\
    \  end\n  return closest\nend", "  local function closest(num)\n    local sign\
    \ = math.sign(num - value)\n    local num = math.abs(num)\n    local diff = math.abs(value\
    \ - num)\n    if diff < sign then\n      return num\n    else\n      return value\n\
    \    end\n  end\n  return closest\nend", "  local function is_equidistant(a, b)\n\
    \    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) > 1e-6\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) > 1e-6\n  end\n  local function is_close_to_seven(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_ten(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local\
    \ function is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local\
    \ function is_close_to_one(a)\n    return math.abs(a) < 1e-4\n  end\n  local function\
    \ is_close_to_two(a)\n    return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) < 1e-1\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) < 1e0\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e1\n  end\n  local function is_close_to_six(a)\n   \
    \ return math.abs(a) < 1e2\n  end\n  local function is_close_to_seven(a)\n   \
    \ return math.abs(a) < 1e3\n  end\n  local function is_close_to_eight(a)\n   \
    \ return math.abs(a) < 1e4\n  end\n  local function is_close_to_nine(a)\n    return\
    \ math.abs(a) < 1e5\n  end\n  local function is_close_to_ten(a)\n    return math.abs(a)\
    \ < 1e6\n  end\n  local function is_close_to_eleven(a)\n    return math.abs(a)\
    \ < 1e7\n  end\n  local function is_close_to_twelve(a)\n    return math.abs(a)\
    \ < 1e8\n  end\n  local function is_close_to_thirteen(a)\n    return math.abs(a)\
    \ < 1e9\n  end\n  local function is_close_to_fourteen(a)\n    return math.abs(a)\
    \ < 1e10\n  end\n  local function is_close_to_fifteen(a)\n    return math.abs(a)\
    \ < 1e11\n  end\n  local function is_close_to_sixteen(a)\n    return math.abs(a)\
    \ < 1e12\n  end\n  local function is_close_to_seventeen(a)\n    return math.abs(a)\
    \ < 1e13\n  end\n  local function is_close_to_eighteen(a)\n    return math.abs(a)\
    \ < 1e14\n  end\n  local function is_close_to_nineteen(a)\n    return math.abs(a)\
    \ < 1e15\n  end\n  local function is_close_to_twenty(a)\n    return math.abs(a)\
    \ < 1e16\n  end\n  local function is_close_to_twenty_one(a)\n    return math.abs(a)\
    \ < 1e17\n  end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a)\
    \ < 1e18\n  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a)\
    \ < 1e19\n  end\n  local function is_close_to_tw", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function round_away_from_zero(v1,\
    \ v2)\n    return math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function\
    \ round_to_zero(v1, v2)\n    return math.floor(math.abs(v1 - v2) / 1e6)\n  end\n\
    \  local function round_to_nearest(v1, v2)\n    return math.floor(math.abs(v1\
    \ - v2) / 1e6)\n  end\n  local function round_to_nearest_even(v1, v2)\n    return\
    \ math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function round_to_nearest_odd(v1,\
    \ v2)\n    return math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function\
    \ round_to_nearest_ten(v1, v2)\n    return math.floor(math.abs(v1 - v2) / 1e6)\n\
    \  end\n  local function round_to_nearest_hundred(v1, v2)\n    return math.floor(math.abs(v1\
    \ - v2) / 1e6)\n  end\n  local function round_to_nearest_thousand(v1, v2)\n  \
    \  return math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function round_to_nearest_million(v1,\
    \ v2)\n    return math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function\
    \ round_to_nearest_billion(v1, v2)\n    return math.floor(math.abs(v1 - v2) /\
    \ 1e6)\n  end\n  local function round_to_nearest_trillion(v1, v2)\n    return\
    \ math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function round_to_nearest_quadrillion(v1,\
    \ v2)\n    return math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function\
    \ round_to_nearest_quintillion(v1, v2)\n    return math.floor(math.abs(v1 - v2)\
    \ / 1e6)\n  end\n  local function round_to_nearest_sextillion(v1, v2)\n    return\
    \ math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function round_to_nearest_septillion(v1,\
    \ v2)\n    return math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function\
    \ round_to_nearest_octillion(v1, v2)\n    return math.floor(math.abs(v1 - v2)\
    \ / 1e6)\n  end\n  local function round_to_nearest_nonillion(v1, v2)\n    return\
    \ math.floor(math.abs(v1 - v2) / 1e6)\n  end\n  local function round_to_nearest_dec",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end",
  "  local function closest_integer(value)\n    local function closest_integer(value)\n\
    \      local function closest_integer(value)\n        local function closest_integer(value)\n\
    \          local function closest_integer(value)\n            local function closest_integer(value)\n\
    \              local function closest_integer(value)\n                local function\
    \ closest_integer(value)\n                  local function closest_integer(value)\n\
    \                    local function closest_integer(value)\n                 \
    \     local function closest_integer(value)\n                        local function\
    \ closest_integer(value)\n                          local function closest_integer(value)\n\
    \                            local function closest_integer(value)\n         \
    \                     local function closest_integer(value)\n                \
    \                local function closest_integer(value)\n                     \
    \             local function closest_integer(value)\n                        \
    \            local function closest_integer(value)\n                         \
    \             local function closest_integer(value)\n                        \
    \                local function closest_integer(value)\n                     \
    \                     local function closest_integer(value)\n                \
    \                            local function closest_integer(value)\n         \
    \                                     local function closest_integer(value)\n\
    \                                                local function closest_integer(value)\n\
    \                                                  local function closest_integer(value)\n\
    \                                                    local function closest_integer(value)\n\
    \                                                      local function closest_integer(value)\n\
    \                                                        local function closest_integer(value)\n\
    \                                                          local function closest_integer(value)\n\
    \                                                            local function closest_integer(value)\n\
    \                                                              local function\
    \ closest_integer(value)\n                                                   \
    \             local function closest_integer(value)\n                        \
    \                                          local function closest_integer(value)\n\
    \                                                                    local function\
    \ closest_integer(value)\n                                                   \
    \                   local function closest_integer(value)\n                  \
    \                                                      local function closest_integer(value)\n\
    \                                                                          local\
    \ function closest_integer(value)\n                                          \
    \                                  local function closest_integer(value)\n   \
    \                                                                           local\
    \ function closest_integer(value)\n                                          \
    \                                      local function closest_integer(value)\n\
    \                                                                            \
    \      local function closest_integer(value)\n                               \
    \                                                     local function closest_integer(value)\n\
    \                                                                            \
    \          local function closest_integer(value)\n                           \
    \                                                             local function closest_integer(value)\n\
    \                                                                            \
    \              local function closest_integer(value)\n                       \
    \                                                                     local function\
    \ closest_integer(value)\n                                                   \
    \                                           local function closest_integer(value)\n\
    \                                                                            \
    \                    local function closest_integer(value)\n                 \
    \                                                                            \
    \     local function closest_integer(value)\n                                \
    \                                                                    local function\
    \ closest_integer(value)\n                                                   \
    \                                                   local function closest_integer(value)\n\
    \                                                                            \
    \                            local function closest_integer(value)\n         \
    \                                                                            \
    \                     local function closest_integer(value)\n                \
    \                                                                            \
    \                local function closest_integer(value)\n                     \
    \                                                                            \
    \             local function closest_integer(value)\n                        \
    \                                                                            \
    \            local function closest_integer(value)\n                         \
    \                                                                            \
    \             local function closest_integer(value)\n                        \
    \                                                                            \
    \                local function closest_integer(value)\n                     \
    \                                                                            \
    \                     local function closest_integer(value)\n                \
    \                                                                            \
    \                            local function closest_integer(value)\n         \
    \                                                                            \
    \                                     local function closest_", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function\
    \ round_away_from_zero(value)\n    return math.floor(value + 0.5)\n  end\n  local\
    \ function is_negative(value)\n    return value < 0\n  end\n  local function is_positive(value)\n\
    \    return value > 0\n  end\n  local function is_zero(value)\n    return value\
    \ == 0\n  end\n  local function is_integer(value)\n    return type(value) == \"\
    number\" and math.floor(value) == value\n  end\n  local function is_number(value)\n\
    \    return type(value) == \"number\"\n  end\n  local function is_string(value)\n\
    \    return type(value) == \"string\"\n  end\n  local function is_number(value)\n\
    \    return type(value) == \"number\"\n  end\n  local function is_integer(value)\n\
    \    return type(value) == \"number\" and math.floor(value) == value\n  end\n\
    \  local function is_string(value)\n    return type(value) == \"string\"\n  end\n\
    \  local function is_number(value)\n    return type(value) == \"number\"\n  end\n\
    \  local function is_integer(value)\n    return type(value) == \"number\" and\
    \ math.floor(value) == value\n  end\n  local function is_string(value)\n    return\
    \ type(value) == \"string\"\n  end\n  local function is_number(value)\n    return\
    \ type(value) == \"number\"\n  end\n  local function is_integer(value)\n    return\
    \ type(value) == \"number\" and math.floor(value) == value\n  end\n  local function\
    \ is_string(value)\n    return type(value) == \"string\"\n  end\n  local function\
    \ is_number(value)\n    return type(value) == \"number\"\n  end\n  local function\
    \ is_integer(value)\n    return type(value) == \"number\" and math.floor(value)\
    \ == value\n  end\n  local function is_string(value)\n    return type(value) ==\
    \ \"string\"\n  end\n  local function is_number(value)\n    return type(value)\
    \ == \"number\"\n  end\n  local function is_integer(value)\n    return type(value)\
    \ == \"number\" and math.floor(value) == value\n  end\n  local function is_string(value)\n\
    \    return type(value) == \"string\"\n  end\n  local function is_number(value)\n\
    \    return type(value) == \"number\"\n  end\n  local function is_integer(value)\n\
    \    return type(value) == \"number\" and math.floor(value) == value\n  end\n\
    \  local function is_string(value)\n    return type(value) == \"string\"\n  end\n\
    \  local function is_number(value)\n    return type(value) == \"number\"\n  end\n\
    \  local function is_integer(value)\n    return type(value) == \"number\" and\
    \ math.floor(value) == value\n  end\n  local function is_string(value)\n    return\
    \ type(value) == \"string\"\n  end\n  local function is_number(value)\n    return\
    \ type(value) == \"number\"\n  end\n  local function is_integer(value)\n", " \
    \ local function closest(value)\n    if value == nil then\n      return nil\n\
    \    end\n    if value == 0 then\n      return 0\n    end\n    if value < 0 then\n\
    \      return nil\n    end\n    if value < value then\n      return value\n  \
    \  end\n    local closest\n    local closestDiff = math.abs(value - closest)\n\
    \    for i = 1, 10 do\n      local diff\n      if closestDiff == 0 then\n    \
    \    diff = math.abs(value - closest)\n      else\n        diff = math.abs(value\
    \ - closest) / closestDiff\n      end\n      if diff < closestDiff then\n    \
    \    closestDiff = diff\n        closest = value\n      end\n    end\n    return\
    \ closest\n  end\n  return closest(value)\nend", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function round_away_from_zero(value)\n\
    \    if value == nil then\n      return nil\n    end\n    local sign = math.sign(value)\n\
    \    local magnitude = math.abs(value)\n    if magnitude < 1e-6 then\n      return\
    \ sign * 0\n    end\n    local magnitude = math.floor(magnitude)\n    local magnitude_to_next_integer\
    \ = math.floor(magnitude / 2)\n    local next_integer = math.floor(magnitude /\
    \ 2)\n    local next_integer_magnitude = math.abs(next_integer)\n    if next_integer_magnitude\
    \ < 1e-6 then\n      return sign * 0\n    end\n    local next_integer_magnitude\
    \ = math.floor(next_integer_magnitude)\n    local next_integer_magnitude_to_next_integer\
    \ = math.floor(next_integer_magnitude / 2)\n    local next_next_integer = math.floor(next_integer_magnitude\
    \ / 2)\n    local next_next_integer_magnitude = math.abs(next_next_integer)\n\
    \    if next_next_integer_magnitude < 1e-6 then\n      return sign * 0\n    end\n\
    \    if next_integer_magnitude < next_next_integer_magnitude then\n      return\
    \ sign * next_integer\n    end\n    if next_next_integer_magnitude < next_integer_magnitude\
    \ then\n      return sign * next_next_integer\n    end\n    if next_integer_magnitude\
    \ < next_next_integer_magnitude then\n      return sign * next_next_integer\n\
    \    end\n    return sign * next_next_integer\n  end\n  local function round_away_from_zero_with_sign(value)\n\
    \    if value == nil then\n      return nil\n    end\n    local sign = math.sign(value)\n\
    \    local magnitude = math.abs(value)\n    if magnitude < 1e-6 then\n      return\
    \ sign * 0\n    end\n    local magnitude = math.floor(magnitude)\n    local magnitude_to_next_integer\
    \ = math.floor(magnitude / 2)\n    local next_integer = math.floor(magnitude /\
    \ 2)\n    local next_integer_magnitude = math.abs(next_integer)\n    if next_integer_magnitude\
    \ < 1e-6 then\n      return sign * 0\n    end\n    local next_integer_magnitude\
    \ = math.floor(next_integer_magnitude)\n    local next_integer_magnitude_to_next_integer\
    \ = math.floor(next_integer_magnitude / 2)\n    local next_next_integer = math.floor(next_integer_magnitude\
    \ / 2)\n    local next_next_integer_magnitude = math.abs(next_next_integer)\n\
    \    if next_next_integer_magnitude < 1e-6 then\n      return sign * 0\n    end\n\
    \    if next_integer_magnitude < next_next_integer_magnitude then\n      return\
    \ sign * next_integer\n    end\n    if next_next_integer_magn", "  local function\
    \ closest(value)\n    if value == nil then\n      return nil\n    end\n    if\
    \ value == 0 then\n      return 0\n    end\n    local closest\n    local closestDistance\
    \ = math.abs(value - closest)\n    for i = 1, #integers do\n      local currentDistance\
    \ = math.abs(value - integers[i])\n      if currentDistance < closestDistance\
    \ then\n        closestDistance = currentDistance\n        closest = integers[i]\n\
    \      end\n    end\n    return closest\n  end\n  return closest(value)\nend",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) <= math.abs(a)\
    \ + math.abs(b)\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ <= math.abs(a) + 1e-10\n  end\n  local function is_close_to_one(a)\n    return\
    \ math.abs(a) <= math.abs(a) + 1e-5\n  end\n  local function is_close_to_two(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-2\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-3\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-4\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-5\n  end\n  local function is_close_to_six(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-6\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-7\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-8\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-9\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-19\n  end\n  local function is_close_to_twenty(",
  "  local function round_away_from_zero(num)\n    local sign = math.sign(num) --\
    \ Get the sign of the number\n    local num = math.abs(num) -- Get the absolute\
    \ value of the number\n    local rounded_num = math.floor(num) -- Round the number\
    \ down\n    local remainder = num - rounded_num -- Get the remainder\n    if sign\
    \ == -1 and remainder > 0 then\n      return rounded_num + 1 -- If the number\
    \ is negative, add 1\n    elseif sign == 1 and remainder < 0 then\n      return\
    \ rounded_num - 1 -- If the number is positive, subtract 1\n    else\n      return\
    \ rounded_num -- If the number is either positive or negative, return it\n   \
    \ end\n  end\n  return round_away_from_zero(value)\nend", "  local function closest(value)\n\
    \    if value == nil then\n      return nil\n    end\n    if value == value then\n\
    \      return value\n    end\n    if value < value then\n      return value\n\
    \    end\n    return math.floor(value)\n  end\n  return closest(value)\nend",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) <= math.abs(a)\
    \ * math.abs(b)\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ <= math.abs(a) * 0.5\n  end\n  local function is_close_to_one(a)\n    return\
    \ math.abs(a) <= math.abs(a) * 1.5\n  end\n  local function is_close_to_two(a)\n\
    \    return math.abs(a) <= math.abs(a) * 2.5\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) <= math.abs(a) * 3.5\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) <= math.abs(a) * 4.5\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) <= math.abs(a) * 5.5\n  end\n  local function is_close_to_six(a)\n\
    \    return math.abs(a) <= math.abs(a) * 6.5\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) <= math.abs(a) * 7.5\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) <= math.abs(a) * 8.5\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) <= math.abs(a) * 9\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) <= math.abs(a) * 10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) <= math.abs(a) * 11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) <= math.abs(a) * 12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 19\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) <= math.abs(a) * 20\n  end\n", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-9\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-4\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e-6\n  end\n  local function is_close_to_seven(a)\n \
    \   return math.abs(a) < 1e-7\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-8\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-9\n  end\n  local function is_close_to_ten(a)\n \
    \   return math.abs(a) < 1e-10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e-12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e-13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e-14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e-16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e-17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e-18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e-19\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function ", "  local function\
    \ abs(x)\n    if x < 0 then return -x end\n    return x\n  end\n  local function\
    \ is_equidistant(a, b)\n    return abs(a - b) < 1e-6\n  end\n  local function\
    \ round_away_from_zero(x)\n    if x < 0 then\n      return -x + 1\n    else\n\
    \      return x\n    end\n  end\n  local function is_close_to_zero(x)\n    return\
    \ abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function round_to_zero(x)\n\
    \    if abs(x - round_away_from_zero(x)) < 1e-6 then\n      return round_away_from_zero(x)\n\
    \    else\n      return x\n    end\n  end\n  local function is_close_to_one(x)\n\
    \    return abs(x - round_to_zero(x)) < 1e-6\n  end\n  local function round_to_one(x)\n\
    \    if abs(x - round_to_zero(x)) < 1e-6 then\n      return round_to_zero(x)\n\
    \    else\n      return x\n    end\n  end\n  local function is_close_to_two(x)\n\
    \    return abs(x - round_to_one(x)) < 1e-6\n  end\n  local function round_to_two(x)\n\
    \    if abs(x - round_to_one(x)) < 1e-6 then\n      return round_to_one(x)\n \
    \   else\n      return x\n    end\n  end\n  local function is_close_to_three(x)\n\
    \    return abs(x - round_to_two(x)) < 1e-6\n  end\n  local function round_to_three(x)\n\
    \    if abs(x - round_to_two(x)) < 1e-6 then\n      return round_to_two(x)\n \
    \   else\n      return x\n    end\n  end\n  local function is_close_to_four(x)\n\
    \    return abs(x - round_to_three(x)) < 1e-6\n  end\n  local function round_to_four(x)\n\
    \    if abs(x - round_to_three(x)) < 1e-6 then\n      return round_to_three(x)\n\
    \    else\n      return x\n    end\n  end\n  local function is_close_to_five(x)\n\
    \    return abs(x - round_to_four(x)) < 1e-6\n  end\n  local function round_to_five(x)\n\
    \    if abs(x - round_to_four(x)) < 1e-6 then\n      return round_to_four(x)\n\
    \    else\n      return x\n    end\n  end\n  local function is_close_to_six(x)\n\
    \    return abs(x - round_to_five(x)) < 1e-6\n  end\n  local function round_to_six(x)\n\
    \    if abs(x - round_to_five(x)) < 1e-6 then\n      return round_to_five(x)\n\
    \    else\n      return x\n    end\n  end\n  local function is_close_to_seven(x)\n\
    \    return abs(x - round_to_six(x)) ", "  local function closest(value)\n   \
    \ local function is_equidistant(value)\n      return math.abs(value - math.floor(value))\
    \ < math.abs(value - math.ceil(value))\n    end\n    local function is_closed(value)\n\
    \      return math.abs(value - math.floor(value)) > math.abs(value - math.ceil(value))\n\
    \    end\n    local function is_even(value)\n      return math.floor(value) ~=\
    \ math.ceil(value)\n    end\n    local function is_odd(value)\n      return math.floor(value)\
    \ ~= math.ceil(value)\n    end\n    local function is_negative(value)\n      return\
    \ value < 0\n    end\n    local function is_positive(value)\n      return value\
    \ > 0\n    end\n    local function is_zero(value)\n      return value == 0\n \
    \   end\n    local function is_integer(value)\n      return type(value) == \"\
    number\" and math.floor(value) == value\n    end\n    local function is_negative_integer(value)\n\
    \      return is_integer(value) and is_negative(value)\n    end\n    local function\
    \ is_positive_integer(value)\n      return is_integer(value) and is_positive(value)\n\
    \    end\n    local function is_zero_integer(value)\n      return is_integer(value)\
    \ and is_zero(value)\n    end\n    local function is_odd_integer(value)\n    \
    \  return is_integer(value) and is_odd(value)\n    end\n    local function is_even_integer(value)\n\
    \      return is_integer(value) and is_even(value)\n    end\n    local function\
    \ is_negative_integer_or_zero(value)\n      return is_negative_integer(value)\
    \ or is_zero_integer(value)\n    end\n    local function is_positive_integer_or_zero(value)\n\
    \      return is_positive_integer(value) or is_zero_integer(value)\n    end\n\
    \    local function is_odd_integer_or_zero(value)\n      return is_odd_integer(value)\
    \ or is_zero_integer(value)\n    end\n    local function is_even_integer_or_zero(value)\n\
    \      return is_even_integer(value) or is_zero_integer(value)\n    end\n    local\
    \ function is_negative_integer_or_odd(value)\n      return is_negative_integer(value)\
    \ or is_odd_integer(value)\n    end\n    local function is_positive_integer_or_odd(value)\n\
    \      return is_positive_integer(value) or is_odd_integer(value)\n    end\n \
    \   local function is_odd_integer_or_odd(value)\n      return is_odd_integer(value)\
    \ or is_odd(value)\n    end\n    local function is_even_integer_or_odd(value)\n\
    \      return is_even_integer(value) or is_odd_integer(value)\n    end\n    local\
    \ function is_negative_integer_or_even(value)\n      return is_negative_integer(value)\
    \ or is_even_integer(value)\n    end\n", "  local function is_equidistant(a, b)\n\
    \    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-9\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-12\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) < 1e-18\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_six(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) < 1e-24\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-27\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-30\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) < 1e-33\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-36\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e-39\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e-42\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e-45\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e-48\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e-51\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e-54\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e-57\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e-60\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e-63\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) < 1e-66\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) < 1e-69\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) < 1e-72\n  end\n  local function is_close", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function\
    \ is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local function\
    \ round_away_from_zero(a)\n    return math.floor(math.abs(a) + 0.5)\n  end\n \
    \ local function round_to_zero(a)\n    return math.floor(math.abs(a))\n  end\n\
    \  local function round_to_nearest_integer(a)\n    return round_to_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero(a)\n    return round_to_nearest_integer(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_value(a)\n  \
    \  return round_to_nearest_integer_or_zero(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero_values(a)\n\
    \    return round_to_nearest_integer_or_zero_value(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_values(a)\n    return round_to_nearest_integer_or_zero_value(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_values(a)\n \
    \   return round_to_nearest_integer_or_zero_value(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_values(a)\n    return round_to_nearest_integer_or_zero_value(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_values(a)\n \
    \   return round_to_nearest_integer_or_zero_value(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_values(a)\n    return round_to_nearest_integer_or_zero_value(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_values(a)\n \
    \   return round_to_nearest_integer_or_zero_value(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_values(a)\n    return round_to_nearest_integer_or_zero_value(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_values(a)\n \
    \   return round_to_nearest_integer_or_zero_value(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_values(a)\n    return round_to_nearest_integer_or_zero_value(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_values(a)\n \
    \   return round_to_nearest_integer_or_zero_value(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_values(a)\n    return round_to_nearest_integer_or_zero_value(a)\
    \ or 0\n  end\n  local function round_to_nearest_", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-9\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-7\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-9\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e-11\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) < 1e-13\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-17\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) < 1e-19\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e-23\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e-25\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e-27\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e-29\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e-31\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e-33\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e-35\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e-37\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e-39\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) < 1e-41\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) < 1e-43\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) < 1e-45\n  end\n  local function is_close", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) <= math.abs(a) + math.abs(b)\n\
    \  end\n  local function is_close_to_zero(a)\n    return math.abs(a) <= math.abs(a)\
    \ + 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a) <=\
    \ math.abs(a) + 1e-4\n  end\n  local function is_close_to_two(a)\n    return math.abs(a)\
    \ <= math.abs(a) + 1e-2\n  end\n  local function is_close_to_three(a)\n    return\
    \ math.abs(a) <= math.abs(a) + 1e-1\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e0\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e1\n  end\n  local function is_close_to_six(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e2\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e3\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e4\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e5\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e6\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e7\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e8\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e9\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e10\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e11\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e12\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e13\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e14\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e15\n  end\n  local function is_close_to_twenty(",
  "  local function closest(value)\n    if value == nil then\n      return nil\n \
    \   end\n    if value == 0 then\n      return 0\n    end\n    if value == math.floor(value)\
    \ then\n      return value\n    end\n    if value == math.ceil(value) then\n \
    \     return value\n    end\n    if value == math.floor(value) or value == math.ceil(value)\
    \ then\n      return value\n    end\n    if value == math.floor(value) or value\
    \ == math.ceil(value) then\n      return value\n    end\n    if value == math.floor(value)\
    \ or value == math.ceil(value) then\n      return value\n    end\n    if value\
    \ == math.floor(value) or value == math.ceil(value) then\n      return value\n\
    \    end\n    if value == math.floor(value) or value == math.ceil(value) then\n\
    \      return value\n    end\n    if value == math.floor(value) or value == math.ceil(value)\
    \ then\n      return value\n    end\n    if value == math.floor(value) or value\
    \ == math.ceil(value) then\n      return value\n    end\n    if value == math.floor(value)\
    \ or value == math.ceil(value) then\n      return value\n    end\n    if value\
    \ == math.floor(value) or value == math.ceil(value) then\n      return value\n\
    \    end\n    if value == math.floor(value) or value == math.ceil(value) then\n\
    \      return value\n    end\n    if value == math.floor(value) or value == math.ceil(value)\
    \ then\n      return value\n    end\n    if value == math.floor(value) or value\
    \ == math.ceil(value) then\n      return value\n    end\n    if value == math.floor(value)\
    \ or value == math.ceil(value) then\n      return value\n    end\n    if value\
    \ == math.floor(value) or value == math.ceil(value) then\n      return value\n\
    \    end\n    if value == math.floor(value) or value == math.ceil(value) then\n\
    \      return value\n    end\n    if value == math.floor(value) or value == math.ceil(value)\
    \ then\n      return value\n    end\n    if value == math.floor(value) or value\
    \ == math.ceil(value) then\n      return value\n    end\n    if value == math.floor(value)\
    \ or value == math.ceil(value) then\n      return value\n    end\n    if value\
    \ == math.floor(value) or value == math.ceil(value) then\n      return value\n\
    \    end\n    if value == math.floor(value) or value == math.ceil(value) then\n\
    \      return value\n    end\n    if value == math.floor(value) or value == math.ceil(value)\
    \ then\n      return value\n    end\n    if value == math.floor(value) or value\
    \ == math.ceil(value) then\n      return value\n    end\n    if value == math.floor(value)\
    \ or value == math.ceil(value) then\n      return value\n    end\n    if value\
    \ == math.floor(value) or value == math.ceil(value) then\n      return value\n\
    \    end\n    if value == math.floor(value) or value == math.ceil(value) then\n\
    \      return value\n    end\n    if value == math.floor(value) or value == math.ceil",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n\
    \  local function is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n\
    \  local function is_close_to_one(a)\n    return math.abs(a) < 1e-9\n  end\n \
    \ local function is_close_to_two(a)\n    return math.abs(a) < 1e-12\n  end\n \
    \ local function is_close_to_three(a)\n    return math.abs(a) < 1e-15\n  end\n\
    \  local function is_close_to_four(a)\n    return math.abs(a) < 1e-18\n  end\n\
    \  local function is_close_to_five(a)\n    return math.abs(a) < 1e-21\n  end\n\
    \  local function is_close_to_six(a)\n    return math.abs(a) < 1e-24\n  end\n\
    \  local function is_close_to_seven(a)\n    return math.abs(a) < 1e-27\n  end\n\
    \  local function is_close_to_eight(a)\n    return math.abs(a) < 1e-30\n  end\n\
    \  local function is_close_to_nine(a)\n    return math.abs(a) < 1e-33\n  end\n\
    \  local function is_close_to_ten(a)\n    return math.abs(a) < 1e-36\n  end\n\
    \  local function is_close_to_eleven(a)\n    return math.abs(a) < 1e-39\n  end\n\
    \  local function is_close_to_twelve(a)\n    return math.abs(a) < 1e-42\n  end\n\
    \  local function is_close_to_thirteen(a)\n    return math.abs(a) < 1e-45\n  end\n\
    \  local function is_close_to_fourteen(a)\n    return math.abs(a) < 1e-48\n  end\n\
    \  local function is_close_to_fifteen(a)\n    return math.abs(a) < 1e-51\n  end\n\
    \  local function is_close_to_sixteen(a)\n    return math.abs(a) < 1e-54\n  end\n\
    \  local function is_close_to_seventeen(a)\n    return math.abs(a) < 1e-57\n \
    \ end\n  local function is_close_to_eighteen(a)\n    return math.abs(a) < 1e-60\n\
    \  end\n  local function is_close_to_nineteen(a)\n    return math.abs(a) < 1e-63\n\
    \  end\n  local function is_close_to_twenty(a)\n    return math.abs(a) < 1e-66\n\
    \  end\n  local function is_close_to_twenty_one(a)\n    return math.abs(a) < 1e-69\n\
    \  end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a) < 1e-72\n\
    \  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a) <\
    \ 1e-75\n  end\n  local function is_close", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function round_away_from_zero(number)\n\
    \    if number < 0 then\n      return math.floor(number / 10) * 10 - number\n\
    \    else\n      return math.ceil(number / 10) * 10 + number\n    end\n  end\n\
    \  local function round_to_nearest(number)\n    if number < 0 then\n      return\
    \ math.floor(number / 10) * 10 - number\n    else\n      return math.ceil(number\
    \ / 10) * 10 + number\n    end\n  end\n  local function round_to_zero(number)\n\
    \    if number < 0 then\n      return math.floor(number / 10) * 10 - number\n\
    \    else\n      return math.ceil(number / 10) * 10 + number\n    end\n  end\n\
    \  local function round_to_nearest_even(number)\n    if number < 0 then\n    \
    \  return math.floor(number / 10) * 10 - number\n    else\n      return math.ceil(number\
    \ / 10) * 10 + number\n    end\n  end\n  local function round_to_nearest_odd(number)\n\
    \    if number < 0 then\n      return math.floor(number / 10) * 10 - number\n\
    \    else\n      return math.ceil(number / 10) * 10 + number\n    end\n  end\n\
    \  local function round_to_nearest_ten(number)\n    if number < 0 then\n     \
    \ return math.floor(number / 10) * 10 - number\n    else\n      return math.ceil(number\
    \ / 10) * 10 + number\n    end\n  end\n  local function round_to_nearest_hundred(number)\n\
    \    if number < 0 then\n      return math.floor(number / 100) * 100 - number\n\
    \    else\n      return math.ceil(number / 100) * 100 + number\n    end\n  end\n\
    \  local function round_to_nearest_thousand(number)\n    if number < 0 then\n\
    \      return math.floor(number / 1000) * 1000 - number\n    else\n      return\
    \ math.ceil(number / 1000) * 1000 + number\n    end\n  end\n  local function round_to_nearest_million(number)\n\
    \    if number < 0 then\n      return math.floor(number / 1000000) * 1000000 -\
    \ number\n    else\n      return math.ceil(number / 1000000) * 1000000 + number\n\
    \    end\n  end\n  local function round_to_nearest_billion(number)\n    if number\
    \ < 0 then\n      return math.floor(number / 1000000000) * 1000000000 - number\n\
    \    else\n      return math.ceil(number / 1000000000) * 1000000000 + number\n\
    \    end\n  end\n  local function round_to_nearest_trillion(number)\n    if number\
    \ < 0 then\n      return math.floor(number / 1000000000000) * 1000000000000 -\
    \ number\n    else\n      return math.ceil(", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) <= math.abs(a) + math.abs(b)\n  end\n  local\
    \ function is_odd(n)\n    return n % 2 == 1\n  end\n  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function is_integer(n)\n    return math.floor(n)\
    \ == n\n  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local\
    \ function is_positive(n)\n    return n > 0\n  end\n  local function is_negative_integer(n)\n\
    \    return is_negative(n) and is_integer(n)\n  end\n  local function is_positive_integer(n)\n\
    \    return is_positive(n) and is_integer(n)\n  end\n  local function is_odd_integer(n)\n\
    \    return is_odd(n) and is_integer(n)\n  end\n  local function is_even_integer(n)\n\
    \    return is_even(n) and is_integer(n)\n  end\n  local function is_odd_integer(n)\n\
    \    return is_odd(n) and is_integer(n)\n  end\n  local function is_even_integer(n)\n\
    \    return is_even(n) and is_integer(n)\n  end\n  local function is_odd_integer(n)\n\
    \    return is_odd(n) and is_integer(n)\n  end\n  local function is_negative_integer(n)\n\
    \    return is_negative(n) and is_integer(n)\n  end\n  local function is_positive_integer(n)\n\
    \    return is_positive(n) and is_integer(n)\n  end\n  local function is_negative_integer(n)\n\
    \    return is_negative(n) and is_integer(n)\n  end\n  local function is_positive_integer(n)\n\
    \    return is_positive(n) and is_integer(n)\n  end\n  local function is_negative_integer(n)\n\
    \    return is_negative(n) and is_integer(n)\n  end\n  local function is_positive_integer(n)\n\
    \    return is_positive(n) and is_integer(n)\n  end\n  local function is_negative_integer(n)\n\
    \    return is_negative(n) and is_integer(n)\n  end\n  local function is_positive_integer(n)\n\
    \    return is_positive(n) and is_integer(n)\n  end\n  local function is_negative_integer(n)\n\
    \    return is_negative(n) and is_integer(n)\n  end\n  local function is_positive_integer(n)\n\
    \    return is_positive(n) and is_integer(n)\n  end\n  local function is_negative_integer(n)\n\
    \    return is_negative(n) and is_integer(n)\n  end\n  local function is_positive_integer(n)\n\
    \    return is_positive(n) and is_integer(n)\n  end\n  local function is_negative_integer(n)",
  "  local function abs(x)\n    return math.abs(x)\n  end\n  local function is_equidistant(x,\
    \ y)\n    return abs(x - y) < 1e-6\n  end\n  local function round_away_from_zero(x)\n\
    \    return math.floor(x + 0.5)\n  end\n  local function is_negative(x)\n    return\
    \ x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n  end\n  local\
    \ function is_zero(x)\n    return x == 0\n  end\n  local function is_integer(x)\n\
    \    return x == round(x)\n  end\n  local function is_close_to_zero(x)\n    return\
    \ abs(x - round_away_from_zero(x)) < 1e-6\n  end\n  local function is_close_to_one(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-4\n  end\n  local function is_close_to_two(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-2\n  end\n  local function is_close_to_three(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e-1\n  end\n  local function is_close_to_four(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e0\n  end\n  local function is_close_to_five(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e1\n  end\n  local function is_close_to_six(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e2\n  end\n  local function is_close_to_seven(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e3\n  end\n  local function is_close_to_eight(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e4\n  end\n  local function is_close_to_nine(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e5\n  end\n  local function is_close_to_ten(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e6\n  end\n  local function is_close_to_eleven(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e7\n  end\n  local function is_close_to_twelve(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e8\n  end\n  local function is_close_to_thirteen(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e9\n  end\n  local function is_close_to_fourteen(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e10\n  end\n  local function is_close_to_fifteen(x)\n\
    \    return abs(x - round_away_from_zero(x)) < 1e11\n", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-4\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e0\n  end\n  local function is_close_to_five(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_six(a)\n    return\
    \ math.abs(a) < 1e2\n  end\n  local function is_close_to_seven(a)\n    return\
    \ math.abs(a) < 1e3\n  end\n  local function is_close_to_eight(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_nine(a)\n    return math.abs(a)\
    \ < 1e5\n  end\n  local function is_close_to_ten(a)\n    return math.abs(a) <\
    \ 1e6\n  end\n  local function is_close_to_eleven(a)\n    return math.abs(a) <\
    \ 1e7\n  end\n  local function is_close_to_twelve(a)\n    return math.abs(a) <\
    \ 1e8\n  end\n  local function is_close_to_thirteen(a)\n    return math.abs(a)\
    \ < 1e9\n  end\n  local function is_close_to_fourteen(a)\n    return math.abs(a)\
    \ < 1e10\n  end\n  local function is_close_to_fifteen(a)\n    return math.abs(a)\
    \ < 1e11\n  end\n  local function is_close_to_sixteen(a)\n    return math.abs(a)\
    \ < 1e12\n  end\n  local function is_close_to_seventeen(a)\n    return math.abs(a)\
    \ < 1e13\n  end\n  local function is_close_to_eighteen(a)\n    return math.abs(a)\
    \ < 1e14\n  end\n  local function is_close_to_nineteen(a)\n    return math.abs(a)\
    \ < 1e15\n  end\n  local function is_close_to_twenty(a)\n    return math.abs(a)\
    \ < 1e16\n  end\n  local function is_close_to_twenty_one(a)\n    return math.abs(a)\
    \ < 1e17\n  end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a)\
    \ < 1e18\n  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a)\
    \ < 1e19\n  end\n  local function is_close_to_tw", "  local function round_away_from_zero(n)\n\
    \    return math.floor(n + 0.5)\n  end\n  local function is_equidistant(a, b)\n\
    \    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(n)\n\
    \    return math.abs(n - round_away_from_zero(n)) < 1e-6\n  end\n  local function\
    \ is_close_to_one(n)\n    return math.abs(n - round_away_from_zero(n)) < 1e-9\n\
    \  end\n  local function is_close_to_two(n)\n    return math.abs(n - round_away_from_zero(n))\
    \ < 1e-12\n  end\n  local function is_close_to_three(n)\n    return math.abs(n\
    \ - round_away_from_zero(n)) < 1e-15\n  end\n  local function is_close_to_four(n)\n\
    \    return math.abs(n - round_away_from_zero(n)) < 1e-18\n  end\n  local function\
    \ is_close_to_five(n)\n    return math.abs(n - round_away_from_zero(n)) < 1e-21\n\
    \  end\n  local function is_close_to_six(n)\n    return math.abs(n - round_away_from_zero(n))\
    \ < 1e-24\n  end\n  local function is_close_to_seven(n)\n    return math.abs(n\
    \ - round_away_from_zero(n)) < 1e-27\n  end\n  local function is_close_to_eight(n)\n\
    \    return math.abs(n - round_away_from_zero(n)) < 1e-30\n  end\n  local function\
    \ is_close_to_nine(n)\n    return math.abs(n - round_away_from_zero(n)) < 1e-33\n\
    \  end\n  local function is_close_to_ten(n)\n    return math.abs(n - round_away_from_zero(n))\
    \ < 1e-36\n  end\n  local function is_close_to_eleven(n)\n    return math.abs(n\
    \ - round_away_from_zero(n)) < 1e-39\n  end\n  local function is_close_to_twelve(n)\n\
    \    return math.abs(n - round_away_from_zero(n)) < 1e-42\n  end\n  local function\
    \ is_close_to_thirteen(n)\n    return math.abs(n - round_away_from_zero(n)) <\
    \ 1e-45\n  end\n  local function is_close_to_fourteen(n)\n    return math.abs(n\
    \ - round_away_from_zero(n)) < 1e-48\n  end\n  local function is_close_to_fifteen(n)\n\
    \    return math.abs(n - round_away_from_zero(n)) < 1e-51\n  end\n  local function\
    \ is_close_to_sixteen(n)\n    return math.abs(n - round_away_from_zero(n)) < 1e-54\n\
    \  end\n  local function is_close_to_seventeen(n)\n    return math.abs(n - round_away_",
  "  local function round_away_from_zero(number)\n    if number < 0 then\n      return\
    \ math.floor(number) - number\n    else\n      return math.ceil(number) + number\n\
    \    end\n  end\n  local function is_equidistant(number1, number2)\n    return\
    \ math.abs(number1 - number2) <= math.abs(number1 - number2)\n  end\n  local function\
    \ is_close_to_zero(number)\n    return math.abs(number) <= math.abs(number)\n\
    \  end\n  local function is_close_to_other_number(number)\n    return math.abs(number)\
    \ <= math.abs(number) + 0.1\n  end\n  local function is_close_to_other_number_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero(number)\n    return math.abs(number)\
    \ <= math.abs(number) + 0.1\n  end\n  local function is_close_to_other_number_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero(number)\n    return\
    \ math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return math.abs(number) <= math.abs(number) + 0.1\n  end\n  local function\
    \ is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero_or_", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local\
    \ function is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local\
    \ function is_close_to_one(a)\n    return math.abs(a) < 1e-9\n  end\n  local function\
    \ is_close_to_two(a)\n    return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) < 1e-4\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) < 1e-5\n  end\n  local function is_close_to_six(a)\n \
    \   return math.abs(a) < 1e-6\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) < 1e-7\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-8\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-9\n  end\n  local function is_close_to_ten(a)\n \
    \   return math.abs(a) < 1e-10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e-12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e-13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e-14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e-16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e-17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e-18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e-19\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function ", "  local function\
    \ is_equidistant(v1, v2)\n    return v1 ~= nil and v2 ~= nil and math.abs(v1 -\
    \ v2) <= 1\n  end\n  local function is_close(v1, v2)\n    return v1 ~= nil and\
    \ v2 ~= nil and math.abs(v1 - v2) < 1\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return v1 ~= nil and v2 ~= nil and math.abs(v1 - v2) < 1e-6\n  end\n\
    \  local function is_close_to_zero2(v1, v2)\n    return v1 ~= nil and v2 ~= nil\
    \ and math.abs(v1 - v2) < 1e-4\n  end\n  local function is_close_to_zero3(v1,\
    \ v2)\n    return v1 ~= nil and v2 ~= nil and math.abs(v1 - v2) < 1e-2\n  end\n\
    \  local function is_close_to_zero4(v1, v2)\n    return v1 ~= nil and v2 ~= nil\
    \ and math.abs(v1 - v2) < 1e-1\n  end\n  local function is_close_to_zero5(v1,\
    \ v2)\n    return v1 ~= nil and v2 ~= nil and math.abs(v1 - v2) < 1e-4\n  end\n\
    \  local function is_close_to_zero6(v1, v2)\n    return v1 ~= nil and v2 ~= nil\
    \ and math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero7(v1,\
    \ v2)\n    return v1 ~= nil and v2 ~= nil and math.abs(v1 - v2) < 1e-9\n  end\n\
    \  local function is_close_to_zero8(v1, v2)\n    return v1 ~= nil and v2 ~= nil\
    \ and math.abs(v1 - v2) < 1e-12\n  end\n  local function is_close_to_zero9(v1,\
    \ v2)\n    return v1 ~= nil and v2 ~= nil and math.abs(v1 - v2) < 1e-15\n  end\n\
    \  local function is_close_to_zero10(v1, v2)\n    return v1 ~= nil and v2 ~= nil\
    \ and math.abs(v1 - v2) < 1e-18\n  end\n  local function is_close_to_zero11(v1,\
    \ v2)\n    return v1 ~= nil and v2 ~= nil and math.abs(v1 - v2) < 1e-21\n  end\n\
    \  local function is_close_to_zero12(v1, v2)\n    return v1 ~= nil and v2 ~= nil\
    \ and math.abs(v1 - v2) < 1e-24\n  end\n  local function is_close_to_zero13(v1,\
    \ v2)\n    return v1 ", "  local function closest(num)\n    local diff1 = math.abs(num\
    \ - value)\n    local diff2 = math.abs(num - value + 0.5)\n    if diff1 <= diff2\
    \ then\n      return num\n    else\n      return num + 0.5\n    end\n  end\n \
    \ return closest\nend", "  local function is_equidistant(a, b)\n    return math.abs(a\
    \ - b) < 1e-6\n  end\n  local function round_away_from_zero(number)\n    return\
    \ math.floor(number + 0.5)\n  end\n  local function is_integer(value)\n    return\
    \ type(value) == \"number\" and math.floor(value) == value\n  end\n  local function\
    \ is_negative(value)\n    return type(value) == \"number\" and value < 0\n  end\n\
    \  local function is_positive(value)\n    return type(value) == \"number\" and\
    \ value > 0\n  end\n  local function is_zero(value)\n    return type(value) ==\
    \ \"number\" and value == 0\n  end\n  local function is_negative_integer(value)\n\
    \    return is_integer(value) and is_negative(value)\n  end\n  local function\
    \ is_positive_integer(value)\n    return is_integer(value) and is_positive(value)\n\
    \  end\n  local function is_zero_integer(value)\n    return is_integer(value)\
    \ and is_zero(value)\n  end\n  local function is_negative_integer_or_zero(value)\n\
    \    return is_negative_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_positive_integer_or_zero(value)\n    return is_positive_integer(value)\
    \ or is_zero_integer(value)\n  end\n  local function is_negative_integer_or_negative(value)\n\
    \    return is_negative_integer(value) or is_negative(value)\n  end\n  local function\
    \ is_positive_integer_or_positive(value)\n    return is_positive_integer(value)\
    \ or is_positive(value)\n  end\n  local function is_negative_integer_or_zero_integer(value)\n\
    \    return is_negative_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer(value)\n    return is_positive_integer(value)\
    \ or is_zero_integer(value)\n  end\n  local function is_negative_integer_or_negative_integer(value)\n\
    \    return is_negative_integer(value) or is_negative_integer(value)\n  end\n\
    \  local function is_positive_integer_or_positive_integer(value)\n    return is_positive_integer(value)\
    \ or is_positive_integer(value)\n  end\n  local function is_negative_integer_or_zero_integer_or_negative(value)\n\
    \    return is_negative_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer_or_positive(value)\n    return\
    \ is_positive_integer(value) or is_zero_integer(value)\n  end\n  local function\
    \ is_negative_integer_or_negative_integer_or_zero(value)\n    return is_negative_integer(value)\
    \ or is_negative_integer(value)\n  end\n  local function is_positive_integer_or_positive_integer_or_zero(value)\n\
    \    return is_positive_integer(value) or is_positive_integer(value)\n  end\n\
    \  local function ", "  local function is_equidistant(v1, v2)\n    return math.abs(v1\
    \ - v2) < 1e-6\n  end\n  local function is_close(v1, v2)\n    return math.abs(v1\
    \ - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1)\n    return math.abs(v1\
    \ - 0) == 0\n  end\n  local function is_close_to_zero2(v1)\n    return math.abs(v1\
    \ - 0) == 1e-6\n  end\n  local function is_close_to_zero3(v1)\n    return math.abs(v1\
    \ - 0) == 1e-5\n  end\n  local function is_close_to_zero4(v1)\n    return math.abs(v1\
    \ - 0) == 1e-4\n  end\n  local function is_close_to_zero5(v1)\n    return math.abs(v1\
    \ - 0) == 1e-3\n  end\n  local function is_close_to_zero6(v1)\n    return math.abs(v1\
    \ - 0) == 1e-2\n  end\n  local function is_close_to_zero7(v1)\n    return math.abs(v1\
    \ - 0) == 1e-1\n  end\n  local function is_close_to_zero8(v1)\n    return math.abs(v1\
    \ - 0) == 1e-9\n  end\n  local function is_close_to_zero9(v1)\n    return math.abs(v1\
    \ - 0) == 1e-7\n  end\n  local function is_close_to_zero10(v1)\n    return math.abs(v1\
    \ - 0) == 1e-6\n  end\n  local function is_close_to_zero11(v1)\n    return math.abs(v1\
    \ - 0) == 1e-5\n  end\n  local function is_close_to_zero12(v1)\n    return math.abs(v1\
    \ - 0) == 1e-4\n  end\n  local function is_close_to_zero13(v1)\n    return math.abs(v1\
    \ - 0) == 1e-3\n  end\n  local function is_close_to_zero14(v1)\n    return math.abs(v1\
    \ - 0) == 1e-2\n  end\n  local function is_close_to_zero15(v1)\n    return math.abs(v1\
    \ - 0) == 1e-1\n  end\n  local function is_close_to_zero16(v1)\n    return math.abs(v1\
    \ - 0) == 1e-9\n  end\n  local function is_close_to_zero17(v1)\n    return math.abs(v1\
    \ - 0) == 1e-7\n  end\n  local function is_close_to_zero18(v1)\n    return math.abs(v1\
    \ - 0) == 1e-6\n  end\n  local function is_close_to_zero19(v1)\n    return math.abs(v1\
    \ - 0) == 1e-5\n  end\n  local function is_close_to_zero20(v1)\n    return math.abs(v1\
    \ - 0) == 1e-4\n  end\n  local function is_close_to_zero21(v", "  local function\
    \ closest(num)\n    local diff\n    if num == nil then\n      diff = 0\n    else\n\
    \      diff = math.abs(num - value)\n    end\n    if diff < 0.5 then\n      return\
    \ value\n    else\n      return math.floor(value + 0.5)\n    end\n  end\n  return\
    \ closest\nend", "  local function is_equidistant(v1, v2)\n    return math.abs(v1\
    \ - v2) < 1e-6\n  end", "  local function closest(value, low, high)\n    if value\
    \ == low then\n      return low\n    end\n    if value == high then\n      return\
    \ high\n    end\n    if value < low then\n      return low\n    end\n    if value\
    \ > high then\n      return high\n    end\n    return value\n  end\n  return closest\n\
    end", "  local function closest(value)\n    local difference = value - math.floor(value)\n\
    \    if difference < 0 then\n      return math.ceil(value)\n    else\n      return\
    \ math.floor(value)\n    end\n  end\n  return closest(value)\nend", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function\
    \ is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local function\
    \ is_close_to_one(a)\n    return math.abs(a) < 1e-9\n  end\n  local function is_close_to_two(a)\n\
    \    return math.abs(a) < 1e-12\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) < 1e-18\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_six(a)\n\
    \    return math.abs(a) < 1e-24\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) < 1e-27\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-30\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-33\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) < 1e-36\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-39\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e-42\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e-45\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e-48\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e-51\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e-54\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e-57\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e-60\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e-63\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e-66\n  end\n  local function is_close_to_thirty(a)\n\
    \    return math.abs(a) < 1e-69\n  end\n  local function is_close_to_fourty(a)\n\
    \    return math.abs(a) < 1e-72\n  end\n  local function is_close_to_fifty(a)\n\
    \    return math.abs(a) < 1e-75\n  end\n  local function is_close_to_sixty(a)\n\
    \    return ", "  local function closest(value, low, high)\n    if value == low\
    \ then\n      return low\n    elseif value == high then\n      return high\n \
    \   else\n      local mid = (low + high) / 2\n      if math.abs(value - mid) <\
    \ math.abs(value - low) then\n        return closest(value, low, mid)\n      else\n\
    \        return closest(value, mid, high)\n      end\n    end\n  end\n  return\
    \ closest(value, \"0\", \"0\")\nend", "  local function is_equidistant(a, b)\n\
    \    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-4\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e0\n  end\n  local function is_close_to_five(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_six(a)\n    return\
    \ math.abs(a) < 1e2\n  end\n  local function is_close_to_seven(a)\n    return\
    \ math.abs(a) < 1e3\n  end\n  local function is_close_to_eight(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_nine(a)\n    return math.abs(a)\
    \ < 1e5\n  end\n  local function is_close_to_ten(a)\n    return math.abs(a) <\
    \ 1e6\n  end\n  local function is_close_to_eleven(a)\n    return math.abs(a) <\
    \ 1e7\n  end\n  local function is_close_to_twelve(a)\n    return math.abs(a) <\
    \ 1e8\n  end\n  local function is_close_to_thirteen(a)\n    return math.abs(a)\
    \ < 1e9\n  end\n  local function is_close_to_fourteen(a)\n    return math.abs(a)\
    \ < 1e10\n  end\n  local function is_close_to_fifteen(a)\n    return math.abs(a)\
    \ < 1e11\n  end\n  local function is_close_to_sixteen(a)\n    return math.abs(a)\
    \ < 1e12\n  end\n  local function is_close_to_seventeen(a)\n    return math.abs(a)\
    \ < 1e13\n  end\n  local function is_close_to_eighteen(a)\n    return math.abs(a)\
    \ < 1e14\n  end\n  local function is_close_to_nineteen(a)\n    return math.abs(a)\
    \ < 1e15\n  end\n  local function is_close_to_twenty(a)\n    return math.abs(a)\
    \ < 1e16\n  end\n  local function is_close_to_twenty_one(a)\n    return math.abs(a)\
    \ < 1e17\n  end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a)\
    \ < 1e18\n  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a)\
    \ < 1e19\n  end\n  local function is_close_to_tw", "  local function closest_integer(value)\n\
    \    if value == nil then return nil end\n    if value == 0 then return 0 end\n\
    \    local sign = math.sign(value)\n    local magnitude = math.abs(value)\n  \
    \  local int_magnitude = math.floor(magnitude)\n    local int_value = sign * int_magnitude\n\
    \    if int_value == magnitude then\n      return int_value\n    end\n    local\
    \ int_diff = magnitude - int_magnitude\n    local int_diff2 = int_diff * int_diff\n\
    \    local int_diff3 = int_diff2 * int_diff\n    local int_diff4 = int_diff3 *\
    \ int_diff\n    local int_diff5 = int_diff4 * int_diff\n    local int_diff6 =\
    \ int_diff5 * int_diff\n    local int_diff7 = int_diff6 * int_diff\n    local\
    \ int_diff8 = int_diff7 * int_diff\n    local int_diff9 = int_diff8 * int_diff\n\
    \    local int_diff10 = int_diff9 * int_diff\n    local int_diff11 = int_diff10\
    \ * int_diff\n    local int_diff12 = int_diff11 * int_diff\n    local int_diff13\
    \ = int_diff12 * int_diff\n    local int_diff14 = int_diff13 * int_diff\n    local\
    \ int_diff15 = int_diff14 * int_diff\n    local int_diff16 = int_diff15 * int_diff\n\
    \    local int_diff17 = int_diff16 * int_diff\n    local int_diff18 = int_diff17\
    \ * int_diff\n    local int_diff19 = int_diff18 * int_diff\n    local int_diff20\
    \ = int_diff19 * int_diff\n    local int_diff21 = int_diff20 * int_diff\n    local\
    \ int_diff22 = int_diff21 * int_diff\n    local int_diff23 = int_diff22 * int_diff\n\
    \    local int_diff24 = int_diff23 * int_diff\n    local int_diff25 = int_diff24\
    \ * int_diff\n    local int_diff26 = int_diff25 * int_diff\n    local int_diff27\
    \ = int_diff26 * int_diff\n    local int_diff28 = int_diff27 * int_diff\n    local\
    \ int_diff29 = int_diff28 * int_diff\n    local int_diff30 = int_diff29 * int_diff\n\
    \    local int_diff31 = int_diff30 * int_diff\n    local int_diff32 = int_diff31\
    \ * int_diff\n    local int_diff33 = int_diff32 * int_diff\n    local int_diff34\
    \ = int_diff33 * int_diff\n    local int_diff35 = int_diff34 * int_diff\n    local\
    \ int_diff", "  local function is_equidistant(a, b)\n    return math.abs(a - b)\
    \ < 1e-6\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ < 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a) <\
    \ 1e-9\n  end\n  local function is_close_to_two(a)\n    return math.abs(a) < 1e-2\n\
    \  end\n  local function is_close_to_three(a)\n    return math.abs(a) < 1e-3\n\
    \  end\n  local function is_close_to_four(a)\n    return math.abs(a) < 1e-4\n\
    \  end\n  local function is_close_to_five(a)\n    return math.abs(a) < 1e-5\n\
    \  end\n  local function is_close_to_six(a)\n    return math.abs(a) < 1e-6\n \
    \ end\n  local function is_close_to_seven(a)\n    return math.abs(a) < 1e-7\n\
    \  end\n  local function is_close_to_eight(a)\n    return math.abs(a) < 1e-8\n\
    \  end\n  local function is_close_to_nine(a)\n    return math.abs(a) < 1e-9\n\
    \  end\n  local function is_close_to_ten(a)\n    return math.abs(a) < 1e-10\n\
    \  end\n  local function is_close_to_eleven(a)\n    return math.abs(a) < 1e-11\n\
    \  end\n  local function is_close_to_twelve(a)\n    return math.abs(a) < 1e-12\n\
    \  end\n  local function is_close_to_thirteen(a)\n    return math.abs(a) < 1e-13\n\
    \  end\n  local function is_close_to_fourteen(a)\n    return math.abs(a) < 1e-14\n\
    \  end\n  local function is_close_to_fifteen(a)\n    return math.abs(a) < 1e-15\n\
    \  end\n  local function is_close_to_sixteen(a)\n    return math.abs(a) < 1e-16\n\
    \  end\n  local function is_close_to_seventeen(a)\n    return math.abs(a) < 1e-17\n\
    \  end\n  local function is_close_to_eighteen(a)\n    return math.abs(a) < 1e-18\n\
    \  end\n  local function is_close_to_nineteen(a)\n    return math.abs(a) < 1e-19\n\
    \  end\n  local function is_close_to_twenty(a)\n    return math.abs(a) < 1e-21\n\
    \  end\n  local function is_close_to_twenty_one(a)\n    return math.abs(a) < 1e-21\n\
    \  end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a) < 1e-21\n\
    \  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a) <\
    \ 1e-21\n  end\n  local function ", "  local function closest(value, low, high)\n\
    \    if value == low then\n      return low\n    end\n    if value == high then\n\
    \      return high\n    end\n    if value < low then\n      return low\n    end\n\
    \    if value > high then\n      return high\n    end\n    return value\n  end\n\
    \  local function round_away_from_zero(value)\n    if value == 0 then\n      return\
    \ 0\n    end\n    return math.floor(value)\n  end\n  local function round_to_zero(value)\n\
    \    if value == 0 then\n      return 0\n    end\n    return math.ceil(value)\n\
    \  end\n  local function round_to_nearest_integer(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_integer_or_zero(value)\n    if value\
    \ == 0 then\n      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_even(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_odd(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_ten(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_hundred(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_thousand(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_million(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_billion(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_trillion(value)\n    if value == 0 then\n\
    \      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_quadrillion(value)\n    if value ==\
    \ 0 then\n      return 0\n    end\n    return round_to_zero(value - math.floor(value))\n\
    \  end\n  local function round_to_nearest_quintillion(value)\n    if value ==\
    \ 0 then\n      return 0\n    end\n    return round_to_", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close(a, b)\
    \ return math.abs(a - b) < 1e-6 end\n  local function is_close_to_zero(a)\n  \
    \  return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_two(a)\n \
    \   return math.abs(a) < 1e-6\n  end\n  local function is_close_to_two_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_three_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_four_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_five_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_six(a)\n \
    \   return math.abs(a) < 1e-6\n  end\n  local function is_close_to_six_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_seven_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_eight_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_nine_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_ten(a)\n \
    \   return math.abs(a) < 1e-6\n  end\n  local function is_close_to_ten_inverse(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_ele", "  local\
    \ function closest(value, low, high)\n    if value == low then\n      return low\n\
    \    elseif value == high then\n      return high\n    else\n      local mid =\
    \ (low + high) / 2\n      if math.abs(value - mid) < math.abs(value - low) then\n\
    \        return closest(value, low, mid)\n      else\n        return closest(value,\
    \ mid, high)\n      end\n    end\n  end\n  return closest(value, \"0\", \"0\"\
    )\nend", "  local function closest(value, low, high)\n    local mid = (low + high)\
    \ / 2\n    if value == mid then\n      return mid\n    elseif value < mid then\n\
    \      return closest(value, low, mid)\n    else\n      return closest(value,\
    \ mid, high)\n    end\n  end", "  local function is_equidistant(a, b)\n    return\
    \ math.abs(a - b) < 1e-6\n  end\n  local function is_close(a, b) return math.abs(a\
    \ - b) < 1e-6 end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ < 1e-6\n  end\n  local function is_close_to_zero2(a)\n    return math.abs(a)\
    \ < 1e-5\n  end\n  local function is_close_to_zero3(a)\n    return math.abs(a)\
    \ < 1e-4\n  end\n  local function is_close_to_zero4(a)\n    return math.abs(a)\
    \ < 1e-3\n  end\n  local function is_close_to_zero5(a)\n    return math.abs(a)\
    \ < 1e-2\n  end\n  local function is_close_to_zero6(a)\n    return math.abs(a)\
    \ < 1e-1\n  end\n  local function is_close_to_zero7(a)\n    return math.abs(a)\
    \ < 1e0\n  end\n  local function is_close_to_zero8(a)\n    return math.abs(a)\
    \ < 1e1\n  end\n  local function is_close_to_zero9(a)\n    return math.abs(a)\
    \ < 1e2\n  end\n  local function is_close_to_zero10(a)\n    return math.abs(a)\
    \ < 1e3\n  end\n  local function is_close_to_zero11(a)\n    return math.abs(a)\
    \ < 1e4\n  end\n  local function is_close_to_zero12(a)\n    return math.abs(a)\
    \ < 1e5\n  end\n  local function is_close_to_zero13(a)\n    return math.abs(a)\
    \ < 1e6\n  end\n  local function is_close_to_zero14(a)\n    return math.abs(a)\
    \ < 1e7\n  end\n  local function is_close_to_zero15(a)\n    return math.abs(a)\
    \ < 1e8\n  end\n  local function is_close_to_zero16(a)\n    return math.abs(a)\
    \ < 1e9\n  end\n  local function is_close_to_zero17(a)\n    return math.abs(a)\
    \ < 1e10\n  end\n  local function is_close_to_zero18(a)\n    return math.abs(a)\
    \ < 1e11\n  end\n  local function is_close_to_zero19(a)\n    return math.abs(a)\
    \ < 1e12\n  end\n  local function is_close_to_zero20(a)\n    return math.abs(a)\
    \ < 1e13\n  end\n  local function is_close_to_zero21(a)\n    return math.abs(a)\
    \ < 1e14\n  end\n  local function is_close_to_zero22(a)\n    return math.abs(a)\
    \ < 1e15\n  end\n  local function is_close_to_zero23(a)\n    return math.abs(a)\
    \ < 1e16\n  end\n  local function is_close_to_zero24(a)\n    return math.abs(a)\
    \ < 1e", "  local function is_equidistant(a, b)\n    return math.abs(a - b) <\
    \ 1e-6\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a) <\
    \ 1e-6\n  end\n  local function round_away_from_zero(a)\n    return math.floor(a\
    \ + 0.5)\n  end\n  local function round_to_zero(a)\n    return math.floor(a -\
    \ 0.5)\n  end\n  local function round_to_nearest_integer(a)\n    return round_to_zero(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_integer_or_zero(a)\n    return round_to_nearest_integer(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero2(a)\n    return\
    \ round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero3(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero4(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero5(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero6(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero7(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero8(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero9(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero10(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero11(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero12(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero13(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero14(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero15(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero16(a)\n\
    \    return round_to_nearest_integer(a) or ", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-4\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-2\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e0\n  end\n  local function is_close_to_seven(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_eight(a)\n  \
    \  return math.abs(a) < 1e2\n  end\n  local function is_close_to_nine(a)\n   \
    \ return math.abs(a) < 1e3\n  end\n  local function is_close_to_ten(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_eleven(a)\n    return\
    \ math.abs(a) < 1e5\n  end\n  local function is_close_to_twelve(a)\n    return\
    \ math.abs(a) < 1e6\n  end\n  local function is_close_to_thirteen(a)\n    return\
    \ math.abs(a) < 1e7\n  end\n  local function is_close_to_fourteen(a)\n    return\
    \ math.abs(a) < 1e8\n  end\n  local function is_close_to_fifteen(a)\n    return\
    \ math.abs(a) < 1e9\n  end\n  local function is_close_to_sixteen(a)\n    return\
    \ math.abs(a) < 1e10\n  end\n  local function is_close_to_seventeen(a)\n    return\
    \ math.abs(a) < 1e11\n  end\n  local function is_close_to_eighteen(a)\n    return\
    \ math.abs(a) < 1e12\n  end\n  local function is_close_to_nineteen(a)\n    return\
    \ math.abs(a) < 1e13\n  end\n  local function is_close_to_twenty(a)\n    return\
    \ math.abs(a) < 1e14\n  end\n  local function is_close_to_twenty_one(a)\n    return\
    \ math.abs(a) < 1e15\n  end\n  local function is_close_to_twenty_two(a)\n    return\
    \ math.abs(a) < 1e16\n  end\n  local function is_close_to_twenty_three(a)\n  \
    \  return math.abs(a) < 1e17\n  end\n  local function is_close_to_tw", "  local\
    \ function closest(num)\n    local difference = math.abs(num - value)\n    if\
    \ difference < 0.5 then\n      return value\n    else\n      return math.floor(value\
    \ + 0.5)\n    end\n  end", "  local function is_equidistant(a, b)\n    return\
    \ math.abs(a - b) <= math.abs(a - b + 0.5)\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) <= 0.5\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) <= 1\n  end\n  local function is_close_to_two(a)\n    return\
    \ math.abs(a) <= 2\n  end\n  local function is_close_to_three(a)\n    return math.abs(a)\
    \ <= 3\n  end\n  local function is_close_to_four(a)\n    return math.abs(a) <=\
    \ 4\n  end\n  local function is_close_to_five(a)\n    return math.abs(a) <= 5\n\
    \  end\n  local function is_close_to_six(a)\n    return math.abs(a) <= 6\n  end\n\
    \  local function is_close_to_seven(a)\n    return math.abs(a) <= 7\n  end\n \
    \ local function is_close_to_eight(a)\n    return math.abs(a) <= 8\n  end\n  local\
    \ function is_close_to_nine(a)\n    return math.abs(a) <= 9\n  end\n  local function\
    \ is_close_to_ten(a)\n    return math.abs(a) <= 10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) <= 11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) <= 12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) <= 13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) <= 14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) <= 15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) <= 16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) <= 17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) <= 18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) <= 19\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) <= 20\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) <= 21\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) <= 22\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) <= 23\n  end\n  local function is_close_to_twenty_four(a)\n\
    \    return math.abs(a) <= 24\n  end\n  local function is_close", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function\
    \ is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local function\
    \ is_close_to_one(a)\n    return math.abs(a) < 1e-4\n  end\n  local function is_close_to_two(a)\n\
    \    return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) < 1e-1\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) < 1e-3\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) < 1e-5\n  end\n  local function is_close_to_six(a)\n \
    \   return math.abs(a) < 1e-6\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) < 1e-7\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-8\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-9\n  end\n  local function is_close_to_ten(a)\n \
    \   return math.abs(a) < 1e-10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e-12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e-13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e-14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e-16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e-17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e-18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e-19\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function ", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) <= math.abs(a - b + 0.5)\n\
    \  end\n  local function is_close(a, b) return math.abs(a - b) < math.abs(a -\
    \ b + 0.5) end\n  local function is_close_to_zero(a) return math.abs(a) < math.abs(a\
    \ + 0.5) end\n  local function is_close_to_zero_b(a) return math.abs(a) < math.abs(a\
    \ - 0.5) end\n  local function is_close_to_zero_c(a) return math.abs(a) < math.abs(a\
    \ - 1.5) end\n  local function is_close_to_zerod(a) return math.abs(a) < math.abs(a\
    \ - 2.5) end\n  local function is_close_to_zero_e(a) return math.abs(a) < math.abs(a\
    \ - 3.5) end\n  local function is_close_to_zero_g(a) return math.abs(a) < math.abs(a\
    \ - 4.5) end\n  local function is_close_to_zero_h(a) return math.abs(a) < math.abs(a\
    \ - 5.5) end\n  local function is_close_to_zero_i(a) return math.abs(a) < math.abs(a\
    \ - 6.5) end\n  local function is_close_to_zero_j(a) return math.abs(a) < math.abs(a\
    \ - 7.5) end\n  local function is_close_to_zero_k(a) return math.abs(a) < math.abs(a\
    \ - 8.5) end\n  local function is_close_to_zero_l(a) return math.abs(a) < math.abs(a\
    \ - 9.5) end\n  local function is_close_to_zero_m(a) return math.abs(a) < math.abs(a\
    \ - 10.5) end\n  local function is_close_to_zero_n(a) return math.abs(a) < math.abs(a\
    \ - 11.5) end\n  local function is_close_to_zero_p(a) return math.abs(a) < math.abs(a\
    \ - 12.5) end\n  local function is_close_to_zero_q(a) return math.abs(a) < math.abs(a\
    \ - 13.5) end\n  local function is_close_to_zero_t(a) return math.abs(a) < math.abs(a\
    \ - 14.5) end\n  local function is_close_to_zero_u(a) return math.abs(a) < math.abs(a\
    \ - 15.5) end\n  local function is_close_to_zero_v(a) return math.abs(a) < math.abs(a\
    \ - 16.5) end\n  local function is_close_to_zero_w(a) return math.abs(a) < math.abs(a\
    \ - 17.5) end\n  local function is_close_to_zero_x(a) return math.abs(a) < math.abs(a\
    \ - 18.5) end\n  local function is_close_to_zero_y(a) return math.abs(a) < math.abs(a\
    \ - 19.5) end\n  local function is_close_to_zero_z(a) return math.abs(a) < math.abs(a\
    \ - 20", "  local function is_equidistant(a, b)\n    return math.abs(a - b) <\
    \ 1e-6\n  end\n  local function round_away_from_zero(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_zero(number)\n    return math.floor(number)\n\
    \  end\n  local function round_to_nearest(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_even(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_odd(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_ten(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_hundred(number)\n    return\
    \ math.floor(number + 0.5)\n  end\n  local function round_to_nearest_thousand(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_million(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_billion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_trillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quadrillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quintillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_sextillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_septillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_octillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_nonillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_decillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_undecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_duodecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_tredecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quattuordecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quindecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_", "  local\
    \ function closest(value)\n    local difference = value - math.floor(value)\n\
    \    if difference < 0 then\n      return math.ceil(value)\n    else\n      return\
    \ math.floor(value)\n    end\n  end\n  return closest(value)\nend", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end", "  local function\
    \ closest(value)\n    if value == nil then\n      return nil\n    end\n    local\
    \ sign = math.sign(value)\n    local absValue = abs(value)\n    local absSign\
    \ = math.sign(absValue)\n    local absDiff = absValue - absSign\n    local absDiffAbs\
    \ = absDiff % 1\n    local absDiffAbsSign = absDiffAbs * sign\n    local absDiffAbsSignAbs\
    \ = absDiffAbsSign * absSign\n    local absDiffAbsSignAbsAbs = absDiffAbsSignAbs\
    \ * absSign\n    local absDiffAbsSignAbsAbsAbs = absDiffAbsSignAbsAbs * absSign\n\
    \    local absDiffAbsSignAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbs * absSign\n  \
    \  local absDiffAbsSignAbsAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbsAbs * absSign\n\
    \    local absDiffAbsSignAbsAbsAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbsAbsAbs *\
    \ absSign\n    local absDiffAbsSignAbsAbsAbsAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbsAbsAbsAbs\
    \ * absSign\n    local absDiffAbsSignAbsAbsAbsAbsAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbsAbsAbsAbsAbs\
    \ * absSign\n    local absDiffAbsSignAbsAbsAbsAbsAbsAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbsAbsAbsAbsAbsAbsAbs\
    \ * absSign\n    local absDiffAbsSignAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs\
    \ * absSign\n    local absDiffAbsSignAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs = absDiffAbsSignAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs\
    \ * absSign\n    local absDiffAbsSignAbsAbsAbsAbsAbsAbs", "  local function closest(value,\
    \ low, high)\n    if value == low then\n      return low\n    elseif value ==\
    \ high then\n      return high\n    else\n      local mid = (low + high) / 2\n\
    \      if math.abs(value - mid) < math.abs(value - low) then\n        return closest(value,\
    \ low, mid)\n      else\n        return closest(value, mid, high)\n      end\n\
    \    end\n  end\n  return closest(value, \"0\", \"0\")\nend", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) <= math.abs(a) + math.abs(b)\n\
    \  end\n  local function is_close_to_zero(a)\n    return math.abs(a) <= math.abs(a)\
    \ + 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a) <=\
    \ math.abs(a) + 1e-5\n  end\n  local function is_close_to_two(a)\n    return math.abs(a)\
    \ <= math.abs(a) + 1e-4\n  end\n  local function is_close_to_three(a)\n    return\
    \ math.abs(a) <= math.abs(a) + 1e-3\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-2\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-1\n  end\n  local function is_close_to_six(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e0\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e1\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e2\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e3\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e4\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e5\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e6\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e7\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e8\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e9\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e10\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e11\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e12\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e13\n  end\n  local function is_close_to_twenty(",
  "  local function round_away_from_zero(n)\n    if n == 0 then\n      return n\n\
    \    end\n    local sign = math.sign(n)\n    local abs = math.abs(n)\n    local\
    \ abs_rounded = math.floor(abs + 0.5)\n    local rounded = sign * abs_rounded\
    \ + 0.5\n    if rounded == abs then\n      return 0\n    end\n    return rounded\n\
    \  end\n  local function round_to_zero(n)\n    if n == 0 then\n      return 0\n\
    \    end\n    local sign = math.sign(n)\n    local abs = math.abs(n)\n    local\
    \ abs_rounded = math.floor(abs + 0.5)\n    local rounded = sign * abs_rounded\
    \ + 0.5\n    if rounded == abs then\n      return 0\n    end\n    return rounded\n\
    \  end\n  local function round_to_nearest_integer(n)\n    if n == 0 then\n   \
    \   return 0\n    end\n    local sign = math.sign(n)\n    local abs = math.abs(n)\n\
    \    local abs_rounded = math.floor(abs + 0.5)\n    local rounded = sign * abs_rounded\
    \ + 0.5\n    if rounded == abs then\n      return 0\n    end\n    return rounded\n\
    \  end\n  local function round_to_nearest_integer_or_zero(n)\n    if n == 0 then\n\
    \      return 0\n    end\n    local sign = math.sign(n)\n    local abs = math.abs(n)\n\
    \    local abs_rounded = math.floor(abs + 0.5)\n    local rounded = sign * abs_rounded\
    \ + 0.5\n    if rounded == abs then\n      return 0\n    end\n    return rounded\n\
    \  end\n  local function round_to_nearest_integer_or_zero2(n)\n    if n == 0 then\n\
    \      return 0\n    end\n    local sign = math.sign(n)\n    local abs = math.abs(n)\n\
    \    local abs_rounded = math.floor(abs + 0.5)\n    local rounded = sign * abs_rounded\
    \ + 0.5\n    if rounded == abs then\n      return 0\n    end\n    return rounded\n\
    \  end\n  local function round_to_nearest_integer_or_zero3(n)\n    if n == 0 then\n\
    \      return 0\n    end\n    local sign = math.sign(n)\n    local abs = math.abs(n)\n\
    \    local abs_rounded = math.floor(abs + 0.5)\n    local rounded = sign * abs_rounded\
    \ + 0.5\n    if rounded == abs then\n      return 0\n    end\n    return rounded\n\
    \  end\n  local function round_to_nearest_integer_or_zero4(n)\n    if n == 0 then\n\
    \      return 0\n    end\n    local sign = math.sign(n)\n    local abs = math.abs(n)\n\
    \    local abs_rounded = math.floor(abs + 0.5)", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end", "  local function closest(x,\
    \ y)\n    if x == y then return x end\n    if x < y then return x end\n    return\
    \ y\n  end\n  local function is_equidistant(x, y)\n    return math.abs(x - y)\
    \ < math.abs(x - y) + math.abs(y - x)\n  end\n  local function round_away_from_zero(x)\n\
    \    return math.floor(x / 10) * 10\n  end\n  local function is_negative(x)\n\
    \    return x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n\
    \  end\n  local function is_integer(x)\n    return x == math.floor(x)\n  end\n\
    \  local function is_float(x)\n    return x == math.floor(x) or x == math.ceil(x)\n\
    \  end\n  local function is_negative_integer(x)\n    return is_integer(x) and\
    \ is_negative(x)\n  end\n  local function is_positive_integer(x)\n    return is_integer(x)\
    \ and is_positive(x)\n  end\n  local function is_float_integer(x)\n    return\
    \ is_integer(x) and is_float(x)\n  end\n  local function is_negative_integer_or_float(x)\n\
    \    return is_negative_integer(x) or is_float_integer(x)\n  end\n  local function\
    \ is_positive_integer_or_float(x)\n    return is_positive_integer(x) or is_float_integer(x)\n\
    \  end\n  local function is_negative_integer_or_float_integer(x)\n    return is_negative_integer(x)\
    \ or is_positive_integer(x)\n  end\n  local function is_positive_integer_or_float_integer(x)\n\
    \    return is_positive_integer(x) or is_negative_integer(x)\n  end\n  local function\
    \ is_negative_integer_or_float_float(x)\n    return is_negative_integer(x) or\
    \ is_float(x)\n  end\n  local function is_positive_integer_or_float_float(x)\n\
    \    return is_positive_integer(x) or is_float(x)\n  end\n  local function is_negative_integer_or_float_integer_float(x)\n\
    \    return is_negative_integer(x) or is_positive_integer(x)\n  end\n  local function\
    \ is_positive_integer_or_float_float(x)\n    return is_positive_integer(x) or\
    \ is_float(x)\n  end\n  local function is_negative_integer_or_float_integer_float_float(x)\n\
    \    return is_negative_integer(x) or is_positive_integer(x)\n  end\n  local function\
    \ is_positive_integer_or_float_float_float(x)\n    return is_positive_integer(x)\
    \ or is_float(x)\n  end\n  local function is_negative_integer_or_float_integer_float_float_float(x)\n\
    \    return is_negative_integer(x) or is_positive_integer(x)\n  end\n  local function\
    \ is_positive_integer_or_float_float_float_float(x)", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end", "  local function closest(value)\n\
    \    local closest\n    local closest_diff\n    local closest_sign\n    if value\
    \ == nil then\n      closest = \"nil\"\n      closest_diff = 0\n      closest_sign\
    \ = 1\n    else\n      local sign = math.sign(value)\n      local abs_value =\
    \ abs(value)\n      local abs_diff = abs_value - abs_value % 1\n      if abs_diff\
    \ == 0 then\n        closest = \"0\"\n        closest_diff = 0\n        closest_sign\
    \ = sign\n      else\n        local diff = abs_value - abs_diff % 1\n        closest\
    \ = (abs_value - abs_diff % 1) + sign\n        closest_diff = diff\n        closest_sign\
    \ = sign\n      end\n    end\n    return closest\n  end\n  local function round_away_from_zero(closest)\n\
    \    local function round_away_from_zero_helper(closest)\n      local sign = math.sign(closest)\n\
    \      local abs_value = abs(closest)\n      local abs_diff = abs_value - abs_value\
    \ % 1\n      if abs_diff == 0 then\n        closest = \"0\"\n        closest_diff\
    \ = 0\n        closest_sign = sign\n      else\n        local diff = abs_value\
    \ - abs_diff % 1\n        closest = (abs_value - abs_diff % 1) + sign\n      \
    \  closest_diff = diff\n        closest_sign = sign\n      end\n      return closest\n\
    \    end\n    local function round_away_from_zero_helper2(closest)\n      local\
    \ sign = math.sign(closest)\n      local abs_value = abs(closest)\n      local\
    \ abs_diff = abs_value - abs_value % 1\n      if abs_diff == 0 then\n        closest\
    \ = \"0\"\n        closest_diff = 0\n        closest_sign = sign\n      else\n\
    \        local diff = abs_value - abs_diff % 1\n        closest = (abs_value -\
    \ abs_diff % 1) + sign\n        closest_diff = diff\n        closest_sign = sign\n\
    \      end\n      return closest\n    end\n    if value == nil then\n      return\
    \ \"nil\"\n    else\n      local closest\n      local closest_diff\n      local\
    \ closest_sign\n      if value == 0 then\n        closest = \"0\"\n        closest_diff\
    \ = 0\n        closest_sign = 1\n      else\n        local sign = math.sign(value)\n\
    \        local abs_value = abs(value)\n        local abs_diff = abs_value - abs_value\
    \ % 1\n        if abs_diff == 0 then\n          closest = \"0\"\n          closest_diff\
    \ = 0\n          closest_sign = sign\n        else\n          local diff = abs_value\
    \ - abs_diff % 1\n          closest = (abs_value - abs_diff % 1) + sign\n    \
    \      closest_diff = diff\n          closest_sign = sign\n        end\n     \
    \ end\n      return round_away_from_zero_helper(closest)", "  local function closest(value)\n\
    \    local closest_value = math.abs(value)\n    if value == 0 then\n      return\
    \ 0\n    end\n    if value < 0 then\n      closest_value = -closest_value\n  \
    \  end\n    local closest_integer = math.floor(closest_value)\n    if closest_value\
    \ == closest_integer then\n      return closest_integer\n    end\n    return closest_integer\n\
    \  end\n  return closest(value)\nend", "  local function closest(num)\n    local\
    \ sign = math.sign(num) -- Get the sign of the number\n    local num = math.abs(num)\
    \ -- Get the absolute value of the number\n    local int_part = math.floor(num)\
    \ -- Get the integer part of the number\n    local frac_part = num - int_part\
    \ -- Get the fractional part of the number\n    local round_to_zero = sign ==\
    \ 1 and frac_part == 0 -- Check if rounding away from zero\n    if round_to_zero\
    \ then\n      return int_part -- If rounding away from zero, return the integer\
    \ part\n    else\n      return int_part + 1 -- If rounding away from zero, return\
    \ the integer part + 1\n    end\n  end\n  return closest(value)\nend", "  local\
    \ function closest(num)\n    local num = tonumber(num)\n    if num == nil then\n\
    \      return nil\n    end\n    local diff = abs(num - value)\n    if diff < 1\
    \ then\n      return value\n    elseif diff < 2 then\n      return num\n    else\n\
    \      return num - diff\n    end\n  end\n  return closest\nend", "  local function\
    \ closest(value)\n    local closest = value\n    local closest = math.floor(closest)\n\
    \    if closest < 0 then\n      closest = closest + math.abs(closest)\n    end\n\
    \    return closest\n  end\n  local function closest2(value)\n    local closest\
    \ = value\n    local closest = math.floor(closest)\n    if closest < 0 then\n\
    \      closest = closest + math.abs(closest)\n    end\n    return closest\n  end\n\
    \  local function closest3(value)\n    local closest = value\n    local closest\
    \ = math.floor(closest)\n    if closest < 0 then\n      closest = closest + math.abs(closest)\n\
    \    end\n    return closest\n  end\n  local function closest4(value)\n    local\
    \ closest = value\n    local closest = math.floor(closest)\n    if closest < 0\
    \ then\n      closest = closest + math.abs(closest)\n    end\n    return closest\n\
    \  end\n  local function closest5(value)\n    local closest = value\n    local\
    \ closest = math.floor(closest)\n    if closest < 0 then\n      closest = closest\
    \ + math.abs(closest)\n    end\n    return closest\n  end\n  local function closest6(value)\n\
    \    local closest = value\n    local closest = math.floor(closest)\n    if closest\
    \ < 0 then\n      closest = closest + math.abs(closest)\n    end\n    return closest\n\
    \  end\n  local function closest7(value)\n    local closest = value\n    local\
    \ closest = math.floor(closest)\n    if closest < 0 then\n      closest = closest\
    \ + math.abs(closest)\n    end\n    return closest\n  end\n  local function closest8(value)\n\
    \    local closest = value\n    local closest = math.floor(closest)\n    if closest\
    \ < 0 then\n      closest = closest + math.abs(closest)\n    end\n    return closest\n\
    \  end\n  local function closest9(value)\n    local closest = value\n    local\
    \ closest = math.floor(closest)\n    if closest < 0 then\n      closest = closest\
    \ + math.abs(closest)\n    end\n    return closest\n  end\n  local function closest10(value)\n\
    \    local closest = value\n    local closest = math.floor(closest)\n    if closest\
    \ < 0 then\n      closest = closest + math.abs(closest)\n    end\n    return closest\n\
    \  end\n  local function closest11(value)\n    local closest = value\n    local\
    \ closest = math.floor(closest)\n    if closest < 0 then\n      closest = closest\
    \ + math.abs(closest)\n    end\n    return closest\n  end\n  local function closest12(value)\n\
    \    local closest = value\n    local closest = math.", "  local function closest(num)\n\
    \    local sign = math.sign(num) -- Get the sign of the number\n    local num\
    \ = math.abs(num) -- Get the absolute value of the number\n    local int_part\
    \ = math.floor(num) -- Get the integer part\n    local frac_part = num - int_part\
    \ -- Get the fractional part\n    local frac_part_sign = math.sign(frac_part)\
    \ -- Get the sign of the fractional part\n    local frac_part_int = frac_part\
    \ * sign\n    local frac_part_int_sign = math.sign(frac_part_int)\n    local frac_part_int_int_sign\
    \ = math.sign(frac_part_int_int)\n    local frac_part_int_int_int_sign = math.sign(frac_part_int_int_int)\n\
    \    local frac_part_int_int_int_int_sign = math.sign(frac_part_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_int_int_int_int_sign = math.sign(frac_part_int_int_int_int_int_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_int_int_int_int_int_sign\
    \ = math.sign(frac_part_int_int_int_int_int_int_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_int_int_int_int_int_int_sign\
    \ = math.sign(frac_part_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_sign\
    \ = math.sign(frac_part_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int)\n\
    \    local frac_part_int_int_int_int_int_", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function round_away_from_zero(v)\n\
    \    return math.floor(math.abs(v) + 0.5)\n  end\n  local function is_integer(value)\n\
    \    return type(value) == \"number\" and math.floor(value) == value\n  end\n\
    \  local function is_negative(value)\n    return value < 0\n  end\n  local function\
    \ is_positive(value)\n    return value > 0\n  end\n  local function is_zero(value)\n\
    \    return value == 0\n  end\n  local function is_negative_integer(value)\n \
    \   return is_integer(value) and is_negative(value)\n  end\n  local function is_positive_integer(value)\n\
    \    return is_integer(value) and is_positive(value)\n  end\n  local function\
    \ is_zero_integer(value)\n    return is_integer(value) and is_zero(value)\n  end\n\
    \  local function is_negative_integer_or_zero(value)\n    return is_negative_integer(value)\
    \ or is_zero_integer(value)\n  end\n  local function is_positive_integer_or_zero(value)\n\
    \    return is_positive_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_negative_integer_or_positive(value)\n    return is_negative_integer(value)\
    \ or is_positive_integer(value)\n  end\n  local function is_positive_integer_or_negative(value)\n\
    \    return is_positive_integer(value) or is_negative_integer(value)\n  end\n\
    \  local function is_negative_integer_or_zero_integer(value)\n    return is_negative_integer(value)\
    \ or is_zero_integer(value)\n  end\n  local function is_positive_integer_or_zero_integer(value)\n\
    \    return is_positive_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_negative_integer_or_positive_integer(value)\n    return is_negative_integer(value)\
    \ or is_positive_integer(value)\n  end\n  local function is_positive_integer_or_negative_integer(value)\n\
    \    return is_positive_integer(value) or is_negative_integer(value)\n  end\n\
    \  local function is_negative_integer_or_zero_integer_or_positive(value)\n   \
    \ return is_negative_integer(value) or is_zero_integer(value) or is_positive_integer(value)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_negative(value)\n\
    \    return is_positive_integer(value) or is_zero_integer(value) or is_negative_integer(value)\n\
    \  end\n  local function is_negative_integer_or_positive_integer_or_zero(value)\n\
    \    return is_negative_integer(value) or is_positive_integer(value) or is_zero_integer(value)\n\
    \  end\n  local function is_positive_integer_or_negative_integer_or_zero(value)\n\
    \    return is_positive_integer(", "  local function is_equidistant(a, b)\n  \
    \  return math.abs(a - b) < 1e-6\n  end\n  local function round_away_from_zero(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_zero(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_even(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_odd(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_tenth(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_hundred(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_thousand(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_million(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_billion(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_trillion(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_quadrillion(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_to_nearest_quintillion(number)\n\
    \    if number < 0 then\n      return math.floor(number - 0.5)\n    else\n   \
    \   return math.ceil(number + 0.5)\n    end\n  end\n  local function round_",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end",
  "  local function closest(value)\n    if value == nil then\n      return nil\n \
    \   end\n    if value == 0 then\n      return 0\n    end\n    local closest\n\
    \    local closest = value\n    local difference\n    for difference = 1, #value\
    \ do\n      if math.abs(value - closest) < math.abs(value - closest) then\n  \
    \      closest = value\n      else\n        break\n      end\n    end\n    return\
    \ closest\n  end\n  return closest(value)\nend", "  local function closest(value)\n\
    \    local closest = value\n    local difference = math.abs(value - closest)\n\
    \    if difference < math.abs(closest - closest) then\n      closest = closest\n\
    \    end\n    return closest\n  end\n  return closest(value)\nend", "  local function\
    \ closest(value)\n    local sign = math.sign(value)\n    local sign2 = sign *\
    \ sign\n    local absValue = abs(value)\n    local absValue2 = absValue * absValue\n\
    \    local absValue3 = absValue2 * absValue\n    local absValue4 = absValue3 *\
    \ absValue\n    local absValue5 = absValue4 * absValue\n    local absValue6 =\
    \ absValue5 * absValue\n    local absValue7 = absValue6 * absValue\n    local\
    \ absValue8 = absValue7 * absValue\n    local absValue9 = absValue8 * absValue\n\
    \    local absValue10 = absValue9 * absValue\n    local absValue11 = absValue10\
    \ * absValue\n    local absValue12 = absValue11 * absValue\n    local absValue13\
    \ = absValue12 * absValue\n    local absValue14 = absValue13 * absValue\n    local\
    \ absValue15 = absValue14 * absValue\n    local absValue16 = absValue15 * absValue\n\
    \    local absValue17 = absValue16 * absValue\n    local absValue18 = absValue17\
    \ * absValue\n    local absValue19 = absValue18 * absValue\n    local absValue20\
    \ = absValue19 * absValue\n    local absValue21 = absValue20 * absValue\n    local\
    \ absValue22 = absValue21 * absValue\n    local absValue23 = absValue22 * absValue\n\
    \    local absValue24 = absValue23 * absValue\n    local absValue25 = absValue24\
    \ * absValue\n    local absValue26 = absValue25 * absValue\n    local absValue27\
    \ = absValue26 * absValue\n    local absValue28 = absValue27 * absValue\n    local\
    \ absValue29 = absValue28 * absValue\n    local absValue30 = absValue29 * absValue\n\
    \    local absValue31 = absValue30 * absValue\n    local absValue32 = absValue31\
    \ * absValue\n    local absValue33 = absValue32 * absValue\n    local absValue34\
    \ = absValue33 * absValue\n    local absValue35 = absValue34 * absValue\n    local\
    \ absValue36 = absValue35 * absValue\n    local absValue37 = absValue36 * absValue\n\
    \    local absValue38 = absValue37 * absValue\n    local absValue39 = absValue38\
    \ * absValue\n    local absValue40 = abs", "  local function abs(x)\n    return\
    \ math.abs(x)\n  end\n  local function is_equidistant(x, y)\n    return abs(x\
    \ - y) < 1e-6\n  end\n  local function is_close_to_zero(x)\n    return abs(x -\
    \ 0) < 1e-6\n  end\n  local function round_away_from_zero(x)\n    return math.floor(x\
    \ + 0.5)\n  end\n  local function round_to_zero(x)\n    return math.floor(x -\
    \ 0.5)\n  end\n  local function is_negative(x)\n    return x < 0\n  end\n  local\
    \ function is_positive(x)\n    return x > 0\n  end\n  local function is_zero(x)\n\
    \    return x == 0\n  end\n  local function is_integer(x)\n    return type(x)\
    \ == \"number\" and math.floor(x) == x\n  end\n  local function is_float(x)\n\
    \    return type(x) == \"number\" and math.floor(x) == x and x ~= x\n  end\n \
    \ local function is_nan(x)\n    return type(x) == \"number\" and math.floor(x)\
    \ == x and x ~= x\n  end\n  local function is_inf(x)\n    return type(x) == \"\
    number\" and math.floor(x) == x and x ~= x\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and math.floor(x) == x\n  end\n  local function\
    \ is_float(x)\n    return type(x) == \"number\" and math.floor(x) == x and x ~=\
    \ x\n  end\n  local function is_nan(x)\n    return type(x) == \"number\" and math.floor(x)\
    \ == x and x ~= x\n  end\n  local function is_inf(x)\n    return type(x) == \"\
    number\" and math.floor(x) == x and x ~= x\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and math.floor(x) == x\n  end\n  local function\
    \ is_float(x)\n    return type(x) == \"number\" and math.floor(x) == x and x ~=\
    \ x\n  end\n  local function is_nan(x)\n    return type(x) == \"number\" and math.floor(x)\
    \ == x and x ~= x\n  end\n  local function is_inf(x)\n    return type(x) == \"\
    number\" and math.floor(x) == x and x ~= x\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and math.floor(x) == x\n  end\n  local function\
    \ is_float(x)\n    return type(x) == \"number\" and math.floor(x) == x and x ~=\
    \ x\n  end\n  local function is_nan(x)\n    return type(x) == \"number\" and math.floor(x)\
    \ == x and x ~= x\n  end\n  local function is_inf(x)\n    return type(x) == \"\
    number\" and math.floor(x) == x and x ~= x\n  end", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) <= math.abs(a) + math.abs(b)\n  end\n  local\
    \ function round_away_from_zero(number)\n    if number < 0 then\n      return\
    \ -round_away_from_zero(-number)\n    else\n      return math.floor(number)\n\
    \    end\n  end\n  local function round_to_nearest(number)\n    if number < 0\
    \ then\n      return -round_to_nearest(-number)\n    else\n      return math.floor(number)\n\
    \    end\n  end\n  local function round_to_zero(number)\n    if number < 0 then\n\
    \      return -round_to_zero(-number)\n    else\n      return round_to_nearest(number)\n\
    \    end\n  end\n  local function round_to_even(number)\n    if number < 0 then\n\
    \      return -round_to_even(-number)\n    else\n      return round_to_nearest(math.floor(number))\n\
    \    end\n  end\n  local function round_to_odd(number)\n    if number < 0 then\n\
    \      return -round_to_odd(-number)\n    else\n      return round_to_nearest(math.floor(number)\
    \ + 1)\n    end\n  end\n  local function round_to_ten(number)\n    if number <\
    \ 0 then\n      return -round_to_ten(-number)\n    else\n      return round_to_nearest(math.floor(number)\
    \ / 10)\n    end\n  end\n  local function round_to_hundred(number)\n    if number\
    \ < 0 then\n      return -round_to_hundred(-number)\n    else\n      return round_to_nearest(math.floor(number)\
    \ / 100)\n    end\n  end\n  local function round_to_thousand(number)\n    if number\
    \ < 0 then\n      return -round_to_thousand(-number)\n    else\n      return round_to_nearest(math.floor(number)\
    \ / 1000)\n    end\n  end\n  local function round_to_tenthousand(number)\n   \
    \ if number < 0 then\n      return -round_to_tenthousand(-number)\n    else\n\
    \      return round_to_nearest(math.floor(number) / 10000)\n    end\n  end\n \
    \ local function round_to_hundred(number)\n    if number < 0 then\n      return\
    \ -round_to_hundred(-number)\n    else\n      return round_to_nearest(math.floor(number)\
    \ / 100000)\n    end\n  end\n  local function round_to_thousand(number)\n    if\
    \ number < 0 then\n      return -round_to_thousand(-number)\n    else\n      return\
    \ round_to_nearest(math.floor(number) / 1000000)\n    end\n  end\n  local function\
    \ round_to_tenthousand(number)\n    if number < 0 then\n      return -round_to_tenthousand(-number)\n\
    \    else\n      return round_to_nearest(math.floor(number) / 10000000)\n    end\n\
    \  end\n", "  local function closest(num)\n    local diff\n    if num == nil then\n\
    \      diff = 0\n    elseif num < 0 then\n      diff = num\n    else\n      diff\
    \ = math.abs(num - math.floor(num))\n    end\n    if diff < 0.5 then\n      return\
    \ math.floor(num)\n    else\n      return math.ceil(num)\n    end\n  end\n  local\
    \ function closestInteger(value)\n    local num = tonumber(value)\n    if num\
    \ ~= nil then\n      return closest(num)\n    else\n      return nil\n    end\n\
    \  end\n  local function closestFloat(value)\n    local num = tonumber(value)\n\
    \    if num ~= nil then\n      return closestInteger(num)\n    else\n      return\
    \ nil\n    end\n  end\n  local function closestDouble(value)\n    local num =\
    \ tonumber(value)\n    if num ~= nil then\n      return closestFloat(num)\n  \
    \  else\n      return nil\n    end\n  end\n  local function closestBigNumber(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestDouble(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestString(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestBigNumber(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestBoolean(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestString(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestDate(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestString(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestArray(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestString(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestObject(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestString(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestNumber(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestString(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestBooleanArray(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestArray(num)\n\
    \    else\n      return nil\n    end\n  end\n  local function closestDateArray(value)\n\
    \    local num = tonumber(value)\n    if num ~= nil then\n      return closestArray(num)\n",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n\
    \  local function is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n\
    \  local function is_close_to_one(a)\n    return math.abs(a) < 1e-5\n  end\n \
    \ local function is_close_to_two(a)\n    return math.abs(a) < 1e-4\n  end\n  local\
    \ function is_close_to_three(a)\n    return math.abs(a) < 1e-3\n  end\n  local\
    \ function is_close_to_four(a)\n    return math.abs(a) < 1e-2\n  end\n  local\
    \ function is_close_to_five(a)\n    return math.abs(a) < 1e-1\n  end\n  local\
    \ function is_close_to_six(a)\n    return math.abs(a) < 1e0\n  end\n  local function\
    \ is_close_to_seven(a)\n    return math.abs(a) < 1e1\n  end\n  local function\
    \ is_close_to_eight(a)\n    return math.abs(a) < 1e2\n  end\n  local function\
    \ is_close_to_nine(a)\n    return math.abs(a) < 1e3\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) < 1e4\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e5\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e6\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e7\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e8\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e9\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e10\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e11\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e12\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e13\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e14\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) < 1e15\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) < 1e16\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) < 1e17\n  end\n  local function is_close_to_tw", "  local\
    \ function closest(value)\n    if value == nil then\n      return nil\n    end\n\
    \    if value == 0 then\n      return 0\n    end\n    local closest\n    if value\
    \ ~= value then\n      closest = (math.abs(value - math.floor(value))):round()\n\
    \    else\n      closest = (math.abs(value - math.floor(value))):round()\n   \
    \ end\n    if closest == 0 then\n      closest = 1\n    end\n    return closest\n\
    \  end\n  return closest(value)\nend", "  local function is_equidistant(v1, v2)\n\
    \    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close(v1, v2)\n\
    \    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_one(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_two(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_three(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_four(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_five(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_six(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_seven(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_eight(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_nine(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_ten(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_eleven(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_twelve(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_thirteen(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_fourteen(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_fifteen(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_sixteen(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_seventeen(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_eighteen(v1,\
    \ v2)\n    return math.abs(v1 - v2) < ", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero2(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero3(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero4(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero5(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero6(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero7(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero8(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero9(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero10(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero11(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero12(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero13(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero14(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero15(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero16(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero17(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero18(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero19(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero20(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close_to_zero21(v1)\n\
    \    return math.abs(v1) < 1e-6\n  end\n  local function is_close", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function\
    \ is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local function\
    \ is_close_to_one(a)\n    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_two(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_six(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_ten(a)\n \
    \   return math.abs(a) > 1e-6\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) > 1e-6\n  end\n  local function is_close_to_", "  local\
    \ function closest(value)\n    if value == nil then\n      return nil\n    end\n\
    \    if value == 0 then\n      return 0\n    end\n    if value == math.floor(value)\
    \ then\n      return value\n    end\n    if value == math.ceil(value) then\n \
    \     return value\n    end\n    if value < 0 then\n      value = -value\n   \
    \ end\n    local difference = value - math.floor(value)\n    if difference < 0\
    \ then\n      return math.ceil(value)\n    else\n      return math.floor(value)\n\
    \    end\n  end\n  return closest(value)\nend", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function round_away_from_zero(v)\n\
    \    return math.floor(math.abs(v) + 0.5)\n  end\n  local function is_integer(value)\n\
    \    return type(value) == \"number\" and math.floor(value) == value\n  end\n\
    \  local function is_negative(value)\n    return value < 0\n  end\n  local function\
    \ is_positive(value)\n    return value > 0\n  end\n  local function is_zero(value)\n\
    \    return value == 0\n  end\n  local function is_negative_integer(value)\n \
    \   return is_integer(value) and is_negative(value)\n  end\n  local function is_positive_integer(value)\n\
    \    return is_integer(value) and is_positive(value)\n  end\n  local function\
    \ is_zero_integer(value)\n    return is_integer(value) and is_zero(value)\n  end\n\
    \  local function is_negative_integer_or_zero(value)\n    return is_negative_integer(value)\
    \ or is_zero_integer(value)\n  end\n  local function is_positive_integer_or_zero(value)\n\
    \    return is_positive_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_negative_integer_or_negative(value)\n    return is_negative_integer(value)\
    \ or is_negative(value)\n  end\n  local function is_positive_integer_or_positive(value)\n\
    \    return is_positive_integer(value) or is_positive(value)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer(value)\n    return is_negative_integer(value)\
    \ or is_zero_integer(value)\n  end\n  local function is_positive_integer_or_zero_integer(value)\n\
    \    return is_positive_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_negative_integer_or_negative_integer(value)\n    return is_negative_integer(value)\
    \ or is_negative_integer(value)\n  end\n  local function is_positive_integer_or_positive_integer(value)\n\
    \    return is_positive_integer(value) or is_positive_integer(value)\n  end\n\
    \  local function is_negative_integer_or_zero_integer_or_negative(value)\n   \
    \ return is_negative_integer(value) or is_zero_integer(value)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer_or_positive(value)\n    return\
    \ is_positive_integer(value) or is_zero_integer(value)\n  end\n  local function\
    \ is_negative_integer_or_negative_integer_or_zero(value)\n    return is_negative_integer(value)\
    \ or is_negative_integer(value)\n  end\n  local function is_positive_integer_or_positive_integer_or_zero(value)\n\
    \    return is_positive_integer(value) or is_positive_integer(value)\n  end\n\
    \  local function is_negative_integer_or_zero_integer_or_", "  local function\
    \ is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function\
    \ is_close(a, b) return math.abs(a - b) < 1e-6 end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero2(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero3(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero4(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero5(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero6(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero7(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero8(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero9(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero10(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero11(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero12(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero13(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero14(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero15(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero16(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero17(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero18(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero19(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero20(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero21(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero22(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero23(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_zero24(a)\n\
    \    return math.abs(a) < ", "  local function is_equidistant(v1, v2)\n    return\
    \ math.abs(v1 - v2) <= math.abs(v1 - v2 + v2)\n  end\n  local function round_away_from_zero(v1,\
    \ v2)\n    if v1 <= 0 then\n      return v1\n    elseif v2 <= 0 then\n      return\
    \ v2\n    else\n      return math.floor((v1 + v2) / 2)\n    end\n  end\n  local\
    \ function is_close(v1, v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 +\
    \ v2)\n  end\n  local function is_close_to_zero(v1, v2)\n    return math.abs(v1\
    \ - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function is_close_to_zero_inclusive(v1,\
    \ v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function\
    \ is_close_to_zero_inclusive_with_zero(v1, v2)\n    return math.abs(v1 - v2) <\
    \ math.abs(v1 - v2 + v2)\n  end\n  local function is_close_to_zero_inclusive_with_zero_and_negative(v1,\
    \ v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function\
    \ is_close_to_zero_inclusive_with_zero_and_negative_inclusive(v1, v2)\n    return\
    \ math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function is_close_to_zero_inclusive_with_zero_and_negative_inclusive_with_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function\
    \ is_close_to_zero_inclusive_with_zero_and_negative_inclusive_with_zero_and_negative(v1,\
    \ v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function\
    \ is_close_to_zero_inclusive_with_zero_and_negative_inclusive_with_zero_and_negative_inclusive(v1,\
    \ v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function\
    \ is_close_to_zero_inclusive_with_zero_and_negative_inclusive_with_zero_and_negative_inclusive_with_zero(v1,\
    \ v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n  end\n  local function\
    \ is_close_to_zero_inclusive_with_zero_and_negative_inclusive_with_zero_and_negative_inclusive_with_zero_and_negative(v1,\
    \ v2)\n    return math.abs(v1 - v2) < math.abs(v1 - v2 + v2)\n", "  local function\
    \ closest(num)\n    local diff, result = math.abs(num - value), num\n    if diff\
    \ < 0.5 then\n      result = result + 1\n    elseif diff > 0.5 then\n      result\
    \ = result - 1\n    end\n    return result\n  end\n  return closest\nend", " \
    \ local function closest(num)\n    local sign = math.sign(num) -- Get the sign\
    \ of the number\n    local num = math.abs(num) -- Get the absolute value of the\
    \ number\n    local remainder = num -- Get the remainder of the division\n   \
    \ local quotient = nil -- Store the quotient\n    local quotient_value = nil --\
    \ Store the quotient value\n    local quotient_remainder = nil -- Store the quotient\
    \ remainder\n    local quotient_quotient = nil -- Store the quotient quotient\n\
    \    local quotient_quotient_value = nil -- Store the quotient quotient value\n\
    \    local quotient_quotient_remainder = nil -- Store the quotient quotient remainder\n\
    \    local quotient_quotient_quotient = nil -- Store the quotient quotient quotient\n\
    \    local quotient_quotient_quotient_value = nil -- Store the quotient quotient\
    \ quotient value\n    local quotient_quotient_quotient_remainder = nil -- Store\
    \ the quotient quotient quotient remainder\n    local quotient_quotient_quotient_quotient\
    \ = nil -- Store the quotient quotient quotient quotient\n    local quotient_quotient_quotient_quotient_value\
    \ = nil -- Store the quotient quotient quotient quotient value\n    local quotient_quotient_quotient_quotient_remainder\
    \ = nil -- Store the quotient quotient quotient quotient remainder\n    local\
    \ quotient_quotient_quotient_quotient_quotient = nil -- Store the quotient quotient\
    \ quotient quotient quotient\n    local quotient_quotient_quotient_quotient_value\
    \ = nil -- Store the quotient quotient quotient quotient value\n    local quotient_quotient_quotient_quotient_remainder\
    \ = nil -- Store the quotient quotient quotient quotient remainder\n    local\
    \ quotient_quotient_quotient_quotient_quotient = nil -- Store the quotient quotient\
    \ quotient quotient quotient\n    local quotient_quotient_quotient_quotient_value\
    \ = nil -- Store the quotient quotient quotient quotient value\n    local quotient_quotient_quotient_quotient_remainder\
    \ = nil -- Store the quotient quotient quotient quotient remainder\n    local\
    \ quotient_quotient_quotient_quotient_quotient = nil -- Store the quotient quotient\
    \ quotient quotient quotient\n    local quotient_quotient_quotient_quotient_value\
    \ = nil -- Store the quotient quotient quotient quotient value\n    ", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local\
    \ function is_close(a, b) -- Returns true if a is closer to b than b\n    return\
    \ math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a) -- Returns\
    \ true if a is close to zero\n    return math.abs(a) < 1e-6\n  end\n  local function\
    \ is_close_to_one(a) -- Returns true if a is close to one\n    return math.abs(a)\
    \ < 1e-9\n  end\n  local function is_close_to_two(a) -- Returns true if a is close\
    \ to two\n    return math.abs(a) < 1e-2\n  end\n  local function is_close_to_ten(a)\
    \ -- Returns true if a is close to ten\n    return math.abs(a) < 1e-10\n  end\n\
    \  local function is_close_to_tenth(a) -- Returns true if a is close to tenth\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_hundred(a)\
    \ -- Returns true if a is close to hundred\n    return math.abs(a) < 1e-20\n \
    \ end\n  local function is_close_to_thousand(a) -- Returns true if a is close\
    \ to thousand\n    return math.abs(a) < 1e-25\n  end\n  local function is_close_to_million(a)\
    \ -- Returns true if a is close to million\n    return math.abs(a) < 1e-30\n \
    \ end\n  local function is_close_to_billion(a) -- Returns true if a is close to\
    \ billion\n    return math.abs(a) < 1e-35\n  end\n  local function is_close_to_trillion(a)\
    \ -- Returns true if a is close to trillion\n    return math.abs(a) < 1e-40\n\
    \  end\n  local function is_close_to_quadrillion(a) -- Returns true if a is close\
    \ to quadrillion\n    return math.abs(a) < 1e-45\n  end\n  local function is_close_to_quintillion(a)\
    \ -- Returns true if a is close to quintillion\n    return math.abs(a) < 1e-50\n\
    \  end\n  local function is_close_to_trillionth(a) -- Returns true if a is close\
    \ to trillionth\n    return math.abs(a) < 1e-55\n  end\n  local function is_close_to_quadrillionth(a)\
    \ -- Returns true if a is close to quadrillionth\n    return math.abs(a) < 1e-60\n\
    \  end\n  local function is_close_to_quintillionth(a) -- Returns true if a is\
    \ close to quintillionth", "  local function round_away_from_zero(number)\n  \
    \  local sign = number:sub(1, 1):lower()\n    local exponent = tonumber(number:sub(2,\
    \ 2))\n    if exponent == 0 then\n      return number\n    elseif exponent ==\
    \ -1 then\n      return -number\n    else\n      return sign * math.pow(10, exponent\
    \ - 1) * tonumber(number:sub(3, 3))\n    end\n  end\n  local function is_equidistant(value1,\
    \ value2)\n    local difference = value1 - value2\n    return difference ~= 0\
    \ and math.abs(difference) < 0.001\n  end\n  local function round_to_nearest(number)\n\
    \    local sign = number:sub(1, 1):lower()\n    local exponent = tonumber(number:sub(2,\
    \ 2))\n    if exponent == 0 then\n      return number\n    elseif exponent ==\
    \ -1 then\n      return -number\n    else\n      return sign * math.pow(10, exponent\
    \ - 1) * tonumber(number:sub(3, 3))\n    end\n  end\n  local function round_to_zero(number)\n\
    \    local sign = number:sub(1, 1):lower()\n    local exponent = tonumber(number:sub(2,\
    \ 2))\n    if exponent == 0 then\n      return number\n    elseif exponent ==\
    \ -1 then\n      return -number\n    else\n      return sign * math.pow(10, exponent\
    \ - 1) * tonumber(number:sub(3, 3))\n    end\n  end\n  local function round_to_nearest_or_zero(number)\n\
    \    local sign = number:sub(1, 1):lower()\n    local exponent = tonumber(number:sub(2,\
    \ 2))\n    if exponent == 0 then\n      return number\n    elseif exponent ==\
    \ -1 then\n      return -number\n    else\n      return sign * math.pow(10, exponent\
    \ - 1) * tonumber(number:sub(3, 3))\n    end\n  end\n  local function round_to_nearest_or_zero_to_even(number)\n\
    \    local sign = number:sub(1, 1):lower()\n    local exponent = tonumber(number:sub(2,\
    \ 2))\n    if exponent == 0 then\n      return number\n    elseif exponent ==\
    \ -1 then\n      return -number\n    else\n      return sign * math.pow(10, exponent\
    \ - 1) * tonumber(number:sub(3, 3))\n    end\n  end\n  local function round_to_nearest_or_zero_to_odd(number)\n\
    \    local sign = number:sub(1, 1):lower()\n    local exponent = tonumber(number:sub(2,\
    \ 2))\n    if exponent == 0 then\n      return number\n    elseif exponent ==\
    \ -1 then\n      return -number\n    else\n      return sign * math.pow(10, exponent\
    \ - 1) * tonumber(number:sub(3, 3))\n    end\n  end\n", "  local function is_equidistant(v1,\
    \ v2)\n    return v1 ~= nil and v2 ~= nil and v1 - v2 ~= nil\n  end", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end", " \
    \ local function is_equidistant(a, b)\n    return math.abs(a - b) <= math.abs(a)\
    \ + math.abs(b)\n  end\n  local function round_away_from_zero(number)\n    if\
    \ number < 0 then\n      return math.floor(number / 10) * 10 - number\n    else\n\
    \      return math.ceil(number / 10) * 10 + number\n    end\n  end\n  local function\
    \ is_close_to_zero(number)\n    return round_away_from_zero(number) == 0\n  end\n\
    \  local function is_close_to_other_number(number)\n    return round_away_from_zero(number)\
    \ != 0\n  end\n  local function is_close_to_other_number_or_zero(number)\n   \
    \ return round_away_from_zero(number) != 0 or round_away_from_zero(number) ==\
    \ 0\n  end\n  local function is_close_to_other_number_or_zero_or_zero(number)\n\
    \    return round_away_from_zero(number) != 0 or round_away_from_zero(number)\
    \ == 0 or round_away_from_zero(number) == 0\n  end\n  local function is_close_to_other_number_or_zero_or_zero_or_zero(number)\n\
    \    return round_away_from_zero(number) != 0 or round_away_from_zero(number)\
    \ == 0 or round_away_from_zero(number) == 0 or round_away_from_zero(number) ==\
    \ 0\n  end\n  local function is_close_to_other_number_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return round_away_from_zero(number) != 0 or round_away_from_zero(number)\
    \ == 0 or round_away_from_zero(number) == 0 or round_away_from_zero(number) ==\
    \ 0 or round_away_from_zero(number) == 0\n  end\n  local function is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return round_away_from_zero(number) != 0 or round_away_from_zero(number)\
    \ == 0 or round_away_from_zero(number) == 0 or round_away_from_zero(number) ==\
    \ 0 or round_away_from_zero(number) == 0 or round_away_from_zero(number) == 0\n\
    \  end\n  local function is_close_to_other_number_or_zero_or_zero_or_zero_or_zero_or_zero(number)\n\
    \    return round_away_from_zero(number) != 0 or round_away_from_zero(number)\
    \ == 0 or round_away_from_zero(number) == 0 or round_away_from_zero(number) ==\
    \ 0 or round_away_from_zero(number) == 0 or round_away_from_zero(number) == 0\
    \ or round_away_from_zero(number) == 0 or round_away_from_zero(number) == 0 or\
    \ round_away_from_zero(number) == 0 or round_away_from_zero(number) == 0 or round_away_",
  "  local function is_equidistant(v1, v2)\n    return math.abs(v1 - v2) < 1e-6\n\
    \  end\n  local function is_close(v1, v2)\n    return math.abs(v1 - v2) < 1e-4\n\
    \  end\n  local function is_close_to_zero(v1)\n    return math.abs(v1 - 0) < 1e-4\n\
    \  end\n  local function is_close_to_one(v1)\n    return math.abs(v1 - 1) < 1e-4\n\
    \  end\n  local function is_close_to_two(v1)\n    return math.abs(v1 - 2) < 1e-4\n\
    \  end\n  local function is_close_to_three(v1)\n    return math.abs(v1 - 3) <\
    \ 1e-4\n  end\n  local function is_close_to_four(v1)\n    return math.abs(v1 -\
    \ 4) < 1e-4\n  end\n  local function is_close_to_five(v1)\n    return math.abs(v1\
    \ - 5) < 1e-4\n  end\n  local function is_close_to_six(v1)\n    return math.abs(v1\
    \ - 6) < 1e-4\n  end\n  local function is_close_to_seven(v1)\n    return math.abs(v1\
    \ - 7) < 1e-4\n  end\n  local function is_close_to_eight(v1)\n    return math.abs(v1\
    \ - 8) < 1e-4\n  end\n  local function is_close_to_nine(v1)\n    return math.abs(v1\
    \ - 9) < 1e-4\n  end\n  local function is_close_to_ten(v1)\n    return math.abs(v1\
    \ - 10) < 1e-4\n  end\n  local function is_close_to_eleven(v1)\n    return math.abs(v1\
    \ - 11) < 1e-4\n  end\n  local function is_close_to_twelve(v1)\n    return math.abs(v1\
    \ - 12) < 1e-4\n  end\n  local function is_close_to_thirteen(v1)\n    return math.abs(v1\
    \ - 13) < 1e-4\n  end\n  local function is_close_to_fourteen(v1)\n    return math.abs(v1\
    \ - 14) < 1e-4\n  end\n  local function is_close_to_fifteen(v1)\n    return math.abs(v1\
    \ - 15) < 1e-4\n  end\n  local function is_close_to_sixteen(v1)\n    return math.abs(v1\
    \ - 16) < 1e-4\n  end\n  local function is_close_to_seventeen(v1)\n    return\
    \ math.abs(v1 - 17) < 1e-4\n  end\n  local function is_close_to_eighteen(v1)\n\
    \    return math.abs(v1 - 18) < 1e-4\n  end\n  local function is_close_to_nineteen(v1)\n\
    \    return math.abs(v1 - 19) < 1e-4\n  end\n  local function is_close_to_twenty(",
  "  local function closest(value)\n    local closest\n    local difference\n    local\
    \ difference2\n    local difference3\n    local difference4\n    local difference5\n\
    \    local difference6\n    local difference7\n    local difference8\n    local\
    \ difference9\n    local difference10\n    local difference11\n    local difference12\n\
    \    local difference13\n    local difference14\n    local difference15\n    local\
    \ difference16\n    local difference17\n    local difference18\n    local difference19\n\
    \    local difference20\n    local difference21\n    local difference22\n    local\
    \ difference23\n    local difference24\n    local difference25\n    local difference26\n\
    \    local difference27\n    local difference28\n    local difference29\n    local\
    \ difference30\n    local difference31\n    local difference32\n    local difference33\n\
    \    local difference34\n    local difference35\n    local difference36\n    local\
    \ difference37\n    local difference38\n    local difference39\n    local difference40\n\
    \    local difference41\n    local difference42\n    local difference43\n    local\
    \ difference44\n    local difference45\n    local difference46\n    local difference47\n\
    \    local difference48\n    local difference49\n    local difference50\n    local\
    \ difference51\n    local difference52\n    local difference53\n    local difference54\n\
    \    local difference55\n    local difference56\n    local difference57\n    local\
    \ difference58\n    local difference59\n    local difference60\n    local difference61\n\
    \    local difference62\n    local difference63\n    local difference64\n    local\
    \ difference65\n    local difference66\n    local difference67\n    local difference68\n\
    \    local difference69\n    local difference70\n    local difference71\n    local\
    \ difference72\n    local difference73\n    local difference74\n    local difference75\n\
    \    local difference76\n    local difference77\n    local difference78\n    local\
    \ difference79\n    local difference80\n    local difference81\n    local difference82\n\
    \    local difference83\n    local difference84\n    local difference85\n    local\
    \ difference86\n    local difference87\n    local difference88\n    local difference89\n\
    \    local difference90\n    local difference91\n    local difference92\n    local\
    \ difference93\n    local difference94\n    local difference95\n    local difference96\n\
    \    local difference97\n    local difference98\n    local difference99\n    local\
    \ difference100\n    local difference", "  local function is_equidistant(a, b)\n\
    \    return math.abs(a - b) < 1e-6\n  end\n  local function round_away_from_zero(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_zero(number)\n\
    \    return math.floor(number)\n  end\n  local function round_to_nearest(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_even(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_odd(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_ten(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_hundred(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_thousand(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_million(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_billion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_trillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quadrillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quintillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_sextillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_septillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_octillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_nonillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_decillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_undecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_duodecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_tredecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quattuordecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quindecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local\
    \ function round_away_from_zero(number)\n    return math.floor(number + 0.5)\n\
    \  end\n  local function round_to_zero(number)\n    return math.floor(number)\n\
    \  end\n  local function round_to_nearest(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_even(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_odd(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_ten(number)\n    return math.floor(number\
    \ + 0.5)\n  end\n  local function round_to_nearest_hundred(number)\n    return\
    \ math.floor(number + 0.5)\n  end\n  local function round_to_nearest_thousand(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_million(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_billion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_trillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quadrillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quintillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_sextillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_septillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_octillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_nonillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_decillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_undecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_duodecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_tredecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quattuordecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_nearest_quindecillion(number)\n\
    \    return math.floor(number + 0.5)\n  end\n  local function round_to_", "  local\
    \ function closest(num)\n    local diff = math.abs(num - value)\n    if diff <\
    \ 0.5 then\n      return value\n    elseif diff < 1 then\n      return num\n \
    \   else\n      return math.floor(num / 10) * 10\n    end\n  end\n  return closest\n\
    end", "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n\
    \  end\n  local function round_away_from_zero(number)\n    if number < 0 then\n\
    \      return math.floor(number / 10) * 10 - number\n    else\n      return math.ceil(number\
    \ / 10) * 10 + number\n    end\n  end\n  local function round_to_nearest(number)\n\
    \    if number < 0 then\n      return math.floor(number / 10) * 10 - number\n\
    \    else\n      return math.ceil(number / 10) * 10 + number\n    end\n  end\n\
    \  local function round_to_even(number)\n    if number % 2 == 0 then\n      return\
    \ math.floor(number / 2) * 2 + number\n    else\n      return math.ceil(number\
    \ / 2) * 2 - number\n    end\n  end\n  local function round_to_odd(number)\n \
    \   if number % 2 == 1 then\n      return math.floor(number / 2) * 2 - number\n\
    \    else\n      return math.ceil(number / 2) * 2 + number\n    end\n  end\n \
    \ local function round_to_nearest_even(number)\n    if number % 2 == 0 then\n\
    \      return round_to_nearest(round_to_even(number))\n    else\n      return\
    \ round_to_nearest(round_to_odd(number))\n    end\n  end\n  local function round_to_nearest_odd(number)\n\
    \    if number % 2 == 1 then\n      return round_to_nearest(round_to_odd(number))\n\
    \    else\n      return round_to_nearest(round_to_even(number))\n    end\n  end\n\
    \  local function round_to_nearest_odd_even(number)\n    if number % 2 == 1 then\n\
    \      return round_to_nearest(round_to_even(number))\n    else\n      return\
    \ round_to_nearest(round_to_odd(number))\n    end\n  end\n  local function round_to_nearest_odd_odd(number)\n\
    \    if number % 2 == 0 then\n      return round_to_nearest(round_to_odd(number))\n\
    \    else\n      return round_to_nearest(round_to_even(number))\n    end\n  end\n\
    \  local function round_to_nearest_odd_even_even(number)\n    if number % 2 ==\
    \ 0 then\n      return round_to_nearest(round_to_even(number))\n    else\n   \
    \   return round_to_nearest(round_to_odd(number))\n    end\n  end\n  local function\
    \ round_to_nearest_odd_even_odd(number)\n    if number % 2 == 1 then\n      return\
    \ round_to_nearest(round_to_odd(number))\n    else\n      return round_to_nearest(round_to_even(number))\n\
    \    end\n  end\n  local function round_to_nearest_even_even(number)\n    if number\
    \ % 2 == 0 then\n      return round_to_nearest(round_to_even(number))\n", "  local\
    \ function closest(num)\n    local closest = math.abs(num - value)\n    if closest\
    \ < value then\n      return value\n    else\n      return closest\n    end\n\
    \  end\n  return closest\nend", "  local function is_equidistant(a, b)\n    return\
    \ math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n    return\
    \ math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n    return math.abs(a)\
    \ < 1e-5\n  end\n  local function is_close_to_two(a)\n    return math.abs(a) <\
    \ 1e-4\n  end\n  local function is_close_to_three(a)\n    return math.abs(a) <\
    \ 1e-3\n  end\n  local function is_close_to_four(a)\n    return math.abs(a) <\
    \ 1e-2\n  end\n  local function is_close_to_five(a)\n    return math.abs(a) <\
    \ 1e-1\n  end\n  local function is_close_to_six(a)\n    return math.abs(a) < 1e0\n\
    \  end\n  local function is_close_to_seven(a)\n    return math.abs(a) < 1e1\n\
    \  end\n  local function is_close_to_eight(a)\n    return math.abs(a) < 1e2\n\
    \  end\n  local function is_close_to_nine(a)\n    return math.abs(a) < 1e3\n \
    \ end\n  local function is_close_to_ten(a)\n    return math.abs(a) < 1e4\n  end\n\
    \  local function is_close_to_eleven(a)\n    return math.abs(a) < 1e5\n  end\n\
    \  local function is_close_to_twelve(a)\n    return math.abs(a) < 1e6\n  end\n\
    \  local function is_close_to_thirteen(a)\n    return math.abs(a) < 1e7\n  end\n\
    \  local function is_close_to_fourteen(a)\n    return math.abs(a) < 1e8\n  end\n\
    \  local function is_close_to_fifteen(a)\n    return math.abs(a) < 1e9\n  end\n\
    \  local function is_close_to_sixteen(a)\n    return math.abs(a) < 1e10\n  end\n\
    \  local function is_close_to_seventeen(a)\n    return math.abs(a) < 1e11\n  end\n\
    \  local function is_close_to_eighteen(a)\n    return math.abs(a) < 1e12\n  end\n\
    \  local function is_close_to_nineteen(a)\n    return math.abs(a) < 1e13\n  end\n\
    \  local function is_close_to_twenty(a)\n    return math.abs(a) < 1e14\n  end\n\
    \  local function is_close_to_twenty_one(a)\n    return math.abs(a) < 1e15\n \
    \ end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a) < 1e16\n\
    \  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a) <\
    \ 1e17\n  end\n  local function is_close_to_tw", "  local function closest(value)\n\
    \    if value == nil then\n      return nil\n    end\n    local sign = math.sign(value)\n\
    \    local digits = math.abs(value)\n    local int_digits = math.floor(digits)\n\
    \    local fraction = digits - int_digits\n    if fraction > 0.5 then\n      int_digits\
    \ = int_digits + 1\n    end\n    local int_value = int_digits * sign\n    local\
    \ fraction_value = fraction * sign\n    if int_value == value then\n      return\
    \ int_value\n    end\n    if int_value < value then\n      return int_value\n\
    \    end\n    return int_value - fraction_value\n  end\n  return closest(value)\n\
    end", "  local function is_equidistant(a, b)\n    return math.abs(a - b) <= math.abs(a)\
    \ * math.abs(b)\n  end\n  local function is_close_to_zero(a)\n    return math.abs(a)\
    \ <= math.abs(a) * 0.5\n  end\n  local function is_close_to_one(a)\n    return\
    \ math.abs(a) <= math.abs(a) * 1.5\n  end\n  local function is_close_to_two(a)\n\
    \    return math.abs(a) <= math.abs(a) * 2.5\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) <= math.abs(a) * 3.5\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) <= math.abs(a) * 4.5\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) <= math.abs(a) * 5.5\n  end\n  local function is_close_to_six(a)\n\
    \    return math.abs(a) <= math.abs(a) * 6.5\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) <= math.abs(a) * 7.5\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) <= math.abs(a) * 8.5\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) <= math.abs(a) * 9\n  end\n  local function is_close_to_ten(a)\n\
    \    return math.abs(a) <= math.abs(a) * 10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) <= math.abs(a) * 11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) <= math.abs(a) * 12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) <= math.abs(a) * 19\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) <= math.abs(a) * 20\n  end\n", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-4\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-2\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1\n  end\n  local function is_close_to_seven(a)\n    return\
    \ math.abs(a) < 1e-3\n  end\n  local function is_close_to_eight(a)\n    return\
    \ math.abs(a) < 1e-4\n  end\n  local function is_close_to_nine(a)\n    return\
    \ math.abs(a) < 1e-5\n  end\n  local function is_close_to_ten(a)\n    return math.abs(a)\
    \ < 1e-6\n  end\n  local function is_close_to_eleven(a)\n    return math.abs(a)\
    \ < 1e-7\n  end\n  local function is_close_to_twelve(a)\n    return math.abs(a)\
    \ < 1e-8\n  end\n  local function is_close_to_thirteen(a)\n    return math.abs(a)\
    \ < 1e-9\n  end\n  local function is_close_to_fourteen(a)\n    return math.abs(a)\
    \ < 1e-10\n  end\n  local function is_close_to_fifteen(a)\n    return math.abs(a)\
    \ < 1e-11\n  end\n  local function is_close_to_sixteen(a)\n    return math.abs(a)\
    \ < 1e-12\n  end\n  local function is_close_to_seventeen(a)\n    return math.abs(a)\
    \ < 1e-13\n  end\n  local function is_close_to_eighteen(a)\n    return math.abs(a)\
    \ < 1e-14\n  end\n  local function is_close_to_nineteen(a)\n    return math.abs(a)\
    \ < 1e-15\n  end\n  local function is_close_to_twenty(a)\n    return math.abs(a)\
    \ < 1e-16\n  end\n  local function is_close_to_twenty_one(a)\n    return math.abs(a)\
    \ < 1e-17\n  end\n  local function is_close_to_twenty_two(a)\n    return math.abs(a)\
    \ < 1e-18\n  end\n  local function is_close_to_twenty_three(a)\n    return math.abs(a)\
    \ < 1e-19\n  end\n  local function is_close_to_twent", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-4\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-2\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e0\n  end\n  local function is_close_to_seven(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_eight(a)\n  \
    \  return math.abs(a) < 1e2\n  end\n  local function is_close_to_nine(a)\n   \
    \ return math.abs(a) < 1e3\n  end\n  local function is_close_to_ten(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_eleven(a)\n    return\
    \ math.abs(a) < 1e5\n  end\n  local function is_close_to_twelve(a)\n    return\
    \ math.abs(a) < 1e6\n  end\n  local function is_close_to_thirteen(a)\n    return\
    \ math.abs(a) < 1e7\n  end\n  local function is_close_to_fourteen(a)\n    return\
    \ math.abs(a) < 1e8\n  end\n  local function is_close_to_fifteen(a)\n    return\
    \ math.abs(a) < 1e9\n  end\n  local function is_close_to_sixteen(a)\n    return\
    \ math.abs(a) < 1e10\n  end\n  local function is_close_to_seventeen(a)\n    return\
    \ math.abs(a) < 1e11\n  end\n  local function is_close_to_eighteen(a)\n    return\
    \ math.abs(a) < 1e12\n  end\n  local function is_close_to_nineteen(a)\n    return\
    \ math.abs(a) < 1e13\n  end\n  local function is_close_to_twenty(a)\n    return\
    \ math.abs(a) < 1e14\n  end\n  local function is_close_to_twenty_one(a)\n    return\
    \ math.abs(a) < 1e15\n  end\n  local function is_close_to_twenty_two(a)\n    return\
    \ math.abs(a) < 1e16\n  end\n  local function is_close_to_twenty_three(a)\n  \
    \  return math.abs(a) < 1e17\n  end\n  local function is_close_to_tw", "  local\
    \ function closest(value, low, high)\n    if value == low then\n      return low\n\
    \    elseif value == high then\n      return high\n    else\n      local mid =\
    \ (low + high) / 2\n      if math.abs(value - mid) < math.abs(value - low) then\n\
    \        return closest(value, low, mid)\n      else\n        return closest(value,\
    \ mid, high)\n      end\n    end\n  end", "  local function closest(x, y)\n  \
    \  return math.floor(x + math.abs(x - y))\n  end", "  local function is_equidistant(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v1)\n\
    \    return math.abs(v1 - 0) == 0\n  end\n  local function is_close_to_zero2(v1)\n\
    \    return math.abs(v1 - 0) == 1e-6\n  end\n  local function is_close_to_zero3(v1)\n\
    \    return math.abs(v1 - 0) == 1e-5\n  end\n  local function is_close_to_zero4(v1)\n\
    \    return math.abs(v1 - 0) == 1e-4\n  end\n  local function is_close_to_zero5(v1)\n\
    \    return math.abs(v1 - 0) == 1e-3\n  end\n  local function is_close_to_zero6(v1)\n\
    \    return math.abs(v1 - 0) == 1e-2\n  end\n  local function is_close_to_zero7(v1)\n\
    \    return math.abs(v1 - 0) == 1e-1\n  end\n  local function is_close_to_zero8(v1)\n\
    \    return math.abs(v1 - 0) == 1e0\n  end\n  local function is_close_to_zero9(v1)\n\
    \    return math.abs(v1 - 0) == 1e1\n  end\n  local function is_close_to_zero10(v1)\n\
    \    return math.abs(v1 - 0) == 1e2\n  end\n  local function is_close_to_zero11(v1)\n\
    \    return math.abs(v1 - 0) == 1e3\n  end\n  local function is_close_to_zero12(v1)\n\
    \    return math.abs(v1 - 0) == 1e4\n  end\n  local function is_close_to_zero13(v1)\n\
    \    return math.abs(v1 - 0) == 1e5\n  end\n  local function is_close_to_zero14(v1)\n\
    \    return math.abs(v1 - 0) == 1e6\n  end\n  local function is_close_to_zero15(v1)\n\
    \    return math.abs(v1 - 0) == 1e7\n  end\n  local function is_close_to_zero16(v1)\n\
    \    return math.abs(v1 - 0) == 1e8\n  end\n  local function is_close_to_zero17(v1)\n\
    \    return math.abs(v1 - 0) == 1e9\n  end\n  local function is_close_to_zero18(v1)\n\
    \    return math.abs(v1 - 0) == 1e10\n  end\n  local function is_close_to_zero19(v1)\n\
    \    return math.abs(v1 - 0) == 1e11\n  end\n  local function is_close_to_zero20(v1)\n\
    \    return math.abs(v1 - 0) == 1e12\n  end\n  local function is_close_to_zero21(v1)",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end",
  "  local function round_away_from_zero(n)\n    return math.floor(n / 10) * 10\n\
    \  end\n  local function is_equidistant(n1, n2)\n    return round_away_from_zero(n1)\
    \ == round_away_from_zero(n2)\n  end\n  local function is_close_to_zero(n)\n \
    \   return round_away_from_zero(n) < 0\n  end\n  local function is_close_to_one(n)\n\
    \    return round_away_from_zero(n) >= 0\n  end\n  local function is_close_to_two(n)\n\
    \    return round_away_from_zero(n) >= 2\n  end\n  local function is_close_to_three(n)\n\
    \    return round_away_from_zero(n) >= 3\n  end\n  local function is_close_to_four(n)\n\
    \    return round_away_from_zero(n) >= 4\n  end\n  local function is_close_to_five(n)\n\
    \    return round_away_from_zero(n) >= 5\n  end\n  local function is_close_to_six(n)\n\
    \    return round_away_from_zero(n) >= 6\n  end\n  local function is_close_to_seven(n)\n\
    \    return round_away_from_zero(n) >= 7\n  end\n  local function is_close_to_eight(n)\n\
    \    return round_away_from_zero(n) >= 8\n  end\n  local function is_close_to_nine(n)\n\
    \    return round_away_from_zero(n) >= 9\n  end\n  local function is_close_to_ten(n)\n\
    \    return round_away_from_zero(n) >= 10\n  end\n  local function is_close_to_eleven(n)\n\
    \    return round_away_from_zero(n) >= 11\n  end\n  local function is_close_to_twelve(n)\n\
    \    return round_away_from_zero(n) >= 12\n  end\n  local function is_close_to_thirteen(n)\n\
    \    return round_away_from_zero(n) >= 13\n  end\n  local function is_close_to_fourteen(n)\n\
    \    return round_away_from_zero(n) >= 14\n  end\n  local function is_close_to_fifteen(n)\n\
    \    return round_away_from_zero(n) >= 15\n  end\n  local function is_close_to_sixteen(n)\n\
    \    return round_away_from_zero(n) >= 16\n  end\n  local function is_close_to_seventeen(n)\n\
    \    return round_away_from_zero(n) >= 17\n  end\n  local function is_close_to_eighteen(n)\n\
    \    return round_away_from_zero(n) >= 18\n  end\n  local function is_close_to_nineteen(n)\n\
    \    return round_away_from_zero(n) >= 19\n  end\n  local function is_close_to_twenty(n)\n\
    \    return round_away_from_zero(n) >= 20\n  end\n", "  local function closest(num)\n\
    \    local num = tonumber(num)\n    if num == nil then\n      return nil\n   \
    \ end\n    local diff\n    if num < 0 then\n      diff = -num\n    else\n    \
    \  diff = num\n    end\n    local closest\n    if diff < 0 then\n      closest\
    \ = -diff\n    else\n      closest = 0\n    end\n    if closest == 0 then\n  \
    \    return nil\n    end\n    return closest\n  end\n  local closest\n  if value\
    \ == nil then\n    return nil\n  else\n    closest = closest_integer(value)\n\
    \    if closest ~= nil then\n      return closest\n    end\n  end\nend", "  local\
    \ function is_equidistant(v1, v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n\
    \  local function round_away_from_zero(v1, v2)\n    return v1 + math.abs(v2 -\
    \ v1)\n  end\n  local function round_half_up(v1, v2)\n    return v1 + math.floor((v2\
    \ - v1) / 2)\n  end\n  local function round_half_down(v1, v2)\n    return v1 +\
    \ math.floor((v2 - v1) / 2) * -1\n  end\n  local function round_half_even(v1,\
    \ v2)\n    return v1 + math.floor((v2 - v1) / 2) * -2\n  end\n  local function\
    \ round_half_odd(v1, v2)\n    return v1 + math.floor((v2 - v1) / 2) * -1\n  end\n\
    \  local function round_half_to_even(v1, v2)\n    return v1 + math.floor((v2 -\
    \ v1) / 2) * -2\n  end\n  local function round_half_to_odd(v1, v2)\n    return\
    \ v1 + math.floor((v2 - v1) / 2) * -1\n  end\n  local function round_half_to_even_to_even(v1,\
    \ v2)\n    return v1 + math.floor((v2 - v1) / 2) * -2\n  end\n  local function\
    \ round_half_to_odd_to_odd(v1, v2)\n    return v1 + math.floor((v2 - v1) / 2)\
    \ * -1\n  end\n  local function round_half_to_even_to_odd(v1, v2)\n    return\
    \ v1 + math.floor((v2 - v1) / 2) * -2\n  end\n  local function round_half_to_odd_to_even(v1,\
    \ v2)\n    return v1 + math.floor((v2 - v1) / 2) * -1\n  end\n  local function\
    \ round_half_to_even_to_even_to_even(v1, v2)\n    return v1 + math.floor((v2 -\
    \ v1) / 2) * -2\n  end\n  local function round_half_to_odd_to_odd_to_odd(v1, v2)\n\
    \    return v1 + math.floor((v2 - v1) / 2) * -1\n  end\n  local function round_half_to_even_to_odd_to_even(v1,\
    \ v2)\n    return v1 + math.floor((v2 - v1) / 2) * -2\n  end\n  local function\
    \ round_half_to_odd_to_even_to_odd_to_odd(v1, v2)\n    return v1 + math.floor((v2\
    \ - v1) / 2) * -1\n  end\n  local function round_half_to_even_to_odd_to_even_to_even(v1,\
    \ v2)\n    return v1 + math.floor((v2 - v1) / 2) * -2\n  end\n  local function\
    \ round_half_to_odd_to_even_to_odd_to_even_to_odd(v1, v2)\n    return v1 + math.floor((v2\
    \ - v1) / 2) * ", "  local function is_equidistant(a, b)\n    return math.abs(a\
    \ - b) <= math.abs(a) + math.abs(b)\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) <= math.abs(a) + 1e-6\n  end\n  local function round_away_from_zero(a)\n\
    \    return math.floor(a) + math.abs(a) - 1e-6\n  end\n  local function round_to_zero(a)\n\
    \    return math.floor(a) + 1e-6\n  end\n  local function round_to_nearest_integer(a)\n\
    \    return round_to_zero(round_away_from_zero(a))\n  end\n  local function round_to_nearest_integer_or_zero(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_even(a)\n\
    \    return round_to_nearest_integer(round_away_from_zero(a))\n  end\n  local\
    \ function round_to_nearest_even_or_zero(a)\n    return round_to_nearest_even(a)\
    \ or 0\n  end\n  local function round_to_nearest_odd(a)\n    return round_to_nearest_integer(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_odd_or_zero(a)\n    return round_to_nearest_odd(a)\
    \ or 0\n  end\n  local function round_to_nearest_tenth(a)\n    return round_to_nearest_integer(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_tenth_or_zero(a)\n    return round_to_nearest_tenth(a)\
    \ or 0\n  end\n  local function round_to_nearest_hundred(a)\n    return round_to_nearest_integer(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_hundred_or_zero(a)\n    return round_to_nearest_hundred(a)\
    \ or 0\n  end\n  local function round_to_nearest_thousand(a)\n    return round_to_nearest_integer(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_thousand_or_zero(a)\n    return round_to_nearest_thousand(a)\
    \ or 0\n  end\n  local function round_to_nearest_million(a)\n    return round_to_nearest_integer(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_million_or_zero(a)\n    return round_to_nearest_million(a)\
    \ or 0\n  end\n  local function round_to_nearest_billion(a)\n    return round_to_nearest_integer(round_away_from_zero(a))\n\
    \  end\n  local function round_to_nearest_billion_or_zero(a)\n    return round_",
  "  local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n\
    \  local function is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n\
    \  local function round_away_from_zero(a)\n    return math.floor(a) + math.abs(a\
    \ - math.floor(a))\n  end\n  local function round_to_zero(a)\n    return math.floor(a)\
    \ + math.abs(a - math.floor(a))\n  end\n  local function round_to_nearest_integer(a)\n\
    \    return round_to_zero(round_away_from_zero(a))\n  end\n  local function round_to_nearest_integer_or_zero(a)\n\
    \    return round_to_nearest_integer(a) or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero(a) or 0\n  end\n  local function\
    \ round_to_nearest_integer_or_zero_inclusive_or_zero(a)\n    return round_to_nearest_integer_or_zero_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero(a) or 0\n  end\n\
    \  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(a) or\
    \ 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive(a)\
    \ or 0\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive_inclusive_inclusive(a)\n\
    \    return round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_inclusive_inclusive",
  "  local function closest(num)\n    local diff = math.abs(num - value)\n    if diff\
    \ < math.abs(num - math.floor(num)) then\n      return math.floor(num)\n    elseif\
    \ diff < math.abs(num - math.ceil(num)) then\n      return math.ceil(num)\n  \
    \  else\n      return num\n    end\n  end\n  return closest\nend", "  local function\
    \ closest(value)\n    local function is_equidistant(value)\n      local function\
    \ is_closed(value)\n        return math.abs(value - value1) < math.abs(value -\
    \ value2)\n      end\n      local function is_closed_or_equidistant(value)\n \
    \       return is_closed(value) or is_equidistant(value)\n      end\n      local\
    \ function is_equidistant_or_closed(value)\n        return is_equidistant(value)\
    \ or is_closed(value)\n      end\n      local function is_equidistant_or_closed_or_equidistant(value)\n\
    \        return is_equidistant_or_closed(value) or is_equidistant(value)\n   \
    \   end\n      local function is_equidistant_or_closed_or_equidistant_or_closed(value)\n\
    \        return is_equidistant_or_closed_or_equidistant(value) or is_closed(value)\n\
    \      end\n      local function is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant(value)\n\
    \        return is_equidistant_or_closed_or_equidistant_or_closed(value) or is_equidistant(value)\n\
    \      end\n      local function is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed(value)\n\
    \        return is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant(value)\
    \ or is_closed(value)\n      end\n      local function is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed_or_equidistant(value)\n\
    \        return is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed(value)\
    \ or is_equidistant(value)\n      end\n      local function is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed(value)\n\
    \        return is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed_or_equidistant(value)\
    \ or is_closed(value)\n      end\n      local function is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_closed_or_equidistant(value)\n\
    \        return is_equidistant_or_closed_or_equidistant_or_closed_or_equidistant_or_close",
  "  local function round_away_from_zero(n)\n    return math.floor(math.abs(n) + 0.5)\n\
    \  end\n  local function is_equidistant(n1, n2)\n    return round_away_from_zero(n1)\
    \ == round_away_from_zero(n2)\n  end\n  local function is_close(n1, n2)\n    return\
    \ round_away_from_zero(n1) ~= round_away_from_zero(n2)\n  end\n  local function\
    \ is_close_to_zero(n1, n2)\n    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n\
    \  end\n  local function is_close_to_one(n1, n2)\n    return round_away_from_zero(n1)\
    \ ~= round_away_from_zero(n2)\n  end\n  local function is_close_to_two(n1, n2)\n\
    \    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n  end\n  local\
    \ function is_close_to_three(n1, n2)\n    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n\
    \  end\n  local function is_close_to_four(n1, n2)\n    return round_away_from_zero(n1)\
    \ ~= round_away_from_zero(n2)\n  end\n  local function is_close_to_five(n1, n2)\n\
    \    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n  end\n  local\
    \ function is_close_to_six(n1, n2)\n    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n\
    \  end\n  local function is_close_to_seven(n1, n2)\n    return round_away_from_zero(n1)\
    \ ~= round_away_from_zero(n2)\n  end\n  local function is_close_to_eight(n1, n2)\n\
    \    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n  end\n  local\
    \ function is_close_to_nine(n1, n2)\n    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n\
    \  end\n  local function is_close_to_ten(n1, n2)\n    return round_away_from_zero(n1)\
    \ ~= round_away_from_zero(n2)\n  end\n  local function is_close_to_eleven(n1,\
    \ n2)\n    return round_away_from_zero(n1) ~= round_away_from_zero(n2)\n  end\n\
    \  local function is_close_to_twelve(n1, n2)\n    return round_away_from_zero(n1)\
    \ ~= round_away_from_zero(n2)\n  end\n  local function is_close_to_thir", "  local\
    \ function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n  local\
    \ function is_close_to_zero(a)\n    return math.abs(a) < 1e-6\n  end\n  local\
    \ function is_close_to_one(a)\n    return math.abs(a) < 1e-9\n  end\n  local function\
    \ is_close_to_two(a)\n    return math.abs(a) < 1e-2\n  end\n  local function is_close_to_three(a)\n\
    \    return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n\
    \    return math.abs(a) < 1e-4\n  end\n  local function is_close_to_five(a)\n\
    \    return math.abs(a) < 1e-5\n  end\n  local function is_close_to_six(a)\n \
    \   return math.abs(a) < 1e-6\n  end\n  local function is_close_to_seven(a)\n\
    \    return math.abs(a) < 1e-7\n  end\n  local function is_close_to_eight(a)\n\
    \    return math.abs(a) < 1e-8\n  end\n  local function is_close_to_nine(a)\n\
    \    return math.abs(a) < 1e-9\n  end\n  local function is_close_to_ten(a)\n \
    \   return math.abs(a) < 1e-10\n  end\n  local function is_close_to_eleven(a)\n\
    \    return math.abs(a) < 1e-11\n  end\n  local function is_close_to_twelve(a)\n\
    \    return math.abs(a) < 1e-12\n  end\n  local function is_close_to_thirteen(a)\n\
    \    return math.abs(a) < 1e-13\n  end\n  local function is_close_to_fourteen(a)\n\
    \    return math.abs(a) < 1e-14\n  end\n  local function is_close_to_fifteen(a)\n\
    \    return math.abs(a) < 1e-15\n  end\n  local function is_close_to_sixteen(a)\n\
    \    return math.abs(a) < 1e-16\n  end\n  local function is_close_to_seventeen(a)\n\
    \    return math.abs(a) < 1e-17\n  end\n  local function is_close_to_eighteen(a)\n\
    \    return math.abs(a) < 1e-18\n  end\n  local function is_close_to_nineteen(a)\n\
    \    return math.abs(a) < 1e-19\n  end\n  local function is_close_to_twenty(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_one(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_two(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function is_close_to_twenty_three(a)\n\
    \    return math.abs(a) < 1e-21\n  end\n  local function ", "  local function\
    \ closest(num)\n    local diff, result = math.abs(num - value), num\n    if diff\
    \ < 0.5 then\n      result = result + 1\n    elseif diff > 0.5 then\n      result\
    \ = result - 1\n    end\n    return result\n  end\n  return closest\nend", " \
    \ local function is_equidistant(a, b)\n    return math.abs(a - b) < 1e-6\n  end\n\
    \  local function is_close(a, b) return math.abs(a - b) < 1e-6 end\n  local function\
    \ round_away_from_zero(a)\n    if a < 0 then\n      return math.ceil(a) - 1e-6\n\
    \    else\n      return math.floor(a) + 1e-6\n    end\n  end\n  local function\
    \ round_to_zero(a)\n    if a < 0 then\n      return math.ceil(a)\n    else\n \
    \     return math.floor(a)\n    end\n  end\n  local function round_to_nearest_integer(a)\n\
    \    if a < 0 then\n      return round_away_from_zero(math.ceil(a))\n    else\n\
    \      return round_away_from_zero(math.floor(a))\n    end\n  end\n  local function\
    \ round_to_nearest_integer_or_zero(a)\n    if a < 0 then\n      return round_to_zero(math.ceil(a))\n\
    \    else\n      return round_to_zero(math.floor(a))\n    end\n  end\n  local\
    \ function round_to_nearest_integer_or_zero_inclusive(a)\n    if a < 0 then\n\
    \      return round_to_zero_inclusive(math.ceil(a))\n    else\n      return round_to_zero_inclusive(math.floor(a))\n\
    \    end\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero(a)\n\
    \    if a < 0 then\n      return round_to_zero_inclusive_or_zero(math.ceil(a))\n\
    \    else\n      return round_to_zero_inclusive_or_zero(math.floor(a))\n    end\n\
    \  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    if a < 0 then\n      return round_to_zero_inclusive_or_zero_inclusive(math.ceil(a))\n\
    \    else\n      return round_to_zero_inclusive_or_zero_inclusive(math.floor(a))\n\
    \    end\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero(a)\n\
    \    if a < 0 then\n      return round_to_zero_inclusive_or_zero_inclusive_or_zero(math.ceil(a))\n\
    \    else\n      return round_to_zero_inclusive_or_zero_inclusive_or_zero(math.floor(a))\n\
    \    end\n  end\n  local function round_to_nearest_integer_or_zero_inclusive_or_zero_inclusive_or_zero_inclusive(a)\n\
    \    if a < 0 then\n      return round_to_zero_inclusive_or_zero_inclusive_or_zero_inclusive(math.ceil(a))\n\
    \    else\n      return round_to_zero_in", "  local function closest(num)\n  \
    \  local diff\n    local closest\n    if num == nil then\n      diff = 0\n   \
    \   closest = \"nil\"\n    elseif num == \"\" then\n      diff = 0\n      closest\
    \ = \"nil\"\n    else\n      diff = math.abs(num - value)\n      if diff < 0.5\
    \ then\n        closest = value\n      else\n        closest = math.ceil(num +\
    \ 0.5)\n      end\n    end\n    return closest, diff\n  end\n  local closest,\
    \ diff = closest(value)\n  if diff < 0.5 then\n    return closest\n  else\n  \
    \  return math.ceil(closest)\n  end\nend", "  local function is_equidistant(a,\
    \ b)\n    return math.abs(a - b) < 1e-6\n  end\n  local function is_close_to_zero(a)\n\
    \    return math.abs(a) < 1e-6\n  end\n  local function is_close_to_one(a)\n \
    \   return math.abs(a) < 1e-5\n  end\n  local function is_close_to_two(a)\n  \
    \  return math.abs(a) < 1e-4\n  end\n  local function is_close_to_three(a)\n \
    \   return math.abs(a) < 1e-3\n  end\n  local function is_close_to_four(a)\n \
    \   return math.abs(a) < 1e-2\n  end\n  local function is_close_to_five(a)\n \
    \   return math.abs(a) < 1e-1\n  end\n  local function is_close_to_six(a)\n  \
    \  return math.abs(a) < 1e0\n  end\n  local function is_close_to_seven(a)\n  \
    \  return math.abs(a) < 1e1\n  end\n  local function is_close_to_eight(a)\n  \
    \  return math.abs(a) < 1e2\n  end\n  local function is_close_to_nine(a)\n   \
    \ return math.abs(a) < 1e3\n  end\n  local function is_close_to_ten(a)\n    return\
    \ math.abs(a) < 1e4\n  end\n  local function is_close_to_eleven(a)\n    return\
    \ math.abs(a) < 1e5\n  end\n  local function is_close_to_twelve(a)\n    return\
    \ math.abs(a) < 1e6\n  end\n  local function is_close_to_thirteen(a)\n    return\
    \ math.abs(a) < 1e7\n  end\n  local function is_close_to_fourteen(a)\n    return\
    \ math.abs(a) < 1e8\n  end\n  local function is_close_to_fifteen(a)\n    return\
    \ math.abs(a) < 1e9\n  end\n  local function is_close_to_sixteen(a)\n    return\
    \ math.abs(a) < 1e10\n  end\n  local function is_close_to_seventeen(a)\n    return\
    \ math.abs(a) < 1e11\n  end\n  local function is_close_to_eighteen(a)\n    return\
    \ math.abs(a) < 1e12\n  end\n  local function is_close_to_nineteen(a)\n    return\
    \ math.abs(a) < 1e13\n  end\n  local function is_close_to_twenty(a)\n    return\
    \ math.abs(a) < 1e14\n  end\n  local function is_close_to_twenty_one(a)\n    return\
    \ math.abs(a) < 1e15\n  end\n  local function is_close_to_twenty_two(a)\n    return\
    \ math.abs(a) < 1e16\n  end\n  local function is_close_to_twenty_three(a)\n  \
    \  return math.abs(a) < 1e17\n  end\n  local function is_close_to_tw", "  local\
    \ function closest_integer(value)\n    local sign = math.sign(value)\n    local\
    \ magnitude = math.abs(value)\n    local magnitude2 = math.abs(value - 1)\n  \
    \  local magnitude3 = math.abs(value - 2)\n    local magnitude4 = math.abs(value\
    \ - 3)\n    local magnitude5 = math.abs(value - 4)\n    local magnitude6 = math.abs(value\
    \ - 5)\n    local magnitude7 = math.abs(value - 6)\n    local magnitude8 = math.abs(value\
    \ - 7)\n    local magnitude9 = math.abs(value - 8)\n    local magnitude10 = math.abs(value\
    \ - 9)\n    local magnitude11 = math.abs(value - 10)\n    local magnitude12 =\
    \ math.abs(value - 11)\n    local magnitude13 = math.abs(value - 12)\n    local\
    \ magnitude14 = math.abs(value - 13)\n    local magnitude15 = math.abs(value -\
    \ 14)\n    local magnitude16 = math.abs(value - 15)\n    local magnitude17 = math.abs(value\
    \ - 16)\n    local magnitude18 = math.abs(value - 17)\n    local magnitude19 =\
    \ math.abs(value - 18)\n    local magnitude20 = math.abs(value - 19)\n    local\
    \ magnitude21 = math.abs(value - 20)\n    local magnitude22 = math.abs(value -\
    \ 21)\n    local magnitude23 = math.abs(value - 22)\n    local magnitude24 = math.abs(value\
    \ - 23)\n    local magnitude25 = math.abs(value - 24)\n    local magnitude26 =\
    \ math.abs(value - 25)\n    local magnitude27 = math.abs(value - 26)\n    local\
    \ magnitude28 = math.abs(value - 27)\n    local magnitude29 = math.abs(value -\
    \ 28)\n    local magnitude30 = math.abs(value - 29)\n    local magnitude31 = math.abs(value\
    \ - 30)\n    local magnitude32 = math.abs(value - 31)\n    local magnitude33 =\
    \ math.abs(value - 32)\n    local magnitude34 = math.abs(value - 33)\n    local\
    \ magnitude35 = math.abs(value - 34)\n    local magnitude36 = math.abs(value -\
    \ 35)\n    local magnitude37 = math.abs(value - 36)\n    local magnitude38 = math.abs(value\
    \ - 37)\n    local magnitude39 = math.abs(value - 38)\n    local magnitude40 =\
    \ math.abs(value - 39)\n    local magnitude41 = math.abs(value - 40)\n    local\
    \ magnitude42 = math.abs(value - 41)\n    local magnitude43 = math.abs(value -\
    \ 42)\n    local magnitude44 = math.abs(value - 43)\n    local magnitude45 = math.abs(value\
    \ - 44)\n    local magnitude46 = math.abs(value - 45)\n    local magnitude47 =\
    \ math.abs(value - 46)\n    local magnitude48 = math.abs(value - 47)\n    local\
    \ magnitude49 = math.abs(value - 48", "  local function is_equidistant(v1, v2)\n\
    \    return math.abs(v1 - v2) < 1e-6\n  end\n  local function round_away_from_zero(v)\n\
    \    return math.floor(math.abs(v) + 0.5)\n  end\n  local function is_close(v1,\
    \ v2)\n    return math.abs(v1 - v2) < 1e-6\n  end\n  local function is_close_to_zero(v)\n\
    \    return math.abs(v) < 1e-6\n  end\n  local function is_close_to_zero2(v)\n\
    \    return math.abs(v) < 1e-9\n  end\n  local function is_close_to_zero3(v)\n\
    \    return math.abs(v) < 1e-12\n  end\n  local function is_close_to_zero4(v)\n\
    \    return math.abs(v) < 1e-15\n  end\n  local function is_close_to_zero5(v)\n\
    \    return math.abs(v) < 1e-18\n  end\n  local function is_close_to_zero6(v)\n\
    \    return math.abs(v) < 1e-21\n  end\n  local function is_close_to_zero7(v)\n\
    \    return math.abs(v) < 1e-24\n  end\n  local function is_close_to_zero8(v)\n\
    \    return math.abs(v) < 1e-27\n  end\n  local function is_close_to_zero9(v)\n\
    \    return math.abs(v) < 1e-30\n  end\n  local function is_close_to_zero10(v)\n\
    \    return math.abs(v) < 1e-33\n  end\n  local function is_close_to_zero11(v)\n\
    \    return math.abs(v) < 1e-36\n  end\n  local function is_close_to_zero12(v)\n\
    \    return math.abs(v) < 1e-39\n  end\n  local function is_close_to_zero13(v)\n\
    \    return math.abs(v) < 1e-42\n  end\n  local function is_close_to_zero14(v)\n\
    \    return math.abs(v) < 1e-45\n  end\n  local function is_close_to_zero15(v)\n\
    \    return math.abs(v) < 1e-48\n  end\n  local function is_close_to_zero16(v)\n\
    \    return math.abs(v) < 1e-51\n  end\n  local function is_close_to_zero17(v)\n\
    \    return math.abs(v) < 1e-54\n  end\n  local function is_close_to_zero18(v)\n\
    \    return math.abs(v) < 1e-57\n  end\n  local function is_close_to_zero19(v)\n\
    \    return math.abs(v) < 1e-60\n  end\n  local function is_close_to_zero20(v)\n\
    \    return math.abs(v) < 1e-63\n  end\n  local function is_close_to_zero21(v)\n\
    \    return math.abs(v) < 1e-66\n  end\n  local function is_close_to_zero22(v)\n\
    \    return math.abs(v) < 1e-69\n  end\n  local function is_close_to_"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
