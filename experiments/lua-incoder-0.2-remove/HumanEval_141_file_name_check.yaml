name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   -- Your code here\nend", "   -- Check if file name contains only\
    \ digits and one dot.\n   if string.find(file_name, \"%%d\") ~= nil then\n   \
    \   -- Check if file name contains only letters.\n      if string.find(file_name,\
    \ \"%a\") ~= nil then\n         -- Check if file name contains only letters.\n\
    \         if string.find(file_name, \"%A\") ~= nil then\n            -- Check\
    \ if file name starts with letter from latin alphabet.\n            if string.find(file_name,\
    \ \"%a\") ~= nil then\n               -- Check if file name ends with one of these\
    \ extensions: txt, exe, dll.\n               if string.find(file_name, \"%a\"\
    ) ~= nil then\n                  return 'Yes'\n               else\n         \
    \         return 'No'\n               end\n            else\n               return\
    \ 'No'\n            end\n         else\n            return 'No'\n         end\n\
    \      else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end", "    local file_name = file_name\n    local file_extension = string.match(file_name,\
    \ \"%.[^.]+$\")\n    local file_extension_length = string.len(file_extension)\n\
    \    local file_extension_check = file_extension\n    if file_extension_length\
    \ == 0 then\n        file_extension_check = 'txt'\n    end\n    local file_extension_check\
    \ = string.lower(file_extension_check)\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == nil then\n        file_extension_check\
    \ = 'txt'\n    end\n    local file_extension_check = string.match(file_extension_check,\
    \ \"^[a-z][a-z][a-z].*\")\n    if file_extension_check == ", "   -- Your code\
    \ here\nend", "   -- Check that the file name contains only digits and one dot.\n\
    \   if string.find(file_name, \"%%d\") ~= nil then\n      return false\n   end\n\
    \   -- Check that the file name contains only letters and one dot.\n   if string.find(file_name,\
    \ \"%a\") ~= nil then\n      return false\n   end\n   -- Check that the file name\
    \ contains only letters and one dot.\n   if string.find(file_name, \"%A\") ~=\
    \ nil then\n      return false\n   end\n   -- Check that the file name contains\
    \ only letters and one dot.\n   if string.find(file_name, \"%z\") ~= nil then\n\
    \      return false\n   end\n   -- Check that the file name contains only letters\
    \ and one dot.\n   if string.find(file_name, \"%Z\") ~= nil then\n      return\
    \ false\n   end\n   -- Check that the file name contains only letters and one\
    \ dot.\n   if string.find(file_name, \"%0\") ~= nil then\n      return false\n\
    \   end\n   -- Check that the file name contains only letters and one dot.\n \
    \  if string.find(file_name, \"%9\") ~= nil then\n      return false\n   end\n\
    \   -- Check that the file name contains only letters and one dot.\n   if string.find(file_name,\
    \ \"%0\") ~= nil then\n      return false\n   end\n   -- Check that the file name\
    \ contains only letters and one dot.\n   if string.find(file_name, \"%9\") ~=\
    \ nil then\n      return false\n   end\n   -- Check that the file name contains\
    \ only letters and one dot.\n   if string.find(file_name, \"%0\") ~= nil then\n\
    \      return false\n   end\n   -- Check that the file name contains only letters\
    \ and one dot.\n   if string.find(file_name, \"%9\") ~= nil then\n      return\
    \ false\n   end\n   -- Check that the file name contains only letters and one\
    \ dot.\n   if string.find(file_name, \"%0\") ~= nil then\n      return false\n\
    \   end\n   -- Check that the file name contains only letters and one dot.\n \
    \  if string.find(file_name, \"%9\") ~= nil then\n      return false\n   end\n\
    \   -- Check that the file name contains only letters and one dot.\n   if string.find(file_name,\
    \ \"%0\") ~= nil then\n      return false\n   end\n   -- Check that the file name\
    \ contains only letters and one dot.\n   if string.find(file_name, \"%9\") ~=\
    \ nil then\n      return false\n   end\n   -- ", "\t-- Check that the file name\
    \ contains exactly one dot '.'\n\tif file_name ~= nil and file_name ~= '' then\n\
    \t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t\
    -- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\treturn\
    \ 'No'\n\t\tend\n\tend\n\t-- Check that the file name contains exactly one dot\
    \ '.'\n\tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1,\
    \ 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file\
    \ name contains exactly one dot '.'\n\tif file_name ~= nil and file_name ~= ''\
    \ then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\t\
    end\n\t-- Check that the file name contains exactly one dot '.'\n\tif file_name\
    \ ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\
    \treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file name contains exactly\
    \ one dot '.'\n\tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1,\
    \ 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file\
    \ name contains exactly one dot '.'\n\tif file_name ~= nil and file_name ~= ''\
    \ then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\t\
    end\n\t-- Check that the file name contains exactly one dot '.'\n\tif file_name\
    \ ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\
    \treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file name contains exactly\
    \ one dot '.'\n\tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1,\
    \ 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file\
    \ name contains exactly one dot '.'\n\tif file_name ~= nil and file_name ~= ''\
    \ then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\t\
    end\n\t-- Check that the file name contains exactly one dot '.'\n\tif file_name\
    \ ~= nil and file_name ~", "   -- Check that the file name contains exactly one\
    \ dot '.'\n   if file_name ~= nil and file_name ~= '' then\n      -- Get the substring\
    \ before the dot '.'\n      local file_name = string.sub(file_name, 1, string.find(file_name,\
    \ '.'))\n      -- Check that it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n      if file_name ~= nil and file_name ~= '' then\n         if\
    \ string.byte(file_name) ~= nil and string.byte(file_name) >= 65 and string.byte(file_name)\
    \ <= 122 then\n            -- Return true\n            return true\n         else\n\
    \            -- Return false\n            return false\n         end\n      else\n\
    \         -- Return false\n         return false\n      end\n   else\n      --\
    \ Return false\n      return false\n   end\nend", "    local function is_valid_filename(filename)\n\
    \        -- Check that the file name contains exactly one dot '.'\n        if\
    \ string.find(file_name, \".\") ~= nil then\n            -- Check that the substring\
    \ before the dot is not empty\n            if string.sub(file_name,1,1) ~= \"\"\
    \ then\n                -- Check that the substring before the dot starts with\
    \ a letter from the latin alphabet ('a' to 'z')\n                if string.sub(file_name,1,1)\
    \ >= \"a\" and string.sub(file_name,1,1) <= \"z\" then\n                    --\
    \ Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \                    if string.find(file_name, \".\") ~= nil then\n          \
    \              if string.find(file_name, \".\") ~= nil then\n                \
    \            if string.find(file_name, \".\") ~= nil then\n                  \
    \              if string.find(file_name, \".\") ~= nil then\n                \
    \                    if string.find(file_name, \".\") ~= nil then\n          \
    \                              if string.find(file_name, \".\") ~= nil then\n\
    \                                            if string.find(file_name, \".\")\
    \ ~= nil then\n                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \ if string.find(file_name, \".\") ~= nil then\n                             \
    \                               if string.find(file_name, \".\") ~= nil then\n\
    \                                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \ if string.find(file_name, \".\") ~= nil then\n                             \
    \                               if string.find(file_name, \".\") ~= nil then\n\
    \                                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \ if string.find(file_name, \".\") ~= nil then\n                             \
    \                               if string.find(file_name, \".\") ~= nil then\n\
    \                                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \ if string.find(file_name, \".\") ~= nil then\n                             \
    \                               if string.find(file_name, \".\") ~= nil then\n\
    \                                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \ if string.find(file_name, \".\") ~= nil then\n                             \
    \                               if string.find(file_name, \".\") ~= nil then\n\
    \                                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(",
  "   -- Check that the file name contains exactly one dot '.'\n   if file_name ~=\
    \ nil and file_name ~= '' then\n      -- Get the substring before the dot '.'\n\
    \      local file_name = string.sub(file_name, 1, string.find(file_name, '.'))\n\
    \      -- Check that it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n      if file_name ~= nil and file_name ~= '' then\n         if\
    \ string.byte(file_name) ~= nil and string.byte(file_name) >= 65 and string.byte(file_name)\
    \ <= 90 then\n            -- Check that the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n            if file_name ~= nil and file_name\
    \ ~= '' then\n               if string.byte(file_name) ~= nil and string.byte(file_name)\
    \ >= 48 and string.byte(file_name) <= 57 then\n                  return 'Yes'\n\
    \               else\n                  return 'No'\n               end\n    \
    \        else\n               return 'No'\n            end\n         else\n  \
    \          return 'No'\n         end\n      else\n         return 'No'\n     \
    \ end\n   else\n      return 'No'\n   end\nend", "    local function is_valid_filename(str)\n\
    \        local num_digits = str:match('^%d+$')\n        if num_digits ~= nil then\n\
    \            return true\n        end\n        local dot_index = str:find('%.')\n\
    \        if dot_index == nil then\n            return false\n        end\n   \
    \     local first_letter = str:sub(1, 1)\n        local valid_letters = string.char('a'..'z',\
    \ 'A'..'Z')\n        if first_letter ~= nil and first_letter ~= string.upper(first_letter)\
    \ then\n            return false\n        end\n        local valid_extensions\
    \ = string.char('.txt', '.exe', '.dll')\n        if str:sub((dot_index + 1)) ~=\
    \ nil and str:sub((dot_index + 1)) ~= valid_extensions then\n            return\
    \ false\n        end\n        return true\n    end\n    if is_valid_filename(file_name)\
    \ then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend", " \
    \  if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \".\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"^[%z\\1-\\127\\194-\\244][%w\\1-\\127\\194-\\244]*$\") then\n      return\
    \ \"Yes\"\n   end\n   return \"No\"\nend", "    local function is_valid_filename(filename)\n\
    \        -- Check if file name contains only digits and one dot '.'\n        if\
    \ string.find(filename, \"^%d+%.?$\") then\n            return true\n        end\n\
    \        -- Check if file name contains only latin alphabet letters and one dot\
    \ '.'\n        if string.find(filename, \"^[%w]+%.?$\") then\n            return\
    \ true\n        end\n        -- Check if file name contains only latin alphabet\
    \ letters and no dot '.'\n        if string.find(filename, \"^[%w]+$\") then\n\
    \            return true\n        end\n        -- Check if file name contains\
    \ only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- Check if\
    \ file name contains only latin alphabet letters and no dot '.'\n        if string.find(filename,\
    \ \"^[%w]+$\") then\n            return true\n        end\n        -- ", "   \
    \ local function is_valid(str)\n        local num_digits = str:match('^%d+$')\n\
    \        local dot_index = str:find('%.')\n        local dot_substr = str:sub(1,\
    \ dot_index)\n        local dot_substr_length = dot_substr:match('^%a..%z..%A..%Z+$')\n\
    \        local dot_substr_length = dot_substr_length and dot_substr_length:match('^%d+$')\n\
    \        return num_digits and dot_index and dot_substr_length and dot_substr:match('^%a..%z..%A..%Z+$')\
    \ and dot_substr:sub(1, dot_index) == 'txt' and dot_substr:subdot_index == 'exe'\
    \ and dot_substr:subdot_index == 'dll'\n    end\n    return is_valid(file_name)\n\
    end", "   -- Check that the file name contains exactly one dot '.'\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot is not\
    \ empty, and it starts with a letter \n      -- from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n      if string.sub(file_name,1,1) ~= nil then\n         if string.sub(file_name,1,1)\
    \ ~= 'a' then\n            if string.sub(file_name,1,1) ~= 'A' then\n        \
    \       if string.find(file_name, \".\") ~= nil then\n                  if string.find(file_name,\
    \ \".\") ~= nil then\n                     return 'No'\n                  end\n\
    \               end\n            end\n         end\n      end\n   end\n   -- Check\
    \ that the file's name contains only digits (0-9)\n   if string.find(file_name,\
    \ \"[0-9]\") ~= nil then\n      return 'No'\n   end\n   -- Check that the file's\
    \ name contains only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9]\"\
    ) ~= nil then\n      return 'No'\n   end\n   -- Check that the file's name contains\
    \ only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9][0-9]\"\
    ) ~= nil then\n      return 'No'\n   end\n   -- Check that the file's name contains\
    \ only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9][0-9][0-9]\"\
    ) ~= nil then\n      return 'No'\n   end\n   -- Check that the file's name contains\
    \ only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) ~= nil then\n      return 'No'\n   end\n   -- Check that the file's name contains\
    \ only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) ~= nil then\n      return 'No'\n   end\n   -- Check that the file's name contains\
    \ only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) ~= nil then\n      return 'No'\n   end\n   -- Check that the file's name contains\
    \ only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) ~= nil then\n      return 'No'\n   end\n   -- Check that the file's name contains\
    \ only three digits (0-9)\n   if string.find(file_name, \"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9",
  "   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\")\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\")\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   ", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot is not empty, and it starts with a letter\
    \ \n      -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1)\
    \ ~= \"\" then\n         if string.find(string.lower(string.sub(file_name,1,1)),\
    \ string.letters(string.byte(\"abcdefghijklmnopqrstuvwxyz\"))) ~= nil then\n \
    \           -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n            if string.find(string.lower(string.sub(file_name,2,string.len(file_name))),\
    \ \"exe,dll,txt\") ~= nil then\n               return true\n            else\n\
    \               return false\n            end\n         else\n            return\
    \ false\n         end\n      else\n         return false\n      end\n   else\n\
    \      return false\n   end\nend", "   -- Your code here\nend", "    local file_name\
    \ = file_name:lower()\n    local dot_index = file_name:find('.')\n    local file_name\
    \ = file_name:sub(1, dot_index)\n    local first_letter = file_name:sub(1, 1)\n\
    \    local valid_chars = \"a..zA..Z\"\n    local valid_chars_index = valid_chars:find(first_letter)\n\
    \    if valid_chars_index == nil then\n        return false\n    end\n    local\
    \ last_letter = file_name:sub(dot_index + 1, 1)\n    local valid_chars_index =\
    \ valid_chars:find(last_letter)\n    if valid_chars_index == nil then\n      \
    \  return false\n    end\n    local file_name = file_name:sub(1, dot_index + 1)\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    ", "    local valid = false\n    local file_ext = string.match(file_name,\
    \ \"%.[^.]*$\")\n    local file_ext = string.match(file_name, \"%.[^.]*$\")\n\
    \    if file_ext ~= nil then\n        local file_ext = string.match(file_name,\
    \ \"%.[^.]*$\")\n        if file_ext ~= nil then\n            if string.find(file_ext,\
    \ \".txt\") ~= nil then\n                valid = true\n            elseif string.find(file_ext,\
    \ \".exe\") ~= nil then\n                valid = true\n            elseif string.find(file_ext,\
    \ \".dll\") ~= nil then\n                valid = true\n            end\n     \
    \   end\n    end\n    return valid\nend", "    local result = true\n    local\
    \ file_name = file_name:gsub('.*/','')\n    local file_name = file_name:gsub('%.%.%.%-','')\n\
    \    local file_name = file_name:gsub('%.%.%.%','')\n    local file_name = file_name:gsub('%.%.%','')\n\
    \    local file_name = file_name:gsub('%.%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%$','')\n    local file_name = file_name:gsub('%^','')\n\
    \    local file_name = file_name:gsub('%*','')\n    local file_name = file_name:gsub('%?','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')\n\
    \    local file_name = file_name:gsub('%','')\n    local file_name = file_name:gsub('%','')",
  "   -- Check that the file name contains exactly one dot '.'\n   if file_name ~=\
    \ nil then\n      -- Get the substring before the dot\n      local file_name =\
    \ string.sub(file_name, 1, string.find(file_name, \".\"))\n      -- Check that\
    \ it starts with a letter from the latin alphabet ('a' to 'z')\n      if string.find(file_name,\
    \ \"^[a-zA-Z]\") then\n         -- Check that it contains only three digits ('0'-'9')\n\
    \         if string.find(file_name, \"^[0-9]{3}\") then\n            -- Return\
    \ true if the file's name is valid\n            return true\n         else\n \
    \           -- Return false if the file's name is invalid\n            return\
    \ false\n         end\n      else\n         -- Return false if the file's name\
    \ is invalid\n         return false\n      end\n   else\n      -- Return false\
    \ if the file's name is invalid\n      return false\n   end\nend", "   if string.find(file_name,\
    \ '.') ~= nil then\n      if string.find(file_name, '.') ~= 1 then\n         return\
    \ 'No'\n      else\n         if string.find(file_name, '.') ~= 1 then\n      \
    \      if string.find(file_name, '.') ~= 1 then\n               if string.find(file_name,\
    \ '.') ~= 1 then\n                  if string.find(file_name, '.') ~= 1 then\n\
    \                     return 'No'\n                  else\n                  \
    \   return 'No'\n                  end\n               else\n                \
    \  return 'No'\n               end\n            else\n               return 'No'\n\
    \            end\n         else\n            return 'No'\n         end\n     \
    \ end\n   else\n      return 'No'\n   end\nend", "   -- Check that the file name\
    \ contains only three digits\n   if string.find(file_name, '%%d') ~= nil then\n\
    \      return false\n   end\n   -- Check that the file name contains exactly one\
    \ dot\n   if string.find(file_name, '%.') ~= nil then\n      -- Check that the\
    \ substring before the dot is not empty\n      if string.sub(file_name,1,1) ~=\
    \ '' then\n         -- Check that the substring before the dot starts with a letter\
    \ from the latin alphabet\n         if string.find(string.sub(file_name,1,1),\
    \ '%a') ~= nil then\n            return true\n         end\n         -- Check\
    \ that the substring before the dot starts with a letter from the latin alphabet\n\
    \         if string.find(string.sub(file_name,1,1), '%A') ~= nil then\n      \
    \      return true\n         end\n      end\n   end\n   -- Check that the substring\
    \ after the dot is one of these\n   if string.find(file_name, '%.txt') ~= nil\
    \ then\n      return true\n   end\n   if string.find(file_name, '%.exe') ~= nil\
    \ then\n      return true\n   end\n   if string.find(file_name, '%.dll') ~= nil\
    \ then\n      return true\n   end\n   return false\nend", "   -- Check that the\
    \ file name contains exactly one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      -- Get the position of the first dot '.'\n      local dot_position\
    \ = string.find(file_name, '.', 1)\n      -- Check that there is at least one\
    \ dot '.'\n      if dot_position == nil then\n         return 'No'\n      else\n\
    \         -- Check that there is only one dot '.'\n         if dot_position >\
    \ 1 then\n            return 'No'\n         else\n            -- Check that there\
    \ is only one digit ('0'-'9') in the file's name\n            if string.len(file_name)\
    \ > 1 then\n               if string.find(file_name, '[0-9]') ~= nil then\n  \
    \                return 'No'\n               else\n                  -- Check\
    \ that there is only one letter from the latin alphabet ('a'-'z')\n          \
    \        if string.find(file_name, '[a-z]') ~= nil then\n                    \
    \ return 'No'\n                  else\n                     -- Check that there\
    \ is only one letter from the latin alphabet ('A'-'Z')\n                     if\
    \ string.find(file_name, '[A-Z]') ~= nil then\n                        return\
    \ 'No'\n                     else\n                        -- Check that there\
    \ is only one letter from the latin alphabet ('a'-'z')\n                     \
    \   if string.find(file_name, '[A-z]') ~= nil then\n                         \
    \  return 'No'\n                        else\n                           -- Check\
    \ that there is only one letter from the latin alphabet ('A'-'Z')\n          \
    \                 if string.find(file_name, '[a-z]') ~= nil then\n           \
    \                   -- Check that there is only one letter from the latin alphabet\
    \ ('A'-'Z')\n                              return 'No'\n                     \
    \      else\n                              -- Check that there is only one letter\
    \ from the latin alphabet ('A'-'Z')\n                              return 'Yes'\n\
    \                           end\n                        end\n               \
    \      end\n                  end\n               end\n            else\n    \
    \           -- Check that there is only one letter from the latin alphabet ('A'-'Z')\n\
    \               if string.find(file_name, '[A-Z]') ~= nil then\n             \
    \     return 'No'\n               else\n                  -- Check that there\
    \ is only one letter from the latin alphabet ('A'-'Z')\n                  if string.find(file_name,\
    \ '[A-z]') ~= nil then\n                     return 'No'\n                  else\n\
    \                     -- Check that there is only one letter from the latin alphabet\
    \ ('A'-'Z')\n                     if string.find(file_name, '[a-z]') ~= nil then\n\
    \                        -- Check that there is only one letter from the latin\
    \ alphabet ('A'-'Z')\n                        return 'No'\n                  \
    \   else\n                        -- ", "    local function is_valid_filename(str)\n\
    \        -- Check that the string contains exactly one dot '.'\n        if str:sub(1,1)\
    \ ~= '.' then\n            return 'No'\n        end\n        -- Check that the\
    \ string does not contain more than three digits ('0'-'9')\n        if str:sub(1,2)\
    \ ~= '..' then\n            return 'No'\n        end\n        -- Check that the\
    \ string starts with a letter from the latin alphabet ('a' -'z')\n        if str:sub(1,1)\
    \ ~= 'a' then\n            return 'No'\n        end\n        -- Check that the\
    \ string ends with one of these: ['txt', 'exe', 'dll']\n        if str:sub(-4,4)\
    \ ~= '.txt' then\n            return 'No'\n        end\n        if str:sub(-4,4)\
    \ ~= '.exe' then\n            return 'No'\n        end\n        if str:sub(-4,4)\
    \ ~= '.dll' then\n            return 'No'\n        end\n        return 'Yes'\n\
    \    end\n    return is_valid_filename(file_name)\nend", "\t-- Check that the\
    \ file name contains only three digits and one dot.\n\tif string.find(file_name,\
    \ '%%d') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check that the file name contains\
    \ only letters from the latin alphabet.\n\tif string.find(file_name, '%a') ~=\
    \ nil then\n\t\treturn 'No'\n\tend\n\t-- Check that the file name contains only\
    \ letters from the latin alphabet.\n\tif string.find(file_name, '%A') ~= nil then\n\
    \t\treturn 'No'\n\tend\n\t-- Check that the file name does not contain an empty\
    \ substring.\n\tif string.find(file_name, '%s') ~= nil then\n\t\treturn 'No'\n\
    \tend\n\t-- Check that the file name does not start with a number.\n\tif string.find(file_name,\
    \ '%1') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check that the file name does\
    \ not start with a letter.\n\tif string.find(file_name, '%w') ~= nil then\n\t\t\
    return 'No'\n\tend\n\t-- Check that the file name does not start with a letter.\n\
    \tif string.find(file_name, '%W') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check\
    \ that the file name does not start with a letter.\n\tif string.find(file_name,\
    \ '%1') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check that the file name does\
    \ not start with a letter.\n\tif string.find(file_name, '%1') ~= nil then\n\t\t\
    return 'No'\n\tend\n\t-- Check that the file name does not start with a letter.\n\
    \tif string.find(file_name, '%1') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check\
    \ that the file name does not start with a letter.\n\tif string.find(file_name,\
    \ '%1') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check that the file name does\
    \ not start with a letter.\n\tif string.find(file_name, '%1') ~= nil then\n\t\t\
    return 'No'\n\tend\n\t-- Check that the file name does not start with a letter.\n\
    \tif string.find(file_name, '%1') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check\
    \ that the file name does not start with a letter.\n\tif string.find(file_name,\
    \ '%1') ~= nil then\n\t\treturn 'No'\n\tend\n\t-- Check that the file name does\
    \ not start with a letter.\n\tif string.find(file_name, '%1') ~= nil then\n\t\t\
    return 'No'\n\tend\n\t-- Check that the file name does not start with a letter.",
  "\t-- Check that the file name contains only digits and one dot '.'\n\tif string.find(file_name,\
    \ \"%.\") ~= nil then\n\t\treturn false\n\tend", "   if string.find(file_name,\
    \ \".\") ~= nil then\n      if string.find(file_name, \".\") ~= 1 then\n     \
    \    return false\n      end\n   end\n   if string.find(file_name, \"..\") ~=\
    \ nil then\n      return false\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      local file_name = string.sub(file_name,1,string.find(file_name,\
    \ \".\"))\n      local file_name = string.gsub(file_name, \"[^a-zA-Z]\", \"\"\
    )\n      if string.find(file_name, \".\") ~= 1 then\n         return false\n \
    \     end\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      local\
    \ file_name = string.sub(file_name,1,string.find(file_name, \".\"))\n      local\
    \ file_name = string.gsub(file_name, \"[^a-zA-Z]\", \"\")\n      if string.find(file_name,\
    \ \".\") ~= 1 then\n         return false\n      end\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      local file_name = string.sub(file_name,1,string.find(file_name,\
    \ \".\"))\n      local file_name = string.gsub(file_name, \"[^a-zA-Z]\", \"\"\
    )\n      if string.find(file_name, \".\") ~= 1 then\n         return false\n \
    \     end\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      local\
    \ file_name = string.sub(file_name,1,string.find(file_name, \".\"))\n      local\
    \ file_name = string.gsub(file_name, \"[^a-zA-Z]\", \"\")\n      if string.find(file_name,\
    \ \".\") ~= 1 then\n         return false\n      end\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      local file_name = string.sub(file_name,1,string.find(file_name,\
    \ \".\"))\n      local file_name = string.gsub(file_name, \"[^a-zA-Z]\", \"\"\
    )\n      if string.find(file_name, \".\") ~= 1 then\n         return false\n \
    \     end\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      local\
    \ file_name = string.sub(file_name,1,string.find(file_name, \".\"))\n      local\
    \ file_name = string.gsub(file_name, \"[^a-zA-Z]\", \"\")\n      if string.find(file_name,\
    \ \".\") ~= 1 then\n         return false\n      end\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      local file_name = string.sub(file_name,1,string.find(file_name,\
    \ \".\"))\n      local file_name = string.gsub(file_name, \"[^a-zA-Z]\", \"\"\
    )\n      if string.find(file_name, \".\") ~= 1 then\n         return false\n \
    \     end\n   end\n   ", "   -- Check if file name contains only digits and one\
    \ dot\n   if string.find(file_name, \"%%d\") ~= nil then\n      -- Check if file\
    \ name contains only digits and one dot\n      if string.find(file_name, \"%.\"\
    ) ~= nil then\n         -- Check if file name contains only digits and one dot\n\
    \         if string.find(file_name, \"%.\") ~= nil then\n            -- Check\
    \ if file name contains only digits and one dot\n            if string.find(file_name,\
    \ \"%.\") ~= nil then\n               -- Check if file name contains only digits\
    \ and one dot\n               if string.find(file_name, \"%.\") ~= nil then\n\
    \                  -- Check if file name contains only digits and one dot\n  \
    \                if string.find(file_name, \"%.\") ~= nil then\n             \
    \        -- Check if file name contains only digits and one dot\n            \
    \         return \"No\"\n                  else\n                     -- Check\
    \ if file name contains only digits and one dot\n                     return \"\
    Yes\"\n                  end\n               else\n                  -- Check\
    \ if file name contains only digits and one dot\n                  return \"Yes\"\
    \n               end\n            else\n               -- Check if file name contains\
    \ only digits and one dot\n               return \"Yes\"\n            end\n  \
    \       else\n            -- Check if file name contains only digits and one dot\n\
    \            return \"Yes\"\n         end\n      else\n         -- Check if file\
    \ name contains only digits and one dot\n         return \"Yes\"\n      end\n\
    \   else\n      -- Check if file name contains only digits and one dot\n     \
    \ return \"Yes\"\n   end\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil then\n      if string.find(file_name, \"\
    .\") ~= nil then\n         -- Check that the substring before the dot is not empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \         if string.sub(file_name,1,1) ~= nil then\n            if string.find(string.sub(file_name,1,1),\
    \ \"a\") ~= nil or\n               string.find(string.sub(file_name,1,1), \"b\"\
    ) ~= nil or\n               string.find(string.sub(file_name,1,1), \"c\") ~= nil\
    \ or\n               string.find(string.sub(file_name,1,1), \"d\") ~= nil or\n\
    \               string.find(string.sub(file_name,1,1), \"e\") ~= nil or\n    \
    \           string.find(string.sub(file_name,1,1), \"f\") ~= nil or\n        \
    \       string.find(string.sub(file_name,1,1), \"g\") ~= nil or\n            \
    \   string.find(string.sub(file_name,1,1), \"h\") ~= nil or\n               string.find(string.sub(file_name,1,1),\
    \ \"i\") ~= nil or\n               string.find(string.sub(file_name,1,1), \"j\"\
    ) ~= nil or\n               string.find(string.sub(file_name,1,1), \"k\") ~= nil\
    \ or\n               string.find(string.sub(file_name,1,1), \"l\") ~= nil or\n\
    \               string.find(string.sub(file_name,1,1), \"m\") ~= nil or\n    \
    \           string.find(string.sub(file_name,1,1), \"n\") ~= nil or\n        \
    \       string.find(string.sub(file_name,1,1), \"o\") ~= nil or\n            \
    \   string.find(string.sub(file_name,1,1), \"p\") ~= nil or\n               string.find(string.sub(file_name,1,1),\
    \ \"q\") ~= nil or\n               string.find(string.sub(file_name,1,1), \"r\"\
    ) ~= nil or\n               string.find(string.sub(file_name,1,1), \"s\") ~= nil\
    \ or\n               string.find(string.sub(file_name,1,1), \"t\") ~= nil or\n\
    \               string.find(string.sub(file_name,1,1), \"u\") ~= nil or\n    \
    \           string.find(string.sub(file_name,1,1), \"v\") ~= nil or\n        \
    \       string.find(string.sub(file_name,1,1), \"w\") ~= nil or\n            \
    \   string.find(string.sub(file_name,1,1), \"x\") ~= nil or", "\t-- Check that\
    \ the file name contains exactly one dot '.'\n\tif file_name ~= nil and file_name\
    \ ~= '' then\n\t\tif string.find(file_name, '.') ~= nil then\n\t\t\t-- Check that\
    \ the substring before the dot is not empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif string.find(file_name, '.')\
    \ ~= nil and string.sub(file_name,1,1) ~= nil and string.sub(file_name,1,1) ~=\
    \ '-' and string.sub(file_name,1,1) ~= '_' and string.sub(file_name,1,1) ~= 'a'\
    \ and string.sub(file_name,1,1) ~= 'A' then\n\t\t\t\t-- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\tif string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= ", "   if string.find(file_name,\
    \ \"..\") then\n      return \"No\"\n   end\n   if string.find(file_name, \".\"\
    ) then\n      if string.find(file_name, \".\") then\n         if string.find(file_name,\
    \ \".\") then\n            return \"No\"\n         end\n      end\n   end\n  \
    \ if string.find(file_name, \"^[%z\\1-\\127\\194-\\244][%w\\1-\\127\\194-\\244]$\"\
    ) then\n      return \"Yes\"\n   end\n   return \"No\"\nend", "    local function\
    \ is_valid_filename(filename)\n        -- Check that the file name is valid\n\
    \        local function is_valid_filename1(filename)\n            -- Check that\
    \ the file name is valid\n            local function is_valid_filename2(filename)\n\
    \                -- Check that the file name is valid\n                local function\
    \ is_valid_filename3(filename)\n                    -- Check that the file name\
    \ is valid\n                    local function is_valid_filename4(filename)\n\
    \                        -- Check that the file name is valid\n              \
    \          local function is_valid_filename5(filename)\n                     \
    \       -- Check that the file name is valid\n                            local\
    \ function is_valid_filename6(filename)\n                                -- Check\
    \ that the file name is valid\n                                local function\
    \ is_valid_filename7(filename)\n                                    -- Check that\
    \ the file name is valid\n                                    local function is_valid_filename8(filename)\n\
    \                                        -- Check that the file name is valid\n\
    \                                        local function is_valid_filename9(filename)\n\
    \                                            -- Check that the file name is valid\n\
    \                                            local function is_valid_filename10(filename)\n\
    \                                                -- Check that the file name is\
    \ valid\n                                                local function is_valid_filename11(filename)\n\
    \                                                    -- Check that the file name\
    \ is valid\n                                                    local function\
    \ is_valid_filename12(filename)\n                                            \
    \            -- Check that the file name is valid\n                          \
    \                              local function is_valid_filename13(filename)\n\
    \                                                            -- Check that the\
    \ file name is valid\n                                                       \
    \     local function is_valid_filename14(filename)\n                         \
    \                                       -- Check that the file name is valid\n\
    \                                                                local function\
    \ is_valid_filename15(filename)\n                                            \
    \                        -- Check that the file name is valid\n              \
    \                                                      local function is_valid_filename16(filename)\n\
    \                                                                        -- Check\
    \ that the file name is valid\n                                              \
    \                          local function is_valid_filename17(filename)\n    \
    \                                                                        -- Check\
    \ that the file name is valid\n                                              \
    \                              local function is_valid_filename18(filename)\n\
    \                                                                            \
    \    -- Check that the file name is valid\n                                  \
    \                                              local function is_valid_filename19(filename)\n\
    \                                                                            \
    \        -- Check that the file name is valid\n                              \
    \                                                      local function is_valid_filename20(filename)\n\
    \                                                                            \
    \            -- Check that the file name is valid\n                          \
    \                                                              local function\
    \ is_valid_filename21(filename)\n                                            \
    \                                                -- Check that the file name is\
    \ valid\n                                                                    \
    \                        local function is_valid_filename22(filename)\n      \
    \                                                                            \
    \              -- Check that the file name is valid\n                        \
    \                                                                        local\
    \ function is_valid_filename23(filename)\n                                   \
    \                                                                 -- Check that\
    \ the file name is valid\n                                                   \
    \                                                 local function is_valid_filename24(filename)\n\
    \                                                                            \
    \                            -- Check that the file name is valid\n          \
    \                                                                            \
    \                  local function is_valid_filename25(filename)\n            \
    \                                                                            \
    \                    -- Check that the file name is valid\n                  \
    \                                                                            \
    \              local function is_valid_filename26(filename)\n                \
    \                                                                            \
    \                    -- Check that the file name is valid\n                  \
    \                                                                            \
    \                  local function is_valid_filename27(filename)\n            \
    \                                                    ", "\t-- Check that the file\
    \ name contains exactly one dot '.'\n\tif string.find(file_name, \".\") ~= nil\
    \ then\n\t\t-- Check that the substring before the dot is not empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\tif string.sub(file_name,1,1)\
    \ ~= \"\" then\n\t\t\t-- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n\t\t\tif string.find(file_name, \".\") ~= nil then\n\t\
    \t\t\tif string.find(file_name, \".\") ~= nil then\n\t\t\t\t\t-- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\tif\
    \ string.find(file_name, \".\") ~= nil then\n\t\t\t\t\t\t-- Return true\n\t\t\t\
    \t\t\treturn true\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Return false\n\t\t\t\t\t\treturn\
    \ false\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t-- Return true\n\t\t\t\t\treturn\
    \ true\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t-- Return false\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\telse\n\t\t\t-- Return false\n\t\t\treturn false\n\t\tend\n\telse\n\
    \t\t-- Return true\n\t\treturn true\n\tend\nend", "   -- Check if file name contains\
    \ only digits and one dot\n   if string.find(file_name, \"%%d\") ~= nil then\n\
    \      return false\n   end\n   -- Check if file name contains only letters and\
    \ one dot\n   if string.find(file_name, \"%a\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%A\") ~= nil then\n      return false\n   end\n   -- Check if file name starts\
    \ with letter and one dot\n   if string.find(file_name, \"%a\") ~= nil then\n\
    \      return false\n   end\n   -- Check if file name starts with letter and one\
    \ dot\n   if string.find(file_name, \"%A\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%a\") ~= nil then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%A\") ~= nil then\n\
    \      return false\n   end\n   -- Check if file name contains only letters and\
    \ one dot\n   if string.find(file_name, \"%a\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%A\") ~= nil then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%a\") ~= nil then\n\
    \      return false\n   end\n   -- Check if file name contains only letters and\
    \ one dot\n   if string.find(file_name, \"%A\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%a\") ~= nil then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%A\") ~= nil then\n\
    \      return false\n   end\n   -- Check if file name contains only letters and\
    \ one dot\n   if string.find(file_name, \"%a\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%A\") ~= nil then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%a\") ~= nil then\n\
    \      return false\n   end\n", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name < 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'a' then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'z'\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   return true\nend", "   -- Your code here\nend", "   if string.find(file_name,\
    \ '.') ~= nil then\n      if string.find(file_name, '.') ~= 1 then\n         return\
    \ 'No'\n      end\n   end\n   if string.find(file_name, '.') == nil then\n   \
    \   return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= nil then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then\n\
    \      return 'No'\n   end\n   if string.find(file_name, '.', 1, true) ~= 1 then",
  "\t-- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ then\n\t\t-- Check that the file's name contains exactly one dot '.'\n\t\tif\
    \ file_name ~= \"\" then\n\t\t\t-- Check that the file's name contains exactly\
    \ one dot '.'\n\t\t\tif file_name ~= \".\" then\n\t\t\t\t-- Check that the file's\
    \ name contains exactly one dot '.'\n\t\t\t\tif file_name ~= \".\" then\n\t\t\t\
    \t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\t\t\tif file_name\
    \ ~= \".\" then\n\t\t\t\t\t\t-- Check that the file's name contains exactly one\
    \ dot '.'\n\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t-- Check that\
    \ the file's name contains exactly one dot '.'\n\t\t\t\t\t\t\tif file_name ~=\
    \ \".\" then\n\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly one\
    \ dot '.'\n\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\t-- Check\
    \ that the file's name contains exactly one dot '.'\n\t\t\t\t\t\t\t\t\tif file_name\
    \ ~= \".\" then\n\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly\
    \ one dot '.'\n\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\
    \t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\t\t\t\t\
    \t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the\
    \ file's name contains exactly one dot '.'\n\t\t\t\t\t\t\t\t\t\t\t\tif file_name\
    \ ~= \".\" then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains\
    \ exactly one dot '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot\
    \ '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot\
    \ '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= \".\" then\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly\
    \ one dot '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= ", " \
    \  if string.find(file_name, \"%.\") ~= nil then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \"%.\") ~= 1 then\n      return false\n   ", "\t\
    -- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\treturn\
    \ 'No'\n\t\tend\n\tend\n\t-- Check that the file's name contains only digits (0-9)\n\
    \tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~=\
    \ '0' and file_name:sub(1, 1) ~= '9' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\
    \t-- Check that the file's name starts with a letter from the latin alphabet ('a'\
    \ -'z' and 'A' -'Z')\n\tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1,\
    \ 1) ~= 'a' and file_name:sub(1, 1) ~= 'z' then\n\t\t\treturn 'No'\n\t\tend\n\t\
    end\n\t-- Check that the file's name ends with one of these: ['txt', 'exe', 'dll']\n\
    \tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(-3, 3) ~=\
    \ '.exe' or file_name:sub(-3, 3) ~= '.dll' or file_name:sub(-3, 3) ~= 'txt' then\n\
    \t\t\treturn 'No'\n\t\tend\n\tend\n\treturn 'Yes'\nend", "    local file_name\
    \ = file_name\n    local file_name = string.gsub(file_name, \" \", \"\")\n   \
    \ local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name =\
    \ string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local ", "    local\
    \ file_name = file_name:gsub(\"^%w+%.%.+$\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%w+%.%.\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%.%.+\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.+\", \"\")\n\
    \    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%.\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.%.\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^%w+%.%.+\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w+%.+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%w+%.%.\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%.%.+\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.+\", \"\")\n\
    \    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%.\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.%.\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^%w+%.%.+\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w+%.+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%w+%.%.\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%.%.+\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.+\", \"\")\n\
    \    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%.\", \"\")\n    local file_name = file_name:gsub(\"^%w+%.%.\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^%w+%.%.+\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w+%.+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+\", \"\")\n    local file_name = file_name:gsub(\"^%w+", "   -- Your code\
    \ here\nend", "   -- Check if file name contains only digits and one dot.\n  \
    \ if string.find(file_name, \".\") ~= nil then\n      -- Check if file name contains\
    \ only digits and one dot.\n      if string.find(file_name, \".\") ~= nil then\n\
    \         -- Check if file name contains only digits and one dot.\n         if\
    \ string.find(file_name, \".\") ~= nil then\n            -- Check if file name\
    \ contains only digits and one dot.\n            if string.find(file_name, \"\
    .\") ~= nil then\n               -- Check if file name contains only digits and\
    \ one dot.\n               if string.find(file_name, \".\") ~= nil then\n    \
    \              -- Check if file name contains only digits and one dot.\n     \
    \             if string.find(file_name, \".\") ~= nil then\n                 \
    \    -- Check if file name contains only digits and one dot.\n               \
    \      return 'Yes'\n                  else\n                     return 'No'\n\
    \                  end\n               else\n                  return 'No'\n \
    \              end\n            else\n               return 'No'\n           \
    \ end\n         else\n            return 'No'\n         end\n      else\n    \
    \     return 'No'\n      end\n   else\n      return 'No'\n   end\nend", "   --\
    \ Check the file name\n   if string.find(file_name, \".\") ~= nil then\n     \
    \ -- The file name contains at least one dot\n      if string.find(file_name,\
    \ \".\") == 1 then\n         -- The dot is at the beginning\n         if string.find(file_name,\
    \ \".\") == 0 then\n            -- The dot is at the beginning\n            if\
    \ string.find(file_name, \".\") == 0 then\n               -- The dot is at the\
    \ beginning\n               if string.find(file_name, \".\") == 0 then\n     \
    \             -- The dot is at the beginning\n                  if string.find(file_name,\
    \ \".\") == 0 then\n                     -- The dot is at the beginning\n    \
    \                 return \"No\"\n                  else\n                    \
    \ -- The dot is not at the beginning\n                     return \"Yes\"\n  \
    \                end\n               else\n                  -- The dot is not\
    \ at the beginning\n                  return \"No\"\n               end\n    \
    \        else\n               -- The dot is not at the beginning\n           \
    \    return \"Yes\"\n            end\n         else\n            -- The dot is\
    \ not at the beginning\n            return \"No\"\n         end\n      else\n\
    \         -- The dot is not at the beginning\n         return \"Yes\"\n      end\n\
    \   else\n      -- The file name does not contain any dot\n      return \"Yes\"\
    \n   end\nend", "    local function is_valid_filename(filename)\n        -- Check\
    \ that the file name contains exactly one dot '.'\n        if string.find(file_name,\
    \ \".\") ~= nil then\n            -- Check that the substring before the dot is\
    \ not empty\n            if string.sub(file_name,1,1) ~= \"\" then\n         \
    \       -- Check that the substring after the dot is one of these\n          \
    \      local valid_extensions = {\"txt\", \"exe\", \"dll\"}\n                if\
    \ string.find(string.sub(file_name,string.find(file_name, \".\"),string.len(file_name)),\
    \ valid_extensions) ~= nil then\n                    -- Check that the substring\
    \ after the dot starts with a letter from the latin alphabet\n               \
    \     if string.sub(file_name,string.find(file_name, \".\"),1) ~= \"\" then\n\
    \                        -- Check that the substring after the dot does not contain\
    \ any digit\n                        if string.find(string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name)),\"0123456789\") ~= nil then\n                \
    \            return true\n                        else\n                     \
    \       return false\n                        end\n                    else\n\
    \                        return false\n                    end\n             \
    \   else\n                    return false\n                end\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    if is_valid_filename(file_name) then\n    \
    \    return true\n    else\n        return false\n    end\nend", "   -- Check\
    \ if file name contains only digits and one dot '.'\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check if file name contains only digits and one\
    \ dot '.'\n      if string.find(file_name, \".\") ~= nil then\n         -- Check\
    \ if file name contains only digits and one dot '.'\n         if string.find(file_name,\
    \ \".\") ~= nil then\n            -- Check if file name contains only digits and\
    \ one dot '.'\n            if string.find(file_name, \".\") ~= nil then\n    \
    \           -- Check if file name contains only digits and one dot '.'\n     \
    \          if string.find(file_name, \".\") ~= nil then\n                  --\
    \ Check if file name contains only digits and one dot '.'\n                  if\
    \ string.find(file_name, \".\") ~= nil then\n                     -- Check if\
    \ file name contains only digits and one dot '.'\n                     return\
    \ 'Yes'\n                  else\n                     return 'No'\n          \
    \        end\n               else\n                  return 'No'\n           \
    \    end\n            else\n               return 'No'\n            end\n    \
    \     else\n            return 'No'\n         end\n      else\n         return\
    \ 'No'\n      end\n   else\n      return 'No'\n   end\nend", "\t-- Check that\
    \ the file name contains exactly one dot '.'\n\tif file_name ~= nil and file_name\
    \ ~= '' then\n\t\tif string.find(file_name, '.') ~= nil then\n\t\t\t-- Check that\
    \ the substring before the dot is not empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif string.find(file_name, '.')\
    \ ~= nil and string.sub(file_name,1,1) ~= nil then\n\t\t\t\t-- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\tif string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil and string.find(file_name,\
    \ '.') ~= nil and string.find(file_name, '.') ~= nil then\n\t\t\t\t\treturn 'Yes'\n\
    \t\t\t\telse\n\t\t\t\t\treturn 'No'\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn 'No'\n\
    \t\t\tend\n\t\telse\n\t\t\treturn 'No'\n\t\tend\n\telse\n\t\treturn 'No'\n\tend\n\
    end", "   if string.find(file_name, \"..\") then\n      return \"No\"\n   elseif\
    \ string.find(file_name, \".\") then\n      if string.find(file_name, \".\") then\n\
    \         if string.find(file_name, \".\") then\n            if string.find(file_name,\
    \ \".\") then\n               if string.find(file_name, \".\") then\n        \
    \          return \"No\"\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") then\n      if string.find(file_name,\
    \ \".\") then\n         if string.find(file_name, \".\") then\n            if\
    \ string.find(file_name, \".\") then\n               if string.find(file_name,\
    \ \".\") then\n                  return \"No\"\n               end\n         \
    \   end\n         end\n      end\n   end\n   if string.find(file_name, \".\")\
    \ then\n      if string.find(file_name, \".\") then\n         if string.find(file_name,\
    \ \".\") then\n            if string.find(file_name, \".\") then\n           \
    \    if string.find(file_name, \".\") then\n                  return \"No\"\n\
    \               end\n            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         if string.find(file_name,\
    \ \".\") then\n            if string.find(file_name, \".\") then\n           \
    \    if string.find(file_name, \".\") then\n                  return \"No\"\n\
    \               end\n            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         if string.find(file_name,\
    \ \".\") then\n            if string.find(file_name, \".\") then\n           \
    \    if string.find(file_name, \".\") then\n                  return \"No\"\n\
    \               end\n            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         if string.find(file_name,\
    \ \".\") then\n            if string.find(file_name, \".\") then\n           \
    \    if string.find(file_name, \".\") then\n                  return \"No\"\n\
    \               end\n            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(file_name, \".\") then\n         if string.find(file_name,\
    \ \".\") then\n            if string.find(file_name, \".\") then\n           \
    \    if string.find(file_name, \".\") then\n                  return \"No\"\n\
    \               end\n            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") then\n      if string.find(", "   if string.find(file_name, \"..\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"/\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"\\\\\") then\n      return \"No\"\n \
    \  end\n   if string.find(file_name, \":\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"<\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \">\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"?\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"*\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"[\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"{\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"}\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"(\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \")\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"+\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"-\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"=\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"[\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"]\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"{\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"}\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"(\") then\n      return \"No\"\n   end\n   if string.find(file_name, \")\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"|\") then\n\
    \      return \"No", "\t-- Check that the file name contains exactly one dot '.'\n\
    \tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~=\
    \ '.' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file's name\
    \ contains only digits and one dot '.'\n\tif file_name ~= nil and file_name ~=\
    \ '' then\n\t\tif file_name:sub(1, 1) ~= '0' and file_name:sub(1, 1) ~= '9' then\n\
    \t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file's name starts with\
    \ a letter from the latin alphabet ('a'-'z' and 'A'-'Z')\n\tif file_name ~= nil\
    \ and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= 'a' and file_name:sub(1,\
    \ 1) ~= 'z' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file's\
    \ name ends with one of these: ['txt', 'exe', 'dll']\n\tif file_name ~= nil and\
    \ file_name ~= '' then\n\t\tif file_name:sub(-4, 4) ~= '.txt' and file_name:sub(-4,\
    \ 4) ~= '.exe' and file_name:sub(-4, 4) ~= '.dll' then\n\t\t\treturn 'No'\n\t\t\
    end\n\tend\n\treturn 'Yes'\nend", "    local file_ext = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1)\n    local file_ext = string.lower(file_ext)\n\
    \    local file_ext = string.gsub(file_ext, \"[^a-z]\", \"\")\n    local file_ext\
    \ = string.gsub(file_ext, \"^[a-z_]\", \"\")\n    local file_ext = string.gsub(file_ext,\
    \ \"^0*\", \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\
    \")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9.]\", \"\")\n    local\
    \ file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext =\
    \ string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext,\
    \ \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\"\
    , \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n  \
    \  local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext\
    \ = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext,\
    \ \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\"\
    , \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n  \
    \  local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext\
    \ = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext,\
    \ \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\"\
    , \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n  \
    \  local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext\
    \ = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext,\
    \ \"^[a-z_0-9]\", \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\"\
    , \"\")\n    local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n  \
    \  local file_ext = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext\
    \ = string.gsub(file_ext, \"^[a-z_0-9]\", \"\")\n    local file_ext = string.g",
  "   -- Check that the file name contains exactly one dot '.'\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot is not\
    \ empty\n      if string.sub(file_name,1,1) ~= \"\" then\n         -- Check that\
    \ the substring after the dot starts with a letter from the latin alphabet\n \
    \        if string.sub(file_name,string.find(file_name, \".\"),string.find(file_name,\
    \ \".\")) ~= \"\" then\n            -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name,\
    \ \".\") ~= nil then\n               if string.find(file_name, \".\") ~= nil then\n\
    \                  if string.find(file_name, \".\") ~= nil then\n            \
    \         if string.find(file_name, \".\") ~= nil then\n                     \
    \    if string.find(file_name, \".\") ~= nil then\n                          \
    \   if string.find(file_name, \".\") ~= nil then\n                           \
    \      if string.find(file_name, \".\") ~= nil then\n                        \
    \            if string.find(file_name, \".\") ~= nil then\n                  \
    \                     if string.find(file_name, \".\") ~= nil then\n         \
    \                                 if string.find(file_name, \".\") ~= nil then\n\
    \                                             if string.find(file_name, \".\"\
    ) ~= nil then\n                                                 if string.find(file_name,\
    \ \".\") ~= nil then\n                                                     if\
    \ string.find(file_name, \".\") ~= nil then\n                                \
    \                         if string.find(file_name, \".\") ~= nil then\n     \
    \                                                        if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \         if string.find(file_name, \".\") ~= nil then\n                     \
    \                                               if string.find(file_name, \".\"\
    ) ~= nil then\n                                                              \
    \          if string.find(file_name, \".\") ~= nil then\n                    \
    \                                                        if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                                                                            if\
    \ string.find(file_name, \".\") ~= nil then\n                                \
    \                                                     if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \                                 if string.find(file_name, \".\") ~= nil then\n\
    \                                                                            \
    \               if string.find(file_name, \".\") ~= nil then\n               \
    \                                                                            \
    \   if string.find(file_name, \".\") ~= nil then\n                           \
    \                                                                      if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \                                             if string.find(file_name, \".\"\
    ) ~= nil then\n                                                              \
    \                                         if string.find(file_name, \".\") ~=\
    \ nil then\n                                                                 \
    \                                         if string.", "    local file_name =\
    \ string.lower(file_name)\n    local dot_index = string.find(file_name, \".\"\
    )\n    local file_name = string.sub(file_name,1,dot_index)\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local ", "   --\
    \ Check that the file name contains only digits and one dot.\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Get the substring before the dot.\n      local\
    \ file_name = string.sub(file_name,1,string.find(file_name, \".\") - 1)\n    \
    \  -- Check that it starts with a letter from the latin alphabet.\n      if string.find(file_name,\
    \ \"^[a-zA-Z]\") ~= nil then\n         -- Check that it contains only 'txt', 'exe',\
    \ 'dll'.\n         if string.find(file_name, \"txt\") ~= nil or\n            string.find(file_name,\
    \ \"exe\") ~= nil or\n            string.find(file_name, \"dll\") ~= nil then\n\
    \            -- Return true.\n            return true\n         else\n       \
    \     -- Return false.\n            return false\n         end\n      else\n \
    \        -- Return false.\n         return false\n      end\n   else\n      --\
    \ Return true.\n      return true\n   end\nend", "   if string.find(file_name,\
    \ \"..\") then\n      return \"No\"\n   end\n   if string.find(file_name, \".\"\
    ) then\n      if string.find(file_name, \"..\") then\n         return \"No\"\n\
    \      end\n      local last_index = string.find(file_name, \".\")\n      local\
    \ file_name = string.sub(file_name,1,last_index)\n      local extension = string.sub(file_name,last_index+1)\n\
    \      if string.find(extension, \".\") then\n         return \"No\"\n      end\n\
    \      if string.find(extension, \"..\") then\n         return \"No\"\n      end\n\
    \      if string.find(extension, \"txt\") then\n         return \"Yes\"\n    \
    \  end\n      if string.find(extension, \"exe\") then\n         return \"Yes\"\
    \n      end\n      if string.find(extension, \"dll\") then\n         return \"\
    Yes\"\n      end\n   end\n   return \"No\"\nend", "   -- Check that the file name\
    \ contains exactly one dot '.'\n   if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot is not empty\n      if string.sub(file_name,1,1)\
    \ ~= \"\" then\n         -- Check that the substring before the dot starts with\
    \ a letter from the latin alphapet\n         if string.sub(file_name,1,1) ~= string.char(string.byte('a')\
    \ .. string.byte('A')) then\n            -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name,\
    \ \".\") ~= nil then\n               if string.find(file_name, \".\") ~= nil then\n\
    \                  if string.find(file_name, \".\") ~= nil then\n            \
    \         return \"No\"\n                  else\n                     return \"\
    Yes\"\n                  end\n               else\n                  return \"\
    Yes\"\n               end\n            else\n               return \"Yes\"\n \
    \           end\n         else\n            return \"Yes\"\n         end\n   \
    \   else\n         return \"Yes\"\n      end\n   else\n      return \"Yes\"\n\
    \   end\nend", "    local valid = false\n    local dot_count = 0\n    local first_letter\
    \ = ''\n    local last_letter = ''\n    local extension = ''\n    \n    -- Check\
    \ that the file name contains exactly one dot\n    if string.find(file_name, \"\
    .\") then\n        dot_count = string.find(file_name, \".\")\n        -- Get the\
    \ first letter of the file name\n        first_letter = string.sub(file_name,1,dot_count-1)\n\
    \        -- Get the last letter of the file name\n        last_letter = string.sub(file_name,dot_count+1)\n\
    \        -- Get the extension of the file name\n        extension = string.sub(file_name,dot_count+1)\n\
    \        -- Check that the first letter is from the latin alphabet ('a' .. 'z')\n\
    \        if string.find(first_letter, \"a\") then\n            -- Check that the\
    \ last letter is from the latin alphabet ('A' .. 'Z')\n            if string.find(last_letter,\
    \ \"A\") then\n                -- Check that the substring before the dot is empty\n\
    \                if string.find(file_name, \".\") then\n                    --\
    \ Check that the substring after the dot is one of the following\n           \
    \         if string.find(extension, \"txt\") then\n                        valid\
    \ = true\n                    elseif string.find(extension, \"exe\") then\n  \
    \                      valid = true\n                    elseif string.find(extension,\
    \ \"dll\") then\n                        valid = true\n                    end\n\
    \                end\n            end\n        end\n    end\n    return valid\n\
    end", "    local function is_valid_filename(filename)\n        -- Check that the\
    \ file name contains only three digits (0-9)\n        -- if not, return false\n\
    \        if string.find(filename, '%%d') then\n            return false\n    \
    \    end\n        -- Check that the file name contains exactly one dot ('.') \n\
    \        -- if not, return false\n        if string.find(filename, '%.') then\n\
    \            return false\n        end\n        -- Check that the substring before\
    \ the dot is not empty\n        -- if not, return false\n        if string.find(filename,\
    \ '%.') then\n            return false\n        end\n        -- Check that the\
    \ substring before the dot starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n        -- if not, return false\n        if string.find(filename,\
    \ '%.') then\n            return false\n        end\n        -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n        -- if\
    \ not, return false\n        if string.find(filename, '%.') then\n           \
    \ return false\n        end\n        -- Return true\n        return true\n   \
    \ end\n    if is_valid_filename(file_name) then\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend", "    local function is_valid_filename(filename)\n\
    \        local function is_valid_filename_1(filename)\n            local function\
    \ is_valid_filename_2(filename)\n                local function is_valid_filename_3(filename)\n\
    \                    local function is_valid_filename_4(filename)\n          \
    \              local function is_valid_filename_5(filename)\n                \
    \            local function is_valid_filename_6(filename)\n                  \
    \              return true\n                            end\n                \
    \            return false\n                        end\n                     \
    \   return false\n                    end\n                    return false\n\
    \                end\n                return false\n            end\n        \
    \    return false\n        end\n        return false\n    end\n    return false\n\
    end", "    local file_name = file_name\n    local dotPos = string.find(file_name,\
    \ \".\")\n    if dotPos == nil then\n        return false\n    end\n    local\
    \ firstLetter = string.sub(file_name,1,1)\n    local lastLetter = string.sub(file_name,dotPos\
    \ + 1,1)\n    if firstLetter ~= 'a' and firstLetter ~= 'A' then\n        return\
    \ false\n    end\n    if lastLetter ~= 'z' and lastLetter ~= 'Z' then\n      \
    \  return false\n    end\n    if string.len(file_name) > 3 then\n        return\
    \ false\n    end\n    if string.find(file_name, \"..\") then\n        return false\n\
    \    end\n    if string.find(file_name, \".\") then\n        return false\n  \
    \  end\n    if string.find(file_name, \"%\") then\n        return false\n    end\n\
    \    return true\nend", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil and file_name ~= '' then\n      -- Check that the\
    \ file's name contains exactly one dot '.'\n      if file_name:sub(1, 1) ~= '.'\
    \ then\n         return 'No'\n      end\n      -- Check that the file's name starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name:sub(1,\
    \ 1) ~= string.upper(string.sub(file_name:sub(1, 1), 1, 1)) then\n         return\
    \ 'No'\n      end\n      -- Check that the file's name contains one of the following\
    \ strings: ['txt', 'exe', 'dll']\n      if string.find(file_name:sub(2, string.len(file_name)\
    \ - 1), {'txt', 'exe', 'dll'}) == nil then\n         return 'No'\n      end\n\
    \   end\n   return 'Yes'\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil then\n      -- Check that the file's name\
    \ contains exactly one dot '.'\n      if file_name ~= '' then\n         -- Check\
    \ that the file's name contains exactly one dot '.'\n         if file_name ~=\
    \ '.' then\n            -- Check that the substring before the dot should not\
    \ be empty, and it starts\n            -- with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n            if file_name ~= '' then\n               if\
    \ string.sub(file_name, 1, 1) ~= 'a' then\n                  if string.sub(file_name,\
    \ 1, 1) ~= 'A' then\n                     -- Check that the substring after the\
    \ dot should be one of these:\n                     -- - 'txt', 'exe', 'dll'\n\
    \                     return 'No'\n                  end\n               end\n\
    \            end\n         end\n      end\n   end\n   return 'Yes'\nend", "\t\
    -- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ and file_name ~= '' then\n\t\tif string.find(file_name, '.') ~= nil then\n\t\
    \t\t-- Check that the substring before the dot is not empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif string.find(file_name,\
    \ '.') ~= nil and string.sub(file_name,1,1) ~= nil and string.sub(file_name,1,1)\
    \ ~= '-' and string.sub(file_name,1,1) ~= '~' and string.sub(file_name,1,1) ~=\
    \ '#' and string.sub(file_name,1,1) ~= '$' and string.sub(file_name,1,1) ~= '%'\
    \ and string.sub(file_name,1,1) ~= '&' and string.sub(file_name,1,1) ~= '(' and\
    \ string.sub(file_name,1,1) ~= ')' and string.sub(file_name,1,1) ~= '[' and string.sub(file_name,1,1)\
    \ ~= ']' and string.sub(file_name,1,1) ~= '^' and string.sub(file_name,1,1) ~=\
    \ '~' and string.sub(file_name,1,1) ~= '|' and string.sub(file_name,1,1) ~= '-'\
    \ and string.sub(file_name,1,1) ~= '~' and string.sub(file_name,1,1) ~= '^' and\
    \ string.sub(file_name,1,1) ~= '&' and string.sub(file_name,1,1) ~= '-' and string.sub(file_name,1,1)\
    \ ~= '~' and string.sub(file_name,1,1) ~= '^' and string.sub(file_name,1,1) ~=\
    \ '&' and string.sub(file_name,1,1) ~= '-' and string.sub(file_name,1,1) ~= '~'\
    \ and string.sub(file_name,1,1) ~= '^' and string.sub(file_name,1,1) ~= '&' and\
    \ string.sub(file_name,1,1) ~= '-' and string.sub(file_name,1,1) ~= '~' and string.sub(file_name,1,1)\
    \ ~= '^' and string.sub(file_name,1,1) ~= '&' and string.sub(file_name,1,1) ~=\
    \ '-' and string.sub(file_name,1,1) ~= '~' and string.sub(file_name,1,1) ~= '^'\
    \ and string.sub(file_name,1,1) ~= '&' and string.sub(file_name,1,1) ~= '-' and\
    \ string.sub(file_name,1,1) ~= '~' and string.sub(file_name,1,1) ~= '^' and string.sub(file_name,1,1)\
    \ ~= '&' and string.sub(file_name,1,1) ~= '-' and string.sub(file_name,1,1) ~=\
    \ '~' and string.sub(file_name,1,1) ~= '^' and string.sub(file_name,1,1) ~= '&'\
    \ and string.sub(file_name,1,1) ~= '-' and ", "   if string.find(file_name, \"\
    ^[0-9][0-9][0-9]$\") then\n      return \"No\"\n   elseif string.find(file_name,\
    \ \"^.[^.]$\") then\n      return \"No\"\n   elseif string.find(file_name, \"\
    ^[^a-zA-Z]\") then\n      return \"No\"\n   else\n      return \"Yes\"\n   end\n\
    end", "   if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"^[%z\\1-\\127\\194-\\244][%w\\1-\\127\\194-\\244]*$\"\
    ) then\n      return \"Yes\"\n   end\n   return \"No\"\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if string.len(file_name) > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \      return nil\n   end\n   if ", "\t-- Check that the file name contains exactly\
    \ one dot '.'\n\tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1,\
    \ 1) ~= '.' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file\
    \ name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\
    if file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= 'a'\
    \ then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1, 1) ~= 'A' then\n\t\
    \t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file name contains exactly\
    \ three digits ('0'-'9')\n\tif file_name ~= nil and file_name ~= '' then\n\t\t\
    if file_name:sub(1, 1) ~= '0' then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1,\
    \ 1) ~= '1' then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1, 1) ~= '2'\
    \ then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1, 1) ~= '3' then\n\t\
    \t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1, 1) ~= '4' then\n\t\t\treturn\
    \ 'No'\n\t\tend\n\t\tif file_name:sub(1, 1) ~= '5' then\n\t\t\treturn 'No'\n\t\
    \tend\n\t\tif file_name:sub(1, 1) ~= '6' then\n\t\t\treturn 'No'\n\t\tend\n\t\t\
    if file_name:sub(1, 1) ~= '7' then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1,\
    \ 1) ~= '8' then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1, 1) ~= '9'\
    \ then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t-- Check that the file name contains\
    \ exactly one of these: ['txt', 'exe', 'dll']\n\tif file_name ~= nil and file_name\
    \ ~= '' then\n\t\tif file_name:sub(1, 1) ~= 'txt' then\n\t\t\treturn 'No'\n\t\t\
    end\n\t\tif file_name:sub(1, 1) ~= 'exe' then\n\t\t\treturn 'No'\n\t\tend\n\t\t\
    if file_name:sub(1, 1) ~= 'dll' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\t--\
    \ Check that the file name contains exactly one of these: ['txt', 'exe', 'dll']\n\
    \tif file_name ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~=\
    \ 'txt' then\n\t\t\treturn 'No'\n\t\tend\n\t\tif file_name:sub(1, 1) ", "   --\
    \ Check if file name contains only digits and one dot\n   if string.find(file_name,\
    \ \"[^0-9.]\") then\n      return \"No\"\n   end\n   -- Check if file name contains\
    \ only one dot\n   if string.find(file_name, \".\") then\n      return \"No\"\n\
    \   end\n   -- Check if file name starts with latin alphabet letter\n   if string.find(file_name,\
    \ \"^[a-Z]\") then\n      return \"No\"\n   end\n   -- Check if file name ends\
    \ with latin alphabet letter\n   if string.find(file_name, \"[a-Z]$\") then\n\
    \      return \"No\"\n   end\n   -- Check if file name contains only latin alphabet\
    \ letters and dots\n   if string.find(file_name, \"^[a-Z.]$\") then\n      return\
    \ \"No\"\n   end\n   -- Check if file name contains only latin alphabet letters\
    \ and dots\n   if string.find(file_name, \"[a-Z.]$\") then\n      return \"No\"\
    \n   end\n   -- Check if file name contains only latin alphabet letters and dots\n\
    \   if string.find(file_name, \"^[a-Z.]$\") then\n      return \"No\"\n   end\n\
    \   -- Check if file name contains only latin alphabet letters and dots\n   if\
    \ string.find(file_name, \"[a-Z.]$\") then\n      return \"No\"\n   end\n   --\
    \ Check if file name contains only latin alphabet letters and dots\n   if string.find(file_name,\
    \ \"^[a-Z.]$\") then\n      return \"No\"\n   end\n   -- Check if file name contains\
    \ only latin alphabet letters and dots\n   if string.find(file_name, \"[a-Z.]$\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and dots\n   if string.find(file_name, \"^[a-Z.]$\") then\n\
    \      return \"No\"\n   end\n   -- Check if file name contains only latin alphabet\
    \ letters and dots\n   if string.find(file_name, \"[a-Z.]$\") then\n      return\
    \ \"No\"\n   end\n   -- Check if file name contains only latin alphabet letters\
    \ and dots\n   if string.find(file_name, \"^[a-Z.]$\") then\n      return \"No\"\
    \n   end\n   -- Check if file name contains only latin alphabet letters and dots\n\
    \   if string.find(file_name, \"[a-Z.]$\") then\n      return \"No\"\n   end\n\
    \   -- Check if file name contains only latin alphabet letter", "   -- Your code\
    \ here\nend", "   -- Check that the file name contains exactly one dot '.'\n \
    \  if string.find(file_name, \".\") ~= nil then\n      -- Check that the substring\
    \ before the dot is not empty, and it starts with a letter \n      -- from the\
    \ latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1) ~=\
    \ \"\" then\n         if string.find(string.lower(string.sub(file_name,1,1)),string.letters(\"\
    a\")) ~= nil then\n            -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n            if string.find(string.lower(string.sub(file_name,1,2)),{'txt','exe','dll'})\
    \ ~= nil then\n               return true\n            else\n               return\
    \ false\n            end\n         else\n            return false\n         end\n\
    \      else\n         return false\n      end\n   else\n      return false\n \
    \  end\nend", "   -- Check if file name contains only digits and one dot.\n  \
    \ if string.find(file_name, \"%.\") ~= nil then\n      -- Check if file name starts\
    \ with latin alphabet.\n      if string.find(file_name, \"%.\") ~= nil then\n\
    \         if string.find(file_name, \"%.\") ~= nil then\n            -- Check\
    \ if file name ends with latin alphabet.\n            if string.find(file_name,\
    \ \"%.\") ~= nil then\n               -- Check if file name contains only latin\
    \ alphabet.\n               if string.find(file_name, \"%.\") ~= nil then\n  \
    \                -- Check if file name contains only latin alphabet.\n       \
    \           if string.find(file_name, \"%.\") ~= nil then\n                  \
    \   -- Check if file name contains only latin alphabet.\n                    \
    \ return true\n                  else\n                     return false\n   \
    \               end\n               else\n                  return false\n   \
    \            end\n            else\n               return false\n            end\n\
    \         else\n            return false\n         end\n      else\n         return\
    \ false\n      end\n   else\n      return false\n   end\nend", "   -- Check if\
    \ file name contains only digits and one dot\n   if string.find(file_name, \"\
    %%d\") ~= nil then\n      -- Check if file name contains only digits and one dot\n\
    \      if string.find(file_name, \"%.\") ~= nil then\n         -- Check if file\
    \ name contains only digits and one dot\n         if string.find(file_name, \"\
    %.\") ~= nil then\n            -- Check if file name contains only digits and\
    \ one dot\n            if string.find(file_name, \"%.\") ~= nil then\n       \
    \        -- Check if file name contains only digits and one dot\n            \
    \   if string.find(file_name, \"%.\") ~= nil then\n                  -- Check\
    \ if file name contains only digits and one dot\n                  if string.find(file_name,\
    \ \"%.\") ~= nil then\n                     -- Check if file name contains only\
    \ digits and one dot\n                     return \"No\"\n                  else\n\
    \                     -- Check if file name contains only digits and one dot\n\
    \                     return \"Yes\"\n                  end\n               else\n\
    \                  -- Check if file name contains only digits and one dot\n  \
    \                return \"Yes\"\n               end\n            else\n      \
    \         -- Check if file name contains only digits and one dot\n           \
    \    return \"Yes\"\n            end\n         else\n            -- Check if file\
    \ name contains only digits and one dot\n            return \"Yes\"\n        \
    \ end\n      else\n         -- Check if file name contains only digits and one\
    \ dot\n         return \"Yes\"\n      end\n   else\n      -- Check if file name\
    \ contains only digits and one dot\n      return \"Yes\"\n   end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string representing a file's\
    \ name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    A file's name is considered to be valid if and only if all the following conditions\
    \ \nare met:\n- There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n- The file's name contains exactly one dot '.'\n- The substring before\
    \ the dot should not be empty, and it starts with a letter from \nthe latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\nExamples:", "\t-- Check that the file name contains exactly\
    \ one dot '.'\n\tif string.find(file_name, \".\") ~= nil then\n\t\t-- Check that\
    \ the substring before the dot is not empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\tif string.sub(file_name,1,1) ~=\
    \ nil then\n\t\t\t-- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n\t\t\tif string.find(file_name, \".\", 1) ~= nil then\n\t\t\t\
    \t-- Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \t\t\t\tif string.find(file_name, \".\", 2) ~= nil then\n\t\t\t\t\t-- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\
    \tif string.find(file_name, \".\", 3) ~= nil then\n\t\t\t\t\t\t-- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\
    return true\n\t\t\t\t\telse\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\t\
    else\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn false\n\t\
    \t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\n\
    end", "    local function is_valid_filename(filename)\n        -- Check if there\
    \ are more than 3 digits in the file's name\n        local digits = string.match(file_name,\
    \ \"^%%d\")\n        if digits ~= nil then\n            digits = tonumber(digits)\n\
    \            if digits > 9 then\n                return false\n            end\n\
    \        end", "   if string.find(file_name, \".\") ~= nil then\n      local last_dot\
    \ = string.find(file_name, \".\")\n      local file_name = string.sub(file_name,1,last_dot-1)\n\
    \      local extension = string.sub(file_name,last_dot+1)\n      if string.find(extension,\
    \ \".\") ~= nil then\n         local last_dot = string.find(extension, \".\")\n\
    \         local extension = string.sub(extension,1,last_dot-1)\n         if string.find(extension,\
    \ \".\") ~= nil then\n            local last_dot = string.find(extension, \".\"\
    )\n            local extension = string.sub(extension,1,last_dot-1)\n        \
    \    if string.find(extension, \".\") ~= nil then\n               return \"No\"\
    \n            else\n               if string.find(extension, \"txt\") ~= nil then\n\
    \                  return \"Yes\"\n               else\n                  if string.find(extension,\
    \ \"exe\") ~= nil then\n                     return \"Yes\"\n                \
    \  else\n                     if string.find(extension, \"dll\") ~= nil then\n\
    \                        return \"Yes\"\n                     else\n         \
    \               return \"No\"\n                     end\n                  end\n\
    \               end\n            end\n         else\n            return \"No\"\
    \n         end\n      else\n         if string.find(extension, \"txt\") ~= nil\
    \ then\n            return \"Yes\"\n         else\n            if string.find(extension,\
    \ \"exe\") ~= nil then\n               return \"Yes\"\n            else\n    \
    \           if string.find(extension, \"dll\") ~= nil then\n                 \
    \ return \"Yes\"\n               else\n                  return \"No\"\n     \
    \          end\n            end\n         end\n      end\n   else\n      return\
    \ \"No\"\n   end\nend", "   if file_name == nil then\n      return nil\n   end\n\
    \   if string.len(file_name) <= 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if ", "    local result\
    \ = true\n    local num_digits = string.len(file_name)\n    if num_digits > 3\
    \ then\n        result = false\n    elseif num_digits == 0 then\n        result\
    \ = false\n    elseif file_name:sub(1, 1) ~= '\\' or file_name:sub(1, 1) ~= '/'\
    \  then\n        result = false\n    elseif file_name:sub(1, 2) == '..' then\n\
    \        result = false\n    elseif file_name:sub(1, 1) ~= string.char((string.len(file_name)\
    \ - 1)) then\n        result = false\n    elseif file_name:sub(1, 1) ~= string.char((string.len(file_name)\
    \ - 2)) then\n        result = false\n    elseif string.find(file_name, \".\"\
    ) ~= 1 then\n        result = false\n    elseif string.find(file_name, \".\",\
    \ 1, 1) ~= 1 then\n        result = false\n    elseif string.find(file_name, \"\
    .\", 1, 2) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 3) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 4) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 5) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 6) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 7) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 8) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 9) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 10) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 11) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 12) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 13) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 14) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 15) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 16) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 17) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 18) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 19) ~= 1 then\n        result = false\n    elseif string.find(file_name,\
    \ \".\", 1, 20) ~= 1 then\n        result = false\n    elseif string.find(file_name",
  "\t-- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ then\n\t\tlocal index = string.find(file_name, \".\")\n\t\tif index == nil then\n\
    \t\t\treturn 'No'\n\t\telse\n\t\t\t-- Check that the substring before the dot\
    \ is not empty\n\t\t\tlocal sub_string = string.sub(file_name, 0, index)\n\t\t\
    \tif sub_string ~= nil then\n\t\t\t\tif string.len(sub_string) == 0 then\n\t\t\
    \t\t\treturn 'No'\n\t\t\t\telse\n\t\t\t\t\t-- Check that the substring starts\
    \ with a letter from the latin alphabetic \n\t\t\t\t\t-- alphabet\n\t\t\t\t\t\
    local index = string.find(sub_string, \"a\")\n\t\t\t\t\tif index == nil then\n\
    \t\t\t\t\t\treturn 'No'\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\tlocal sub_string\
    \ = string.sub(sub_string, index+1)\n\t\t\t\t\t\tif sub_string ~= nil then\n\t\
    \t\t\t\t\t\tif string.len(sub_string) == 0 then\n\t\t\t\t\t\t\t\treturn 'No'\n\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t-- Check that the substring contains only\
    \ digits (0-9)\n\t\t\t\t\t\t\t\tlocal index = string.find(sub_string, \"0\")\n\
    \t\t\t\t\t\t\t\tif index == nil then\n\t\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\
    \t\t\telse\n\t\t\t\t\t\t\t\t\t-- Check that the file's name contains only digits\
    \ (0-9)\n\t\t\t\t\t\t\t\t\tlocal index = string.find(sub_string, \"1\")\n\t\t\t\
    \t\t\t\t\t\tif index == nil then\n\t\t\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\t\
    \t\t\telse\n\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains only digits\
    \ (0-9)\n\t\t\t\t\t\t\t\t\t\tlocal index = string.find(sub_string, \"2\")\n\t\t\
    \t\t\t\t\t\t\t\tif index == nil then\n\t\t\t\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains\
    \ only digits (0-9)\n\t\t\t\t\t\t\t\t\t\t\tlocal index = string.find(sub_string,\
    \ \"3\")\n\t\t\t\t\t\t\t\t\t\t\tif index == nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\
    return 'No'\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t-- Check that\
    \ the file's name contains only digits (0-9)\n\t\t\t\t\t\t\t\t\t\t\t\tlocal index\
    \ = string.find(sub_string, \"4\")\n\t\t\t\t\t\t\t\t\t\t\t\tif index == nil then\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t-- Check that the file's name contains only digits (0-9)\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\tlocal index = string.find(sub_string, \"5\")\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\tif index == nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn 'No'\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the\
    \ file's name contains only digits (0-9)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal index\
    \ = string.find(sub_string, \"6\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif index == nil\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn 'No'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    else\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains only\
    \ digits (0-9)", "    local function is_valid(file_name_str)\n        local file_name\
    \ = file_name_str\n        local file_name = string.gsub(file_name, \" \", \"\"\
    )\n        local file_name = string.gsub(file_name, \":\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file_name = string.gsub(file_name, \",\", \"\")\n        local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n        local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n        local file_name = string.gsub(file_name, \",\", \"\")\n\
    \        local file", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1,\
    \ 1) ~= '.' then\n         return 'No'\n      end\n   end\n   -- Check that the\
    \ file name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \   if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1)\
    \ ~= 'a' then\n         return 'No'\n      end\n      if file_name:sub(1, 1) ~=\
    \ 'A' then\n         return 'No'\n      end\n   end\n   -- Check that the file\
    \ name contains only three digits ('0'-'9')\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if file_name:sub(1, 1) ~= '0' then\n         return 'No'\n\
    \      end\n      if file_name:sub(1, 1) ~= '9' then\n         return 'No'\n \
    \     end\n   end\n   return 'Yes'\nend", "    local file_name = file_name\n \
    \   local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \" \", \"_\")\n\
    \    local file_name = string.gsub(file_name, \" \", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n", "    local file_name = file_name:lower()\n    local dot_index\
    \ = file_name:find('.')\n    local substring_before_dot = file_name:sub(1, dot_index)\n\
    \    local substring_after_dot = file_name:sub(dot_index + 1)\n    local valid_substring_after_dot\
    \ = \n        ['txt', 'exe', 'dll']:contains(substring_after_dot)\n    local valid_substring_before_dot\
    \ = \n        not substring_before_dot == nil and \n        substring_before_dot:find('^[a-z]')\
    \ ~= nil and \n        substring_before_dot:find('^[a-z]') ~= nil\n    local valid_digits\
    \ = \n        dot_index == 0 and \n        substring_before_dot == nil and \n\
    \        substring_after_dot == nil and \n        valid_substring_after_dot ==\
    \ true and \n        valid_substring_before_dot == true\n    return valid_digits\n\
    end", "    local file_name = string.lower(file_name)\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n",
  "\t-- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ and file_name ~= '' and file_name:sub(1, 1) ~= '.' then\n\t\treturn 'No'\n\t\
    end\n\t-- Check that the file's name contains only digits (0-9)\n\tif file_name\
    \ ~= nil and file_name ~= '' and file_name:sub(1, 1) ~= '0' and file_name:sub(1,\
    \ 1) ~= '9' then\n\t\treturn 'No'\n\tend\n\t-- Check that the file's name starts\
    \ with a letter from the latin alphabet ('a' -'z' and 'A' -'Z')\n\tif file_name\
    \ ~= nil and file_name ~= '' and file_name:sub(1, 1) ~= string.letter('a') and\
    \ file_name:sub(1, 1) ~= string.letter('A') then\n\t\treturn 'No'\n\tend\n\t--\
    \ Check that the file's name contains only these extensions: ['txt', 'exe', 'dll']\n\
    \tif file_name ~= nil and file_name ~= '' and string.find(file_name:sub(1, #file_name),\
    \ '.') ~= nil then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend", "    local file_name\
    \ = file_name:lower()\n    local file_ext = file_name:sub(1, #file_name)\n   \
    \ local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_", "   if file_name == nil then\n      return nil\n   end\n  \
    \ if #file_name > 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"^[%a%z]\"\
    , 1, true) then\n      return nil\n   end\n   if string.find(file_name, \"^[%A%Z]\"\
    , 1, true) then\n      return nil\n   end\n   return true\nend", "\t-- Check that\
    \ the file name contains exactly one dot '.'\n\tif file_name ~= nil then\n\t\t\
    if string.find(file_name, \".\") ~= nil then\n\t\t\t-- Check that the substring\
    \ before the dot is not empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n\t\t\tif string.find(file_name, \".\") ~= nil then\n\t\
    \t\t\tif string.find(file_name, \".\") ~= nil then\n\t\t\t\t\t-- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\tif\
    \ string.find(file_name, \".\") ~= nil then\n\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t-- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t\t-- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t-- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\tif\
    \ string.find(file_name, \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name, \".\") ~= nil then\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tif string.find(file_name, \".\") ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t-- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name, \"\
    .\") ~= nil then\n\t\t\t\t\t\t\t\t", "    local function is_valid_filename(filename)\n\
    \        -- Check that the file name contains exactly one dot '.'\n        if\
    \ string.find(file_name, \".\") ~= nil then\n            -- Check that the substring\
    \ before the dot is not empty, and it starts with \n            -- a letter from\
    \ the latin alphabet ('a'-'z' and 'A'-'Z')\n            if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                    -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                    if string.find(file_name,\
    \ \".\", 1, 3) ~= nil then\n                        -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n                     \
    \   if string.find(file_name, \".\", 1, 4) ~= nil then\n                     \
    \       -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n                            if string.find(file_name, \".\", 1, 5) ~=\
    \ nil then\n                                -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                           \
    \     if string.find(file_name, \".\", 1, 6) ~= nil then\n                   \
    \                 -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n                                    if string.find(file_name,\
    \ \".\", 1, 7) ~= nil then\n                                        -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n       \
    \                                 if string.find(file_name, \".\", 1, 8) ~= nil\
    \ then\n                                            -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n                     \
    \                       if string.find(file_name, \".\", 1, 9) ~= nil then\n \
    \                                               -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                           \
    \                     if string.find(file_name, \".\", 1, 10) ~= nil then\n  \
    \                                                  -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n                     \
    \                               if string.find(file_name, \".\", 1, 11) ~= nil\
    \ then\n                                                        -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n       \
    \                                                 if string.find(file_name, \"\
    .\", 1, 12) ~= nil then\n                                                    \
    \        -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n                                                            if string.find(file_name,\
    \ \".\", 1, 13) ~= nil then\n                                                \
    \                -- Check that the substring after the dot is one of ", "\t--\
    \ Check that the file name contains only digits and one dot\n\t-- If it contains\
    \ more than 3 digits, return false\n\t-- If it contains less than 3 digits, return\
    \ false\n\t-- If it contains more than 1 dot, return false\n\t-- If it contains\
    \ less than 1 dot, return false\n\t-- If it starts with an invalid character,\
    \ return false\n\t-- If it ends with an invalid character, return false\n\t--\
    \ If it contains invalid characters, return false\n\t-- If it contains valid characters,\
    \ return true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, return true\n\t-- If it contains\
    \ valid characters, return true\n\t-- If it contains valid characters, return\
    \ true\n\t-- If it contains valid characters, ", "\t-- Check that the file name\
    \ contains exactly one dot '.'\n\tif file_name ~= nil and file_name ~= '' then\n\
    \t\t-- Check that the file name contains exactly one dot '.'\n\t\tif file_name\
    \ ~= '' then\n\t\t\t-- Check that the substring before the dot should not be empty,\
    \ and it starts with \n\t\t\t-- a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n\t\t\tif file_name ~= '' then\n\t\t\t\t-- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\tif file_name\
    \ ~= '' then\n\t\t\t\t\t-- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n\t\t\t\t\tif file_name ~= '' then\n\t\t\t\t\
    \t\t-- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n\t\t\t\t\t\tif file_name ~= '' then\n\t\t\t\t\t\t\t-- Check that\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\t\
    \t\t\t\t\t\tif file_name ~= '' then\n\t\t\t\t\t\t\t\t-- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\
    if file_name ~= '' then\n\t\t\t\t\t\t\t\t\t-- Check that the substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\tif file_name\
    \ ~= '' then\n\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\tif file_name ~=\
    \ '' then\n\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\tif file_name ~=\
    \ '' then\n\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\tif file_name\
    \ ~= '' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    if file_name ~= '' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\tif file_name ~= '' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= '' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t-- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= '' then\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif\
    \ file_name ~= '' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "   -- Your code here\nend", "    local function\
    \ is_valid_filename(filename)\n        -- Check that the file name contains exactly\
    \ one dot '.'\n        if string.find(file_name, \".\") ~= nil then\n        \
    \    -- Check that the substring before the dot is not empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n            if string.sub(file_name,\
    \ 1, 1) ~= \"\" then\n                -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n                if string.find(file_name,\
    \ \".\") ~= nil then\n                    if string.find(file_name, \".\") ~=\
    \ nil then\n                        if string.find(file_name, \".\") ~= nil then\n\
    \                            -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n                            if string.find(file_name,\
    \ \".\") ~= nil then\n                                return true\n          \
    \                  else\n                                return false\n      \
    \                      end\n                        else\n                   \
    \         return false\n                        end\n                    else\n\
    \                        return false\n                    end\n             \
    \   else\n                    return false\n                end\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end", "   -- Your code here\nend", "   -- Check that\
    \ the file name contains exactly one dot '.'\n   if file_name ~= nil then\n  \
    \    -- Check that the file's name contains exactly one dot '.'\n      if file_name\
    \ ~= '' then\n         -- Check that the substring before the dot should not be\
    \ empty, and it starts with a\n         -- letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n         if file_name ~= '' then\n            -- Check that the\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \
    \        if file_name ~= '' then\n               if string.find(file_name, '.')\
    \ ~= nil then\n                  if string.find(file_name, '.') ~= nil then\n\
    \                     if string.find(file_name, '.') ~= nil then\n           \
    \             if string.find(file_name, '.') ~= nil then\n                   \
    \        if string.find(file_name, '.') ~= nil then\n                        \
    \      if string.find(file_name, '.') ~= nil then\n                          \
    \       return 'Yes'\n                              else\n                   \
    \              return 'No'\n                              end\n              \
    \             else\n                              return 'No'\n              \
    \             end\n                        else\n                           return\
    \ 'No'\n                        end\n                     else\n             \
    \           return 'No'\n                     end\n                  else\n  \
    \                   return 'No'\n                  end\n               else\n\
    \                  return 'No'\n               end\n            else\n       \
    \        return 'No'\n            end\n         else\n            return 'No'\n\
    \         end\n      else\n         return 'No'\n      end\n   else\n      return\
    \ 'No'\n   end\nend", "    local file_name = file_name\n    local dot_index =\
    \ string.find(file_name, \".\")\n    local dot_length = string.len(file_name)\n\
    \    local first_letter = string.sub(file_name, 1, 1)\n    local last_letter =\
    \ string.sub(file_name, dot_index + 1, dot_length)\n    local valid_letters =\
    \ \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\n    local valid_letters_length\
    \ = string.len(valid_letters)\n    local valid_letters_index = valid_letters:find(first_letter)\n\
    \    local valid_letters_index_length = string.len(valid_letters_index)\n    local\
    \ valid_letters_index_length = valid_letters_index_length + 1\n    local valid_letters_index_length\
    \ = valid_letters_index_length + 1\n    local valid_letters_index_length = valid_letters_index_length\
    \ + 1\n    local valid_letters_index_length = valid_letters_index_length + 1\n\
    \    local valid_letters_index_length = valid_letters_index_length + 1\n    local\
    \ valid_letters_index_length = valid_letters_index_length + 1\n    local valid_letters_index_length\
    \ = valid_letters_index_length + 1\n    local valid_letters_index_length = valid_letters_index_length\
    \ + 1\n    local valid_letters_index_length = valid_letters_index_length + 1\n\
    \    local valid_letters_index_length = valid_letters_index_length + 1\n    local\
    \ valid_letters_index_length = valid_letters_index_length + 1\n    local valid_letters_index_length\
    \ = valid_letters_index_length + 1\n    local valid_letters_index_length = valid_letters_index_length\
    \ + 1\n    local valid_letters_index_length = valid_letters_index_length + 1\n\
    \    local valid_letters_index_length = valid_letters_index_length + 1\n    local\
    \ valid_letters_index_length = valid_letters_index_length + 1\n    local valid_letters_index_length\
    \ = valid_letters_index_length + 1\n    local valid_letters_index_length = valid_letters_index_length\
    \ + 1\n    local valid_letters_index_length = valid_letters_index_length + 1\n\
    \    local valid_letters_index_length = valid_letters_index_length + 1\n    local\
    \ valid_letters_index_length = valid_letters_index_length + 1\n    local valid_letters_index_length\
    \ = valid_letters_index_length + 1\n    local valid_letters_index_length = valid_letters_index_length\
    \ + 1\n    local valid_letters_index_length = valid_letters_index_length + 1\n\
    \    local valid_letters_index_length = valid_letters_index_length + 1\n    local\
    \ valid_letters_index_length = valid_letters_index_length + 1\n    local valid_letters_index_",
  "\t-- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ then\n\t\tif string.find(file_name, \".\") ~= nil then\n\t\t\t-- Check that\
    \ the substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t-- Check that the substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\n\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t-- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t\t-- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t\t\t-- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t\t\t\t-- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t-- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t-- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\tif\
    \ string.find(file_name, \".\", 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t--\
    \ Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \t\t\t\t\t\t\t\t\t\t\tif string.find(file_name, \".\", 1, true) ~= nil then\n\t\
    \t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name, \"\
    .\", 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\tif string.find(file_name, \".\", 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t-- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name, \".\", 1, true)\
    \ ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \tif string.find(file_name, \".\", 1, true) ", "   -- Check if file name contains\
    \ only three digits and one dot\n   if string.find(file_name, \"%%d\") ~= nil\
    \ then\n      -- Check if file name contains only three digits and one dot\n \
    \     if string.find(file_name, \"%%d\") ~= nil then\n         -- Check if file\
    \ name contains only three digits and one dot\n         if string.find(file_name,\
    \ \"%%d\") ~= nil then\n            -- Check if file name contains only three\
    \ digits and one dot\n            if string.find(file_name, \"%%d\") ~= nil then\n\
    \               -- Check if file name contains only three digits and one dot\n\
    \               if string.find(file_name, \"%%d\") ~= nil then\n             \
    \     -- Check if file name contains only three digits and one dot\n         \
    \         if string.find(file_name, \"%%d\") ~= nil then\n                   \
    \  -- Check if file name contains only three digits and one dot\n            \
    \         if string.find(file_name, \"%%d\") ~= nil then\n                   \
    \     -- Check if file name contains only three digits and one dot\n         \
    \               if string.find(file_name, \"%%d\") ~= nil then\n             \
    \              -- Check if file name contains only three digits and one dot\n\
    \                           if string.find(file_name, \"%%d\") ~= nil then\n \
    \                             -- Check if file name contains only three digits\
    \ and one dot\n                              return 'Yes'\n                  \
    \         else\n                              -- Check if file name contains only\
    \ three digits and one dot\n                              return 'No'\n      \
    \                     end\n                        else\n                    \
    \       -- Check if file name contains only three digits and one dot\n       \
    \                    return 'No'\n                        end\n              \
    \       else\n                        -- Check if file name contains only three\
    \ digits and one dot\n                        return 'No'\n                  \
    \   end\n                  else\n                     -- Check if file name contains\
    \ only three digits and one dot\n                    return 'No'\n           \
    \       end\n               else\n                  -- Check if file name contains\
    \ only three digits and one dot\n                  return 'No'\n             \
    \  end\n            else\n               -- Check if file name contains only three\
    \ digits and one dot\n               return 'No'\n            end\n         else\n\
    \            -- Check if file name contains only three digits and one dot\n  \
    \          return 'No'\n         end\n      else\n         -- Check if file name\
    \ contains only three digits and one dot\n         return 'No'\n      end\n  \
    \ else\n      -- Check if file name contains only three digits and one dot\n \
    \     return 'No'\n   end\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot is not empty, and it starts with a letter\
    \ \n      -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1)\
    \ ~= \"\" then\n         if string.find(string.lower(string.sub(file_name,1,1)),\
    \ string.letters(\"a\")) ~= nil then\n            -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n            if string.find(string.lower(string.sub(file_name,1,2)),\
    \ \"exe\") ~= nil then\n               return true\n            elseif string.find(string.lower(string.sub(file_name,1,2)),\
    \ \"dll\") ~= nil then\n               return true\n            elseif string.find(string.lower(string.sub(file_name,1,2)),\
    \ \"txt\") ~= nil then\n               return true\n            else\n       \
    \        return false\n            end\n         else\n            return false\n\
    \         end\n      else\n         return false\n      end\n   else\n      return\
    \ false\n   end\nend", "   if string.find(file_name, \"%.\") ~= nil then\n   \
    \   return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n \
    \     return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"%.\") == nil then\n\
    \      return false\n   end\n   if string.find(file_name, \"", "   -- Check that\
    \ the file name contains exactly one dot '.'\n   if file_name ~= nil then\n  \
    \    if string.find(file_name, \".\") ~= nil then\n         -- Check that the\
    \ substring before the dot is not empty\n         if string.find(file_name, \"\
    .\") ~= 1 then\n            -- Check that the substring before the dot starts\
    \ with a letter from the latin alphabet\n            if string.find(file_name,\
    \ \".\", 1, 1) ~= 1 then\n               -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n               if string.find(file_name,\
    \ \".\", 1, 2) ~= 1 then\n                  return true\n               end\n\
    \            end\n         end\n      end\n   end\n   return false\nend", "  \
    \ -- Check that the file name contains exactly one dot '.'\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot is not\
    \ empty\n      if string.sub(file_name,1,1) ~= \"\" then\n         -- Check that\
    \ the substring after the dot is one of these\n         if string.find(file_name,\
    \ \".\", 1) ~= nil then\n            -- Check that the substring after the dot\
    \ starts with a letter from the latin alphabet ('a' -'z' and 'A' -'Z')\n     \
    \       if string.sub(file_name,string.find(file_name, \".\", 1) + 1,1) ~= \"\"\
    \ then\n               if string.find(file_name, \".\", 1) ~= nil then\n     \
    \             if string.find(file_name, \".\", 1) ~= nil then\n              \
    \       if string.find(file_name, \".\", 1) ~= nil then\n                    \
    \    -- Check that the substring after the dot contains only three digits ('0'-'9')\n\
    \                        if string.find(file_name, \".\", 1) ~= nil then\n   \
    \                        if string.find(file_name, \".\", 1) ~= nil then\n   \
    \                           if string.find(file_name, \".\", 1) ~= nil then\n\
    \                                 -- Check that the substring after the dot contains\
    \ only three digits ('0'-'9')\n                                if string.find(file_name,\
    \ \".\", 1) ~= nil then\n                                    if string.find(file_name,\
    \ \".\", 1) ~= nil then\n                                       if string.find(file_name,\
    \ \".\", 1) ~= nil then\n                                          -- Check that\
    \ the substring after the dot contains only three digits ('0'-'9')\n         \
    \                                 if string.find(file_name, \".\", 1) ~= nil then\n\
    \                                             if string.find(file_name, \".\"\
    , 1) ~= nil then\n                                                 if string.find(file_name,\
    \ \".\", 1) ~= nil then\n                                                    \
    \ if string.find(file_name, \".\", 1) ~= nil then\n                          \
    \                              -- Check that the substring after the dot contains\
    \ only three digits ('0'-'9')\n                                              \
    \          if string.find(file_name, \".\", 1) ~= nil then\n                 \
    \                                          if string.find(file_name, \".\", 1)\
    \ ~= nil then\n                                                              if\
    \ string.find(file_name, \".\", 1) ~= nil then\n                             \
    \                                    -- Check that the substring after the dot\
    \ contains only three digits ('0'-'9')\n                                     \
    \                            if string.find(file_name, \".\", 1) ~= nil then\n\
    \                                                                    if string.find(file_name,\
    \ \".\", 1) ~= nil then\n                                                    \
    \                   if string.find(file_name, \".\", 1) ~= nil then\n        \
    \                                                                  -- Check that\
    \ the substring after the dot contains only three digits ('", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name < 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 1) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 2) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 3) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 4) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 5) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 6) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 7) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 8) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 9) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 10) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 11) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 12) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 13) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 14) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 15) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 16) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 17) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 18) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 19) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 20) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 21) ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\", 1, 22) ", "   -- Check that the file\
    \ name contains exactly one dot '.'\n   if file_name ~= nil then\n      -- Check\
    \ that the substring before the dot is not empty\n      if string.find(file_name,\
    \ \".\") ~= nil then\n         -- Check that the substring before the dot starts\
    \ with a letter from the latin alphabet\n         if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n            -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n               if string.find(file_name, \".\", 1,\
    \ 3) ~= nil then\n                  return true\n               else\n       \
    \           return false\n               end\n            else\n             \
    \  return false\n            end\n         else\n            return false\n  \
    \       end\n      else\n         return false\n      end\n   else\n      return\
    \ false\n   end\nend", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if string.find(file_name, \".\") ~= nil then\n      -- Check that the\
    \ substring before the dot is not empty\n      if string.sub(file_name,1,1) ~=\
    \ \"\" then\n         -- Check that the substring after the dot starts with a\
    \ letter from the latin alphabet\n         if string.sub(file_name,string.find(file_name,\
    \ \".\"),1) ~= \"\" then\n            -- Check that the substring after the dot\
    \ is one of these\n            if string.find(file_name, \".\") ~= nil then\n\
    \               if string.find(file_name, \".\") ~= nil then\n               \
    \   if string.find(file_name, \".\") ~= nil then\n                     -- Check\
    \ that the substring after the dot is one of these\n                     if string.find(file_name,\
    \ \".\") ~= nil then\n                        -- Check that the substring after\
    \ the dot is one of these\n                        if string.find(file_name, \"\
    .\") ~= nil then\n                           return \"No\"\n                 \
    \       else\n                           return \"Yes\"\n                    \
    \    end\n                     else\n                        -- Check that the\
    \ substring after the dot is one of these\n                        if string.find(file_name,\
    \ \".\") ~= nil then\n                           return \"Yes\"\n            \
    \            else\n                           return \"No\"\n                \
    \        end\n                     end\n                  else\n             \
    \        -- Check that the substring after the dot is one of these\n         \
    \            if string.find(file_name, \".\") ~= nil then\n                  \
    \      -- Check that the substring after the dot is one of these\n           \
    \             if string.find(file_name, \".\") ~= nil then\n                 \
    \          return \"Yes\"\n                        else\n                    \
    \       return \"No\"\n                        end\n                     else\n\
    \                        -- Check that the substring after the dot is one of these\n\
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                     return \"Yes\"\n                        else\n         \
    \                  return \"No\"\n                        end\n              \
    \       end\n                  end\n               else\n                  --\
    \ Check that the substring after the dot is one of these\n                  if\
    \ string.find(file_name, \".\") ~= nil then\n                     -- Check that\
    \ the substring after the dot is one of these\n                     if string.find(file_name,\
    \ \".\") ~= nil then\n                        -- Check that the substring after\
    \ the dot is one of these\n                        if string.find(file_name, \"\
    .\") ~= nil then\n                           return \"Yes\"\n                \
    \        else\n                           return \"No\"\n                    \
    \    end\n                     else\n                        -- Check that the\
    \ substring after the dot is one of these\n                        if string.find(file_name,\
    \ \".\") ~= nil then\n                           return \"Yes\"\n            \
    \            else", "   -- Check that the file name contains exactly one dot '.'\n\
    \   if file_name ~= nil then\n      -- Check that the substring before the dot\
    \ is not empty, and it starts with a letter \n      -- from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n      if string.find(file_name, '.') ~= nil then\n  \
    \       if string.sub(file_name,1,1) ~= 'a' ~= string.sub(file_name,1,1) ~= 'A'\
    \ then\n            -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n            if string.find(file_name, '.') ~= nil then\n\
    \               if string.find(file_name, '.') ~= nil then\n                 \
    \ if string.find(file_name, '.') ~= nil then\n                     -- Check that\
    \ the substring after the dot is not empty, and it starts with \n            \
    \         -- a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n        \
    \             if string.find(file_name, '.') ~= nil then\n                   \
    \      if string.find(file_name, '.') ~= nil then\n                          \
    \   if string.find(file_name, '.') ~= nil then\n                             \
    \   return 'No'\n                           end\n                        end\n\
    \                     end\n                  end\n               end\n       \
    \     end\n         end\n      end\n   end\n   return 'Yes'\nend", "   -- Check\
    \ that the file name contains exactly one dot '.'\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot is not\
    \ empty\n      if string.sub(file_name,1,1) ~= \"\" then\n         -- Check that\
    \ the substring before the dot starts with a letter from the latin alphabet\n\
    \         if string.sub(file_name,1,1) ~= string.char(string.byte(\"a\") .. string.byte(\"\
    z\") .. string.byte(\"A\") .. string.byte(\"Z\")) then\n            -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n       \
    \     if string.find(file_name, \".\") ~= nil then\n               if string.find(file_name,\
    \ \".\") ~= nil then\n                  if string.find(file_name, \".\") ~= nil\
    \ then\n                     return \"No\"\n                  else\n         \
    \            return \"Yes\"\n                  end\n               else\n    \
    \              return \"Yes\"\n               end\n            else\n        \
    \       return \"Yes\"\n            end\n         else\n            return \"\
    Yes\"\n         end\n      else\n         return \"Yes\"\n      end\n   else\n\
    \      return \"Yes\"\n   end\nend", "    local function is_valid_filename(filename)\n\
    \        -- Check that the file name contains exactly one dot '.'\n        if\
    \ string.find(file_name, \".\") ~= nil then\n            -- Check that the substring\
    \ before the dot is not empty, and it starts with a letter from the latin alphabet\
    \ ('a'-'z' and 'A'-'Z')\n            if string.sub(file_name,1,1) ~= nil then\n\
    \                -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n                if string.find(string.sub(file_name,1,string.find(file_name,\"\
    .\")-1), {'txt', 'exe', 'dll'}) ~= nil then\n                    return true\n\
    \                else\n                    return false\n                end\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    if is_valid_filename(file_name)\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \   local function is_valid(str)\n        local digits = str:gsub('%d+', '')\n\
    \        local dot_index = str:find('%.', 0, true)\n        local dot_string =\
    \ str:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+', '')\n\
    \        local dot_string = dot_index:sub(1, dot_index)\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_index:sub(1, dot_index)\n\
    \        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_index:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_index:sub(1, dot_index)\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_index:sub(1, dot_index)\n\
    \        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_index:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_index:sub(1, dot_index)\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_index:sub(1, dot_index)\n\
    \        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_index:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_index:sub(1, dot_index)\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_index:sub(1, dot_index)\n\
    \        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_index:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_index:sub(1, dot_index)\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_index:sub(1, dot_index)\n\
    \        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_index:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_index:sub(1, dot_index)\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_index:sub(1, dot_index)\n\
    \        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_index:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_index:sub(1, dot_index)\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_", "   -- Check that the file\
    \ name contains only digits and one dot.\n   if string.find(file_name, \".\")\
    \ ~= nil then\n      -- Check that the file name contains only digits and one\
    \ dot.\n      if string.find(file_name, \".\") ~= nil then\n         -- Check\
    \ that the substring before the dot is not empty.\n         if string.find(file_name,\
    \ \".\") ~= nil then\n            -- Check that the substring before the dot starts\
    \ with a letter from the latin alphabet.\n            if string.find(file_name,\
    \ \".\") ~= nil then\n               -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n               if string.find(file_name,\
    \ \".\") ~= nil then\n                  -- Return Yes if the file's name is valid.\n\
    \                  return true\n               else\n                  -- Return\
    \ No if the file's name is invalid.\n                  return false\n        \
    \       end\n            else\n               -- Return No if the file's name\
    \ is invalid.\n               return false\n            end\n         else\n \
    \           -- Return No if the file's name is invalid.\n            return false\n\
    \         end\n      else\n         -- Return No if the file's name is invalid.\n\
    \         return false\n      end\n   else\n      -- Return No if the file's name\
    \ is invalid.\n      return false\n   end\nend", "   -- Check if file name contains\
    \ only digits and one dot\n   if string.find(file_name, \"%D\") then\n      return\
    \ false\n   end\n   -- Check if file name contains only letters and one dot\n\
    \   if string.find(file_name, \"%L\") then\n      return false\n   end\n   --\
    \ Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%A\") then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%Z\") then\n      return\
    \ false\n   end\n   -- Check if file name contains only letters and one dot\n\
    \   if string.find(file_name, \"%%\") then\n      return false\n   end\n   --\
    \ Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%%\") then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%%\") then\n      return\
    \ false\n   end\n   -- Check if file name contains only letters and one dot\n\
    \   if string.find(file_name, \"%%\") then\n      return false\n   end\n   --\
    \ Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%%\") then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%%\") then\n      return\
    \ false\n   end\n   -- Check if file name contains only letters and one dot\n\
    \   if string.find(file_name, \"%%\") then\n      return false\n   end\n   --\
    \ Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%%\") then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%%\") then\n      return\
    \ false\n   end\n   -- Check if file name contains only letters and one dot\n\
    \   if string.find(file_name, \"%%\") then\n      return false\n   end\n   --\
    \ Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%%\") then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and one dot\n   if string.find(file_name, \"%%\") then\n      return\
    \ false\n   end\n   -- Check if file name contains only letters and one dot\n\
    \   if string.find(file_name, \"%%\") then\n      return false\n   end\n   --\
    \ Check if file name contains only letters and one dot\n   if string.find(file_name,\
    \ \"%%\") then\n      return false\n   end\n   -- Check if file name contains\
    \ only letters and ", "    local function is_valid(str)\n        local ok, err\
    \ = false\n        local _, ext = str:match(\"^%a..%w$\")\n        if ext ~= nil\
    \ then\n            local _, ext = str:match(\"^%a..%w$\")\n            if ext\
    \ ~= nil then\n                local _, ext = str:match(\"^%a..%w$\")\n      \
    \          if ext ~= nil then\n                    local _, ext = str:match(\"\
    ^%a..%w$\")\n                    if ext ~= nil then\n                        local\
    \ _, ext = str:match(\"^%a..%w$\")\n                        if ext ~= nil then\n\
    \                            local _, ext = str:match(\"^%a..%w$\")\n        \
    \                    if ext ~= nil then\n                                local\
    \ _, ext = str:match(\"^%a..%w$\")\n                                if ext ~=\
    \ nil then\n                                    local _, ext = str:match(\"^%a..%w$\"\
    )\n                                    if ext ~= nil then\n                  \
    \                      local _, ext = str:match(\"^%a..%w$\")\n              \
    \                          if ext ~= nil then\n                              \
    \              local _, ext = str:match(\"^%a..%w$\")\n                      \
    \                      if ext ~= nil then\n                                  \
    \              local _, ext = str:match(\"^%a..%w$\")\n                      \
    \                          if ext ~= nil then\n                              \
    \                      local _, ext = str:match(\"^%a..%w$\")\n              \
    \                                      if ext ~= nil then\n                  \
    \                                      local _, ext = str:match(\"^%a..%w$\")\n\
    \                                                        if ext ~= nil then\n\
    \                                                            local _, ext = str:match(\"\
    ^%a..%w$\")\n                                                            if ext\
    \ ~= nil then\n                                                              \
    \  local _, ext = str:match(\"^%a..%w$\")\n                                  \
    \                              if ext ~= nil then\n                          \
    \                                          local _, ext = str:match(\"^%a..%w$\"\
    )\n                                                                    if ext\
    \ ~= nil then\n                                                              \
    \          local _, ext = str:match(\"^%a..%w$\")\n                          \
    \                                              if ext ~= nil then\n          \
    \                                                                  local _, ext\
    \ = str:match(\"^%a..%w$\")\n                                                \
    \                            if ext ~= nil then\n                            \
    \                                                    local _, ext = str:match(\"\
    ^%a..%w$\")\n                                                                \
    \                if ext ~= nil then\n                                        \
    \                                            local _, ext = str:match(\"^%a..%w$\"\
    )\n                                                                          \
    \          if ext ~= nil then\n                                              \
    \                                          local _, ext = str:match(\"^%a..%w$\"\
    )\n                                                                          \
    \              if ", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil then\n      -- Check that the substring before the\
    \ dot is not empty\n      if string.find(file_name, '.') ~= nil then\n       \
    \  -- Check that the substring before the dot starts with a letter from the latin\
    \ alphapet\n         if string.find(file_name, '.') ~= nil then\n            if\
    \ string.find(file_name, '.') ~= nil then\n               -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n               if string.find(file_name,\
    \ '.') ~= nil then\n                  if string.find(file_name, '.') ~= nil then\n\
    \                     return 'Yes'\n                  else\n                 \
    \    return 'No'\n                  end\n               else\n               \
    \   return 'No'\n               end\n            else\n               return 'No'\n\
    \            end\n         else\n            return 'No'\n         end\n     \
    \ else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end", "    local function is_valid_filename(str)\n        local result = true\n\
    \        local last_dot = string.find(str, \".\")\n        if last_dot ~= nil\
    \ then\n            local first_letter = string.sub(str,1,1)\n            if first_letter\
    \ ~= 'a' and first_letter ~= 'A' and first_letter ~= '0' and first_letter ~= '9'\
    \ then\n                result = false\n            end\n        end\n       \
    \ return result\n    end\n    local result = true\n    local last_dot = string.find(file_name,\
    \ \".\")\n    if last_dot ~= nil then\n        local first_letter = string.sub(file_name,1,1)\n\
    \        if first_letter ~= 'a' and first_letter ~= 'A' and first_letter ~= '0'\
    \ and first_letter ~= '9' then\n            result = false\n        end\n    end\n\
    \    if is_valid_filename(file_name) then\n        result = true\n    else\n \
    \       result = false\n    end\n    return result\nend", "   -- Check if file\
    \ name contains only digits and one dot\n   if string.find(file_name, \"%.\")\
    \ ~= nil then\n      -- Check if file name contains only letters and one dot\n\
    \      if string.find(file_name, \"%.\") ~= nil then\n         -- Check if file\
    \ name contains only letters and one dot\n         if string.find(file_name, \"\
    %.\") ~= nil then\n            -- Check if file name contains only letters and\
    \ one dot\n            if string.find(file_name, \"%.\") ~= nil then\n       \
    \        -- Check if file name contains only letters and one dot\n           \
    \    if string.find(file_name, \"%.\") ~= nil then\n                  -- Check\
    \ if file name contains only letters and one dot\n                  if string.find(file_name,\
    \ \"%.\") ~= nil then\n                     -- Check if file name contains only\
    \ letters and one dot\n                     return 'Yes'\n                  else\n\
    \                     return 'No'\n                  end\n               else\n\
    \                  return 'No'\n               end\n            else\n       \
    \        return 'No'\n            end\n         else\n            return 'No'\n\
    \         end\n      else\n         return 'No'\n      end\n   else\n      return\
    \ 'No'\n   end\nend", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil then\n      -- Check that the file's name contains\
    \ exactly one dot '.'\n      if file_name:sub(1, 1) ~= '\\.' then\n         return\
    \ 'No'\n      end\n      -- Check that the file's name contains exactly one dot\
    \ '.'\n      if file_name:sub(1, 2) ~= '\\.' then\n         return 'No'\n    \
    \  end\n      -- Check that the file's name contains exactly one dot '.'\n   \
    \   if file_name:sub(1, 3) ~= '\\.' then\n         return 'No'\n      end\n  \
    \    -- Check that the file's name contains exactly one dot '.'\n      if file_name:sub(1,\
    \ 4) ~= '\\.' then\n         return 'No'\n      end\n      -- Check that the file's\
    \ name contains exactly one dot '.'\n      if file_name:sub(1, 5) ~= '\\.' then\n\
    \         return 'No'\n      end\n      -- Check that the file's name contains\
    \ exactly one dot '.'\n      if file_name:sub(1, 6) ~= '\\.' then\n         return\
    \ 'No'\n      end\n      -- Check that the file's name contains exactly one dot\
    \ '.'\n      if file_name:sub(1, 7) ~= '\\.' then\n         return 'No'\n    \
    \  end\n      -- Check that the file's name contains exactly one dot '.'\n   \
    \   if file_name:sub(1, 8) ~= '\\.' then\n         return 'No'\n      end\n  \
    \    -- Check that the file's name contains exactly one dot '.'\n      if file_name:sub(1,\
    \ 9) ~= '\\.' then\n         return 'No'\n      end\n      -- Check that the file's\
    \ name contains exactly one dot '.'\n      if file_name:sub(1, 10) ~= '\\.' then\n\
    \         return 'No'\n      end\n      -- Check that the file's name contains\
    \ exactly one dot '.'\n      if file_name:sub(1, 11) ~= '\\.' then\n         return\
    \ 'No'\n      end\n      -- Check that the file's name contains exactly one dot\
    \ '.'\n      if file_name:sub(1, 12) ~= '\\.' then\n         return 'No'\n   \
    \   end\n      -- Check that the file's name contains exactly one dot '.'\n  \
    \    if file_name:sub(1, 13) ~= '\\.' then\n         return 'No'\n      end\n\
    \      -- Check that the file's name contains exactly one dot '.'\n      if file_name:sub(1,\
    \ 14) ~= '\\.' then\n         return 'No", "    local valid = false\n    local\
    \ file_ext = string.match(file_name, \"%.(%a+)$\")\n    if file_ext ~= nil then\n\
    \        local file_ext = string.match(file_name, \"%.(%a+)$\")\n        if file_ext\
    \ ~= nil then\n            local file_ext = string.match(file_name, \"%.(%a+)$\"\
    )\n            if file_ext ~= nil then\n                local file_ext = string.match(file_name,\
    \ \"%.(%a+)$\")\n                if file_ext ~= nil then\n                   \
    \ local file_ext = string.match(file_name, \"%.(%a+)$\")\n                   \
    \ if file_ext ~= nil then\n                        local file_ext = string.match(file_name,\
    \ \"%.(%a+)$\")\n                        if file_ext ~= nil then\n           \
    \                 local file_ext = string.match(file_name, \"%.(%a+)$\")\n   \
    \                         if file_ext ~= nil then\n                          \
    \      local file_ext = string.match(file_name, \"%.(%a+)$\")\n              \
    \                  if file_ext ~= nil then\n                                 \
    \   local file_ext = string.match(file_name, \"%.(%a+)$\")\n                 \
    \                   if file_ext ~= nil then\n                                \
    \        local file_ext = string.match(file_name, \"%.(%a+)$\")\n            \
    \                            if file_ext ~= nil then\n                       \
    \                     local file_ext = string.match(file_name, \"%.(%a+)$\")\n\
    \                                            if file_ext ~= nil then\n       \
    \                                         local file_ext = string.match(file_name,\
    \ \"%.(%a+)$\")\n                                                if file_ext ~=\
    \ nil then\n                                                    local file_ext\
    \ = string.match(file_name, \"%.(%a+)$\")\n                                  \
    \                  if file_ext ~= nil then\n                                 \
    \                       local file_ext = string.match(file_name, \"%.(%a+)$\"\
    )\n                                                        if file_ext ~= nil\
    \ then\n                                                            local file_ext\
    \ = string.match(file_name, \"%.(%a+)$\")\n                                  \
    \                          if file_ext ~= nil then\n                         \
    \                                       local file_ext = string.match(file_name,\
    \ \"%.(%a+)$\")\n                                                            \
    \    if file_ext ~= nil then\n                                               \
    \                     local file_ext = string.match(file_name, \"%.(%a+)$\")\n\
    \                                                                    if file_ext\
    \ ~= nil then\n                                                              \
    \          local file_ext = string.match(file_name, \"%.(%a+)$\")\n          \
    \                                                              if file_ext ~=\
    \ nil then\n                                                                 \
    \           local file_ext = string.match(file_name, \"%.(%a+)$\")\n         \
    \                                                                   if file_ext\
    \ ~= nil then\n                                                              \
    \                  local file_ext = string.match(file_name, \"%.(%a+)$\")\n  \
    \                                                                            \
    \  if file_ext ~= nil then\n                                                 \
    \                                   local file_ext = string.match(file_name, \"",
  "   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'z' then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,2) ~= 'A' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,2) ~= 'Z' then\n      return nil\n\
    \   end\n   return true\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil then\n      -- Check that the substring\
    \ before the dot is not empty\n      if string.find(file_name, \".\") ~= nil then\n\
    \         -- Check that the substring before the dot starts with a letter from\
    \ the latin alphapet\n         if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \            -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n            if string.find(file_name, \".\", 1, 2) ~= nil then\n\
    \               if string.find(file_name, \".\", 1, 3) ~= nil then\n         \
    \         if string.find(file_name, \".\", 1, 4) ~= nil then\n               \
    \      if string.find(file_name, \".\", 1, 5) ~= nil then\n                  \
    \      if string.find(file_name, \".\", 1, 6) ~= nil then\n                  \
    \         if string.find(file_name, \".\", 1, 7) ~= nil then\n               \
    \               if string.find(file_name, \".\", 1, 8) ~= nil then\n         \
    \                        if string.find(file_name, \".\", 1, 9) ~= nil then\n\
    \                                    return 'Yes'\n                          \
    \       else\n                                    return 'No'\n              \
    \                   end\n                              else\n                \
    \                return 'No'\n                              end\n            \
    \               else\n                              return 'No'\n            \
    \               end\n                        else\n                          \
    \ return 'No'\n                        end\n                     else\n      \
    \                  return 'No'\n                     end\n                  else\n\
    \                     return 'No'\n                  end\n               else\n\
    \                  return 'No'\n               end\n            else\n       \
    \        return 'No'\n            end\n         else\n            return 'No'\n\
    \         end\n      else\n         return 'No'\n      end\n   else\n      return\
    \ 'No'\n   end\nend", "   if string.find(file_name, \".\") ~= nil then\n     \
    \ local file_ext = string.sub(file_name,string.find(file_name, \".\"))\n     \
    \ if file_ext ~= \"\" then\n         if string.find(file_ext, \".\") ~= nil then\n\
    \            local file_ext = string.sub(file_ext,string.find(file_ext, \".\"\
    ))\n            if file_ext ~= \"\" then\n               if string.find(file_ext,\
    \ \".\") ~= nil then\n                  local file_ext = string.sub(file_ext,string.find(file_ext,\
    \ \".\"))\n                  if file_ext ~= \"\" then\n                     if\
    \ string.find(file_ext, \".\") ~= nil then\n                        local file_ext\
    \ = string.sub(file_ext,string.find(file_ext, \".\"))\n                      \
    \  if file_ext ~= \"\" then\n                           if string.find(file_ext,\
    \ \".\") ~= nil then\n                              local file_ext = string.sub(file_ext,string.find(file_ext,\
    \ \".\"))\n                              return \"No\"\n                     \
    \      else\n                              if string.find(file_ext, \".\") ~=\
    \ nil then\n                                 local file_ext = string.sub(file_ext,string.find(file_ext,\
    \ \".\"))\n                                 if file_ext ~= \"\" then\n       \
    \                              if string.find(file_ext, \".\") ~= nil then\n \
    \                                       local file_ext = string.sub(file_ext,string.find(file_ext,\
    \ \".\"))\n                                        if file_ext ~= \"\" then\n\
    \                                           if string.find(file_ext, \".\") ~=\
    \ nil then\n                                              local file_ext = string.sub(file_ext,string.find(file_ext,\
    \ \".\"))\n                                              if file_ext ~= \"\" then\n\
    \                                                if string.find(file_ext, \".\"\
    ) ~= nil then\n                                                   local file_ext\
    \ = string.sub(file_ext,string.find(file_ext, \".\"))\n                      \
    \                             if file_ext ~= \"\" then\n                     \
    \                                 if string.find(file_ext, \".\") ~= nil then\n\
    \                                                         local file_ext = string.sub(file_ext,string.find(file_ext,\
    \ \".\"))\n                                                         return \"\
    No\"\n                                                      else\n           \
    \                                              return \"Yes\"\n              \
    \                                        end\n                               \
    \                    else\n                                                  \
    \    return \"Yes\"\n                                                   end\n\
    \                                                else\n                      \
    \                             return \"Yes\"\n                               \
    \                 end\n                                             else\n   \
    \                                             return \"Yes\"\n               \
    \                              end\n                                         \
    \ else\n                                             return \"Yes\"\n        \
    \                                  end\n                                     \
    \  else\n                                          return \"Yes\"\n          \
    \                             end\n                                    else\n\
    \                                        return \"Yes\"\n                    \
    \                end\n                                 else\n                \
    \                    return \"Yes\"\n                                 end\n  \
    \                            else\n                                  return \"\
    Yes\"\n                              end\n                           else\n  \
    \                          ", "    local file_name = file_name:lower()\n    local\
    \ file_name = file_name:gsub('.+$', '')\n    local file_name = file_name:gsub('^[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]$', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n    local file_name\
    \ = file_name:gsub('[^a-z]', '')\n    local file_name = file_name:gsub('[^a-z]',\
    \ '')\n    local file_name = file_name:gsub('[^a-z]', '')\n", "   -- Check if\
    \ file_name is valid\n   if file_name ~= nil then\n      -- Check if file_name\
    \ contains only digits and dots\n      if string.find(file_name, \"^[0-9.]+$\"\
    ) ~= nil then\n         -- Check if file_name contains only one dot\n        \
    \ if string.find(file_name, \".\") ~= nil then\n            -- Check if file_name\
    \ does not contain empty string\n            if string.find(file_name, \"^[^.]+$\"\
    ) ~= nil then\n               -- Check if file_name starts with latin alphabet\
    \ letter\n               if string.find(file_name, \"^[a-zA-Z]\") ~= nil then\n\
    \                  -- Check if file_name ends with latin alphabet letter\n   \
    \               if string.find(file_name, \"[a-zA-Z]$\") ~= nil then\n       \
    \              -- Check if file_name contains one of these extensions: txt, exe,\
    \ dll\n                     if string.find(file_name, \"(txt|exe|dll)$\") ~= nil\
    \ then\n                        -- Return true\n                        return\
    \ true\n                     else\n                        -- Return false\n \
    \                       return false\n                     end\n             \
    \     else\n                     -- Return false\n                     return\
    \ false\n                  end\n               else\n                  -- Return\
    \ false\n                  return false\n               end\n            else\n\
    \               -- Return false\n               return false\n            end\n\
    \         else\n            -- Return false\n            return false\n      \
    \   end\n      else\n         -- Return false\n         return false\n      end\n\
    \   else\n      -- Return false\n      return false\n   end\nend", "    local\
    \ valid = false\n    local file_name = file_name:gsub(\"^%.*\", \"\")\n    local\
    \ dot_index = file_name:find(\".\", 1, true)\n    if dot_index == nil then\n \
    \       return valid\n    end\n    local file_name = file_name:sub(1, dot_index)\n\
    \    local file_name = file_name:gsub(\"^[%w]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[%w][%w]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[%w][%w][%w]\", \"\")\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w]\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w][%w]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w][%w][%w]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w][%w][%w][%w]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w][%w][%w][%w][%w]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[%", "    local file_extension\
    \ = string.match(file_name, \"%.(%w+)$\")\n    local file_extension_length = string.len(file_extension)\n\
    \    local file_extension_valid = file_extension_length == 1 and string.sub(file_extension,\
    \ 1, 1) == 'a' and string.sub(file_extension, 1, 1) == 'z' and string.sub(file_extension,\
    \ 1, 1) == 'A' and string.sub(file_extension, 1, 1) == 'Z' and string.sub(file_extension,\
    \ 1, 1) == '0'\n    local file_extension_valid = file_extension_valid and string.match(file_name,\
    \ \"^[^.]+\\.[^.]+$\")\n    local file_extension_valid = file_extension_valid\
    \ and string.match(file_name, \"^[^.]+\\.[^.]+\\.[^.]+$\")\n    local file_extension_valid\
    \ = file_extension_valid and string.match(file_name, \"^[^.]+\\.[^.]+\\.[^.]+\\\
    .[^.]+$\")\n    local file_extension_valid = file_extension_valid and string.match(file_name,\
    \ \"^[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+$\")\n    local file_extension_valid\
    \ = file_extension_valid and string.match(file_name, \"^[^.]+\\.[^.]+\\.[^.]+\\\
    .[^.]+\\.[^.]+\\.[^.]+$\")\n    local file_extension_valid = file_extension_valid\
    \ and string.match(file_name, \"^[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\\
    .[^.]+$\")\n    local file_extension_valid = file_extension_valid and string.match(file_name,\
    \ \"^[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+$\")\n    local\
    \ file_extension_valid = file_extension_valid and string.match(file_name, \"^[^.]+\\\
    .[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+$\")\n    local\
    \ file_extension_valid = file_extension_valid and string.match(file_name, \"^[^.]+\\\
    .[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+$\")\n \
    \   local file_extension_valid = file_extension_valid and string.match(file_name,\
    \ \"^[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+\\.[^.]+", "    local\
    \ function is_valid_filename(file_name)\n        -- Check that the file name contains\
    \ exactly one dot '.'\n        if string.find(file_name, \".\") ~= nil then\n\
    \            -- Check that the substring before the dot is not empty, and it starts\
    \ with a letter from the latin alphabet ('a'-'z' and 'A'-'Z')\n            if\
    \ string.find(file_name, \".\", 1, true) ~= nil then\n                -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \              if string.find(file_name, \".\", 1, true) ~= nil then\n       \
    \             -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n                    if string.find(file_name, \".\", 1, true)\
    \ ~= nil then\n                        -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n                        if string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n                            -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n                     \
    \       if string.find(file_name, \".\", 1, true) ~= nil then\n              \
    \                  -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n                                if string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n                                    -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n       \
    \                             if string.find(file_name, \".\", 1, true) ~= nil\
    \ then\n                                        -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                           \
    \             if string.find(file_name, \".\", 1, true) ~= nil then\n        \
    \                                    -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n                                   \
    \         if string.find(file_name, \".\", 1, true) ~= nil then\n            \
    \                                    -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n                                   \
    \             if string.find(file_name, \".\", 1, true) ~= nil then\n        \
    \                                            -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                           \
    \                         if string.find(file_name, \".\", 1, true) ~= nil then\n\
    \                                                        -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n                     \
    \                                   if string.find(file_name, \".\", 1, true)\
    \ ~= nil then\n                                                            --\
    \ Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \                                                            if string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n                                              \
    \                  -- Check that the ", "\t-- Check that the file name contains\
    \ exactly one dot '.'\n\tif string.find(file_name, \".\") ~= nil then\n\t\t--\
    \ Check that the file's name contains exactly one dot '.'\n\t\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\t\t-- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphabet ('a'-'z' and\
    \ 'A'-'Z')\n\t\t\tif string.find(file_name, \".\", 1, true) ~= nil then\n\t\t\t\
    \t-- Check that the substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n\t\t\t\tif string.find(file_name, \".\", 1, true) ~= nil then\n\t\t\t\
    \t\t-- Return Yes if the file's name is valid\n\t\t\t\t\treturn true\n\t\t\t\t\
    else\n\t\t\t\t\t-- Return No if the file's name is invalid\n\t\t\t\t\treturn false\n\
    \t\t\t\tend\n\t\t\telse\n\t\t\t\t-- Return No if the file's name is invalid\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\t-- Return No if the file's name\
    \ is invalid\n\t\t\treturn false\n\t\tend\n\telse\n\t\t-- Return No if the file's\
    \ name is invalid\n\t\treturn false\n\tend\nend", "   -- Your code here\nend",
  "   -- Check that the file name contains exactly one dot '.'\n   if file_name ~=\
    \ nil then\n      -- Check that the substring before the dot is not empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    \
    \  if string.find(file_name, \".\") ~= nil then\n         if string.sub(file_name,1,1)\
    \ ~= string.char(string.byte(\"a\")) then\n            if string.sub(file_name,1,1)\
    \ ~= string.char(string.byte(\"A\")) then\n               if string.find(file_name,\
    \ \".\") ~= nil then\n                  if string.find(file_name, \".\") ~= nil\
    \ then\n                     -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n                    if string.find(file_name,\
    \ \".\") ~= nil then\n                        -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                        if string.find(file_name,\
    \ \".\") ~= nil then\n                           -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                           if\
    \ string.find(file_name, \".\") ~= nil then\n                              --\
    \ Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \                              return true\n                           end\n \
    \                       end\n                     end\n                  end\n\
    \               end\n            end\n         end\n      end\n   end\n   return\
    \ false\nend", "   -- Check that the file name contains exactly one dot '.'\n\
    \   if file_name ~= nil then\n      if string.find(file_name, \".\") ~= nil then\n\
    \         -- Check that the substring before the dot is not empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n         if string.find(file_name,\
    \ \".\") ~= nil then\n            if string.find(file_name, \".\") ~= nil then\n\
    \               if string.find(file_name, \".\") ~= nil then\n               \
    \   if string.find(file_name, \".\") ~= nil then\n                     -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \                   if string.find(file_name, \".\") ~= nil then\n           \
    \             if string.find(file_name, \".\") ~= nil then\n                 \
    \          if string.find(file_name, \".\") ~= nil then\n                    \
    \          if string.find(file_name, \".\") ~= nil then\n                    \
    \             return true\n                              end\n               \
    \            end\n                        end\n                     end\n    \
    \              end\n               end\n            end\n         end\n      end\n\
    \   end\n   return false\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if #file_name ~= 1 then\n      return 'No'\n   end\n   -- Check\
    \ that the substring before the dot is not empty, and it starts with a letter\
    \ \n   -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n   if string.sub(file_name,1,1)\
    \ ~= '' then\n      if string.sub(file_name,1,1) ~= string.char(string.byte('a')\
    \ .. string.byte('A')) then\n         return 'No'\n      end\n   end\n   -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \ if string.sub(file_name,string.len(file_name),string.len(file_name)) ~= 'exe'\
    \ then\n      return 'No'\n   end\n   return 'Yes'\nend", "   -- Check that the\
    \ file name contains exactly one dot '.'\n   if string.find(file_name, \".\")\
    \ ~= nil then\n      -- Check that the substring before the dot is not empty,\
    \ and it starts with a letter from \n      -- the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.sub(file_name,1,1) ~= nil then\n         if string.find(string.lower(string.sub(file_name,1,1)),string.letters(\"\
    a\")) ~= nil then\n            -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n            if string.find(string.lower(string.sub(file_name,1,2)),{'txt','exe','dll'})\
    \ ~= nil then\n               return 'Yes'\n            else\n               return\
    \ 'No'\n            end\n         else\n            return 'No'\n         end\n\
    \      else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end", "   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ < 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= 1\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.char(string.byte(\"\
    a\")) then\n      return nil\n   end\n   if string.sub(file_name,string.len(file_name),string.len(file_name))\
    \ ~= string.char(string.byte(\"z\")) then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n      return nil\n   end\n   return true\nend", " \
    \  if string.find(file_name, \"^[0-9][0-9][0-9]$\") then\n      return \"No\"\n\
    \   elseif string.find(file_name, \"^.[^.]$\") then\n      return \"No\"\n   elseif\
    \ string.find(file_name, \"^[a-zA-Z][a-zA-Z0-9]*$\") then\n      return \"Yes\"\
    \n   else\n      return \"No\"\n   end\nend", "    local function is_valid(str)\n\
    \        local num_digits = str:match('^%d+$')\n        if num_digits ~= nil then\n\
    \            local dot_pos = str:find('%.', 1, 1)\n            if dot_pos == nil\
    \ then\n                return false\n            else\n                local\
    \ dot_str = str:sub(1, dot_pos)\n                local dot_len = dot_str:match('^%a..%z+$')\n\
    \                if dot_len == nil then\n                    return false\n  \
    \              else\n                    local dot_char = dot_str:sub(1, dot_len)\n\
    \                    local dot_char_lower = dot_char:lower()\n               \
    \     if dot_char_lower == 'a' or dot_char_lower == 'b' then\n               \
    \         return false\n                    else\n                        return\
    \ true\n                    end\n                end\n            end\n      \
    \  else\n            return false\n        end\n    end\n    local function is_dot_valid(str)\n\
    \        local dot_pos = str:find('%.', 1, 1)\n        if dot_pos == nil then\n\
    \            return true\n        else\n            local dot_str = str:sub(1,\
    \ dot_pos)\n            local dot_len = dot_str:match('^%a..%z+$')\n         \
    \   if dot_len == nil then\n                return false\n            else\n \
    \               local dot_char = dot_str:sub(1, dot_len)\n                local\
    \ dot_char_lower = dot_char:lower()\n                if dot_char_lower == 'a'\
    \ or dot_char_lower == 'b' then\n                    return false\n          \
    \      else\n                    return true\n                end\n          \
    \  end\n        end\n    end\n    local function is_dot_dot_valid(str)\n     \
    \   local dot_pos = str:find('%.', 1, 1)\n        if dot_pos == nil then\n   \
    \         return true\n        else\n            local dot_str = str:sub(1, dot_pos)\n\
    \            local dot_len = dot_str:match('^%a..%z+$')\n            if dot_len\
    \ == nil then\n                return false\n            else\n              \
    \  local dot_char = dot_str:sub(1, dot_len)\n                local dot_char_lower\
    \ = dot_char:lower()\n                if dot_char_lower == 'a' or dot_char_lower\
    \ == 'b' then\n                    return false\n                else\n      \
    \              return true\n                end\n            end\n        end\n\
    \    end\n    local function is_dot_dot_dot_valid(str)\n        local dot_pos\
    \ = str:find('%.', 1, 1)\n        if dot_pos == nil then\n            return true\n\
    \        else\n            local dot_str = str:sub(1, dot_pos)\n            local\
    \ dot_len = dot_str:match('^%a..%z+$')\n            if dot_len == nil then\n \
    \               return false\n            else\n                local dot_char\
    \ = dot_str:sub(1, dot_len)\n                local dot_char_lower = dot_char:lower()\n\
    \                if dot_", "   -- Your code here\nend", "    local file_extension\
    \ = string.sub(file_name, string.find(file_name, \".\") + 1)\n    local file_extension_lower\
    \ = string.lower(file_extension)\n    local file_extension_lower = string.sub(file_extension_lower,\
    \ 1, string.find(file_extension_lower, \".\") - 1)\n    local file_extension_lower\
    \ = string.sub(file_extension_lower, string.find(file_extension_lower, \".\")\
    \ + 1)\n    local file_extension_lower = string.sub(file_extension_lower, 1, string.find(file_extension_lower,\
    \ \".\") - 1)\n    local file_extension_lower = string.sub(file_extension_lower,\
    \ string.find(file_extension_lower, \".\") + 1)\n    local file_extension_lower\
    \ = string.sub(file_extension_lower, 1, string.find(file_extension_lower, \".\"\
    ) - 1)\n    local file_extension_lower = string.sub(file_extension_lower, string.find(file_extension_lower,\
    \ \".\") + 1)\n    local file_extension_lower = string.sub(file_extension_lower,\
    \ 1, string.find(file_extension_lower, \".\") - 1)\n    local file_extension_lower\
    \ = string.sub(file_extension_lower, string.find(file_extension_lower, \".\")\
    \ + 1)\n    local file_extension_lower = string.sub(file_extension_lower, 1, string.find(file_extension_lower,\
    \ \".\") - 1)\n    local file_extension_lower = string.sub(file_extension_lower,\
    \ string.find(file_extension_lower, \".\") + 1)\n    local file_extension_lower\
    \ = string.sub(file_extension_lower, 1, string.find(file_extension_lower, \".\"\
    ) - 1)\n    local file_extension_lower = string.sub(file_extension_lower, string.find(file_extension_lower,\
    \ \".\") + 1)\n    local file_extension_lower = string.sub(file_extension_lower,\
    \ 1, string.find(file_extension_lower, \".\") - 1)\n    local file_extension_lower\
    \ = string.sub(file_extension_lower, string.find(file_extension_lower, \".\")\
    \ + 1)\n    local file_extension_lower = string.sub(file_extension_lower, 1, string.find(file_extension_lower,\
    \ \".\") - 1)\n    local file_extension_lower = string.sub(file_extension_lower,\
    \ string.find(file_extension_lower, \".\") + 1)\n    local file_extension_lower\
    \ = string.sub(file_extension_lower, 1, string.find(file_extension_lower, \".\"\
    ) - 1)\n    local file_extension_lower = string.sub(file_extension_lower, string.find(file_extension_lower,\
    \ \".\") + 1)\n    local file_extension_lower = string.sub(file_extension_lower,\
    \ 1, string.find(file_extension_lower, \".\") - 1)\n    local file_extension_lower\
    \ = ", "\t-- Check that the file name contains exactly one dot '.'\n\tif file_name\
    \ ~= nil then\n\t\tif string.find(file_name, \".\") ~= nil then\n\t\t\t-- Check\
    \ that the substring before the dot is not empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t-- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n\t\t\t\tif string.find(file_name, \"\
    .\", 1, true) ~= nil then\n\t\t\t\t\t-- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t\t-- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\tif string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n\t\t\t\t\t\t\t-- Return true\n\t\t\t\t\t\t\treturn\
    \ true\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t-- Return false\n\t\t\t\t\t\t\treturn\
    \ false\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\t-- Return false\n\t\t\t\t\
    \t\treturn false\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t-- Return false\n\t\t\
    \t\t\treturn false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t-- Return false\n\t\t\t\t\
    return false\n\t\t\tend\n\t\telse\n\t\t\t-- Return false\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\t-- Return false\n\t\treturn false\n\tend\nend", "    local\
    \ function is_valid_filename(filename)\n        -- Check that the file name contains\
    \ exactly one dot '.'\n        if string.find(file_name, \".\") ~= nil then\n\
    \            -- Check that the substring before the dot is not empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n            if\
    \ string.find(file_name, string.sub(file_name,1,1)) ~= nil then\n            \
    \    -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n                if string.find(file_name, \".\") ~= nil then\n     \
    \               if string.find(file_name, \".\") ~= nil then\n               \
    \         if string.find(file_name, \".\") ~= nil then\n                     \
    \       if string.find(file_name, \".\") ~= nil then\n                       \
    \         return true\n                            else\n                    \
    \            return false\n                            end\n                 \
    \       else\n                            return false\n                     \
    \   end\n                    else\n                        return false\n    \
    \                end\n                else\n                    return false\n\
    \                end\n            else\n                return false\n       \
    \     end\n        else\n            return false\n        end\n    end\n    if\
    \ is_valid_filename(file_name) then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    local result = true\n    local file_name = file_name:gsub(\"\
    ^%w+\", \"\")\n    local file_name = file_name:gsub(\"%.\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[a-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[A-Z]\", \"\")\n    local file_name = file_name:gsub(\"^[0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[^.]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Z]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^a-zA-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9a-zA-Z]\", \"\")\n    local file_name = file_name:gsub(\"^[^.]\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[^a-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^A-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[^0-9a-zA-Z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^.]\", \"\")\n    local file_name = file_name:gsub(\"^[^a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^A-Z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9a-zA-Z]\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^.]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^a-zA-Z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9a-zA-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^.]\", \"\")\n    local file_name = file_name:gsub(\"^[^a-z]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[^A-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]\", \"\")\n",
  "   -- Check that the file name contains exactly one dot '.'\n   if file_name ~=\
    \ nil then\n      if string.find(file_name, \".\") ~= nil then\n         -- Check\
    \ that the substring before the dot is not empty\n         if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n            -- Check that the substring before the\
    \ dot starts with a letter from the latin alphabet\n            if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n               -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n               if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                  if string.find(file_name, \".\"\
    , 1, 3) ~= nil then\n                     return true\n                  else\n\
    \                     return false\n                  end\n               else\n\
    \                  return false\n               end\n            else\n      \
    \         return false\n            end\n         else\n            return false\n\
    \         end\n      else\n         return false\n      end\n   else\n      return\
    \ false\n   end\nend", "    local result = false\n    local file_name = file_name:gsub(\"\
    ^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file_name = file_name:gsub(\"^.-\"\
    , \"\")\n    local file_name = file_name:gsub(\"^.-\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^.-\", \"\")\n    local file", "   -- Check that the file\
    \ name contains exactly one dot '.'\n   if file_name ~= nil then\n      -- Get\
    \ the substring before the dot '.'\n      local file_name = string.sub(file_name,\
    \ 1, string.find(file_name, \".\"))\n      -- Check that it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \"^[%a%zA-Z]\") then\n         return true\n      else\n         return false\n\
    \      end\n   else\n      return false\n   end\nend", "   if string.find(file_name,\
    \ \".\") ~= nil then\n      local file_name = string.gsub(file_name, \" \", \"\
    \")\n      local file_name = string.gsub(file_name, \" \", \"\")\n      local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.g", "\t-- Check that the file name contains exactly\
    \ one dot '.'\n\tif file_name ~= nil and file_name ~= '' and file_name:sub(1,\
    \ 1) ~= '.' then\n\t\treturn false\n\tend", "   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil then\n      if string.find(file_name,\
    \ \".\") ~= nil then\n         -- Check that the substring before the dot is not\
    \ empty, and it starts with a letter from \n         -- the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n         if string.find(file_name, \".\") ~= nil then\n      \
    \      if string.find(file_name, \".\", 1, 1) ~= nil then\n               if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                  if string.find(file_name, \".\"\
    , 1, 1) ~= nil then\n                     -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n                     if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                        if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                           if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                              if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                 return 'Yes'\n  \
    \                            else\n                                 return 'No'\n\
    \                              end\n                           else\n        \
    \                      return 'No'\n                           end\n         \
    \               else\n                           return 'No'\n               \
    \         end\n                     else\n                        return 'No'\n\
    \                     end\n                  else\n                     return\
    \ 'No'\n                  end\n               else\n                  return 'No'\n\
    \               end\n            else\n               return 'No'\n          \
    \  end\n         else\n            return 'No'\n         end\n      else\n   \
    \      return 'No'\n      end\n   else\n      return 'No'\n   end\nend", "   \
    \ local function is_valid(str)\n        local num_digits = str:match('^%d+$')\n\
    \        local dot_index = str:find('%.', 1, 1)\n        local dot_string = str:sub(1,\
    \ dot_index)\n        local dot_type = dot_string:match('^[a-z]+$')\n        local\
    \ dot_type = dot_type\n        if num_digits == nil then\n            return 'No'\n\
    \        end\n        if dot_index == nil then\n            return 'No'\n    \
    \    end\n        if dot_index > 1 then\n            return 'No'\n        end\n\
    \        if dot_type == '' then\n            return 'No'\n        end\n      \
    \  if dot_type ~= 'exe' and dot_type ~= 'dll' and dot_type ~= 'txt' then\n   \
    \         return 'No'\n        end\n        return 'Yes'\n    end\n    return\
    \ is_valid(file_name)\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if string.len(file_name) <= 3 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'a' ~= 'z' then\n      return nil\n   end\n   if string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name)) ~= \n      {'txt', 'exe', 'dll'} then\n      return\
    \ nil\n   end\n   return true\nend", "   -- Check that the file name contains\
    \ exactly one dot '.'\n   if string.find(file_name, \".\") ~= nil then\n     \
    \ -- Check that the substring before the dot is not empty\n      if string.sub(file_name,1,1)\
    \ ~= \"\" then\n         -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n         if string.find(file_name, \".\") ~= nil then\n\
    \            -- Check that the substring after the dot starts with a letter from\
    \ the latin alphabet\n            if string.find(file_name, \".\", 1) ~= nil then\n\
    \               if string.find(file_name, \".\", 2) ~= nil then\n            \
    \      if string.find(file_name, \".\", 3) ~= nil then\n                     return\
    \ true\n                  else\n                     return false\n          \
    \        end\n               else\n                  return false\n          \
    \     end\n            else\n               return false\n            end\n  \
    \       else\n            return false\n         end\n      else\n         return\
    \ false\n      end\n   else\n      return false\n   end\nend", "    local function\
    \ is_valid_filename(filename)\n        -- Check that the file name contains exactly\
    \ one dot '.'\n        if string.find(file_name, \".\") ~= nil then\n        \
    \    -- Check that the substring before the dot is not empty\n            if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                -- Check that the substring before\
    \ the dot starts with a letter from the latin alphabet\n                if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                    -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n                    if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n                        return true\n            \
    \        else\n                        return false\n                    end\n\
    \                else\n                    return false\n                end\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_valid_filename(file_name)\
    \ \nend", "   -- Check that the file name contains exactly one dot '.'\n   if\
    \ file_name ~= nil then\n      -- Get the substring before the dot '.'\n     \
    \ local file_name = file_name:sub(1, file_name:find('.')-1)\n      -- Check that\
    \ the substring before the dot is not empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name ~= nil then\n \
    \        if string.find(file_name, '^[a-zA-Z]') ~= nil then\n            -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \          if string.find(file_name, '(txt|exe|dll)') ~= nil then\n          \
    \     return 'Yes'\n            else\n               return 'No'\n           \
    \ end\n         else\n            return 'No'\n         end\n      else\n    \
    \     return 'No'\n      end\n   else\n      return 'No'\n   end\nend", "   --\
    \ Check if file name contains only digits and one dot\n   if string.find(file_name,\
    \ \"%%d\") ~= nil then\n      return false\n   end\n   -- Check if file name contains\
    \ only latin letters and one dot\n   if string.find(file_name, \"%a\") ~= nil\
    \ then\n      return false\n   end\n   -- Check if file name contains only latin\
    \ letters and one dot\n   if string.find(file_name, \"%A\") ~= nil then\n    \
    \  return false\n   end\n   -- Check if file name contains only latin letters\
    \ and one dot\n   if string.find(file_name, \"%z\") ~= nil then\n      return\
    \ false\n   end\n   -- Check if file name contains only latin letters and one\
    \ dot\n   if string.find(file_name, \"%Z\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file name contains only latin letters and one dot\n  \
    \ if string.find(file_name, \"%0\") ~= nil then\n      return false\n   end\n\
    \   -- Check if file name contains only latin letters and one dot\n   if string.find(file_name,\
    \ \"%9\") ~= nil then\n      return false\n   end\n   -- Check if file name contains\
    \ only latin letters and one dot\n   if string.find(file_name, \"%0\") ~= nil\
    \ then\n      return false\n   end\n   -- Check if file name contains only latin\
    \ letters and one dot\n   if string.find(file_name, \"%9\") ~= nil then\n    \
    \  return false\n   end\n   -- Check if file name contains only latin letters\
    \ and one dot\n   if string.find(file_name, \"%0\") ~= nil then\n      return\
    \ false\n   end\n   -- Check if file name contains only latin letters and one\
    \ dot\n   if string.find(file_name, \"%9\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file name contains only latin letters and one dot\n  \
    \ if string.find(file_name, \"%0\") ~= nil then\n      return false\n   end\n\
    \   -- Check if file name contains only latin letters and one dot\n   if string.find(file_name,\
    \ \"%9\") ~= nil then\n      return false\n   end\n   -- Check if file name contains\
    \ only latin letters and one dot\n   if string.find(file_name, \"%0\") ~= nil\
    \ then\n      return false\n   end\n   -- Check if file name contains only latin\
    \ letters and one dot\n   if string.find(file_name, \"%9\") ~= nil then\n    \
    \  return false\n   end\n   -- Check if file name ", "   if string.find(file_name,\
    \ \".\") ~= nil then\n      local file_ext = string.sub(file_name, string.find(file_name,\
    \ \".\") + 1)\n      if file_ext ~= \"\" then\n         if string.find(file_ext,\
    \ \".\") ~= nil then\n            local file_ext = string.sub(file_ext, string.find(file_ext,\
    \ \".\") + 1)\n            if file_ext ~= \"\" then\n               if string.find(file_ext,\
    \ \".\") ~= nil then\n                  local file_ext = string.sub(file_ext,\
    \ string.find(file_ext, \".\") + 1)\n                  if file_ext ~= \"\" then\n\
    \                     if string.find(file_ext, \".\") ~= nil then\n          \
    \              local file_ext = string.sub(file_ext, string.find(file_ext, \"\
    .\") + 1)\n                        if file_ext ~= \"\" then\n                \
    \           if string.find(file_ext, \".\") ~= nil then\n                    \
    \          local file_ext = string.sub(file_ext, string.find(file_ext, \".\")\
    \ + 1)\n                              return \"No\"\n                        \
    \   else\n                              if string.find(file_ext, \".\") ~= nil\
    \ then\n                                 local file_ext = string.sub(file_ext,\
    \ string.find(file_ext, \".\") + 1)\n                                 if file_ext\
    \ ~= \"\" then\n                                    if string.find(file_ext, \"\
    .\") ~= nil then\n                                       local file_ext = string.sub(file_ext,\
    \ string.find(file_ext, \".\") + 1)\n                                       if\
    \ file_ext ~= \"\" then\n                                          \"No\"\n  \
    \                                     else\n                                 \
    \         \"No\"\n                                       end\n               \
    \                     else\n                                       if string.find(file_ext,\
    \ \".\") ~= nil then\n                                          local file_ext\
    \ = string.sub(file_ext, string.find(file_ext, \".\") + 1)\n                 \
    \                         local file_ext = string.sub(file_ext, string.find(file_ext,\
    \ \".\") + 1)\n                                          local file_ext = string.sub(file_ext,\
    \ string.find(file_ext, \".\") + 1)\n                                        \
    \  local file_ext = string.sub(file_ext, string.find(file_ext, \".\") + 1)\n \
    \                                         local file_ext = string.sub(file_ext,\
    \ string.find(file_ext, \".\") + 1)\n                                        \
    \  local file_ext = string.sub(file_ext, string.find(file_ext, \".\") + 1)\n \
    \                                         local file_ext = string.sub(file_ext,\
    \ string.find(file_ext, \".\") + 1)\n                                        \
    \  local file_ext = string.sub(file_ext, string.find(file_ext, \".\") + 1)\n \
    \                                         local file_ext = string.sub(file_ext,\
    \ string.find(file_ext, \".\") + 1)\n                                        \
    \  local file_ext = string.sub(file_ext, string.find(file_ext, \".\") + 1)\n \
    \                                         local file_ext = string.sub(file_ext,\
    \ string.find(file_", "   -- Your code here\nend", "   -- Your code here\nend",
  "    local valid = false\n    local dot_index = string.find(file_name, \".\")\n\
    \    if dot_index == nil then\n        return valid\n    end\n    local first_letter\
    \ = string.sub(file_name,1,1)\n    local last_letter = string.sub(file_name,dot_index+1,1)\n\
    \    if first_letter ~= 'a' and first_letter ~= 'A' then\n        return valid\n\
    \    end\n    if last_letter ~= 'z' and last_letter ~= 'Z' then\n        return\
    \ valid\n    end\n    if string.len(file_name) ~= 2 then\n        return valid\n\
    \    end\n    if string.find(file_name, \".\") ~= nil then\n        return valid\n\
    \    end\n    if string.find(file_name, \".\") ~= 1 then\n        return valid\n\
    \    end\n    if string.find(file_name, \".\") ~= dot_index then\n        return\
    \ valid\n    end\n    if string.find(file_name, \".\") ~= dot_index+1 then\n \
    \       return valid\n    end\n    if string.find(file_name, \".\") ~= dot_index+2\
    \ then\n        return valid\n    end\n    if string.find(file_name, \".\") ~=\
    \ dot_index+3 then\n        return valid\n    end\n    return valid\nend", " \
    \  if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 2) ~= '-' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 3) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 4) == '-' then\n      return nil\n   end\n   if file_name:sub(1, 5) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 6) ~= '-' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 7) ~= '-' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 8) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 9) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1, 10) ~= '-'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 11) ~= '-' then\n   \
    \   return nil\n   end\n   if file_name:sub(1, 12) ~= '-' then\n      return nil\n\
    \   end\n   if file_name:sub(1, 13) ~= '-' then\n      return nil\n   end\n  \
    \ if file_name:sub(1, 14) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 15) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1, 16) ~= '-'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 17) ~= '-' then\n   \
    \   return nil\n   end\n   if file_name:sub(1, 18) ~= '-' then\n      return nil\n\
    \   end\n   if file_name:sub(1, 19) ~= '-' then\n      return nil\n   end\n  \
    \ if file_name:sub(1, 20) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 21) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1, 22) ~= '-'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 23) ~= '-' then\n   \
    \   return nil\n   end\n   if file_name:sub(1, 24) ~= '-' then\n      return nil\n\
    \   end\n   if file_name:sub(1, 25) ~= '-' then", "   -- Check that the file name\
    \ contains exactly one dot '.'\n   if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot is not empty, and it starts\
    \ with a letter \n      -- from the latin alphapet ('a'-'z' and 'A'-'Z')\n   \
    \   if string.find(file_name, \".\") ~= nil then\n         if string.sub(file_name,1,1)\
    \ ~= string.char(string.byte(\"a\")) then\n            if string.sub(file_name,1,1)\
    \ ~= string.char(string.byte(\"A\")) then\n               return 'No'\n      \
    \      end\n         end\n      end\n   end\n   -- Check that the file's name\
    \ contains exactly three digits ('0'-'9')\n   if string.find(file_name, \".\"\
    ) ~= nil then\n      -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n      if string.find(file_name, \".\") ~= nil then\n\
    \         if string.find(file_name, \".\") ~= nil then\n            if string.find(file_name,\
    \ \".\") ~= nil then\n               if string.find(file_name, \".\") ~= nil then\n\
    \                  if string.find(file_name, \".\") ~= nil then\n            \
    \         if string.find(file_name, \".\") ~= nil then\n                     \
    \   if string.find(file_name, \".\") ~= nil then\n                           if\
    \ string.find(file_name, \".\") ~= nil then\n                              if\
    \ string.find(file_name, \".\") ~= nil then\n                                \
    \ if string.find(file_name, \".\") ~= nil then\n                             \
    \       if string.find(file_name, \".\") ~= nil then\n                       \
    \                 if string.find(file_name, \".\") ~= nil then\n             \
    \                              if string.find(file_name, \".\") ~= nil then\n\
    \                                              if string.find(file_name, \".\"\
    ) ~= nil then\n                                                 if string.find(file_name,\
    \ \".\") ~= nil then\n                                                     if\
    \ string.find(file_name, \".\") ~= nil then\n                                \
    \                         if string.find(file_name, \".\") ~= nil then\n     \
    \                                                        if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \          if string.find(file_name, \".\") ~= nil then\n                    \
    \                                                if string.find(file_name, \"\
    .\") ~= nil then\n                                                           \
    \            if string.find(file_name, \".\") ~= nil then\n                  \
    \                                                        if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \                      if string.find(file_name, \".\") ~= nil then\n        \
    \                                                                        if string.find(file_name,\
    \ \".\") ~", "    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\") -- Find the position of the dot '.'\n    local file_name = file_name:sub(1,\
    \ dot_index) -- Get the substring before the dot\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1) -- Get the substring after the dot\n\
    \    local file_name = file_name:match(\"^[a-z][a-z][a-z]$\")\n    return file_name\
    \ ~= nil and file_name ~= \"\"\nend", "   if string.find(file_name, \".\") ~=\
    \ nil then\n      if string.find(file_name, \".\") ~= 1 then\n         return\
    \ false\n      end\n   end\n   if string.find(file_name, \".\") ~= 1 then\n  \
    \    return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n    \
    \  return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n     \
    \ return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return false\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return false\n \
    \  end\n   if string.find(file_name, \".\") ~= 1 then\n      return false\n  \
    \ end\n   if string.find(file_name, \".\") ~= 1 then\n      return false\n   end\n\
    \   if string.find(file_name, \".\") ~= 1 then\n      return false\n   end\n \
    \  if string.find(file_name, \".\") ~= 1 then\n      return false\n   end\n  \
    \ if string.find(file_name, \".\") ~= 1 then\n      return false\n   end\n   if\
    \ string.find(file_name, \".\") ~= 1 then\n      return false\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return false\n   end\n   if string.find(file_name, \"\
    .\") ~= 1 then\n      return false\n   end\n   if string.find(file_name, \".\"\
    ) ~= 1 then\n      return false\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return false\n   end\n   if string.find(file_name, \".\") ~= 1\
    \ then\n      return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n \
    \     return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n  \
    \    return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n    \
    \  return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n     \
    \ return false\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ false\n   end\n   ", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil then\n      if string.find(file_name, \".\") ~=\
    \ nil then\n         -- Check that the substring before the dot is not empty,\
    \ and it starts with a letter \n         -- from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n         if string.find(file_name, \".\") ~= nil then\n          \
    \  if string.find(file_name, \".\", 1, 1) ~= nil then\n               if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                  if string.find(file_name, \".\"\
    , 1, 1) ~= nil then\n                     -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n                     if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                         if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                             if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                return 'Yes'\n   \
    \                          else\n                                return 'No'\n\
    \                             end\n                         else\n           \
    \                 return 'No'\n                         end\n                \
    \     else\n                        return 'No'\n                     end\n  \
    \                else\n                     return 'No'\n                  end\n\
    \               else\n                  return 'No'\n               end\n    \
    \        else\n               return 'No'\n            end\n         else\n  \
    \          return 'No'\n         end\n      else\n         return 'No'\n     \
    \ end\n   else\n      return 'No'\n   end\nend", "   -- Check that the file name\
    \ contains exactly one dot '.'\n   if file_name ~= nil then\n      if string.find(file_name,\
    \ \".\") ~= nil then\n         -- Check that the substring before the dot is not\
    \ empty, and it starts with a letter \n         -- from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n         if string.find(file_name, \".\") ~= nil then\n      \
    \      if string.find(file_name, \".\", 1, 1) ~= nil then\n               if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                  if string.find(file_name, \".\"\
    , 1, 1) ~= nil then\n                     -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n                     if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                         if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                             if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                return true\n    \
    \                       else\n                              return false\n   \
    \                        end\n                        else\n                 \
    \          return false\n                        end\n                     else\n\
    \                        return false\n                     end\n            \
    \      else\n                     return false\n                  end\n      \
    \         else\n                  return false\n               end\n         \
    \   else\n               return false\n            end\n         else\n      \
    \      return false\n         end\n      else\n         return false\n      end\n\
    \   else\n      return false\n   end\nend", "   if string.find(file_name, \"..\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \".\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"^[%z\\1-\\127\\194-\\\
    244][%w\\1-\\127\\194-\\244]*$\") then\n      return \"Yes\"\n   end\n   return\
    \ \"No\"\nend", "    local function is_valid(str)\n        local num_digits =\
    \ str:match(\"^%d+$\")\n        if num_digits ~= nil then\n            -- The\
    \ file's name contains exactly one dot '.'\n            if str:match(\".\") ~=\
    \ nil then\n                -- The substring before the dot should not be empty,\
    \ and it starts with a letter \n                -- from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n                if str:match(\"^[a-zA-Z]\") ~= nil then\n    \
    \                -- The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n                    local dot_index = str:find(\".\")\n     \
    \               if dot_index == nil then\n                        return false\n\
    \                    else\n                        local dot_string = str:sub(1,\
    \ dot_index)\n                        if dot_string ~= nil then\n            \
    \                local dot_string_length = str:len(dot_string)\n             \
    \               if dot_string_length == 0 then\n                             \
    \   return false\n                            else\n                         \
    \       local dot_string_length = dot_string_length - 1\n                    \
    \            local dot_string_char = str:sub(dot_string_length)\n            \
    \                    if dot_string_char ~= nil then\n                        \
    \            if dot_string_char == 'txt' or\n                                \
    \        dot_string_char == 'exe' or\n                                       \
    \ dot_string_char == 'dll' then\n                                        return\
    \ true\n                                    else\n                           \
    \             return false\n                                    end\n        \
    \                        else\n                                    return false\n\
    \                                end\n                            end\n      \
    \                  else\n                            return false\n          \
    \              end\n                    end\n                else\n          \
    \          return false\n                end\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_valid(file_name)\nend", "   -- Check that the\
    \ file name contains exactly one dot '.'\n   if string.find(file_name, \".\")\
    \ ~= nil then\n      -- Check that the substring before the dot is not empty\n\
    \      if string.sub(file_name,1,1) ~= \"\" then\n         -- Check that the substring\
    \ before the dot starts with a letter from the latin alphabet\n         if string.sub(file_name,1,1)\
    \ ~= string.char(string.byte(\"a\") .. string.byte(\"z\") .. string.byte(\"A\"\
    ) .. string.byte(\"Z\")) then\n            -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name,\
    \ \"exe\") ~= nil then\n               return true\n            elseif string.find(file_name,\
    \ \"dll\") ~= nil then\n               return true\n            elseif string.find(file_name,\
    \ \"txt\") ~= nil then\n               return true\n            else\n       \
    \        return false\n            end\n         else\n            return false\n\
    \         end\n      else\n         return false\n      end\n   else\n      return\
    \ false\n   end\nend", "   if string.find(file_name, \"^[0-9]\") then\n      return\
    \ \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9]\") then\n      return\
    \ \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9]\") then\n      return\
    \ \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9]\") then\n \
    \     return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    ) then\n      return \"No\"\n   elseif string.find(file_name, \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9",
  "   -- Your code here\nend", "\t-- Check that the file name contains exactly one\
    \ dot '.'\n\tif file_name ~= nil then\n\t\t-- Check that the file's name contains\
    \ exactly one dot '.'\n\t\tif file_name ~= '' then\n\t\t\t-- Check that the file's\
    \ name contains exactly one dot '.'\n\t\t\tif file_name ~= '.' then\n\t\t\t\t\
    -- Check that the file's name contains exactly one dot '.'\n\t\t\t\tif file_name\
    \ ~= '..' then\n\t\t\t\t\t-- Check that the file's name contains exactly one dot\
    \ '.'\n\t\t\t\t\tif file_name ~= '0' then\n\t\t\t\t\t\t-- Check that the file's\
    \ name contains exactly one dot '.'\n\t\t\t\t\t\tif file_name ~= '1' then\n\t\t\
    \t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\t\t\
    \t\t\tif file_name ~= '2' then\n\t\t\t\t\t\t\t\t-- Check that the file's name\
    \ contains exactly one dot '.'\n\t\t\t\t\t\t\t\tif file_name ~= '3' then\n\t\t\
    \t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\
    \t\t\t\t\t\t\tif file_name ~= '4' then\n\t\t\t\t\t\t\t\t\t\t-- Check that the\
    \ file's name contains exactly one dot '.'\n\t\t\t\t\t\t\t\t\t\tif file_name ~=\
    \ '5' then\n\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly\
    \ one dot '.'\n\t\t\t\t\t\t\t\t\t\t\tif file_name ~= '6' then\n\t\t\t\t\t\t\t\t\
    \t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\t\t\t\
    \t\t\t\t\t\t\tif file_name ~= '7' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that\
    \ the file's name contains exactly one dot '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name\
    \ ~= '8' then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains\
    \ exactly one dot '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= '9' then\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly one\
    \ dot '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= 'a' then\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= 'b' then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= 'c' then\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= 'd' then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot '.'\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= 'e' then\n\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly one dot\
    \ '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= 'f' then\n\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the file's name contains exactly\
    \ one dot '.'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif file_name ~= 'g' ",
  "\t-- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ and file_name ~= '' then\n\t\tif string.find(file_name, '.') ~= nil then\n\t\
    \t\t-- Check that the substring before the dot is not empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif string.find(file_name,\
    \ '.') ~= nil then\n\t\t\t\tif string.find(file_name, '.', 1, true) ~= nil then\n\
    \t\t\t\t\t-- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n\t\t\t\t\tif string.find(file_name, '.', 1, true) ~= nil then\n\t\t\t\
    \t\t\tif string.find(file_name, '.', 1, true) ~= nil then\n\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\tif string.find(file_name, '.', 1,\
    \ true) ~= nil then\n\t\t\t\t\t\t\t\t\tif string.find(file_name, '.', 1, true)\
    \ ~= nil then\n\t\t\t\t\t\t\t\t\t\tif string.find(file_name, '.', 1, true) ~=\
    \ nil then\n\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name, '.', 1, true) ~= nil\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name, '.', 1, true) ~= nil\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- Check that the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn 'Yes'\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\treturn 'No'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif string.find(file_name,\
    \ '.', 1, true) ~= nil then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn 'No'\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\treturn 'No'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\
    \t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\
    \t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name < 3 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\' or file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n  \
    \ if file_name:sub(1, 2) == '..' then\n      return nil\n   end\n   if #file_name\
    \ > 3 then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n      return nil\n   end\n   if #file_name > 3 then\n     \
    \ return nil\n   end\n   if file_name:sub(1, 2) ~= {'txt', 'exe', 'dll'} then\n\
    \      return nil\n   end\n   return true\nend", "    local result = false\n \
    \   local file_name = file_name:gsub('.', '')\n    local file_name = file_name:gsub('%w+',\
    \ '')\n    local file_name = file_name:gsub('^%w+', '')\n    local file_name =\
    \ file_name:gsub('%w+$', '')\n    local file_name = file_name:gsub('%w+%.', '')\n\
    \    local file_name = file_name:gsub('%w+%.%w+', '')\n    local file_name = file_name:gsub('%w+%.%w+$',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%w+%.', '')\n    local file_name\
    \ = file_name:gsub('%w+%.%w+%.%w+', '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+$',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+%.', '')\n    local\
    \ file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+', '')\n    local file_name =\
    \ file_name:gsub('%w+%.%w+%.%w+%.%w+$', '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+', '')\n \
    \   local file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+$', '')\n    local\
    \ file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+%.', '')\n    local file_name\
    \ = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+%.%w+', '')\n    local file_name =\
    \ file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+%.%w+$', '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+',\
    \ '')\n    local file_name = file_name:gsub('%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+',\
    \ '')\n", "   -- Check that the file name contains exactly one dot '.'\n   if\
    \ string.find(file_name, \".\") ~= nil then\n      -- Check that the file's name\
    \ does not contain more than three digits ('0'-'9')\n      if string.find(file_name,\
    \ \".\") ~= nil then\n         -- Check that the file's name does not contain\
    \ more than three digits ('0'-'9')\n         if string.find(file_name, \".\")\
    \ ~= nil then\n            -- Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n            if string.find(file_name, \".\") ~=\
    \ nil then\n               -- Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n               if string.find(file_name, \".\"\
    ) ~= nil then\n                  -- Check that the file's name does not contain\
    \ more than three digits ('0'-'9')\n                  if string.find(file_name,\
    \ \".\") ~= nil then\n                     -- Check that the file's name does\
    \ not contain more than three digits ('0'-'9')\n                     return \"\
    No\"\n                  else\n                     return \"Yes\"\n          \
    \        end\n               else\n                  return \"Yes\"\n        \
    \       end\n            else\n               return \"Yes\"\n            end\n\
    \         else\n            return \"Yes\"\n         end\n      else\n       \
    \  return \"Yes\"\n      end\n   else\n      return \"Yes\"\n   end\nend", " \
    \   local function is_valid_filename(str)\n        -- Check that the file name\
    \ contains exactly one dot '.'\n        if str:sub(1, 1) ~= '.' then\n       \
    \     return 'No'\n        end", "   -- Your code here\nend", "\t-- Check that\
    \ the file name contains exactly one dot '.'\n\tif file_name ~= nil and file_name\
    \ ~= '' and file_name:sub(1, 1) ~= '.' then\n\t\treturn 'No'\n\tend", "   -- Check\
    \ that the file name contains exactly one dot '.'\n   if file_name ~= nil then\n\
    \      -- Get the substring before the dot '.'\n      local file_name = string.sub(file_name,\
    \ 1, string.find(file_name, \".\"))\n      -- Check that the substring before\
    \ the dot is not empty, and it starts with a letter \n      -- from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n      if file_name ~= nil then\n         if\
    \ string.len(file_name) > 0 then\n            if string.sub(file_name,1,1) ~=\
    \ 'a' then\n               if string.sub(file_name,1,1) ~= 'A' then\n        \
    \          return 'No'\n               end\n            end\n         end\n  \
    \    end\n   end\n   return 'Yes'\nend", "    local file_extension = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1)\n    local file_extension_length = string.len(file_extension)\n\
    \    local file_extension_check = file_extension:sub(1, file_extension_length-1)\n\
    \    local file_extension_check = string.lower(file_extension_check)\n    local\
    \ file_extension_check = string.match(file_extension_check, \"^[a-z][a-z][a-z]$\"\
    )\n    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_check\n\
    \    local file_extension_check = file_extension_check and file_extension_", "\t\
    -- Check that the file name contains exactly one dot '.'\n\tif file_name ~= nil\
    \ and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\treturn\
    \ 'No'\n\t\tend\n\tend\n\t-- Check that the file name starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n\tif file_name ~= nil and file_name\
    \ ~= '' then\n\t\tif file_name:sub(1, 1) ~= 'a' then\n\t\t\treturn 'No'\n\t\t\
    end\n\t\tif file_name:sub(1, 1) ~= 'A' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\
    \t-- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\tif file_name\
    \ ~= nil and file_name ~= '' then\n\t\tif file_name:sub(1, 1) ~= '.' then\n\t\t\
    \tif file_name:sub(1, 2) ~= '' then\n\t\t\t\tif file_name:sub(1, 2) ~= 'a' then\n\
    \t\t\t\t\tif file_name:sub(1, 2) ~= 'A' then\n\t\t\t\t\t\treturn 'No'\n\t\t\t\t\
    \tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t-- Check that the substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n\tif file_name ~= nil\
    \ and file_name ~= '' then\n\t\tif file_name:sub(2, 3) ~= 'txt' then\n\t\t\tif\
    \ file_name:sub(2, 3) ~= 'exe' then\n\t\t\t\tif file_name:sub(2, 3) ~= 'dll' then\n\
    \t\t\t\t\treturn 'No'\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn 'Yes'\n\
    end", "\t-- Check that the file name contains exactly one dot '.'\n\tif file_name\
    \ ~= nil and file_name ~= '' then\n\t\t-- Check that the file's name contains\
    \ exactly one dot '.'\n\t\tif file_name ~= '.' then\n\t\t\t-- Check that the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif file_name ~= '' then\n\t\t\t\t-- Check\
    \ that the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \t\t\t\tif file_name ~= 'exe' and file_name ~= 'dll' and file_name ~= 'txt' then\n\
    \t\t\t\t\treturn 'No'\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn 'Yes'\n\
    end", "   -- Your code here\nend", "    local function is_valid(str)\n       \
    \ local num_digits = str:match(\"^%d+$\")\n        local dot_index = str:match(\"\
    %.\")\n        local first_letter = str:match(\"^[a-z]$\")\n        local last_letter\
    \ = str:match(\"[a-z]$\")\n        return (num_digits == 1 and dot_index == 0\
    \ and first_letter == 0 and last_letter == 0)\n    end\n    return is_valid(file_name)\n\
    end", "   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n\
    \         return 'No'\n      end\n   end\n   -- Check that the file name starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1) ~= string.upper(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n         return 'No'\n      end\n   end\n   -- Check that the\
    \ file name contains exactly one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n\
    \      end\n   end\n   -- Check that the file name contains exactly one dot '.'\n\
    \   if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1)\
    \ ~= '.' then\n         return 'No'\n      end\n   end\n   -- Check that the file\
    \ name contains exactly one dot '.'\n   if file_name ~= nil and file_name ~= ''\
    \ then\n      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n     \
    \ end\n   end\n   -- Check that the file name contains exactly one dot '.'\n \
    \  if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1)\
    \ ~= '.' then\n         return 'No'\n      end\n   end\n   -- Check that the file\
    \ name contains exactly one dot '.'\n   if file_name ~= nil and file_name ~= ''\
    \ then\n      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n     \
    \ end\n   end\n   -- Check that the file name contains exactly one dot '.'\n \
    \  if file_name ~= nil and file_name ~= '' then\n      if file_name:sub(1, 1)\
    \ ~= '.' then\n         return 'No'\n      end\n   end\n   -- Check that the file\
    \ name contains exactly one dot '.'\n   if file_name ~= nil and file_name ~= ''\
    \ then\n      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n     \
    \ end\n   end\n   -- Check that the file name contains exactly one dot '.'\n \
    \  if file_name ~= nil and file_name ~= '' then\n      if file_name:sub", "  \
    \ -- Check that the file name contains only three digits and one dot.\n   if string.find(file_name,\
    \ \"%.\") ~= nil then\n      -- Get the substring before the dot.\n      local\
    \ file_name = string.sub(file_name, 1, string.find(file_name, \"%.\") - 1)\n \
    \     -- Check that it starts with a letter from the latin alphabet.\n      if\
    \ string.find(file_name, \"%a\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%A\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%0\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%9\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%_\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%_%\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%_%_\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%_%_%\") ~= nil then\n         return true\n      elseif\
    \ string.find(file_name, \"%_%_%_\") ~= nil then\n         return true\n     \
    \ elseif string.find(file_name, \"%_%_%_%\") ~= nil then\n         return true\n\
    \      elseif string.find(file_name, \"%_%_%_%_\") ~= nil then\n         return\
    \ true\n      elseif string.find(file_name, \"%_%_%_%_%\") ~= nil then\n     \
    \    return true\n      elseif string.find(file_name, \"%_%_%_%_%_\") ~= nil then\n\
    \         return true\n      elseif string.find(file_name, \"%_%_%_%_%_%\") ~=\
    \ nil then\n         return true\n      elseif string.find(file_name, \"%_%_%_%_%_%\"\
    ) ~= nil then\n         return true\n      elseif string.find(file_name, \"%_%_%_%_%_%_\"\
    ) ~= nil then\n         return true\n      elseif string.find(file_name, \"%_%_%_%_%_%_%\"\
    ) ~= nil then\n         return true\n      elseif string.find(file_name, \"%_%_%_%_%_%_%_\"\
    ) ~= nil then\n         return true\n", "    local function is_valid(str)\n  \
    \      local num_digits = str:match('^%d+$')\n        local has_dot = str:match('^%.+$')\n\
    \        local has_letter = str:match('^[%aA]%.+$')\n        return num_digits\
    \ == 1 and has_dot == false and has_letter == false and str:match('^[^.]+$')\n\
    \    end\n    return is_valid(file_name)\nend", "   -- Check that the file name\
    \ contains exactly one dot '.'\n   if file_name ~= nil and file_name ~= '' then\n\
    \      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n      end\n \
    \  end\n   -- Check that the file name starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n   if file_name ~= nil and file_name ~= '' then\n   \
    \   if file_name:sub(1, 1) ~= 'a' then\n         return 'No'\n      end\n    \
    \  if file_name:sub(1, 1) ~= 'A' then\n         return 'No'\n      end\n   end\n\
    \   -- Check that the file name contains only digits (0-9)\n   if file_name ~=\
    \ nil and file_name ~= '' then\n      if file_name:sub(1, 1) ~= '0' then\n   \
    \      return 'No'\n      end\n      if file_name:sub(1, 1) ~= '9' then\n    \
    \     return 'No'\n      end\n   end\n   return 'Yes'\nend", "   -- Check that\
    \ the file name contains exactly one dot '.'\n   if string.find(file_name, \"\
    .\") ~= nil then\n      -- Check that the substring before the dot is not empty,\
    \ and it starts with a letter from \n      -- the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.sub(file_name,1,1) ~= nil then\n         if string.sub(file_name,1,1)\
    \ ~= 'a' then\n            if string.sub(file_name,1,1) ~= 'A' then\n        \
    \       if string.find(string.sub(file_name,1,1), \"0123456789\") ~= nil then\n\
    \                  return 'Yes'\n               else\n                  return\
    \ 'No'\n               end\n            else\n               return 'No'\n   \
    \         end\n         else\n            return 'No'\n         end\n      else\n\
    \         return 'No'\n      end\n   else\n      return 'No'\n   end\nend", " \
    \  -- Check if file name contains only digits and one dot\n   if string.find(file_name,\
    \ \"%[0-9]\") then\n      return \"No\"\n   end\n   -- Check if file name contains\
    \ only latin alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z]\")\
    \ then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z][a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z][a-Z][a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z][a-Z][a-Z][a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z][a-Z][a-Z][a-Z][a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z][a-Z][a-Z][a-Z][a-Z][a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z][a-Z][a-Z][a-Z][a-Z][a-Z][a-Z]\"\
    ) then\n      return \"No\"\n   end\n   -- Check if file name contains only latin\
    \ alphabet letters and one dot\n   if string.find(file_name, \"%[a-Z][a-Z][a-Z][a-Z][a-Z][a-Z",
  "    local function is_valid_filename(filename)\n        -- Check that the file\
    \ name contains exactly one dot '.'\n        if string.find(file_name, \".\")\
    \ ~= nil then\n            -- Check that the substring before the dot is not empty\n\
    \            if string.sub(file_name,1,1) ~= \"\" then\n                -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \              if string.find(string.sub(file_name,1,string.find(file_name, \"\
    .\")), \".\") ~= nil then\n                    -- Check that the substring after\
    \ the dot starts with a letter from the latin alphabet\n                    if\
    \ string.find(string.sub(file_name,1,string.find(file_name, \".\")), \"^[%a%A]\"\
    ) ~= nil then\n                        -- Check that the substring after the dot\
    \ does not contain any digit\n                        if string.find(string.sub(file_name,1,string.find(file_name,\
    \ \".\")), \"[0-9]\") ~= nil then\n                            return true\n \
    \                       else\n                            return false\n     \
    \                   end\n                    else\n                        return\
    \ false\n                    end\n                else\n                    return\
    \ false\n                end\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_valid_filename(file_name) \nend", "   -- Check that the file name\
    \ contains exactly one dot '.'\n   if file_name ~= nil and file_name ~= '' then\n\
    \      if string.find(file_name, '.') ~= nil then\n         -- Check that the\
    \ substring before the dot is not empty\n         if string.find(file_name, '.')\
    \ ~= 0 then\n            -- Check that the substring before the dot starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n            if string.find(file_name,\
    \ '.', 1, true) ~= nil then\n               if string.find(file_name, '.', 1,\
    \ true) ~= 0 then\n                  -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n                  if string.find(file_name,\
    \ '.', 2, true) ~= nil then\n                     -- Return true\n           \
    \          return true\n                  else\n                     -- Return\
    \ false\n                     return false\n                  end\n          \
    \     else\n                  -- Return false\n                  return false\n\
    \               end\n            else\n               -- Return false\n      \
    \         return false\n            end\n         else\n            -- Return\
    \ false\n            return false\n         end\n      else\n         -- Return\
    \ false\n         return false\n      end\n   else\n      -- Return false\n  \
    \    return false\n   end\nend", "\t-- Check that the file name contains exactly\
    \ one dot '.'\n\tif file_name ~= nil and file_name ~= '' then\n\t\tif string.find(file_name,\
    \ '.') ~= nil then\n\t\t\t-- Check that the substring before the dot is not empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\
    \t\tif string.find(file_name, '.') ~= nil and string.sub(file_name,1,1) ~= nil\
    \ then\n\t\t\t\tif string.find(string.lower(string.sub(file_name,1,1)),string.letters)\
    \ ~= nil then\n\t\t\t\t\t-- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n\t\t\t\t\tif string.find(string.lower(string.sub(file_name,1,1)),{'txt','exe','dll'})\
    \ ~= nil then\n\t\t\t\t\t\treturn 'Yes'\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 'No'\n\
    \t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn 'No'\n\t\t\t\tend\n\t\t\telse\n\t\
    \t\t\treturn 'No'\n\t\t\tend\n\t\telse\n\t\t\treturn 'No'\n\t\tend\n\telse\n\t\
    \treturn 'No'\n\tend\nend", "    local file_name = file_name:lower()\n    local\
    \ dot_index = file_name:find('.')\n    local dot_substr = file_name:sub(1, dot_index)\n\
    \    local dot_substr_length = dot_substr:len()\n    local dot_substr_start_letter\
    \ = dot_substr:sub(1, 1)\n    local dot_substr_end_letter = dot_substr:sub(dot_substr_length-1)\n\
    \    local dot_substr_start_letter_is_letter = \n        dot_substr_start_letter:isalpha()\n\
    \    local dot_substr_end_letter_is_letter = \n        dot_substr_end_letter:isalpha()\n\
    \    local dot_substr_start_letter_is_digit = \n        dot_substr_start_letter:isdigit()\n\
    \    local dot_substr_end_letter_is_digit = \n        dot_substr_end_letter:isdigit()\n\
    \    local dot_substr_start_letter_is_latin_alpha = \n        dot_substr_start_letter:isalpha()\n\
    \    local dot_substr_end_letter_is_latin_alpha = \n        dot_substr_end_letter:isalpha()\n\
    \    local dot_substr_start_letter_is_latin_alpha_or_digit = \n        dot_substr_start_letter:isalpha()\
    \ or dot_substr_start_letter:isdigit()\n    local dot_substr_end_letter_is_latin_alpha_or_digit\
    \ = \n        dot_substr_end_letter:isalpha() or dot_substr_end_letter:isdigit()\n\
    \    local dot_substr_start_letter_is_latin_alpha_or_digit_or_dot = \n       \
    \ dot_substr_start_letter:isalpha() or dot_substr_start_letter:isdigit() or \n\
    \        dot_substr_start_letter:find('.')\n    local dot_substr_end_letter_is_latin_alpha_or_digit_or_dot\
    \ = \n        dot_substr_end_letter:isalpha() or dot_substr_end_letter:isdigit()\
    \ or \n        dot_substr_end_letter:find('.')\n    local dot_substr_start_letter_is_latin_alpha_or_digit_or_dot_or_dash\
    \ = \n        dot_substr_start_letter:isalpha() or dot_substr_start_letter:isdigit()\
    \ or \n        dot_substr_start_letter:find('.')  or dot_substr_start_letter:find('-')\
    \ or \n        dot_substr_start_letter:find('_')\n    local dot_substr_end_letter_is_latin_alpha_or_digit_or_dot_or_dash\
    \ = \n        dot_substr_end_letter:isalpha() or dot_substr_end_letter:isdigit()\
    \ or \n        dot_substr_end_letter:find('.')  or dot_substr_end_letter:find('-')\
    \ or \n        dot_substr_end_letter:find('_", "   if file_name == nil then\n\
    \      return nil\n   end\n   if string.len(file_name) <= 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,1) ~= 'a' ~= 'z' then\n      return nil\n\
    \   end\n   if string.sub(file_name,string.find(file_name, \".\"),string.len(file_name))\
    \ ~= 'txt' ~= 'exe' ~= 'dll' then\n      return nil\n   end\n   return true\n\
    end", "    local function is_valid(str)\n        local num_digits = str:match('^%d+$')\n\
    \        if num_digits ~= nil then\n            -- The file's name contains exactly\
    \ one dot '.'\n            if str:match('.') ~= nil then\n                -- The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n                -- the latin alphapet ('a'-'z' and 'A'-'Z')\n            \
    \    local first_letter = str:sub(1, 1):lower()\n                if first_letter\
    \ ~= nil and\n                    first_letter ~= 'a' and\n                  \
    \  first_letter ~= 'z' and\n                    first_letter ~= 'A' then\n   \
    \                 -- The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n                    local extension = str:sub(2)\n          \
    \          if extension ~= nil and\n                        extension ~= 'txt'\
    \ and\n                        extension ~= 'exe' and\n                      \
    \  extension ~= 'dll' then\n                        return false\n           \
    \         end\n                end\n            end\n        end\n        return\
    \ true\n    end\n    return is_valid(file_name)\nend", "    local function is_valid(str)\n\
    \        local num_digits = str:match('^%d+$')\n        local dot_index = str:find('%.',\
    \ 1, 1)\n        local dot_string = str:sub(1, dot_index)\n        local dot_dot_index\
    \ = str:find('%.', dot_index + 1, 1)\n        local dot_dot_string = str:sub(dot_index\
    \ + 1, dot_dot_index)\n        local dot_dot_dot_index = str:find('%.', dot_dot_dot_index\
    \ + 1, 1)\n        local dot_dot_dot_string = str:sub(dot_dot_dot_index + 1, dot_dot_dot_index)\n\
    \        local dot_dot_dot_dot_index = str:find('%.', dot_dot_dot_dot_dot_index\
    \ + 1, 1)\n        local dot_dot_dot_dot_string = str:sub(dot_dot_dot_dot_dot_index\
    \ + 1, dot_dot_dot_dot_dot_index)\n        local dot_dot_dot_dot_dot_dot_index\
    \ = str:find('%.', dot_dot_dot_dot_dot_dot_dot_index + 1, 1)\n        local dot_dot_dot_dot_dot_dot_string\
    \ = str:sub(dot_dot_dot_dot_dot_dot_dot_dot_index + 1, dot_dot_dot_dot_dot_dot_dot_dot_index)\n\
    \        local dot_dot_dot_dot_dot_dot_dot_index = str:find('%.', dot_dot_dot_dot_dot_dot_dot_dot_dot_index\
    \ + 1, 1)\n        local dot_dot_dot_dot_dot_dot_dot_string = str:sub(dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index\
    \ + 1, dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index)\n        local dot_dot_dot_dot_dot_dot_dot_dot_dot_index\
    \ = str:find('%.', dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index + 1,\
    \ 1)\n        local dot_dot_dot_dot_dot_dot_dot_dot_dot_string = str:sub(dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index\
    \ + 1, dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index)\n      \
    \  local dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index = str:find('%.', dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_",
  "   -- Check that the file name contains exactly one dot '.'\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot is not\
    \ empty\n      if string.sub(file_name,1,1) ~= \"\" then\n         -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n       \
    \  if string.find(file_name, \".\", 2) ~= nil then\n            -- Check that\
    \ the substring after the dot starts with a letter from the latin alphabet\n \
    \           if string.find(file_name, \".\", 1, 1) ~= nil then\n             \
    \  if string.find(file_name, \".\", 1, 2) ~= nil then\n                  if string.find(file_name,\
    \ \".\", 1, 3) ~= nil then\n                     return true\n               \
    \   else\n                     return false\n                  end\n         \
    \      else\n                  return false\n               end\n            else\n\
    \               return false\n            end\n         else\n            return\
    \ false\n         end\n      else\n         return false\n      end\n   else\n\
    \      return false\n   end\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot is not empty\n      if string.sub(file_name,1,1)\
    \ ~= \"\" then\n         -- Check that the substring after the dot is one of these\n\
    \         if string.find(string.lower(string.sub(file_name,2,string.len(file_name))),\n\
    \            \"exe\") ~= nil or\n            string.find(string.lower(string.sub(file_name,2,string.len(file_name))),\n\
    \            \"dll\") ~= nil then\n            -- Return true\n            return\
    \ true\n         else\n            -- Return false\n            return false\n\
    \         end\n      else\n         -- Return false\n         return false\n \
    \     end\n   else\n      -- Return true\n      return true\n   end\nend", " \
    \   local function is_valid_filename(str)\n        local digits = str:gsub('%d+',\
    \ '')\n        local dot_index = str:find('%.', -1)\n        local dot_string\
    \ = str:sub(1, dot_index)\n        local dot_index = dot_index:gsub('%d+', '')\n\
    \        local dot_string = dot_string:gsub('%.', '')\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_string:gsub('%d+',\
    \ '')\n        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_string:gsub('%d+', '')\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_string:gsub('%d+', '')\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_string:gsub('%d+',\
    \ '')\n        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_string:gsub('%d+', '')\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_string:gsub('%d+', '')\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_string:gsub('%d+',\
    \ '')\n        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_string:gsub('%d+', '')\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_string:gsub('%d+', '')\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_string:gsub('%d+',\
    \ '')\n        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_string:gsub('%d+', '')\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_string:gsub('%d+', '')\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_string:gsub('%d+',\
    \ '')\n        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_string:gsub('%d+', '')\n        local dot_index = dot_index:gsub('%d+',\
    \ '')\n        local dot_string = dot_string:gsub('%d+', '')\n        local dot_index\
    \ = dot_index:gsub('%d+', '')\n        local dot_string = dot_string:gsub('%d+',\
    \ '')\n        local dot_index = dot_index:gsub('%d+', '')\n        local dot_string\
    \ = dot_string:gsub('%d+', '')\n        local dot_index = dot_", "   -- Check\
    \ that the file name contains exactly one dot '.'\n   if file_name ~= nil then\n\
    \      -- Get the substring before the dot\n      local file_name = string.sub(file_name,\
    \ 1, string.find(file_name, \".\") - 1)\n      -- Check that it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \"^[%a%z]\") ~= nil then\n         return true\n      else\n         return\
    \ false\n      end\n   else\n      return false\n   end\nend", "    local function\
    \ is_valid(str)\n        local num_digits = str:match('^%d+$')\n        local\
    \ dot_index = str:find('%.', 1, 1)\n        local dot_string = str:sub(1, dot_index)\n\
    \        local dot_type = dot_string:sub(1, 1)\n        local dot_type = dot_type:lower()\n\
    \        local dot_type = dot_type:gsub('%c', '')\n        local dot_type = dot_type:gsub('%w',\
    \ '')\n        local dot_type = dot_type:gsub('%d', '')\n        local dot_type\
    \ = dot_type:gsub('%h', '')\n        local dot_type = dot_type:gsub('%u', '')\n\
    \        local dot_type = dot_type:gsub('%x', '')\n        local dot_type = dot_type:gsub('%o',\
    \ '')\n        local dot_type = dot_type:gsub('%e', '')\n        local dot_type\
    \ = dot_type:gsub('%f', '')\n        local dot_type = dot_type:gsub('%g', '')\n\
    \        local dot_type = dot_type:gsub('%p', '')\n        local dot_type = dot_type:gsub('%q',\
    \ '')\n        local dot_type = dot_type:gsub('%u', '')\n        local dot_type\
    \ = dot_type:gsub('%x', '')\n        local dot_type = dot_type:gsub('%o', '')\n\
    \        local dot_type = dot_type:gsub('%e', '')\n        local dot_type = dot_type:gsub('%f',\
    \ '')\n        local dot_type = dot_type:gsub('%g', '')\n        local dot_type\
    \ = dot_type:gsub('%p', '')\n        local dot_type = dot_type:gsub('%q', '')\n\
    \        local dot_type = dot_type:gsub('%u', '')\n        local dot_type = dot_type:gsub('%x',\
    \ '')\n        local dot_type = dot_type:gsub('%o', '')\n        local dot_type\
    \ = dot_type:gsub('%e', '')\n        local dot_type = dot_type:gsub('%f', '')\n\
    \        local dot_type = dot_type:gsub('%g', '')\n        local dot_type = dot_type:gsub('%p',\
    \ '')\n        local dot_type = dot_type:gsub('%q', '')\n        local dot_type\
    \ = dot_type:gsub('%u', '')\n        local dot_type = dot_type:gsub('%x', '')\n\
    \        local dot_type = dot_type:gsub('%o', '')\n        local dot_type = dot_type:gsub('%e',\
    \ '')\n        local dot_type = dot_type:gsub('%f', '')\n        local dot_type\
    \ = dot_type:gsub('%g', '')\n        local dot_type = dot_type:gsub('%p', '')\n\
    \        local dot_type = dot_", "    local function is_valid(str)\n        local\
    \ num_digits = str:match(\"^%d+$\")\n        if num_digits == nil then\n     \
    \       return false\n        end\n        local dot_index = str:find(\".\", 1,\
    \ true)\n        if dot_index == nil then\n            return false\n        end\n\
    \        local first_letter = str:sub(1, 1)\n        local second_letter = str:sub(2,\
    \ 1)\n        local third_letter = str:sub(3, 1)\n        if first_letter ~= 'a'\
    \ and first_letter ~= 'A' then\n            return false\n        end\n      \
    \  if second_letter ~= 'z' and second_letter ~= 'Z' then\n            return false\n\
    \        end\n        if third_letter ~= 'a' and third_letter ~= 'Z' then\n  \
    \          return false\n        end\n        return true\n    end\n    return\
    \ is_valid(file_name)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
