name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    result = result .. digits[i]\n  end\n  return result\nend", "  if shift\
    \ > math.floor(math.log(x, 10)) then\n    return string.reverse(string.sub(x,\
    \ math.floor(math.log(x, 10)) + 1, math.floor(math.log(x, 10))))\n  else\n   \
    \ return string.sub(x, math.floor(math.log(x, 10)) + 1, math.floor(math.log(x,\
    \ 10)))\n  end\nend", "  local digits = x:reverse()\n  local result = \"\"\n \
    \ for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return result\n\
    end", "  local digits = x:reverse()\n  for i = 1, shift do\n    digits[i] = digits[i]:reverse()\n\
    \  end\n  return table.concat(digits, \"\")\nend", "  local digits = x:reverse()\n\
    \  for i = 1, shift do\n    digits[i] = digits[i]:reverse()\n  end\n  return table.concat(digits,\
    \ \"\")\nend", "  local digits = x:reverse()\n  local result = \"\"\n  for i =\
    \ 1, shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n\
    \    digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = x:reverse()\n  for i = 1, shift do\n    digits = digits:reverse()\n\
    \  end\n  return table.concat(digits)\nend", "  local digits = x:reverse()\n \
    \ local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n  \
    \  digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  local carry = 0\n  for i = 1, #digits do\n    local digit =\
    \ tonumber(digits[i])\n    local digit2 = tonumber(digits[i - 1])\n    local digit3\
    \ = tonumber(digits[i - 2])\n    local digit4 = tonumber(digits[i - 3])\n    local\
    \ digit5 = tonumber(digits[i - 4])\n    local digit6 = tonumber(digits[i - 5])\n\
    \    local digit7 = tonumber(digits[i - 6])\n    local digit8 = tonumber(digits[i\
    \ - 7])\n    local digit9 = tonumber(digits[i - 8])\n    local digit10 = tonumber(digits[i\
    \ - 9])\n    local digit11 = tonumber(digits[i - 10])\n    local digit12 = tonumber(digits[i\
    \ - 11])\n    local digit13 = tonumber(digits[i - 12])\n    local digit14 = tonumber(digits[i\
    \ - 13])\n    local digit15 = tonumber(digits[i - 14])\n    local digit16 = tonumber(digits[i\
    \ - 15])\n    local digit17 = tonumber(digits[i - 16])\n    local digit18 = tonumber(digits[i\
    \ - 17])\n    local digit19 = tonumber(digits[i - 18])\n    local digit20 = tonumber(digits[i\
    \ - 19])\n    local digit21 = tonumber(digits[i - 20])\n    local digit22 = tonumber(digits[i\
    \ - 21])\n    local digit23 = tonumber(digits[i - 22])\n    local digit24 = tonumber(digits[i\
    \ - 23])\n    local digit25 = tonumber(digits[i - 24])\n    local digit26 = tonumber(digits[i\
    \ - 25])\n    local digit27 = tonumber(digits[i - 26])\n    local digit28 = tonumber(digits[i\
    \ - 27])\n    local digit29 = tonumber(digits[i - 28])\n    local digit30 = tonumber(digits[i\
    \ - 29])\n    local digit31 = tonumber(digits[i - 30])\n    local digit32 = tonumber(digits[i\
    \ - 31])\n    local digit33 = tonumber(digits[i - 32])\n    local digit34 = tonumber(digits[i\
    \ - 33])\n    local digit35 = tonumber(digits[i - 34])\n    local digit36 = tonumber(digits[i\
    \ - 35])\n    local digit37 = ton", "  local digits = x:reverse()\n  local result\
    \ = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = x:reverse()\n  local result = \"\"\n  for i\
    \ = 1, shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n\
    \    digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits]\
    \ = digit\n    result = result .. digit\n  end\n  return result\nend", "  local\
    \ digits = tostring(x)\n  local result = \"\"\n  local i = #digits\n  while i\
    \ > shift do\n    local digit = digits[i]\n    digits[i] = digits[i - shift]\n\
    \    digits[i - shift] = digit\n    result = result .. digit\n    i = i - 1\n\
    \  end\n  if i > shift then\n    local digit = digits[i]\n    digits[i] = digit\n\
    \    result = result .. digit\n  end\n  return result\nend", "  local digits =\
    \ tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(shift))\
    \ + 1\n  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_mask\
    \ = shift_digits - shift_digits\n  local shift_digits_mask2 = shift_digits - shift_digits\
    \ + 1\n  local shift_digits_mask3 = shift_digits - shift_digits + 2\n  local shift_digits_mask4\
    \ = shift_digits - shift_digits + 3\n  local shift_digits_mask5 = shift_digits\
    \ - shift_digits + 4\n  local shift_digits_mask6 = shift_digits - shift_digits\
    \ + 5\n  local shift_digits_mask7 = shift_digits - shift_digits + 6\n  local shift_digits_mask8\
    \ = shift_digits - shift_digits + 7\n  local shift_digits_mask9 = shift_digits\
    \ - shift_digits + 8\n  local shift_digits_mask10 = shift_digits - shift_digits\
    \ + 9\n  local shift_digits_mask11 = shift_digits - shift_digits + 10\n  local\
    \ shift_digits_mask12 = shift_digits - shift_digits + 11\n  local shift_digits_mask13\
    \ = shift_digits - shift_digits + 12\n  local shift_digits_mask14 = shift_digits\
    \ - shift_digits + 13\n  local shift_digits_mask15 = shift_digits - shift_digits\
    \ + 14\n  local shift_digits_mask16 = shift_digits - shift_digits + 15\n  local\
    \ shift_digits_mask17 = shift_digits - shift_digits + 16\n  local shift_digits_mask18\
    \ = shift_digits - shift_digits + 17\n  local shift_digits_mask19 = shift_digits\
    \ - shift_digits + 18\n  local shift_digits_mask20 = shift_digits - shift_digits\
    \ + 19\n  local shift_digits_mask21 = shift_digits - shift_digits + 20\n  local\
    \ shift_digits_mask22 = shift_digits - shift_digits + 21\n  local shift_digits_mask23\
    \ = shift_digits - shift_digits + 22\n  local shift_digits_mask24 = shift_digits\
    \ - shift_digits + 23\n  local shift_digits_mask25 = shift_digits - shift_digits\
    \ + 24\n  local shift_digits_mask26 = shift_digits - shift_digits + 25\n  local\
    \ shift_digits_mask27 = shift_digits - shift_digits + 26\n  local shift_digits_mask28\
    \ = shift_digits - shift_digits + 27\n  local shift_digits_mask29 = shift_digits\
    \ - shift_digits + 28\n  local shift_digits_mask30 = shift_digits - shift_digits\
    \ + 29\n  local shift_digits_mask3", "  local digits = x:reverse()\n  local result\
    \ = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i] =\
    \ digits[#digits]\n    digits[#digits] = digit\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = math.floor(math.log10(shift)) + 1\n  local shift_digits_power\
    \ = math.pow(10, shift_digits)\n  local shift_digits_power_2 = math.pow(10, shift_digits\
    \ - 1)\n  local shift_digits_power_3 = math.pow(10, shift_digits - 2)\n  local\
    \ shift_digits_power_4 = math.pow(10, shift_digits - 3)\n  local shift_digits_power_5\
    \ = math.pow(10, shift_digits - 4)\n  local shift_digits_power_6 = math.pow(10,\
    \ shift_digits - 5)\n  local shift_digits_power_7 = math.pow(10, shift_digits\
    \ - 6)\n  local shift_digits_power_8 = math.pow(10, shift_digits - 7)\n  local\
    \ shift_digits_power_9 = math.pow(10, shift_digits - 8)\n  local shift_digits_power_10\
    \ = math.pow(10, shift_digits - 9)\n  local shift_digits_power_11 = math.pow(10,\
    \ shift_digits - 10)\n  local shift_digits_power_12 = math.pow(10, shift_digits\
    \ - 11)\n  local shift_digits_power_13 = math.pow(10, shift_digits - 12)\n  local\
    \ shift_digits_power_14 = math.pow(10, shift_digits - 13)\n  local shift_digits_power_15\
    \ = math.pow(10, shift_digits - 14)\n  local shift_digits_power_16 = math.pow(10,\
    \ shift_digits - 15)\n  local shift_digits_power_17 = math.pow(10, shift_digits\
    \ - 16)\n  local shift_digits_power_18 = math.pow(10, shift_digits - 17)\n  local\
    \ shift_digits_power_19 = math.pow(10, shift_digits - 18)\n  local shift_digits_power_20\
    \ = math.pow(10, shift_digits - 19)\n  local shift_digits_power_21 = math.pow(10,\
    \ shift_digits - 20)\n  local shift_digits_power_22 = math.pow(10, shift_digits\
    \ - 21)\n  local shift_digits_power_23 = math.pow(10, shift_digits - 22)\n  local\
    \ shift_digits_power_24 = math.pow(10, shift_digits - 23)\n  local shift_digits_power_25\
    \ = math.pow(10, shift_digits - 24)\n  local shift_digits_power_26 = math.pow(10,\
    \ shift_digits - 25)\n  local shift_digits_power_27 = math.pow(10, shift_digits\
    \ - 26)\n  local shift_digits_power_28 = math.pow(10, shift_digits - 27)\n  local\
    \ shift_digits_power_29 = math.pow(10, shift_digits - 28)\n  local shift_digits_power_30\
    \ = math.pow(10, shift_digits - 29)\n  local shift_digits_power_31 = math.pow(10,\
    \ shift_", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1,\
    \ shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n   \
    \ digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    local remainder = x - digit\n    x = digit\n    result = result .. string.format(\"\
    %d\", digit)\n    if remainder > 0 then\n      result = result .. string.format(\"\
    %+d\", remainder)\n    end\n  end\n  if digits > 0 then\n    result = result ..\
    \ string.format(\"%d\", x)\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log10(shift)) +\
    \ 1 -- +1 because math.log10 returns 0 instead of -1\n  for i = 1, shift_digits\
    \ do\n    local digit = tonumber(digits:sub(1, -1))\n    digit = digit - math.floor((digit\
    \ - 1) / math.pow(10, shift_digits)) * math.pow(10, shift_digits)\n    digit =\
    \ math.floor(digit / math.pow(10, shift_digits)) * math.pow(10, shift_digits)\n\
    \    digit = digit + math.floor((digit - 1) / math.pow(10, shift_digits)) * math.pow(10,\
    \ shift_digits)\n    digit = math.floor(digit / math.pow(10, shift_digits)) *\
    \ math.pow(10, shift_digits)\n    result = result .. tostring(digit)\n  end\n\
    \  return result\nend", "  local digits = x:reverse()\n  local result = \"\"\n\
    \  for i = 1, shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n\
    \    digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  if shift > math.floor(math.log(x, 10)) then\n    shift = math.floor(math.log(x,\
    \ 10))\n  end\n  local digits = math.modf(x)\n  local result = \"\"\n  local carry\
    \ = 0\n  for i = 1, shift do\n    local digit = math.floor(digits)\n    digits\
    \ = math.modf(digits)\n    carry = digit + carry\n    result = string.format(\"\
    %s%0*d\", result, math.abs(math.ceil(math.log(carry, 10))), carry)\n  end\n  if\
    \ shift < math.floor(math.log(x, 10)) then\n    result = string.format(\"%s%0*d\"\
    , result, math.abs(math.floor(math.log(x, 10))), carry)\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  for i = 1, #digits\
    \ do\n    local digit = tonumber(digits:sub(i, i))\n    if digit == 0 then\n \
    \     result = digits:sub(i-shift, i-shift-1)\n      break\n    end\n    result\
    \ = string.format(\"%0*d\", shift, digit) + result\n  end\n  return result\nend",
  "  if shift > math.floor(math.log(x, 10)) then\n    return string.reverse(tostring(x))\n\
    \  end\n  local digits = math.floor(math.log(x, 10))\n  local digits_shifted =\
    \ math.floor(math.log(x, 10) * shift)\n  local result = \"\"\n  for i = digits_shifted,\
    \ 1, -1 do\n    local digit = x\n    for j = 1, i do\n      digit = digit / 10\n\
    \    end\n    result = result .. tostring(digit)\n  end\n  return result\nend",
  "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n  \
    \  local digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits]\
    \ = digit\n    result = result .. digit\n  end\n  return result\nend", "  local\
    \ digits = tostring(x)\n  local result = \"\"\n  local shifts = math.floor(math.log(shift,\
    \ 10))\n  local shift_digits = math.pow(10, shifts) -- Shift digits\n  local shift_digits_length\
    \ = math.floor(math.log(shift_digits, 10))\n  local shift_digits_remainder = shift_digits\
    \ % 10\n  local shift_digits_remainder_length = math.floor(math.log(shift_digits_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder = shift_digits_remainder % 10\n\
    \  local shift_digits_remainder_remainder_length = math.floor(math.log(shift_digits_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder = shift_digits_remainder_remainder\
    \ % 10\n  local shift_digits_remainder_remainder_remainder_length = math.floor(math.log(shift_digits_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder = shift_digits_remainder_remainder_remainder\
    \ % 10\n  local shift_digits_remainder_remainder_remainder_remainder_length =\
    \ math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder, 10))\n\
    \  local shift_digits_remainder_remainder_remainder_remainder_remainder = shift_digits_remainder_remainder_remainder_remainder\
    \ % 10\n  local shift_digits_remainder_remainder_remainder_remainder_length =\
    \ math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder_remainder_remainder_remainder % 10\n  local\
    \ shift_digits_remainder_remainder_remainder_remainder_length = math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder_remainder_remainder_remainder % 10\n  local\
    \ shift_digits_remainder_remainder_remainder_remainder_length = math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder_remainder_remainder_remainder_remainder %\
    \ 10\n  local shift_digits_remainder_remainder_remainder_remainder_length = math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder_remain", "  if shift > math.floor(x:len())\
    \ then\n    return x:reverse():reverse()\n  else\n    local result = {}\n    for\
    \ i = 1, x:len() do\n      result[i] = x[(i - 1 + shift) % x:len()]\n    end\n\
    \    return result\n  end\nend", "  local digits = x:reverse()\n  local result\
    \ = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ carry = 0\n  for i = 1, #digits do\n    local digit = tonumber(digits[i])\n\
    \    local new_digit = digit + carry\n    carry = new_digit / 10\n    new_digit\
    \ = carry * 10 + new_digit % 10\n    result = result .. tostring(new_digit)\n\
    \  end\n  if shift > #digits then\n    shift = shift - #digits\n  end\n  result\
    \ = result .. tostring(carry)\n  return result, shift\nend", "  if shift > math.floor(x:len())\
    \ then\n    return x:reverse()\n  end\n  local result = x:sub(1, math.floor(x:len())\
    \ - shift)\n  result = result:reverse()\n  return result\nend", "  local digits\
    \ = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    local digit\
    \ = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits] = digit\n\
    \    result = result .. digit\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n    result\
    \ = string.format(\"%s%0*d\", result, math.abs(digit), math.abs(digit % 10))\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = x:gsub(\"(%d+)\", function(digit)\n    return\
    \ tonumber(digit) * math.pow(10, shift)\n  end)\n  return table.concat(digits,\
    \ \"\")\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  local i = math.floor(digits / 2)\n  while i > 0 do\n    local\
    \ digit = math.floor(x * 10 + 0.5)\n    digit = digit - math.floor(digit / 10)\
    \ * 10\n    result = result .. digit\n    i = i - 1\n  end\n  if digits > 0 then\n\
    \    result = result .. math.floor(x * 10 + 0.5)\n  end\n  return result\nend",
  "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n  \
    \  local digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits]\
    \ = digit\n    result = result .. digit\n  end\n  return result\nend", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    result\
    \ = result .. digits[i]\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = x\n  for i = 1, digits do\n    local digit = math.floor((result\
    \ % 10) * math.pow(10, shift + i))\n    result = result / 10\n    result = result\
    \ + digit\n  end\n  if shift > digits then\n    local digit = math.floor((result\
    \ % 10) * math.pow(10, shift + digits - 1))\n    result = result / 10\n    result\
    \ = result + digit\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = x:reverse()\n  local\
    \ result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i]\
    \ = digits[#digits]\n    digits[#digits] = digit\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shifts = tostring(shift)\n  local shift_digits = tostring(shift)\n\
    \  local shift_digits_length = shift_digits:len()\n  for i = 1, shift_digits_length\
    \ do\n    local digit = shift_digits:sub(i, i)\n    local digit_length = digit:len()\n\
    \    local digit_value = tonumber(digit)\n    local digit_shift = shifts:sub(i,\
    \ i)\n    local digit_shift_value = tonumber(shift_digits)\n    if digit_shift_value\
    \ == 0 then\n      result = result .. digit\n    else\n      local digit_shift_length\
    \ = digit_shift_value:len()\n      for j = 1, digit_shift_length do\n        local\
    \ digit_shift_shift_value = tonumber(shift_digits:sub(i + 1, i + 1))\n       \
    \ if digit_shift_shift_value == 0 then\n          result = result .. digit\n \
    \       else\n          local digit_shift_shift_length = digit_shift_shift_value:len()\n\
    \          for k = 1, digit_shift_shift_length do\n            local digit_shift_shift_shift_value\
    \ = tonumber(shift_digits:sub(i + 2, i + 2))\n            if digit_shift_shift_shift_value\
    \ == 0 then\n              result = result .. digit\n            else\n      \
    \        local digit_shift_shift_shift_shift_value = tonumber(shift_digits:sub(i\
    \ + 3, i + 3))\n              if digit_shift_shift_shift_shift_value == 0 then\n\
    \                result = result .. digit\n              else\n              \
    \  local digit_shift_shift_shift_shift_shift_value = tonumber(shift_digits:sub(i\
    \ + 4, i + 4))\n                if digit_shift_shift_shift_shift_shift_value ==\
    \ 0 then\n                  result = result .. digit\n                else\n \
    \                 local digit_shift_shift_shift_shift_shift_shift_value = tonumber(shift_digits:sub(i\
    \ + 5, i + 5))\n                  if digit_shift_shift_shift_shift_shift_shift_value\
    \ == 0 then\n                    result = result .. digit\n                  else\n\
    \                    local digit_shift_shift_shift_shift_shift_shift_shift_value\
    \ = tonumber(shift_digits:sub(i + 6, i + 6))\n                    if digit_shift_shift_shift_shift_shift_shift_shift_value\
    \ == 0 then\n                      result = result .. digit\n                \
    \    else\n                      local digit_shift_shift_shift_shift_shift_shift_shift_shift_value\
    \ = tonumber(shift_digits:sub(i + 7, i + 7))\n                      if digit_shift_shift_shift_shift_shift_shift_shift_shift_value\
    \ == 0 then\n                        result = result .. digit\n              \
    \        else\n                        local digit_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_value\
    \ = tonumber(shift_digits:sub(i + 8, i + 8))\n                        if digit_shift_shift_shift_shift_shift_shift_shift_shift_shift_value\
    \ == 0 then\n                          result = result .. digit\n            \
    \            else\n                          local digit_shift_shift_", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    local\
    \ digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits] = digit\n\
    \    result = result .. digit\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log(math.abs(x), 10) + 1)\n  local result = \"\"\n  for i =\
    \ 1, digits do\n    local digit = math.floor((x % 10) + 0.5)\n    x = x / 10\n\
    \    result = string.format(\"%d%s\", digit, result)\n  end\n  if shift > digits\
    \ then\n    local digits = math.floor(math.log(math.abs(x), 10) + 1)\n    for\
    \ i = 1, digits do\n      local digit = math.floor((x % 10) + 0.5)\n      x =\
    \ x / 10\n      result = string.format(\"%d%s\", digit, result)\n    end\n  end\n\
    \  return result\nend", "  if shift > math.floor(math.log(x, 10)) then\n    return\
    \ string.reverse(x.digits)\n  end\n  local digits = x.digits\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n\
    \    digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ carry = 0\n  local i = 0\n  while i < digits do\n    local digit = math.floor((x\
    \ - math.floor(x) * math.pow(2, shift)) + math.floor(carry))\n    carry = math.floor(digit\
    \ / 10)\n    digit = math.mod(digit, 10)\n    result = string.format(\"%s%0*d\"\
    , result, shift, digit)\n    i = i + 1\n  end\n  if carry > 0 then\n    result\
    \ = string.format(\"%s%0*d\", result, shift, carry)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / math.pow(10,\
    \ i)) % 10)\n    result = string.format(\"%d%s\", digit, result)\n  end\n  if\
    \ digits > 0 then\n    result = string.format(\"%d%s\", math.floor(x / math.pow(10,\
    \ digits)), result)\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  for i = 1, shift do\n    digits = digits:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  local carry = 0\n\
    \  for i = 1, shift do\n    local digit = digits[i]\n    local carry = (digit\
    \ + carry) % 10\n    digit = carry > 0 and digit + 1 or digit\n    carry = carry\
    \ > 0 and carry + 1 or carry\n    digits[i] = digit\n    result = result .. digit\n\
    \  end\n  return result, carry\nend", "  local digits = x:reverse()\n  local result\
    \ = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = x:reverse()\n  for i = 1, shift do\n    digits[i]\
    \ = digits[i]:reverse()\n  end\n  return table.concat(digits, \"\")\nend", " \
    \ local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n \
    \   result = result .. digits[i]\n  end\n  return result\nend", "  local digits\
    \ = x:reverse()\n  for i = 1, shift do\n    digits[i] = digits[i]:reverse()\n\
    \  end\n  return table.concat(digits, \"\")\nend", "  local digits = x:reverse()\n\
    \  for i = 1, shift do\n    digits = digits:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shifts = tostring(shift)\n\
    \  local shift_count = #shifts\n  local shift_digits = tostring(shift_count)\n\
    \  local shift_digits_count = #shift_digits\n  while shift_count > 0 do\n    local\
    \ digit = tonumber(digits)\n    local shift = shift_digits[shift_count]\n    shift_count\
    \ = shift_count - 1\n    digits = string.format(\"%0*d\", shift_digits_count,\
    \ digit)\n    result = string.format(\"%s%s\", result, digits)\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ shift_digits = math.floor(math.log(shift, 10))\n  local shift_digits_power =\
    \ math.pow(10, shift_digits)\n  local shift_digits_mask = shift_digits - 1\n \
    \ local shift_digits_mask2 = shift_digits - 2\n  local shift_digits_mask3 = shift_digits\
    \ - 3\n  local shift_digits_mask4 = shift_digits - 4\n  local shift_digits_mask5\
    \ = shift_digits - 5\n  local shift_digits_mask6 = shift_digits - 6\n  local shift_digits_mask7\
    \ = shift_digits - 7\n  local shift_digits_mask8 = shift_digits - 8\n  local shift_digits_mask9\
    \ = shift_digits - 9\n  local shift_digits_mask10 = shift_digits - 10\n  local\
    \ shift_digits_mask11 = shift_digits - 11\n  local shift_digits_mask12 = shift_digits\
    \ - 12\n  local shift_digits_mask13 = shift_digits - 13\n  local shift_digits_mask14\
    \ = shift_digits - 14\n  local shift_digits_mask15 = shift_digits - 15\n  local\
    \ shift_digits_mask16 = shift_digits - 16\n  local shift_digits_mask17 = shift_digits\
    \ - 17\n  local shift_digits_mask18 = shift_digits - 18\n  local shift_digits_mask19\
    \ = shift_digits - 19\n  local shift_digits_mask20 = shift_digits - 20\n  local\
    \ shift_digits_mask21 = shift_digits - 21\n  local shift_digits_mask22 = shift_digits\
    \ - 22\n  local shift_digits_mask23 = shift_digits - 23\n  local shift_digits_mask24\
    \ = shift_digits - 24\n  local shift_digits_mask25 = shift_digits - 25\n  local\
    \ shift_digits_mask26 = shift_digits - 26\n  local shift_digits_mask27 = shift_digits\
    \ - 27\n  local shift_digits_mask28 = shift_digits - 28\n  local shift_digits_mask29\
    \ = shift_digits - 29\n  local shift_digits_mask30 = shift_digits - 30\n  local\
    \ shift_digits_mask31 = shift_digits - 31\n  local shift_digits_mask32 = shift_digits\
    \ - 32\n  local shift_digits_mask33 = shift_digits - 33\n  local shift_digits_mask34\
    \ = shift_digits - 34\n  local shift_digits_mask35 = shift_digits - 35\n  local\
    \ shift_digits_mask36 = shift_digits - 36\n  local shift_digits_mask37 = shift_digits\
    \ - 37\n  local shift_digits_mask", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local carry = 0\n  for i = 1, digits do\n    local digit\
    \ = math.floor((x / 10^i) * 10^shift)\n    local digit = digit + carry\n    carry\
    \ = digit / 10\n    digit = digit % 10\n    result = result .. digit\n  end\n\
    \  if carry > 0 then\n    result = result .. carry\n  end\n  return result\nend",
  "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n  \
    \  result = result .. digits[i]\n  end\n  return result\nend", "  local digits\
    \ = tostring(x)\n  local result = \"\"\n  local carry = 0\n  local digit\n  for\
    \ i = 1, #digits do\n    digit = tonumber(digits[i])\n    carry = digit + carry\n\
    \    if carry > 9 then\n      carry = carry % 10\n      result = string.format(\"\
    %c%c\", carry, result)\n    else\n      result = string.format(\"%c%c\", carry,\
    \ result)\n    end\n  end\n  if shift > #digits then\n    return string.format(\"\
    %c\", result)\n  else\n    return string.format(\"%c%c\", carry, result)\n  end\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    result = result .. digits[i]\n  end\n  return result\nend", "  local\
    \ digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log(shift,\
    \ 10))\n  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_mask\
    \ = shift_digits - 1\n  local shift_digits_mask2 = shift_digits - 2\n  local shift_digits_mask3\
    \ = shift_digits - 3\n  local shift_digits_mask4 = shift_digits - 4\n  local shift_digits_mask5\
    \ = shift_digits - 5\n  local shift_digits_mask6 = shift_digits - 6\n  local shift_digits_mask7\
    \ = shift_digits - 7\n  local shift_digits_mask8 = shift_digits - 8\n  local shift_digits_mask9\
    \ = shift_digits - 9\n  local shift_digits_mask10 = shift_digits - 10\n  local\
    \ shift_digits_mask11 = shift_digits - 11\n  local shift_digits_mask12 = shift_digits\
    \ - 12\n  local shift_digits_mask13 = shift_digits - 13\n  local shift_digits_mask14\
    \ = shift_digits - 14\n  local shift_digits_mask15 = shift_digits - 15\n  local\
    \ shift_digits_mask16 = shift_digits - 16\n  local shift_digits_mask17 = shift_digits\
    \ - 17\n  local shift_digits_mask18 = shift_digits - 18\n  local shift_digits_mask19\
    \ = shift_digits - 19\n  local shift_digits_mask20 = shift_digits - 20\n  local\
    \ shift_digits_mask21 = shift_digits - 21\n  local shift_digits_mask22 = shift_digits\
    \ - 22\n  local shift_digits_mask23 = shift_digits - 23\n  local shift_digits_mask24\
    \ = shift_digits - 24\n  local shift_digits_mask25 = shift_digits - 25\n  local\
    \ shift_digits_mask26 = shift_digits - 26\n  local shift_digits_mask27 = shift_digits\
    \ - 27\n  local shift_digits_mask28 = shift_digits - 28\n  local shift_digits_mask29\
    \ = shift_digits - 29\n  local shift_digits_mask30 = shift_digits - 30\n  local\
    \ shift_digits_mask31 = shift_digits - 31\n  local shift_digits_mask32 = shift_digits\
    \ - 32\n  local shift_digits_mask33 = shift_digits - 33\n  local shift_digits_mask34\
    \ = shift_digits - 34\n  local shift_digits_mask35 = shift_digits - 35\n  local\
    \ shift_digits_mask36 = shift_digits - 36\n  local shift_digits_mask37 = shift_digits\
    \ - 37\n  local shift_digits_mask", "  local digits = tostring(x)\n  local result\
    \ = \"\"\n  local shift_digits = math.floor(math.log(shift, 10))\n  local shift_digits_count\
    \ = shift_digits + 1\n  while shift_digits_count > 1 do\n    local digits_count\
    \ = math.floor(shift_digits_count / 2)\n    local digits_shift = shift_digits\
    \ - digits_count\n    local digits_shift_digits = math.floor(digits_shift / 10)\n\
    \    local digits_shift_digits_count = digits_shift % 10\n    local digits_shift_digits_index\
    \ = digits_shift_digits + 1\n    local digits_shift_digits_value = digits_shift\
    \ - digits_shift_digits_index * 10\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_value\n    local digits_shift_digits_value = digits_shift_digits\
    \ + digits_shift_digits_", "  local digits = x:reverse()\n  local result = \"\"\
    \n  local carry = 0\n  for i = 1, shift do\n    local digit = digits[i]\n    local\
    \ carry = digit + carry\n    digits[i] = carry % 10\n    carry = carry / 10\n\
    \    result = digit .. result\n  end\n  if carry > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  local digits = x:reverse()\n  local\
    \ result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i]\
    \ = digits[#digits]\n    digits[#digits] = digit\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ shift_digits = math.floor(math.log10(shift)) + 1 -- +1 because math.log10(shift)\
    \ = 0 for shift = 0\n  for i = 1, shift_digits do\n    local digit = digits:sub(1,\
    \ i)\n    local shift = math.pow(10, shift_digits - i - 1)\n    local digit =\
    \ digit * shift\n    result = result .. digit\n  end\n  return result\nend", " \
    \ local digits = x:reverse()\n  local result = \"\"\n  local carry = 0\n  for\
    \ i = 1, shift do\n    local digit = digits[i]\n    carry = digit + carry\n  \
    \  digits[i] = carry\n    result = table.concat(digits, \"\") .. result\n  end\n\
    \  return result\nend", "  local digits = x:reverse()\n  for i = 1, shift do\n\
    \    digits = digits:reverse()\n  end\n  return table.concat(digits)\nend", " \
    \ local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n \
    \   result = result .. digits[i]\n  end\n  return result\nend", "  local digits\
    \ = tostring(x)\n  local result = \"\"\n  local shifts = tostring(shift)\n  local\
    \ digits_length = #digits\n  local shifts_length = #shifts\n  assert(shifts_length\
    \ >= 1)\n  assert(digits_length >= shifts_length)\n  for i = 1, shifts_length\
    \ do\n    local shift = shifts[i]\n    local digit = digits[shift]\n    local\
    \ remainder = shift % digits_length\n    shift = shift - remainder\n    digit\
    \ = digit .. digits[shift]\n    result = digit .. result\n  end\n  return result\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits]\
    \ = digit\n    result = result .. digit\n  end\n  return result\nend", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    result\
    \ = result .. digits[i]\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  for i = 1, shift\
    \ do\n    digits[i] = digits[i]:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    result = result .. digits[i]\n  end\n  return result\nend", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    local\
    \ digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits] = digit\n\
    \    result = result .. digit\n  end\n  return result\nend", "  local digits =\
    \ x:gsub(\"%d+\", function(digit)\n    return string.sub(digit, -1)\n  end)\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[#digits]\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ shift_digits = math.floor(math.log10(shift)) + 1 -- +1 because math.log10 returns\
    \ 0 for shift = 0\n  for i = 1, shift_digits do\n    local digit = tonumber(digits:sub(1,\
    \ -1))\n    digit = math.floor(digit / 10) * 10 + digit % 10\n    digits = digits:sub(1,\
    \ -1)\n    result = result .. tostring(digit)\n  end\n  if shift_digits > 0 then\n\
    \    local digit = tonumber(digits:sub(1, -1))\n    digit = math.floor(digit /\
    \ 10) * 10 + digit % 10\n    digits = digits:sub(1, -1)\n    result = result ..\
    \ tostring(digit)\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  local carry = 0\n  local digit\n  for i = 1, shift do\n\
    \    digit = digits[i]\n    carry = digit + carry\n    digits[i] = carry\n   \
    \ result = digit .. result\n  end\n  if shift < #digits then\n    result = result\
    \ .. digits[#digits]\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = x:reverse()\n  for\
    \ i = 1, shift do\n    digits = digits:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local i = #digits\n\
    \  while i > shift do\n    local digit = digits[i]\n    digits[i] = digits[i -\
    \ 1]\n    digits[i - 1] = digit\n    i = i - 1\n    result = result .. digit\n\
    \  end\n  if i > shift then\n    local digit = digits[i]\n    digits[i] = digits[i\
    \ - 1]\n    digits[i - 1] = digit\n    result = result .. digit\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10)\
    \ % 10\n    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x\
    \ / 10) % 10\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\"\
    , x, result)\n  end\n  return result\nend", "  local digits = x:reverse()\n  for\
    \ i = 1, shift do\n    digits[i] = digits[i]:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = math.floor(math.log(math.abs(x), 10))\n  local result\
    \ = \"\"\n  local carry = 0\n  local digit\n  for digit = 1, digits do\n    local\
    \ digit = math.floor((math.abs(x) - math.floor(x) * math.pow(10, digits)) / math.pow(10,\
    \ digits))\n    carry = math.abs(x) - math.floor(x) * math.pow(10, digits)\n \
    \   x = math.floor(x * math.pow(10, digits)) / math.pow(10, digits)\n    if carry\
    \ > 0 then\n      result = string.format(\"%s%+d\", result, carry)\n    end\n\
    \    if digit > 0 then\n      result = string.format(\"%s%d\", result, digit)\n\
    \    end\n  end\n  if shift > digits then\n    result = string.format(\"%s%d\"\
    , result, math.abs(x))\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  for i = 1, shift do\n    result = result .. digits[#digits\
    \ - shift - i]\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local carry = 0\n  local pos = 1\n  while pos <= #digits\
    \ do\n    local digit = tonumber(digits:sub(pos, pos))\n    carry = digit + carry\n\
    \    pos = pos + 1\n    if carry > 9 then\n      carry = carry - 10\n      result\
    \ = result .. \"0\"\n    end\n    result = result .. tostring(carry)\n  end\n\
    \  if shift > #digits then\n    shift = shift - #digits\n  end\n  result = result\
    \ .. digits:sub(1, shift)\n  return result\nend", "  local digits = x:reverse()\n\
    \  for i = 1, shift do\n    digits = digits:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log(shift, 10))\n  local shift_digits_count = shift_digits\
    \ + 1\n  local shift_digits_mask = 1 << (shift_digits - 1)\n  local shift_digits_mask2\
    \ = 1 << (shift_digits - 2)\n  local shift_digits_mask3 = 1 << (shift_digits -\
    \ 3)\n  local shift_digits_mask4 = 1 << (shift_digits - 4)\n  local shift_digits_mask5\
    \ = 1 << (shift_digits - 5)\n  local shift_digits_mask6 = 1 << (shift_digits -\
    \ 6)\n  local shift_digits_mask7 = 1 << (shift_digits - 7)\n  local shift_digits_mask8\
    \ = 1 << (shift_digits - 8)\n  local shift_digits_mask9 = 1 << (shift_digits -\
    \ 9)\n  local shift_digits_mask10 = 1 << (shift_digits - 10)\n  local shift_digits_mask11\
    \ = 1 << (shift_digits - 11)\n  local shift_digits_mask12 = 1 << (shift_digits\
    \ - 12)\n  local shift_digits_mask13 = 1 << (shift_digits - 13)\n  local shift_digits_mask14\
    \ = 1 << (shift_digits - 14)\n  local shift_digits_mask15 = 1 << (shift_digits\
    \ - 15)\n  local shift_digits_mask16 = 1 << (shift_digits - 16)\n  local shift_digits_mask17\
    \ = 1 << (shift_digits - 17)\n  local shift_digits_mask18 = 1 << (shift_digits\
    \ - 18)\n  local shift_digits_mask19 = 1 << (shift_digits - 19)\n  local shift_digits_mask20\
    \ = 1 << (shift_digits - 20)\n  local shift_digits_mask21 = 1 << (shift_digits\
    \ - 21)\n  local shift_digits_mask22 = 1 << (shift_digits - 22)\n  local shift_digits_mask23\
    \ = 1 << (shift_digits - 23)\n  local shift_digits_mask24 = 1 << (shift_digits\
    \ - 24)\n  local shift_digits_mask25 = 1 << (shift_digits - 25)\n  local shift_digits_mask26\
    \ = 1 << (shift_digits - 26)\n  local shift_digits_mask27 = 1 << (shift_digits\
    \ - 27)\n  local shift_digits_mask28 = 1 << (shift_digits - 28)\n  local shift_digits_mask29\
    \ = 1 << (shift_digits - 29)\n  local shift_digits_mask30 = 1 << (shift_digits\
    \ - 30)\n  local shift_digits_mask31 = 1 << (shift_digits - 31)\n  local shift_digits_mask32\
    \ = 1 << (shift_digits - 32)\n  local shift_digits_mask33 = 1 << (shift_digits\
    \ - 33)\n  local shift_digits_mask", "  local digits = x:reverse()\n  local result\
    \ = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i] =\
    \ digits[#digits]\n    digits[#digits] = digit\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  for i = 1, shift\
    \ do\n    digits[i] = digits[i]:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits]\
    \ = digit\n    result = result .. digit\n  end\n  return result\nend", "  local\
    \ digits = tostring(x)\n  local result = \"\"\n  for i = 1, shift do\n    local\
    \ digit = digits:sub(i, i)\n    digit = digit:reverse()\n    result = digit ..\
    \ result\n  end\n  return result\nend", "  local digits = x:gsub(\"%d+\", function(c)\
    \ return \"%d\" .. tostring((c - tonumber(c)) % 10) end)\n  local result = \"\"\
    \n  for i = 1, shift do\n    result = result .. digits[#digits]\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ pos = 1\n  while pos <= #digits do\n    local digit = digits:sub(1, pos)\n \
    \   local carry = digit:byte(1, true) ~= 0\n    digit = digit:byte(1, true) +\
    \ digit:byte(2, true) + digit:byte(3, true) + digit:byte(4, true) + digit:byte(5,\
    \ true) + digit:byte(6, true) + digit:byte(7, true) + digit:byte(8, true) + digit:byte(9,\
    \ true) + digit:byte(10, true) + digit:byte(11, true) + digit:byte(12, true) +\
    \ digit:byte(13, true) + digit:byte(14, true) + digit:byte(15, true) + digit:byte(16,\
    \ true) + digit:byte(17, true) + digit:byte(18, true) + digit:byte(19, true) +\
    \ digit:byte(20, true) + digit:byte(21, true) + digit:byte(22, true) + digit:byte(23,\
    \ true) + digit:byte(24, true) + digit:byte(25, true) + digit:byte(26, true) +\
    \ digit:byte(27, true) + digit:byte(28, true) + digit:byte(29, true) + digit:byte(30,\
    \ true) + digit:byte(31, true) + digit:byte(32, true) + digit:byte(33, true) +\
    \ digit:byte(34, true) + digit:byte(35, true) + digit:byte(36, true) + digit:byte(37,\
    \ true) + digit:byte(38, true) + digit:byte(39, true) + digit:byte(40, true) +\
    \ digit:byte(41, true) + digit:byte(42, true) + digit:byte(43, true) + digit:byte(44,\
    \ true) + digit:byte(45, true) + digit:byte(46, true) + digit:byte(47, true) +\
    \ digit:byte(48, true) + digit:byte(49, true) + digit:byte(50, true) + digit:byte(51,\
    \ true) + digit:byte(52, true) + digit:byte(53, true) + digit:byte(54, true) +\
    \ digit:byte(55, true) + digit:byte(56, true) + digit:byte(57, true) + digit:byte(58,\
    \ true) + digit:byte(59, true) + digit:byte(60, true) + digit:byte(61, true) +\
    \ digit:byte(62, true) + digit:byte(63, true) + digit:byte(64, true) + digit:byte(65,\
    \ true) + digit:byte", "  local digits = tostring(x)\n  local result = \"\"\n\
    \  local shift_digits = math.floor(math.log10(shift)) + 1 -- +1 because math.log10\
    \ returns 0 instead of -1 for negative numbers\n  local shift_digits_count = shift_digits\
    \ + 1\n  local shift_digits_remainder = shift_digits % 2\n  local shift_digits_mask\
    \ = 1 << (shift_digits - 1)\n  local shift_digits_mask2 = 1 << (shift_digits -\
    \ 2)\n  local shift_digits_mask3 = 1 << (shift_digits - 3)\n  local shift_digits_mask4\
    \ = 1 << (shift_digits - 4)\n  local shift_digits_mask5 = 1 << (shift_digits -\
    \ 5)\n  local shift_digits_mask6 = 1 << (shift_digits - 6)\n  local shift_digits_mask7\
    \ = 1 << (shift_digits - 7)\n  local shift_digits_mask8 = 1 << (shift_digits -\
    \ 8)\n  local shift_digits_mask9 = 1 << (shift_digits - 9)\n  local shift_digits_mask10\
    \ = 1 << (shift_digits - 10)\n  local shift_digits_mask11 = 1 << (shift_digits\
    \ - 11)\n  local shift_digits_mask12 = 1 << (shift_digits - 12)\n  local shift_digits_mask13\
    \ = 1 << (shift_digits - 13)\n  local shift_digits_mask14 = 1 << (shift_digits\
    \ - 14)\n  local shift_digits_mask15 = 1 << (shift_digits - 15)\n  local shift_digits_mask16\
    \ = 1 << (shift_digits - 16)\n  local shift_digits_mask17 = 1 << (shift_digits\
    \ - 17)\n  local shift_digits_mask18 = 1 << (shift_digits - 18)\n  local shift_digits_mask19\
    \ = 1 << (shift_digits - 19)\n  local shift_digits_mask20 = 1 << (shift_digits\
    \ - 20)\n  local shift_digits_mask21 = 1 << (shift_digits - 21)\n  local shift_digits_mask22\
    \ = 1 << (shift_digits - 22)\n  local shift_digits_mask23 = 1 << (shift_digits\
    \ - 23)\n  local shift_digits_mask24 = 1 << (shift_digits - 24)\n  local shift_digits_mask25\
    \ = 1 << (shift_digits - 25)\n  local shift_digits_mask26 = 1 << (shift_digits\
    \ - 26)\n  local shift_digits_mask27 = 1 << (shift_digits - 27)\n  local shift_digits_mask28\
    \ = 1 << (shift_digits - 28)\n  local shift_digits_mask29 = 1 << (shift_digits\
    \ - 29)\n  local shift_digits_mask30 = 1 << (shift_digits - 30)\n  local shift_digits_mask31\
    \ = 1 << (shift_digits - 31)\n  local shift_digits_mask", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log(shift, 10))\n\
    \  local shift_digits_power = shift_digits + 1\n  local shift_digits_mask = 1\
    \ << (shift_digits - 1)\n  local shift_digits_mask2 = 1 << (shift_digits - 2)\n\
    \  local shift_digits_mask3 = 1 << (shift_digits - 3)\n  local shift_digits_mask4\
    \ = 1 << (shift_digits - 4)\n  local shift_digits_mask5 = 1 << (shift_digits -\
    \ 5)\n  local shift_digits_mask6 = 1 << (shift_digits - 6)\n  local shift_digits_mask7\
    \ = 1 << (shift_digits - 7)\n  local shift_digits_mask8 = 1 << (shift_digits -\
    \ 8)\n  local shift_digits_mask9 = 1 << (shift_digits - 9)\n  local shift_digits_mask10\
    \ = 1 << (shift_digits - 10)\n  local shift_digits_mask11 = 1 << (shift_digits\
    \ - 11)\n  local shift_digits_mask12 = 1 << (shift_digits - 12)\n  local shift_digits_mask13\
    \ = 1 << (shift_digits - 13)\n  local shift_digits_mask14 = 1 << (shift_digits\
    \ - 14)\n  local shift_digits_mask15 = 1 << (shift_digits - 15)\n  local shift_digits_mask16\
    \ = 1 << (shift_digits - 16)\n  local shift_digits_mask17 = 1 << (shift_digits\
    \ - 17)\n  local shift_digits_mask18 = 1 << (shift_digits - 18)\n  local shift_digits_mask19\
    \ = 1 << (shift_digits - 19)\n  local shift_digits_mask20 = 1 << (shift_digits\
    \ - 20)\n  local shift_digits_mask21 = 1 << (shift_digits - 21)\n  local shift_digits_mask22\
    \ = 1 << (shift_digits - 22)\n  local shift_digits_mask23 = 1 << (shift_digits\
    \ - 23)\n  local shift_digits_mask24 = 1 << (shift_digits - 24)\n  local shift_digits_mask25\
    \ = 1 << (shift_digits - 25)\n  local shift_digits_mask26 = 1 << (shift_digits\
    \ - 26)\n  local shift_digits_mask27 = 1 << (shift_digits - 27)\n  local shift_digits_mask28\
    \ = 1 << (shift_digits - 28)\n  local shift_digits_mask29 = 1 << (shift_digits\
    \ - 29)\n  local shift_digits_mask30 = 1 << (shift_digits - 30)\n  local shift_digits_mask31\
    \ = 1 << (shift_digits - 31)\n  local shift_digits_mask32 = 1 << (shift_digits\
    \ - 32)\n  local shift_digits_mask33 = 1 << (shift_digits - 33)\n  local shift_digits_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x - math.floor(x)) * 10\
    \ / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - shift)\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(shift)) + 1 -- +1 because digits starts at 1\n  local\
    \ shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_power_2\
    \ = math.pow(10, shift_digits - 1)\n  local shift_digits_power_3 = math.pow(10,\
    \ shift_digits - 2)\n  local shift_digits_power_4 = math.pow(10, shift_digits\
    \ - 3)\n  local shift_digits_power_5 = math.pow(10, shift_digits - 4)\n  local\
    \ shift_digits_power_6 = math.pow(10, shift_digits - 5)\n  local shift_digits_power_7\
    \ = math.pow(10, shift_digits - 6)\n  local shift_digits_power_8 = math.pow(10,\
    \ shift_digits - 7)\n  local shift_digits_power_9 = math.pow(10, shift_digits\
    \ - 8)\n  local shift_digits_power_10 = math.pow(10, shift_digits - 9)\n  local\
    \ shift_digits_power_11 = math.pow(10, shift_digits - 10)\n  local shift_digits_power_12\
    \ = math.pow(10, shift_digits - 11)\n  local shift_digits_power_13 = math.pow(10,\
    \ shift_digits - 12)\n  local shift_digits_power_14 = math.pow(10, shift_digits\
    \ - 13)\n  local shift_digits_power_15 = math.pow(10, shift_digits - 14)\n  local\
    \ shift_digits_power_16 = math.pow(10, shift_digits - 15)\n  local shift_digits_power_17\
    \ = math.pow(10, shift_digits - 16)\n  local shift_digits_power_18 = math.pow(10,\
    \ shift_digits - 17)\n  local shift_digits_power_19 = math.pow(10, shift_digits\
    \ - 18)\n  local shift_digits_power_20 = math.pow(10, shift_digits - 19)\n  local\
    \ shift_digits_power_21 = math.pow(10, shift_digits - 20)\n  local shift_digits_power_22\
    \ = math.pow(10, shift_digits - 21)\n  local shift_digits_power_23 = math.pow(10,\
    \ shift_digits - 22)\n  local shift_digits_power_24 = math.pow(10, shift_digits\
    \ - 23)\n  local shift_digits_power_25 = math.pow(10, shift_digits - 24)\n  local\
    \ shift_digits_power_26 = math.pow(10, shift_digits - 25)\n  local shift_digits_power_27\
    \ = math.pow(10, shift_digits - 26)\n  local shift_digits_power_28 = math.pow(10,\
    \ shift_digits - 27)\n  local shift_digits_power_29 = math.pow(10, shift_digits\
    \ - 28)\n  local shift_digits_power_30 = math.pow(10, shift_digits - 29)\n  local\
    \ shift_", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log(shift, 10))\n  local shift_digits_power = math.pow(10,\
    \ shift_digits)\n  local shift_digits_mask = shift_digits - shift_digits_power\n\
    \  local shift_digits_mask2 = shift_digits - shift_digits_power + 1\n  local shift_digits_mask3\
    \ = shift_digits - shift_digits_power + 2\n  local shift_digits_mask4 = shift_digits\
    \ - shift_digits_power + 3\n  local shift_digits_mask5 = shift_digits - shift_digits_power\
    \ + 4\n  local shift_digits_mask6 = shift_digits - shift_digits_power + 5\n  local\
    \ shift_digits_mask7 = shift_digits - shift_digits_power + 6\n  local shift_digits_mask8\
    \ = shift_digits - shift_digits_power + 7\n  local shift_digits_mask9 = shift_digits\
    \ - shift_digits_power + 8\n  local shift_digits_mask10 = shift_digits - shift_digits_power\
    \ + 9\n  local shift_digits_mask11 = shift_digits - shift_digits_power + 10\n\
    \  local shift_digits_mask12 = shift_digits - shift_digits_power + 11\n  local\
    \ shift_digits_mask13 = shift_digits - shift_digits_power + 12\n  local shift_digits_mask14\
    \ = shift_digits - shift_digits_power + 13\n  local shift_digits_mask15 = shift_digits\
    \ - shift_digits_power + 14\n  local shift_digits_mask16 = shift_digits - shift_digits_power\
    \ + 15\n  local shift_digits_mask17 = shift_digits - shift_digits_power + 16\n\
    \  local shift_digits_mask18 = shift_digits - shift_digits_power + 17\n  local\
    \ shift_digits_mask19 = shift_digits - shift_digits_power + 18\n  local shift_digits_mask20\
    \ = shift_digits - shift_digits_power + 19\n  local shift_digits_mask21 = shift_digits\
    \ - shift_digits_power + 20\n  local shift_digits_mask22 = shift_digits - shift_digits_power\
    \ + 21\n  local shift_digits_mask23 = shift_digits - shift_digits_power + 22\n\
    \  local shift_digits_mask24 = shift_digits - shift_digits_power + 23\n  local\
    \ shift_digits_mask25 = shift_digits - shift_digits_power + 24\n  local shift_digits_mask26\
    \ = shift_digits - shift_digits_power + 25\n  local shift_digits_mask27 = shift_digits\
    \ - shift_digits_power + 26\n  local shift_", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  for i = 1, shift do\n    result = result .. digits[#digits\
    \ - shift + i]\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  for i = 1, shift\
    \ do\n    digits[i] = digits[i]:reverse()\n  end\n  return table.concat(digits,\
    \ \"\")\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local carry\
    \ = 0\n  for i = 1, #digits do\n    local digit = tonumber(digits[i])\n    local\
    \ digit = digit + carry\n    carry = digit / 10\n    digit = digit % 10\n    digits[i]\
    \ = tostring(digit)\n  end\n  if shift > #digits then\n    shift = shift - #digits\n\
    \    for i = #digits, 1, -1 do\n      digits[i] = digits[i - 1]\n    end\n  end\n\
    \  result = table.concat(digits, \"\")\n  if shift > 0 then\n    result = circular_shift(result,\
    \ shift)\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  local shift_digits = math.floor(math.log10(shift)) + 1\n  local\
    \ shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_mask =\
    \ (shift_digits - 1) ^ shift_digits_power\n  local shift_digits_mask = shift_digits_mask\
    \ ~= 0 and shift_digits_mask or 1\n  local shift_digits_mask2 = shift_digits_mask\
    \ * shift_digits_mask\n  local shift_digits_mask3 = shift_digits_mask2 * shift_digits_mask\n\
    \  local shift_digits_mask4 = shift_digits_mask3 * shift_digits_mask\n  local\
    \ shift_digits_mask5 = shift_digits_mask4 * shift_digits_mask\n  local shift_digits_mask6\
    \ = shift_digits_mask5 * shift_digits_mask\n  local shift_digits_mask7 = shift_digits_mask6\
    \ * shift_digits_mask\n  local shift_digits_mask8 = shift_digits_mask7 * shift_digits_mask\n\
    \  local shift_digits_mask9 = shift_digits_mask8 * shift_digits_mask\n  local\
    \ shift_digits_mask10 = shift_digits_mask9 * shift_digits_mask\n  local shift_digits_mask11\
    \ = shift_digits_mask10 * shift_digits_mask\n  local shift_digits_mask12 = shift_digits_mask11\
    \ * shift_digits_mask\n  local shift_digits_mask13 = shift_digits_mask12 * shift_digits_mask\n\
    \  local shift_digits_mask14 = shift_digits_mask13 * shift_digits_mask\n  local\
    \ shift_digits_mask15 = shift_digits_mask14 * shift_digits_mask\n  local shift_digits_mask16\
    \ = shift_digits_mask15 * shift_digits_mask\n  local shift_digits_mask17 = shift_digits_mask16\
    \ * shift_digits_mask\n  local shift_digits_mask18 = shift_digits_mask17 * shift_digits_mask\n\
    \  local shift_digits_mask19 = shift_digits_mask18 * shift_digits_mask\n  local\
    \ shift_digits_mask20 = shift_digits_mask19 * shift_digits_mask\n  local shift_digits_mask21\
    \ = shift_digits_mask20 * shift_digits_mask\n  local shift_digits_mask22 = shift_digits_mask21\
    \ * shift_digits_mask\n  local shift_digits_mask23 = shift_digits_mask22 * shift_digits_mask\n\
    \  local shift_digits_mask24 = shift_digits_mask23 * shift_digits_mask\n  local\
    \ shift_digits_mask25 = shift_digits_mask24 * shift_", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log10(shift)) +\
    \ 1\n  for i = 1, shift_digits do\n    local digit = tonumber(digits:sub(1, i\
    \ - 1))\n    digit = digit + math.floor((digit - 1) / shift)\n    digit = digit\
    \ % 10\n    result = result .. digit\n  end\n  if shift_digits > 0 then\n    result\
    \ = result .. digits:sub(1)\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shifts = tostring(shift)\n  local shift_count\
    \ = shifts:len()\n  local shift_digits = shifts:sub(1, shift_count)\n  local shift_digits_count\
    \ = shift_digits:len()\n  local shift_digits_value = shift_digits:sub(1, shift_digits_count)\n\
    \  local shift_digits_value_count = shift_digits_value:len()\n  local shift_digits_value_value\
    \ = shift_digits_value:sub(1, shift_digits_value_count)\n  local shift_digits_value_value_count\
    \ = shift_digits_value_value:len()\n  local shift_digits_value_value_value = shift_digits_value_value:sub(1,\
    \ shift_digits_value_value_count)\n  local shift_digits_value_value_value_count\
    \ = shift_digits_value_value_value:len()\n  local shift_digits_value_value_value_value\
    \ = shift_digits_value_value_value:sub(1, shift_digits_value_value_value_count)\n\
    \  local shift_digits_value_value_value_value_count = shift_digits_value_value_value_value:len()\n\
    \  local shift_digits_value_value_value_value_value = shift_digits_value_value_value_value:sub(1,\
    \ shift_digits_value_value_value_value_count)\n  local shift_digits_value_value_value_value_count\
    \ = shift_digits_value_value_value_value_value:len()\n  local shift_digits_value_value_value_value_value\
    \ = shift_digits_value_value_value_value_value:sub(1, shift_digits_value_value_value_value_value_count)\n\
    \  local shift_digits_value_value_value_value_value_count = shift_digits_value_value_value_value_value_value:len()\n\
    \  local shift_digits_value_value_value_value_value_value = shift_digits_value_value_value_value_value_value:sub(1,\
    \ shift_digits_value_value_value_value_value_count)\n  local shift_digits_value_value_value_value_value_count\
    \ = shift_digits_value_value_value_value_value_value:len()\n  local shift_digits_value_value_value_value_value_value\
    \ = shift_digits_value_value_value_value_value_value:sub(1, shift_digits_value_value_value_value_value_value_count)\n\
    \  local shift_digits_value_value_value_value_value_value_count = shift_digits_value_value_value_value_value_value_value:len()\n\
    \  local shift_digits_value_value_value_value_value_value_value = shift_digits_value_value_value_value_value_value_value:sub(1,\
    \ shift_digits_value_value_value_value_value_value_count)\n  local shift_digits_value_value_value_value_value_value_count\
    \ = shift_digits_value_value_value_value_value_value_value_value:len()\n  local\
    \ shift_digits_value_value_value", "  local digits = math.abs(x)\n  local result\
    \ = \"\"\n  local carry = 0\n  while digits > 0 do\n    local digit = math.floor(digits\
    \ / 10)\n    digits = digits % 10\n    result = table.concat(result, digit)\n\
    \    carry = digit + carry\n  end\n  if carry > 0 then\n    result = table.concat(result,\
    \ carry)\n  end\n  if shift > #result then\n    return table.concat(result, math.abs(shift))\n\
    \  else\n    return table.concat(result, shift)\n  end\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 + 0.5)\n    result = string.format(\"\
    %0*d\", digits, digit) + result\n    x = x - digit * 10\n  end\n  if x > 0 then\n\
    \    result = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\n\
    end", "  local digits = x:reverse()\n  for i = 1, shift do\n    digits = digits:reverse()\n\
    \  end\n  return table.concat(digits)\nend", "  local digits = x:reverse()\n \
    \ local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  for i = 1, shift\
    \ do\n    digits = digits:reverse()\n  end\n  return table.concat(digits)\nend",
  "  local digits = x:reverse()\n  local result = \"\"\n  local carry = 0\n  for i\
    \ = 1, shift do\n    local digit = digits[i]\n    local carry = digit + carry\n\
    \    digits[i] = carry\n    result = string.format(\"%s%+d\", result, digit)\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n\
    \    digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local carry = 0\n\
    \  for i = 1, #digits do\n    local digit = tonumber(digits[i])\n    local digit\
    \ = digit + carry\n    carry = digit / 10\n    digit = digit % 10\n    result\
    \ = result .. tostring(digit)\n  end\n  if shift > #digits then\n    shift = shift\
    \ - #digits\n    result = result .. tostring(carry)\n  end\n  return result, shift\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  while shift > 0\
    \ do\n    local digit = digits[shift]\n    shift = shift - 1\n    result = digit\
    \ .. result\n  end\n  return result\nend", "  local digits = x:reverse()\n  local\
    \ result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i]\
    \ = digits[#digits]\n    digits[#digits] = digit\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n\
    \    digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(shift)) + 1 -- +1 because digits starts at 1\n  for\
    \ i = 1, shift_digits do\n    local digit = tonumber(digits:sub(1, i))\n    if\
    \ digit == 0 then\n      break\n    end\n    local digit = digit - math.floor((digit\
    \ - 1) / 10)\n    digit = digit * 10 + math.floor((digit - 1) % 10)\n    result\
    \ = result .. tostring(digit)\n  end\n  if shift_digits > 0 then\n    result =\
    \ result .. tostring(digits:sub((shift_digits - 1), shift_digits))\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ shifts = tostring(shift)\n  local shift_count = #shifts\n  local shift_digits\
    \ = tostring(shift_count)\n  local shift_digits_count = #shift_digits", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    local\
    \ digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits] = digit\n\
    \    result = result .. digit\n  end\n  return result\nend", "  local digits =\
    \ x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    local digit =\
    \ digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits] = digit\n  \
    \  result = result .. digit\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  local shifts = math.ceil(math.log(shift, 2)) -- Number of digits\
    \ to shift\n  for i = 1, shifts do\n    local digit = tonumber(string.sub(digits,\
    \ math.floor(i * digits), math.floor((i + 1) * digits)))\n    if digit == 0 then\n\
    \      break\n    end\n    result = result .. tostring(digit % 10)\n  end\n  if\
    \ shifts > 1 then\n    result = result .. tostring(string.sub(digits, math.floor((shifts\
    \ - 1) * digits), math.floor(shift * digits)))\n  end\n  return result\nend",
  "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n  \
    \  result = result .. digits[i]\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(math.abs(x))) + 1\n  local result = \"\"\n  local carry\
    \ = 0\n  local digit\n  for i = 1, digits do\n    digit = math.floor((x / 10^i)\
    \ * 10^shift)\n    carry = digit + carry\n    result = string.format(\"%0*d\"\
    , digits, carry) + result\n  end\n  if carry > 0 then\n    result = string.format(\"\
    %0*d\", digits, carry) + result\n  end\n  return result\nend", "  local digits\
    \ = tostring(x)\n  local result = \"\"\n  local i = #digits\n  while i > shift\
    \ do\n    local digit = digits[i]\n    digits[i] = digits[i - 1]\n    digits[i\
    \ - 1] = digit\n    result = result .. digit\n    i = i - 1\n  end\n  if i > shift\
    \ then\n    result = result .. digits[i - 1]\n  end\n  return result\nend", " \
    \ local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(shift))\
    \ + 1\n  for i = 1, shift_digits do\n    local digit = tonumber(digits:sub(1,\
    \ -1))\n    digit = digit + math.floor((digit - 1) / math.pow(10, shift_digits))\
    \ * math.pow(10, shift_digits)\n    result = result .. tostring(digit)\n  end\n\
    \  return result\nend", "  local digits = x:reverse()\n  local result = \"\"\n\
    \  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(shift)) + 1\n  for i = 1, shift_digits do\n    local\
    \ digit = tonumber(digits:sub(1, math.floor(i)))\n    local shift = math.floor(i/shift_digits)\n\
    \    digit = digit - shift * 10\n    result = result .. tostring(digit)\n  end\n\
    \  return result\nend", "  local digits = tostring(x)\n  local result = \"\"\n\
    \  local shift_digits = math.floor(math.log(shift, 10))\n  local shift_digits_power\
    \ = math.pow(10, shift_digits)\n  local shift_digits_mask = shift_digits - shift_digits_power\n\
    \  local shift_digits_mask2 = shift_digits - shift_digits_power + 1\n  local shift_digits_mask3\
    \ = shift_digits - shift_digits_power + 2\n  local shift_digits_mask4 = shift_digits\
    \ - shift_digits_power + 3\n  local shift_digits_mask5 = shift_digits - shift_digits_power\
    \ + 4\n  local shift_digits_mask6 = shift_digits - shift_digits_power + 5\n  local\
    \ shift_digits_mask7 = shift_digits - shift_digits_power + 6\n  local shift_digits_mask8\
    \ = shift_digits - shift_digits_power + 7\n  local shift_digits_mask9 = shift_digits\
    \ - shift_digits_power + 8\n  local shift_digits_mask10 = shift_digits - shift_digits_power\
    \ + 9\n  local shift_digits_mask11 = shift_digits - shift_digits_power + 10\n\
    \  local shift_digits_mask12 = shift_digits - shift_digits_power + 11\n  local\
    \ shift_digits_mask13 = shift_digits - shift_digits_power + 12\n  local shift_digits_mask14\
    \ = shift_digits - shift_digits_power + 13\n  local shift_digits_mask15 = shift_digits\
    \ - shift_digits_power + 14\n  local shift_digits_mask16 = shift_digits - shift_digits_power\
    \ + 15\n  local shift_digits_mask17 = shift_digits - shift_digits_power + 16\n\
    \  local shift_digits_mask18 = shift_digits - shift_digits_power + 17\n  local\
    \ shift_digits_mask19 = shift_digits - shift_digits_power + 18\n  local shift_digits_mask20\
    \ = shift_digits - shift_digits_power + 19\n  local shift_digits_mask21 = shift_digits\
    \ - shift_digits_power + 20\n  local shift_digits_mask22 = shift_digits - shift_digits_power\
    \ + 21\n  local shift_digits_mask23 = shift_digits - shift_digits_power + 22\n\
    \  local shift_digits_mask24 = shift_digits - shift_digits_power + 23\n  local\
    \ shift_digits_mask25 = shift_digits - shift_digits_power + 24\n  local shift_digits_mask26\
    \ = shift_digits - shift_digits_power + 25\n  local shift_digits_mask27 = shift_digits\
    \ - shift_digits_power + 26\n  local shift_", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  for i = 1, shift\
    \ do\n    digits = digits:reverse()\n  end\n  return table.concat(digits)\nend",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shifts = tostring(shift)\n\
    \  local shift_digits = tonumber(shifts)\n  local shift_digits_str = tostring(shift_digits)\n\
    \  local shift_digits_str_length = tonumber(shift_digits_str)\n  local shift_digits_str_length_reversed\
    \ = shift_digits_str_length - 1\n  local shift_digits_str_length_reversed_str\
    \ = tostring(shift_digits_str_length_reversed)\n  local shift_digits_str_length_reversed_str_length\
    \ = tonumber(shift_digits_str_length_reversed_str)\n  local shift_digits_str_length_reversed_str_length_reversed\
    \ = shift_digits_str_length_reversed_str_length - 1\n  local shift_digits_str_length_reversed_str_length_reversed_str\
    \ = tostring(shift_digits_str_length_reversed_str_length_reversed)\n  local shift_digits_str_length_reversed_str_length_reversed_str_length\
    \ = tonumber(shift_digits_str_length_reversed_str_length_reversed_str)\n  local\
    \ shift_digits_str_length_reversed_str_length_reversed_str_length_reversed = shift_digits_str_length_reversed_str_length_reversed_str_length\
    \ - 1\n  local shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str\
    \ = tostring(shift_digits_str_length_reversed_str_length_reversed_str_length_reversed)\n\
    \  local shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str_length\
    \ = tonumber(shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str)\n\
    \  local shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed\
    \ = shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed_str_length\
    \ - 1\n  local shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed_str\
    \ = tostring(shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed_str)\n\
    \  local shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed\
    \ = shift_digits_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed_str_length_reversed_str_length",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log(shift,\
    \ 10))\n  for i = 1, shift_digits do\n    local digit = digits:sub(i, i)\n   \
    \ local carry = 0\n    for j = 1, 10 do\n      local digit = tonumber(digit)\n\
    \      local new_digit = digit + carry + 1\n      carry = new_digit / 10\n   \
    \   new_digit = new_digit % 10\n      digit = tonumber(string.format(\"%0*d\"\
    , j + 1, new_digit))\n    end\n    result = string.format(\"%s%0*d\", result,\
    \ shift_digits - i - 1, digit)\n  end\n  if shift < shift_digits then\n    result\
    \ = string.format(\"%s%0*d\", result, shift_digits - shift, digits:sub(shift_digits))\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = math.floor(math.log10(shift)) + 1\n  for i = 1,\
    \ shift_digits do\n    local digit = tonumber(digits:sub(1, i))\n    digit = digit\
    \ - math.floor(digit)\n    digit = digit + math.floor(digit / 10)\n    digit =\
    \ digit % 10\n    digit = digit + math.floor(digit / 10)\n    digit = digit %\
    \ 10\n    digit = digit + math.floor(digit / 10)\n    digit = digit % 10\n   \
    \ digit = digit + math.floor(digit / 10)\n    digit = digit % 10\n    digit =\
    \ digit + math.floor(digit / 10)\n    digit = digit % 10\n    digit = digit +\
    \ math.floor(digit / 10)\n    digit = digit % 10\n    digit = digit + math.floor(digit\
    \ / 10)\n    digit = digit % 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit % 10\n    digit = digit + math.floor(digit / 10)\n    digit\
    \ = digit % 10\n    digit = digit + math.floor(digit / 10)\n    digit = digit\
    \ % 10\n    digit = digit + math.floor(digit / 10)\n    digit = digit % 10\n \
    \   digit = digit + math.floor(digit / 10)\n    digit = digit % 10\n    digit\
    \ = digit + math.floor(digit / 10)\n    digit = digit % 10\n    digit = digit\
    \ + math.floor(digit / 10)\n    digit = digit % 10\n    digit = digit + math.floor(digit\
    \ / 10)\n    digit = digit % 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit % 10\n    digit = digit + math.floor(digit / 10)\n    digit\
    \ = digit % 10\n    digit = digit + math.floor(digit / 10)\n    digit = digit\
    \ % 10\n    digit = digit + math.floor(digit / 10)\n    digit = digit % 10\n \
    \   digit = digit + math.floor(digit / 10)\n    digit = digit % 10\n    digit\
    \ = digit + math.floor(digit / 10)\n    digit = digit % 10\n    digit = digit\
    \ + math.floor(digit / 10)\n    digit = digit % 10\n    digit = digit + math.floor(digit\
    \ / 10)\n    digit = digit % 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit % 10\n    digit = digit + math.floor(digit / 10)\n    digit\
    \ = digit % 10\n    digit = digit + ", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  local shift_digits = math.floor(math.log10(shift)) + 1\n  local\
    \ shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_mask =\
    \ shift_digits - 1\n  local shift_digits_mask2 = shift_digits - 2\n  local shift_digits_mask3\
    \ = shift_digits - 3\n  local shift_digits_mask4 = shift_digits - 4\n  local shift_digits_mask5\
    \ = shift_digits - 5\n  local shift_digits_mask6 = shift_digits - 6\n  local shift_digits_mask7\
    \ = shift_digits - 7\n  local shift_digits_mask8 = shift_digits - 8\n  local shift_digits_mask9\
    \ = shift_digits - 9\n  local shift_digits_mask10 = shift_digits - 10\n  local\
    \ shift_digits_mask11 = shift_digits - 11\n  local shift_digits_mask12 = shift_digits\
    \ - 12\n  local shift_digits_mask13 = shift_digits - 13\n  local shift_digits_mask14\
    \ = shift_digits - 14\n  local shift_digits_mask15 = shift_digits - 15\n  local\
    \ shift_digits_mask16 = shift_digits - 16\n  local shift_digits_mask17 = shift_digits\
    \ - 17\n  local shift_digits_mask18 = shift_digits - 18\n  local shift_digits_mask19\
    \ = shift_digits - 19\n  local shift_digits_mask20 = shift_digits - 20\n  local\
    \ shift_digits_mask21 = shift_digits - 21\n  local shift_digits_mask22 = shift_digits\
    \ - 22\n  local shift_digits_mask23 = shift_digits - 23\n  local shift_digits_mask24\
    \ = shift_digits - 24\n  local shift_digits_mask25 = shift_digits - 25\n  local\
    \ shift_digits_mask26 = shift_digits - 26\n  local shift_digits_mask27 = shift_digits\
    \ - 27\n  local shift_digits_mask28 = shift_digits - 28\n  local shift_digits_mask29\
    \ = shift_digits - 29\n  local shift_digits_mask30 = shift_digits - 30\n  local\
    \ shift_digits_mask31 = shift_digits - 31\n  local shift_digits_mask32 = shift_digits\
    \ - 32\n  local shift_digits_mask33 = shift_digits - 33\n  local shift_digits_mask34\
    \ = shift_digits - 34\n  local shift_digits_mask35 = shift_digits - 35\n  local\
    \ shift_digits_mask36 = shift_digits - 36\n  local shift_digits_mask37 = shift_digits\
    \ - 37\n  local shift_digit", "  local digits = x:reverse()\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n    digits[i] = digit:reverse()\n\
    \    result = digit .. result\n  end\n  return result\nend", "  local digits =\
    \ x:reverse()\n  for i = 1, shift do\n    digits[i] = digits[i]:reverse()\n  end\n\
    \  return table.concat(digits)\nend", "  local digits = x:reverse()\n  local result\
    \ = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local carry = 0\n  local digit\n  for i = 1, digits do\n    digit =\
    \ math.floor((x / 10) % 10)\n    carry = digit + carry\n    x = math.floor(x /\
    \ 10)\n    result = string.format(\"%s%0*d\", result, shift, digit) + carry\n\
    \  end\n  if carry > 0 then\n    result = string.format(\"%s%0*d\", result, shift,\
    \ carry) + result\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = math.floor(math.log(shift, 10))\n  local shift_remainder\
    \ = shift % 10\n  local shift_digits_remainder = shift_digits % 10\n  local shift_digits_remainder_offset\
    \ = shift_digits - shift_digits_remainder\n  local shift_digits_offset = shift_digits\
    \ - shift_digits_remainder_offset\n  local shift_digits_remainder_offset = shift_digits\
    \ - shift_digits_remainder\n  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digits_remainder_offset = shift_digits - shift_digits_remainder\n\
    \  local shift_digits_offset = shift_digits - shift_digits_remainder_offset\n\
    \  local shift_digit", "  local digits = x:reverse()\n  for i = 1, shift do\n\
    \    digits[i] = digits[i]:reverse()\n  end\n  return table.concat(digits, \"\"\
    )\nend", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits]\
    \ = digit\n    result = result .. digit\n  end\n  return result\nend", "  if shift\
    \ > math.floor(math.log(math.abs(x), 10)) then\n    return string.reverse(x)\n\
    \  else\n    local digits = math.floor(math.log(math.abs(x), 10))\n    local shift\
    \ = digits - shift\n    local result = \"\"\n    for i = 1, digits do\n      result\
    \ = string.rep(\"0\", math.floor(math.pow(10, shift)) + 1) + result\n      shift\
    \ = shift - 1\n    end\n    return string.reverse(result)\n  end\nend", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    result\
    \ = result .. digits[i]\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = x:reverse()\n  local\
    \ result = \"\"\n  local carry = 0\n  for i = 1, shift do\n    local digit = digits[i]\n\
    \    local carry = (digit + carry) % 10\n    digit = carry ~= 0 and digit or 0\n\
    \    carry = carry > 0 and 1 or 0\n    result = string.format(\"%s%0*d\", result,\
    \ digit, i)\n  end\n  if carry > 0 then\n    result = string.format(\"%s%0*d\"\
    , result, carry)\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    local digit = digits:sub(i, i)\n    digit =\
    \ digit:reverse()\n    result = digit .. result\n  end\n  return result\nend",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(shift))\
    \ + 1\n  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_mask\
    \ = (shift_digits - 1) * shift_digits_power\n  local shift_digits_mask2 = shift_digits\
    \ - shift_digits_mask\n  local shift_digits_mask3 = shift_digits - shift_digits_mask2\n\
    \  local shift_digits_mask4 = shift_digits - shift_digits_mask3\n  local shift_digits_mask5\
    \ = shift_digits - shift_digits_mask4\n  local shift_digits_mask6 = shift_digits\
    \ - shift_digits_mask5\n  local shift_digits_mask7 = shift_digits - shift_digits_mask6\n\
    \  local shift_digits_mask8 = shift_digits - shift_digits_mask7\n  local shift_digits_mask9\
    \ = shift_digits - shift_digits_mask8\n  local shift_digits_mask10 = shift_digits\
    \ - shift_digits_mask9\n  local shift_digits_mask11 = shift_digits - shift_digits_mask10\n\
    \  local shift_digits_mask12 = shift_digits - shift_digits_mask11\n  local shift_digits_mask13\
    \ = shift_digits - shift_digits_mask12\n  local shift_digits_mask14 = shift_digits\
    \ - shift_digits_mask13\n  local shift_digits_mask15 = shift_digits - shift_digits_mask14\n\
    \  local shift_digits_mask16 = shift_digits - shift_digits_mask15\n  local shift_digits_mask17\
    \ = shift_digits - shift_digits_mask16\n  local shift_digits_mask18 = shift_digits\
    \ - shift_digits_mask17\n  local shift_digits_mask19 = shift_digits - shift_digits_mask18\n\
    \  local shift_digits_mask20 = shift_digits - shift_digits_mask19\n  local shift_digits_mask21\
    \ = shift_digits - shift_digits_mask20\n  local shift_digits_mask22 = shift_digits\
    \ - shift_digits_mask21\n  local shift_digits_mask23 = shift_digits - shift_digits_mask22\n\
    \  local shift_digits_mask24 = shift_digits - shift_digits_mask23\n  local shift_digits_mask25\
    \ = shift_digits - shift_digits_mask24\n  local shift_digits_mask26 = shift_digits\
    \ - shift_digits_mask25\n  local shift_digits_mask27 = shift_digits - shift_digits_mask26\n\
    \  local shift_digits_mask28 = shift_digits - shift_digits_mask27\n  local shift_digits_mask29\
    \ = ", "  local digits = x:reverse()\n  local result = \"\"\n  local carry = 0\n\
    \  for i = 1, shift do\n    local digit = digits[i]\n    local carry = digit +\
    \ carry\n    digits[i] = carry\n    result = digit .. result\n  end\n  if shift\
    \ > #digits then\n    digits = digits:reverse()\n  end\n  return result, digits\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local carry = 0\n\
    \  local i = 0\n  while i < #digits do\n    local digit = tonumber(digits[i])\n\
    \    local shift = shift - i\n    if shift < 0 then\n      carry = 1\n      shift\
    \ = shift % #digits\n    end\n    digit = digit + carry\n    carry = digit / 10\n\
    \    digit = digit % 10\n    result = result .. digit\n    i = i + 1\n  end\n\
    \  if shift > 0 then\n    result = result .. tostring(carry)\n  end\n  return\
    \ result\nend", "  local digits = tostring(x)\n  local result = \"\"\n  local\
    \ shifts = tostring(shift)\n  local digits_length = #digits\n  local shifts_length\
    \ = #shifts\n  for i = 1, shifts_length do\n    local shift = shifts[i]\n    local\
    \ digit = digits[digits_length - shift]\n    digit = tonumber(digit)\n    if digit\
    \ == 0 then\n      break\n    end\n    result = result .. digit\n    digits =\
    \ digits:sub(1, digits_length - shift)\n  end\n  return result\nend", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    local\
    \ digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits] = digit\n\
    \    result = result .. digit\n  end\n  return result\nend", "  local digits =\
    \ tostring(x)\n  local result = \"\"\n  local shifts = tostring(shift)\n  local\
    \ shifts_length = #shifts\n  local shifts_remaining = shifts_length\n  while shifts_remaining\
    \ > 0 do\n    local shift = shifts[shifts_remaining]\n    shifts_remaining = shifts_remaining\
    \ - 1\n    digits = digits:gsub(\"%d+\", shift)\n    result = result .. digits\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = math.floor(math.log10(shift)) + 1\n  local shift_digits_power\
    \ = math.pow(10, shift_digits)\n  local shift_digits_mask = shift_digits - shift_digits\n\
    \  local shift_digits_mask2 = shift_digits - shift_digits + 1\n  local shift_digits_mask3\
    \ = shift_digits - shift_digits + 2\n  local shift_digits_mask4 = shift_digits\
    \ - shift_digits + 3\n  local shift_digits_mask5 = shift_digits - shift_digits\
    \ + 4\n  local shift_digits_mask6 = shift_digits - shift_digits + 5\n  local shift_digits_mask7\
    \ = shift_digits - shift_digits + 6\n  local shift_digits_mask8 = shift_digits\
    \ - shift_digits + 7\n  local shift_digits_mask9 = shift_digits - shift_digits\
    \ + 8\n  local shift_digits_mask10 = shift_digits - shift_digits + 9\n  local\
    \ shift_digits_mask11 = shift_digits - shift_digits + 10\n  local shift_digits_mask12\
    \ = shift_digits - shift_digits + 11\n  local shift_digits_mask13 = shift_digits\
    \ - shift_digits + 12\n  local shift_digits_mask14 = shift_digits - shift_digits\
    \ + 13\n  local shift_digits_mask15 = shift_digits - shift_digits + 14\n  local\
    \ shift_digits_mask16 = shift_digits - shift_digits + 15\n  local shift_digits_mask17\
    \ = shift_digits - shift_digits + 16\n  local shift_digits_mask18 = shift_digits\
    \ - shift_digits + 17\n  local shift_digits_mask19 = shift_digits - shift_digits\
    \ + 18\n  local shift_digits_mask20 = shift_digits - shift_digits + 19\n  local\
    \ shift_digits_mask21 = shift_digits - shift_digits + 20\n  local shift_digits_mask22\
    \ = shift_digits - shift_digits + 21\n  local shift_digits_mask23 = shift_digits\
    \ - shift_digits + 22\n  local shift_digits_mask24 = shift_digits - shift_digits\
    \ + 23\n  local shift_digits_mask25 = shift_digits - shift_digits + 24\n  local\
    \ shift_digits_mask26 = shift_digits - shift_digits + 25\n  local shift_digits_mask27\
    \ = shift_digits - shift_digits + 26\n  local shift_digits_mask28 = shift_digits\
    \ - shift_digits + 27\n  local shift_digits_mask29 = shift_digits - shift_digits\
    \ + 28\n  local shift_digits_mask30 = shift_digits - shift_digits + 29\n  local\
    \ shift_digits_mask3", "  local digits = x:reverse()\n  for i = 1, shift do\n\
    \    digits = digits:reverse()\n  end\n  return table.concat(digits)\nend", " \
    \ local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n \
    \   result = result .. digits[i]\n  end\n  return result\nend", "  local digits\
    \ = tostring(x)\n  local result = \"\"\n  local shifts = math.floor(math.log(shift,\
    \ 10))\n  local shift_digits = math.pow(10, shifts) -- Shift digits\n  local shift_digits_length\
    \ = math.floor(math.log(shift_digits, 10))\n  local shift_digits_remainder = shift_digits\
    \ % 10 -- Shift digits remainder\n  local shift_digits_remainder_length = math.floor(math.log(shift_digits_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder = shift_digits_remainder % 10\
    \ -- Shift digits remainder remainder\n  local shift_digits_remainder_remainder_length\
    \ = math.floor(math.log(shift_digits_remainder_remainder, 10))\n  local shift_digits_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder % 10 -- Shift digits remainder remainder\
    \ remainder\n  local shift_digits_remainder_remainder_remainder_length = math.floor(math.log(shift_digits_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder = shift_digits_remainder_remainder_remainder\
    \ % 10 -- Shift digits remainder remainder remainder remainder\n  local shift_digits_remainder_remainder_remainder_remainder_length\
    \ = math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder_remainder_remainder % 10 -- Shift digits\
    \ remainder remainder remainder remainder remainder\n  local shift_digits_remainder_remainder_remainder_remainder_remainder_length\
    \ = math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder_remainder_remainder_remainder % 10 -- Shift\
    \ digits remainder remainder remainder remainder remainder remainder\n  local\
    \ shift_digits_remainder_remainder_remainder_remainder_remainder_remainder_length\
    \ = math.floor(math.log(shift_digits_remainder_remainder_remainder_remainder_remainder_remainder,\
    \ 10))\n  local shift_digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = shift_digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ % 10 -- Shift digits remainder remainder remainder remainder remainder remainder\
    \ remainder\n  local shift_digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder_length\
    \ = math.floor(math.log(shift_", "  local digits = x:gsub(\"%d+\", function(c)\
    \ return \"%d\" .. tostring(c:byte()) end)\n  local result = \"\"\n  for i = 1,\
    \ shift do\n    local digit = tonumber(digits)\n    if digit == nil then\n   \
    \   break\n    end\n    result = result .. tostring(digit:byte())\n    digits\
    \ = digits:gsub(\"%d+\", function(c) return \"%d\" .. tostring(c:byte()) end)\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  local result =\
    \ \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n  end\n  return\
    \ result\nend", "  local digits = x:reverse()\n  local result = \"\"\n  for i\
    \ = 1, shift do\n    local digit = digits[i]\n    digits[i] = digits[#digits]\n\
    \    digits[#digits] = digit\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift\
    \ do\n    result = result .. digits[i]\n  end\n  return result\nend", "  local\
    \ digits = x:reverse()\n  for i = 1, shift do\n    digits = digits:reverse()\n\
    \  end\n  return table.concat(digits)\nend", "  local digits = x:gsub(\"%d+\"\
    , function (digit)\n    return tonumber(digit) * math.pow(10, shift)\n  end)\n\
    \  local result = \"\"\n  for i = 1, #digits do\n    local digit = digits[i]\n\
    \    local remainder = math.floor(digit / 10)\n    digit = digit % 10\n    if\
    \ remainder > 0 then\n      result = result .. \"0\" .. tostring(remainder)\n\
    \    end\n    result = result .. tostring(digit)\n  end\n  return result\nend",
  "  local digits = tostring(x)\n  local result = \"\"\n  local carry = 0\n  local\
    \ digit\n  for i = 1, #digits do\n    digit = tonumber(digits[i])\n    carry =\
    \ digit + carry\n    digits[i] = tostring(carry % 10)\n    carry = carry / 10\n\
    \    if carry > 0 then\n      result = result .. digits[i]\n    end\n  end\n \
    \ if shift > #digits then\n    shift = shift - #digits\n  end\n  result = result\
    \ .. digits[#digits]\n  return result, shift\nend", "  local digits = x:reverse()\n\
    \  for i = 1, shift do\n    digits[i] = digits[i]:reverse()\n  end\n  return table.concat(digits)\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log(shift, 10))\n  for i = 1, shift_digits do\n    local digit\
    \ = digits:sub(i, i)\n    digit = digit:reverse()\n    digit = digit:sub(1, #digit)\n\
    \    result = digit .. result\n  end\n  return result\nend", "  local digits =\
    \ tostring(x)\n  local result = \"\"\n  local carry = 0\n  repeat\n    local digit\
    \ = tonumber(digits)\n    if digit == 0 then\n      break\n    end\n    digits\
    \ = digits:sub(2)\n    carry = digit + carry\n    result = string.format(\"%0*d\"\
    , shift, carry) .. result\n  until digits == \"\"\n  return result\nend", "  local\
    \ digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    result\
    \ = result .. digits[i]\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shifts = tostring(shift)\n  local shifts_length\
    \ = #shifts\n  local shifts_remaining = shifts_length\n  while shifts_remaining\
    \ > 0 do\n    local shift = shifts[shifts_remaining]\n    local digit = digits:sub(1,\
    \ -1)\n    local digits_length = #digits\n    local digits_remaining = digits_length\
    \ - 1\n    local digits_shift = digits_remaining - shift\n    local digits_shift_remaining\
    \ = digits_shift - 1\n    local digits_shift_remaining_length = digits_shift_remaining\
    \ + 1\n    local digits_shift_remaining_remaining = digits_shift_remaining_length\
    \ - 1\n    local digits_shift_remaining_remaining_remaining = digits_shift_remaining_remaining\
    \ - 1\n    local digits_shift_remaining_remaining_remaining_length = digits_shift_remaining_remaining_remaining\
    \ + 1\n    local digits_shift_remaining_remaining_remaining_remaining_length =\
    \ digits_shift_remaining_remaining_remaining_remaining + 1\n    local digits_shift_remaining_remaining_remaining_remaining_length\
    \ = digits_shift_remaining_remaining_remaining_remaining_length - 1\n    local\
    \ digits_shift_remaining_remaining_remaining_remaining_length = digits_shift_remaining_remaining_remaining_remaining_length\
    \ - 1\n    local digits_shift_remaining_remaining_remaining_remaining_length =\
    \ digits_shift_remaining_remaining_remaining_remaining_length - 1\n    local digits_shift_remaining_remaining_remaining_remaining_length\
    \ = digits_shift_remaining_remaining_remaining_remaining_length - 1\n    local\
    \ digits_shift_remaining_remaining_remaining_remaining_length = digits_shift_remaining_remaining_remaining_remaining_length\
    \ - 1\n    local digits_shift_remaining_remaining_remaining_remaining_length =\
    \ digits_shift_remaining_remaining_remaining_remaining_length - 1\n    local digits_shift_remaining_remaining_remaining_remaining_length\
    \ = digits_shift_remaining_remaining_remaining_remaining_length - 1\n    local\
    \ digits_shift_remaining_remaining_remaining_remaining_length = digits_shift_remaining_remaining_remaining_remaining_length\
    \ - 1\n    local digits_shift_remaining_remaining_remaining_remaining_length =\
    \ digits_shift_remaining_remaining_remaining_remaining_length - 1\n    local digits_shift_remaining_remaining_remaining_remaining_length\
    \ = digits_shift_remaining_remaining_remaining_remaining_length - 1\n    local\
    \ digits_shift_remaining_remaining_remaining_remaining_length = digits_shift_remaining_remaining_remain",
  "  local digits = tostring(x)\n  local result = \"\"\n  local i = #digits\n  while\
    \ i > shift do\n    local digit = digits[i]\n    digits[i] = digits[i - 1]\n \
    \   digits[i - 1] = digit\n    i = i - 1\n    if i == 0 then\n      result = digits\
    \ .. result\n    end\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log(shift, 10))\n\
    \  local shift_digits_count = math.floor(shift_digits / 2)\n  local shift_digits_remainder\
    \ = shift_digits - shift_digits_count\n  local shift_digits_mask = 1 << (shift_digits_count\
    \ - 1)\n  local shift_digits_mask2 = 1 << (shift_digits_count - 2)\n  local shift_digits_mask3\
    \ = 1 << (shift_digits_count - 3)\n  local shift_digits_mask4 = 1 << (shift_digits_count\
    \ - 4)\n  local shift_digits_mask5 = 1 << (shift_digits_count - 5)\n  local shift_digits_mask6\
    \ = 1 << (shift_digits_count - 6)\n  local shift_digits_mask7 = 1 << (shift_digits_count\
    \ - 7)\n  local shift_digits_mask8 = 1 << (shift_digits_count - 8)\n  local shift_digits_mask9\
    \ = 1 << (shift_digits_count - 9)\n  local shift_digits_mask10 = 1 << (shift_digits_count\
    \ - 10)\n  local shift_digits_mask11 = 1 << (shift_digits_count - 11)\n  local\
    \ shift_digits_mask12 = 1 << (shift_digits_count - 12)\n  local shift_digits_mask13\
    \ = 1 << (shift_digits_count - 13)\n  local shift_digits_mask14 = 1 << (shift_digits_count\
    \ - 14)\n  local shift_digits_mask15 = 1 << (shift_digits_count - 15)\n  local\
    \ shift_digits_mask16 = 1 << (shift_digits_count - 16)\n  local shift_digits_mask17\
    \ = 1 << (shift_digits_count - 17)\n  local shift_digits_mask18 = 1 << (shift_digits_count\
    \ - 18)\n  local shift_digits_mask19 = 1 << (shift_digits_count - 19)\n  local\
    \ shift_digits_mask20 = 1 << (shift_digits_count - 20)\n  local shift_digits_mask21\
    \ = 1 << (shift_digits_count - 21)\n  local shift_digits_mask22 = 1 << (shift_digits_count\
    \ - 22)\n  local shift_digits_mask23 = 1 << (shift_digits_count - 23)\n  local\
    \ shift_digits_mask24 = 1 << (shift_digits_count - 24)\n  local shift_digits_mask25\
    \ = 1 << (shift_digits_count - 25)\n  local shift_digits_mask26 = 1 << (shift_digits_count\
    \ - 26)\n  local shift_digits_mask27 = 1 << (shift_digits_count - 27)\n  local\
    \ shift_digits_mask28 = 1 << (shift_digits_count - 28)\n  local shift_digits_mask29",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(shift))\
    \ + 1\n  for i = 1, shift_digits do\n    local digit = digits:sub(1, i)\n    local\
    \ remainder = digits:sub(i + 1)\n    local digit = tonumber(digit)\n    local\
    \ remainder = tonumber(remainder)\n    if remainder > 0 then\n      result = result\
    \ .. tostring(digit + math.floor(remainder / 10) * 10)\n      remainder = remainder\
    \ % 10\n    end\n    if remainder < 0 then\n      result = result .. tostring(digit\
    \ - math.floor(remainder / 10) * 10)\n      remainder = remainder % 10\n    end\n\
    \  end\n  return result\nend", "  local digits = x:reverse()\n  for i = 1, shift\
    \ do\n    digits = digits:reverse()\n  end\n  return table.concat(digits)\nend",
  "  local digits = x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n  \
    \  local digit = digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits]\
    \ = digit\n    result = result .. digit\n  end\n  return result\nend", "  local\
    \ digits = tostring(x)\n  local result = \"\"\n  local shifts = tostring(shift)\n\
    \  local shift_digits = tostring(math.floor(math.log10(shifts)))\n  local shift_digits_count\
    \ = tonumber(shift_digits)\n  local shift_digits_count_negative = shift_digits_count\
    \ < 0\n  local shift_digits_count_negative_count = shift_digits_count_negative\
    \ and shift_digits_count * -1\n  local shift_digits_count_negative_reversed =\
    \ shift_digits_count_negative and shift_digits_count_negative_count\n  local shift_digits_count_negative_reversed_count\
    \ = shift_digits_count_negative_reversed and shift_digits_count_negative_reversed\
    \ * -1\n  local shift_digits_count_negative_reversed_count_negative = shift_digits_count_negative_reversed\
    \ and shift_digits_count_negative_reversed_count * -1\n  local shift_digits_count_negative_reversed_count_negative_count\
    \ = shift_digits_count_negative_reversed_count_negative and shift_digits_count_negative_reversed_count_negative\
    \ * -1\n  local shift_digits_count_negative_reversed_count_negative_reversed =\
    \ shift_digits_count_negative_reversed_count_negative and shift_digits_count_negative_reversed_count_negative_reversed\
    \ * -1\n  local shift_digits_count_negative_reversed_count_negative_reversed_count\
    \ = shift_digits_count_negative_reversed_count_negative_reversed and shift_digits_count_negative_reversed_count_negative_reversed\
    \ * -1\n  local shift_digits_count_negative_reversed_count_negative_reversed_count_negative\
    \ = shift_digits_count_negative_reversed_count_negative_reversed and shift_digits_count_negative_reversed_count_negative_reversed_count_negative\
    \ * -1\n  local shift_digits_count_negative_reversed_count_negative_reversed_count_negative_count\
    \ = shift_digits_count_negative_reversed_count_negative_reversed_count_negative\
    \ and shift_digits_count_negative_reversed_count_negative_reversed_count_negative_count\
    \ * -1\n  local shift_digits_count_negative_reversed_count_negative_reversed_count_negative_reversed\
    \ = shift_digits_count_negative_reversed_count_negative_reversed_count_negative\
    \ and shift_digits_count_negative_reversed_count_negative_reversed_count_negative_reversed\
    \ * -1\n  local shift_digits_count_negative_reversed_count_negative_reversed_count_negative_reversed_count\
    \ = shift_digits_count_negative_reversed_count_negative_reversed_count_negative_reversed\
    \ and shift_digits_count_negative_reversed_count_", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  local carry = 0\n  local digit\n  for i = 1, shift do\n\
    \    digit = digits[i]\n    carry = digit + carry\n    digits[i] = carry % 10\n\
    \    carry = carry / 10\n    result = digit .. result\n  end\n  if carry > 0 then\n\
    \    result = result .. \"1\"\n  end\n  return result\nend", "  local digits =\
    \ x:reverse()\n  local result = \"\"\n  for i = 1, shift do\n    local digit =\
    \ digits[i]\n    digits[i] = digits[#digits]\n    digits[#digits] = digit\n  \
    \  result = result .. digit\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n \
    \   digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  local carry = 0\n  for i = 1, #digits do\n    local digit =\
    \ tonumber(digits[i])\n    local digit = digit + carry\n    carry = digit / 10\n\
    \    digit = digit % 10\n    result = result .. tostring(digit)\n  end\n  if shift\
    \ > #digits then\n    return result .. tostring(carry)\n  else\n    return result\
    \ .. tostring(carry) .. digits[#digits]\n  end\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shifts = math.floor(math.log(shift, 2))\n  for\
    \ i = 1, shifts do\n    local digit = tonumber(digits:sub(1, -1))\n    digit =\
    \ digit + math.floor((digit - 1) / math.pow(2, i))\n    digit = digit % math.pow(2,\
    \ i)\n    result = result .. tostring(digit)\n  end\n  return result\nend", " \
    \ local digits = tostring(x)\n  local result = \"\"\n  local shifts = math.floor(math.log(shift,\
    \ 10))\n  local shifts_remaining = shifts - 1\n  while shifts_remaining > 0 do\n\
    \    local digit = tonumber(digits)\n    digits = tostring(digit / 10 * 10 + digit\
    \ % 10)\n    result = tostring(digit..result)\n    shifts_remaining = shifts_remaining\
    \ - 1\n  end\n  return result\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ 10) + 1)\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    local carry = digit - math.floor(digit)\n    digit = math.floor(digit)\n\
    \    if carry > 0 then\n      result = string.format(\"%s%0*d\", result, shift,\
    \ carry)\n    end\n    result = string.format(\"%s%d\", result, digit)\n    x\
    \ = math.floor(x / 10)\n  end\n  if x > 0 then\n    result = string.format(\"\
    %s%0*d\", result, shift, x)\n  end\n  return result\nend", "  local digits = x:reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = math.floor(math.log10(shift)) + 1\n  local shift_digits_power\
    \ = math.pow(10, shift_digits)\n  local shift_digits_power_2 = math.pow(10, shift_digits\
    \ - 1)\n  local shift_digits_power_3 = math.pow(10, shift_digits - 2)\n  local\
    \ shift_digits_power_4 = math.pow(10, shift_digits - 3)\n  local shift_digits_power_5\
    \ = math.pow(10, shift_digits - 4)\n  local shift_digits_power_6 = math.pow(10,\
    \ shift_digits - 5)\n  local shift_digits_power_7 = math.pow(10, shift_digits\
    \ - 6)\n  local shift_digits_power_8 = math.pow(10, shift_digits - 7)\n  local\
    \ shift_digits_power_9 = math.pow(10, shift_digits - 8)\n  local shift_digits_power_10\
    \ = math.pow(10, shift_digits - 9)\n  local shift_digits_power_11 = math.pow(10,\
    \ shift_digits - 10)\n  local shift_digits_power_12 = math.pow(10, shift_digits\
    \ - 11)\n  local shift_digits_power_13 = math.pow(10, shift_digits - 12)\n  local\
    \ shift_digits_power_14 = math.pow(10, shift_digits - 13)\n  local shift_digits_power_15\
    \ = math.pow(10, shift_digits - 14)\n  local shift_digits_power_16 = math.pow(10,\
    \ shift_digits - 15)\n  local shift_digits_power_17 = math.pow(10, shift_digits\
    \ - 16)\n  local shift_digits_power_18 = math.pow(10, shift_digits - 17)\n  local\
    \ shift_digits_power_19 = math.pow(10, shift_digits - 18)\n  local shift_digits_power_20\
    \ = math.pow(10, shift_digits - 19)\n  local shift_digits_power_21 = math.pow(10,\
    \ shift_digits - 20)\n  local shift_digits_power_22 = math.pow(10, shift_digits\
    \ - 21)\n  local shift_digits_power_23 = math.pow(10, shift_digits - 22)\n  local\
    \ shift_digits_power_24 = math.pow(10, shift_digits - 23)\n  local shift_digits_power_25\
    \ = math.pow(10, shift_digits - 24)\n  local shift_digits_power_26 = math.pow(10,\
    \ shift_digits - 25)\n  local shift_digits_power_27 = math.pow(10, shift_digits\
    \ - 26)\n  local shift_digits_power_28 = math.pow(10, shift_digits - 27)\n  local\
    \ shift_digits_power_29 = math.pow(10, shift_digits - 28)\n  local shift_digits_power_30\
    \ = math.pow(10, shift_digits - 29)\n  local shift_digits_power_31 = math.pow(10,\
    \ shift_", "  local digits = x:gsub(\"%d+\", function (digit)\n    local digit\
    \ = tonumber(digit)\n    if digit == 0 then\n      return \"0\"\n    end\n   \
    \ local digits = math.floor(math.log(digit) / math.log(10) + 1)\n    if digits\
    \ < shift then\n      digits = shift - digits\n    end\n    digits = digits +\
    \ shift\n    digits = digits - math.floor(digits)\n    digits = digits * 10\n\
    \    return digits:format()\n  end)\n  return digits\nend", "  if shift > math.floor(math.log(x,\
    \ 10)) then\n    return string.reverse(x)\n  else\n    local digits = math.floor(math.log(x,\
    \ 10))\n    local result = \"\"\n    local carry = 0\n    for i = 1, digits do\n\
    \      local digit = math.floor((x - math.floor(x) / math.pow(2, shift)) * math.pow(2,\
    \ shift))\n      result = string.rep(\"0\", math.floor(math.log2(digit)) + 1)\
    \ + result\n      x = math.floor(x / math.pow(2, shift))\n      carry = digit\
    \ + carry\n    end\n    if carry > 0 then\n      result = string.rep(\"0\", math.floor(math.log2(carry))\
    \ + 1) + result\n    end\n    return result\n  end\nend", "  if shift > math.floor(x:len())\
    \ then\n    return x:reverse()\n  end\n  local digits = x:reverse():sub(1, math.floor(x:len())\
    \ - shift)\n  return digits:reverse()\nend", "  local digits = x:reverse()\n \
    \ local result = \"\"\n  for i = 1, shift do\n    local digit = digits[i]\n  \
    \  digits[i] = digits[#digits]\n    digits[#digits] = digit\n    result = result\
    \ .. digit\n  end\n  return result\nend", "  local digits = x:reverse()\n  local\
    \ result = \"\"\n  local carry = 0\n  local digit\n  for i = 1, shift do\n   \
    \ digit = digits[i]\n    carry = digit + carry\n    digits[i] = carry\n    result\
    \ = digit .. result\n  end\n  if shift < #digits then\n    result = result ..\
    \ digits[#digits]\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shifts = math.floor(math.log(shift, 10))\n  local\
    \ shift = shifts - 1\n  while shift > 0 do\n    local digit = digits:sub(1, math.min(digits:len(),\
    \ math.floor(digits:len() / 2) + 1))\n    digits = digits:sub(2)\n    result =\
    \ digit .. result\n    shift = shift - 1\n  end\n  if shift > 0 then\n    local\
    \ digit = digits:sub(1, math.min(digits:len(), math.floor(digits:len() / 2) +\
    \ 1))\n    digits = digits:sub(2)\n    result = digit .. result\n  end\n  return\
    \ result\nend", "  local digits = x:reverse()\n  local result = \"\"\n  for i\
    \ = 1, shift do\n    result = result .. digits[i]\n  end\n  return result\nend",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log(shift,\
    \ 10))\n  local shift_digits_power = shift_digits + 1\n  local shift_digits_mask\
    \ = 1 << (shift_digits - 1)\n  local shift_digits_mask2 = 1 << (shift_digits -\
    \ 2)\n  local shift_digits_mask3 = 1 << (shift_digits - 3)\n  local shift_digits_mask4\
    \ = 1 << (shift_digits - 4)\n  local shift_digits_mask5 = 1 << (shift_digits -\
    \ 5)\n  local shift_digits_mask6 = 1 << (shift_digits - 6)\n  local shift_digits_mask7\
    \ = 1 << (shift_digits - 7)\n  local shift_digits_mask8 = 1 << (shift_digits -\
    \ 8)\n  local shift_digits_mask9 = 1 << (shift_digits - 9)\n  local shift_digits_mask10\
    \ = 1 << (shift_digits - 10)\n  local shift_digits_mask11 = 1 << (shift_digits\
    \ - 11)\n  local shift_digits_mask12 = 1 << (shift_digits - 12)\n  local shift_digits_mask13\
    \ = 1 << (shift_digits - 13)\n  local shift_digits_mask14 = 1 << (shift_digits\
    \ - 14)\n  local shift_digits_mask15 = 1 << (shift_digits - 15)\n  local shift_digits_mask16\
    \ = 1 << (shift_digits - 16)\n  local shift_digits_mask17 = 1 << (shift_digits\
    \ - 17)\n  local shift_digits_mask18 = 1 << (shift_digits - 18)\n  local shift_digits_mask19\
    \ = 1 << (shift_digits - 19)\n  local shift_digits_mask20 = 1 << (shift_digits\
    \ - 20)\n  local shift_digits_mask21 = 1 << (shift_digits - 21)\n  local shift_digits_mask22\
    \ = 1 << (shift_digits - 22)\n  local shift_digits_mask23 = 1 << (shift_digits\
    \ - 23)\n  local shift_digits_mask24 = 1 << (shift_digits - 24)\n  local shift_digits_mask25\
    \ = 1 << (shift_digits - 25)\n  local shift_digits_mask26 = 1 << (shift_digits\
    \ - 26)\n  local shift_digits_mask27 = 1 << (shift_digits - 27)\n  local shift_digits_mask28\
    \ = 1 << (shift_digits - 28)\n  local shift_digits_mask29 = 1 << (shift_digits\
    \ - 29)\n  local shift_digits_mask30 = 1 << (shift_digits - 30)\n  local shift_digits_mask31\
    \ = 1 << (shift_digits - 31)\n  local shift_digits_mask32 = 1 << (shift_digits\
    \ - 32)\n  local shift_digits_mask33 = 1 << (shift_digits - 33)\n  local shift_digits_",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log(shift,\
    \ 10))\n  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_mask\
    \ = shift_digits - shift_digits_power\n  local shift_digits_mask2 = shift_digits\
    \ - shift_digits_power + 1\n  local shift_digits_mask3 = shift_digits - shift_digits_power\
    \ + 2\n  local shift_digits_mask4 = shift_digits - shift_digits_power + 3\n  local\
    \ shift_digits_mask5 = shift_digits - shift_digits_power + 4\n  local shift_digits_mask6\
    \ = shift_digits - shift_digits_power + 5\n  local shift_digits_mask7 = shift_digits\
    \ - shift_digits_power + 6\n  local shift_digits_mask8 = shift_digits - shift_digits_power\
    \ + 7\n  local shift_digits_mask9 = shift_digits - shift_digits_power + 8\n  local\
    \ shift_digits_mask10 = shift_digits - shift_digits_power + 9\n  local shift_digits_mask11\
    \ = shift_digits - shift_digits_power + 10\n  local shift_digits_mask12 = shift_digits\
    \ - shift_digits_power + 11\n  local shift_digits_mask13 = shift_digits - shift_digits_power\
    \ + 12\n  local shift_digits_mask14 = shift_digits - shift_digits_power + 13\n\
    \  local shift_digits_mask15 = shift_digits - shift_digits_power + 14\n  local\
    \ shift_digits_mask16 = shift_digits - shift_digits_power + 15\n  local shift_digits_mask17\
    \ = shift_digits - shift_digits_power + 16\n  local shift_digits_mask18 = shift_digits\
    \ - shift_digits_power + 17\n  local shift_digits_mask19 = shift_digits - shift_digits_power\
    \ + 18\n  local shift_digits_mask20 = shift_digits - shift_digits_power + 19\n\
    \  local shift_digits_mask21 = shift_digits - shift_digits_power + 20\n  local\
    \ shift_digits_mask22 = shift_digits - shift_digits_power + 21\n  local shift_digits_mask23\
    \ = shift_digits - shift_digits_power + 22\n  local shift_digits_mask24 = shift_digits\
    \ - shift_digits_power + 23\n  local shift_digits_mask25 = shift_digits - shift_digits_power\
    \ + 24\n  local shift_digits_mask26 = shift_digits - shift_digits_power + 25\n\
    \  local shift_digits_mask27 = shift_digits - shift_digits_power + 26\n  local\
    \ shift_", "  local digits = tostring(x)\n  local result = \"\"\n  local shifts\
    \ = tostring(shift)\n  local shift_digits = tostring(shift)\n  local shift_digits_length\
    \ = shift_digits:len()\n  local shift_digits_reversed = shift_digits:reverse()\n\
    \  local shift_digits_reversed_length = shift_digits_reversed:len()\n  local shift_digits_reversed_reversed\
    \ = shift_digits_reversed:reverse()\n  local shift_digits_reversed_reversed_length\
    \ = shift_digits_reversed_reversed:len()\n  local shift_digits_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed:len()\n  local shift_digits_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed:len()\n  local shift_digits_reversed_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed_reversed:len()\n  local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed:len()\n\
    \  local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed:len()\n\
    \  local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed:len()\n\
    \  local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed:len()\n\
    \  local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed:len()\n\
    \  local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed:len()\n\
    \  local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
