language: lua
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            -- If n is divisible by i, then n is divisible by max_divisor\n\
    \            max_divisor = i\n            max_divisor_remainder = n % i\n    \
    \    end\n    end\n    return max_divisor, max_divisor_remainder\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqpw0mth.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmqpw0mth.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            local divisor_p = math.floor(n/i)\n            if divisor_p > max_divisor\
    \ then\n                max_divisor = divisor_p\n                max_divisor_p\
    \ = i\n            end\n        end\n    end\n    return max_divisor_p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1my66uq.lua:22:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpv1my66uq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n               \
    \ max_divisor_n = i\n            else\n                max_divisor = i\n     \
    \           max_divisor_p = n / i\n                max_divisor_n = i\n       \
    \     end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi911_8je.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpi911_8je.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div_n < i then\n                max_div =\
    \ i\n                max_div_n = i\n            else\n                max_div_n\
    \ = i\n            end\n        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqzjqwv0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphqzjqwv0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n / i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlgcg932.lua:23:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpxlgcg932.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = n / i\n            end\n        end\n    end\n    return\
    \ max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58262fv8.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp58262fv8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dv87xxh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1dv87xxh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div_n * i > n then\n\
    \                    max_div = i\n                    max_div_n = n\n        \
    \        end\n            end\n        end\n    end\n    return max_div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp928g2hef.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp928g2hef.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i \n            end\n        end\n    end\n    return max_div_n,\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ce2s3p4.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ce2s3p4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppk0gs6xd.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppk0gs6xd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div_n * i > n then\n\
    \                    max_div = i\n                    max_div_n = n\n        \
    \        end\n            end\n        end\n    end\n    return max_div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp928g2hef.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp928g2hef.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i \n            end\n        end\n    end\n    return max_div_n,\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ce2s3p4.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ce2s3p4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local divisor_p = i\n            local\
    \ divisor_n = n / i\n            if divisor_n > max_divisor then\n           \
    \     max_divisor = divisor_n\n                max_divisor_p = divisor_p\n   \
    \             max_divisor_n = divisor_n\n            end\n        end\n    end\n\
    \    return max_divisor_p, max_divisor_n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7us1d20.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpf7us1d20.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div < i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i \n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruml8gm9.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpruml8gm9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            local divisor = i\n            if divisor > max_divisor then\n  \
    \              max_divisor = divisor\n                max_divisor_value = i\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaykwg3k6.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpaykwg3k6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolek6vfo.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpolek6vfo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i\n            local n = n\
    \ / i\n            while n > 1 do\n                p = p + 1\n               \
    \ n = n / p\n            end\n            if n > max_divisor then\n          \
    \      max_divisor = n\n                max_divisor_p = p\n                max_divisor_n\
    \ = n\n            end\n        end\n    end\n    return max_divisor, p, max_divisor_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhhy0lgn.lua:29:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpwhhy0lgn.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n               \
    \ max_divisor_n = i\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdylfnou9.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdylfnou9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    local max_divisor_pp\
    \ = 1\n    local max_divisor_pn = 1\n    local max_divisor_ppp = 1\n    local\
    \ max_divisor_pnn = 1\n    local max_divisor_pppp = 1\n    local max_divisor_pnnn\
    \ = 1\n    local max_divisor_ppppp = 1\n    local max_divisor_pnnnn = 1\n    local\
    \ max_divisor_pppppp = 1\n    local max_divisor_pnnnnn = 1\n    local max_divisor_ppppppp\
    \ = 1\n    local max_divisor_pnnnnnn = 1\n    local max_divisor_pppppppp = 1\n\
    \    local max_divisor_pnnnnnnn = 1\n    local max_divisor_pppppppp = 1\n    local\
    \ max_divisor_pnnnnnnnn = 1\n    local max_divisor_ppppppppp = 1\n    local max_divisor_pnnnnnnnn\
    \ = 1\n    local max_divisor_ppppppppp = 1\n    local max_divisor_pnnnnnnnn =\
    \ 1\n    local max_divisor_pppppppppp = 1\n    local max_divisor_pnnnnnnnnn =\
    \ 1\n    local max_divisor_pppppppppp = 1\n    local max_divisor_pnnnnnnnnn =\
    \ 1\n    local max_divisor_pppppppppp = 1\n    local max_divisor_pnnnnnnnnn =\
    \ 1\n    local max_divisor_ppppppppppp = 1\n    local max_divisor_pnnnnnnnnnn\
    \ = 1\n    local max_divisor_pppppppppppp = 1\n    local max_divisor_pnnnnnnnnnnn\
    \ = 1\n    local max_divisor_pppppppppppp = 1\n    local max_divisor_pnnnnnnnnnnn\
    \ = 1\n    local max_divisor_ppppppppppppp = 1\n    local max_divisor_pnnnnnnnnnnnn\
    \ = 1\n    local max_divisor_pppppppppppp = 1\n    local max_divisor_pnnnnnnnnnnnnn\
    \ = 1\n    local max_divisor_pppppppppppppp = 1\n    local max_divisor_pnnnnnnnnnnnnnnn\
    \ = 1\n    local max_divisor_ppppppppppppppp = 1\n    local max_divisor_pnnnnnnnnnnnnnnn\
    \ = 1\n    local max_divisor_pppppppppppppppp = 1\n    local max_divisor_pnnnnnnnnnnnnnnnnn\
    \ = 1\n    local max_divisor_ppp\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_v9ltxh8.lua:60: ''end'' expected (to close ''function'' at
    line 2) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div_n * i > n then\n\
    \                    max_div = i\n                    max_div_n = n\n        \
    \        end\n            end\n        end\n    end\n    return max_div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp928g2hef.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp928g2hef.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_pp = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n                max_divisor_pp\
    \ = i\n            else\n                max_divisor_p = i\n                max_divisor_pp\
    \ = i\n            end\n        end\n    end\n    return max_divisor, max_divisor_p,\
    \ max_divisor_pp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxejg5c2.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphxejg5c2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 0\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72wzbebj.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp72wzbebj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            else\n                max_div_n = n / i\n            end\n\
    \        end\n    end\n    return max_div_n, max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyde05pc.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpuyde05pc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor_value < i then\n                max_divisor_value\
    \ = i\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwam7z_h4.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpwam7z_h4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolek6vfo.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpolek6vfo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy_pc__3.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphy_pc__3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div_n < i then\n                max_div =\
    \ i\n                max_div_n = i\n            else\n                max_div_n\
    \ = i\n            end\n        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqzjqwv0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphqzjqwv0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    local max_div_n_n = 1\n    for i = 2, n do\n    \
    \    if n % i == 0 then\n            if max_div < i then\n                max_div\
    \ = i\n                max_div_n = n\n                max_div_n_n = max_div_n_n\n\
    \            end\n            if max_div_n_n < i then\n                max_div_n_n\
    \ = i\n            end\n        end\n    end\n    return max_div, max_div_n_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldv18cg6.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpldv18cg6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy_pc__3.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphy_pc__3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i \n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdq13m4v.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptdq13m4v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            end\n        end\n    end\n    return max_div_n, max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_km29g6y.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_km29g6y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i\n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5s4i8vh.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx5s4i8vh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n               \
    \ max_divisor_n = i\n            else\n                max_divisor_p = max_divisor_p\
    \ * i / n\n                max_divisor_n = max_divisor_n * i / n\n           \
    \ end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcr1eaw4.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxcr1eaw4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i \n            end\n        end\n    end\n    return max_div_n,\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ce2s3p4.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ce2s3p4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i\n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5s4i8vh.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx5s4i8vh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i\n            end\n        end\n    end\n    return max_div_n,\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84nvgakv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp84nvgakv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolek6vfo.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpolek6vfo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i \n            end\n        end\n    end\n    return max_div_n,\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ce2s3p4.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ce2s3p4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div_n < i then\n                max_div =\
    \ i\n                max_div_n = i\n            else\n                max_div\
    \ = max_div * i + (i - 1)\n                max_div_n = i\n            end\n  \
    \      end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b49p5wc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9b49p5wc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dv87xxh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1dv87xxh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_divisor = 1\n\
    \  local max_divisor_remainder = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      max_divisor = i\n      max_divisor_remainder = n % i\n    end\n  end\n\
    \  return max_divisor, max_divisor_remainder\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpng22is5t.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpng22is5t.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div_n < i then\n                max_div =\
    \ i\n                max_div_n = i\n            else\n                max_div_n\
    \ = i\n            end\n        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqzjqwv0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphqzjqwv0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_pp = 1\n    local max_divisor_ppp\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local divisor_p\
    \ = math.floor(n/i)\n            local divisor_pp = math.floor(n/math.pow(i,2))\n\
    \            local divisor_ppp = math.floor(n/math.pow(i,3))\n            if divisor_pp\
    \ > max_divisor_pp then\n                max_divisor_p = divisor_p\n         \
    \       max_divisor_pp = divisor_pp\n                max_divisor_ppp = divisor_ppp\n\
    \            end\n        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmn2f7ix.lua:29:\
    \ expected: 7, actual: 1\nstack traceback:\n\t/tmp/tmpcmn2f7ix.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_square = 1\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            local divisor = i\n            local divisor_square = i *\
    \ i\n            if divisor_square > max_divisor_square then\n               \
    \ max_divisor = divisor\n                max_divisor_square = divisor_square\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_547wn9x.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_547wn9x.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div_n < i then\n                max_div =\
    \ i\n                max_div_n = n\n            else\n                max_div\
    \ = i\n                max_div_n = max_div_n * i\n            end\n        end\n\
    \    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld1_z6xc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpld1_z6xc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dv87xxh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1dv87xxh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            local divisor = i\n            if divisor > max_divisor then\n  \
    \              max_divisor = divisor\n                max_divisor_value = i\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaykwg3k6.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpaykwg3k6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            else\n                max_div_n = n / i\n            end\n\
    \        end\n    end\n    return max_div_n, max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyde05pc.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpuyde05pc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor_value < i then\n                max_divisor_value\
    \ = i\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwam7z_h4.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpwam7z_h4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i\n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5s4i8vh.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx5s4i8vh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div_n < i then\n                max_div =\
    \ i\n                max_div_n = i\n            else\n                max_div_n\
    \ = i\n            end\n        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqzjqwv0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphqzjqwv0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_div = nil\n \
    \ local max_div_n = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local\
    \ div = i / n\n      if div > max_div then\n        max_div = div\n        max_div_n\
    \ = n\n      end\n    end\n  end\n  return max_div_n, max_div\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qpnchh5.lua:8:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5qpnchh5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp5qpnchh5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_divisor = 1\n\
    \  local max_divisor_value = 1\n  local max_divisor_value_index = 1\n  for i =\
    \ 2, n do\n    if n % i == 0 then\n      local divisor = i\n      if divisor >\
    \ max_divisor then\n        max_divisor = divisor\n        max_divisor_value =\
    \ n\n        max_divisor_value_index = i\n      end\n    end\n  end\n  return\
    \ max_divisor, n, max_divisor_value_index, max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunco7o67.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpunco7o67.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_div = nil\n \
    \ local max_div_n = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_div\
    \ = i\n      max_div_n = n / i\n    end\n  end\n  return max_div_n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6e47b2q0.lua:19:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp6e47b2q0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy_pc__3.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphy_pc__3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    local max_div_n_n = 1\n    for i = 2, n do\n    \
    \    if n % i == 0 then\n            if max_div < i then\n                max_div\
    \ = i\n                max_div_n = n\n                max_div_n_n = max_div_n_n\n\
    \            end\n            max_div_n_n = max_div_n_n * i\n        end\n   \
    \ end\n    return max_div_n_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpliqmf8dp.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpliqmf8dp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    local max_divisor_pn\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local divisor\
    \ = i\n            local divisor_p = math.floor(n/i)\n            local divisor_pn\
    \ = math.floor(n/divisor_p)\n            if divisor > max_divisor then\n     \
    \           max_divisor = divisor\n                max_divisor_p = divisor_p\n\
    \                max_divisor_pn = divisor_pn\n            end\n        end\n \
    \   end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3l7lawty.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3l7lawty.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dv87xxh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1dv87xxh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i\n            end\n        end\n    end\n    return max_div_n,\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84nvgakv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp84nvgakv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i\n            local n = n\
    \ / i\n            while n > 1 do\n                p = p + 1\n               \
    \ n = n / p\n            end\n            if max_divisor < p then\n          \
    \      max_divisor = n\n                max_divisor_p = p\n                max_divisor_n\
    \ = n\n            end\n        end\n    end\n    return max_divisor_p, max_divisor_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qpgnax7.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8qpgnax7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolek6vfo.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpolek6vfo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dv87xxh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1dv87xxh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local divisor_p = i / max_divisor\n \
    \           local divisor_n = n / max_divisor\n            if divisor_p > max_divisor\
    \ then\n                max_divisor = divisor_p\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_n = divisor_n\n            elseif divisor_p\
    \ < max_divisor then\n                max_divisor = divisor_p\n              \
    \  max_divisor_p = divisor_p\n                max_divisor_n = divisor_n\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswr2b47g.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpswr2b47g.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_divisor = 1\n\
    \  local max_divisor_remainder = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      max_divisor = i\n      max_divisor_remainder = n % i\n    end\n  end\n\
    \  return max_divisor, max_divisor_remainder\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpng22is5t.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpng22is5t.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            local p = i\n            while n % p == 0 do\n                p =\
    \ p * 2\n            end\n            if p > max_divisor then\n              \
    \  max_divisor = p\n                max_divisor_p = i\n            end\n     \
    \   end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw65cukur.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpw65cukur.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            local divisor = i\n            while divisor > max_divisor do\n \
    \               max_divisor = divisor\n                max_divisor_value = divisor\n\
    \                divisor = max_divisor - 1\n            end\n        end\n   \
    \ end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk27kf4dl.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk27kf4dl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnm1j9pv.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjnm1j9pv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n               \
    \ max_divisor_n = i\n            else\n                max_divisor_p = max_divisor_p\
    \ / i\n                max_divisor_n = max_divisor_n * i\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyzl_cfa.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcyzl_cfa.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 0\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72wzbebj.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp72wzbebj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_div = nil\n \
    \ local max_div_n = 1\n  local max_div_d = 1\n  for d = 2, n do\n    if n % d\
    \ == 0 then\n      local div = n / d\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = d\n        max_div_d = div\n      end\n    end\n\
    \  end\n  return max_div_n, max_div_d\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni8kp2ys.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpni8kp2ys.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpni8kp2ys.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n               \
    \ max_divisor_n = i\n            else\n                max_divisor_p = max_divisor_p\
    \ * i / n\n                max_divisor_n = max_divisor_n * i / n\n           \
    \ end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcr1eaw4.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxcr1eaw4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    local max_div_n_n = 1\n    for i = 2, n do\n    \
    \    if n % i == 0 then\n            if max_div < i then\n                max_div\
    \ = i\n                max_div_n = n\n                max_div_n_n = max_div_n\n\
    \            end\n            if max_div_n_n < i then\n                max_div_n_n\
    \ = i\n            end\n        end\n    end\n    return max_div, max_div_n_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xayrpe3.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2xayrpe3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div > i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i\n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5s4i8vh.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx5s4i8vh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wz0uc.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpag2wz0uc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div_n < i then\n                max_div =\
    \ i\n                max_div_n = n\n            else\n                max_div_n\
    \ = max_div_n * i\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaur2xtmw.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpaur2xtmw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dv87xxh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1dv87xxh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            end\n        end\n    end\n    return max_div_n, max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_km29g6y.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_km29g6y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            end\n        end\n    end\n    return max_div_n, max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_km29g6y.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_km29g6y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div < i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2azlknw.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpr2azlknw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            local divisor_remainder =\
    \ n % i\n            if divisor_remainder > max_divisor_remainder then\n     \
    \           max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnmihuss.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmptnmihuss.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, n, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tjhv2dl.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9tjhv2dl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    local max_div_n_n = 1\n    for i = 2, n do\n    \
    \    if n % i == 0 then\n            local div = i / n\n            if div > max_div\
    \ then\n                max_div = div\n                max_div_n = i\n       \
    \         max_div_n_n = div * n\n            end\n        end\n    end\n    return\
    \ max_div, n_n, max_div_n_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8alncg44.lua:24:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8alncg44.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div < i then\n   \
    \                 max_div = i\n                    max_div_n = n\n           \
    \     end\n            end\n        end\n    end\n    return max_div, max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dv87xxh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1dv87xxh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n               \
    \ max_divisor_n = i\n            else\n                max_divisor_p = max_divisor_p\
    \ / i\n                max_divisor_n = max_divisor_n * i\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyzl_cfa.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcyzl_cfa.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            local divisor = i\n            if divisor > max_divisor then\n  \
    \              max_divisor = divisor\n                max_divisor_value = i\n\
    \            end\n        end\n    end\n    return max_divisor_value\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrwqwvfm.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmprrwqwvfm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolek6vfo.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpolek6vfo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            end\n        end\n    end\n    return max_div_n, max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_km29g6y.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_km29g6y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_div = nil\n \
    \ local max_div_n = 1\n  for i = 2, n do\n    if n % i == 0 then\n      if max_div\
    \ == nil then\n        max_div = i\n      else\n        if max_div > i then\n\
    \          max_div = i\n        end\n      end\n      max_div_n = max_div_n *\
    \ i\n    end\n  end\n  return max_div_n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkk6l5ji.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvkk6l5ji.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppk0gs6xd.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppk0gs6xd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_value = n\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8a3c7v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmn8a3c7v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_div = nil\n \
    \ local max_div_n = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local\
    \ div = i / n\n      if div > max_div then\n        max_div = div\n        max_div_n\
    \ = i\n      end\n    end\n  end\n  return max_div_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojr_861c.lua:8:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpojr_861c.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpojr_861c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_divisor = 1\n\
    \  local max_divisor_index = 1\n  local max_divisor_value = n\n  for i = 2, n\
    \ do\n    if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg7vgdmg.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxg7vgdmg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil or max_div < i then\n                max_div = i\n\
    \                max_div_n = n\n            else\n                max_div_n =\
    \ max_div_n * i \n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruml8gm9.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpruml8gm9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            end\n        end\n    end\n    return max_div_n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_977a19.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpq_977a19.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    local max_div_n_n = 1\n    for i = 2, n do\n    \
    \    if n % i == 0 then\n            if max_div_n_n > max_div_n then\n       \
    \         max_div = i\n                max_div_n = max_div_n_n\n            else\n\
    \                max_div_n_n = max_div_n_n\n            end\n        else\n  \
    \          max_div_n_n = max_div_n_n + 1\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0714kko.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo0714kko.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxo2uw9o.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfxo2uw9o.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = 1\n \
    \   local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n   \
    \         if max_div < i then\n                max_div = i\n                max_div_n\
    \ = n\n            end\n        end\n    end\n    return max_div_n, max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_km29g6y.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_km29g6y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = i\n            else\n                max_divisor_p\
    \ = max_divisor_p * i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33f9yhfv.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp33f9yhfv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_divisor = 1\n\
    \    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_index = i\n            else\n                max_divisor_index\
    \ = i\n            end\n        end\n    end\n    return max_divisor_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7yxi7ge.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7yxi7ge.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div, n_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i7o916i.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1i7o916i.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            elseif max_div > i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy_pc__3.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphy_pc__3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
