language: lua
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_number\
    \ = 2\n    local prime_found = false\n    local prime_found2 = false\n    local\
    \ prime_found3 = false\n    local prime_found4 = false\n    local prime_found5\
    \ = false\n    local prime_found6 = false\n    local prime_found7 = false\n  \
    \  local prime_found8 = false\n    local prime_found9 = false\n    local prime_found10\
    \ = false\n    local prime_found11 = false\n    local prime_found12 = false\n\
    \    local prime_found13 = false\n    local prime_found14 = false\n    local prime_found15\
    \ = false\n    local prime_found16 = false\n    local prime_found17 = false\n\
    \    local prime_found18 = false\n    local prime_found19 = false\n    local prime_found20\
    \ = false\n    local prime_found21 = false\n    local prime_found22 = false\n\
    \    local prime_found23 = false\n    local prime_found24 = false\n    local prime_found25\
    \ = false\n    local prime_found26 = false\n    local prime_found27 = false\n\
    \    local prime_found28 = false\n    local prime_found29 = false\n    local prime_found30\
    \ = false\n    local prime_found31 = false\n    local prime_found32 = false\n\
    \    local prime_found33 = false\n    local prime_found34 = false\n    local prime_found35\
    \ = false\n    local prime_found36 = false\n    local prime_found37 = false\n\
    \    local prime_found38 = false\n    local prime_found39 = false\n    local prime_found40\
    \ = false\n    local prime_found41 = false\n    local prime_found42 = false\n\
    \    local prime_found43 = false\n    local prime_found44 = false\n    local prime_found45\
    \ = false\n    local prime_found46 = false\n    local prime_found47 = false\n\
    \    local prime_found48 = false\n    local prime_found49 = false\n    local prime_found50\
    \ = false\n    local prime_found51 = false\n    local prime_found52 = false\n\
    \    local prime_found53 = false\n    local prime_found54 = false\n    local prime_found55\
    \ = false\n    local prime_found56 = false\n    local prime_found57 = false\n\
    \    local prime_found58 = false\n    local prime_found59 = false\n    local prime_found60\
    \ = false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3n_hjbpj.lua:84: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local f = math.floor(n/i)\n        if f ==\
    \ i then\n            factors[#factors+1] = i\n        else\n            factors[#factors+1]\
    \ = i\n            factors[#factors+1] = f -- f should be multiplied with itself\
    \ to form a product of factors\n        end\n        n = f\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk3hu06d.lua:22:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpzk3hu06d.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_product2 = 0\n    local prime_divisors_product3 = 0\n    local\
    \ prime_divisors_product4 = 0\n    local prime_divisors_product5 = 0\n    local\
    \ prime_divisors_product6 = 0\n    local prime_divisors_product7 = 0\n    local\
    \ prime_divisors_product8 = 0\n    local prime_divisors_product9 = 0\n    local\
    \ prime_divisors_product10 = 0\n    local prime_divisors_product11 = 0\n    local\
    \ prime_divisors_product12 = 0\n    local prime_divisors_product13 = 0\n    local\
    \ prime_divisors_product14 = 0\n    local prime_divisors_product15 = 0\n    local\
    \ prime_divisors_product16 = 0\n    local prime_divisors_product17 = 0\n    local\
    \ prime_divisors_product18 = 0\n    local prime_divisors_product19 = 0\n    local\
    \ prime_divisors_product20 = 0\n    local prime_divisors_product21 = 0\n    local\
    \ prime_divisors_product22 = 0\n    local prime_divisors_product23 = 0\n    local\
    \ prime_divisors_product24 = 0\n    local prime_divisors_product25 = 0\n    local\
    \ prime_divisors_product26 = 0\n    local prime_divisors_product27 = 0\n    local\
    \ prime_divisors_product28 = 0\n    local prime_divisors_product29 = 0\n    local\
    \ prime_divisors_product30 = 0\n    local prime_divisors_product31 = 0\n    local\
    \ prime_divisors_product32 = 0\n    local prime_divisors_product33 = 0\n    local\
    \ prime_divisors_product34 = 0\n    local prime_divisors_product35 = 0\n    local\
    \ prime_divisors_product36 = 0\n    local prime_divisors_product37 = 0\n    local\
    \ prime_divisors_product38 = 0\n    local prime_divisors_product39 = 0\n    local\
    \ prime_divisors_product40 = 0\n    local prime_divisors_product41 = 0\n    local\
    \ prime_divisors_product42 = 0\n    local prime_divisors_product43 = 0\n    local\
    \ prime_divisors_product44 = 0\n    local prime_divisors_product45 = 0\n    local\
    \ prime_divisors_product46 = 0\n    local prime_divisors_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyfugc0ma.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factors\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_sum2 = 0\n    local\
    \ prime_divisors_sum3 = 0\n    local prime_divisors_sum4 = 0\n    local prime_divisors_sum5\
    \ = 0\n    local prime_divisors_sum6 = 0\n    local prime_divisors_sum7 = 0\n\
    \    local prime_divisors_sum8 = 0\n    local prime_divisors_sum9 = 0\n    local\
    \ prime_divisors_sum10 = 0\n    local prime_divisors_sum11 = 0\n    local prime_divisors_sum12\
    \ = 0\n    local prime_divisors_sum13 = 0\n    local prime_divisors_sum14 = 0\n\
    \    local prime_divisors_sum15 = 0\n    local prime_divisors_sum16 = 0\n    local\
    \ prime_divisors_sum17 = 0\n    local prime_divisors_sum18 = 0\n    local prime_divisors_sum19\
    \ = 0\n    local prime_divisors_sum20 = 0\n    local prime_divisors_sum21 = 0\n\
    \    local prime_divisors_sum22 = 0\n    local prime_divisors_sum23 = 0\n    local\
    \ prime_divisors_sum24 = 0\n    local prime_divisors_sum25 = 0\n    local prime_divisors_sum26\
    \ = 0\n    local prime_divisors_sum27 = 0\n    local prime_divisors_sum28 = 0\n\
    \    local prime_divisors_sum29 = 0\n    local prime_divisors_sum30 = 0\n    local\
    \ prime_divisors_sum31 = 0\n    local prime_divisors_sum32 = 0\n    local prime_divisors_sum33\
    \ = 0\n    local prime_divisors_sum34 = 0\n    local prime_divisors_sum35 = 0\n\
    \    local prime_divisors_sum36 = 0\n    local prime_divisors_sum37 = 0\n    local\
    \ prime_divisors_sum38 = 0\n    local prime_divisors_sum39 = 0\n    local prime_divisors_sum40\
    \ = 0\n    local prime_divisors_sum41 = 0\n    local prime_divisors_sum42 = 0\n\
    \    local prime_divisors_sum43 = 0\n    local prime_divisors_sum44 = 0\n    local\
    \ prime_divisors_sum45 = 0\n    local prime_divisors_sum46 = 0\n    local prime_divisors_sum47\
    \ = 0\n    local prime_divisors_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3t_5nj47.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_factors = {}\n    local prime_factors_count = 0\n    local\
    \ prime_factors_sum = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    local prime_factors_sum_square\
    \ = 0\n    local prime_factors_product = 1\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpslp_tjbi.lua:82: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while factor ~= 1 do\n        factor = n / factor\n        factorization[i]\
    \ = factor\n        i = i + 1\n    end\n    for i = 2, #factorization do\n   \
    \     if factorization[i] ~= 1 then\n            factors[#factors + 1] = factorization[i]\n\
    \        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tu1tlo.lua:25:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmp_4tu1tlo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_number\
    \ = 2\n    local prime_numbers = {}\n    local prime_numbers_count = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp69yr2inz.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = math.floor(n/i)\n        if p ~= i then\n            factors[p]\
    \ = factors[p] or 1\n            factors[p] = factors[p] + 1\n        end\n  \
    \      i = i + 1\n    end\n    for i = 1, n do\n        factorization[i] = factors[i]\n\
    \    end\n    return factors, factorization\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv6jg0x4.lua:25:\
    \ expected: {2}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjv6jg0x4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = i\n        while n % p == 0 do\n            n = n / p\n    \
    \        i = i + 1\n        end\n        factors[i] = n\n        factorization[i]\
    \ = factors[i]\n    end\n    table.sort(factors, function(a, b) return a < b end)\n\
    \    table.sort(factorization, function(a, b) return a < b end)\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            table.insert(factors, factor)\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local primeFactorization\
    \ = {}\n    local primeFactors = {}\n    local primeFactorsCount = 0\n    local\
    \ primeFactorsCountMax = 0\n    local primeFactorsCountMaxCount = 0\n    local\
    \ primeFactorsCountMaxCountMax = 0\n    local primeFactorsCountMaxCountMax = 0\n\
    \    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaymwv089.lua:66: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = math.floor(n/i)\n        if p*i > n then\n            factorization[p]\
    \ = i\n            factors[p] = i\n        end\n        i = i + 1\n    end\n \
    \   return factors, factorization\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v4v38nu.lua:22:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmp2v4v38nu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_factorization = {}\n    local prime_factors = {}\n    local\
    \ prime_factor_counter = 0\n    local prime_prime_factorization = {}\n    local\
    \ prime_prime_factors = {}\n    local prime_prime_factor_counter = 0\n    local\
    \ prime_prime_prime_factorization = {}\n    local prime_prime_prime_factors =\
    \ {}\n    local prime_prime_prime_factor_counter = 0\n    local prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_factors = {}\n    local prime_prime_prime_prime_factor_counter\
    \ = 0\n    local prime_prime_prime_prime_prime_factorization = {}\n    local prime_prime_prime_prime_prime_factors\
    \ = {}\n    local prime_prime_prime_prime_prime_factor_counter = 0\n    local\
    \ prime_prime_prime_prime_prime_prime_factorization = {}\n    local prime_prime_prime_prime_prime_prime_factors\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_factor_counter = 0\n   \
    \ local prime_prime_prime_prime_prime_prime_prime_factorization = {}\n    local\
    \ prime_prime_prime_prime_prime_prime_prime_factors = {}\n    local prime_prime_prime_prime_prime_prime_prime_factor_counter\
    \ = 0\n    local prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_factors = {}\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_factor_counter = 0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_factors\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_counter\
    \ = 0\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_factors\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_counter\
    \ = 0\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp941tjvs3.lua:55: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     if n ~= 1 then\n            factors[#factors + 1] = factor\n        end\n\
    \    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst57k2_j.lua:25:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpst57k2_j.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 1\n    local prime_counter2 = 0\n    local prime_counter3 = 0\n    local prime_counter4\
    \ = 0\n    local prime_counter5 = 0\n    local prime_counter6 = 0\n    local prime_counter7\
    \ = 0\n    local prime_counter8 = 0\n    local prime_counter9 = 0\n    local prime_counter10\
    \ = 0\n    local prime_counter11 = 0\n    local prime_counter12 = 0\n    local\
    \ prime_counter13 = 0\n    local prime_counter14 = 0\n    local prime_counter15\
    \ = 0\n    local prime_counter16 = 0\n    local prime_counter17 = 0\n    local\
    \ prime_counter18 = 0\n    local prime_counter19 = 0\n    local prime_counter20\
    \ = 0\n    local prime_counter21 = 0\n    local prime_counter22 = 0\n    local\
    \ prime_counter23 = 0\n    local prime_counter24 = 0\n    local prime_counter25\
    \ = 0\n    local prime_counter26 = 0\n    local prime_counter27 = 0\n    local\
    \ prime_counter28 = 0\n    local prime_counter29 = 0\n    local prime_counter30\
    \ = 0\n    local prime_counter31 = 0\n    local prime_counter32 = 0\n    local\
    \ prime_counter33 = 0\n    local prime_counter34 = 0\n    local prime_counter35\
    \ = 0\n    local prime_counter36 = 0\n    local prime_counter37 = 0\n    local\
    \ prime_counter38 = 0\n    local prime_counter39 = 0\n    local prime_counter40\
    \ = 0\n    local prime_counter41 = 0\n    local prime_counter42 = 0\n    local\
    \ prime_counter43 = 0\n    local prime_counter44 = 0\n    local prime_counter45\
    \ = 0\n    local prime_counter46 = 0\n    local prime_counter47 = 0\n    local\
    \ prime_counter48 = 0\n    local prime_counter49 = 0\n    local prime_counter50\
    \ = 0\n    local prime_counter51 = 0\n    local prime_counter52 = 0\n    local\
    \ prime_counter53 = 0\n    local prime_counter54 = 0\n    local prime_counter55\
    \ = 0\n    local prime_counter56 = 0\n    local prime_counter57 = 0\n    local\
    \ prime_counter58 = 0\n    local prime_counter59 = 0\n    local prime_counter60\
    \ = 0\n    local prime_counter61 = 0\n    local prime_counter62 = 0\n    \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3pvyv4ui.lua:85: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         n = n / i\n            table.insert(factors, i)\n        end\n     \
    \   i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxi9dwyz.lua:20:\
    \ expected: {2}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpfxi9dwyz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_factors = {}\n    local prime_factors_counter = {}\n  \
    \  local prime_factors_counter2 = {}\n    local prime_factors_counter3 = {}\n\
    \    local prime_factors_counter4 = {}\n    local prime_factors_counter5 = {}\n\
    \    local prime_factors_counter6 = {}\n    local prime_factors_counter7 = {}\n\
    \    local prime_factors_counter8 = {}\n    local prime_factors_counter9 = {}\n\
    \    local prime_factors_counter10 = {}\n    local prime_factors_counter11 = {}\n\
    \    local prime_factors_counter12 = {}\n    local prime_factors_counter13 = {}\n\
    \    local prime_factors_counter14 = {}\n    local prime_factors_counter15 = {}\n\
    \    local prime_factors_counter16 = {}\n    local prime_factors_counter17 = {}\n\
    \    local prime_factors_counter18 = {}\n    local prime_factors_counter19 = {}\n\
    \    local prime_factors_counter20 = {}\n    local prime_factors_counter21 = {}\n\
    \    local prime_factors_counter22 = {}\n    local prime_factors_counter23 = {}\n\
    \    local prime_factors_counter24 = {}\n    local prime_factors_counter25 = {}\n\
    \    local prime_factors_counter26 = {}\n    local prime_factors_counter27 = {}\n\
    \    local prime_factors_counter28 = {}\n    local prime_factors_counter29 = {}\n\
    \    local prime_factors_counter30 = {}\n    local prime_factors_counter31 = {}\n\
    \    local prime_factors_counter32 = {}\n    local prime_factors_counter33 = {}\n\
    \    local prime_factors_counter34 = {}\n    local prime_factors_counter35 = {}\n\
    \    local prime_factors_counter36 = {}\n    local prime_factors_counter37 = {}\n\
    \    local prime_factors_counter38 = {}\n    local prime_factors_counter39 = {}\n\
    \    local prime_factors_counter40 = {}\n    local prime_factors_counter41 = {}\n\
    \    local prime_factors_counter42 = {}\n    local prime_factors_counter43 = {}\n\
    \    local prime_factors_counter44 = {}\n    local prime_factors_counter45 = {}\n\
    \    local prime_factors_counter46 = {}\n    local prime_factors_counter47 = {}\n\
    \    local prime_factors_counter48 = {}\n    local prime_factors_counter49 = {}\n\
    \    local prime_factors_counter50 = {}\n    local prime_factors_counter51 = {}\n\
    \    local prime_factors_counter52 = {}\n    local prime_factors_counter53 = {}\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplebjii4e.lua:77: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     table.insert(factors, factor)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputqbar39.lua:24:\
    \ expected: {2, 2}\nactual: {2, 1, 1}\nstack traceback:\n\t/tmp/tmputqbar39.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            factors[#factors+1] = factor\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[#factors + 1] = i\n    \
    \        factorization[#factorization + 1] = i\n        end\n        i = i + 1\n\
    \    end\n    local prime_factors = {}\n    local prime_factorization = {}\n \
    \   for i = 1, #factors do\n        local factor = 1\n        for j = 1, #factors\
    \ do\n            if factors[j] == factors[i] then\n                factor = factor\
    \ * factors[j]\n            end\n        end\n        prime_factors[#prime_factors\
    \ + 1] = factor\n        prime_factorization[#prime_factorization + 1] = factors[i]\n\
    \    end\n    return prime_factors, prime_factorization\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjn6f5e0.lua:33:\
    \ expected: {2}\nactual: {1}\nstack traceback:\n\t/tmp/tmppjn6f5e0.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2zweomr.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpj2zweomr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = factor * i\n            i = i + 1\n  \
    \      else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s7i7sgc.lua:24:\
    \ expected: {2, 2}\nactual: {8}\nstack traceback:\n\t/tmp/tmp1s7i7sgc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local factor = 1\n        while n % i == 0 do\n            factor = factor\
    \ * i\n            n = n / i\n        end\n        factors[#factors + 1] = factor\n\
    \        factorization[factor] = i\n        i = i + 1\n    end\n    return factors,\
    \ factorization\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal primes = {}\n\tlocal prime_table =\
    \ {}\n\tlocal prime_table_len = 0\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len = 1\n\tlocal prime_table_len\
    \ = 1\n\tlocal prime_table_len = 1\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ylsc166.lua:85: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_primes = {}\n    local prime_prime_factorization = {}\n\
    \    local prime_prime_primes = {}\n    local prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_primes = {}\n    local prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_primes = {}\n    local prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_primes = {}\n    local prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_primes = {}\n    local prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_primes = {}\n    local\
    \ prime_prime_prime_prime_prime_prime_prime_prime_factorization = {}\n    local\
    \ prime_prime_prime_prime_prime_prime_prime_prime_primes = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_factorization\
    \ = {}\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_primes\
    \ = {}\n    local prime_prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpooh5ap9z.lua:49: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2zweomr.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpj2zweomr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_number\
    \ = 2\n    local prime_found = false\n    local prime_found2 = false\n    local\
    \ prime_found3 = false\n    local prime_found4 = false\n    local prime_found5\
    \ = false\n    local prime_found6 = false\n    local prime_found7 = false\n  \
    \  local prime_found8 = false\n    local prime_found9 = false\n    local prime_found10\
    \ = false\n    local prime_found11 = false\n    local prime_found12 = false\n\
    \    local prime_found13 = false\n    local prime_found14 = false\n    local prime_found15\
    \ = false\n    local prime_found16 = false\n    local prime_found17 = false\n\
    \    local prime_found18 = false\n    local prime_found19 = false\n    local prime_found20\
    \ = false\n    local prime_found21 = false\n    local prime_found22 = false\n\
    \    local prime_found23 = false\n    local prime_found24 = false\n    local prime_found25\
    \ = false\n    local prime_found26 = false\n    local prime_found27 = false\n\
    \    local prime_found28 = false\n    local prime_found29 = false\n    local prime_found30\
    \ = false\n    local prime_found31 = false\n    local prime_found32 = false\n\
    \    local prime_found33 = false\n    local prime_found34 = false\n    local prime_found35\
    \ = false\n    local prime_found36 = false\n    local prime_found37 = false\n\
    \    local prime_found38 = false\n    local prime_found39 = false\n    local prime_found40\
    \ = false\n    local prime_found41 = false\n    local prime_found42 = false\n\
    \    local prime_found43 = false\n    local prime_found44 = false\n    local prime_found45\
    \ = false\n    local prime_found46 = false\n    local prime_found47 = false\n\
    \    local prime_found48 = false\n    local prime_found49 = false\n    local prime_found50\
    \ = false\n    local prime_found51 = false\n    local prime_found52 = false\n\
    \    local prime_found53 = false\n    local prime_found54 = false\n    local prime_found55\
    \ = false\n    local prime_found56 = false\n    local prime_found57 = false\n\
    \    local prime_found58 = false\n    local prime_found59 = false\n    local prime_found60\
    \ = false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3n_hjbpj.lua:84: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    table.insert(factors, n)\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yxxifhr.lua:19:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp4yxxifhr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_factorization = {}\n    local prime_counter = 0\n    local\
    \ prime_counter = 1\n    local prime_counter = 1\n    local prime_counter = 1\n\
    \    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    local prime_counter\
    \ = 1\n    local prime_counter = 1\n    local prime_counter = 1\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx__p4fz8.lua:94: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    local factor_count = 1\n    while i <= n do\n        if n % i == 0 then\n\
    \            factor = i -- save factor for later use\n            factorization[factor]\
    \ = factor_count\n            factor_count = 1\n        else\n            factor_count\
    \ = factor_count + 1\n        end\n        i = i + 1\n    end\n    for i = 1,\
    \ n do\n        factors[factorization[i]] = factors[i]\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirw00ce8.lua:29:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpirw00ce8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal factor = 1\n\tlocal i = 1\n\twhile\
    \ i <= n do\n\t\tfactor = factor * i\n\t\ti = i + 1\n\tend\n\twhile i <= n do\n\
    \t\tlocal p = math.floor((n - factor) / factor)\n\t\tif p ~= 0 then\n\t\t\tfactors[p]\
    \ = factors[p] + 1\n\t\t\tfactorization[p] = factorization[p] .. factors[p]\n\t\
    \tend\n\t\ti = i + 1\n\tend\n\tlocal factorization = {}\n\tfor i = 1, #factors\
    \ do\n\t\tfactorization[i] = factorization[i] .. factors[i]\n\tend\n\treturn factorization\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9ukr6ru.lua:31:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmps9ukr6ru.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_table\
    \ = {}\n    local prime_table_len = 0\n    local prime_table_len2 = 0\n    local\
    \ prime_table_len3 = 0\n    local prime_table_len4 = 0\n    local prime_table_len5\
    \ = 0\n    local prime_table_len6 = 0\n    local prime_table_len7 = 0\n    local\
    \ prime_table_len8 = 0\n    local prime_table_len9 = 0\n    local prime_table_len10\
    \ = 0\n    local prime_table_len11 = 0\n    local prime_table_len12 = 0\n    local\
    \ prime_table_len13 = 0\n    local prime_table_len14 = 0\n    local prime_table_len15\
    \ = 0\n    local prime_table_len16 = 0\n    local prime_table_len17 = 0\n    local\
    \ prime_table_len18 = 0\n    local prime_table_len19 = 0\n    local prime_table_len20\
    \ = 0\n    local prime_table_len21 = 0\n    local prime_table_len22 = 0\n    local\
    \ prime_table_len23 = 0\n    local prime_table_len24 = 0\n    local prime_table_len25\
    \ = 0\n    local prime_table_len26 = 0\n    local prime_table_len27 = 0\n    local\
    \ prime_table_len28 = 0\n    local prime_table_len29 = 0\n    local prime_table_len30\
    \ = 0\n    local prime_table_len31 = 0\n    local prime_table_len32 = 0\n    local\
    \ prime_table_len33 = 0\n    local prime_table_len34 = 0\n    local prime_table_len35\
    \ = 0\n    local prime_table_len36 = 0\n    local prime_table_len37 = 0\n    local\
    \ prime_table_len38 = 0\n    local prime_table_len39 = 0\n    local prime_table_len40\
    \ = 0\n    local prime_table_len41 = 0\n    local prime_table_len42 = 0\n    local\
    \ prime_table_len43 = 0\n    local prime_table_len44 = 0\n    local prime_table_len45\
    \ = 0\n    local prime_table_len46 = 0\n    local prime_table_len47 = 0\n    local\
    \ prime_table_len48 = 0\n    local prime_table_len49 = 0\n    local prime_table_len50\
    \ = 0\n    local prime_table_len51 = 0\n    local prime_table_len52 = 0\n    local\
    \ prime_table_len53 = 0\n    local prime_table_len54 = 0\n    local prime_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4ja_2801.lua:78: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_factors = {}\n    local prime_factors_count = 0\n    local\
    \ prime_factors_sum = 0\n    local prime_factors_product = 1\n    local prime_factors_sum2\
    \ = 0\n    local prime_factors_product2 = 0\n    local prime_factors_sum3 = 0\n\
    \    local prime_factors_product3 = 0\n    local prime_factors_sum4 = 0\n    local\
    \ prime_factors_product4 = 0\n    local prime_factors_sum5 = 0\n    local prime_factors_product5\
    \ = 0\n    local prime_factors_sum6 = 0\n    local prime_factors_product6 = 0\n\
    \    local prime_factors_sum7 = 0\n    local prime_factors_product7 = 0\n    local\
    \ prime_factors_sum8 = 0\n    local prime_factors_product8 = 0\n    local prime_factors_sum9\
    \ = 0\n    local prime_factors_product9 = 0\n    local prime_factors_sum10 = 0\n\
    \    local prime_factors_product10 = 0\n    local prime_factors_sum11 = 0\n  \
    \  local prime_factors_product11 = 0\n    local prime_factors_sum12 = 0\n    local\
    \ prime_factors_product12 = 0\n    local prime_factors_sum13 = 0\n    local prime_factors_product13\
    \ = 0\n    local prime_factors_sum14 = 0\n    local prime_factors_product14 =\
    \ 0\n    local prime_factors_sum15 = 0\n    local prime_factors_product15 = 0\n\
    \    local prime_factors_sum16 = 0\n    local prime_factors_product16 = 0\n  \
    \  local prime_factors_sum17 = 0\n    local prime_factors_product17 = 0\n    local\
    \ prime_factors_sum18 = 0\n    local prime_factors_product18 = 0\n    local prime_factors_sum19\
    \ = 0\n    local prime_factors_product19 = 0\n    local prime_factors_sum20 =\
    \ 0\n    local prime_factors_product20 = 0\n    local prime_factors_sum21 = 0\n\
    \    local prime_factors_product21 = 0\n    local prime_factors_sum22 = 0\n  \
    \  local prime_factors_product22 = 0\n    local prime_factors_sum23 = 0\n    local\
    \ prime_factors_product23 = 0\n    local prime_factors_sum24 = 0\n    local prime_factors_product24\
    \ = 0\n    local prime_factors_sum25 = 0\n    local prime_factors_product25 =\
    \ 0\n    local prime_factors_sum26 = 0\n    local prime_factors_product26 = 0\n\
    \    local prime_factors_sum27 = 0\n    \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfdi_0w5p.lua:79: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_factors = {}\n    local prime_factors_counter = 0\n   \
    \ local prime_factors_counter2 = 0\n    local prime_factors_counter3 = 0\n   \
    \ local prime_factors_counter4 = 0\n    local prime_factors_counter5 = 0\n   \
    \ local prime_factors_counter6 = 0\n    local prime_factors_counter7 = 0\n   \
    \ local prime_factors_counter8 = 0\n    local prime_factors_counter9 = 0\n   \
    \ local prime_factors_counter10 = 0\n    local prime_factors_counter11 = 0\n \
    \   local prime_factors_counter12 = 0\n    local prime_factors_counter13 = 0\n\
    \    local prime_factors_counter14 = 0\n    local prime_factors_counter15 = 0\n\
    \    local prime_factors_counter16 = 0\n    local prime_factors_counter17 = 0\n\
    \    local prime_factors_counter18 = 0\n    local prime_factors_counter19 = 0\n\
    \    local prime_factors_counter20 = 0\n    local prime_factors_counter21 = 0\n\
    \    local prime_factors_counter22 = 0\n    local prime_factors_counter23 = 0\n\
    \    local prime_factors_counter24 = 0\n    local prime_factors_counter25 = 0\n\
    \    local prime_factors_counter26 = 0\n    local prime_factors_counter27 = 0\n\
    \    local prime_factors_counter28 = 0\n    local prime_factors_counter29 = 0\n\
    \    local prime_factors_counter30 = 0\n    local prime_factors_counter31 = 0\n\
    \    local prime_factors_counter32 = 0\n    local prime_factors_counter33 = 0\n\
    \    local prime_factors_counter34 = 0\n    local prime_factors_counter35 = 0\n\
    \    local prime_factors_counter36 = 0\n    local prime_factors_counter37 = 0\n\
    \    local prime_factors_counter38 = 0\n    local prime_factors_counter39 = 0\n\
    \    local prime_factors_counter40 = 0\n    local prime_factors_counter41 = 0\n\
    \    local prime_factors_counter42 = 0\n    local prime_factors_counter43 = 0\n\
    \    local prime_factors_counter44 = 0\n    local prime_factors_counter45 = 0\n\
    \    local prime_factors_counter46 = 0\n    local prime_factors_counter47 = 0\n\
    \    local prime_factors_counter48 = 0\n    local prime_factors_counter49 = 0\n\
    \    local prime_factors_counter50 = 0\n    local prime_factors_counter51 = 0\n\
    \    local prime_factors_counter52 = 0\n    local prime_factors_counter53 = 0\n\
    \    local prime_factors_counter54 = 0\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp48u79qhb.lua:79: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            table.insert(factors, factor)\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    table.insert(factors, n)\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yxxifhr.lua:19:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp4yxxifhr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local primeFactorization\
    \ = {}\n    local primeFactors = {}\n    local primeFactorsCount = 0\n    local\
    \ primeFactorsCountMax = 0\n    local primeFactorsCountMaxCount = 0\n    local\
    \ primeFactorsCountMaxCountMax = 0\n    local primeFactorsCountMaxCountMax = 0\n\
    \    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local primeFactorsCountMaxCountMaxMax = 0\n    local primeFactorsCountMaxCountMaxMax\
    \ = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaymwv089.lua:66: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while factor ~= 1 do\n    \
    \    if n % factor == 0 then\n            i = i + 1\n            factors[#factors\
    \ + 1] = factor\n            factor = n / factor\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc80hve45.lua:21:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpc80hve45.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factorization[i] = factorization[i]\
    \ or {}\n            factorization[i][n] = factorization[i][n] or {}\n       \
    \     factorization[i][n][#factorization[i][n] + 1] = i\n            n = n / i\n\
    \            i = i + 1\n        else\n            i = i + 1\n        end\n   \
    \ end\n    for i = 1, #factorization do\n        for j = 1, #factorization[i]\
    \ do\n            for k = 1, #factorization[i][j] do\n                factors[#factors\
    \ + 1] = factors[#factors + 1] or {}\n                factors[#factors + 1][#factors[#factors\
    \ + 1] + 1] = factorization[i][j][k]\n            end\n        end\n    end\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps120ysfp.lua:33:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmps120ysfp.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while factor ~= 1 do\n        factor = n / factor\n        factorization[i]\
    \ = factor\n        i = i + 1\n    end\n    i = i - 1\n    while i ~= 0 do\n \
    \       factors[#factors+1] = factorization[i]\n        i = i - 1\n    end\n \
    \   return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nkr_4h2.lua:25:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmp3nkr_4h2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local factor = 1\n     \
    \   for j = 1, i do\n            if n % i == 0 then\n                factor =\
    \ factor * j\n                n = n / i\n                break\n            end\n\
    \        end\n        if n ~= 1 then\n            table.insert(factors, factor)\n\
    \        end\n        i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53acokh5.lua:27:\
    \ expected: {2}\nactual: {1}\nstack traceback:\n\t/tmp/tmp53acokh5.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_counter2 = 0\n    local prime_counter3 = 0\n    local prime_counter4\
    \ = 0\n    local prime_counter5 = 0\n    local prime_counter6 = 0\n    local prime_counter7\
    \ = 0\n    local prime_counter8 = 0\n    local prime_counter9 = 0\n    local prime_counter10\
    \ = 0\n    local prime_counter11 = 0\n    local prime_counter12 = 0\n    local\
    \ prime_counter13 = 0\n    local prime_counter14 = 0\n    local prime_counter15\
    \ = 0\n    local prime_counter16 = 0\n    local prime_counter17 = 0\n    local\
    \ prime_counter18 = 0\n    local prime_counter19 = 0\n    local prime_counter20\
    \ = 0\n    local prime_counter21 = 0\n    local prime_counter22 = 0\n    local\
    \ prime_counter23 = 0\n    local prime_counter24 = 0\n    local prime_counter25\
    \ = 0\n    local prime_counter26 = 0\n    local prime_counter27 = 0\n    local\
    \ prime_counter28 = 0\n    local prime_counter29 = 0\n    local prime_counter30\
    \ = 0\n    local prime_counter31 = 0\n    local prime_counter32 = 0\n    local\
    \ prime_counter33 = 0\n    local prime_counter34 = 0\n    local prime_counter35\
    \ = 0\n    local prime_counter36 = 0\n    local prime_counter37 = 0\n    local\
    \ prime_counter38 = 0\n    local prime_counter39 = 0\n    local prime_counter40\
    \ = 0\n    local prime_counter41 = 0\n    local prime_counter42 = 0\n    local\
    \ prime_counter43 = 0\n    local prime_counter44 = 0\n    local prime_counter45\
    \ = 0\n    local prime_counter46 = 0\n    local prime_counter47 = 0\n    local\
    \ prime_counter48 = 0\n    local prime_counter49 = 0\n    local prime_counter50\
    \ = 0\n    local prime_counter51 = 0\n    local prime_counter52 = 0\n    local\
    \ prime_counter53 = 0\n    local prime_counter54 = 0\n    local prime_counter55\
    \ = 0\n    local prime_counter56 = 0\n    local prime_counter57 = 0\n    local\
    \ prime_counter58 = 0\n    local prime_counter59 = 0\n    local prime_counter60\
    \ = 0\n    local prime_counter61 = 0\n    local prime_counter62 = 0\n    local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpihfkpj5n.lua:85: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p == 1 then\n            factors[i] = 1\n        else\n          \
    \  factors[i] = p\n        end\n        n = i\n        i = i + 1\n    end\n  \
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph785pneg.lua:24:\
    \ expected: {2, 2}\nactual: {4}\nstack traceback:\n\t/tmp/tmph785pneg.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         factors[#factors+1] = i\n            n = n / i\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = factor(n)\n\tfor i = 1, #factorization do\n\t\t\
    local factor = factorization[i]\n\t\tif factor ~= n then\n\t\t\ttable.insert(factors,\
    \ factor)\n\t\tend\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbd8cqba.lua:6:\
    \ attempt to call global 'factor' (a nil value)\nstack traceback:\n\t/tmp/tmpfbd8cqba.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpfbd8cqba.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            factors[#factors+1] = factor\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while factor ~= 1 do\n    \
    \    factor = n / factor\n        factors[#factors + 1] = factor\n        i =\
    \ i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzk33sv4.lua:19:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmptzk33sv4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = i\n        while\
    \ n % p == 0 do\n            n = n / p\n            i = i + 1\n        end\n \
    \       factors[#factors + 1] = i\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = factor(n)\n    for i = 1, #factorization do\n\
    \        local factor = factorization[i]\n        if factor == 1 then\n      \
    \      factors[#factors + 1] = factor\n        else\n            local factors\
    \ = factorize(factor)\n            for j = 1, #factors do\n                table.insert(factors,\
    \ factor)\n            end\n            table.sort(factors)\n            table.insert(factors,\
    \ factor)\n            factors[#factors + 1] = factor\n        end\n    end\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoa9afe39.lua:6:\
    \ attempt to call global 'factor' (a nil value)\nstack traceback:\n\t/tmp/tmpoa9afe39.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpoa9afe39.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_counter2 = 0\n    local prime_counter3 = 0\n    local prime_counter4\
    \ = 0\n    local prime_counter5 = 0\n    local prime_counter6 = 0\n    local prime_counter7\
    \ = 0\n    local prime_counter8 = 0\n    local prime_counter9 = 0\n    local prime_counter10\
    \ = 0\n    local prime_counter11 = 0\n    local prime_counter12 = 0\n    local\
    \ prime_counter13 = 0\n    local prime_counter14 = 0\n    local prime_counter15\
    \ = 0\n    local prime_counter16 = 0\n    local prime_counter17 = 0\n    local\
    \ prime_counter18 = 0\n    local prime_counter19 = 0\n    local prime_counter20\
    \ = 0\n    local prime_counter21 = 0\n    local prime_counter22 = 0\n    local\
    \ prime_counter23 = 0\n    local prime_counter24 = 0\n    local prime_counter25\
    \ = 0\n    local prime_counter26 = 0\n    local prime_counter27 = 0\n    local\
    \ prime_counter28 = 0\n    local prime_counter29 = 0\n    local prime_counter30\
    \ = 0\n    local prime_counter31 = 0\n    local prime_counter32 = 0\n    local\
    \ prime_counter33 = 0\n    local prime_counter34 = 0\n    local prime_counter35\
    \ = 0\n    local prime_counter36 = 0\n    local prime_counter37 = 0\n    local\
    \ prime_counter38 = 0\n    local prime_counter39 = 0\n    local prime_counter40\
    \ = 0\n    local prime_counter41 = 0\n    local prime_counter42 = 0\n    local\
    \ prime_counter43 = 0\n    local prime_counter44 = 0\n    local prime_counter45\
    \ = 0\n    local prime_counter46 = 0\n    local prime_counter47 = 0\n    local\
    \ prime_counter48 = 0\n    local prime_counter49 = 0\n    local prime_counter50\
    \ = 0\n    local prime_counter51 = 0\n    local prime_counter52 = 0\n    local\
    \ prime_counter53 = 0\n    local prime_counter54 = 0\n    local prime_counter55\
    \ = 0\n    local prime_counter56 = 0\n    local prime_counter57 = 0\n    local\
    \ prime_counter58 = 0\n    local prime_counter59 = 0\n    local prime_counter60\
    \ = 0\n    local prime_counter61 = 0\n    local prime_counter62 = 0\n    local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpihfkpj5n.lua:85: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        factor = factor * i\n        if factor > n then\n\
    \            break\n        end\n        factorization[factor] = factorization[factor]\
    \ + 1 or 1\n        i = i + 1\n    end\n    for i = 1, n do\n        factors[factorization[i]]\
    \ = factors[factorization[i]] + 1 or 1\n    end\n    return factors\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwf4jl85f.lua:14:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpwf4jl85f.lua:14: in function 'candidate'\n\t/tmp/tmpwf4jl85f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = i\n        while n % p == 0 do\n            p = p - 1\n    \
    \    end\n        if p > 1 then\n            factors[#factors + 1] = p\n     \
    \       factorization[#factorization + 1] = p\n        end\n        i = i + 1\n\
    \    end\n    return factors, factorization\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5duu2ki.lua:25:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpe5duu2ki.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = factor * i\n            i = i + 1\n  \
    \      else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s7i7sgc.lua:24:\
    \ expected: {2, 2}\nactual: {8}\nstack traceback:\n\t/tmp/tmp1s7i7sgc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = math.floor(n/i)\n        factorization[p] = factorization[p]\
    \ or {}\n        factorization[p][i] = 1\n        factors[p] = factors[p] or {}\n\
    \        factors[p][i] = 1\n        i = i + 1\n    end\n    for i = 2, n do\n\
    \        for j = 2, n do\n            if factorization[i][j] then\n          \
    \      factors[math.floor(n/i)][j] = factors[math.floor(n/i)][j] + factorization[i][j]\n\
    \                factorization[i][j] = 0\n            end\n        end\n    end\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmfej7ur.lua:30:\
    \ expected: {2}\nactual: {{2=1}, {1}}\nstack traceback:\n\t/tmp/tmpwmfej7ur.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = i\n        while n % p == 0 do\n            p = p * i\n    \
    \    end\n        factors[i] = p\n        i = i + 1\n    end\n    for i = 1, n\
    \ do\n        factorization[factors[i]] = i\n    end\n    return factors, factorization\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            factors[#factors+1] = factor\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[#factors+1] = i\n            n = n / i\n        else\n\
    \            i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     if n ~= 1 then\n            table.insert(factors, factor)\n        end\n\
    \    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyrqvnx0.lua:25:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpzyrqvnx0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = factor(n)\n    for i = 1, #factorization do\n\
    \        local factor = factorization[i]\n        local count = factors[factor]\n\
    \        if count == nil then\n            count = 0\n        end\n        count\
    \ = count + 1\n        factors[factor] = count\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu81w1x3z.lua:6:\
    \ attempt to call global 'factor' (a nil value)\nstack traceback:\n\t/tmp/tmpu81w1x3z.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpu81w1x3z.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = factor * i\n            i = i + 1\n  \
    \      else\n            i = i + 1\n        end\n    end\n    factors[#factors+1]\
    \ = factor\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylctlagx.lua:24:\
    \ expected: {2, 2}\nactual: {8}\nstack traceback:\n\t/tmp/tmpylctlagx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal\
    \ p = i\n\t\twhile p > 1 do\n\t\t\tlocal q = math.floor((p-1)/p)\n\t\t\tif q *\
    \ p > n then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tp = q\n\t\tend\n\t\tif p > 1 then\n\
    \t\t\tfactors[#factors+1] = p\n\t\t\tfactorization[#factorization+1] = i\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn factors, factorization\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8g18cd9g.lua:29:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmp8g18cd9g.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     if n ~= 1 then\n            factors[#factors + 1] = factor\n        end\n\
    \    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst57k2_j.lua:25:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpst57k2_j.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         factors[#factors+1] = i\n            n = n / i\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        local i = 2\n\
    \        while i <= n do\n            if n % factor == 0 then\n              \
    \  table.insert(factors, factor)\n                n = n / factor\n           \
    \ else\n                i = i + 1\n            end\n        end\n        factor\
    \ = factor + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 1\n    local prime_factors = {}\n    local prime_factor_counter = 1\n    local\
    \ prime_factor_counter2 = 0\n    local prime_factor_counter3 = 0\n    local prime_factor_counter4\
    \ = 0\n    local prime_factor_counter5 = 0\n    local prime_factor_counter6 =\
    \ 0\n    local prime_factor_counter7 = 0\n    local prime_factor_counter8 = 0\n\
    \    local prime_factor_counter9 = 0\n    local prime_factor_counter10 = 0\n \
    \   local prime_factor_counter11 = 0\n    local prime_factor_counter12 = 0\n \
    \   local prime_factor_counter13 = 0\n    local prime_factor_counter14 = 0\n \
    \   local prime_factor_counter15 = 0\n    local prime_factor_counter16 = 0\n \
    \   local prime_factor_counter17 = 0\n    local prime_factor_counter18 = 0\n \
    \   local prime_factor_counter19 = 0\n    local prime_factor_counter20 = 0\n \
    \   local prime_factor_counter21 = 0\n    local prime_factor_counter22 = 0\n \
    \   local prime_factor_counter23 = 0\n    local prime_factor_counter24 = 0\n \
    \   local prime_factor_counter25 = 0\n    local prime_factor_counter26 = 0\n \
    \   local prime_factor_counter27 = 0\n    local prime_factor_counter28 = 0\n \
    \   local prime_factor_counter29 = 0\n    local prime_factor_counter30 = 0\n \
    \   local prime_factor_counter31 = 0\n    local prime_factor_counter32 = 0\n \
    \   local prime_factor_counter33 = 0\n    local prime_factor_counter34 = 0\n \
    \   local prime_factor_counter35 = 0\n    local prime_factor_counter36 = 0\n \
    \   local prime_factor_counter37 = 0\n    local prime_factor_counter38 = 0\n \
    \   local prime_factor_counter39 = 0\n    local prime_factor_counter40 = 0\n \
    \   local prime_factor_counter41 = 0\n    local prime_factor_counter42 = 0\n \
    \   local prime_factor_counter43 = 0\n    local prime_factor_counter44 = 0\n \
    \   local prime_factor_counter45 = 0\n    local prime_factor_counter46 = 0\n \
    \   local prime_factor_counter47 = 0\n    local prime_factor_counter48 = 0\n \
    \   local prime_factor_counter49 = 0\n    local prime_factor_counter50 = 0\n \
    \   local prime_factor_counter51 = 0\n    local prime_factor_counter52 = 0\n \
    \   local prime_factor_counter53 = 0\n    local prime_factor_counter54\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuytr98rx.lua:78: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2zweomr.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpj2zweomr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_product2 = 0\n    local prime_divisors_product3 = 0\n    local\
    \ prime_divisors_product4 = 0\n    local prime_divisors_product5 = 0\n    local\
    \ prime_divisors_product6 = 0\n    local prime_divisors_product7 = 0\n    local\
    \ prime_divisors_product8 = 0\n    local prime_divisors_product9 = 0\n    local\
    \ prime_divisors_product10 = 0\n    local prime_divisors_product11 = 0\n    local\
    \ prime_divisors_product12 = 0\n    local prime_divisors_product13 = 0\n    local\
    \ prime_divisors_product14 = 0\n    local prime_divisors_product15 = 0\n    local\
    \ prime_divisors_product16 = 0\n    local prime_divisors_product17 = 0\n    local\
    \ prime_divisors_product18 = 0\n    local prime_divisors_product19 = 0\n    local\
    \ prime_divisors_product20 = 0\n    local prime_divisors_product21 = 0\n    local\
    \ prime_divisors_product22 = 0\n    local prime_divisors_product23 = 0\n    local\
    \ prime_divisors_product24 = 0\n    local prime_divisors_product25 = 0\n    local\
    \ prime_divisors_product26 = 0\n    local prime_divisors_product27 = 0\n    local\
    \ prime_divisors_product28 = 0\n    local prime_divisors_product29 = 0\n    local\
    \ prime_divisors_product30 = 0\n    local prime_divisors_product31 = 0\n    local\
    \ prime_divisors_product32 = 0\n    local prime_divisors_product33 = 0\n    local\
    \ prime_divisors_product34 = 0\n    local prime_divisors_product35 = 0\n    local\
    \ prime_divisors_product36 = 0\n    local prime_divisors_product37 = 0\n    local\
    \ prime_divisors_product38 = 0\n    local prime_divisors_product39 = 0\n    local\
    \ prime_divisors_product40 = 0\n    local prime_divisors_product41 = 0\n    local\
    \ prime_divisors_product42 = 0\n    local prime_divisors_product43 = 0\n    local\
    \ prime_divisors_product44 = 0\n    local prime_divisors_product45 = 0\n    local\
    \ prime_divisors_product46 = 0\n    local prime_divisors_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyfugc0ma.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_table\
    \ = {}\n    local prime_table_length = #primes\n    local prime_table_length2\
    \ = #prime_table\n    local prime_table_length3 = #prime_table_length\n    local\
    \ prime_table_length4 = #prime_table_length2\n    local prime_table_length5 =\
    \ #prime_table_length3\n    local prime_table_length6 = #prime_table_length4\n\
    \    local prime_table_length7 = #prime_table_length5\n    local prime_table_length8\
    \ = #prime_table_length6\n    local prime_table_length9 = #prime_table_length7\n\
    \    local prime_table_length10 = #prime_table_length8\n    local prime_table_length11\
    \ = #prime_table_length9\n    local prime_table_length12 = #prime_table_length10\n\
    \    local prime_table_length13 = #prime_table_length11\n    local prime_table_length14\
    \ = #prime_table_length12\n    local prime_table_length15 = #prime_table_length13\n\
    \    local prime_table_length16 = #prime_table_length14\n    local prime_table_length17\
    \ = #prime_table_length15\n    local prime_table_length18 = #prime_table_length16\n\
    \    local prime_table_length19 = #prime_table_length17\n    local prime_table_length20\
    \ = #prime_table_length18\n    local prime_table_length21 = #prime_table_length19\n\
    \    local prime_table_length22 = #prime_table_length20\n    local prime_table_length23\
    \ = #prime_table_length21\n    local prime_table_length24 = #prime_table_length22\n\
    \    local prime_table_length25 = #prime_table_length23\n    local prime_table_length26\
    \ = #prime_table_length24\n    local prime_table_length27 = #prime_table_length25\n\
    \    local prime_table_length28 = #prime_table_length26\n    local prime_table_length29\
    \ = #prime_table_length27\n    local prime_table_length30 = #prime_table_length28\n\
    \    local prime_table_length31 = #prime_table_length29\n    local prime_table_length32\
    \ = #prime_table_length30\n    local prime_table_length33 = #prime_table_length31\n\
    \    local prime_table_length34 = #prime_table_length\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu1z3fid6.lua:57: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal primes = {}\n\tlocal prime_number\
    \ = 2\n\tlocal prime_numbers = {}\n\tlocal prime_numbers_count = 0\n\tlocal prime_numbers_count_max\
    \ = 0\n\tlocal prime_numbers_count_min = 0\n\tlocal prime_numbers_count_sum =\
    \ 0\n\tlocal prime_numbers_count_sum2 = 0\n\tlocal prime_numbers_count_sum3 =\
    \ 0\n\tlocal prime_numbers_count_sum4 = 0\n\tlocal prime_numbers_count_sum5 =\
    \ 0\n\tlocal prime_numbers_count_sum6 = 0\n\tlocal prime_numbers_count_sum7 =\
    \ 0\n\tlocal prime_numbers_count_sum8 = 0\n\tlocal prime_numbers_count_sum9 =\
    \ 0\n\tlocal prime_numbers_count_sum10 = 0\n\tlocal prime_numbers_count_sum11\
    \ = 0\n\tlocal prime_numbers_count_sum12 = 0\n\tlocal prime_numbers_count_sum13\
    \ = 0\n\tlocal prime_numbers_count_sum14 = 0\n\tlocal prime_numbers_count_sum15\
    \ = 0\n\tlocal prime_numbers_count_sum16 = 0\n\tlocal prime_numbers_count_sum17\
    \ = 0\n\tlocal prime_numbers_count_sum18 = 0\n\tlocal prime_numbers_count_sum19\
    \ = 0\n\tlocal prime_numbers_count_sum20 = 0\n\tlocal prime_numbers_count_sum21\
    \ = 0\n\tlocal prime_numbers_count_sum22 = 0\n\tlocal prime_numbers_count_sum23\
    \ = 0\n\tlocal prime_numbers_count_sum24 = 0\n\tlocal prime_numbers_count_sum25\
    \ = 0\n\tlocal prime_numbers_count_sum26 = 0\n\tlocal prime_numbers_count_sum27\
    \ = 0\n\tlocal prime_numbers_count_sum28 = 0\n\tlocal prime_numbers_count_sum29\
    \ = 0\n\tlocal prime_numbers_count_sum30 = 0\n\tlocal prime_numbers_count_sum31\
    \ = 0\n\tlocal prime_numbers_count_sum32 = 0\n\tlocal prime_numbers_count_sum33\
    \ = 0\n\tlocal prime_numbers_count_sum34 = 0\n\tlocal prime_numbers_count_sum35\
    \ = 0\n\tlocal prime_numbers_count_sum36 = 0\n\tlocal prime_numbers_count_sum37\
    \ = 0\n\tlocal prime_numbers_count_sum38 = 0\n\tlocal prime_numbers_count_sum39\
    \ = 0\n\tlocal prime_numbers_count_sum40 = 0\n\tlocal prime_numbers_count_sum41\
    \ = 0\n\tlocal prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi3dabt00.lua:69: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factorizationSize = 0\n    local\
    \ factorizationCount = 0\n    local factorizationMax = 0\n    local factorizationMin\
    \ = 0\n    local factorizationSum = 0\n    local factorizationSum2 = 0\n    local\
    \ factorizationSum3 = 0\n    local factorizationSum4 = 0\n    local factorizationSum5\
    \ = 0\n    local factorizationSum6 = 0\n    local factorizationSum7 = 0\n    local\
    \ factorizationSum8 = 0\n    local factorizationSum9 = 0\n    local factorizationSum10\
    \ = 0\n    local factorizationSum11 = 0\n    local factorizationSum12 = 0\n  \
    \  local factorizationSum13 = 0\n    local factorizationSum14 = 0\n    local factorizationSum15\
    \ = 0\n    local factorizationSum16 = 0\n    local factorizationSum17 = 0\n  \
    \  local factorizationSum18 = 0\n    local factorizationSum19 = 0\n    local factorizationSum20\
    \ = 0\n    local factorizationSum21 = 0\n    local factorizationSum22 = 0\n  \
    \  local factorizationSum23 = 0\n    local factorizationSum24 = 0\n    local factorizationSum25\
    \ = 0\n    local factorizationSum26 = 0\n    local factorizationSum27 = 0\n  \
    \  local factorizationSum28 = 0\n    local factorizationSum29 = 0\n    local factorizationSum30\
    \ = 0\n    local factorizationSum31 = 0\n    local factorizationSum32 = 0\n  \
    \  local factorizationSum33 = 0\n    local factorizationSum34 = 0\n    local factorizationSum35\
    \ = 0\n    local factorizationSum36 = 0\n    local factorizationSum37 = 0\n  \
    \  local factorizationSum38 = 0\n    local factorizationSum39 = 0\n    local factorizationSum40\
    \ = 0\n    local factorizationSum41 = 0\n    local factorizationSum42 = 0\n  \
    \  local factorizationSum43 = 0\n    local factorizationSum44 = 0\n    local factorizationSum45\
    \ = 0\n    local factorizationSum46 = 0\n    local factorizationSum47 = 0\n  \
    \  local factorizationSum48 = 0\n    local factorizationSum49 = 0\n    local factorizationSum50\
    \ = 0\n    local factorizationSum51 = 0\n    local factorizationSum52 = 0\n  \
    \  local factorizationSum53 = 0\n    local factorizationSum54 = 0\n    local factorizationSum55\
    \ = 0\n    local factorizationSum56 = 0\n    local factorizationSum57 = 0\n  \
    \  local factorizationSum58 = 0\n    local factorizationSum59 = 0\n    local \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2m7l773c.lua:85: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while factor ~= n do\n        if n % factor == 0 then\n            i = i\
    \ + 1\n            factorization[factor] = i\n            factors[factor] = factor\n\
    \            factor = factor / i\n        else\n            factor = factor /\
    \ i\n        end\n    end\n    return factors, factorization\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_sum2 = 0\n    local\
    \ prime_divisors_sum3 = 0\n    local prime_divisors_sum4 = 0\n    local prime_divisors_sum5\
    \ = 0\n    local prime_divisors_sum6 = 0\n    local prime_divisors_sum7 = 0\n\
    \    local prime_divisors_sum8 = 0\n    local prime_divisors_sum9 = 0\n    local\
    \ prime_divisors_sum10 = 0\n    local prime_divisors_sum11 = 0\n    local prime_divisors_sum12\
    \ = 0\n    local prime_divisors_sum13 = 0\n    local prime_divisors_sum14 = 0\n\
    \    local prime_divisors_sum15 = 0\n    local prime_divisors_sum16 = 0\n    local\
    \ prime_divisors_sum17 = 0\n    local prime_divisors_sum18 = 0\n    local prime_divisors_sum19\
    \ = 0\n    local prime_divisors_sum20 = 0\n    local prime_divisors_sum21 = 0\n\
    \    local prime_divisors_sum22 = 0\n    local prime_divisors_sum23 = 0\n    local\
    \ prime_divisors_sum24 = 0\n    local prime_divisors_sum25 = 0\n    local prime_divisors_sum26\
    \ = 0\n    local prime_divisors_sum27 = 0\n    local prime_divisors_sum28 = 0\n\
    \    local prime_divisors_sum29 = 0\n    local prime_divisors_sum30 = 0\n    local\
    \ prime_divisors_sum31 = 0\n    local prime_divisors_sum32 = 0\n    local prime_divisors_sum33\
    \ = 0\n    local prime_divisors_sum34 = 0\n    local prime_divisors_sum35 = 0\n\
    \    local prime_divisors_sum36 = 0\n    local prime_divisors_sum37 = 0\n    local\
    \ prime_divisors_sum38 = 0\n    local prime_divisors_sum39 = 0\n    local prime_divisors_sum40\
    \ = 0\n    local prime_divisors_sum41 = 0\n    local prime_divisors_sum42 = 0\n\
    \    local prime_divisors_sum43 = 0\n    local prime_divisors_sum44 = 0\n    local\
    \ prime_divisors_sum45 = 0\n    local prime_divisors_sum46 = 0\n    local prime_divisors_sum47\
    \ = 0\n    local prime_divisor\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0aju24o5.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_number\
    \ = 2\n    local prime_factorization = {}\n    local prime_factors = {}\n    local\
    \ prime_numbers = {}\n    local prime_numbers_count = 0\n    local prime_numbers_sum\
    \ = 0\n    local prime_numbers_sum2 = 0\n    local prime_numbers_sum3 = 0\n  \
    \  local prime_numbers_sum4 = 0\n    local prime_numbers_sum5 = 0\n    local prime_numbers_sum6\
    \ = 0\n    local prime_numbers_sum7 = 0\n    local prime_numbers_sum8 = 0\n  \
    \  local prime_numbers_sum9 = 0\n    local prime_numbers_sum10 = 0\n    local\
    \ prime_numbers_sum11 = 0\n    local prime_numbers_sum12 = 0\n    local prime_numbers_sum13\
    \ = 0\n    local prime_numbers_sum14 = 0\n    local prime_numbers_sum15 = 0\n\
    \    local prime_numbers_sum16 = 0\n    local prime_numbers_sum17 = 0\n    local\
    \ prime_numbers_sum18 = 0\n    local prime_numbers_sum19 = 0\n    local prime_numbers_sum20\
    \ = 0\n    local prime_numbers_sum21 = 0\n    local prime_numbers_sum22 = 0\n\
    \    local prime_numbers_sum23 = 0\n    local prime_numbers_sum24 = 0\n    local\
    \ prime_numbers_sum25 = 0\n    local prime_numbers_sum26 = 0\n    local prime_numbers_sum27\
    \ = 0\n    local prime_numbers_sum28 = 0\n    local prime_numbers_sum29 = 0\n\
    \    local prime_numbers_sum30 = 0\n    local prime_numbers_sum31 = 0\n    local\
    \ prime_numbers_sum32 = 0\n    local prime_numbers_sum33 = 0\n    local prime_numbers_sum34\
    \ = 0\n    local prime_numbers_sum35 = 0\n    local prime_numbers_sum36 = 0\n\
    \    local prime_numbers_sum37 = 0\n    local prime_numbers_sum38 = 0\n    local\
    \ prime_numbers_sum39 = 0\n    local prime_numbers_sum40 = 0\n    local prime_numbers_sum41\
    \ = 0\n    local prime_numbers_sum42 = 0\n    local prime_numbers_sum43 = 0\n\
    \    local prime_numbers_sum44 = 0\n    local prime_numbers_sum45 = 0\n    local\
    \ prime_numbers_sum46 = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpczi1kwwh.lua:74: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     if n ~= 1 then\n            factors[#factors + 1] = factor\n        end\n\
    \    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst57k2_j.lua:25:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpst57k2_j.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         n = n / i\n            table.insert(factors, i)\n        end\n     \
    \   i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxi9dwyz.lua:20:\
    \ expected: {2}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpfxi9dwyz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local primeFactorization\
    \ = {}\n    local primeFactors = {}\n    local primeFactorsCount = {}\n    local\
    \ primeFactorsCounts = {}\n    local primeFactorsCountMax = {}\n    local primeFactorsCountMaxs\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\n    local primeFactorsCountMaxes\
    \ = {}\n    local primeFactorsCountMaxes = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr7uus_ll.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while factor ~= n do\n        if n % factor == 0 then\n            i = i\
    \ + 1\n            factors[factor] = i\n            factorization[factor] = factor\n\
    \            factor = factor * i\n        end\n    end\n    return factors, factorization\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir985iub.lua:18:\
    \ expected: {2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpir985iub.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_sum2 = 0\n    local\
    \ prime_divisors_sum3 = 0\n    local prime_divisors_sum4 = 0\n    local prime_divisors_sum5\
    \ = 0\n    local prime_divisors_sum6 = 0\n    local prime_divisors_sum7 = 0\n\
    \    local prime_divisors_sum8 = 0\n    local prime_divisors_sum9 = 0\n    local\
    \ prime_divisors_sum10 = 0\n    local prime_divisors_sum11 = 0\n    local prime_divisors_sum12\
    \ = 0\n    local prime_divisors_sum13 = 0\n    local prime_divisors_sum14 = 0\n\
    \    local prime_divisors_sum15 = 0\n    local prime_divisors_sum16 = 0\n    local\
    \ prime_divisors_sum17 = 0\n    local prime_divisors_sum18 = 0\n    local prime_divisors_sum19\
    \ = 0\n    local prime_divisors_sum20 = 0\n    local prime_divisors_sum21 = 0\n\
    \    local prime_divisors_sum22 = 0\n    local prime_divisors_sum23 = 0\n    local\
    \ prime_divisors_sum24 = 0\n    local prime_divisors_sum25 = 0\n    local prime_divisors_sum26\
    \ = 0\n    local prime_divisors_sum27 = 0\n    local prime_divisors_sum28 = 0\n\
    \    local prime_divisors_sum29 = 0\n    local prime_divisors_sum30 = 0\n    local\
    \ prime_divisors_sum31 = 0\n    local prime_divisors_sum32 = 0\n    local prime_divisors_sum33\
    \ = 0\n    local prime_divisors_sum34 = 0\n    local prime_divisors_sum35 = 0\n\
    \    local prime_divisors_sum36 = 0\n    local prime_divisors_sum37 = 0\n    local\
    \ prime_divisors_sum38 = 0\n    local prime_divisors_sum39 = 0\n    local prime_divisors_sum40\
    \ = 0\n    local prime_divisors_sum41 = 0\n    local prime_divisors_sum42 = 0\n\
    \    local prime_divisors_sum43 = 0\n    local prime_divisors_sum44 = 0\n    local\
    \ prime_divisors_sum45 = 0\n    local prime_divisors_sum46 = 0\n    local prime_divisors_sum47\
    \ = 0\n    local prime_divisor\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0aju24o5.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_product2 = 0\n    local prime_divisors_product3 = 0\n    local\
    \ prime_divisors_product4 = 0\n    local prime_divisors_product5 = 0\n    local\
    \ prime_divisors_product6 = 0\n    local prime_divisors_product7 = 0\n    local\
    \ prime_divisors_product8 = 0\n    local prime_divisors_product9 = 0\n    local\
    \ prime_divisors_product10 = 0\n    local prime_divisors_product11 = 0\n    local\
    \ prime_divisors_product12 = 0\n    local prime_divisors_product13 = 0\n    local\
    \ prime_divisors_product14 = 0\n    local prime_divisors_product15 = 0\n    local\
    \ prime_divisors_product16 = 0\n    local prime_divisors_product17 = 0\n    local\
    \ prime_divisors_product18 = 0\n    local prime_divisors_product19 = 0\n    local\
    \ prime_divisors_product20 = 0\n    local prime_divisors_product21 = 0\n    local\
    \ prime_divisors_product22 = 0\n    local prime_divisors_product23 = 0\n    local\
    \ prime_divisors_product24 = 0\n    local prime_divisors_product25 = 0\n    local\
    \ prime_divisors_product26 = 0\n    local prime_divisors_product27 = 0\n    local\
    \ prime_divisors_product28 = 0\n    local prime_divisors_product29 = 0\n    local\
    \ prime_divisors_product30 = 0\n    local prime_divisors_product31 = 0\n    local\
    \ prime_divisors_product32 = 0\n    local prime_divisors_product33 = 0\n    local\
    \ prime_divisors_product34 = 0\n    local prime_divisors_product35 = 0\n    local\
    \ prime_divisors_product36 = 0\n    local prime_divisors_product37 = 0\n    local\
    \ prime_divisors_product38 = 0\n    local prime_divisors_product39 = 0\n    local\
    \ prime_divisors_product40 = 0\n    local prime_divisors_product41 = 0\n    local\
    \ prime_divisors_product42 = 0\n    local prime_divisors_product43 = 0\n    local\
    \ prime_divisors_product44 = 0\n    local prime_divisors_product45 = 0\n    local\
    \ prime_divisors_product46 = 0\n    local prime_divisors_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyfugc0ma.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factorization_size = {}\n    local\
    \ factorization_count = {}\n    local factorization_max_size = 0\n    local factorization_max_count\
    \ = 0\n    local factorization_max_factor = 0\n    local factorization_max_factor_index\
    \ = 0\n    local factorization_max_factor_value = 0\n    local factorization_max_factor_value_index\
    \ = 0\n    local factorization_max_factor_value_count = 0\n    local factorization_max_factor_value_count_index\
    \ = 0\n    local factorization_max_factor_value_count_value = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_value_index\
    \ = 0\n    local factorization_max_factor_value_count_value_index = 0\n    local\
    \ factorization_max_factor_value_count_value_index = 0\n    local factorization_max_factor_value_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcl0rxkak.lua:66: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         table.insert(factors, i)\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p*i > n then\n            factors[#factors+1] = p\n            i =\
    \ p\n        else\n            i = i + 1\n        end\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvqtbr3d.lua:22:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpuvqtbr3d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = math.floor(n/i)\n        if p*i > n then\n            factorization[p]\
    \ = i\n            factors[p] = i\n        else\n            i = i + 1\n     \
    \   end\n    end\n    return factors, factorization\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbfkd0b9.lua:23:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpdbfkd0b9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factor = 1\n\tlocal i = 1\n\twhile i <= n do\n\t\tfactor = factor\
    \ * i\n\t\tif factor > n then\n\t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    local j = 1\n\twhile j <= n do\n\t\tif n % j == 0 then\n\t\t\tfactors[j] = factors[j]\
    \ + 1\n\t\t\tn = n / j\n\t\tend\n\t\tj = j + 1\n\tend\n\treturn factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpup9m7zwn.lua:18:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpup9m7zwn.lua:18: in function 'candidate'\n\t/tmp/tmpup9m7zwn.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factor = 1\n\twhile factor <= n do\n\t\tlocal i = 1\n\t\twhile\
    \ i * factor <= n do\n\t\t\tif n % i == 0 then\n\t\t\t\tfactors[#factors + 1]\
    \ = i * factor\n\t\t\t\tn = n / i\n\t\t\t\ti = i + 1\n\t\t\telse\n\t\t\t\ti =\
    \ i + 1\n\t\t\tend\n\t\tend\n\t\tfactor = factor + 1\n\tend\n\treturn factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuari0t8.lua:26:\
    \ expected: {2}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpfuari0t8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while factor ~= n do\n        if n % factor == 0 then\n            i = i\
    \ + 1\n            factors[factor] = i\n            factor = factor / i\n    \
    \    else\n            factor = factor / i\n        end\n    end\n    for i =\
    \ 1, n do\n        factorization[factors[i]] = i\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local primeFactorization\
    \ = {}\n    local isPrime = {}\n    local isPrimeFactorization = {}\n    local\
    \ isPrimeFactorizationPrime = {}\n    local isPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrime = {}\n    local\
    \ isPrimeFactorizationPrimeFactorizationPrimeFactorization = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = {}\n    local isPrimeFactorizationPrimeFactorizationPrime\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps8k6ony4.lua:44: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = math.floor(n/i)\n        if p == i then\n            factors[i]\
    \ = 1\n        else\n            factors[i] = factorization[p] or 0\n        \
    \    factors[i] = factors[i] + factorization[p]\n        end\n        factorization[p]\
    \ = i\n        i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_lnbwg6.lua:14:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpx_lnbwg6.lua:14: in function 'candidate'\n\t/tmp/tmpx_lnbwg6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        factor\
    \ = factor * i\n        if factor > n then\n            factors[#factors+1] =\
    \ factor\n            factor = 1\n        end\n        i = i + 1\n    end\n  \
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2jaxc0l.lua:22:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpr2jaxc0l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2zweomr.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpj2zweomr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n            n = n / i\n        end\n    end\n    return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoy4gg260.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmpoy4gg260.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_numbers = {}\n    local prime_numbers_count = 0\n    local\
    \ prime_numbers_count_max = 0\n    local prime_numbers_count_min = 0\n    local\
    \ prime_numbers_count_min_index = 0\n    local prime_numbers_count_max_index =\
    \ 0\n    local prime_numbers_count_index = 0\n    local prime_numbers_count_index2\
    \ = 0\n    local prime_numbers_count_index3 = 0\n    local prime_numbers_count_index4\
    \ = 0\n    local prime_numbers_count_index5 = 0\n    local prime_numbers_count_index6\
    \ = 0\n    local prime_numbers_count_index7 = 0\n    local prime_numbers_count_index8\
    \ = 0\n    local prime_numbers_count_index9 = 0\n    local prime_numbers_count_index10\
    \ = 0\n    local prime_numbers_count_index11 = 0\n    local prime_numbers_count_index12\
    \ = 0\n    local prime_numbers_count_index13 = 0\n    local prime_numbers_count_index14\
    \ = 0\n    local prime_numbers_count_index15 = 0\n    local prime_numbers_count_index16\
    \ = 0\n    local prime_numbers_count_index17 = 0\n    local prime_numbers_count_index18\
    \ = 0\n    local prime_numbers_count_index19 = 0\n    local prime_numbers_count_index20\
    \ = 0\n    local prime_numbers_count_index21 = 0\n    local prime_numbers_count_index22\
    \ = 0\n    local prime_numbers_count_index23 = 0\n    local prime_numbers_count_index24\
    \ = 0\n    local prime_numbers_count_index25 = 0\n    local prime_numbers_count_index26\
    \ = 0\n    local prime_numbers_count_index27 = 0\n    local prime_numbers_count_index28\
    \ = 0\n    local prime_numbers_count_index29 = 0\n    local prime_numbers_count_index30\
    \ = 0\n    local prime_numbers_count_index31 = 0\n    local prime_numbers_count_index32\
    \ = 0\n    local prime_numbers_count_index33 = 0\n    local prime_numbers_count_index34\
    \ = 0\n    local prime_numbers_count_index35 = 0\n    local prime_numbers_count_index36\
    \ = 0\n    local prime_numbers_count_index37 = 0\n    local prime_numbers_count_index38\
    \ = 0\n    local prime_numbers_count_index39 = 0\n    local prime_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_20pddy2.lua:69: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         table.insert(factors, i)\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while factor ~= n do\n    \
    \    if n % factor == 0 then\n            i = i + 1\n            factors[#factors\
    \ + 1] = factor\n            factor = n / factor\n        else\n            factor\
    \ = factor + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlrqli53.lua:23:\
    \ expected: {2}\nactual: {1}\nstack traceback:\n\t/tmp/tmphlrqli53.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factorization =\
    \ {}\n    local factorization = {}\n    local factorization = {}\n    local factorization\
    \ = {}\n    local factorization = {}\n    local factorization = {}\n    local\
    \ factorization = {}\n    local factorization = {}\n    local factor\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdcvf1ojs.lua:105: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        factor = factor * i\n        if factor > n then\n\
    \            break\n        end\n        if factorization[factor] == nil then\n\
    \            factorization[factor] = 1\n        else\n            factorization[factor]\
    \ = factorization[factor] + 1\n        end\n        i = i + 1\n    end\n    for\
    \ i = 1, n do\n        if factorization[i] ~= nil then\n            factors[#factors\
    \ + 1] = i\n            factors[#factors + 1] = factorization[i]\n        end\n\
    \    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u8j2taa.lua:33:\
    \ expected: {2}\nactual: {1, 1, 2, 1}\nstack traceback:\n\t/tmp/tmp_u8j2taa.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_sum_square = 0\n    local prime_divisors_product = 1\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr39nk9gj.lua:76: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            n = n / i\n            table.insert(factors, i)\n        end\n\
    \        i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35z64r_r.lua:20:\
    \ expected: {2}\nactual: {1}\nstack traceback:\n\t/tmp/tmp35z64r_r.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        if n % i == 0 then\n            factor = i -- factor\
    \ is prime number\n            factors[#factors + 1] = factor\n            factorization[factor]\
    \ = factors[#factors]\n            i = i + 1\n        else\n            i = i\
    \ + 1\n        end\n    end\n    return factors, factorization\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp180s59gs.lua:25:\
    \ expected: {2}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmp180s59gs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p == 1 then\n            factors[i] = 1\n        else\n          \
    \  local factor = 1\n            for j = 1, p do\n                factor = factor\
    \ * i\n            end\n            factors[i] = factor\n        end\n       \
    \ i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxqf0sxd.lua:26:\
    \ expected: {2}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmpfxqf0sxd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal primes = {}\n\tlocal prime_table =\
    \ {}\n\tlocal prime_table_len = 0\n\tlocal prime_table_len2 = 0\n\tlocal prime_table_len3\
    \ = 0\n\tlocal prime_table_len4 = 0\n\tlocal prime_table_len5 = 0\n\tlocal prime_table_len6\
    \ = 0\n\tlocal prime_table_len7 = 0\n\tlocal prime_table_len8 = 0\n\tlocal prime_table_len9\
    \ = 0\n\tlocal prime_table_len10 = 0\n\tlocal prime_table_len11 = 0\n\tlocal prime_table_len12\
    \ = 0\n\tlocal prime_table_len13 = 0\n\tlocal prime_table_len14 = 0\n\tlocal prime_table_len15\
    \ = 0\n\tlocal prime_table_len16 = 0\n\tlocal prime_table_len17 = 0\n\tlocal prime_table_len18\
    \ = 0\n\tlocal prime_table_len19 = 0\n\tlocal prime_table_len20 = 0\n\tlocal prime_table_len21\
    \ = 0\n\tlocal prime_table_len22 = 0\n\tlocal prime_table_len23 = 0\n\tlocal prime_table_len24\
    \ = 0\n\tlocal prime_table_len25 = 0\n\tlocal prime_table_len26 = 0\n\tlocal prime_table_len27\
    \ = 0\n\tlocal prime_table_len28 = 0\n\tlocal prime_table_len29 = 0\n\tlocal prime_table_len30\
    \ = 0\n\tlocal prime_table_len31 = 0\n\tlocal prime_table_len32 = 0\n\tlocal prime_table_len33\
    \ = 0\n\tlocal prime_table_len34 = 0\n\tlocal prime_table_len35 = 0\n\tlocal prime_table_len36\
    \ = 0\n\tlocal prime_table_len37 = 0\n\tlocal prime_table_len38 = 0\n\tlocal prime_table_len39\
    \ = 0\n\tlocal prime_table_len40 = 0\n\tlocal prime_table_len41 = 0\n\tlocal prime_table_len42\
    \ = 0\n\tlocal prime_table_len43 = 0\n\tlocal prime_table_len44 = 0\n\tlocal prime_table_len45\
    \ = 0\n\tlocal prime_table_len46 = 0\n\tlocal prime_table_len47 = 0\n\tlocal prime_table_len48\
    \ = 0\n\tlocal prime_table_len49 = 0\n\tlocal prime_table_len50 = 0\n\tlocal prime_table_len51\
    \ = 0\n\tlocal prime_table_len52 = 0\n\tlocal prime_table_len53 = 0\n\tlocal prime_table_len54\
    \ = 0\n\tlocal prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyalo3k1d.lua:78: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n            n = n / i\n        end\n    end\n    return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoy4gg260.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmpoy4gg260.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     table.insert(factors, factor)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputqbar39.lua:24:\
    \ expected: {2, 2}\nactual: {2, 1, 1}\nstack traceback:\n\t/tmp/tmputqbar39.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         factors[#factors+1] = i\n            n = n / i\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_factors = {}\n    local prime_divisors = {}\n    local\
    \ prime_divisors_count = 0\n    local prime_divisors_sum = 0\n    local prime_divisors_product\
    \ = 1\n    local prime_divisors_product2 = 0\n    local prime_divisors_product3\
    \ = 0\n    local prime_divisors_product4 = 0\n    local prime_divisors_product5\
    \ = 0\n    local prime_divisors_product6 = 0\n    local prime_divisors_product7\
    \ = 0\n    local prime_divisors_product8 = 0\n    local prime_divisors_product9\
    \ = 0\n    local prime_divisors_product10 = 0\n    local prime_divisors_product11\
    \ = 0\n    local prime_divisors_product12 = 0\n    local prime_divisors_product13\
    \ = 0\n    local prime_divisors_product14 = 0\n    local prime_divisors_product15\
    \ = 0\n    local prime_divisors_product16 = 0\n    local prime_divisors_product17\
    \ = 0\n    local prime_divisors_product18 = 0\n    local prime_divisors_product19\
    \ = 0\n    local prime_divisors_product20 = 0\n    local prime_divisors_product21\
    \ = 0\n    local prime_divisors_product22 = 0\n    local prime_divisors_product23\
    \ = 0\n    local prime_divisors_product24 = 0\n    local prime_divisors_product25\
    \ = 0\n    local prime_divisors_product26 = 0\n    local prime_divisors_product27\
    \ = 0\n    local prime_divisors_product28 = 0\n    local prime_divisors_product29\
    \ = 0\n    local prime_divisors_product30 = 0\n    local prime_divisors_product31\
    \ = 0\n    local prime_divisors_product32 = 0\n    local prime_divisors_product33\
    \ = 0\n    local prime_divisors_product34 = 0\n    local prime_divisors_product35\
    \ = 0\n    local prime_divisors_product36 = 0\n    local prime_divisors_product37\
    \ = 0\n    local prime_divisors_product38 = 0\n    local prime_divisors_product39\
    \ = 0\n    local prime_divisors_product40 = 0\n    local prime_divisors_product41\
    \ = 0\n    local prime_divisors_product42 = 0\n    local prime_divisors_product43\
    \ = 0\n    local prime_divisors_product44 = 0\n    local prime_divisors_product45\
    \ = 0\n    local prime_divisors_product46 = 0\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbgy2acg.lua:74: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    local factor = 1\n\
    \    local factorization = {}\n    while i <= n do\n        if n % i == 0 then\n\
    \            factor = factor * i\n            factorization[factor] = factorization[factor]\
    \ or {}\n            factorization[factor][#factorization[factor]+1] = i\n   \
    \     end\n        i = i + 1\n    end\n    for i = 1, n do\n        factors[#factors+1]\
    \ = factor\n    end\n    for i = 1, n do\n        factorization[factor] = factorization[factor]\
    \ or {}\n        factorization[factor][#factorization[factor]+1] = i\n    end\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqo7fgfs.lua:31:\
    \ expected: {2}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeqo7fgfs.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         factors[#factors+1] = i\n            n = n / i\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     table.insert(factors, factor)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputqbar39.lua:24:\
    \ expected: {2, 2}\nactual: {2, 1, 1}\nstack traceback:\n\t/tmp/tmputqbar39.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2zweomr.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpj2zweomr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     table.insert(factors, factor)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputqbar39.lua:24:\
    \ expected: {2, 2}\nactual: {2, 1, 1}\nstack traceback:\n\t/tmp/tmputqbar39.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2zweomr.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpj2zweomr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = factor * i\n            i = i + 1\n  \
    \      else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s7i7sgc.lua:24:\
    \ expected: {2, 2}\nactual: {8}\nstack traceback:\n\t/tmp/tmp1s7i7sgc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        factor = factor * i\n        if factor > n then\n\
    \            break\n        end\n        factorization[factor] = factorization[factor]\
    \ or 0\n        factorization[factor] = factorization[factor] + 1\n        i =\
    \ i + 1\n    end\n    for i = 1, n do\n        if factorization[i] > 1 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmproxfsoxi.lua:29:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmproxfsoxi.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_factors = {}\n    local prime_factors_count = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\n    local prime_factors_count_min = 0\n    local\
    \ prime_factors_count_max = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy884ihg9.lua:78: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n            end\n        end\n        table.insert(factors,\
    \ factor)\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_evz_6h.lua:23:\
    \ expected: {2, 2}\nactual: {4, 1, 1}\nstack traceback:\n\t/tmp/tmpz_evz_6h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        local i = 1\n\
    \        while i * factor <= n do\n            if n % i == 0 then\n          \
    \      factors[#factors + 1] = i * factor\n                n = n / i\n       \
    \     else\n                i = i + 1\n            end\n        end\n        factor\
    \ = factor + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = factor * i\n            i = i + 1\n  \
    \      else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s7i7sgc.lua:24:\
    \ expected: {2, 2}\nactual: {8}\nstack traceback:\n\t/tmp/tmp1s7i7sgc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factor = 1\n\twhile factor <= n do\n\t\tlocal i = 1\n\t\twhile\
    \ i * factor <= n do\n\t\t\ti = i + 1\n\t\tend\n\t\tfactors[factor] = i\n\t\t\
    factor = factor + 1\n\tend\n\treturn factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpostx6p8f.lua:21:\
    \ expected: {2}\nactual: {3, 2}\nstack traceback:\n\t/tmp/tmpostx6p8f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal i = 1\n\twhile i <= math.sqrt(n) do\n\
    \t\tlocal p = math.floor(n/i)\n\t\tif p == 1 then\n\t\t\tfactors[#factors+1] =\
    \ i\n\t\telse\n\t\t\tlocal factor = 1\n\t\t\tfor j = 1, p do\n\t\t\t\tfactor =\
    \ factor * i\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\t\tfactors[#factors+1] = factor\n\
    \t\t\tfactorization[factor] = factors[#factors+1]\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn factors, factorization\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fd1akfq.lua:30:\
    \ expected: {2, 2}\nactual: {24}\nstack traceback:\n\t/tmp/tmp7fd1akfq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while factor ~= n do\n        factor = math.floor(n / factor)\n        factors[factor]\
    \ = factors[factor] + 1 or 1\n        factorization[factor] = factorization[factor]\
    \ or factor\n        i = i + 1\n    end\n    i = 2\n    while i <= n do\n    \
    \    if factors[i] == 1 then\n            factorization[i] = factorization[i]\
    \ + factors[i - 1]\n        end\n        i = i + 1\n    end\n    return factorization\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtbk5z4i.lua:11:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmphtbk5z4i.lua:11: in function 'candidate'\n\t/tmp/tmphtbk5z4i.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_factorization = {}\n    local prime_counter = 0\n    local\
    \ prime_counter = 0\n    local prime_counter = 0\n    local prime_counter = 0\n\
    \    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime_counter = 0\n    local prime_counter\
    \ = 0\n    local prime_counter = 0\n    local prime\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp731p2jy9.lua:105: ''end'' expected (to close ''function''
    at line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 1, i do\n\
    \            if n % i == 0 then\n                factor = factor * i\n       \
    \         n = n / i\n                break\n            end\n        end\n   \
    \     table.insert(factors, factor)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputqbar39.lua:24:\
    \ expected: {2, 2}\nactual: {2, 1, 1}\nstack traceback:\n\t/tmp/tmputqbar39.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            factors[#factors+1] = factor\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         i = i * 2\n            factors[#factors + 1] = i\n        end\n    \
    \    i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmelj35w.lua:21:\
    \ expected: {2, 2}\nactual: {2, 8}\nstack traceback:\n\t/tmp/tmpdmelj35w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    local p = 2\n    local\
    \ factor = 1\n    while i <= n do\n        while n % p == 0 do\n            factors[factor]\
    \ = p\n            factorization[p] = factor\n            n = n / p\n        \
    \    i = i + 1\n            factor = p\n            p = p + 1\n        end\n \
    \       factor = p\n        p = p + 1\n    end\n    return factors, factorization\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal primes = {}\n\tlocal prime_table =\
    \ {}\n\tlocal prime_table_sorted = {}\n\tlocal prime_table_sorted_index = {}\n\
    \tlocal prime_table_sorted_index2 = {}\n\tlocal prime_table_sorted_index3 = {}\n\
    \tlocal prime_table_sorted_index4 = {}\n\tlocal prime_table_sorted_index5 = {}\n\
    \tlocal prime_table_sorted_index6 = {}\n\tlocal prime_table_sorted_index7 = {}\n\
    \tlocal prime_table_sorted_index8 = {}\n\tlocal prime_table_sorted_index9 = {}\n\
    \tlocal prime_table_sorted_index10 = {}\n\tlocal prime_table_sorted_index11 =\
    \ {}\n\tlocal prime_table_sorted_index12 = {}\n\tlocal prime_table_sorted_index13\
    \ = {}\n\tlocal prime_table_sorted_index14 = {}\n\tlocal prime_table_sorted_index15\
    \ = {}\n\tlocal prime_table_sorted_index16 = {}\n\tlocal prime_table_sorted_index17\
    \ = {}\n\tlocal prime_table_sorted_index18 = {}\n\tlocal prime_table_sorted_index19\
    \ = {}\n\tlocal prime_table_sorted_index20 = {}\n\tlocal prime_table_sorted_index21\
    \ = {}\n\tlocal prime_table_sorted_index22 = {}\n\tlocal prime_table_sorted_index23\
    \ = {}\n\tlocal prime_table_sorted_index24 = {}\n\tlocal prime_table_sorted_index25\
    \ = {}\n\tlocal prime_table_sorted_index26 = {}\n\tlocal prime_table_sorted_index27\
    \ = {}\n\tlocal prime_table_sorted_index28 = {}\n\tlocal prime_table_sorted_index29\
    \ = {}\n\tlocal prime_table_sorted_index30 = {}\n\tlocal prime_table_sorted_index31\
    \ = {}\n\tlocal prime_table_sorted_index32 = {}\n\tlocal prime_table_sorted_index33\
    \ = {}\n\tlocal prime_table_sorted_index34 = {}\n\tlocal prime_table_sorted_index35\
    \ = {}\n\tlocal prime_table_sorted_index36 = {}\n\tlocal prime_table_sorted_index37\
    \ = {}\n\tlocal prime_table_sorted_index38 = {}\n\tlocal prime_table_sorted_index39\
    \ = {}\n\tlocal prime_table_sorted_index40 = {}\n\tlocal prime_table_sorted_index41\
    \ = {}\n\tlocal prime_table_sorted_index42 = {}\n\tlocal prime_table_sorted_index43\
    \ = {}\n\tlocal prime_table_sorted_index44 = {}\n\tlocal prime_table_sorted_index45\
    \ = {}\n\tlocal prime_table_sorted_index46 = {}\n\tlocal prime_table_sorted_index47\
    \ = {}\n\tlocal prime_table_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz2x4hd5h.lua:72: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p == 1 then\n            factors[i] = 1\n        else\n          \
    \  local factor = 1\n            for j = 1, p do\n                factor = factor\
    \ * i\n            end\n            factors[i] = factor\n        end\n       \
    \ i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxqf0sxd.lua:26:\
    \ expected: {2}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmpfxqf0sxd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n            n = n / i\n        end\n    end\n    return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoy4gg260.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmpoy4gg260.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_counter\
    \ = 0\n    local prime_counter2 = 0\n    local prime_counter3 = 0\n    local prime_counter4\
    \ = 0\n    local prime_counter5 = 0\n    local prime_counter6 = 0\n    local prime_counter7\
    \ = 0\n    local prime_counter8 = 0\n    local prime_counter9 = 0\n    local prime_counter10\
    \ = 0\n    local prime_counter11 = 0\n    local prime_counter12 = 0\n    local\
    \ prime_counter13 = 0\n    local prime_counter14 = 0\n    local prime_counter15\
    \ = 0\n    local prime_counter16 = 0\n    local prime_counter17 = 0\n    local\
    \ prime_counter18 = 0\n    local prime_counter19 = 0\n    local prime_counter20\
    \ = 0\n    local prime_counter21 = 0\n    local prime_counter22 = 0\n    local\
    \ prime_counter23 = 0\n    local prime_counter24 = 0\n    local prime_counter25\
    \ = 0\n    local prime_counter26 = 0\n    local prime_counter27 = 0\n    local\
    \ prime_counter28 = 0\n    local prime_counter29 = 0\n    local prime_counter30\
    \ = 0\n    local prime_counter31 = 0\n    local prime_counter32 = 0\n    local\
    \ prime_counter33 = 0\n    local prime_counter34 = 0\n    local prime_counter35\
    \ = 0\n    local prime_counter36 = 0\n    local prime_counter37 = 0\n    local\
    \ prime_counter38 = 0\n    local prime_counter39 = 0\n    local prime_counter40\
    \ = 0\n    local prime_counter41 = 0\n    local prime_counter42 = 0\n    local\
    \ prime_counter43 = 0\n    local prime_counter44 = 0\n    local prime_counter45\
    \ = 0\n    local prime_counter46 = 0\n    local prime_counter47 = 0\n    local\
    \ prime_counter48 = 0\n    local prime_counter49 = 0\n    local prime_counter50\
    \ = 0\n    local prime_counter51 = 0\n    local prime_counter52 = 0\n    local\
    \ prime_counter53 = 0\n    local prime_counter54 = 0\n    local prime_counter55\
    \ = 0\n    local prime_counter56 = 0\n    local prime_counter57 = 0\n    local\
    \ prime_counter58 = 0\n    local prime_counter59 = 0\n    local prime_counter60\
    \ = 0\n    local prime_counter61 = 0\n    local prime_counter62 = 0\n    local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpihfkpj5n.lua:85: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 2, i do\n\
    \            if n % j == 0 then\n                factor = factor * j\n       \
    \     end\n        end\n        if factor ~= 1 then\n            table.insert(factors,\
    \ factor)\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpt1rw9c.lua:24:\
    \ expected: {2, 2}\nactual: {2, 2, 8}\nstack traceback:\n\t/tmp/tmpxpt1rw9c.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            factors[#factors+1] = factor\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        factor = factor * i\n        if factor > n then\n\
    \            break\n        end\n        factorization[factor] = factorization[factor]\
    \ or {}\n        factorization[factor][#factorization[factor]+1] = 1\n       \
    \ i = i + 1\n    end\n    local primes = {}\n    for i = 2, n do\n        local\
    \ prime = true\n        for j = 1, #factorization do\n            if factorization[i][j]\
    \ == i then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdetgdblg.lua:22:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpdetgdblg.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpdetgdblg.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        if n % i == 0 then\n            factor = factor\
    \ * i\n            i = i + 1\n        else\n            factors[#factors + 1]\
    \ = factor\n            factorization[factor] = i\n            factor = 1\n  \
    \      end\n    end\n    factors[#factors + 1] = factor\n    factorization[factor]\
    \ = n\n    return factors, factorization\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    table.insert(factors, n)\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yxxifhr.lua:19:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp4yxxifhr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = math.floor(n/i)\n        if p == 1 then\n            factors[i]\
    \ = 1\n        else\n            factors[i] = p\n        end\n        factorization[i]\
    \ = 1\n        i = i + 1\n    end\n    local j = 1\n    while j <= n do\n    \
    \    if factors[j] == 1 then\n            j = j + 1\n        else\n          \
    \  local k = 1\n            while factors[j] == factors[k] do\n              \
    \  k = k + 1\n            end\n            factors[k] = factors[k] + 1\n     \
    \       factorization[k] = factors[k]\n            j = j + 1\n        end\n  \
    \  end\n    return factors, factorization\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqodeu7yh.lua:27:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpqodeu7yh.lua:27: in function 'candidate'\n\t/tmp/tmpqodeu7yh.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_numbers = {}\n    local prime_numbers_factorization =\
    \ {}\n    local prime_numbers_factors = {}\n    local prime_numbers_factors_sum\
    \ = {}\n    local prime_numbers_factors_sum_primes = {}\n    local prime_numbers_factors_sum_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes = {}\n    local\
    \ prime_numbers_factors_sum_primes_primes_primes_primes = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n    local prime_numbers_factors_sum_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_prime\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu79c6f3l.lua:44: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        if n % i == 0 then\n            factor = i -- factor\n\
    \            i = i -- skip factor\n            factors[#factors+1] = factor --\
    \ add factor to list\n            while n / factor > 1 do\n                factor\
    \ = factors[#factors] -- get next factor\n                factors[#factors+1]\
    \ = factor -- add factor to list\n            end\n            factorization[#factorization+1]\
    \ = factor -- add factor to factorization\n        end\n        i = i + 1\n  \
    \  end\n    return factors, factorization\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_number\
    \ = 2\n    local prime_found = false\n    local prime_found2 = false\n    local\
    \ prime_found3 = false\n    local prime_found4 = false\n    local prime_found5\
    \ = false\n    local prime_found6 = false\n    local prime_found7 = false\n  \
    \  local prime_found8 = false\n    local prime_found9 = false\n    local prime_found10\
    \ = false\n    local prime_found11 = false\n    local prime_found12 = false\n\
    \    local prime_found13 = false\n    local prime_found14 = false\n    local prime_found15\
    \ = false\n    local prime_found16 = false\n    local prime_found17 = false\n\
    \    local prime_found18 = false\n    local prime_found19 = false\n    local prime_found20\
    \ = false\n    local prime_found21 = false\n    local prime_found22 = false\n\
    \    local prime_found23 = false\n    local prime_found24 = false\n    local prime_found25\
    \ = false\n    local prime_found26 = false\n    local prime_found27 = false\n\
    \    local prime_found28 = false\n    local prime_found29 = false\n    local prime_found30\
    \ = false\n    local prime_found31 = false\n    local prime_found32 = false\n\
    \    local prime_found33 = false\n    local prime_found34 = false\n    local prime_found35\
    \ = false\n    local prime_found36 = false\n    local prime_found37 = false\n\
    \    local prime_found38 = false\n    local prime_found39 = false\n    local prime_found40\
    \ = false\n    local prime_found41 = false\n    local prime_found42 = false\n\
    \    local prime_found43 = false\n    local prime_found44 = false\n    local prime_found45\
    \ = false\n    local prime_found46 = false\n    local prime_found47 = false\n\
    \    local prime_found48 = false\n    local prime_found49 = false\n    local prime_found50\
    \ = false\n    local prime_found51 = false\n    local prime_found52 = false\n\
    \    local prime_found53 = false\n    local prime_found54 = false\n    local prime_found55\
    \ = false\n    local prime_found56 = false\n    local prime_found57 = false\n\
    \    local prime_found58 = false\n    local prime_found59 = false\n    local prime_found60\
    \ = false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3n_hjbpj.lua:84: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         table.insert(factors, i)\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_numbers\
    \ = {}\n    local prime_numbers_count = 0\n    local prime_numbers_sum = 0\n \
    \   local prime_numbers_sum2 = 0\n    local prime_numbers_sum3 = 0\n    local\
    \ prime_numbers_sum4 = 0\n    local prime_numbers_sum5 = 0\n    local prime_numbers_sum6\
    \ = 0\n    local prime_numbers_sum7 = 0\n    local prime_numbers_sum8 = 0\n  \
    \  local prime_numbers_sum9 = 0\n    local prime_numbers_sum10 = 0\n    local\
    \ prime_numbers_sum11 = 0\n    local prime_numbers_sum12 = 0\n    local prime_numbers_sum13\
    \ = 0\n    local prime_numbers_sum14 = 0\n    local prime_numbers_sum15 = 0\n\
    \    local prime_numbers_sum16 = 0\n    local prime_numbers_sum17 = 0\n    local\
    \ prime_numbers_sum18 = 0\n    local prime_numbers_sum19 = 0\n    local prime_numbers_sum20\
    \ = 0\n    local prime_numbers_sum21 = 0\n    local prime_numbers_sum22 = 0\n\
    \    local prime_numbers_sum23 = 0\n    local prime_numbers_sum24 = 0\n    local\
    \ prime_numbers_sum25 = 0\n    local prime_numbers_sum26 = 0\n    local prime_numbers_sum27\
    \ = 0\n    local prime_numbers_sum28 = 0\n    local prime_numbers_sum29 = 0\n\
    \    local prime_numbers_sum30 = 0\n    local prime_numbers_sum31 = 0\n    local\
    \ prime_numbers_sum32 = 0\n    local prime_numbers_sum33 = 0\n    local prime_numbers_sum34\
    \ = 0\n    local prime_numbers_sum35 = 0\n    local prime_numbers_sum36 = 0\n\
    \    local prime_numbers_sum37 = 0\n    local prime_numbers_sum38 = 0\n    local\
    \ prime_numbers_sum39 = 0\n    local prime_numbers_sum40 = 0\n    local prime_numbers_sum41\
    \ = 0\n    local prime_numbers_sum42 = 0\n    local prime_numbers_sum43 = 0\n\
    \    local prime_numbers_sum44 = 0\n    local prime_numbers_sum45 = 0\n    local\
    \ prime_numbers_sum46 = 0\n    local prime_numbers_sum47 = 0\n    local prime_numbers_sum48\
    \ = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp94ngydax.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_count_max = 0\n    local prime_divisors_count_min = 0\n\
    \    local prime_divisors_count_sum = 0\n    local prime_divisors_count_sum2 =\
    \ 0\n    local prime_divisors_count_sum3 = 0\n    local prime_divisors_count_sum4\
    \ = 0\n    local prime_divisors_count_sum5 = 0\n    local prime_divisors_count_sum6\
    \ = 0\n    local prime_divisors_count_sum7 = 0\n    local prime_divisors_count_sum8\
    \ = 0\n    local prime_divisors_count_sum9 = 0\n    local prime_divisors_count_sum10\
    \ = 0\n    local prime_divisors_count_sum11 = 0\n    local prime_divisors_count_sum12\
    \ = 0\n    local prime_divisors_count_sum13 = 0\n    local prime_divisors_count_sum14\
    \ = 0\n    local prime_divisors_count_sum15 = 0\n    local prime_divisors_count_sum16\
    \ = 0\n    local prime_divisors_count_sum17 = 0\n    local prime_divisors_count_sum18\
    \ = 0\n    local prime_divisors_count_sum19 = 0\n    local prime_divisors_count_sum20\
    \ = 0\n    local prime_divisors_count_sum21 = 0\n    local prime_divisors_count_sum22\
    \ = 0\n    local prime_divisors_count_sum23 = 0\n    local prime_divisors_count_sum24\
    \ = 0\n    local prime_divisors_count_sum25 = 0\n    local prime_divisors_count_sum26\
    \ = 0\n    local prime_divisors_count_sum27 = 0\n    local prime_divisors_count_sum28\
    \ = 0\n    local prime_divisors_count_sum29 = 0\n    local prime_divisors_count_sum30\
    \ = 0\n    local prime_divisors_count_sum31 = 0\n    local prime_divisors_count_sum32\
    \ = 0\n    local prime_divisors_count_sum33 = 0\n    local prime_divisors_count_sum34\
    \ = 0\n    local prime_divisors_count_sum35 = 0\n    local prime_divisors_count_sum36\
    \ = 0\n    local prime_divisors_count_sum37 = 0\n    local prime_divisors_count_sum38\
    \ = 0\n    local prime_divisors_count_sum39 = 0\n    local prime_divisors_count_sum40\
    \ = 0\n    local prime_divisors_count_sum41 = 0\n    local prime_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5c_v2_2_.lua:69: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_pow\
    \ = {}\n    local prime_pow2 = {}\n    local prime_pow3 = {}\n    local prime_pow4\
    \ = {}\n    local prime_pow5 = {}\n    local prime_pow6 = {}\n    local prime_pow7\
    \ = {}\n    local prime_pow8 = {}\n    local prime_pow9 = {}\n    local prime_pow10\
    \ = {}\n    local prime_pow11 = {}\n    local prime_pow12 = {}\n    local prime_pow13\
    \ = {}\n    local prime_pow14 = {}\n    local prime_pow15 = {}\n    local prime_pow16\
    \ = {}\n    local prime_pow17 = {}\n    local prime_pow18 = {}\n    local prime_pow19\
    \ = {}\n    local prime_pow20 = {}\n    local prime_pow21 = {}\n    local prime_pow22\
    \ = {}\n    local prime_pow23 = {}\n    local prime_pow24 = {}\n    local prime_pow25\
    \ = {}\n    local prime_pow26 = {}\n    local prime_pow27 = {}\n    local prime_pow28\
    \ = {}\n    local prime_pow29 = {}\n    local prime_pow30 = {}\n    local prime_pow31\
    \ = {}\n    local prime_pow32 = {}\n    local prime_pow33 = {}\n    local prime_pow34\
    \ = {}\n    local prime_pow35 = {}\n    local prime_pow36 = {}\n    local prime_pow37\
    \ = {}\n    local prime_pow38 = {}\n    local prime_pow39 = {}\n    local prime_pow40\
    \ = {}\n    local prime_pow41 = {}\n    local prime_pow42 = {}\n    local prime_pow43\
    \ = {}\n    local prime_pow44 = {}\n    local prime_pow45 = {}\n    local prime_pow46\
    \ = {}\n    local prime_pow47 = {}\n    local prime_pow48 = {}\n    local prime_pow49\
    \ = {}\n    local prime_pow50 = {}\n    local prime_pow51 = {}\n    local prime_pow52\
    \ = {}\n    local prime_pow53 = {}\n    local prime_pow54 = {}\n    local prime_pow55\
    \ = {}\n    local prime_pow56 = {}\n    local prime_pow57 = {}\n    local prime_pow58\
    \ = {}\n    local prime_pow59 = {}\n    local prime_pow60 = {}\n    local prime_pow61\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu59j8aby.lua:69: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: -1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local factor = 1\n        while n % i == 0 do\n            factor = factor\
    \ * i\n            n = n / i\n        end\n        factors[i] = factor\n     \
    \   i = i + 1\n    end\n    for i = 1, n do\n        factorization[factors[i]]\
    \ = i\n    end\n    return factors, factorization\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = {}\n\tlocal factor = 1\n\tlocal factor_count =\
    \ 1\n\tlocal prime_factor = 1\n\tlocal prime_factor_count = 1\n\tlocal prime_factor_found\
    \ = false\n\tlocal prime_factor_found2 = false\n\tlocal prime_factor_found3 =\
    \ false\n\tlocal prime_factor_found4 = false\n\tlocal prime_factor_found5 = false\n\
    \tlocal prime_factor_found6 = false\n\tlocal prime_factor_found7 = false\n\tlocal\
    \ prime_factor_found8 = false\n\tlocal prime_factor_found9 = false\n\tlocal prime_factor_found10\
    \ = false\n\tlocal prime_factor_found11 = false\n\tlocal prime_factor_found12\
    \ = false\n\tlocal prime_factor_found13 = false\n\tlocal prime_factor_found14\
    \ = false\n\tlocal prime_factor_found15 = false\n\tlocal prime_factor_found16\
    \ = false\n\tlocal prime_factor_found17 = false\n\tlocal prime_factor_found18\
    \ = false\n\tlocal prime_factor_found19 = false\n\tlocal prime_factor_found20\
    \ = false\n\tlocal prime_factor_found21 = false\n\tlocal prime_factor_found22\
    \ = false\n\tlocal prime_factor_found23 = false\n\tlocal prime_factor_found24\
    \ = false\n\tlocal prime_factor_found25 = false\n\tlocal prime_factor_found26\
    \ = false\n\tlocal prime_factor_found27 = false\n\tlocal prime_factor_found28\
    \ = false\n\tlocal prime_factor_found29 = false\n\tlocal prime_factor_found30\
    \ = false\n\tlocal prime_factor_found31 = false\n\tlocal prime_factor_found32\
    \ = false\n\tlocal prime_factor_found33 = false\n\tlocal prime_factor_found34\
    \ = false\n\tlocal prime_factor_found35 = false\n\tlocal prime_factor_found36\
    \ = false\n\tlocal prime_factor_found37 = false\n\tlocal prime_factor_found38\
    \ = false\n\tlocal prime_factor_found39 = false\n\tlocal prime_factor_found40\
    \ = false\n\tlocal prime_factor_found41 = false\n\tlocal prime_factor_found42\
    \ = false\n\tlocal prime_factor_found43 = false\n\tlocal prime_factor_found44\
    \ = false\n\tlocal prime_factor_found45 = false\n\tlocal prime_factor_found46\
    \ = false\n\tlocal prime_factor_found47 = false\n\tlocal prime_factor_found48\
    \ = false\n\tlocal prime_factor_found49 = false\n\tlocal prime_factor_found50\
    \ = false\n\tlocal prime_factor_found51 = false\n\tlocal prime_factor_found52\
    \ = false\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx44br9i7.lua:78: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_product = 1\n    local\
    \ prime_divisors_product2 = 0\n    local prime_divisors_product3 = 0\n    local\
    \ prime_divisors_product4 = 0\n    local prime_divisors_product5 = 0\n    local\
    \ prime_divisors_product6 = 0\n    local prime_divisors_product7 = 0\n    local\
    \ prime_divisors_product8 = 0\n    local prime_divisors_product9 = 0\n    local\
    \ prime_divisors_product10 = 0\n    local prime_divisors_product11 = 0\n    local\
    \ prime_divisors_product12 = 0\n    local prime_divisors_product13 = 0\n    local\
    \ prime_divisors_product14 = 0\n    local prime_divisors_product15 = 0\n    local\
    \ prime_divisors_product16 = 0\n    local prime_divisors_product17 = 0\n    local\
    \ prime_divisors_product18 = 0\n    local prime_divisors_product19 = 0\n    local\
    \ prime_divisors_product20 = 0\n    local prime_divisors_product21 = 0\n    local\
    \ prime_divisors_product22 = 0\n    local prime_divisors_product23 = 0\n    local\
    \ prime_divisors_product24 = 0\n    local prime_divisors_product25 = 0\n    local\
    \ prime_divisors_product26 = 0\n    local prime_divisors_product27 = 0\n    local\
    \ prime_divisors_product28 = 0\n    local prime_divisors_product29 = 0\n    local\
    \ prime_divisors_product30 = 0\n    local prime_divisors_product31 = 0\n    local\
    \ prime_divisors_product32 = 0\n    local prime_divisors_product33 = 0\n    local\
    \ prime_divisors_product34 = 0\n    local prime_divisors_product35 = 0\n    local\
    \ prime_divisors_product36 = 0\n    local prime_divisors_product37 = 0\n    local\
    \ prime_divisors_product38 = 0\n    local prime_divisors_product39 = 0\n    local\
    \ prime_divisors_product40 = 0\n    local prime_divisors_product41 = 0\n    local\
    \ prime_divisors_product42 = 0\n    local prime_divisors_product43 = 0\n    local\
    \ prime_divisors_product44 = 0\n    local prime_divisors_product45 = 0\n    local\
    \ prime_divisors_product46 = 0\n    local prime_divisors_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyfugc0ma.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            n = n / i\n            table.insert(factors, i)\n        end\n\
    \        i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35z64r_r.lua:20:\
    \ expected: {2}\nactual: {1}\nstack traceback:\n\t/tmp/tmp35z64r_r.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while i <= n do\n        factor = math.floor(n / i)\n        if factor ~=\
    \ i then\n            factors[factor] = factors[factor] or {}\n            factors[factor][#factors[factor]\
    \ + 1] = i\n        end\n        i = i + 1\n    end\n    for i = 1, n do\n   \
    \     local factors = factors[i]\n        for j = 1, #factors do\n           \
    \ factorization[j] = factorization[j] or {}\n            factorization[j][#factorization[j]\
    \ + 1] = factors[j] * i\n        end\n    end\n    return factorization\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpkxpt0n.lua:30:\
    \ expected: {2}\nactual: {{2, 2}}\nstack traceback:\n\t/tmp/tmpxpkxpt0n.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    while factor ~= 1 do\n        factor = math.floor(n/factor)\n        factors[factor]\
    \ = factors[factor] + 1 or 1\n        factorization[factor] = factorization[factor]\
    \ or {}\n        factorization[factor][factor] = factorization[factor][factor]\
    \ + 1 or 1\n        i = i + 1\n    end\n    local primes = {}\n    for i = 2,\
    \ n do\n        if factors[i] == 1 then\n            primes[#primes+1] = i\n \
    \       end\n    end\n    return primes, factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml4hmmw7.lua:28:\
    \ expected: {2}\nactual: {}\nstack traceback:\n\t/tmp/tmpml4hmmw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n0q_s_1.lua:19:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp_n0q_s_1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    table.insert(factors, n)\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yxxifhr.lua:19:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp4yxxifhr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = factor * i\n            i = i + 1\n  \
    \      else\n            i = i + 1\n        end\n    end\n    factors[#factors+1]\
    \ = factor\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylctlagx.lua:24:\
    \ expected: {2, 2}\nactual: {8}\nstack traceback:\n\t/tmp/tmpylctlagx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while factor ~= n do\n    \
    \    if n % factor == 0 then\n            i = i + 1\n            factors[#factors\
    \ + 1] = factor\n            factor = n / factor\n        else\n            factor\
    \ = factor * 2\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04jm3zsn.lua:23:\
    \ expected: {2}\nactual: {1}\nstack traceback:\n\t/tmp/tmp04jm3zsn.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local primeFactors\
    \ = {}\n    local primeFactorsCount = {}\n    local primeFactorsCountMax = {}\n\
    \    local primeFactorsCountMaxIndex = 0\n    local primeFactorsCountMaxValue\
    \ = 0\n    local primeFactorsCountMaxIndexValue = 0\n    local primeFactorsCountMaxValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\n    local primeFactorsCountMaxIndexValueIndex = 0\n    local primeFactorsCountMaxIndexValueIndex\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp04ahsqss.lua:65: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n\tlocal factors\
    \ = {}\n\tlocal factorization = factor(n)\n\tfor i = 1, #factorization do\n\t\t\
    local factor = factorization[i]\n\t\tif factors[factor] == nil then\n\t\t\tfactors[factor]\
    \ = 1\n\t\telse\n\t\t\tfactors[factor] = factors[factor] + 1\n\t\tend\n\tend\n\
    \treturn factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc81690xg.lua:6:\
    \ attempt to call global 'factor' (a nil value)\nstack traceback:\n\t/tmp/tmpc81690xg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpc81690xg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_factorization\
    \ = {}\n    local prime_divisors = {}\n    local prime_divisors_count = 0\n  \
    \  local prime_divisors_sum = 0\n    local prime_divisors_sum2 = 0\n    local\
    \ prime_divisors_sum3 = 0\n    local prime_divisors_sum4 = 0\n    local prime_divisors_sum5\
    \ = 0\n    local prime_divisors_sum6 = 0\n    local prime_divisors_sum7 = 0\n\
    \    local prime_divisors_sum8 = 0\n    local prime_divisors_sum9 = 0\n    local\
    \ prime_divisors_sum10 = 0\n    local prime_divisors_sum11 = 0\n    local prime_divisors_sum12\
    \ = 0\n    local prime_divisors_sum13 = 0\n    local prime_divisors_sum14 = 0\n\
    \    local prime_divisors_sum15 = 0\n    local prime_divisors_sum16 = 0\n    local\
    \ prime_divisors_sum17 = 0\n    local prime_divisors_sum18 = 0\n    local prime_divisors_sum19\
    \ = 0\n    local prime_divisors_sum20 = 0\n    local prime_divisors_sum21 = 0\n\
    \    local prime_divisors_sum22 = 0\n    local prime_divisors_sum23 = 0\n    local\
    \ prime_divisors_sum24 = 0\n    local prime_divisors_sum25 = 0\n    local prime_divisors_sum26\
    \ = 0\n    local prime_divisors_sum27 = 0\n    local prime_divisors_sum28 = 0\n\
    \    local prime_divisors_sum29 = 0\n    local prime_divisors_sum30 = 0\n    local\
    \ prime_divisors_sum31 = 0\n    local prime_divisors_sum32 = 0\n    local prime_divisors_sum33\
    \ = 0\n    local prime_divisors_sum34 = 0\n    local prime_divisors_sum35 = 0\n\
    \    local prime_divisors_sum36 = 0\n    local prime_divisors_sum37 = 0\n    local\
    \ prime_divisors_sum38 = 0\n    local prime_divisors_sum39 = 0\n    local prime_divisors_sum40\
    \ = 0\n    local prime_divisors_sum41 = 0\n    local prime_divisors_sum42 = 0\n\
    \    local prime_divisors_sum43 = 0\n    local prime_divisors_sum44 = 0\n    local\
    \ prime_divisors_sum45 = 0\n    local prime_divisors_sum46 = 0\n    local prime_divisors_sum47\
    \ = 0\n    local prime_divisor\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0aju24o5.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local i = 1\n    while i <= n do\n \
    \       local p = math.floor(n/i)\n        factors[p] = i\n        factorization[p]\
    \ = factorization[p] or {}\n        factorization[p][p] = factorization[p][p]\
    \ or 1\n        i = i + 1\n    end\n    local factorizations = {}\n    for i =\
    \ 1, n do\n        local p = factors[i]\n        factorizations[p] = factorizations[p]\
    \ or {}\n        factorizations[p][p] = factorizations[p][p] or 1\n    end\n \
    \   for i = 1, n do\n        local p = factors[i]\n        local factorization\
    \ = factorizations[p]\n        for j = 1, n do\n            local q = factors[j]\n\
    \            factorization[q] = factorization[q] or {}\n            factorization[q][p]\
    \ = factorization[q][p] + factorization[p][q]\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2sv2hc6f.lua:27:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmp2sv2hc6f.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmp2sv2hc6f.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    table.insert(factors, n)\n\
    \    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yxxifhr.lua:19:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp4yxxifhr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sho7se_.lua:23:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmp7sho7se_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local factor = 1\n    local i = 1\n\
    \    local j = 1\n    while i <= n do\n        factor = factor * i\n        if\
    \ factor > n then\n            break\n        end\n        factorization[factor]\
    \ = factorization[factor] + 1 or 1\n        factors[factor] = factors[factor]\
    \ + 1 or 1\n        i = i + 1\n    end\n    local prime_factors = {}\n    local\
    \ prime_factor = 1\n    for i = 2, n do\n        if factors[i] == n then\n   \
    \         prime_factors[prime_factor] = factors[i]\n            prime_factor =\
    \ prime_factor + 1\n        end\n    end\n    return prime_factors\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkxwr31d.lua:15:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpbkxwr31d.lua:15: in function 'candidate'\n\t/tmp/tmpbkxwr31d.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750408
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\nlocal function factorize(n)\n    local factors\
    \ = {}\n    local factorization = {}\n    local primes = {}\n    local prime_numbers\
    \ = {}\n    local prime_numbers_count = 0\n    local prime_numbers_count_max =\
    \ 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    local prime_numbers_count_max\
    \ = 0\n    local prime_numbers_count_min = 0\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw2k_39yt.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750408
