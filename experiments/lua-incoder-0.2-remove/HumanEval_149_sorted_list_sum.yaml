name: HumanEval_149_sorted_list_sum
language: lua
prompt: "-- Write a function that accepts a list of strings as a parameter,\n-- deletes\
  \ the strings that have odd lengths from it,\n-- and returns the resulted list with\
  \ a sorted order,\n-- The list is always a list of strings and never an array of\
  \ numbers,\n-- and it may contain duplicates.\n-- The order of the list should be\
  \ ascending by length of each word, and you\n-- should return the list sorted by\
  \ that rule.\n-- If two words have the same length, sort the list alphabetically.\n\
  -- The function should return a list of strings in sorted order.\n-- You may assume\
  \ that all words will have the same length.\n-- For example:\nlocal function sorted_list_sum(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
  \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
  \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
  \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
  \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai',\
  \ 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n \
  \   lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa',\
  \ 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Write your code here.\nend", "  -- Write your code here\nend",
  "  -- Write your code here\n  -- return a list of strings in sorted order\nend",
  "  -- Write your code here\nend", "  -- Write your code here\n  -- return sorted_list_sum\n\
    end", "  -- Write your code here\n  -- return a list of strings in sorted order\n\
    end", "  -- Write your code here\n  -- The function should return a list of strings\
    \ in sorted order.\n  -- You may assume that all words will have the same length.\n\
    \  -- For example:\n  local function sorted_list_sum(lst)\n    local sorted_list\
    \ = {}\n    for _, word in ipairs(lst) do\n      if #sorted_list == 0 then\n \
    \       sorted_list = word\n      elseif #sorted_list == 1 then\n        sorted_list\
    \ = sorted_list .. \", \" .. word\n      else\n        local word_length = #word\n\
    \        if word_length == sorted_list[1] then\n          sorted_list = sorted_list\
    \ .. \", \" .. word\n        else\n          sorted_list = sorted_list .. \",\
    \ \" .. word\n        end\n      end\n    end\n    return sorted_list\n  end\n\
    \  return sorted_list_sum(lst)\nend\nprint(sorted_list_sum({\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"}))", "  -- Write your code here\nend", "  -- Write your code here\n  --\
    \ return a list of strings in sorted order\nend", "  -- Write your code here\n\
    \  -- return a list of strings in sorted order\nend", "  -- Write your code here\n\
    \  local sorted_list = \"\"\n  for i = 1, #lst do\n    if #sorted_list == 0 then\n\
    \      sorted_list = lst[i]\n    else\n      if #sorted_list < #lst[i] then\n\
    \        sorted_list = lst[i]\n      else\n        if #sorted_list == #lst[i]\
    \ then\n          sorted_list = sorted_list .. \", \" .. lst[i]\n        end\n\
    \      end\n    end\n  end\n  return sorted_list\nend", "  -- Write your code\
    \ here.\nend", "  -- Write your code here\nend", "  -- Write your code here.\n\
    \  -- Don't forget to return the sorted list.\nend", "    local sorted_list =\
    \ { }\n    local sorted_list_length = #lst\n    local sorted_list_index = 1\n\
    \    local sorted_list_value = lst[1]\n    for i = 2, sorted_list_length do\n\
    \        if sorted_list_value ~= lst[i] then\n            sorted_list[sorted_list_index]\
    \ = sorted_list_value\n            sorted_list_index = sorted_list_index + 1\n\
    \            sorted_list_value = lst[i]\n        end\n    end\n    sorted_list[sorted_list_index]\
    \ = sorted_list_value\n    return sorted_list\nend", "  -- Write your code here\n\
    \  local sorted_list = {}\n  for i = 1, #lst do\n    if #sorted_list == 0 then\n\
    \      sorted_list = lst\n    else\n      local found = false\n      for j = 1,\
    \ #sorted_list do\n        if sorted_list[j] == lst[i] then\n          found =\
    \ true\n          break\n        end\n      end\n      if not found then\n   \
    \     table.insert(sorted_list, lst[i])\n      end\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend", "  -- Write your code here\nend", "    local sorted_list\
    \ = nil\n    local sorted_list_length = nil\n    local sorted_list_word = nil\n\
    \    local sorted_list_word_length = nil\n    local sorted_list_word_count = nil\n\
    \    local sorted_list_word_count_length = nil\n    local sorted_list_word_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_length = nil\n    local\
    \ sorted_list_word_count_count_count_count_length = nil\n    local sorted_list_word_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local ", "  -- Write your code here\nend", "  -- Write your code\
    \ here\n  -- return nil\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\n  -- lst = a list of strings\n  -- return a list of strings in sorted\
    \ order\n  -- return nil if list is nil\n  -- return nil if list is empty\n  --\
    \ return nil if list contains nil\n  -- return nil if list contains duplicates\n\
    \  -- return nil if list contains non-strings\n  -- return nil if list contains\
    \ non-strings\n  -- return nil if list contains non-strings\n  -- return nil if\
    \ list contains non-strings\n  -- return nil if list contains non-strings\n  --\
    \ return nil if list contains non-strings\n  -- return nil if list contains non-strings\n\
    \  -- return nil if list contains non-strings\n  -- return nil if list contains\
    \ non-strings\n  -- return nil if list contains non-strings\n  -- return nil if\
    \ list contains non-strings\n  -- return nil if list contains non-strings\n  --\
    \ return nil if list contains non-strings\n  -- return nil if list contains non-strings\n\
    \  -- return nil if list contains non-strings\n  -- return nil if list contains\
    \ non-strings\n  -- return nil if list contains non-strings\n  -- return nil if\
    \ list contains non-strings\n  -- return nil if list contains non-strings\n  --\
    \ return nil if list contains non-strings\n  -- return nil if list contains non-strings\n\
    \  -- return nil if list contains non-strings\n  -- return nil if list contains\
    \ non-strings\n  -- return nil if list contains non-strings\n  -- return nil if\
    \ list contains non-strings\n  -- return nil if list contains non-strings\n  --\
    \ return nil if list contains non-strings\n  -- return nil if list contains non-strings\n\
    \  -- return nil if list contains non-strings\n  -- return nil if list contains\
    \ non-strings\n  -- return nil if list contains non-strings\n  -- return nil if\
    \ list contains non-strings\n  -- return nil if list contains non-strings\n  --\
    \ return nil if list contains non-strings\n  -- return nil if list contains non-strings\n\
    \  -- return nil if list contains non-strings\n  -- return nil if list contains\
    \ non-strings\n  -- return nil if list contains non-strings\n  -- return nil if\
    \ list contains non-strings\n  -- return nil if list contains non-strings\n  --\
    \ return nil if list contains non-strings\n  -- return nil if list contains non-strings\n\
    \  -- return nil if list contains non-strings\n  -- return nil if list contains\
    \ non-strings\n  -- return nil if list contains non-strings\n  -- return nil if ",
  "  -- Write your code here\n  -- return a list of strings in sorted order\nend",
  "    local function compare(a,b)\n        if a~=b then return a<b end\n        return\
    \ a\n    end\n    table.sort(lst,compare)\n    return lst\nend", "  -- Write your\
    \ code here\nend", "    local function compare(a,b)\n        if a~=b then\n  \
    \          return a~=b\n        else\n            return a>b\n        end\n  \
    \  end\n    table.sort(lst,compare)\n    return lst\nend", "  -- Write your code\
    \ here\n  local sorted_list = nil\n  for i = 1, #lst do\n    if sorted_list ==\
    \ nil then\n      sorted_list = lst\n    else\n      if sorted_list[i] ~= lst[i]\
    \ then\n        sorted_list = nil\n      end\n    end\n  end\n  -- Write your\
    \ code here\n  return sorted_list\nend", "  -- Write your code here.\n  return\
    \ lst\nend", "  -- Write your code here\nend", "  -- Write your code here.\nend",
  "  -- Write your code here\n  local sorted_list = {}\n  for i = 1, #lst do\n   \
    \ local word = lst[i]\n    local length = #word\n    if length % 2 == 1 then\n\
    \      sorted_list[#sorted_list + 1] = word\n    end\n  end\n  return table.sort(sorted_list)\n\
    end", "  -- Write your code here\n  -- return a list of strings in sorted order\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\n  -- return\
    \ a list of strings in sorted order\nend", "  -- Write your code here\nend", " \
    \ -- Write your code here.\n  -- The list will be a list of strings and never\
    \ an array of numbers,\n  -- The order of the list should be ascending by length\
    \ of each word, and you\n  -- should return the list sorted by that rule.\n  --\
    \ If two words have the same length, sort the list alphabetically.\n  -- The function\
    \ should return a list of strings in sorted order.\n  -- You may assume that all\
    \ words will have the same length.\n  -- For example:\n  local function sorted_list_sum(lst)\n\
    \    local sorted_lst = {}\n    for _, word in ipairs(lst) do\n      if #word\
    \ % 2 == 1 then\n        table.insert(sorted_lst, word)\n      end\n    end\n\
    \    table.sort(sorted_lst)\n    return sorted_lst\n  end\n  return sorted_list_sum(lst)\n\
    end\nprint(sorted_list_sum({\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}))", "  -- Write your code\
    \ here.\nend", "    local sorted_list = \"\"\n    local sorted_list_size = #lst\n\
    \    for i = 1, sorted_list_size do\n        local word = lst[i]\n        local\
    \ word_size = #word\n        if word_size % 2 == 1 then\n            sorted_list\
    \ = sorted_list .. word\n        else\n            sorted_list = sorted_list ..\
    \ word .. \" \"\n        end\n    end\n    sorted_list = sorted_list .. \" \"\n\
    \    local sorted_list_size = #sorted_list\n    for i = 1, sorted_list_size do\n\
    \        local word = sorted_list:sub(i, i + 1)\n        local word_size = #word\n\
    \        if word_size % 2 == 1 then\n            sorted_list = sorted_list ..\
    \ word\n        else\n            sorted_list = sorted_list .. word .. \" \"\n\
    \        end\n    end\n    return sorted_list\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\n  local sorted_lst\
    \ = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local length = #word\n\
    \    if length % 2 == 1 then\n      sorted_lst[#sorted_lst+1] = word\n    end\n\
    \  end\n  return table.sort(sorted_lst, function(a, b) return #a > #b end)\nend",
  "    local function compare(a,b)\n        if #a ~= #b then\n            return #a\
    \ > #b ? 1 : -1\n        end\n        for i=1,#a do\n            if a[i] ~= b[i]\
    \ then\n                return a[i] > b[i] ? 1 : -1\n            end\n       \
    \ end\n        return 0\n    end\n    return table.sort(lst, compare)\nend", " \
    \   local function compare(a,b)\n        if a~=b then\n            return a~=b\n\
    \        else\n            return a>b\n        end\n    end\n    table.sort(lst,compare)\n\
    \    return lst\nend", "    local sorted_list = nil\n    local sorted_list_length\
    \ = nil\n    local sorted_list_word = nil\n    local sorted_list_word_length =\
    \ nil\n    local sorted_list_word_count = nil\n    local sorted_list_word_count_length\
    \ = nil\n    local sorted_list_word_count_count = nil\n    local sorted_list_word_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count = nil\n    local sorted_list_word_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count = nil\n    local sorted_list_word_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count = nil\n    local\
    \ sorted_list_word_count_count_count_count_count_length = nil\n    local sorted_list_word_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_", "    local sorted_list\
    \ = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_length = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_length = nil\n    local\
    \ sorted_list_", "  -- Write your code here.\nend", "  -- Write your code here.\n\
    end", "  -- Write your code here.\nend", "  -- Write your code here.\n  -- lst\
    \ = a list of strings\n  -- return a list of strings in sorted order\n  -- The\
    \ list will always contain strings and never an array of numbers\n  -- The order\
    \ of the list should be ascending by length of each word, and you\n  -- should\
    \ return the list sorted by that rule.\n  -- If two words have the same length,\
    \ sort the list alphabetically.\n  -- The function should return a list of strings\
    \ in sorted order.\n  -- You may assume that all words will have the same length.\n\
    \  -- For example:\n  local function sorted_list_sum(lst)\n    local sorted_list\
    \ = {}\n    local sorted_list_len = {}\n    for _, v in pairs(lst) do\n      sorted_list[#sorted_list\
    \ + 1] = v\n      sorted_list_len[#sorted_list_len + 1] = #v\n    end\n    table.sort(sorted_list,\
    \ function(a, b) return sorted_list_len[a] < sorted_list_len[b] end)\n    return\
    \ sorted_list\n  end\n  return sorted_list_sum(lst)\nend", "  -- Write your code\
    \ here\n  -- return a list of strings in sorted order\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\n  local sorted_list = nil\n  for\
    \ i = 1, #lst do\n    local word = lst[i]\n    local length = #word\n    if length\
    \ % 2 == 1 then\n      sorted_list = sorted_list .. word\n    end\n  end\n  return\
    \ sorted_list\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\n  local sorted_list = {}\n  for i = 1, #lst\
    \ do\n    local length = string.len(lst[i])\n    if length % 2 == 1 then\n   \
    \   table.insert(sorted_list, lst[i])\n    end\n  end\n  return table.sort(sorted_list)\n\
    end", "  -- Write your code here.\nend", "  -- Write your code here\n  -- Don't\
    \ forget to return the sorted list\nend", "  -- Write your code here\n  local\
    \ sorted_list = nil\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ length = #word\n    if length % 2 == 1 then\n      sorted_list = sorted_list\
    \ .. word\n    else\n      local j = i\n      while j > 0 and length % 2 == 1\
    \ do\n        local word = lst[j]\n        local length = #word\n        sorted_list\
    \ = sorted_list .. word\n        j = j - 1\n      end\n    end\n  end\n  return\
    \ sorted_list\nend", "  -- Write your code here.\nend", "  -- Write your code\
    \ here\n  -- return a list of strings in sorted order\nend", "    local function\
    \ sort_by_length(word)\n        local word_length = #word\n        if word_length\
    \ == 1 then\n            return word\n        elseif word_length == 2 then\n \
    \           return word[1]\n        else\n            return word\n        end\n\
    \    end\n    local function sort_by_alphabet(word)\n        return word\n   \
    \ end\n    local function sort_by_length(word)\n        local word_length = #word\n\
    \        if word_length == 1 then\n            return word\n        elseif word_length\
    \ == 2 then\n            return word[1]\n        else\n            return word\n\
    \        end\n    end\n    local function sort_by_alphabet(word)\n        return\
    \ word\n    end\n    local function sort_by_length(word)\n        local word_length\
    \ = #word\n        if word_length == 1 then\n            return word\n       \
    \ elseif word_length == 2 then\n            return word[1]\n        else\n   \
    \         return word\n        end\n    end\n    local function sort_by_alphabet(word)\n\
    \        return word\n    end\n    local function sort_by_length(word)\n     \
    \   local word_length = #word\n        if word_length == 1 then\n            return\
    \ word\n        elseif word_length == 2 then\n            return word[1]\n   \
    \     else\n            return word\n        end\n    end\n    local function\
    \ sort_by_alphabet(word)\n        return word\n    end\n    local function sort_by_length(word)\n\
    \        local word_length = #word\n        if word_length == 1 then\n       \
    \     return word\n        elseif word_length == 2 then\n            return word[1]\n\
    \        else\n            return word\n        end\n    end\n    local function\
    \ sort_by_alphabet(word)\n        return word\n    end\n    local function sort_by_length(word)\n\
    \        local word_length = #word\n        if word_length == 1 then\n       \
    \     return word\n        elseif word_length == 2 then\n            return word[1]\n\
    \        else\n            return word\n        end\n    end\n    local function\
    \ sort_by_alphabet(word)\n        return word\n    end\n    local function sort_by_length(word)\n\
    \        local word_length = #word\n        if word_length == 1 then\n       \
    \     return word\n        elseif word_length == 2 then\n            return word[1]\n\
    \        else\n            return word\n        end\n    end\n    local function\
    \ sort_by_alphabet(word)\n        return word\n    end\n    local function sort_by_length(word)\n\
    \        local word_length = #word\n        if word_length == 1 then\n       \
    \     return word\n        elseif word_length == 2 then\n            return word[1]\n\
    \        else\n            return word\n        end\n    end\n    local function\
    \ sort_by_alphabet(word)\n        return word\n    end\n    local function sort_by_length(word)\n\
    \        local word_length = #word\n        if word_length == 1 then\n       \
    \     return word\n        elseif word_length == 2 then\n            return word[1]\n\
    \        else\n            return word\n        end\n    end\n    local function\
    \ sort_", "  -- Write your code here\nend", "    local function compare(a,b)\n\
    \        if a~=b then\n            return a~=b\n        else\n            return\
    \ a>b\n        end\n    end\n    table.sort(lst,compare)\n    return lst\nend",
  "    local sorted_list = nil\n    local sorted_list_len = nil\n    local sorted_list_word\
    \ = nil\n    local sorted_list_word_len = nil\n    local sorted_list_word_count\
    \ = nil\n    local sorted_list_word_count_len = nil\n    local sorted_list_word_count_count\
    \ = nil\n    local sorted_list_word_count_count_len = nil\n    local sorted_list_word_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_len = nil\n    local sorted_list_word_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_len = nil\n    local\
    \ sorted_list_word_count_count_count_count_count = nil\n    local sorted_list_word_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_len =\
    \ nil\n    local sorted_list_word_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_len\
    \ = nil\n    ", "  -- Write your code here.\nend", "  -- Write your code here.\n\
    \  -- The list will be a list of strings and never an array of numbers,\n  --\
    \ The order of the list should be ascending by length of each word, and you\n\
    \  -- should return the list sorted by that rule.\n  -- If two words have the\
    \ same length, sort the list alphabetically.\n  -- The function should return\
    \ a list of strings in sorted order.\n  -- You may assume that all words will\
    \ have the same length.\n  -- For example:\n  local function sorted_list_sum(lst)\n\
    \    local sorted_list = lst\n    local sorted_list_size = #sorted_list\n    for\
    \ i = 1, sorted_list_size do\n      local word = sorted_list[i]\n      local word_size\
    \ = #word\n      if word_size % 2 == 1 then\n        sorted_list[i] = word\n \
    \     else\n        local j = 1\n        while j <= word_size do\n          local\
    \ next_word = sorted_list[i + j]\n          local next_word_size = #next_word\n\
    \          if next_word_size % 2 == 1 then\n            sorted_list[i + j] = next_word\n\
    \          else\n            local j = 1\n            while j <= next_word_size\
    \ do\n              local next_next_word = sorted_list[i + j + 1]\n          \
    \    local next_next_word_size = #next_next_word\n              if next_next_word_size\
    \ % 2 == 1 then\n                sorted_list[i + j + 1] = next_next_word\n   \
    \           else\n                j = j + 1\n              end\n            end\n\
    \            i = i + j\n          end\n          j = j + 1\n        end\n    \
    \  end\n    end\n    return sorted_list\n  end\n  return sorted_list_sum(lst)\n\
    end\nprint(sorted_list_sum([\n  \"apple\",\n  \"banana\",\n  \"carrot\",\n  \"\
    dog\",\n  \"egg\",\n  \"fence\",\n  \"grape\",\n  \"grapefruit\",\n  \"grapes\"\
    ,\n  \"grapeseed\",\n  \"grapevine\",\n  \"grapevines\",\n  \"grapevy\",\n  \"\
    grapey\",\n  \"grapeys\",\n  \"grapez\",\n  \"grapezes\",\n  \"grapezies\",\n\
    \  \"grapezy\",\n  \"grapezy\",\n  \"grapezys\",\n  \"grapezzes\",\n  \"grapezzess\"\
    ,\n  \"grapezzesses\",\n  \"grapezzesss\",\n  \"grapezzessss\",\n  \"grapezzesssses\"\
    ,\n  \"grapezzesssss\",\n  \"grapezzessssss\",\n  \"grapezzesssssses\",\n  \"\
    grapezzessss", "  -- Write your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- ", "  -- Write your code here\n  local\
    \ function compare(a,b)\n    if #a ~= #b then\n      return #a > #b ? 1 : -1\n\
    \    end\n    for i,v in ipairs(a) do\n      if v ~= b[i] then\n        return\
    \ #a > #b\n      end\n    end\n    return 0\n  end\n  table.sort(lst, compare)\n\
    \  return lst\nend", "  -- Write your code here.\nend", "  -- Write your code\
    \ here\n  local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n\
    \    local word_length = #word\n    if word_length % 2 == 1 then\n      table.insert(sorted_lst,\
    \ word)\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b\
    \ end)\n  return sorted_lst\nend", "    local sorted_lst = {}\n    for i = 1,\
    \ #lst do\n        local word = lst[i]\n        local length = #word\n       \
    \ if length % 2 == 1 then\n            table.insert(sorted_lst, word)\n      \
    \  else\n            table.insert(sorted_lst, word, \"~\")\n        end\n    end\n\
    \    table.sort(sorted_lst, function(a, b) return #a < #b end)\n    return sorted_lst\n\
    end", "    local sorted_list = nil\n    local sorted_list_length = nil\n    local\
    \ sorted_list_word = nil\n    local sorted_list_word_length = nil\n    local sorted_list_word_count\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_",
  "  -- Write your code here\nend", "  -- Write your code here\n  local sorted_lst\
    \ = {}\n  for i = 1, #lst do\n    if sorted_lst[#sorted_lst] == nil then\n   \
    \   sorted_lst[#sorted_lst] = lst[i]\n    else\n      if sorted_lst[#sorted_lst]\
    \ > lst[i] then\n        sorted_lst[#sorted_lst] = lst[i]\n      end\n    end\n\
    \  end\n  return sorted_lst\nend", "  -- Write your code here\nend", "    local\
    \ function compare(a,b)\n        if a~=b then\n            return a~=b\n     \
    \   else\n            return a<b\n        end\n    end\n    table.sort(lst,compare)\n\
    \    return lst\nend", "    local sorted_list = lst\n    for i = 1, #lst do\n\
    \        local word = lst[i]\n        local length = #word\n        if length\
    \ % 2 == 1 then\n            sorted_list[#sorted_list + 1] = word\n        end\n\
    \    end\n    table.sort(sorted_list, function(a, b) return #a > #b end)\n   \
    \ return sorted_list\nend", "    local sorted_list = \"\"\n    for _, word in\
    \ ipairs(lst) do\n        sorted_list = sorted_list .. word\n    end\n    sorted_list\
    \ = sorted_list .. \" \"\n    local sorted_list = sorted_list:gsub(\"%S+\", \"\
    \ \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"\
    %S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list\
    \ = sorted_list:gsub(\"%S+\", \" \")\n    sorted_list = sorted_list:gsub(\"%S+\"\
    , \" \")\n    sorted_list = sorted_list:gsub(\"%S+\", \" \")\n    ", "    local\
    \ sorted_list = nil\n    local sorted_list_length = nil\n    local sorted_list_word\
    \ = nil\n    local sorted_list_word_length = nil\n    local sorted_list_word_count\
    \ = nil\n    local sorted_list_word_count_length = nil\n    local sorted_list_word_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_length = nil\n    local\
    \ sorted_list_word_count_count_count_count_length = nil\n    local sorted_list_word_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_length\
    \ = nil\n    local sorted_list_word_count_count_count_", "  -- Write your code\
    \ here.\nend", "  -- Write your code here.\n  return lst\nend", "  -- Write your\
    \ code here\n  -- return a list of strings in sorted order\nend", "  -- Write\
    \ your code here\nend", "    local sorted_lst = {}\n    for _, word in ipairs(lst)\
    \ do\n        table.insert(sorted_lst, word)\n    end\n    table.sort(sorted_lst,\
    \ function(a, b) return #a > #b end)\n    return sorted_lst\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local function sort_by_length(word)\n\
    \    return #word\n  end\n  local function sort_by_alpha(word)\n    return word\n\
    \  end\n  local function sort_by_length(word)\n    return #word\n  end\n  local\
    \ function sort_by_alpha(word)\n    return word\n  end\n  local ", "  -- Write\
    \ your code here\n  -- return a list of strings in sorted order\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here.\n  -- lst = a list of strings\n\
    \  -- return a list of strings in sorted order\n  -- The list should be a list\
    \ of strings and never an array of numbers,\n  -- The order of the list should\
    \ be ascending by length of each word, and you\n  -- should return the list sorted\
    \ by that rule.\n  -- If two words have the same length, sort the list alphabetically.\n\
    \  -- The function should return a list of strings in sorted order.\n  -- You\
    \ may assume that all words will have the same length.\n  -- For example:\n  local\
    \ function sorted_list_sum(lst)\n    local sorted_lst = {}\n    for _, v in pairs(lst)\
    \ do\n      if #v % 2 == 1 then\n        table.insert(sorted_lst, v)\n      else\n\
    \        table.insert(sorted_lst, v[1], v[2])\n      end\n    end\n    return\
    \ table.sort(sorted_lst)\n  end\n  return sorted_list_sum(lst)\nend", "  -- Write\
    \ your code here\n  local sorted_list = \"\"\n  for i = 1, #lst do\n    if string.len(sorted_list)\
    \ == 0 then\n      sorted_list = lst[i]\n    elseif string.len(sorted_list) >\
    \ string.len(lst[i]) then\n      sorted_list = sorted_list .. \", \" .. lst[i]\n\
    \    elseif string.len(sorted_list) < string.len(lst[i]) then\n      sorted_list\
    \ = sorted_list .. \", \" .. lst[i]\n    end\n  end\n  sorted_list = sorted_list\
    \ .. \", \" .. sorted_list\n  sorted_list = string.gsub(sorted_list, \"(.*), \"\
    , \"\")\n  sorted_list = string.gsub(sorted_list, \"(.*), $\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^$\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list = string.gsub(sorted_list,\
    \ \"^,\", \"\")\n  sorted_list = string.gsub(sorted_list, \"^,$\", \"\")\n  sorted_list\
    \ = string.gsub(sorted_list, \"^,\", \"\")\n  sorted_list = ", "  -- Write your\
    \ code here.\n  -- The function should return a list of strings in sorted order.\n\
    \  -- You may assume that all words will have the same length.\n  -- For example:\n\
    \  local function sorted_list_sum(lst)\n    local sorted_list = {}\n    for _,\
    \ item in ipairs(lst) do\n      if #sorted_list == 0 then\n        sorted_list\
    \ = item\n      elseif #sorted_list == 1 then\n        if item > sorted_list then\n\
    \          sorted_list = item\n        end\n      elseif #sorted_list > 1 then\n\
    \        if item > sorted_list[#sorted_list] then\n          sorted_list[#sorted_list]\
    \ = item\n        end\n      end\n    end\n    return sorted_list\n  end\n  return\
    \ sorted_list_sum(lst)\nend\nprint(sorted_list_sum({\"apple\", \"banana\", \"\
    carrot\", \"dog\", \"elephant\", \"fish\", \"goat\", \"horse\", \"kiwi\", \"lion\"\
    , \"monkey\", \"pig\", \"puppy\", \"rabbit\", \"sheep\", \"tiger\", \"whale\"\
    , \"zebra\"}))", "  -- Write your code here.\nend", "  -- Write your code here\n\
    end", "  -- Write your code here.\nend", "  -- Write your code here\n  local sorted_list\
    \ = nil\n  local sorted_list_length = nil\n  for i = 1, #lst do\n    sorted_list_length\
    \ = sorted_list_length or lst[i]:len() or 1\n    if sorted_list_length == lst[i]:len()\
    \ then\n      sorted_list = sorted_list .. lst[i]\n    else\n      sorted_list\
    \ = sorted_list .. lst[i] .. \",\"\n    end\n  end\n  return sorted_list:sub(1,\
    \ -2)\nend", "    local function compare(a,b)\n        if #a ~= #b then\n    \
    \        return #a > #b ? 1 : -1\n        end\n        for i=1,#a do\n       \
    \     if a[i] ~= b[i] then\n                return a[i] > b[i] ? 1 : -1\n    \
    \        end\n        end\n        return 0\n    end\n    table.sort(lst, compare)\n\
    \    return lst\nend", "  -- Write your code here\n  -- return a list of strings\
    \ in sorted order\nend", "  -- Write your code here.\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here\n  local sorted_lst = {}\n  for i = 1,\
    \ #lst do\n    local word = lst[i]\n    local length = #word\n    if length %\
    \ 2 == 1 then\n      sorted_lst[#sorted_lst+1] = word\n    end\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a < #b end)\n  return sorted_lst\nend", "  -- Write your\
    \ code here.\n  return lst\nend", "  -- Write your code here\n  -- Your code here\n\
    \  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- ", "  -- Write your code\
    \ here.\n  return lst\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here.\nend", "    local function cmp(a,b)\n\
    \        if #a ~= #b then\n            return #a > #b ? 1 : -1\n        end\n\
    \        return a:lower() > b:lower() and 1 or -1\n    end\n    table.sort(lst,\
    \ cmp)\n    return lst\nend", "    local sorted_lst = {}\n    for _, word in ipairs(lst)\
    \ do\n        table.insert(sorted_lst, word)\n    end\n    table.sort(sorted_lst,\
    \ function(a, b) return #a > #b end)\n    return sorted_lst\nend", "  -- Write\
    \ your code here\n  -- return a list of strings in sorted order\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here.\n  -- The list should be a\
    \ list of strings and never an array of numbers,\n  -- The order of the list should\
    \ be ascending by length of each word, and you\n  -- should return the list sorted\
    \ by that rule.\n  -- If two words have the same length, sort the list alphabetically.\n\
    \  -- The function should return a list of strings in sorted order.\n  -- You\
    \ may assume that all words will have the same length.\n  -- For example:\n  local\
    \ function sorted_list_sum(lst)\n    local sorted_list = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local sorted_list_len = nil\n    local sorted_list_len = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_len = nil\n  \
    \  local ", "  -- Write your code here\nend", "    local sorted_list = nil\n \
    \   local sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len\
    \ = nil\n    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n\
    \    local sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local\
    \ sorted_list_sorted = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted\
    \ = nil\n    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n\
    \    local sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local\
    \ sorted_list_len = nil\n    local sorted_list_sorted = nil\n    local sorted_",
  "  -- Write your code here\nend", "  -- Write your code here\n  -- return nil\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here\n  -- return a list of\
    \ strings in sorted order\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "    local function\
    \ compare(a,b)\n        if #a ~= #b then\n            return #a > #b ? 1 : -1\n\
    \        end\n        for i = 1, #a do\n            if a[i] ~= b[i] then\n   \
    \             return a[i] > b[i] ? 1 : -1\n            end\n        end\n    \
    \    return 0\n    end\n    table.sort(lst, compare)\n    return lst\nend", " \
    \   local sorted_list = nil\n    local sorted_list_size = nil\n    local sorted_list_length\
    \ = nil\n    local sorted_list_word = nil\n    local sorted_list_word_length =\
    \ nil\n    local sorted_list_word_count = nil\n    local sorted_list_word_count_max\
    \ = nil\n    local sorted_list_word_count_min = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = nil\n    local sorted_list_word_count_avg = nil\n    local sorted_list_word_count_min\
    \ = nil\n    local sorted_list_word_count_max = nil\n    local sorted_list_word_count_sum\
    \ = ", "  -- Write your code here\n  local function compare(a,b)\n    if #a ~=\
    \ #b then return #a < #b end\n    local i = 0\n    while i < #a do\n      if a[i]\
    \ ~= b[i] then return a[i] < b[i] end\n      i = i + 1\n    end\n    return true\n\
    \  end\n  table.sort(lst, compare)\n  return lst\nend", "  -- Write your code\
    \ here.\n  -- The list should be sorted by length and then alphabetically by each\
    \ word.\n  -- The function should return a list of strings in sorted order.\n\
    \  -- You may assume that all words will have the same length.\n  -- The list\
    \ should be sorted by length and then alphabetically by each word.\n  -- The function\
    \ should return a list of strings in sorted order.\n  -- You may assume that all\
    \ words will have the same length.\n  -- The list should be sorted by length and\
    \ then alphabetically by each word.\n  -- The function should return a list of\
    \ strings in sorted order.\n  -- You may assume that all words will have the same\
    \ length.\n  -- The list should be sorted by length and then alphabetically by\
    \ each word.\n  -- The function should return a list of strings in sorted order.\n\
    \  -- You may assume that all words will have the same length.\n  -- The list\
    \ should be sorted by length and then alphabetically by each word.\n  -- The function\
    \ should return a list of strings in sorted order.\n  -- You may assume that all\
    \ words will have the same length.\n  -- The list should be sorted by length and\
    \ then alphabetically by each word.\n  -- The function should return a list of\
    \ strings in sorted order.\n  -- You may assume that all words will have the same\
    \ length.\n  -- The list should be sorted by length and then alphabetically by\
    \ each word.\n  -- The function should return a list of strings in sorted order.\n\
    \  -- You may assume that all words will have the same length.\n  -- The list\
    \ should be sorted by length and then alphabetically by each word.\n  -- The function\
    \ should return a list of strings in sorted order.\n  -- You may assume that all\
    \ words will have the same length.\n  -- The list should be sorted by length and\
    \ then alphabetically by each word.\n  -- The function should return a list of\
    \ strings in sorted order.\n  -- You may assume that all words will have the same\
    \ length.\n  -- The list should be sorted by length and then alphabetically by\
    \ each word.\n  -- The function should return a list of strings in sorted order.\n\
    \  -- You may assume that all words will have the same length.\n  -- The list\
    \ should be sorted by length and then alphabetically by each word.\n  -- The function\
    \ should return a list of strings in sorted order.\n  -- You may assume that all\
    \ words will have the same length.\n  -- The list should be sorted by length and\
    \ then alphabetically by each word.\n  -- The function should return a list of\
    \ strings in sorted order.\n  -- You may assume that all words will have the same\
    \ length.\n  -- The list should be sorted by length and then alphabetically by\
    \ each word.\n  -- The function should return a list of strings in ", "  -- Write\
    \ your code here\n  -- return a list of strings in sorted order\nend", "  -- Write\
    \ your code here.\nend", "  -- Write your code here\n  -- return a list of strings\
    \ in sorted order\nend", "  -- Write your code here.\n  -- The list will be a\
    \ list of strings and never an array of numbers,\n  -- The list will contain duplicates.\n\
    \  -- The order of the list should be ascending by length of each word, and you\n\
    \  -- should return the list sorted by that rule.\n  -- If two words have the\
    \ same length, sort the list alphabetically.\n  -- The function should return\
    \ a list of strings in sorted order.\n  -- You may assume that all words will\
    \ have the same length.\n  -- For example:\n  local function sorted_list_sum(lst)\n\
    \    local sorted_list = \"\"\n    local sorted_list_lengths = {}\n    for _,\
    \ word in ipairs(lst) do\n      sorted_list_lengths[#sorted_list_lengths + 1]\
    \ = #word\n    end\n    table.sort(sorted_list_lengths, function(a, b) return\
    \ a < b end)\n    for _, length in ipairs(sorted_list_lengths) do\n      for _,\
    \ word in ipairs(lst) do\n        if #word == length then\n          sorted_list\
    \ = sorted_list .. word .. \" \"\n        end\n      end\n    end\n    return\
    \ sorted_list\n  end\n  return sorted_list_sum(lst)\nend", "  -- Write your code\
    \ here\n  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- return a list of strings\
    \ in sorted order\n  -- return a list of strings in sorted order\n  -- return\
    \ a list of strings in sorted order\n  -- return a list of strings in sorted order\n\
    \  -- return a list of strings in sorted order\n  -- ", "    local function compare(a,b)\n\
    \        if #a ~= #b then\n            return #b\n        elseif #a == 0 then\n\
    \            return 0\n        else\n            return #a > #b ? 1 : -1\n   \
    \     end\n    end\n    return table.sort(lst, compare)\nend", "  -- Write your\
    \ code here\n  -- return a list of strings in sorted order\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\n  local sorted_list = nil\n\
    \  for i = 1, #lst do\n    if sorted_list == nil then\n      sorted_list = lst\n\
    \    else\n      if sorted_list[i] ~= lst[i] then\n        sorted_list = sorted_list\
    \ .. \", \" .. lst[i]\n      else\n        sorted_list = sorted_list .. \", \"\
    \ .. sorted_list[i]\n      end\n    end\n  end\n  return sorted_list\nend", " \
    \ -- Write your code here\nend", "    local function compare(a,b)\n        if\
    \ a[1] < b[1] then\n            return -1\n        elseif a[1] > b[1] then\n \
    \           return 1\n        else\n            return a[2] < b[2] and -1 or 1\n\
    \        end\n    end\n    table.sort(lst, compare)\n    return lst\nend", " \
    \ -- Write your code here.\n  -- The function should return a list of strings\
    \ in sorted order.\n  -- You may assume that all words will have the same length.\n\
    \  -- For example:\n  local function sorted_list_sum(lst)\n    local sorted_lst\
    \ = {}\n    for _, word in ipairs(lst) do\n      table.insert(sorted_lst, word)\n\
    \    end\n    table.sort(sorted_lst, function(a, b) return #a > #b end)\n    return\
    \ sorted_lst\n  end\n  return sorted_list_sum(lst)\nend", "  -- Write your code\
    \ here.\nend", "  -- Write your code here.\nend", "  -- Write your code here.\n\
    end", "    local function compare(a,b)\n        if a~=b then\n            return\
    \ a~=b\n        else\n            return a>b\n        end\n    end\n    table.sort(lst,compare)\n\
    \    return lst\nend", "    local function compare(a,b)\n        if a~=b then\n\
    \            return a~=b\n        else\n            return a<b\n        end\n\
    \    end\n    table.sort(lst,compare)\n    return lst\nend", "  -- Write your\
    \ code here\n  local function compare(a,b)\n    if a~=b then\n      return a~=b\n\
    \    else\n      return a>b\n    end\n  end\n  table.sort(lst,compare)\n  return\
    \ lst\nend", "  -- Write your code here\n  -- return nil\nend", "    local sorted_list\
    \ = lst\n    for i = 1, #lst do\n        local word = lst[i]\n        local length\
    \ = #word\n        if length % 2 == 1 then\n            sorted_list[#sorted_list\
    \ + 1] = word\n        end\n    end\n    return sorted_list\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\n  -- return a list of strings\
    \ in sorted order\nend", "  -- Write your code here\n  -- The function should\
    \ return a list of strings in sorted order.\n  -- You may assume that all words\
    \ will have the same length.\n  -- For example:\n  local function sorted_list_sum(lst)\n\
    \    local sorted_list = {}\n    local sorted_list_index = 1\n    for _, word\
    \ in pairs(lst) do\n      if #word % 2 == 1 then\n        table.insert(sorted_list,\
    \ word)\n      else\n        local sorted_list_index = sorted_list_index + 1\n\
    \        table.insert(sorted_list, word[#word])\n      end\n    end\n    table.sort(sorted_list)\n\
    \    return sorted_list\n  end\n  return sorted_list_sum(lst)\nend", "  -- Write\
    \ your code here\n  -- Return the sorted list\nend", "    local sorted_lst = {}\n\
    \    for _, v in pairs(lst) do\n        table.insert(sorted_lst, v)\n    end\n\
    \    table.sort(sorted_lst, function(a, b) return #a > #b end)\n    return sorted_lst\n\
    end", "  -- Write your code here\n  -- return a list of strings in sorted order\n\
    end", "    local function compare(a,b)\n        if a~=b then\n            return\
    \ a~=b\n        else\n            return a<b\n        end\n    end\n    table.sort(lst,compare)\n\
    \    return lst\nend", "  -- Write your code here.\n  -- The list should be a\
    \ list of strings and never an array of numbers,\n  -- The list should be sorted\
    \ by length of each word, and you should return\n  -- a list sorted by that rule.\n\
    \  -- If two words have the same length, sort the list alphabetically.\n  -- The\
    \ function should return a list of strings in sorted order.\n  -- You may assume\
    \ that all words will have the same length.\n  -- For example:\n  local function\
    \ sorted_list_sum(lst)\n    local sorted_list = {}\n    for _, word in ipairs(lst)\
    \ do\n      if #sorted_list == 0 then\n        sorted_list = word\n      else\n\
    \        if #sorted_list ~= #word then\n          sorted_list = sorted_list ..\
    \ \", \" .. word\n        else\n          sorted_list = sorted_list .. \", \"\
    \ .. word\n        end\n      end\n    end\n    table.sort(sorted_list)\n    return\
    \ sorted_list\n  end\n  return sorted_list_sum(lst)\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here\n  -- return nil\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\n  -- The list should be a list\
    \ of strings and never an array of numbers,\n  -- The order of the list should\
    \ be ascending by length of each word, and you\n  -- should return the list sorted\
    \ by that rule.\n  -- If two words have the same length, sort the list alphabetically.\n\
    \  -- The function should return a list of strings in sorted order.\n  -- You\
    \ may assume that all words will have the same length.\n  -- For example:\n  local\
    \ function sorted_list_sum(lst)\n    local sorted_list = {}\n    for _, word in\
    \ ipairs(lst) do\n      if #sorted_list == 0 then\n        sorted_list = word\n\
    \      elseif #sorted_list == 1 then\n        if sorted_list[1] < word then\n\
    \          sorted_list = word\n        else\n          sorted_list = sorted_list\
    \ .. \", \" .. word\n        end\n      elseif #sorted_list == 2 then\n      \
    \  if sorted_list[1] < word then\n          if sorted_list[2] < word then\n  \
    \          sorted_list = word\n          else\n            sorted_list = sorted_list\
    \ .. \", \" .. word\n          end\n        else\n          if sorted_list[2]\
    \ < word then\n            sorted_list = sorted_list .. \", \" .. word\n     \
    \     else\n            sorted_list = sorted_list .. \", \" .. word\n        \
    \  end\n        end\n      elseif #sorted_list == 3 then\n        if sorted_list[1]\
    \ < word then\n          if sorted_list[2] < word then\n            if sorted_list[3]\
    \ < word then\n              sorted_list = word\n            else\n          \
    \    sorted_list = sorted_list .. \", \" .. word\n            end\n          else\n\
    \            if sorted_list[3] < word then\n              sorted_list = sorted_list\
    \ .. \", \" .. word\n            else\n              sorted_list = sorted_list\
    \ .. \", \" .. word\n            end\n          end\n        else\n          if\
    \ sorted_list[2] < word then\n            if sorted_list[3] < word then\n    \
    \          sorted_list = word\n            else\n              sorted_list = sorted_list\
    \ .. \", \" .. word\n            end\n          else\n            if sorted_list[3]\
    \ < word then\n              sorted_list = sorted_list .. \", \" .. word\n   \
    \         else\n              sorted_list = sorted_list .. \", \" .. word\n  \
    \          end\n          end\n        end\n      elseif #sorted_list == 4 then\n\
    \        if sorted_list[1] < word then\n          if sorted_list[2] < word then\n\
    \            if sorted_list[3] < word then\n              if sorted_list[4] <\
    \ word then\n                sorted_list = word\n              else\n        \
    \        sorted_list = sorted_list .. \", \" .. word\n              end\n    \
    \        else\n              if sorted_list[4] < word then\n                sorted_",
  "  -- Write your code here\n  local sorted_list = {}\n  for i = 1, #lst do\n   \
    \ local word = lst[i]\n    local length = #word\n    if length % 2 == 1 then\n\
    \      sorted_list[#sorted_list + 1] = word\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  for i =\
    \ 1, sorted_list_len do\n    local word = sorted_list[i]\n    local word_len =\
    \ #word\n    if word_len % 2 ~= 0 then\n      sorted_list[#sorted_list + 1] =\
    \ word\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\n\
    print(sorted_list_sum({\n  \"apple\",\n  \"banana\",\n  \"carrot\",\n  \"dog\"\
    ,\n  \"egg\",\n  \"grape\",\n  \"kiwi\",\n  \"lemon\",\n  \"lime\",\n  \"mango\"\
    ,\n  \"orange\",\n  \"pear\",\n  \"pineapple\",\n  \"strawberry\",\n  \"watermelon\"\
    ,\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n\
    \  \"watermelon\",\n  \"watermelon\",\n  \"watermelon\",\n  \"", "  -- Write your\
    \ code here\n  local sorted_list = {}\n  for _, word in ipairs(lst) do\n    table.insert(sorted_list,\
    \ word)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\n  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n\
    \  for i = 1, sorted_list_length do\n    local length = sorted_list[i]:len()\n\
    \    if length % 2 == 1 then\n      sorted_list[i]:gsub(\"%w+\", \"\")\n    end\n\
    \  end\n  sorted_list:sort()\n  return sorted_list\nend", "  -- Write your code\
    \ here\n  local sorted_list = {}\n  for i = 1, #lst do\n    local length = #lst[i]\n\
    \    local index = i\n    while index do\n      index = index - 1\n      if length\
    \ ~= #lst[index] then\n        length = length + 1\n      else\n        sorted_list[#sorted_list\
    \ + 1] = lst[index]\n      end\n    end\n  end\n  table.sort(sorted_list)\n  return\
    \ sorted_list\nend", "  -- Write your code here.\nend", "    local function sort_by_length(word)\n\
    \        return #word\n    end\n    local function sort_by_alpha(word)\n     \
    \   return word\n    end\n    local function sort_by_length(word1, word2)\n  \
    \      return sort_by_length(word1) - sort_by_length(word2)\n    end\n    local\
    \ function sort_by_alpha(word1, word2)\n        return sort_by_alpha(word1) -\
    \ sort_by_alpha(word2)\n    end\n    table.sort(lst, sort_by_length)\n    table.sort(lst,\
    \ sort_by_alpha)\n    return lst\nend", "    local sorted_list = {}\n    for _,\
    \ word in ipairs(lst) do\n        table.insert(sorted_list, word)\n    end\n \
    \   table.sort(sorted_list)\n    return sorted_list\nend", "  -- Write your code\
    \ here\n  -- The function should return a list of strings in sorted order.\n \
    \ -- You may assume that all words will have the same length.\n  -- For example:\n\
    \  local function sorted_list_sum(lst)\n    local sorted_list = {}\n    for _,\
    \ word in ipairs(lst) do\n      if #sorted_list < #lst then\n        table.insert(sorted_list,\
    \ word)\n      elseif #sorted_list == #lst then\n        if sorted_list[#sorted_list]\
    \ < word then\n          table.insert(sorted_list, word)\n        end\n      else\n\
    \        if sorted_list[#sorted_list] > word then\n          table.insert(sorted_list,\
    \ word)\n        end\n      end\n    end\n    return sorted_list\n  end\n  return\
    \ sorted_list_sum(lst)\nend", "    local sorted_lst = {}\n    for _, word in ipairs(lst)\
    \ do\n        table.insert(sorted_lst, word)\n    end\n    table.sort(sorted_lst,\
    \ function(a, b) return #a > #b end)\n    return sorted_lst\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\n  -- The list should be a\
    \ list of strings and never an array of numbers,\n  -- The order of the list should\
    \ be ascending by length of each word, and you\n  -- should return the list sorted\
    \ by that rule.\n  -- If two words have the same length, sort the list alphabetically.\n\
    \  -- The function should return a list of strings in sorted order.\n  -- You\
    \ may assume that all words will have the same length.\n  -- For example:\n  local\
    \ function sorted_list_sum(lst)\n    local sorted_list = nil\n    for _, str in\
    \ ipairs(lst) do\n      if #str % 2 ~= 0 then\n        table.insert(sorted_list,\
    \ str)\n      end\n    end\n    table.sort(sorted_list)\n    return sorted_list\n\
    \  end\n  return sorted_list_sum(lst)\nend", "  -- Write your code here\nend",
  "  -- Write your code here\n  -- lst = a list of strings\n  -- return a list of\
    \ strings in sorted order\n  -- return nil if lst is nil\n  -- return nil if lst\
    \ is empty\n  -- return nil if lst contains nil\n  -- return nil if lst contains\
    \ only empty strings\n  -- return nil if lst contains only nils\n  -- return nil\
    \ if lst contains only strings\n  -- return nil if lst contains only numbers\n\
    \  -- return nil if lst contains only booleans\n  -- return nil if lst contains\
    \ only nils and empty strings\n  -- return nil if lst contains only booleans and\
    \ empty strings\n  -- return nil if lst contains only numbers and empty strings\n\
    \  -- return nil if lst contains only strings and empty strings\n  -- return nil\
    \ if lst contains only booleans and nils\n  -- return nil if lst contains only\
    \ numbers and nils\n  -- return nil if lst contains only strings and nils\n  --\
    \ return nil if lst contains only booleans and strings\n  -- return nil if lst\
    \ contains only numbers and strings\n  -- return nil if lst contains only strings\
    \ and strings\n  -- return nil if lst contains only booleans and numbers\n  --\
    \ return nil if lst contains only numbers and numbers\n  -- return nil if lst\
    \ contains only strings and numbers\n  -- return nil if lst contains only booleans\
    \ and booleans\n  -- return nil if lst contains only numbers and booleans\n  --\
    \ return nil if lst contains only strings and booleans\n  -- return nil if lst\
    \ contains only booleans and nils\n  -- return nil if lst contains only numbers\
    \ and nils\n  -- return nil if lst contains only strings and nils\n  -- return\
    \ nil if lst contains only booleans and strings\n  -- return nil if lst contains\
    \ only numbers and strings\n  -- return nil if lst contains only strings and strings\n\
    \  -- return nil if lst contains only booleans and numbers\n  -- return nil if\
    \ lst contains only numbers and numbers\n  -- return nil if lst contains only\
    \ strings and numbers\n  -- return nil if lst contains only booleans and booleans\n\
    \  -- return nil if lst contains only numbers and booleans\n  -- return nil if\
    \ lst contains only strings and booleans\n  -- return nil if lst contains only\
    \ booleans and nils\n  -- return nil if lst contains ", "  -- Write your code\
    \ here.\n  return lst\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\n  local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n\
    \    local length = #word\n    if length % 2 == 1 then\n      sorted_lst[#sorted_lst\
    \ + 1] = word\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return\
    \ #a > #b end)\n  return sorted_lst\nend", "  -- Write your code here\n  -- The\
    \ function should return a list of strings in sorted order.\n  -- You may assume\
    \ that all words will have the same length.\n  -- For example:\n  local function\
    \ sorted_list_sum(lst)\n    local sorted_list = {}\n    for _, word in ipairs(lst)\
    \ do\n      if #sorted_list == 0 then\n        sorted_list = word\n      else\n\
    \        if #sorted_list ~= #word then\n          sorted_list = sorted_list ..\
    \ \" \" .. word\n        else\n          sorted_list = sorted_list .. \" \" ..\
    \ word\n        end\n      end\n    end\n    return sorted_list\n  end\n  return\
    \ sorted_list_sum(lst)\nend\nprint(sorted_list_sum({\"hello\", \"world\", \"this\"\
    , \"is\", \"a\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\",\
    \ \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"\
    and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\",\
    \ \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"\
    and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\",\
    \ \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"\
    and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\",\
    \ \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"\
    and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\",\
    \ \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"\
    and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\",\
    \ \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"\
    and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\",\
    \ \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\", \"sort\", \"\
    and\", \"more\", \"test\", \"of\", \"sort\", \"and\", \"more\", \"test\", \"of\"\
    , \"sort\", \"and\", \"", "  -- Write your code here.\nend", "  -- Write your\
    \ code here\n  -- return a list of strings in sorted order\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\n  -- return nil\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here.\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "    local function compare(a,b)\n        if a[1] < b[1] then\n        \
    \    return -1\n        end\n        if a[1] > b[1] then\n            return 1\n\
    \        end\n        if a[2] < b[2] then\n            return -1\n        end\n\
    \        if a[2] > b[2] then\n            return 1\n        end\n        if a[3]\
    \ < b[3] then\n            return -1\n        end\n        if a[3] > b[3] then\n\
    \            return 1\n        end\n        return 0\n    end\n    table.sort(lst,\
    \ compare)\n    return lst\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here.\nend", "  -- Write your code\
    \ here.\nend", "    local sorted_lst = {}\n    for _, word in ipairs(lst) do\n\
    \        table.insert(sorted_lst, word)\n    end\n    table.sort(sorted_lst, function(a,\
    \ b) return #a > #b end)\n    return sorted_lst\nend", "  -- Write your code here\n\
    \  -- return a list of strings in sorted order\nend", "  -- Write your code here.\n\
    \  -- lst = a list of strings\n  -- return a list of strings in sorted order\n\
    \  -- Example: sorted_list_sum({ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' })\n  -- should return { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }\n  -- Example: sorted_list_sum({ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' })\n  -- should return { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }\n  -- Example: sorted_list_sum({ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' })\n  -- should return { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }\n  -- Example: sorted_list_sum({ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' })\n  -- should return { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }\n  -- Example: sorted_list_sum({ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' })\n  -- should return { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }\n  -- Example: sorted_list_sum({ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' })\n  -- should return { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
