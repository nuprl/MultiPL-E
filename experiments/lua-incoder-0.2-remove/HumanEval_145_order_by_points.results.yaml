language: lua
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \    end\n    return sum\n  end\n  local function compare_sums_index(a, b)\n \
    \   local sum = 0\n    local i = 1\n    while i <= 10 do\n      sum = sum + math.abs(a\
    \ % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n   \
    \   i = i + 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa6djh6px.lua:87: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a / 10) * 10 + a % 10)\n      a = math.floor(b / 10) *\
    \ 10 + b % 10\n    end\n    return sum - math.abs(math.floor(a / 10) * 10 + a\
    \ % 10)\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6u9ww26p.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp6u9ww26p.lua:10: in function </tmp/tmp6u9ww26p.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp6u9ww26p.lua:15: in function 'candidate'\n\t/tmp/tmp6u9ww26p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_points(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function sort_by_sums(nums)\n\
    \    table.sort(nums, compare_sums)\n  end\n  local function sort_by_points(nums)\n\
    \    table.sort(nums, compare_points)\n  end\n  sort_by_sums(nums)\n  sort_by_points(nums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmper7ci7jh.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmper7ci7jh.lua:8:\
    \ in function </tmp/tmper7ci7jh.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmper7ci7jh.lua:14:\
    \ in function 'sort_by_sums'\n\t/tmp/tmper7ci7jh.lua:19: in function 'candidate'\n\
    \t/tmp/tmper7ci7jh.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3duc2rgb.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp3duc2rgb.lua:8:\
    \ in function </tmp/tmp3duc2rgb.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp3duc2rgb.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp3duc2rgb.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(a,b)\n    local sum = 0\n    for i=1,10 do\n      sum = sum + math.abs(math.floor(a/10)\
    \ + math.floor(b/10) - math.floor(a%10 - b%10))\n    end\n    return sum\n  end\n\
    \  table.sort(nums, compare)\n  return nums\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mar_lrk.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp4mar_lrk.lua:10: in function </tmp/tmp4mar_lrk.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp4mar_lrk.lua:14: in function 'candidate'\n\t/tmp/tmp4mar_lrk.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n\
    \      sum = sum + nums[i][j]\n    end\n    sorted_nums[i] = sum\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps8bn6o_s.lua:10:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmps8bn6o_s.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmps8bn6o_s.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n    local\
    \ sum2 = nums[index2]:byte():sum()\n    return sum1 - sum2\n  end\n  table.sort(nums,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5bz31dre.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp5bz31dre.lua:8:\
    \ in function </tmp/tmp5bz31dre.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp5bz31dre.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmp5bz31dre.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    return sum1 - sum2\n  end\n  table.sort(nums, compare)\n  return nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplv30lpt8.lua:10:\
    \ attempt to perform arithmetic on local 'sum1' (a nil value)\nstack traceback:\n\
    \t/tmp/tmplv30lpt8.lua:10: in function </tmp/tmplv30lpt8.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmplv30lpt8.lua:12: in function 'candidate'\n\t/tmp/tmplv30lpt8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(sum1, sum2)\n    if sum1 > sum2 then\n      return 1\n    elseif sum1\
    \ < sum2 then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyn6rr71.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpoyn6rr71.lua:8:\
    \ in function </tmp/tmpoyn6rr71.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpoyn6rr71.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpoyn6rr71.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_sum = 0\n    local rhs_sum = 0\n    for i =\
    \ 1, #nums do\n      local lhs_digit = math.floor(nums[i])\n      local rhs_digit\
    \ = math.floor(nums[i - 1])\n      lhs_sum = lhs_sum + lhs_digit\n      rhs_sum\
    \ = rhs_sum + rhs_digit\n      if lhs_sum > rhs_sum then\n        return true\n\
    \      elseif lhs_sum < rhs_sum then\n        return false\n      elseif lhs_sum\
    \ == rhs_sum then\n        return i\n      end\n    end\n  end\n  return table.sort(nums,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7o6fml4a.lua:12:\
    \ bad argument #1 to 'floor' (number expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp7o6fml4a.lua:12: in function </tmp/tmp7o6fml4a.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp7o6fml4a.lua:24: in function 'candidate'\n\t/tmp/tmp7o6fml4a.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)\
    \ - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs) - 1)\n    local\
    \ lhs_sum = tonumber(lhs_digits)\n    local rhs_sum = tonumber(rhs_digits)\n \
    \   if lhs_sum == rhs_sum then\n      return lhs < rhs end\n    return lhs_sum\
    \ < rhs_sum end\n  return table.sort(nums, compare) end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr9zuwfiv.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr9zuwfiv.lua:14:\
    \ in function </tmp/tmpr9zuwfiv.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpr9zuwfiv.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpr9zuwfiv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a + b - tonumber(tostring(a) + tostring(b))\n\
    \  end\n  table.sort(nums, compare_sums)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcetb985.lua:8:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmptcetb985.lua:8: in function </tmp/tmptcetb985.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmptcetb985.lua:10: in function 'candidate'\n\t/tmp/tmptcetb985.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)\
    \ - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs) - 1)\n    local\
    \ lhs_sum = tonumber(lhs_digits)\n    local rhs_sum = tonumber(rhs_digits)\n \
    \   if lhs_sum == rhs_sum then\n      return lhs < rhs end\n    return lhs_sum\
    \ < rhs_sum end\n  table.sort(nums, compare)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgzc1htoi.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgzc1htoi.lua:14:\
    \ in function </tmp/tmpgzc1htoi.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpgzc1htoi.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpgzc1htoi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return (a.digits + b.digits):tonumber()\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0hrrigj.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpc0hrrigj.lua:8:\
    \ in function </tmp/tmpc0hrrigj.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpc0hrrigj.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpc0hrrigj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    if sum1 == sum2 then\n      return index1\n    elseif sum1 > sum2 then\n\
    \      return index1\n    else\n      return index2\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphfsk6nhj.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphfsk6nhj.lua:12:\
    \ in function </tmp/tmphfsk6nhj.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphfsk6nhj.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmphfsk6nhj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)\
    \ - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs) - 1)\n    return\
    \ lhs_digits < rhs_digits\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60oiq3ox.lua:19:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, -11, -12, 11}\nstack traceback:\n\
    \t/tmp/tmp60oiq3ox.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(a,b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.abs(a%10\
    \ - b%10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n    end\n \
    \   return sum\n  end\n  return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ijxtkqq.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp1ijxtkqq.lua:10: in function </tmp/tmp1ijxtkqq.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp1ijxtkqq.lua:16: in function 'candidate'\n\t/tmp/tmp1ijxtkqq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(a,b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.abs(math.floor(a/10)\
    \ - math.floor(b/10))\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \    end\n    return sum\n  end\n  return table.sort(nums, compare)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjq674ups.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpjq674ups.lua:10: in function </tmp/tmpjq674ups.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpjq674ups.lua:16: in function 'candidate'\n\t/tmp/tmpjq674ups.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n   \
    \ if sum_a ~= sum_b then\n      return sum_a > sum_b\n    else\n      return a.index\
    \ > b.index\n    end\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi84tnkn.lua:8:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpbi84tnkn.lua:8:\
    \ in function </tmp/tmpbi84tnkn.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpbi84tnkn.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpbi84tnkn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n   \
    \ if sum_a ~= sum_b then\n      return sum_a > sum_b\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv90mmonp.lua:8:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpv90mmonp.lua:8:\
    \ in function </tmp/tmpv90mmonp.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpv90mmonp.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpv90mmonp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local index = 1\n  for i = 1, #nums do\n    local digits = nums:sub(i,\
    \ i)\n    local sum = 0\n    for j = 1, #digits do\n      sum = sum + digits:sub(j,\
    \ j)\n    end\n    sorted_nums[index] = sum\n    index = index + 1\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpba15scso.lua:10:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpba15scso.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpba15scso.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a/10) + math.floor(b/10) - math.floor(a/10) * math.floor(b/10))\n\
    \    end\n    return sum\n  end\n  return table.sort(nums, compare_sums)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1bstdryd.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp1bstdryd.lua:10: in function </tmp/tmp1bstdryd.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp1bstdryd.lua:14: in function 'candidate'\n\t/tmp/tmp1bstdryd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a/10) * 10 - math.floor(b/10) * 10)\n      a = math.floor(a/10)\n\
    \      b = math.floor(b/10)\n    end\n    return sum\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd122pa1n.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpd122pa1n.lua:10: in function </tmp/tmpd122pa1n.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpd122pa1n.lua:16: in function 'candidate'\n\t/tmp/tmpd122pa1n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = 0\n\
    \    for j = 1, #nums[i] do\n      num_sum = num_sum + nums[i][j]\n    end\n \
    \   sorted_nums[i] = num_sum\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n\
    \  for i = 1, #nums do\n    local num_sum = 0\n    for j = 1, #nums[i] do\n  \
    \    num_sum = num_sum + nums[i][j]\n    end\n    local index = num_sums[num_sum]\n\
    \    sorted_nums[i] = sorted_nums[i] + index\n  end\n  return sorted_nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5xk_gxy.lua:11:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmps5xk_gxy.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmps5xk_gxy.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq2z562.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpuwq2z562.lua:8:\
    \ in function </tmp/tmpuwq2z562.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpuwq2z562.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpuwq2z562.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum():float()\n\
    \    local sum2 = nums[index2]:byte():sum():float()\n    return sum1 > sum2 then\n\
    \      index1\n    else\n      index2\n    end\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfy50jb_j.lua:10: ''end'' expected (to close ''function'' at
    line 7) near ''then''

    '
  stdout: ''
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a/10) + math.floor(b/10) - math.floor(a/10) * math.floor(b/10))\n\
    \    end\n    return sum\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3x01_qus.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp3x01_qus.lua:10: in function </tmp/tmp3x01_qus.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp3x01_qus.lua:14: in function 'candidate'\n\t/tmp/tmp3x01_qus.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_by_sum(a, b)\n    local sum1 = math.abs(a) + math.abs(b)\n    local\
    \ sum2 = math.abs(a + b) + math.abs(a - b)\n    return sum1 < sum2 and\n     \
    \      sum1 < sum2 and\n           sum1 < sum2 and\n           sum1 < sum2 and\n\
    \           sum1 < sum2 and\n           sum1 < sum2\n  end\n  return table.sort(nums,\
    \ compare_by_sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluynjexw.lua:8:\
    \ bad argument #1 to 'abs' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpluynjexw.lua:8:\
    \ in function </tmp/tmpluynjexw.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpluynjexw.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpluynjexw.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a / 10) * 10 - math.floor(b / 10) * 10)\n      a = a %\
    \ 10\n      b = b % 10\n    end\n    return sum\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5sgi7ze.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpc5sgi7ze.lua:10: in function </tmp/tmpc5sgi7ze.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpc5sgi7ze.lua:16: in function 'candidate'\n\t/tmp/tmpc5sgi7ze.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(j,j):tonumber()\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbnrzxm00.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpbnrzxm00.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpbnrzxm00.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncggy7up.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpncggy7up.lua:8:\
    \ in function </tmp/tmpncggy7up.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpncggy7up.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpncggy7up.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(a,b)\n    return a<b and 1 or a>b and -1 or 0\n  end\n  local function\
    \ sort_by_digits(a,b)\n    local sum=0\n    for i=1,10 do\n      sum=sum+math.floor(a/10^i)*10^i\n\
    \      a=math.floor(a/10^i)*10^i\n    end\n    return sum<b and 1 or sum>b and\
    \ -1 or 0\n  end\n  local function sort_by_index(a,b)\n    return sort_by_digits(a,b)\n\
    \  end\n  table.sort(nums, compare)\n  table.sort(nums, sort_by_index)\n  return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5lrfqckp.lua:8:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5lrfqckp.lua:8:\
    \ in function </tmp/tmp5lrfqckp.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp5lrfqckp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp5lrfqckp.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:bytes():sum():float()\n\
    \    local sum2 = nums[index2]:bytes():sum():float()\n    if sum1 == sum2 then\n\
    \      return index1\n    elseif sum1 > sum2 then\n      return index1\n    else\n\
    \      return index2\n    end\n  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwzfpq2z.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpiwzfpq2z.lua:8:\
    \ in function </tmp/tmpiwzfpq2z.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiwzfpq2z.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpiwzfpq2z.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_index2(a,\
    \ b)\n    return a.index2 - b.index2\n  end\n  local function compare_sums_index3(a,\
    \ b)\n    return a.index3 - b.index3\n  end\n  local function compare_sums_index4(a,\
    \ b)\n    return a.index4 - b.index4\n  end\n  local function compare_sums_index5(a,\
    \ b)\n    return a.index5 - b.index5\n  end\n  local function compare_sums_index6(a,\
    \ b)\n    return a.index6 - b.index6\n  end\n  local function compare_sums_index7(a,\
    \ b)\n    return a.index7 - b.index7\n  end\n  local function compare_sums_index8(a,\
    \ b)\n    return a.index8 - b.index8\n  end\n  local function compare_sums_index9(a,\
    \ b)\n    return a.index9 - b.index9\n  end\n  local function compare_sums_index10(a,\
    \ b)\n    return a.index10 - b.index10\n  end\n  local function compare_sums_index11(a,\
    \ b)\n    return a.index11 - b.index11\n  end\n  local function compare_sums_index12(a,\
    \ b)\n    return a.index12 - b.index12\n  end\n  local function compare_sums_index13(a,\
    \ b)\n    return a.index13 - b.index13\n  end\n  local function compare_sums_index14(a,\
    \ b)\n    return a.index14 - b.index14\n  end\n  local function compare_sums_index15(a,\
    \ b)\n    return a.index15 - b.index15\n  end\n  local function compare_sums_index16(a,\
    \ b)\n    return a.index16 - b.index16\n  end\n  local function compare_sums_index17(a,\
    \ b)\n    return a.index17 - b.index17\n  end\n  local function compare_sums_index18(a,\
    \ b)\n    return a.index18 - b.index18\n  end\n  local function compare_sums_index19(a,\
    \ b)\n    return a.index19 - b.index19\n  end\n  local function compare_sums_index20(a,\
    \ b)\n    return a.index20 - b.index20\n  end\n  local function compare_sums_index21(a,\
    \ b)\n    return a.index21 - b.index21\n  end\n  local function compare_sums_index22(a,\
    \ b)\n    return a.index22 - b.index22\n  end\n  local function compare_sums_index23(a,\
    \ b)\n    return a.index23 - b.index23\n  end\n  local function compare_sums_index24(a,\
    \ b)\n    return a.index24 - b.index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2caz51_b.lua:81: ''end'' expected (to close ''function'' at
    line 79) near ''lu''

    '
  stdout: ''
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\", lhs)\n    local\
    \ rhs_digits = string.format(\"%0d\", rhs)\n    local lhs_sum = lhs_digits:len()\
    \ - lhs_digits:sub(1, -1):len()\n    local rhs_sum = rhs_digits:len() - rhs_digits:sub(1,\
    \ -1):len()\n    if lhs_sum == rhs_sum then\n      return lhs - rhs\n    end\n\
    \    return lhs_sum - rhs_sum\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7siawc4i.lua:8:\
    \ bad argument #2 to 'format' (number expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp7siawc4i.lua:8: in function </tmp/tmp7siawc4i.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp7siawc4i.lua:17: in function 'candidate'\n\t/tmp/tmp7siawc4i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    if sum1 == sum2 then\n      return index1\n    elseif sum1 < sum2 then\n\
    \      return 1\n    else\n      return -1\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6_v7z_q7.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6_v7z_q7.lua:12:\
    \ in function </tmp/tmp6_v7z_q7.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp6_v7z_q7.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp6_v7z_q7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.modf(a / 10^i)[1])\n    end\n    return sum - math.abs(math.modf(b\
    \ / 10^i)[1])\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__jbhx55.lua:10:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmp__jbhx55.lua:10:\
    \ in function </tmp/tmp__jbhx55.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp__jbhx55.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp__jbhx55.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpailwms5i.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpailwms5i.lua:8:\
    \ in function </tmp/tmpailwms5i.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpailwms5i.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpailwms5i.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  table.sort(nums, compare_sums)\n\
    \  table.sort(nums, compare_sums_index)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp99yax823.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp99yax823.lua:8:\
    \ in function </tmp/tmp99yax823.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp99yax823.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp99yax823.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    return sum1 - sum2 -- Compare sums\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyigut8h9.lua:10:\
    \ attempt to perform arithmetic on local 'sum1' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpyigut8h9.lua:10: in function </tmp/tmpyigut8h9.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpyigut8h9.lua:12: in function 'candidate'\n\t/tmp/tmpyigut8h9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq2z562.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpuwq2z562.lua:8:\
    \ in function </tmp/tmpuwq2z562.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpuwq2z562.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpuwq2z562.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum_string(nums[i])\n\
    \    if not num_sums[num_sum] then\n      num_sums[num_sum] = 1\n      sorted_nums[#sorted_nums+1]\
    \ = nums[i]\n    end\n  end\n  table.sort(sorted_nums, function(a,b) return num_sums[sum_string(a)]\
    \ - num_sums[sum_string(b)] end)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzf0w3td1.lua:10:\
    \ attempt to call global 'sum_string' (a nil value)\nstack traceback:\n\t/tmp/tmpzf0w3td1.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpzf0w3td1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = 0\n\
    \    for j = 1, #nums[i] do\n      num_sum = num_sum + nums[i][j]\n    end\n \
    \   sorted_nums[i] = num_sum\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums2 = {}\n  for i = 1, #nums do\n    sorted_nums2[i] = nums[sorted_nums[i]]\n\
    \  end\n  return sorted_nums2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpauzs6pl5.lua:11:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpauzs6pl5.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpauzs6pl5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq2z562.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpuwq2z562.lua:8:\
    \ in function </tmp/tmpuwq2z562.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpuwq2z562.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpuwq2z562.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local index = 1\n  for i = 1, #nums do\n    local digits = nums:sub(i,\
    \ i)\n    local sum_digits = digits:reduce(function(acc, digit)\n      return\
    \ acc + digit\n    end)\n    sorted_nums[index] = sum_digits\n    index = index\
    \ + 1\n  end\n  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1vpnjn2.lua:10:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp_1vpnjn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp_1vpnjn2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local sorted_index = {}\n  local sum = 0\n  for i = 1, #nums do\n  \
    \  local digit = math.floor(math.abs(nums[i]) / 10)\n    sum = sum + digit\n \
    \   sorted_index[sum] = i\n    sorted_nums[sum] = nums[i]\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return a < b end)\n  return sorted_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tuy6enr.lua:23:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {0=1, 3, 4, 5}\nstack traceback:\n\t\
    /tmp/tmp2tuy6enr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1] - a[2] + b[2] - a[3] + b[3]\n  end\n\
    \  return table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj96ak_ox.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpj96ak_ox.lua:8:\
    \ in function </tmp/tmpj96ak_ox.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpj96ak_ox.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpj96ak_ox.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = 0\n\
    \    for j = 1, #nums[i] do\n      num_sum = num_sum + nums[i][j]\n    end\n \
    \   sorted_nums[i] = num_sum\n    num_sums[num_sum] = i\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_index = 1\n  for i = 1, #nums do\n    local num_sum = sorted_nums[i]\n\
    \    local index = num_sums[num_sum]\n    sorted_nums[sorted_nums_index] = nums[index]\n\
    \    sorted_nums_index = sorted_nums_index + 1\n  end\n  return sorted_nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyftvxpz.lua:11:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgyftvxpz.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpgyftvxpz.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_sum = 0\n    local rhs_sum = 0\n    for i =\
    \ 1, #nums do\n      local lhs_digit = math.floor(nums[i])\n      local rhs_digit\
    \ = math.floor(rhs[i])\n      lhs_sum = lhs_sum + lhs_digit\n      rhs_sum = rhs_sum\
    \ + rhs_digit\n    end\n    if lhs_sum < rhs_sum then\n      return 1\n    elseif\
    \ lhs_sum > rhs_sum then\n      return -1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(nums, compare)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zj30iec.lua:12:\
    \ attempt to index local 'rhs' (a number value)\nstack traceback:\n\t/tmp/tmp4zj30iec.lua:12:\
    \ in function </tmp/tmp4zj30iec.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp4zj30iec.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp4zj30iec.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n    local\
    \ sum2 = nums[index2]:byte():sum()\n    if sum1 == sum2 then\n      return index1\n\
    \    elseif sum1 > sum2 then\n      return index1\n    else\n      return index2\n\
    \    end\n  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdzy5ulv5.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpdzy5ulv5.lua:8:\
    \ in function </tmp/tmpdzy5ulv5.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpdzy5ulv5.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpdzy5ulv5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(sum1, sum2)\n    if sum1 > sum2 then\n      return 1\n    elseif sum1\
    \ < sum2 then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyn6rr71.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpoyn6rr71.lua:8:\
    \ in function </tmp/tmpoyn6rr71.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpoyn6rr71.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpoyn6rr71.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_sum = 0\n    local rhs_sum = 0\n    for i =\
    \ 1, #nums do\n      local lhs_digit = math.floor(math.abs(nums[i] - math.floor(nums[i])))\n\
    \      local rhs_digit = math.floor(math.abs(nums[i] - math.floor(-nums[i])))\n\
    \      lhs_sum = lhs_sum + lhs_digit\n      rhs_sum = rhs_sum + rhs_digit\n  \
    \  end\n    if lhs_sum < rhs_sum then\n      return 1\n    elseif lhs_sum > rhs_sum\
    \ then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctfz8xp_.lua:24:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpctfz8xp_.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpctfz8xp_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sumDigits(nums[i])\n\
    \    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcs2zt2c.lua:10:\
    \ attempt to call global 'sumDigits' (a nil value)\nstack traceback:\n\t/tmp/tmpfcs2zt2c.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpfcs2zt2c.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq2z562.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpuwq2z562.lua:8:\
    \ in function </tmp/tmpuwq2z562.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpuwq2z562.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpuwq2z562.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlvcpumw.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpjlvcpumw.lua:8:\
    \ in function </tmp/tmpjlvcpumw.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpjlvcpumw.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpjlvcpumw.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlvcpumw.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpjlvcpumw.lua:8:\
    \ in function </tmp/tmpjlvcpumw.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpjlvcpumw.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpjlvcpumw.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.floor(a / i) * i\n      a = a % i\n    end\n    return sum - math.floor(b\
    \ / 10) * 10\n  end\n  return table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0omxc1w8.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0omxc1w8.lua:10: in function </tmp/tmp0omxc1w8.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp0omxc1w8.lua:15: in function 'candidate'\n\t/tmp/tmp0omxc1w8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum(nums[i])\n\
    \    sorted_nums[#sorted_nums + 1] = nums[i]\n    num_sums[num_sum] = num_sums[num_sum]\
    \ or {}\n    num_sums[num_sum][#num_sums[num_sum] + 1] = i\n  end\n  table.sort(sorted_nums)\n\
    \  for i = 1, #sorted_nums do\n    local num_sum = sum(sorted_nums[i])\n    local\
    \ index = num_sums[num_sum][#num_sums[num_sum]]\n    sorted_nums[i] = sorted_nums[index]\n\
    \  end\n  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0f9k1xky.lua:10:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmp0f9k1xky.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp0f9k1xky.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlvcpumw.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpjlvcpumw.lua:8:\
    \ in function </tmp/tmpjlvcpumw.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpjlvcpumw.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpjlvcpumw.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte()\n    local sum2\
    \ = nums[index2]:byte()\n    if sum1 == sum2 then\n      return index1\n    elseif\
    \ sum1 > sum2 then\n      return index1\n    else\n      return index2\n    end\n\
    \  end\n  return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphf4h0jm1.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmphf4h0jm1.lua:8:\
    \ in function </tmp/tmphf4h0jm1.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphf4h0jm1.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmphf4h0jm1.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    if sum1 > sum2 then\n      return 1\n    elseif sum1 < sum2 then\n      return\
    \ -1\n    else\n      return index1 - index2\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzn8ox9cg.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzn8ox9cg.lua:10:\
    \ in function </tmp/tmpzn8ox9cg.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpzn8ox9cg.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpzn8ox9cg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a + b - tonumber(tostring(a) + tostring(b))\n\
    \  end\n  return table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8sbpqox.lua:8:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpf8sbpqox.lua:8: in function </tmp/tmpf8sbpqox.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpf8sbpqox.lua:10: in function 'candidate'\n\t/tmp/tmpf8sbpqox.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_by_sum(num1, num2)\n    return num1 + num2 -- Sum digits first\n  end\n\
    \  return table.sort(nums, compare_by_sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphutb2tco.lua:8:\
    \ attempt to perform arithmetic on local 'num1' (a nil value)\nstack traceback:\n\
    \t/tmp/tmphutb2tco.lua:8: in function </tmp/tmphutb2tco.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmphutb2tco.lua:10: in function 'candidate'\n\t/tmp/tmphutb2tco.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = { }\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n   \
    \ sorted_nums[sum] = nums[i]\n  end\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7o9tfzr.lua:19:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12=-12, 0=-11, 1, 11=-1, 12=11}\n\
    stack traceback:\n\t/tmp/tmpf7o9tfzr.lua:19: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncggy7up.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpncggy7up.lua:8:\
    \ in function </tmp/tmpncggy7up.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpncggy7up.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpncggy7up.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum() -- sum of\
    \ digits\n    local sum2 = nums[index2]:byte():sum() -- sum of digits\n    if\
    \ sum1 == sum2 then\n      return index1 -- compare based on index\n    elseif\
    \ sum1 > sum2 then\n      return 1 -- compare based on sum\n    else\n      return\
    \ -1 -- compare based on sum\n    end\n  end\n  table.sort(nums, compare)\n  return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6k3f740.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm6k3f740.lua:8:\
    \ in function </tmp/tmpm6k3f740.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpm6k3f740.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpm6k3f740.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n\
    \      sum = sum + nums[i][j]\n    end\n    table.insert(sorted_nums, sum)\n \
    \ end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppe20i1n9.lua:10:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmppe20i1n9.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmppe20i1n9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte()\n    local sum2\
    \ = nums[index2]:byte()\n    if sum1 == sum2 then\n      return index1\n    elseif\
    \ sum1 > sum2 then\n      return index1\n    else\n      return index2\n    end\n\
    \  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpai6brn7x.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpai6brn7x.lua:8:\
    \ in function </tmp/tmpai6brn7x.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpai6brn7x.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpai6brn7x.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte()\n    local sum2\
    \ = nums[index2]:byte()\n    if sum1 == sum2 then\n      return index1\n    elseif\
    \ sum1 > sum2 then\n      return index1\n    else\n      return index2\n    end\n\
    \  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpai6brn7x.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpai6brn7x.lua:8:\
    \ in function </tmp/tmpai6brn7x.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpai6brn7x.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpai6brn7x.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n    local\
    \ sum2 = nums[index2]:byte():sum()\n    if sum1 == sum2 then\n      return index1\n\
    \    elseif sum1 > sum2 then\n      return index1\n    else\n      return index2\n\
    \    end\n  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdzy5ulv5.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpdzy5ulv5.lua:8:\
    \ in function </tmp/tmpdzy5ulv5.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpdzy5ulv5.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpdzy5ulv5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    return sum1 - sum2 -- Compare sums\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyigut8h9.lua:10:\
    \ attempt to perform arithmetic on local 'sum1' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpyigut8h9.lua:10: in function </tmp/tmpyigut8h9.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpyigut8h9.lua:12: in function 'candidate'\n\t/tmp/tmpyigut8h9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)\
    \ - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs) - 1)\n    local\
    \ lhs_sum = tonumber(lhs_digits)\n    local rhs_sum = tonumber(rhs_digits)\n \
    \   if lhs_sum == rhs_sum then\n      return lhs < rhs end\n    return lhs_sum\
    \ < rhs_sum end\n  return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79k6jbpz.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp79k6jbpz.lua:14:\
    \ in function </tmp/tmp79k6jbpz.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp79k6jbpz.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp79k6jbpz.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:byte(j) * j\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  local sorted_nums_index = 1\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:byte(j)\
    \ * j\n    end\n    if sum == sorted_nums[sorted_nums_index] then\n      table.insert(sorted_nums,\
    \ i)\n      table.insert(sorted_nums, sorted_nums_index)\n      sorted_nums_index\
    \ = sorted_nums_index + 1\n    end\n  end\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01r8ody1.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmp01r8ody1.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp01r8ody1.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.floor(a / i) * i\n      a = a % i\n    end\n    sum = b + math.floor(a\
    \ / 10) * 10\n    return sum - a\n  end\n  table.sort(nums, compare_sums)\n  return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq04fsv58.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpq04fsv58.lua:10: in function </tmp/tmpq04fsv58.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpq04fsv58.lua:16: in function 'candidate'\n\t/tmp/tmpq04fsv58.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local sorted_index = {}\n  for i = 1, #nums do\n    local sum = 0\n\
    \    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    sorted_index[sum]\
    \ = i\n    sorted_nums[i] = nums[i]\n  end\n  table.sort(sorted_nums, function(a,\
    \ b) return sorted_index[a] > sorted_index[b] end)\n  return sorted_nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4txhcahv.lua:11:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmp4txhcahv.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp4txhcahv.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n\
    \      sum = sum + nums[i][j] % 10\n    end\n    sorted_nums[i] = sum\n  end\n\
    \  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3g1mh3ry.lua:10:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmp3g1mh3ry.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp3g1mh3ry.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local sorted_index = {}\n  local sorted_sum = 0\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    local digits = math.floor(num / 10)\n    local\
    \ remainder = num - 10 * digits\n    sorted_sum = sorted_sum + digits\n    sorted_index[sorted_sum]\
    \ = i\n    sorted_nums[sorted_sum] = num\n  end\n  table.sort(sorted_nums, function(a,\
    \ b)\n    return a < b\n  end)\n  for i = 1, #nums do\n    local num = sorted_nums[i]\n\
    \    local index = sorted_index[sorted_sum]\n    nums[index] = num\n  end\n  return\
    \ sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lssazo0.lua:32:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-4=-12, -2=-11, 0=-1, 11}\nstack traceback:\n\
    \t/tmp/tmp8lssazo0.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a + b - tonumber(tostring(a) + tostring(b))\n\
    \  end\n  table.sort(nums, compare_sums)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcetb985.lua:8:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmptcetb985.lua:8: in function </tmp/tmptcetb985.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmptcetb985.lua:10: in function 'candidate'\n\t/tmp/tmptcetb985.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum(\
    \ string.gmatch(tostring(nums[i]), \"%d*\") )\n    sorted_nums[i] = nums[i]\n\
    \    num_sums[i] = num_sum\n  end\n  table.sort( sorted_nums, function(a,b) return\
    \ num_sums[a] > num_sums[b] end)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfi7med1e.lua:10:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpfi7med1e.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpfi7med1e.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\", lhs:int():digits())\n\
    \    local rhs_digits = string.format(\"%0d\", rhs:int():digits())\n    return\
    \ lhs_digits < rhs_digits\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_1hbvqs.lua:8:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmpd_1hbvqs.lua:8:\
    \ in function </tmp/tmpd_1hbvqs.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpd_1hbvqs.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpd_1hbvqs.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3duc2rgb.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp3duc2rgb.lua:8:\
    \ in function </tmp/tmp3duc2rgb.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp3duc2rgb.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp3duc2rgb.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum(\
    \ nums[i] )\n    if num_sum == 0 then\n      sorted_nums[i] = nums[i]\n      num_sums[i]\
    \ = num_sum\n    else\n      local index = #sorted_nums\n      table.insert(sorted_nums,\
    \ nums[i])\n      table.insert(num_sums, num_sum)\n      table.insert(sorted_nums,\
    \ index)\n    end\n  end\n  table.sort(sorted_nums, function(a, b) return num_sums[a]\
    \ > num_sums[b] end)\n  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w2s07b7.lua:10:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmp4w2s07b7.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp4w2s07b7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3duc2rgb.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp3duc2rgb.lua:8:\
    \ in function </tmp/tmp3duc2rgb.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp3duc2rgb.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp3duc2rgb.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)\
    \ - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs) - 1)\n    local\
    \ lhs_sum = tonumber(lhs_digits) + tonumber(lhs_digits)\n    local rhs_sum = tonumber(rhs_digits)\
    \ + tonumber(rhs_digits)\n    if lhs_sum > rhs_sum then\n      return 1\n    elseif\
    \ lhs_sum < rhs_sum then\n      return -1\n    else\n      return lhs:byte() -\
    \ rhs:byte()\n    end\n  end\n  return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnfww41gh.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpnfww41gh.lua:11:\
    \ in function </tmp/tmpnfww41gh.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpnfww41gh.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpnfww41gh.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n\
    \      sum = sum + nums[i][j]\n    end\n    table.insert(sorted_nums, sum)\n \
    \ end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppe20i1n9.lua:10:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmppe20i1n9.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmppe20i1n9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:byte(j) * j\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzb8r13uz.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpzb8r13uz.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpzb8r13uz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:byte(j) * j\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzb8r13uz.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpzb8r13uz.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpzb8r13uz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.floor(a / i) * i\n      a = a % i\n    end\n    return sum - math.floor(b\
    \ / 10) * 10 - math.floor(b % 10)\n  end\n  table.sort(nums, compare_sums)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrea1x8m.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpyrea1x8m.lua:10: in function </tmp/tmpyrea1x8m.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpyrea1x8m.lua:15: in function 'candidate'\n\t/tmp/tmpyrea1x8m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_sum = tonumber(string.format(\"%0*d\", 10, num))\n    sorted_nums[#sorted_nums\
    \ + 1] = num\n    num_sums[num_sum] = num_sum\n  end\n  table.sort(sorted_nums,\
    \ function(a, b)\n    local a_sum = tonumber(string.format(\"%0*d\", 10, a))\n\
    \    local b_sum = tonumber(string.format(\"%0*d\", 10, b))\n    if a_sum == b_sum\
    \ then\n      return a\n    elseif num_sums[a_sum] > num_sums[b_sum] then\n  \
    \    return 1\n    else\n      return -1\n    end\n  end)\n  return sorted_nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxp2qo7h.lua:11:\
    \ invalid option '%*' to 'format'\nstack traceback:\n\t/tmp/tmpxxp2qo7h.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpxxp2qo7h.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(sum1, sum2)\n    if sum1 > sum2 then\n      return 1\n    elseif sum1\
    \ < sum2 then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyn6rr71.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpoyn6rr71.lua:8:\
    \ in function </tmp/tmpoyn6rr71.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpoyn6rr71.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpoyn6rr71.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a/10*10 + b/10 - i))\n    end\n    return sum\n  end\n\
    \  return table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuni7xg9z.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpuni7xg9z.lua:10: in function </tmp/tmpuni7xg9z.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpuni7xg9z.lua:14: in function 'candidate'\n\t/tmp/tmpuni7xg9z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpailwms5i.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpailwms5i.lua:8:\
    \ in function </tmp/tmpailwms5i.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpailwms5i.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpailwms5i.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local digits = nums:sub(i, i):reverse()\n \
    \   local sum_digits = digits:reduce(function(acc, digit)\n      return acc +\
    \ digit\n    end)\n    table.insert(sorted_nums, sum_digits)\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5rtml39.lua:9:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpq5rtml39.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpq5rtml39.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(a,b)\n    return a<b and 1 or -1\n  end\n  local function sort_by_digits(a,b)\n\
    \    local sum=0\n    for i=1,9 do\n      sum=sum+(a%10+b%10)*i\n      a=a/10\n\
    \      b=b/10\n    end\n    return sum<0 and 1 or sum>0 and -1 or 0\n  end\n \
    \ local function sort_by_index(nums)\n    local function compare(a,b)\n      return\
    \ nums[a]<nums[b] and 1 or -1\n    end\n    return table.sort(nums, compare)\n\
    \  end\n  return sort_by_index(order_by_digits(sort_by_points(nums)))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsr00xneu.lua:25:\
    \ attempt to call global 'sort_by_points' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsr00xneu.lua:25: in function 'candidate'\n\t/tmp/tmpsr00xneu.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum_a = tonumber(string.format(\"%.0d\", a))\n\
    \    local sum_b = tonumber(string.format(\"%.0d\", b))\n    if sum_a ~= sum_b\
    \ then\n      return sum_a > sum_b\n    else\n      return a > b\n    end\n  end\n\
    \  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lopokef.lua:22:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp9lopokef.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a + b - tonumber(tostring(a) + tostring(b))\n\
    \  end\n  table.sort(nums, compare_sums)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcetb985.lua:8:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmptcetb985.lua:8: in function </tmp/tmptcetb985.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmptcetb985.lua:10: in function 'candidate'\n\t/tmp/tmptcetb985.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return (a.sum - b.sum) -- Compare sums\n  end\n  table.sort(nums,\
    \ compare_sums) -- Sort by sum\n  table.sort(nums, compare_sums, true) -- Sort\
    \ by sum, descending\n  return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprm8qz3m6.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmprm8qz3m6.lua:8:\
    \ in function </tmp/tmprm8qz3m6.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmprm8qz3m6.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmprm8qz3m6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n\
    \      sum = sum + nums[i][j]\n    end\n    table.insert(sorted_nums, sum)\n \
    \ end\n  table.sort(sorted_nums)\n  local sorted_nums_index = {}\n  for i = 1,\
    \ #sorted_nums do\n    sorted_nums_index[sorted_nums[i]] = i\n  end\n  local sorted_nums_index_sorted\
    \ = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_index_sorted,\
    \ sorted_nums_index[sorted_nums[i]])\n  end\n  return sorted_nums_index_sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiq4i09c2.lua:10:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpiq4i09c2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiq4i09c2.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:byte(j) * j\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzb8r13uz.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpzb8r13uz.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpzb8r13uz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:bytes():sum():tonumber()\n\
    \    local sum2 = nums[index2]:bytes():sum():tonumber()\n    if sum1 == sum2 then\n\
    \      return index1\n    elseif sum1 > sum2 then\n      return index2\n    else\n\
    \      return index1\n    end\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvm_wuq4l.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpvm_wuq4l.lua:8:\
    \ in function </tmp/tmpvm_wuq4l.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpvm_wuq4l.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpvm_wuq4l.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a / 10) * 10 - math.floor(b / 10) * 10)\n      a = a %\
    \ 10\n      b = b % 10\n    end\n    return sum\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5sgi7ze.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpc5sgi7ze.lua:10: in function </tmp/tmpc5sgi7ze.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpc5sgi7ze.lua:16: in function 'candidate'\n\t/tmp/tmpc5sgi7ze.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_sum = tonumber(string.format(\"%0.f\", num))\n    sorted_nums[#sorted_nums+1]\
    \ = num\n    num_sums[num_sum] = num_sums[num_sum] or {}\n    num_sums[num_sum][#num_sums[num_sum]+1]\
    \ = i\n  end\n  local sorted_num_sums = {}\n  for num_sum, indices in pairs(num_sums)\
    \ do\n    sorted_num_sums[num_sum] = indices[1]\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[tonumber(string.format(\"%0.f\", a))][tonumber(string.format(\"\
    %0.f\", b))] or tonumber(string.format(\"%0.f\", a)) < tonumber(string.format(\"\
    %0.f\", b)) end)\n  table.sort(sorted_num_sums, function(a, b) return sorted_nums[a]\
    \ < sorted_nums[b] end)\n  return sorted_nums\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcm3w4y5.lua:28:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpgcm3w4y5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a / 10) * 10 + a % 10)\n      a = math.floor(b / 10) *\
    \ 10 + b % 10\n    end\n    return sum - math.abs(math.floor(a / 10) * 10 + a\
    \ % 10)\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6u9ww26p.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp6u9ww26p.lua:10: in function </tmp/tmp6u9ww26p.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp6u9ww26p.lua:15: in function 'candidate'\n\t/tmp/tmp6u9ww26p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:bytes():sum():float()\n\
    \    local sum2 = nums[index2]:bytes():sum():float()\n    return sum1 - sum2\n\
    \  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8yrb1c6.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpi8yrb1c6.lua:8:\
    \ in function </tmp/tmpi8yrb1c6.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpi8yrb1c6.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpi8yrb1c6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.floor(a / i) * i\n      a = a % i\n    end\n    sum = sum + math.floor(b\
    \ / 10) * 10\n    b = b % 10\n    if sum == b then\n      return a\n    elseif\
    \ sum < b then\n      return -1\n    else\n      return 1\n    end\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb32m609z.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpb32m609z.lua:10: in function </tmp/tmpb32m609z.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpb32m609z.lua:23: in function 'candidate'\n\t/tmp/tmpb32m609z.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.modf(a / 10^i)[1])\n    end\n    return sum - math.abs(math.modf(b\
    \ / 10^i)[1])\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__jbhx55.lua:10:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmp__jbhx55.lua:10:\
    \ in function </tmp/tmp__jbhx55.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp__jbhx55.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp__jbhx55.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3duc2rgb.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp3duc2rgb.lua:8:\
    \ in function </tmp/tmp3duc2rgb.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp3duc2rgb.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp3duc2rgb.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwebnh8v0.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpwebnh8v0.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpwebnh8v0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n    local\
    \ sum2 = nums[index2]:byte():sum()\n    if sum1 == sum2 then\n      return index1\n\
    \    elseif sum1 > sum2 then\n      return index1\n    else\n      return index2\n\
    \    end\n  end\n  table.sort(nums, compare)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp392_kndj.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp392_kndj.lua:8:\
    \ in function </tmp/tmp392_kndj.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp392_kndj.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp392_kndj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local sorted_index = {}\n  for i = 1, #nums do\n    local sum = 0\n\
    \    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    sorted_index[sum]\
    \ = i\n    sorted_nums[i] = nums[i]\n  end\n  table.sort(sorted_nums, function(a,\
    \ b) return sorted_index[a] > sorted_index[b] end)\n  return sorted_nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4txhcahv.lua:11:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmp4txhcahv.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp4txhcahv.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    if sum1 == sum2 then\n      return index1\n    elseif sum1 > sum2 then\n\
    \      return index1\n    else\n      return index2\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjqz0ug3s.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjqz0ug3s.lua:12:\
    \ in function </tmp/tmpjqz0ug3s.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpjqz0ug3s.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpjqz0ug3s.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncggy7up.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpncggy7up.lua:8:\
    \ in function </tmp/tmpncggy7up.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpncggy7up.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpncggy7up.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n   \
    \ if sum_a ~= sum_b then\n      return sum_a < sum_b\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end\n  table.sort(nums, compare_sums)\n  return nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpys7spgki.lua:8:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpys7spgki.lua:8:\
    \ in function </tmp/tmpys7spgki.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpys7spgki.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpys7spgki.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq2z562.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpuwq2z562.lua:8:\
    \ in function </tmp/tmpuwq2z562.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpuwq2z562.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpuwq2z562.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local index = 1\n  for i = 1, #nums do\n    local digits = nums:sub(i,\
    \ i)\n    local sum = 0\n    for j = 1, #digits do\n      sum = sum + digits:sub(j,\
    \ j)\n    end\n    sorted_nums[index] = sum\n    index = index + 1\n  end\n  return\
    \ table.sort(sorted_nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmml8i2k_.lua:10:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpmml8i2k_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpmml8i2k_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(sum1, sum2)\n    return sum1 > sum2 or\n           sum1 == sum2 and\n\
    \           nums[#nums][#nums+1] > nums[#nums][#nums+1]\n  end\n  table.sort(nums,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jegi8f4.lua:18:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp_jegi8f4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a/10) + math.floor(b/10) - math.floor(a%10 - b%10))\n\
    \    end\n    return sum\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08d1y6rn.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp08d1y6rn.lua:10: in function </tmp/tmp08d1y6rn.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp08d1y6rn.lua:14: in function 'candidate'\n\t/tmp/tmp08d1y6rn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.abs(math.floor(a / 10) * 10 - math.floor(b / 10) * 10)\n      a = a %\
    \ 10\n      b = b % 10\n    end\n    return sum\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qqbhrz5.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp5qqbhrz5.lua:10: in function </tmp/tmp5qqbhrz5.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmp5qqbhrz5.lua:16: in function 'candidate'\n\t/tmp/tmp5qqbhrz5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sumDigits(nums[i])\n\
    \    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n\
    \  for i = 1, #sorted_nums do\n    sorted_nums[i] = num_sums[sorted_nums[i]]\n\
    \  end\n  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptt6vlcgy.lua:10:\
    \ attempt to call global 'sumDigits' (a nil value)\nstack traceback:\n\t/tmp/tmptt6vlcgy.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmptt6vlcgy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum_string(string.sub(tostring(nums[i]),\
    \ 1))\n    if num_sum == nil then\n      num_sum = 0\n    end\n    sorted_nums[i]\
    \ = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums, function(a,\
    \ b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplw5rmsuz.lua:10:\
    \ attempt to call global 'sum_string' (a nil value)\nstack traceback:\n\t/tmp/tmplw5rmsuz.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmplw5rmsuz.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sumDigits(nums[i])\n\
    \    sorted_nums[num_sum] = nums[i]\n    num_sums[num_sum] = i\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzb0tgbw5.lua:10:\
    \ attempt to call global 'sumDigits' (a nil value)\nstack traceback:\n\t/tmp/tmpzb0tgbw5.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpzb0tgbw5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\", lhs)\n    local\
    \ rhs_digits = string.format(\"%0d\", rhs)\n    local lhs_sum = sum(lhs_digits)\n\
    \    local rhs_sum = sum(rhs_digits)\n    if lhs_sum < rhs_sum then\n      return\
    \ -1\n    elseif lhs_sum > rhs_sum then\n      return 1\n    else\n      return\
    \ lhs - rhs\n    end\n  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nx3_tih.lua:10:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmp0nx3_tih.lua:10:\
    \ in function </tmp/tmp0nx3_tih.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp0nx3_tih.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp0nx3_tih.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiayde8j4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpiayde8j4.lua:8:\
    \ in function </tmp/tmpiayde8j4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpiayde8j4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpiayde8j4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\", lhs)\n    local\
    \ rhs_digits = string.format(\"%0d\", rhs)\n    local lhs_sum = lhs_digits:len()\n\
    \    local rhs_sum = rhs_digits:len()\n    if lhs_sum < rhs_sum then\n      return\
    \ -1\n    elseif lhs_sum > rhs_sum then\n      return 1\n    else\n      return\
    \ lhs:sub(1, lhs_sum):le(rhs:sub(1, rhs_sum))\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk78emg7h.lua:17:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmpk78emg7h.lua:17:\
    \ in function </tmp/tmpk78emg7h.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpk78emg7h.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpk78emg7h.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6pag9y7q.lua:82: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpailwms5i.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpailwms5i.lua:8:\
    \ in function </tmp/tmpailwms5i.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpailwms5i.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpailwms5i.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgek_8mop.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgek_8mop.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpgek_8mop.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(j, j)\n    end\n    sorted_nums[i] = sum\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzpiesbbh.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpzpiesbbh.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpzpiesbbh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum_string(nums[i])\n\
    \    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpud6hzm_c.lua:10:\
    \ attempt to call global 'sum_string' (a nil value)\nstack traceback:\n\t/tmp/tmpud6hzm_c.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpud6hzm_c.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3duc2rgb.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp3duc2rgb.lua:8:\
    \ in function </tmp/tmp3duc2rgb.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp3duc2rgb.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp3duc2rgb.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)-1)\n\
    \    local rhs_digits = string.sub(rhs, 1, string.len(rhs)-1)\n    local lhs_sum\
    \ = tonumber(lhs_digits)\n    local rhs_sum = tonumber(rhs_digits)\n    if lhs_sum\
    \ == rhs_sum then\n      return lhs < rhs end\n    return lhs_sum < rhs_sum end\n\
    \  return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp13_82t3n.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp13_82t3n.lua:14:\
    \ in function </tmp/tmp13_82t3n.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp13_82t3n.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp13_82t3n.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpekwj0k2e.lua:68: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(sum1, sum2)\n    if sum1 > sum2 then\n      return 1\n    elseif sum1\
    \ < sum2 then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyn6rr71.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpoyn6rr71.lua:8:\
    \ in function </tmp/tmpoyn6rr71.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpoyn6rr71.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpoyn6rr71.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() < b:sum()\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6sa1r1i4.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp6sa1r1i4.lua:8:\
    \ in function </tmp/tmp6sa1r1i4.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp6sa1r1i4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp6sa1r1i4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:byte(j) * j\n    end\n    sorted_nums[sum] = i\n  end\n\
    \  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9lgaiaz.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpp9lgaiaz.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpp9lgaiaz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3duc2rgb.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmp3duc2rgb.lua:8:\
    \ in function </tmp/tmp3duc2rgb.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp3duc2rgb.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp3duc2rgb.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n    local\
    \ sum2 = nums[index2]:byte():sum()\n    if sum1 == sum2 then\n      return index1\n\
    \    elseif sum1 > sum2 then\n      return index2\n    else\n      return index1\n\
    \    end\n  end\n  table.sort(nums, compare)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnmpnwemq.lua:8:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpnmpnwemq.lua:8:\
    \ in function </tmp/tmpnmpnwemq.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpnmpnwemq.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpnmpnwemq.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(j, j)\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdy8ss4lw.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpdy8ss4lw.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdy8ss4lw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_by_sum(num1, num2)\n    local sum1 = num1:bytes():sum(0, num1:bytes():len())\n\
    \    local sum2 = num2:bytes():sum(0, num2:bytes():len())\n    return sum1 - sum2\n\
    \  end\n  return table.sort(nums, compare_by_sum)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp857yeixt.lua:8:\
    \ attempt to index local 'num1' (a number value)\nstack traceback:\n\t/tmp/tmp857yeixt.lua:8:\
    \ in function </tmp/tmp857yeixt.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp857yeixt.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmp857yeixt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq2z562.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpuwq2z562.lua:8:\
    \ in function </tmp/tmpuwq2z562.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpuwq2z562.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpuwq2z562.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n   \
    \ if sum_a ~= sum_b then\n      return sum_a < sum_b\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end\n  table.sort(nums, compare_sums)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdt70m_2n.lua:8:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpdt70m_2n.lua:8:\
    \ in function </tmp/tmpdt70m_2n.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpdt70m_2n.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpdt70m_2n.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(a,b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.abs(a\
    \ - b) * (10 - i)\n    end\n    return sum\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyn92vkwu.lua:10:\
    \ attempt to perform arithmetic on local 'a' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpyn92vkwu.lua:10: in function </tmp/tmpyn92vkwu.lua:7>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpyn92vkwu.lua:14: in function 'candidate'\n\t/tmp/tmpyn92vkwu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgek_8mop.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgek_8mop.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpgek_8mop.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(a,b)\n    return a<b and 1 or a>b and -1 or 0\n  end\n  local function\
    \ sort_by_digits(a,b)\n    local sum = 0\n    for i=1,10 do\n      sum = sum +\
    \ math.abs(a%10 - b%10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \    end\n    return sum\n  end\n  table.sort(nums, compare)\n  table.sort(nums,\
    \ sort_by_digits)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ope3o_5.lua:8:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5ope3o_5.lua:8:\
    \ in function </tmp/tmp5ope3o_5.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp5ope3o_5.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp5ope3o_5.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\", lhs)\n    local\
    \ rhs_digits = string.format(\"%0d\", rhs)\n    local lhs_sum = sum(lhs_digits)\n\
    \    local rhs_sum = sum(rhs_digits)\n    if lhs_sum == rhs_sum then\n      return\
    \ lhs - rhs\n    end\n    return lhs_sum - rhs_sum\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdfo7jrmc.lua:10:\
    \ attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpdfo7jrmc.lua:10:\
    \ in function </tmp/tmpdfo7jrmc.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpdfo7jrmc.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpdfo7jrmc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwq2z562.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpuwq2z562.lua:8:\
    \ in function </tmp/tmpuwq2z562.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpuwq2z562.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpuwq2z562.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_by_sum(num1, num2)\n    local sum1 = num1:bytes():reverse():sum():uint()\n\
    \    local sum2 = num2:bytes():reverse():sum():uint()\n    if sum1 == sum2 then\n\
    \      return num1:bytes():reverse():index() - num2:bytes():reverse():index()\n\
    \    end\n    return sum1 - sum2\n  end\n  return table.sort(nums, compare_by_sum)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqp33fhy.lua:8:\
    \ attempt to index local 'num1' (a number value)\nstack traceback:\n\t/tmp/tmpmqp33fhy.lua:8:\
    \ in function </tmp/tmpmqp33fhy.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpmqp33fhy.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpmqp33fhy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyggt2n5u.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmpyggt2n5u.lua:8:\
    \ in function </tmp/tmpyggt2n5u.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmpyggt2n5u.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpyggt2n5u.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\", lhs)\n    local\
    \ rhs_digits = string.format(\"%0d\", rhs)\n    local lhs_sum = lhs_digits:len()\n\
    \    local rhs_sum = rhs_digits:len()\n    if lhs_sum > rhs_sum then\n      return\
    \ 1\n    elseif lhs_sum < rhs_sum then\n      return -1\n    else\n      return\
    \ lhs:byte() - rhs:byte()\n    end\n  end\n  table.sort(nums, compare)\n  return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9z63_5d3.lua:17:\
    \ attempt to index local 'lhs' (a number value)\nstack traceback:\n\t/tmp/tmp9z63_5d3.lua:17:\
    \ in function </tmp/tmp9z63_5d3.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmp9z63_5d3.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp9z63_5d3.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(j, j)\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdy8ss4lw.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpdy8ss4lw.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdy8ss4lw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums, function(a, b) return a < b end)\n  return\
    \ sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfs0c4z1b.lua:11:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpfs0c4z1b.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpfs0c4z1b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750414
- exit_code: 1
  program: "-- Write a function which sorts the given list of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ list.\n-- For example:\nlocal function order_by_points(nums)\n  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcl3ptn2.lua:8:\
    \ attempt to index local 'a' (a number value)\nstack traceback:\n\t/tmp/tmphcl3ptn2.lua:8:\
    \ in function </tmp/tmphcl3ptn2.lua:7>\n\t[C]: in function 'sort'\n\t/tmp/tmphcl3ptn2.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmphcl3ptn2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750413
