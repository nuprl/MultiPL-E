name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  local function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- The largest prime factor is n.\n  -- The smallest prime factor\
    \ is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor is\
    \ 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n\
    \  -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n \
    \ -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n  --\
    \ The largest prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The\
    \ largest prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime\
    \ factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor\
    \ is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is\
    \ n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n\
    \  -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n \
    \ -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n  --\
    \ The smallest prime factor is 2.\n  -- The largest prime factor is n.\n  -- The\
    \ smallest prime factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime\
    \ factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor\
    \ is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor is\
    \ 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n\
    \  -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n \
    \ -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n  --\
    \ The largest prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The\
    \ largest prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime\
    \ factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor\
    \ is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is\
    \ n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is n.",
  "    local factors = {}\n    local i = 1\n    while i <= n do\n        local prime\
    \ = true\n        for j = 1, i do\n            if n % i == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(factors, i)\n        end\n    \
    \    i = i + 1\n    end\n    return table.max(factors)\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        local prime = true\n        for j = 2, i\
    \ do\n            if n % j == 0 then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    for i = 2, n do\n        local prime = true\n\
    \        for j = 2, i do\n            if n % j == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(factors, i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, n do\n   \
    \     if n % i == 0 then\n            table.insert(factors, i)\n        end\n\
    \    end\n    return table.max(factors)\nend", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- The largest prime factor is n-1.\n\
    \  -- If n is prime, then the largest prime factor is n.\n  if n == 1 then\n \
    \   return n\n  end\n  -- If n is even, then the largest prime factor is n/2.\n\
    \  if n % 2 == 0 then\n    return n / 2\n  end\n  -- If n is odd, then n-1 is\
    \ prime and n+1 is composite.\n  local m = math.floor(n/2)\n  local i = 2\n  while\
    \ i <= m do\n    if n % i == 0 then\n      return i\n    end\n    i = i + 1\n\
    \  end\n  return n\nend", "  -- The largest prime factor is n-1.\n  -- If n is\
    \ prime, return 1.\n  if n == 1 then return 1 end\n  -- If n is even, return its\
    \ largest prime factor.\n  if n % 2 == 0 then return largest_prime_factor(n /\
    \ 2) end\n  -- If n is odd, return its largest prime factor plus 1.\n  local m\
    \ = math.floor((n + 1) / 2)\n  return largest_prime_factor(m) + 1 end\nend", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local prime\
    \ = true\n        for j = 2, i do\n            if n % j == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(factors, i)\n        end\n    \
    \    i = i + 1\n    end\n    return table.max(factors)\nend", "  -- The largest\
    \ prime factor is n-1\n  local max_factor = 1\n  -- The smallest prime factor\
    \ is 2\n  local min_factor = 2\n  -- The smallest prime factor is 2\n  local next_factor\
    \ = 2\n  -- The largest prime factor is 2\n  local next_factor2 = 2\n  -- The\
    \ smallest prime factor is 2\n  local next_factor3 = 2\n  -- The smallest prime\
    \ factor is 2\n  local next_factor4 = 2\n  -- The smallest prime factor is 2\n\
    \  local next_factor5 = 2\n  -- The smallest prime factor is 2\n  local next_factor6\
    \ = 2\n  -- The smallest prime factor is 2\n  local next_factor7 = 2\n  -- The\
    \ smallest prime factor is 2\n  local next_factor8 = 2\n  -- The smallest prime\
    \ factor is 2\n  local next_factor9 = 2\n  -- The smallest prime factor is 2\n\
    \  local next_factor10 = 2\n  -- The smallest prime factor is 2\n  local next_factor11\
    \ = 2\n  -- The smallest prime factor is 2\n  local next_factor12 = 2\n  -- The\
    \ smallest prime factor is 2\n  local next_factor13 = 2\n  -- The smallest prime\
    \ factor is 2\n  local next_factor14 = 2\n  -- The smallest prime factor is 2\n\
    \  local next_factor15 = 2\n  -- The smallest prime factor is 2\n  local next_factor16\
    \ = 2\n  -- The smallest prime factor is 2\n  local next_factor17 = 2\n  -- The\
    \ smallest prime factor is 2\n  local next_factor18 = 2\n  -- The smallest prime\
    \ factor is 2\n  local next_factor19 = 2\n  -- The smallest prime factor is 2\n\
    \  local next_factor20 = 2\n  -- The smallest prime factor is 2\n  local next_factor21\
    \ = 2\n  -- The smallest prime factor is 2\n  local next_factor22 = 2\n  -- The\
    \ smallest prime factor is 2\n  local next_factor23 = 2\n  -- The smallest prime\
    \ factor is 2\n  local next_factor24 = 2\n  -- The smallest prime factor is 2\n\
    \  local next_factor25 = 2\n  -- The smallest prime factor is 2\n  local next_factor26\
    \ = 2\n  -- The smallest prime factor is 2\n  local next_factor27 = 2\n  -- The\
    \ smallest prime factor is 2\n  local next_factor28 = 2\n  -- The smallest prime\
    \ factor is 2\n  local next_factor29 = 2\n  -- The smallest prime factor is 2\n\
    \  local next_factor30 = 2\n  ", "    local factors = {}\n    local i = 1\n  \
    \  while i <= math.sqrt(n) do\n        local p = primes[i]\n        if n % p ==\
    \ 0 then\n            n = n / p\n            factors[#factors + 1] = p\n     \
    \   else\n            i = i + 1\n        end\n    end\n    return n, factors\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "  local factors = {}\n  for i = 2, n do\n    local prime = true\n    for\
    \ j = 2, i do\n      if n % j == 0 then\n        prime = false\n        break\n\
    \      end\n    end\n    if prime then\n      table.insert(factors, i)\n    end\n\
    \  end\n  if #factors == 0 then\n    return nil\n  end\n  table.sort(factors)\n\
    \  return factors[1]\nend", "  -- Base case: n is 1 or 2.\n  if n == 1 or n ==\
    \ 2 then\n    return n\n  end", "  -- The largest prime factor is n-1\n  if n\
    \ == 1 then return n end", "    local factor = 1\n    local i = 1\n    while i\
    \ <= n do\n        if n % i == 0 then\n            factor = i\n            break\n\
    \        end\n        i = i + 1\n    end\n    return factor\nend", "  -- The largest\
    \ prime factor is n-1.\n  -- If n is prime, then its largest factor is n-1.\n\
    \  -- If n is divisible by 2, then its largest factor is n-1.\n  -- If n is divisible\
    \ by 3, then its largest factor is n-1.\n  -- If n is divisible by 5, then its\
    \ largest factor is n-1.\n  -- If n is divisible by 7, then its largest factor\
    \ is n-1.\n  -- If n is divisible by 11, then its largest factor is n-1.\n  --\
    \ If n is divisible by 13, then its largest factor is n-1.\n  -- If n is divisible\
    \ by 17, then its largest factor is n-1.\n  -- If n is divisible by 19, then its\
    \ largest factor is n-1.\n  -- If n is divisible by 23, then its largest factor\
    \ is n-1.\n  -- If n is divisible by 29, then its largest factor is n-1.\n  --\
    \ If n is divisible by 31, then its largest factor is n-1.\n  -- If n is divisible\
    \ by 37, then its largest factor is n-1.\n  -- If n is divisible by 41, then its\
    \ largest factor is n-1.\n  -- If n is divisible by 43, then its largest factor\
    \ is n-1.\n  -- If n is divisible by 47, then its largest factor is n-1.\n  --\
    \ If n is divisible by 53, then its largest factor is n-1.\n  -- If n is divisible\
    \ by 59, then its largest factor is n-1.\n  -- If n is divisible by 61, then its\
    \ largest factor is n-1.\n  -- If n is divisible by 67, then its largest factor\
    \ is n-1.\n  -- If n is divisible by 73, then its largest factor is n-1.\n  --\
    \ If n is divisible by 79, then its largest factor is n-1.\n  -- If n is divisible\
    \ by 83, then its largest factor is n-1.\n  -- If n is divisible by 89, then its\
    \ largest factor is n-1.\n  -- If n is divisible by 97, then its largest factor\
    \ is n-1.\n  -- If n is divisible by 103, then its largest factor is n-1.\n  --\
    \ If n is divisible by 109, then its largest factor is n-1.\n  -- If n is divisible\
    \ by 117, then its largest factor is n-1.\n  -- If n is divisible by 127, then\
    \ its largest factor is n-1.\n  -- If ", "    local factors = {}\n    for i =\
    \ 2, n do\n        local prime = true\n        for j = 2, i do\n            if\
    \ n % j == 0 then\n                prime = false\n                break\n    \
    \        end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local prime = true\n   \
    \     for j = 2, i do\n            if n % j == 0 then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(factors, i)\n        end\n        i = i + 1\n\
    \    end\n    table.sort(factors)\n    return factors[#factors]\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        local prime = true\n        for j\
    \ = 2, i do\n            if n % j == 0 then\n                prime = false\n \
    \               break\n            end\n        end\n        if prime then\n \
    \           table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "  -- The largest prime factor is n-1.\n  -- If n is prime, then the largest\
    \ prime factor is n.\n  if n == 1 then\n    return n\n  else\n    -- If n is odd,\
    \ then n-1 is prime and largest prime factor is n-1.\n    if n % 2 == 1 then\n\
    \      return largest_prime_factor(n - 1)\n    end\n    -- If n is even, then\
    \ n-1 is composite and largest prime factor is n.\n    -- We only need to check\
    \ odd numbers for composite numbers.\n    local prime_candidate = prime_table[n]\n\
    \    for i = 2, n do\n      if prime_candidate == i then\n        return i\n \
    \     end\n      prime_candidate = i * prime_candidate\n    end\n  end\nend",
  "  -- Base case\n  if n == 1 then\n    return 1\n  -- If n is prime, return it\n\
    \  elseif primes[n] then\n    return n\n  -- Otherwise, find the largest prime\
    \ factor of n\n  else\n    local max_factor = 1\n    for i = 2, n do\n      if\
    \ n % i == 0 then\n        max_factor = i\n        break\n      end\n    end\n\
    \    return max_factor\n  end\nend", "    local factor = 1\n    while n % factor\
    \ == 0 do\n        factor = factor * 2\n    end\n    return factor\nend", "  --\
    \ The largest prime factor is n.\n  if n == 1 then\n    return n\n  else\n   \
    \ -- Find the largest factor of n that is smaller than n.\n    local max_factor\
    \ = 1\n    for i = 2, n do\n      if n % i == 0 then\n        max_factor = i\n\
    \      end\n    end\n    -- Return the largest prime factor of n.\n    return\
    \ max_factor\n  end\nend", "  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  local factor = 1\n  local i = 2\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then\n      factor = i\n      break\n    end\n    i = i + 1\n\
    \  end\n  return factor\nend", "    local factor = 1\n    while n > 1 do\n   \
    \     factor = math.floor(n / factor)\n        n = math.mod(n, factor)\n    end\n\
    \    return factor\nend", "    local factor = 1\n    while n % factor == 0 do\n\
    \        factor = factor * 2\n    end\n    return factor\nend", "  -- The largest\
    \ prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime\
    \ factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor\
    \ is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is\
    \ n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n\
    \  -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n \
    \ -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n  --\
    \ The smallest prime factor is 2.\n  -- The largest prime factor is n.\n  -- The\
    \ smallest prime factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime\
    \ factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor\
    \ is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor is\
    \ 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n\
    \  -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n \
    \ -- The largest prime factor is n.\n  -- The smallest prime factor is 2.\n  --\
    \ The largest prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The\
    \ largest prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime\
    \ factor is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor\
    \ is n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is\
    \ n.\n  -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n\
    \  -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n \
    \ -- The smallest prime factor is 2.\n  -- The largest prime factor is n.\n  --\
    \ The smallest prime factor is 2.\n  -- The largest prime factor is n.\n  -- The\
    \ smallest prime factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime\
    \ factor is 2.\n  -- The largest prime factor is n.\n  -- The smallest prime factor\
    \ is 2.\n  -- The largest prime factor is n.", "    local factors = {}\n    local\
    \ prime = 1\n    while prime <= n do\n        local i = 1\n        while i * prime\
    \ <= n do\n            if n % prime == 0 then\n                table.insert(factors,\
    \ prime)\n                n = n / prime\n                break\n            end\n\
    \            i = i + 1\n        end\n        prime = prime + 1\n    end\n    return\
    \ n, factors\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return\
    \ 1\n  end", "  -- The largest prime factor is n-1.\n  -- If n is prime, return\
    \ 1.\n  if n == 1 then return 1 end\n  -- If n is even, return its largest prime\
    \ factor.\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If\
    \ n is odd, return its largest prime factor plus 1.\n  local factor = 1\n  while\
    \ n % 2 == 0 do\n    factor = factor * 2\n    n = n / 2\n  end\n  return factor\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", " \
    \   local prime_factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            prime_factors[i] = i\n        end\n    end\n    local largest_prime_factor\
    \ = prime_factors[1]\n    for i = 2, #prime_factors do\n        if prime_factors[i]\
    \ > largest_prime_factor then\n            largest_prime_factor = prime_factors[i]\n\
    \        end\n    end\n    return largest_prime_factor\nend", "  -- The largest\
    \ prime factor is n-1.\n  -- If n is prime, return 1.\n  if n == 1 then\n    return\
    \ 1\n  end\n  -- If n is even, return its largest prime factor.\n  if n % 2 ==\
    \ 0 then\n    return largest_prime_factor(n / 2)\n  end\n  -- If n is odd, return\
    \ its largest prime factor plus 1.\n  return largest_prime_factor(3 * n) + 1\n\
    end", "    local factor = 1\n    local i = 1\n    while i * factor <= n do\n \
    \       factor = factor * i\n        i = i + 1\n    end\n    return factor\nend",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return n, factors\nend",
  "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n     \
    \       table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    table.sort(factors)\n\
    \    return factors[1]\nend", "  -- The largest prime factor is n-1 (the smallest\
    \ prime factor is 1).\n  -- If n is prime, return n-1.\n  if n <= 1 then return\
    \ n end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            table.insert(factors, i)\n        end\n    end\n    table.sort(factors)\n\
    \    return factors[#factors]\nend", "    local factors = {}\n    for i = 2, n\
    \ do\n        local prime = true\n        for j = 2, i do\n            if n %\
    \ j == 0 then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factor\
    \ = 1\n    while n > 1 do\n        if n % factor == 0 then\n            n = n\
    \ / factor\n        else\n            factor = factor + 1\n        end\n    end\n\
    \    return factor\nend", "  -- Base case: n is 1 or 2.\n  if n == 1 or n == 2\
    \ then\n    return n\n  end", "  -- The largest prime factor is n-1.\n  if n ==\
    \ 1 then\n    return 1\n  end", "    local factors = {}\n    for i = 2, n do\n\
    \        local prime = true\n        for j = 2, i do\n            if n % j ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(factors, i)\n  \
    \      end\n    end\n    return table.max(factors)\nend", "    local factors =\
    \ {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base\
    \ case: n is odd.\n  if n % 2 == 1 then return 1 end\n  -- Find the largest factor\
    \ of n that is smaller than n.\n  local max_factor = 1\n  local max_factor_index\
    \ = 1\n  for i = 2, n do\n    -- If n is divisible by i, then n is not a prime.\n\
    \    if n % i == 0 then\n      -- If n is larger than max_factor, then update\
    \ max_factor and max_factor_index.\n      if n > max_factor then\n        max_factor\
    \ = n\n        max_factor_index = i\n      end\n    end\n  end\n  return max_factor_index\n\
    end", "  local factor = 1\n  while n > 1 do\n    factor = factor * math.floor(n/factor)\n\
    \    n = math.mod(n, factor)\n  end\n  return factor\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factor\
    \ = 1\n    while n % factor == 0 do\n        factor = factor * 2\n    end\n  \
    \  return factor\nend", "    local factors = {}\n    local prime = 1\n    local\
    \ i = 1\n    while i <= n do\n        if n % i == 0 then\n            prime =\
    \ i\n            i = 2\n            while i <= n do\n                if n % i\
    \ == 0 then\n                    i = i + 1\n                else\n           \
    \         break\n                end\n            end\n        end\n        table.insert(factors,\
    \ prime)\n        i = i + 1\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "    local primes = {}\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            primes[i] = i\n            n = n / i\n        else\n\
    \            i = i + 1\n        end\n    end\n    return primes[#primes]\nend",
  "    local factor = 1\n    while n ~= 1 do\n        factor = factor * math.floor(n/factor)\n\
    \        n = math.mod(n, factor)\n    end\n    return factor\nend", "    local\
    \ factor = 1\n    while n % factor == 0 do\n        factor = factor * 2\n    end\n\
    \    return factor\nend", "  -- Base case: n is prime.\n  if n == 1 then\n   \
    \ return 1\n  end", "    local factor = 1\n    while n > 1 do\n        if n %\
    \ factor == 0 then\n            n = n / factor\n        else\n            factor\
    \ = factor * 2\n        end\n    end\n    return factor\nend", "  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- The largest\
    \ prime factor is less than or equal to n.\n  -- The smallest prime factor is\
    \ greater than or equal to n.\n  -- The largest prime factor is less than or equal\
    \ to n.\n  -- The smallest prime factor is greater than or equal to n.\n  if n\
    \ == 1 then return 2 end\n  if n == 2 then return 1 end\n  if n % 2 == 0 then\
    \ return n end\n  local m = math.floor(math.sqrt(n))\n  while m <= n do\n    if\
    \ n % m == 0 then return m end\n    m = m + 1\n  end\n  return n\nend", "  --\
    \ Base case: n is prime.\n  if n == 1 then return 1 end\n  -- If n is even, return\
    \ its largest factor of two.\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest factor of four.\n  return largest_prime_factor(n\
    \ / 4) * 4\nend", "    local prime_factor = 1\n    local i = 1\n    while i *\
    \ prime_factor <= n do\n        prime_factor = i * prime_factor\n        i = i\
    \ + 1\n    end\n    return prime_factor\nend", "    local prime_factor = 1\n \
    \   local i = 1\n    while i * i <= n do\n        if n % i == 0 then\n       \
    \     prime_factor = i\n            n = n / i\n        else\n            i = i\
    \ + 1\n        end\n    end\n    return prime_factor\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factor\
    \ = 1\n    while n > 1 do\n        if n % factor == 0 then\n            factor\
    \ = factor * 2\n        else\n            n = n / factor\n        end\n    end\n\
    \    return factor\nend", "  -- The largest prime factor is n-1.\n  -- If n is\
    \ prime, return 1.\n  if n == 1 then return 1 end\n  -- If n is even, return its\
    \ largest prime factor.\n  if n % 2 == 0 then return largest_prime_factor(n /\
    \ 2) end\n  -- If n is odd, return its largest prime factor plus 1.\n  local m\
    \ = math.floor(n/2)\n  local p = largest_prime_factor(m)\n  if p * 2 == n then\
    \ return p end\n  return p + 1\nend", "    local factor = 1\n    while n ~= 1\
    \ do\n        if n % factor == 0 then\n            factor = factor * 2\n     \
    \   else\n            n = n / factor\n        end\n    end\n    return factor\n\
    end", "  -- The largest prime factor is n-1.\n  -- If n is prime, return it.\n\
    \  if n <= 1 then return n end\n  -- If n is odd, return its smallest factor.\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is even,\
    \ return its smallest factor plus 1.\n  local factor = 3\n  while factor <= n\
    \ do\n    factor = factor + 2\n  end\n  return factor\nend", "    local factor\
    \ = 1\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n    \
    \        factor = i\n            n = n / i\n        else\n            i = i +\
    \ 1\n        end\n    end\n    return factor\nend", "    local factor = 1\n  \
    \  while n > 1 do\n        if n % factor == 0 then\n            factor = factor\
    \ * 2\n        else\n            n = n / factor\n        end\n    end\n    return\
    \ factor\nend", "    local factor = 1\n    while n > 1 do\n        if n % factor\
    \ == 0 then\n            factor = factor + 1\n        else\n            n = n\
    \ / factor\n        end\n    end\n    return factor\nend", "  -- Base case: n\
    \ is prime.\n  if n == 1 then\n    return 1\n  -- Base case: n is divisible by\
    \ 2.\n  elseif n % 2 == 0 then\n    return 2\n  -- Base case: n is divisible by\
    \ 3.\n  elseif n % 3 == 0 then\n    return 3\n  -- Base case: n is divisible by\
    \ 5.\n  elseif n % 5 == 0 then\n    return 5\n  -- Base case: n is divisible by\
    \ 7.\n  elseif n % 7 == 0 then\n    return 7\n  -- Base case: n is divisible by\
    \ 11.\n  elseif n % 11 == 0 then\n    return 11\n  -- Base case: n is divisible\
    \ by 13.\n  elseif n % 13 == 0 then\n    return 13\n  -- Base case: n is divisible\
    \ by 17.\n  elseif n % 17 == 0 then\n    return 17\n  -- Base case: n is divisible\
    \ by 19.\n  elseif n % 19 == 0 then\n    return 19\n  -- Base case: n is divisible\
    \ by 23.\n  elseif n % 23 == 0 then\n    return 23\n  -- Base case: n is divisible\
    \ by 29.\n  elseif n % 29 == 0 then\n    return 29\n  -- Base case: n is divisible\
    \ by 31.\n  elseif n % 31 == 0 then\n    return 31\n  -- Base case: n is divisible\
    \ by 37.\n  elseif n % 37 == 0 then\n    return 37\n  -- Base case: n is divisible\
    \ by 43.\n  elseif n % 43 == 0 then\n    return 43\n  -- Base case: n is divisible\
    \ by 51.\n  elseif n % 51 == 0 then\n    return 51\n  -- Base case: n is divisible\
    \ by 59.\n  elseif n % 59 == 0 then\n    return 59\n  -- Base case: n is divisible\
    \ by 61.\n  elseif n % 61 == 0 then\n    return 61\n  -- Base case: n is divisible\
    \ by 67.\n  elseif n % 67 == 0 then\n    return 67\n  -- Base case: n is divisible\
    \ by 73.\n  elseif n % 73 == 0 then\n    return 73\n  -- Base case: n is divisible\
    \ by 79.\n  elseif n % 79 == 0 then\n    return 79\n  -- Base case: n is divisible\
    \ by 83.\n  elseif n % 83 == 0 then\n    return 83\n  -- Base case: n is divisible ",
  "    local factor = 1\n    while n ~= 1 do\n        if n % factor == 0 then\n  \
    \          factor = factor * 2\n        else\n            n = n / factor\n   \
    \     end\n    end\n    return factor\nend", "    local factors = {}\n    for\
    \ i = 2, n do\n        local prime = true\n        for j = 2, i do\n         \
    \   if n % j == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factor\
    \ = 1\n    while n ~= 1 do\n        factor = factor * math.floor(n/factor)\n \
    \       n = math.mod(n, factor)\n    end\n    return factor\nend", "  local factor\
    \ = 1\n  local i = 1\n  while i * factor <= n do\n    factor = factor * i\n  \
    \  i = i + 1\n  end\n  return factor\nend", "    local factor = 1\n    local i\
    \ = 1\n    while i <= n do\n        if n % i == 0 then\n            factor = i\n\
    \            break\n        end\n        i = i + 1\n    end\n    return factor\n\
    end", "    local factors = {}\n    for i = 2, n do\n        local prime = true\n\
    \        for j = 2, i do\n            if i % j == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(factors, i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, n do\n   \
    \     local prime = true\n        for j = 2, i do\n            if n % j == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(factors, i)\n       \
    \ end\n    end\n    return table.max(factors)\nend", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "    local primes = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            primes[i] = i\n        end\n    end\n    local largest = primes[1]\n\
    \    for i = 2, #primes do\n        if primes[i] > largest then\n            largest\
    \ = primes[i]\n        end\n    end\n    return largest\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    local largest = table.max(factors)\n    if largest\
    \ == n then\n        return largest\n    end\n    return largest * largest_prime_factor(largest)\n\
    end", "  -- The largest prime factor is n.\n  if n == 1 then return n end", " \
    \   local factor = 1\n    while n ~= 1 do\n        if n % factor == 0 then\n \
    \           factor = factor * 2\n        else\n            n = n / factor\n  \
    \      end\n    end\n    return factor\nend", "  -- Base case: n is prime.\n \
    \ if n == 1 then return 1 end", "    local factors = {}\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n        end\n\
    \    end\n    return table.max(factors)\nend", "  -- The largest prime factor\
    \ is n-1.\n  -- If n is even, return n.\n  if n % 2 == 0 then\n    return n\n\
    \  end", "    local factor = 1\n    local i = 1\n    while i <= n do\n       \
    \ if n % i == 0 then\n            factor = i\n            break\n        end\n\
    \        i = i + 1\n    end\n    return factor\nend", "    local factor = 1\n\
    \    local i = 1\n    while i * factor <= n do\n        factor = factor * i\n\
    \        i = i + 1\n    end\n    return factor\nend", "  -- If n is prime, return\
    \ 1.\n  if n == 1 then return 1 end\n  -- If n is even, return its largest factor\
    \ of two.\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If\
    \ n is odd, return its largest factor of four.\n  if n % 2 == 1 then return largest_prime_factor(n\
    \ / 4) end\n  -- If n is prime, return its largest factor of three.\n  local function\
    \ is_prime(n)\n    return n % 3 == 0 and n ~= 1 and not n % 5 == 0 and n ~= 3\n\
    \  end\n  local function factor(n)\n    local factor = 1\n    while n > 1 do\n\
    \      if n % 2 == 0 then\n        factor = factor * 2\n        n = n / 2\n  \
    \    elseif n % 3 == 0 then\n        factor = factor * 3\n        n = n / 3\n\
    \      elseif n % 5 == 0 then\n        factor = factor * 5\n        n = n / 5\n\
    \      elseif is_prime(n) then\n        factor = factor * n\n        n = n / n\n\
    \      else\n        n = n / 2\n      end\n    end\n    return factor\n  end\n\
    \  return factor(n)\nend", "  -- The largest prime factor is n-1.\n  -- If n is\
    \ prime, return 1.\n  if n == 1 then\n    return 1\n  end", "  -- The largest\
    \ prime factor is n-1.\n  -- If n is prime, then n-1 is also a prime factor.\n\
    \  -- If n is composite, then n-1 is NOT a prime factor.\n  -- So we only need\
    \ to check odd numbers.\n  -- If n is even, then n-1 is NOT a prime factor.\n\
    \  -- So we only need to check even numbers.\n  -- If n is odd, then n-1 is a\
    \ prime factor.\n  -- So we only need to check odd numbers.\n  -- If n is even,\
    \ then n-1 is NOT a prime factor.\n  -- So we only need to check even numbers.\n\
    \  -- If n is odd, then n-1 is a prime factor.\n  -- So we only need to check\
    \ odd numbers.\n  -- If n is even, then n-1 is NOT a prime factor.\n  -- So we\
    \ only need to check even numbers.\n  -- If n is odd, then n-1 is a prime factor.\n\
    \  -- So we only need to check odd numbers.\n  -- If n is even, then n-1 is NOT\
    \ a prime factor.\n  -- So we only need to check even numbers.\n  -- If n is odd,\
    \ then n-1 is a prime factor.\n  -- So we only need to check odd numbers.\n  --\
    \ If n is even, then n-1 is NOT a prime factor.\n  -- So we only need to check\
    \ even numbers.\n  -- If n is odd, then n-1 is a prime factor.\n  -- So we only\
    \ need to check odd numbers.\n  -- If n is even, then n-1 is NOT a prime factor.\n\
    \  -- So we only need to check even numbers.\n  -- If n is odd, then n-1 is a\
    \ prime factor.\n  -- So we only need to check odd numbers.\n  -- If n is even,\
    \ then n-1 is NOT a prime factor.\n  -- So we only need to check even numbers.\n\
    \  -- If n is odd, then n-1 is a prime factor.\n  -- So we only need to check\
    \ odd numbers.\n  -- If n is even, then n-1 is NOT a prime factor.\n  -- So we\
    \ only need to check even numbers.\n  -- If n is odd, then n-1 is a prime factor.\n\
    \  -- So we only need to check odd numbers.\n  -- If n is even, then n-1 is NOT\
    \ a prime factor.\n  -- So we only need to check even numbers.\n  -- If n is odd,\
    \ then n-1 is a prime factor.\n  -- So we only need to check odd numbers.\n  ",
  "    local factors = {}\n    local primes = {}\n    local i = 1\n    while i <=\
    \ n do\n        local prime = true\n        for _, prime in pairs(primes) do\n\
    \            if n % prime == 0 then\n                prime = false\n         \
    \       break\n            end\n        end\n        if prime then\n         \
    \   table.insert(factors, i)\n        end\n        table.insert(primes, i)\n \
    \       i = i * 2\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n   \
    \ if n % i == 0 then\n      factors[i] = i\n      n = n / i\n    else\n      i\
    \ = i + 1\n    end\n  end\n  return factors[#factors]\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        local prime = true\n        for j = 2, i\
    \ do\n            if n % j == 0 then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    table.sort(factors)\n\
    \    return factors[#factors]\nend", "    local factors = {}\n    for i = 2, n\
    \ do\n        local prime = true\n        for j = 2, i do\n            if n %\
    \ j == 0 then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- The largest\
    \ prime factor is always even.\n  -- The smallest prime factor is always odd.\n\
    \  -- The smallest prime factor is always odd.\n  -- The largest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always even.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always odd.\n\
    \  -- The smallest prime factor is always even.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always even.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always even.\n\
    \  -- The smallest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always even.\n  -- The smallest prime factor is always odd.\n  -- The smallest\
    \ prime factor is always even.\n  -- The smallest prime factor is always odd.\n\
    \  -- The smallest prime factor is always even.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always even.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always even.\n\
    \  -- The smallest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always even.\n  -- The smallest prime factor is always odd.\n  -- The smallest\
    \ prime factor is always even.\n  -- The smallest prime factor is always odd.\n\
    \  -- The smallest prime factor is always even.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always even.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always even.\n\
    \  -- The smallest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always even.\n  -- The smallest prime factor is always odd.\n  -- The smallest\
    \ prime factor is always even.\n  -- The smallest prime factor is always odd.\n\
    \  -- The smallest prime factor is always even.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always even.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always even.\n\
    \  -- The smallest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always even.\n  -- The smallest prime factor is always od", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    local largest = #factors\n    if largest == 0\
    \ then\n        return nil\n    end\n    for i = 2, largest do\n        if n %\
    \ i == 0 then\n            largest = i\n        end\n    end\n    return largest\n\
    end", "  -- The largest prime factor is n-1.\n  -- If n is prime, return 1.\n\
    \  if n == 1 then\n    return 1\n  end\n  -- If n is even, return its largest\
    \ prime factor.\n  if n % 2 == 0 then\n    return largest_prime_factor(n / 2)\n\
    \  end\n  -- If n is odd, return its largest prime factor plus 1.\n  local factor\
    \ = 2\n  while n % factor == 0 do\n    factor = factor + 1\n  end\n  return factor\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- If\
    \ n is prime, return its largest factor of n.\n  if prime_table[n] then return\
    \ prime_table[n] end\n  -- Otherwise, loop through all prime factors of n.\n \
    \ for i = 2, n do\n    -- If n is divisible by i, then n is not prime.\n    if\
    \ n % i == 0 then\n      return nil\n    end\n  end\n  return n\nend", "    local\
    \ factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n          \
    \  factor = factor + 1\n        else\n            n = n / factor\n        end\n\
    \    end\n    return factor\nend", "    local factors = {}\n    for i = 2, n do\n\
    \        local prime = true\n        for j = 2, i do\n            if n % j ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(factors, i)\n  \
    \      end\n    end\n    return table.max(factors)\nend", "    local factors =\
    \ {}\n    for i = 2, n do\n        local prime = true\n        for j = 2, i do\n\
    \            if n % j == 0 then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return n, factors\nend",
  "    local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n   \
    \         n = n / factor\n        else\n            factor = factor * 2\n    \
    \    end\n    end\n    return factor\nend", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 then return 2 end", "    local factor = 1\n    local i = 1\n    while\
    \ i <= n do\n        if n % i == 0 then\n            factor = i\n            break\n\
    \        end\n        i = i + 1\n    end\n    return factor\nend", "    local\
    \ factor = 1\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n\
    \            factor = i\n            break\n        end\n        i = i + 1\n \
    \   end\n    return factor\nend", "  -- The largest prime factor is n-1.\n  --\
    \ The smallest prime factor is 2.\n  -- The largest prime factor is always even.\n\
    \  -- The smallest prime factor is always odd.\n  -- The largest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always odd.\n  -- The largest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always odd.\n\
    \  -- The largest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The largest prime factor is always odd.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The largest prime factor is always odd.\n\
    \  -- The smallest prime factor is always odd.\n  -- The largest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always odd.\n  -- The largest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always odd.\n\
    \  -- The largest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The largest prime factor is always odd.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The largest prime factor is always odd.\n\
    \  -- The smallest prime factor is always odd.\n  -- The largest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always odd.\n  -- The largest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always odd.\n\
    \  -- The largest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The largest prime factor is always odd.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The largest prime factor is always odd.\n\
    \  -- The smallest prime factor is always odd.\n  -- The largest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always odd.\n  -- The largest\
    \ prime factor is always odd.\n  -- The smallest prime factor is always odd.\n\
    \  -- The largest prime factor is always odd.\n  -- The smallest prime factor\
    \ is always odd.\n  -- The largest prime factor is always odd.\n  -- The smallest\
    \ prime factor is always odd.\n  -- The largest prime factor is always odd.\n\
    \  -- The smallest prime factor is always odd.\n  -- The largest prime factor\
    \ is always odd.\n  -- The smallest prime factor is always odd.\n  -- The largest\
    \ prime factor is always od", "  -- The largest prime factor is n-1.\n  -- The\
    \ smallest prime factor is 2.\n  -- The largest prime factor is smaller than n.\n\
    \  -- The smallest prime factor is larger than n.\n  -- The largest prime factor\
    \ is smaller than n.\n  -- The smallest prime factor is larger than n.\n  -- The\
    \ largest prime factor is smaller than n.\n  -- The smallest prime factor is larger\
    \ than n.\n  -- The largest prime factor is smaller than n.\n  -- The smallest\
    \ prime factor is larger than n.\n  -- The largest prime factor is smaller than\
    \ n.\n  -- The smallest prime factor is larger than n.\n  -- The largest prime\
    \ factor is smaller than n.\n  -- The smallest prime factor is larger than n.\n\
    \  -- The largest prime factor is smaller than n.\n  -- The smallest prime factor\
    \ is larger than n.\n  -- The largest prime factor is smaller than n.\n  -- The\
    \ smallest prime factor is larger than n.\n  -- The largest prime factor is smaller\
    \ than n.\n  -- The smallest prime factor is larger than n.\n  -- The largest\
    \ prime factor is smaller than n.\n  -- The smallest prime factor is larger than\
    \ n.\n  -- The largest prime factor is smaller than n.\n  -- The smallest prime\
    \ factor is larger than n.\n  -- The largest prime factor is smaller than n.\n\
    \  -- The smallest prime factor is larger than n.\n  -- The largest prime factor\
    \ is smaller than n.\n  -- The smallest prime factor is larger than n.\n  -- The\
    \ largest prime factor is smaller than n.\n  -- The smallest prime factor is larger\
    \ than n.\n  -- The largest prime factor is smaller than n.\n  -- The smallest\
    \ prime factor is larger than n.\n  -- The largest prime factor is smaller than\
    \ n.\n  -- The smallest prime factor is larger than n.\n  -- The largest prime\
    \ factor is smaller than n.\n  -- The smallest prime factor is larger than n.\n\
    \  -- The largest prime factor is smaller than n.\n  -- The smallest prime factor\
    \ is larger than n.\n  -- The largest prime factor is smaller than n.\n  -- The\
    \ smallest prime factor is larger than n.\n  -- The largest prime factor is smaller\
    \ than n.\n  -- The smallest prime factor is larger than n.\n  -- The largest\
    \ prime factor is smaller than n.\n  -- The smallest prime factor is larger than\
    \ n.\n  -- The largest prime factor is smaller than n.\n  -- The smallest prime\
    \ factor is larger than n.\n  -- The largest prime factor is smaller than n.\n\
    \  -- The smallest prime factor is larger than n.\n  -- The largest prime factor\
    \ is smaller than n.\n  -- The smallest prime factor is larger than n.\n  -- The\
    \ largest prime factor is smaller than n.\n  -- The ", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return n, factors\nend",
  "    local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n   \
    \         n = n / factor\n        else\n            factor = factor * 2\n    \
    \    end\n    end\n    return factor\nend", "    local factor = 1\n    while n\
    \ > 1 do\n        if n % factor == 0 then\n            n = n / factor\n      \
    \  else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "  -- If n is prime, return 1.\n  if n == 1 then return 1 end\n  -- If n\
    \ is divisible by 2, return 2.\n  if n % 2 == 0 then return 2 end\n  -- If n is\
    \ divisible by 3, return 3.\n  if n % 3 == 0 then return 3 end\n  -- If n is divisible\
    \ by 5, return 5.\n  if n % 5 == 0 then return 5 end\n  -- If n is divisible by\
    \ 7, return 7.\n  if n % 7 == 0 then return 7 end\n  -- If n is divisible by 11,\
    \ return 11.\n  if n % 11 == 0 then return 11 end\n  -- If n is divisible by 13,\
    \ return 13.\n  if n % 13 == 0 then return 13 end\n  -- If n is divisible by 17,\
    \ return 17.\n  if n % 17 == 0 then return 17 end\n  -- If n is divisible by 19,\
    \ return 19.\n  if n % 19 == 0 then return 19 end\n  -- If n is divisible by 23,\
    \ return 23.\n  if n % 23 == 0 then return 23 end\n  -- If n is divisible by 29,\
    \ return 29.\n  if n % 29 == 0 then return 29 end\n  -- If n is divisible by 31,\
    \ return 31.\n  if n % 31 == 0 then return 31 end\n  -- If n is divisible by 37,\
    \ return 37.\n  if n % 37 == 0 then return 37 end\n  -- If n is divisible by 41,\
    \ return 41.\n  if n % 41 == 0 then return 41 end\n  -- If n is divisible by 43,\
    \ return 43.\n  if n % 43 == 0 then return 43 end\n  -- If n is divisible by 47,\
    \ return 47.\n  if n % 47 == 0 then return 47 end\n  -- If n is divisible by 53,\
    \ return 53.\n  if n % 53 == 0 then return 53 end\n  -- If n is divisible by 59,\
    \ return 59.\n  if n % 59 == 0 then return 59 end\n  -- If n is divisible by 61,\
    \ return 61.\n  if n % 61 == 0 then return 61 end\n  -- If n is divisible by 67,\
    \ return 67.\n  if n % 67 == 0 then return 67 end\n  -- If n is divisible by 71,\
    \ return 71.\n  if n % 71 == 0 then return 71 end\n  -- If n is divisible by 73,\
    \ return 73.\n  if n % 73 == 0 then return 73 end\n  -- If n is divisible by 79,\
    \ return 79.\n", "  -- If n is prime, return n.\n  if n == 1 then return n end\n\
    \  -- If n is odd, return its smallest factor of two.\n  if n % 2 == 1 then return\
    \ 2 end\n  -- If n is even, return its smallest factor of four.\n  if n % 4 ==\
    \ 1 then return 4 end\n  -- If n is divisible by 2, return its smallest factor\
    \ of two.\n  if n % 2 == 0 then return 2 end\n  -- If n is divisible by 4, return\
    \ its smallest factor of two.\n  if n % 4 == 0 then return 4 end\n  -- If n is\
    \ divisible by 6, return its smallest factor of two.\n  if n % 6 == 0 then return\
    \ 6 end\n  -- If n is divisible by 8, return its smallest factor of two.\n  if\
    \ n % 8 == 0 then return 8 end\n  -- If n is divisible by 10, return its smallest\
    \ factor of two.\n  if n % 10 == 0 then return 10 end\n  -- If n is divisible\
    \ by 12, return its smallest factor of two.\n  if n % 12 == 0 then return 12 end\n\
    \  -- If n is divisible by 14, return its smallest factor of two.\n  if n % 14\
    \ == 0 then return 14 end\n  -- If n is divisible by 16, return its smallest factor\
    \ of two.\n  if n % 16 == 0 then return 16 end\n  -- If n is divisible by 18,\
    \ return its smallest factor of two.\n  if n % 18 == 0 then return 18 end\n  --\
    \ If n is divisible by 20, return its smallest factor of two.\n  if n % 20 ==\
    \ 0 then return 20 end\n  -- If n is divisible by 22, return its smallest factor\
    \ of two.\n  if n % 22 == 0 then return 22 end\n  -- If n is divisible by 24,\
    \ return its smallest factor of two.\n  if n % 24 == 0 then return 24 end\n  --\
    \ If n is divisible by 26, return its smallest factor of two.\n  if n % 26 ==\
    \ 0 then return 26 end\n  -- If n is divisible by 28, return its smallest factor\
    \ of two.\n  if n % 28 == 0 then return 28 end\n  -- If n is divisible by 30,\
    \ return its smallest factor of two.\n  if n % 30 == 0 then return 30 end\n  --\
    \ If n is divisible by 32, return its smallest factor of two.\n  if n % 32 ==\
    \ 0 then return 32 end\n  -- If n is divisible by 34, return its smallest factor\
    \ of tw", "    local factor = 1\n    while n > 1 do\n        factor = factor *\
    \ 2\n        n = n / factor\n    end\n    return factor\nend", "    local factor\
    \ = 1\n    while n % factor == 0 do\n        factor = factor * 2\n    end\n  \
    \  return factor\nend", "    local factors = {}\n    for i = 2, n do\n       \
    \ if n % i == 0 then\n            table.insert(factors, i)\n        end\n    end\n\
    \    local largest = table.max(factors)\n    if largest == n then\n        return\
    \ largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \   end\n        i = i + 1\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    table.sort(factors)\n\
    \    return factors[#factors]\nend", "  -- The largest prime factor is n.\n  --\
    \ If n is prime, return 1.\n  if n == 1 then return 1 end\n  -- If n is divisible\
    \ by 2, return 2.\n  if n % 2 == 0 then return 2 end\n  -- If n is divisible by\
    \ 3, return 3.\n  if n % 3 == 0 then return 3 end\n  -- If n is divisible by 5,\
    \ return 5.\n  if n % 5 == 0 then return 5 end\n  -- If n is divisible by 7, return\
    \ 7.\n  if n % 7 == 0 then return 7 end\n  -- If n is divisible by 11, return\
    \ 11.\n  if n % 11 == 0 then return 11 end\n  -- If n is divisible by 13, return\
    \ 13.\n  if n % 13 == 0 then return 13 end\n  -- If n is divisible by 17, return\
    \ 17.\n  if n % 17 == 0 then return 17 end\n  -- If n is divisible by 19, return\
    \ 19.\n  if n % 19 == 0 then return 19 end\n  -- If n is divisible by 23, return\
    \ 23.\n  if n % 23 == 0 then return 23 end\n  -- If n is divisible by 29, return\
    \ 29.\n  if n % 29 == 0 then return 29 end\n  -- If n is divisible by 31, return\
    \ 31.\n  if n % 31 == 0 then return 31 end\n  -- If n is divisible by 37, return\
    \ 37.\n  if n % 37 == 0 then return 37 end\n  -- If n is divisible by 41, return\
    \ 41.\n  if n % 41 == 0 then return 41 end\n  -- If n is divisible by 43, return\
    \ 43.\n  if n % 43 == 0 then return 43 end\n  -- If n is divisible by 47, return\
    \ 47.\n  if n % 47 == 0 then return 47 end\n  -- If n is divisible by 53, return\
    \ 53.\n  if n % 53 == 0 then return 53 end\n  -- If n is divisible by 59, return\
    \ 59.\n  if n % 59 == 0 then return 59 end\n  -- If n is divisible by 61, return\
    \ 61.\n  if n % 61 == 0 then return 61 end\n  -- If n is divisible by 67, return\
    \ 67.\n  if n % 67 == 0 then return 67 end\n  -- If n is divisible by 71, return\
    \ 71.\n  if n % 71 == 0 then return 71 end\n  -- If n is divisible by 73, return\
    \ 73.\n  if n % 73 == 0 then return 73 end\n  -- If n is ", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factor\
    \ = 1\n    local i = 1\n    while i * factor <= n do\n        factor = factor\
    \ * i\n        i = i + 1\n    end\n    return factor\nend", "  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- The largest\
    \ prime factor is less than or equal to sqrt(n).\n  -- The smallest prime factor\
    \ is greater than or equal to sqrt(n).\n  -- The largest prime factor is less\
    \ than or equal to sqrt(n).\n  -- The smallest prime factor is greater than or\
    \ equal to sqrt(n).\n  -- The largest prime factor is less than or equal to sqrt(n).\n\
    \  -- The smallest prime factor is greater than or equal to sqrt(n).\n  -- The\
    \ largest prime factor is less than or equal to sqrt(n).\n  -- The smallest prime\
    \ factor is greater than or equal to sqrt(n).\n  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The smallest prime factor is greater than\
    \ or equal to sqrt(n).\n  -- The largest prime factor is less than or equal to\
    \ sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The ", "  -- Base case: n is prime.\n  if n == 1 then\n  \
    \  return 1\n  end", "    local factor = 1\n    local i = 1\n    while i <= n\
    \ do\n        if n % i == 0 then\n            factor = i\n            break\n\
    \        end\n        i = i + 1\n    end\n    return factor\nend", "    local\
    \ factor = 1\n    while n % factor == 0 do\n        factor = factor * 2\n    end\n\
    \    return factor\nend", "    local factor = 1\n    while n % factor == 0 do\n\
    \        factor = factor + 1\n    end\n    return factor\nend", "    local factor\
    \ = 1\n    while n > 1 do\n        if n % factor == 0 then\n            factor\
    \ = factor * 2\n        else\n            n = n / factor\n        end\n    end\n\
    \    return factor\nend", "    local factors = {}\n    local i = 1\n    while\
    \ i <= n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        else\n            i = i + 1\n        end\n   \
    \ end\n    return n, factors\nend", "  -- The largest prime factor is n-1.\n \
    \ -- If n is prime, then its largest prime factor is n-1.\n  -- If n is composite,\
    \ then its largest prime factor is n.\n  -- The largest prime factor is one less\
    \ than the largest prime factor of the number n.\n  -- The largest prime factor\
    \ is one less than the largest prime factor of the number n.\n  -- The largest\
    \ prime factor is one less than the largest prime factor of the number n.\n  --\
    \ The largest prime factor is one less than the largest prime factor of the number\
    \ n.\n  -- The largest prime factor is one less than the largest prime factor\
    \ of the number n.\n  -- The largest prime factor is one less than the largest\
    \ prime factor of the number n.\n  -- The largest prime factor is one less than\
    \ the largest prime factor of the number n.\n  -- The largest prime factor is\
    \ one less than the largest prime factor of the number n.\n  -- The largest prime\
    \ factor is one less than the largest prime factor of the number n.\n  -- The\
    \ largest prime factor is one less than the largest prime factor of the number\
    \ n.\n  -- The largest prime factor is one less than the largest prime factor\
    \ of the number n.\n  -- The largest prime factor is one less than the largest\
    \ prime factor of the number n.\n  -- The largest prime factor is one less than\
    \ the largest prime factor of the number n.\n  -- The largest prime factor is\
    \ one less than the largest prime factor of the number n.\n  -- The largest prime\
    \ factor is one less than the largest prime factor of the number n.\n  -- The\
    \ largest prime factor is one less than the largest prime factor of the number\
    \ n.\n  -- The largest prime factor is one less than the largest prime factor\
    \ of the number n.\n  -- The largest prime factor is one less than the largest\
    \ prime factor of the number n.\n  -- The largest prime factor is one less than\
    \ the largest prime factor of the number n.\n  -- The largest prime factor is\
    \ one less than the largest prime factor of the number n.\n  -- The largest prime\
    \ factor is one less than the largest prime factor of the number n.\n  -- The\
    \ largest prime factor is one less than the largest prime factor of the number\
    \ n.\n  -- The largest prime factor is one less than the largest prime factor\
    \ of the number n.\n  -- The largest prime factor is one less than the largest\
    \ prime factor of the number n.\n  -- The largest prime factor is one less than\
    \ the largest prime factor of the number n.\n  -- The largest prime factor is\
    \ one less than the largest prime factor of the number n.\n  -- The largest prime\
    \ factor is one less than the largest prime factor of the number n.\n  -- The\
    \ largest prime factor is one less than the largest prime factor of the ", " \
    \   local factors = {}\n    local primes = {}\n    local i = 1\n    while i <=\
    \ n do\n        local prime = primes[i]\n        if prime == nil then\n      \
    \      prime = primes[i]\n            i = i + 1\n        end\n        if prime\
    \ == nil then\n            prime = i\n        end\n        if prime > n then\n\
    \            prime = nil\n        end\n        if prime ~= nil then\n        \
    \    table.insert(factors, prime)\n        end\n        i = i + 1\n    end\n \
    \   return table.max(factors)\nend", "  -- Base case: n is prime.\n  if n == 1\
    \ then\n    return 1\n  end", "    local factor = 1\n    while n > 1 do\n    \
    \    if n % factor == 0 then\n            n = n / factor\n        else\n     \
    \       factor = factor + 1\n        end\n    end\n    return factor\nend", " \
    \ -- The largest prime factor is n-1.\n  -- If n is prime, then the largest prime\
    \ factor is n.\n  if n == 1 then return n end\n  -- If n is even, then the largest\
    \ prime factor is n/2.\n  if n % 2 == 0 then return largest_prime_factor(n/2)\
    \ end\n  -- If n is odd, then n-1 is prime and n+1 is composite.\n  local m =\
    \ math.floor(n/2) -- The smallest odd number greater than n.\n  local i = 2 --\
    \ The current odd number.\n  while i <= m do\n    -- If n is divisible by i, then\
    \ n-1 is composite and n+1 is prime.\n    if n % i == 0 then return largest_prime_factor(n\
    \ + 1) end\n    -- If n is divisible by i+1, then n+1 is composite and n is prime.\n\
    \    if n % i == 1 then return largest_prime_factor(n) end\n    -- Increment the\
    \ odd number.\n    i = i + 2\n  end\n  -- If n is divisible by i, then n-1 is\
    \ composite and n is prime.\n  return largest_prime_factor(n)\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[1]\nend",
  "  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n\
    \    if factor > n then\n      break\n    end\n    i = i + 1\n  end\n  return\
    \ factor\nend", "    local factor = 1\n    while n % factor == 0 do\n        factor\
    \ = factor * 2\n    end\n    return factor\nend", "    local factors = {}\n  \
    \  for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        if n % i\
    \ == 0 then\n            table.insert(factors, i)\n        end\n        i = i\
    \ + 1\n    end\n    return table.max(factors)\nend", "  -- Base case: n is prime.\n\
    \  if n == 1 then return 1 end\n  -- Find the largest factor of n that is smaller\
    \ than n.\n  local max_factor = 1\n  local max_factor_index = 1\n  for i = 2,\
    \ n do\n    if n % i == 0 then\n      -- The largest factor is smaller than n.\n\
    \      if max_factor < i then\n        max_factor = i\n        max_factor_index\
    \ = i\n      end\n    end\n  end\n  return max_factor\nend", "  -- Base case\n\
    \  if n == 1 then\n    return 1\n  end\n  -- Find the largest factor of n\n  local\
    \ max_factor = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_factor\
    \ = i\n    end\n  end\n  return max_factor\nend", "    local factors = {}\n  \
    \  for i = 2, n do\n        local prime = true\n        for j = 2, i do\n    \
    \        if n % j == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "    local prime_factors = {}\n    local prime_factor = 1\n    local i =\
    \ 1\n    while i <= n do\n        if n % i == 0 then\n            prime_factor\
    \ = i\n            prime_factors[i] = prime_factor\n        end\n        i = i\
    \ + 1\n    end\n    local largest = prime_factor\n    for i = 2, n do\n      \
    \  if prime_factors[i] < largest then\n            largest = prime_factors[i]\n\
    \        end\n    end\n    return largest\nend", "  -- The largest prime factor\
    \ is n-1.\n  -- If n is prime, return it.\n  if n == 1 then return n end\n  --\
    \ If n is even, return its largest prime factor.\n  if n % 2 == 0 then return\
    \ largest_prime_factor(n / 2) end\n  -- If n is odd, return its largest prime\
    \ factor plus one.\n  local m = math.floor((n + 1) / 2)\n  return largest_prime_factor(m)\
    \ * m\nend", "    local factor = 1\n    local i = 1\n    while i * factor <= n\
    \ do\n        factor = factor * i\n        i = i + 1\n    end\n    return factor\n\
    end", "  -- The largest prime factor is n-1.\n  if n == 1 then\n    return 1\n\
    \  end\n  -- If n is even, there is no prime factor.\n  if n % 2 == 0 then\n \
    \   return nil\n  end\n  -- If n is odd, return the largest prime factor of n/2.\n\
    \  local p = largest_prime_factor(n/2)\n  if p ~= nil then\n    return p * 2\n\
    \  end\n  -- If n is prime, return the largest prime factor of n.\n  local m =\
    \ math.floor(n/3)\n  local q = largest_prime_factor(m)\n  if q ~= nil then\n \
    \   return q * 3\n  end\n  -- If n is divisible by 3, return its prime factor.\n\
    \  local r = math.floor(n/5)\n  local s = largest_prime_factor(r)\n  if s ~= nil\
    \ then\n    return s * 5\n  end\n  -- If n is divisible by 5, return its prime\
    \ factor.\n  local t = math.floor(n/7)\n  local u = largest_prime_factor(t)\n\
    \  if u ~= nil then\n    return u * 7\n  end\n  -- If n is divisible by 7, return\
    \ its prime factor.\n  local v = math.floor(n/11)\n  local w = largest_prime_factor(v)\n\
    \  if w ~= nil then\n    return w * 11\n  end\n  -- If n is divisible by 11, return\
    \ its prime factor.\n  local x = math.floor(n/13)\n  local y = largest_prime_factor(x)\n\
    \  if y ~= nil then\n    return y * 13\n  end\n  -- If n is divisible by 13, return\
    \ its prime factor.\n  local z = math.floor(n/17)\n  local a = largest_prime_factor(z)\n\
    \  if a ~= nil then\n    return a * 17\n  end\n  -- If n is divisible by 17, return\
    \ its prime factor.\n  local b = math.floor(n/19)\n  local c = largest_prime_factor(b)\n\
    \  if c ~= nil then\n    return c * 19\n  end\n  -- If n is divisible by 19, return\
    \ its prime factor.\n  local d = math.floor(n/23)\n  local e = largest_prime_factor(d)\n\
    \  if e ~= nil then\n    return e * 23\n  end\n  -- If n is divisible by 23, return\
    \ its prime factor.\n  local f = math.floor(n/29)\n  local g = largest_prime_factor(f)\n\
    \  if g ~= nil then\n    return g * 29", "    local factors = {}\n    local i\
    \ = 1\n    while i <= n do\n        local prime = true\n        for j = 2, i do\n\
    \            if n % j == 0 then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n\
    \        if n % i == 0 then\n            factors[i] = i\n            n = n / i\n\
    \        else\n            i = i + 1\n        end\n    end\n    return factors[#factors]\n\
    end", "  local factors = {}\n  for i = 2, n do\n    if n % i == 0 then\n     \
    \ table.insert(factors, i)\n      n = n / i\n    end\n  end\n  if n > 1 then\n\
    \    table.insert(factors, n)\n  end\n  return table.max(factors)\nend", "   \
    \ local factors = {}\n    local i = 1\n    while i <= n do\n        if n % i ==\
    \ 0 then\n            table.insert(factors, i)\n            n = n / i\n      \
    \  else\n            i = i + 1\n        end\n    end\n    return n, factors\n\
    end", "    local factors = {}\n    for i = 2, n do\n        local prime = true\n\
    \        for j = 2, i do\n            if n % j == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(factors, i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "  local factor = 1\n  while n ~= 1 do\n    factor\
    \ = factor * math.floor(n/factor)\n    n = math.mod(n, factor)\n  end\n  return\
    \ factor\nend", "    local factors = {}\n    for i = 2, n do\n        local prime\
    \ = true\n        for j = 2, i do\n            if n % j == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(factors, i)\n        end\n    end\n\
    \    return table.max(factors)\nend", "    local factors = {}\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            table.insert(factors, i)\n   \
    \     end\n    end\n    table.sort(factors)\n    return factors[#factors]\nend",
  "    local factor = 1\n    while factor <= n do\n        local i = 1\n        while\
    \ i * factor <= n do\n            i = i + 1\n        end\n        if i == n then\n\
    \            return factor\n        end\n        factor = factor + 1\n    end\n\
    end", "    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = i\n            break\n        end\n  \
    \      i = i + 1\n    end\n    return factor\nend", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factor\
    \ = 1\n    while n ~= 1 do\n        factor = factor * n\n        n = math.floor(n/factor)\n\
    \    end\n    return factor\nend", "  -- The largest prime factor is n-1.\n  --\
    \ The smallest prime factor is 2.\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is greater than or equal\
    \ to sqrt(n).\n  -- The largest prime factor is less than or equal to sqrt(n).\n\
    \  -- The smallest prime factor is greater than or equal to sqrt(n).\n  -- The\
    \ largest prime factor is less than or equal to sqrt(n).\n  -- The smallest prime\
    \ factor is greater than or equal to sqrt(n).\n  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The smallest prime factor is greater than\
    \ or equal to sqrt(n).\n  -- The largest prime factor is less than or equal to\
    \ sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The ",
  "  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = math.max(factor,\
    \ i)\n    i = i * 2\n  end\n  return factor\nend", "    local factor = 1\n   \
    \ while n % factor == 0 do\n        factor = factor * 2\n    end\n    return factor\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n  --\
    \ Find the largest factor of n that is smaller than n.\n  local max_factor = 1\n\
    \  while n % max_factor == 0 do\n    max_factor = max_factor * 2\n  end\n  --\
    \ If n is divisible by max_factor, then n is prime.\n  if n % max_factor == 0\
    \ then\n    return max_factor\n  end\n  -- Otherwise, find the largest factor\
    \ of n that is smaller than n.\n  local max_factor = 1\n  while n % max_factor\
    \ == 0 do\n    max_factor = max_factor * 2\n  end\n  -- If n is divisible by max_factor,\
    \ then n is prime.\n  if n % max_factor == 0 then\n    return max_factor\n  end\n\
    \  -- Otherwise, find the largest factor of n that is smaller than n.\n  local\
    \ max_factor = 1\n  while n % max_factor == 0 do\n    max_factor = max_factor\
    \ * 2\n  end\n  -- If n is divisible by max_factor, then n is prime.\n  if n %\
    \ max_factor == 0 then\n    return max_factor\n  end\n  -- Otherwise, find the\
    \ largest factor of n that is smaller than n.\n  local max_factor = 1\n  while\
    \ n % max_factor == 0 do\n    max_factor = max_factor * 2\n  end\n  -- If n is\
    \ divisible by max_factor, then n is prime.\n  if n % max_factor == 0 then\n \
    \   return max_factor\n  end\n  -- Otherwise, find the largest factor of n that\
    \ is smaller than n.\n  local max_factor = 1\n  while n % max_factor == 0 do\n\
    \    max_factor = max_factor * 2\n  end\n  -- If n is divisible by max_factor,\
    \ then n is prime.\n  if n % max_factor == 0 then\n    return max_factor\n  end\n\
    \  -- Otherwise, find the largest factor of n that is smaller than n.\n  local\
    \ max_factor = 1\n  while n % max_factor == 0 do\n    max_factor = max_factor\
    \ * 2\n  end\n  -- If n is divisible by max_factor, then n is prime.\n  if n %\
    \ max_factor == 0 then\n    return max_factor\n  end\n  -- Otherwise, find the\
    \ largest factor of n that is smaller than n.\n  local max_factor = 1\n  while\
    \ n % max_factor == 0 do\n    max_factor = max_factor * 2\n  end\n  -- If n is\
    \ divisible by max_factor, then n is prime.\n  if n % max_factor == 0 then\n \
    \   return max_factor\n  end\n  -- Otherwise, find the largest factor of n that\
    \ is smaller than n.\n  local max_factor = 1\n  while n % max_factor == 0 do\n\
    \    max_factor = max_factor", "    local factor = 1\n    while n ~= 1 do\n  \
    \      factor = factor * 2\n        n = n / factor\n    end\n    return factor\n\
    end", "    local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n\
    \            factor = factor + 1\n        else\n            n = n / factor\n \
    \       end\n    end\n    return factor\nend", "  local factor = 1\n  local i\
    \ = 1\n  while i * factor <= n do\n    factor = factor * i\n    i = i + 1\n  end\n\
    \  return factor\nend", "    local factors = {}\n    for i = 2, n do\n       \
    \ local prime = true\n        for j = 2, i do\n            if n % j == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(factors, i)\n       \
    \ end\n    end\n    return table.max(factors)\nend", "    local factor = 1\n \
    \   while n > 1 do\n        if n % factor == 0 then\n            factor = factor\
    \ * 2\n        else\n            n = n / factor\n        end\n    end\n    return\
    \ factor\nend", "  -- The largest prime factor is n-1.\n  -- The smallest prime\
    \ factor is 2.\n  -- The largest prime factor is less than or equal to sqrt(n).\n\
    \  -- The smallest prime factor is greater than or equal to sqrt(n).\n  -- The\
    \ largest prime factor is less than or equal to sqrt(n).\n  -- The smallest prime\
    \ factor is greater than or equal to sqrt(n).\n  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The smallest prime factor is greater than\
    \ or equal to sqrt(n).\n  -- The largest prime factor is less than or equal to\
    \ sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The smallest prime factor is greater\
    \ than or equal to sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than or equal to sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than or equal to sqrt(n).\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The ", "    local factor = 1\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor * 2\n        end\n    end\n    return factor\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    local largest\
    \ = table.remove(factors)\n    return largest\nend", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        local prime = true\n        for\
    \ j = 2, i do\n            if n % j == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(factors, i)\n        end\n        i = i + 1\n    end\n\
    \    return table.remove(factors)\nend", "    local factors = {}\n    local i\
    \ = 1\n    while i <= n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return n, factors\nend", "    local prime_factor = 1\n    local\
    \ i = 1\n    while i <= n do\n        if n % i == 0 then\n            prime_factor\
    \ = i\n            break\n        end\n        i = i + 1\n    end\n    return\
    \ prime_factor\nend", "  -- The largest prime factor is n-1.\n  -- If n is prime,\
    \ return it.\n  if n <= 1 then return n end\n  -- If n is even, return its largest\
    \ prime factor.\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor plus one.\n  local m = math.floor((math.sqrt(n)\
    \ + 1.0) / 2.0)\n  return largest_prime_factor(m)\nend", "    local factors =\
    \ {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = i\n            n = n / i\n        else\n           \
    \ i = i + 1\n        end\n    end\n    return factors[#factors]\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factor\
    \ = 1\n    while factor <= n do\n        if n % factor == 0 then\n           \
    \ n = n / factor\n        else\n            factor = factor + 1\n        end\n\
    \    end\n    return n\nend", "  local factors = {}\n  local i = 1\n  while i\
    \ <= math.sqrt(n) do\n    local p = primes[i]\n    if n % p == 0 then\n      factors[#factors+1]\
    \ = p\n      n = n / p\n    else\n      i = i + 1\n    end\n  end\n  return factors[#factors]\n\
    end", "    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = i\n            n = n / i\n        else\n\
    \            i = i + 1\n        end\n    end\n    return factor\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "  -- Base case: n is 1 or 2.\n  if n == 1 or n == 2 then\n    return n\n\
    \  else\n    -- Find the largest factor of n that is larger than 1.\n    local\
    \ max_factor = 1\n    for i = 2, n do\n      if n % i == 0 then\n        max_factor\
    \ = i\n      end\n    end\n    -- Return the largest prime factor of n.\n    return\
    \ max_factor\n  end\nend", "  -- The largest prime factor is n-1.\n  -- If n is\
    \ prime, then n-1 is also a prime factor.\n  -- If n is divisible by 2, then n-1\
    \ is also a prime factor.\n  -- If n is divisible by 3, then n-1 is also a prime\
    \ factor.\n  -- If n is divisible by 5, then n-1 is also a prime factor.\n  --\
    \ If n is divisible by 7, then n-1 is also a prime factor.\n  -- If n is divisible\
    \ by 11, then n-1 is also a prime factor.\n  -- If n is divisible by 13, then\
    \ n-1 is also a prime factor.\n  -- If n is divisible by 17, then n-1 is also\
    \ a prime factor.\n  -- If n is divisible by 19, then n-1 is also a prime factor.\n\
    \  -- If n is divisible by 23, then n-1 is also a prime factor.\n  -- If n is\
    \ divisible by 29, then n-1 is also a prime factor.\n  -- If n is divisible by\
    \ 31, then n-1 is also a prime factor.\n  -- If n is divisible by 37, then n-1\
    \ is also a prime factor.\n  -- If n is divisible by 41, then n-1 is also a prime\
    \ factor.\n  -- If n is divisible by 43, then n-1 is also a prime factor.\n  --\
    \ If n is divisible by 47, then n-1 is also a prime factor.\n  -- If n is divisible\
    \ by 53, then n-1 is also a prime factor.\n  -- If n is divisible by 59, then\
    \ n-1 is also a prime factor.\n  -- If n is divisible by 61, then n-1 is also\
    \ a prime factor.\n  -- If n is divisible by 67, then n-1 is also a prime factor.\n\
    \  -- If n is divisible by 73, then n-1 is also a prime factor.\n  -- If n is\
    \ divisible by 79, then n-1 is also a prime factor.\n  -- If n is divisible by\
    \ 83, then n-1 is also a prime factor.\n  -- If n is divisible by 89, then n-1\
    \ is also a prime factor.\n  -- If n is divisible by 97, then n-1 is also a prime\
    \ factor.\n  -- If n is divisible by 101, then n-1 is also a prime factor.\n \
    \ -- If n is ", "    local factors = {}\n    for i = 2, n do\n        local prime\
    \ = true\n        for j = 2, i do\n            if n % j == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(factors, i)\n        end\n    end\n\
    \    return table.max(factors)\nend", "    local factor = 1\n    local i = 1\n\
    \    while i * factor <= n do\n        factor = factor * i\n        i = i + 1\n\
    \    end\n    return factor\nend", "  -- The largest prime factor is n-1\n  local\
    \ max_factor = 1\n  -- The smallest prime factor is 2\n  local min_factor = 2\n\
    \  -- The largest prime factor found so far\n  local max_prime_factor = 1\n  --\
    \ The smallest prime factor found so far\n  local min_prime_factor = 2\n  -- The\
    \ largest prime factor found so far\n  local max_prime_factor_found = 1\n  --\
    \ The smallest prime factor found so far\n  local min_prime_factor_found = 2\n\
    \  -- The largest prime factor found so far\n  local max_prime_factor_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found_found_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found_found_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found_found_found_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found_found_found_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found_found_found_found_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found_found_found_found_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found_found_found_found_found_found_found\
    \ = 2\n  -- The largest prime factor found so far\n  local max_prime_factor_found_found_found_found_found_found_found_found_found_found\
    \ = 1\n  -- The smallest prime factor found so far\n  local min_prime_factor_found_found_found_found_found_found_found_found_found_found\
    \ = 2", "  local factors = {}\n  local i = 1\n  while i <= n do\n    local prime\
    \ = true\n    for j = 2, i do\n      if n % j == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(factors,\
    \ i)\n    end\n    i = i + 1\n  end\n  table.sort(factors)\n  return factors[1]\n\
    end", "  -- If n is prime, return n.\n  if n == 1 then return n end\n  -- If n\
    \ is divisible by 2, return 2.\n  if n % 2 == 0 then return 2 end\n  -- If n is\
    \ divisible by 3, return 3.\n  if n % 3 == 0 then return 3 end\n  -- If n is divisible\
    \ by 5, return 5.\n  if n % 5 == 0 then return 5 end\n  -- If n is divisible by\
    \ 7, return 7.\n  if n % 7 == 0 then return 7 end\n  -- If n is divisible by 11,\
    \ return 11.\n  if n % 11 == 0 then return 11 end\n  -- If n is divisible by 13,\
    \ return 13.\n  if n % 13 == 0 then return 13 end\n  -- If n is divisible by 17,\
    \ return 17.\n  if n % 17 == 0 then return 17 end\n  -- If n is divisible by 19,\
    \ return 19.\n  if n % 19 == 0 then return 19 end\n  -- If n is divisible by 23,\
    \ return 23.\n  if n % 23 == 0 then return 23 end\n  -- If n is divisible by 29,\
    \ return 29.\n  if n % 29 == 0 then return 29 end\n  -- If n is divisible by 31,\
    \ return 31.\n  if n % 31 == 0 then return 31 end\n  -- If n is divisible by 37,\
    \ return 37.\n  if n % 37 == 0 then return 37 end\n  -- If n is divisible by 41,\
    \ return 41.\n  if n % 41 == 0 then return 41 end\n  -- If n is divisible by 43,\
    \ return 43.\n  if n % 43 == 0 then return 43 end\n  -- If n is divisible by 47,\
    \ return 47.\n  if n % 47 == 0 then return 47 end\n  -- If n is divisible by 53,\
    \ return 53.\n  if n % 53 == 0 then return 53 end\n  -- If n is divisible by 59,\
    \ return 59.\n  if n % 59 == 0 then return 59 end\n  -- If n is divisible by 61,\
    \ return 61.\n  if n % 61 == 0 then return 61 end\n  -- If n is divisible by 67,\
    \ return 67.\n  if n % 67 == 0 then return 67 end\n  -- If n is divisible by 71,\
    \ return 71.\n  if n % 71 == 0 then return 71 end\n  -- If n is divisible by 73,\
    \ return 73.\n  if n % 73 == 0 then return 73 end\n  -- If n is divisible by 79,\
    \ return 79.\n", "    local factors = {}\n    local i = 1\n    while i <= n do\n\
    \        local prime = true\n        for j = 2, i do\n            if n % j ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(factors, i)\n  \
    \      end\n        i = i + 1\n    end\n    return table.max(factors)\nend", " \
    \   local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        table.insert(factors, i)\n        end\n    end\n    local largest = table.max(factors)\n\
    \    if largest == n then\n        return largest\n    else\n        return largest\
    \ * largest_prime_factor(largest)\n    end\nend", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "    local factors = {}\n    for i =\
    \ 2, n do\n        local prime = true\n        for j = 2, i do\n            if\
    \ n % j == 0 then\n                prime = false\n                break\n    \
    \        end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            table.insert(factors, i)\n            n = n / i\n        else\n\
    \            i = i + 1\n        end\n    end\n    return n, factors\nend", " \
    \   local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n  \
    \          factor = factor * 2\n        else\n            n = n / factor\n   \
    \     end\n    end\n    return factor\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n        \
    \    factors[i] = i\n            n = n / i\n        else\n            i = i +\
    \ 1\n        end\n    end\n    return factors[#factors]\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "    local factor = 1\n\
    \    while n > 1 do\n        if n % factor == 0 then\n            factor = factor\
    \ * 2\n        else\n            n = n / factor\n        end\n    end\n    return\
    \ factor\nend", "    local factors = {}\n    for i = 2, n do\n        local prime\
    \ = true\n        for j = 2, i do\n            if n % j == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(factors, i)\n        end\n    end\n\
    \    return table.max(factors)\nend", "    local factors = {}\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            table.insert(factors, i)\n   \
    \     end\n    end\n    return table.max(factors)\nend", "    local factor = 1\n\
    \    while n ~= 1 do\n        if n % factor == 0 then\n            factor = factor\
    \ * 2\n        else\n            n = n / factor\n        end\n    end\n    return\
    \ factor\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
