name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is happy\
  \ or not.\n-- A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Your code here\nend", "    local happy = false\n    for i = 1,\
    \ #s do\n        if #s - i >= 3 then\n            if string.sub(s,i,i+3) == string.sub(s,i+1,i+2)\
    \ then\n                happy = true\n            end\n        end\n    end\n\
    \    return happy\nend", "    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i]:byte() == s[i]:byte() then\n            count\
    \ = count + 1\n        else\n            if count >= 3 then\n                happy\
    \ = true\n            end\n            count = 0\n        end\n    end\n    return\
    \ happy\nend", "    -- Your code here\nend", "  -- Your code here\nend", "   \
    \ local happy = false\n    local count = 0\n    for i = 1, #s do\n        if s[i]\
    \ ~= s[count] then\n            happy = true\n        end\n        count = count\
    \ + 1\n    end\n    return happy and count >= 3\nend", "  -- your code here\n\
    end", "  -- Your code here\nend", "  -- Your code here\nend", "    -- your code\
    \ here\nend", "  -- Your code here\nend", "  -- Your code here\n  return true\n\
    end", "    -- your code here\nend", "    -- your code here\nend", "    local happy\
    \ = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] == s[i+1]\
    \ then\n            count = count + 1\n        elseif count == 3 then\n      \
    \      happy = true\n            count = 0\n        end\n    end\n    return happy\n\
    end", "  -- Your code here\nend", "  -- Your code here\nend", "    local happy\
    \ = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i -\
    \ 1] then\n            count = count + 1\n        end\n    end\n    if count >=\
    \ 3 and count == #s then\n        happy = true\n    end\n    return happy\nend",
  "    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] then\n            count = count + 1\n        end\n        if\
    \ count == 3 then\n            happy = true\n            count = 0\n        end\n\
    \    end\n    return happy\nend", "  -- Your code here\nend", "    local happy\
    \ = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count]\
    \ then\n            happy = false\n            break\n        end\n        count\
    \ = count + 1\n    end\n    if count >= 3 then\n        for i = 1, #s do\n   \
    \         if s[i] ~= s[count + 1] then\n                happy = false\n      \
    \          break\n            end\n        end\n    end\n    return happy\nend",
  "  -- your code here\nend", "  -- your code here\nend", "    local happy = false\n\
    \    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n            happy = true\n\
    \        end\n    end\n    return happy\nend", "  -- your code here\nend", " \
    \   local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] == s[i+1] then\n            count = count + 1\n        elseif count ==\
    \ 3 then\n            happy = true\n            count = 0\n        else\n    \
    \        count = 0\n        end\n    end\n    return happy\nend", "    -- your\
    \ code here\nend", "    local happy = false\n    for i = 1, #s do\n        if\
    \ s[i]:sub(1, 3) == s[i]:sub(3, 4) then\n            if s[i]:sub(1, 3) == s[i]:sub(3,\
    \ 4) then\n                if s[i]:sub(1, 3) == s[i]:sub(3, 4) then\n        \
    \            happy = true\n                end\n            end\n        end\n\
    \    end\n    return happy\nend", "  -- your code here\nend", "  -- Your code\
    \ here\n  return true\nend", "  -- your code here\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "    local happy\
    \ = false\n    local count = 0\n    for i = 1, #s do\n        if count == 3 then\n\
    \            count = count + 1\n        else\n            count = count\n    \
    \    end\n        if s[i] ~= s[i - 1] then\n            happy = true\n       \
    \ end\n    end\n    return happy\nend", "    -- your code here\nend", "  -- Your\
    \ code here\nend", "  -- Your code here\n  return true\nend", "  -- your code\
    \ here\nend", "    local happy = false\n    local count = 0\n    for i = 1, #s\
    \ do\n        if s[i]:sub(1,1) == s[i]:sub(2) then\n            count = count\
    \ + 1\n        else\n            if count > 3 then\n                happy = true\n\
    \            end\n            count = 0\n        end\n    end\n    return happy\n\
    end", "  -- your code here\nend", "  -- Your code here\nend", "    -- your code\
    \ here\nend", "  -- Your code here\nend", "  -- Your code here\nend", "  -- your\
    \ code here\nend", "  -- your code here\nend", "  -- your code here\nend", " \
    \ -- your code here\nend", "  -- your code here\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "  -- Your code\
    \ here\nend", "  -- your code here\nend", "  -- Your code here\nend", "  -- Your\
    \ code here\nend", "  -- your code here\nend", "  -- Your code here\n  return\
    \ true\nend", "  -- Your code here\nend", "  -- your code here\nend", "  -- your\
    \ code here\nend", "    local happy = false\n    local count = 0\n    for i =\
    \ 1, #s do\n        if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i -\
    \ 3] then\n            happy = true\n        end\n        count = count + 1\n\
    \    end\n    return happy and count >= 3\nend", "  -- your code here\nend", " \
    \ -- Your code here\nend", "  -- your code here\nend", "  -- Your code here\n\
    end", "    local happy = false\n    local count = 0\n    for i = 1, #s do\n  \
    \      if count == 3 then\n            if s[i]:lower() == s[i+1]:lower() and s[i+2]:lower()\
    \ == s[i+3]:lower() then\n                happy = true\n            end\n    \
    \    else\n            if s[i]:lower() == s[i+1]:lower() then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    return happy\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "    local happy\
    \ = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i -\
    \ 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n            count = count\
    \ + 1\n        end\n    end\n    if count >= 3 then\n        happy = true\n  \
    \  end\n    return happy\nend", "    local happy = false\n    local count = 0\n\
    \    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n            count = count\
    \ + 1\n            if count > 3 then\n                happy = true\n         \
    \   end\n        end\n    end\n    return happy\nend", "  -- your code here\n\
    end", "    -- your code here\nend", "    local happy = false\n    local count\
    \ = 0\n    for i = 1, #s do\n        if s[i]:lower() == s[i]:lower() then\n  \
    \          count = count + 1\n        else\n            if count >= 3 then\n \
    \               happy = true\n            end\n            count = 0\n       \
    \ end\n    end\n    return happy\nend", "  -- your code here\nend", "    local\
    \ happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and s[i] ~=\
    \ s[i - 2] and s[i] ~= s[i - 3] then\n            happy = true\n        end\n\
    \    end\n    return happy\nend", "    -- your code here\nend", "  -- Your code\
    \ here\nend", "    -- your code here\nend", "  -- your code here\nend", "    --\
    \ your code here\nend", "    local happy = false\n    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i\
    \ - 3] then\n            count = count + 1\n        end\n    end\n    if count\
    \ >= 3 then\n        happy = true\n    end\n    return happy\nend", "    local\
    \ happy = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] ==\
    \ s[i - 1] and s[i] == s[i - 2] then\n            count = count + 1\n        elseif\
    \ count == 3 then\n            happy = true\n            count = 0\n        end\n\
    \    end\n    return happy\nend", "    local happy = false\n    for i = 1, #s\
    \ do\n        if s[i] ~= s[i+1] then\n            happy = true\n            break\n\
    \        end\n    end\n    return happy\nend", "    local happy = false\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i]:byte() == s[i]:byte() then\n\
    \            count = count + 1\n        else\n            if count > 0 then\n\
    \                happy = true\n            end\n            count = 0\n      \
    \  end\n    end\n    return happy\nend", "  -- your code here\nend", "  -- Your\
    \ code here\nend", "    local happy = false\n    local count = 0\n    for i =\
    \ 1, #s do\n        if s[i]:lower() == s[i]:lower() then\n            count =\
    \ count + 1\n        else\n            if count > 0 then\n                happy\
    \ = true\n            end\n            count = 0\n        end\n    end\n    return\
    \ happy\nend", "    -- your code here\nend", "  -- Your code here\nend", "   \
    \ local happy = false\n    local count = 0\n    for i = 1, #s do\n        if s[i]\
    \ == s[i - 1] then\n            count = count + 1\n        elseif count == 3 then\n\
    \            happy = true\n            count = 0\n        end\n    end\n    return\
    \ happy\nend", "  -- your code here\nend", "  -- Your code here\nend", "    local\
    \ happy = false\n    local count = 0\n    for i = 1, #s do\n        if s[i]:lower()\
    \ == s[i]:lower() then\n            count = count + 1\n        else\n        \
    \    if count >= 3 then\n                happy = true\n            end\n     \
    \       count = 0\n        end\n    end\n    return happy\nend", "  -- Your code\
    \ here\nend", "    -- your code here\nend", "  -- Your code here\nend", "  --\
    \ your code here\nend", "  -- Your code here\nend", "  -- Your code here\nend",
  "  -- your code here\nend", "  -- your code here\nend", "  -- your code here\nend",
  "  -- Your code here\nend", "  -- Your code here\nend", "  -- Your code here\n \
    \ return true\nend", "  -- your code here\nend", "  -- Your code here\nend", " \
    \   -- your code here\nend", "  -- your code here\nend", "  -- Your code here\n\
    end", "  -- Your code here\nend", "    -- your code here\nend", "  -- your code\
    \ here\nend", "  -- Your code here\nend", "    local happy = false\n    for i\
    \ = 1, #s do\n        if s[i] ~= s[i - 1] then\n            happy = true\n   \
    \         break\n        end\n    end\n    return happy\nend", "  -- Your code\
    \ here\nend", "  -- your code here\nend", "  -- your code here\nend", "    --\
    \ Your code here\nend", "  -- Your code here\nend", "  -- Your code here\nend",
  "  -- Your code here\nend", "  -- Your code here\nend", "    -- your code here\n\
    end", "  -- Your code here\n  return true\nend", "    local happy = false\n  \
    \  local count = 0\n    for i = 1, #s do\n        if s[i] == s[i - 1] and s[i]\
    \ == s[i - 2] then\n            count = count + 1\n        elseif count > 0 and\
    \ count % 3 == 0 then\n            happy = true\n            break\n        end\n\
    \    end\n    return happy\nend", "    -- your code here\nend", "  -- your code\
    \ here\nend", "  -- Your code here\n  return true\nend", "    -- your code here\n\
    end", "  -- Your code here\nend", "  -- your code here\nend", "    local happy\
    \ = false\n    local count = 0\n    for i = 1, #s do\n        if count == 3 then\n\
    \            if s[i]:lower() == s[i+1]:lower() and s[i+2]:lower() == s[i+3]:lower()\
    \ then\n                happy = true\n            end\n        else\n        \
    \    if s[i]:lower() == s[i+1]:lower() then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return happy\nend", "  -- Your code\
    \ here\nend", "  -- your code here\nend", "    local happy = false\n    for i\
    \ = 1, #s do\n        if string.sub(s, i, i+3) == string.sub(s, i+1, i+3) and\
    \ string.sub(s, i+1, i+3) == string.sub(s, i+2, i+3) and string.sub(s, i+2, i+3)\
    \ == string.sub(s, i+3, i+3) then\n            happy = true\n        end\n   \
    \ end\n    return happy\nend", "  -- Your code here\nend", "  -- your code here\n\
    end", "  -- your code here\nend", "  -- your code here\nend", "    -- Your code\
    \ here\nend", "  -- Your code here\nend", "  -- your code here\nend", "  -- Your\
    \ code here\nend", "  -- your code here\nend", "    local happy = false\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i]:byte() == s[i]:byte() then\n\
    \            count = count + 1\n        else\n            if count >= 3 then\n\
    \                happy = true\n            end\n            count = 0\n      \
    \  end\n    end\n    return happy\nend", "  -- your code here\nend", "  -- your\
    \ code here\nend", "    local happy = false\n    local count = 0\n    for i =\
    \ 1, #s do\n        if s[i]:byte() == s[i]:byte() then\n            count = count\
    \ + 1\n        else\n            if count > 0 then\n                happy = true\n\
    \            end\n            count = 0\n        end\n    end\n    return happy\n\
    end", "  -- Your code here\nend", "    local happy = false\n    local count =\
    \ 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n            count\
    \ = count + 1\n        end\n        if count == 3 then\n            happy = true\n\
    \            count = 0\n        end\n    end\n    return happy\nend", "  -- your\
    \ code here\nend", "  -- your code here\nend", "  -- Your code here\nend", " \
    \ -- Your code here\nend", "  -- Your code here\nend", "    local happy = false\n\
    \    for i = 1, #s do\n        if #s - i >= 3 then\n            if s[i - 1] ~=\
    \ s[i - 2] and s[i - 2] ~= s[i - 3] then\n                happy = true\n     \
    \       end\n        end\n    end\n    return happy\nend", "    local happy =\
    \ false\n    local count = 0\n    for i = 1, #s do\n        if s[i]:byte() ==\
    \ s[i]:byte() then\n            count = count + 1\n        else\n            if\
    \ count >= 3 then\n                happy = true\n            end\n           \
    \ count = 0\n        end\n    end\n    return happy\nend", "  -- Your code here\n\
    end", "  -- your code here\nend", "  -- Your code here\nend", "  -- Your code\
    \ here\nend", "  -- your code here\nend", "  -- Your code here\nend", "    local\
    \ happy = false\n    local count = 0\n    for i = 1, #s do\n        if s[i]:byte()\
    \ == s[i] then\n            count = count + 1\n        elseif count == 3 then\n\
    \            happy = true\n            count = 0\n        end\n    end\n    return\
    \ happy\nend", "  -- Your code here\nend", "  -- Your code here\nend", "  -- your\
    \ code here\nend", "  -- your code here\nend", "  -- Your code here\nend", " \
    \ -- your code here\nend", "    -- your code here\nend", "  -- your code here\n\
    end", "    -- your code here\nend", "  -- your code here\nend", "  -- Your code\
    \ here\nend", "    local happy = false\n    local count = 0\n    for i = 1, #s\
    \ do\n        if s[i] == s[i+1] then\n            count = count + 1\n        elseif\
    \ count == 3 then\n            happy = true\n            count = 0\n        end\n\
    \    end\n    return happy\nend", "    -- your code here\nend", "    -- your code\
    \ here\nend", "  -- Your code here\nend", "  -- Your code here\nend", "  -- your\
    \ code here\nend", "  -- Your code here\nend", "    -- your code here\nend", " \
    \ -- your code here\nend", "  -- your code here\nend", "  -- your code here\n\
    end", "    local happy = false\n    local count = 0\n    for i = 1, #s do\n  \
    \      if s[i] == s[i+1] then\n            count = count + 1\n        elseif count\
    \ == 3 then\n            happy = true\n            count = 0\n        end\n  \
    \  end\n    return happy\nend", "    local happy = false\n    local count = 0\n\
    \    for i = 1, #s do\n        if s[i]:byte() == s[i] then\n            count\
    \ = count + 1\n        elseif count == 3 then\n            happy = true\n    \
    \        count = 0\n        end\n    end\n    return happy\nend", "    -- Your\
    \ code here\nend", "    local happy = false\n    local count = 0\n    for i =\
    \ 1, #s do\n        if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i -\
    \ 3] then\n            count = count + 1\n        end\n    end\n    if count >=\
    \ 3 then\n        happy = true\n    end\n    return happy\nend", "    -- your\
    \ code here\nend", "  -- your code here\nend", "  -- your code here\nend", " \
    \   -- your code here\nend", "    local happy = false\n    local count = 0\n \
    \   for i = 1, #s do\n        if count == 3 then\n            if s[i - 1] ~= s[i\
    \ - 2] then\n                happy = false\n            end\n        end\n   \
    \     if s[i - 1] ~= s[i] then\n            happy = false\n        end\n     \
    \   count = count + 1\n    end\n    return happy\nend", "    local happy = false\n\
    \    for i = 1, #s do\n        if s[i] ~= s[i+1] then\n            happy = true\n\
    \            break\n        end\n    end\n    return happy\nend", "  -- your code\
    \ here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
