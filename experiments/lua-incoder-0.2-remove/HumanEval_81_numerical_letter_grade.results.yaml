language: lua
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local grades_table_length = #grades\n    local index = 1\n    local\
    \ current_grade\n    local current_index\n    local current_letter\n    local\
    \ current_grade_index\n    local current_grade\n    local current_letter_index\n\
    \    local current_letter\n    local current_grade_index\n    local current_grade\n\
    \    local current_letter_index\n    local current_letter\n    local current_grade_index\n\
    \    local current_grade\n    local current_letter_index\n    local current_letter\n\
    \    local current_grade_index\n    local current_grade\n    local current_letter_index\n\
    \    local current_letter\n    local current_grade_index\n    local current_grade\n\
    \    local current_letter_index\n    local current_letter\n    local current_grade_index\n\
    \    local current_grade\n    local current_letter_index\n    local current_letter\n\
    \    local current_grade_index\n    local current_grade\n    local current_letter_index\n\
    \    local current_letter\n    local current_grade_index\n    local current_grade\n\
    \    local current_letter_index\n    local current_letter\n    local current_grade_index\n\
    \    local current_grade\n    local current_letter_index\n    local current_letter\n\
    \    local current_grade_index\n    local current_grade\n    local current_letter_index\n\
    \    local current_letter\n    local current_grade_index\n    local current_grade\n\
    \    local current_letter_index\n    local current_letter\n    local current_grade_index\n\
    \    local current_grade\n    local current_letter_index\n    local current_letter\n\
    \    local current_grade_index\n    local current_grade\n    local current_letter_index\n\
    \    local current_letter\n    local current_grade_index\n    local current_grade\n\
    \    local current_letter_index\n    local current_letter\n    local current_grade_index\n\
    \    local current_grade\n    local current_letter_index\n    local current_letter\n\
    \    local current_grade_index\n    local current_grade\n    local current_letter_index\n\
    \    local current_letter\n    local current_grade_index\n    local current_grade\n\
    \    local current_letter_index\n    local current_letter\n    local current_grade_index\n\
    \    local current_grade\n    local current_letter_index\n    local current_letter\n\
    \    local current_grade_index\n    local current_grade\n    local current_letter_index\n\
    \    local current_letter\n    local current_grade_index\n    local current_grade\n\
    \    local current_letter_index\n    local current_letter\n    local current_grade_index\n\
    \    local current_grade\n    local current_letter_index\n    local current_letter\n\
    \    local current_grade_index\n    local current_grade\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9nju41q3.lua:127: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter\n  grades_table[3] = gpa\n  grades_table[4]\
    \ = letter\n  grades_table[5] = gpa\n  grades_table[6] = letter\n  grades_table[7]\
    \ = gpa\n  grades_table[8] = letter\n  grades_table[9] = gpa\n  grades_table[10]\
    \ = letter\n  grades_table[11] = gpa\n  grades_table[12] = letter\n  grades_table[13]\
    \ = gpa\n  grades_table[14] = letter\n  grades_table[15] = gpa\n  grades_table[16]\
    \ = letter\n  grades_table[17] = gpa\n  grades_table[18] = letter\n  grades_table[19]\
    \ = gpa\n  grades_table[20] = letter\n  grades_table[21] = gpa\n  grades_table[22]\
    \ = letter\n  grades_table[23] = gpa\n  grades_table[24] = letter\n  grades_table[25]\
    \ = gpa\n  grades_table[26] = letter\n  grades_table[27] = gpa\n  grades_table[28]\
    \ = letter\n  grades_table[29] = gpa\n  grades_table[30] = letter\n  grades_table[31]\
    \ = gpa\n  grades_table[32] = letter\n  grades_table[33] = gpa\n  grades_table[34]\
    \ = letter\n  grades_table[35] = gpa\n  grades_table[36] = letter\n  grades_table[37]\
    \ = gpa\n  grades_table[38] = letter\n  grades_table[39] = gpa\n  grades_table[40]\
    \ = letter\n  grades_table[41] = gpa\n  grades_table[42] = letter\n  grades_table[43]\
    \ = gpa\n  grades_table[44] = letter\n  grades_table[45] = gpa\n  grades_table[46]\
    \ = letter\n  grades_table[47] = gpa\n  grades_table[48] = letter\n  grades_table[49]\
    \ = gpa\n  grades_table[50] = letter\n  grades_table[51] = gpa\n  grades_table[52]\
    \ = letter\n  grades_table[53] = gpa\n  grades_table[54] = letter\n  grades_table[55]\
    \ = gpa\n  grades_table[56] = letter\n  grades_table[57] = gpa\n  grades_table[58]\
    \ = letter\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphwefoiv8.lua:96: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local letter\
    \ = grade[3]\n    local gpa_table = {\n        4.0,\n        3.7,\n        3.3,\n\
    \        3.0,\n        2.7,\n        2.3,\n        2.0,\n        1.7,\n      \
    \  1.3,\n        1.0,\n        0.7,\n        0.0,\n        0.0\n    }\n    local\
    \ gpa_max = gpa_table[1]\n    local gpa_min = gpa_table[1]\n    local gpa_sum\
    \ = 0\n    local gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum =\
    \ 0\n    local gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum = 0\n\
    \    local gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum = 0\n \
    \   local gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum = 0\n  \
    \  local gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum = 0\n   \
    \ local gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count\
    \ = 0\n    local gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count =\
    \ 0\n    local gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n\
    \    local gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n \
    \   local gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n  \
    \  local gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n   \
    \ local gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local\
    \ gpa_average = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_average\
    \ = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_average =\
    \ 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_average = 0\n\
    \    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_average = 0\n \
    \   local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_average = 0\n  \
    \  local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_average = 0\n   \
    \ local gpa_sum\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq7tq9x7h.lua:116: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = { \n        4.0 =\"A+\",\n        > 3.7 =\"A\",\n        > 3.3 =\"A-\",\n\
    \        > 3.0 =\"B+\",\n        > 2.7 =\"B\",\n        > 2.3 =\"B-\",\n     \
    \   > 2.0 =\"C+\",\n        > 1.7 =\"C\",\n        > 1.3 =\"C-\",\n        > 1.0\
    \ =\"D+\",\n        > 0.7 =\"D\",\n        > 0.0 =\"D-\",\n        0.0 =\"E\"\
    ,\n    }\n    local grades_table2 = { \n        4.0 =\"A+\",\n        > 3.7 =\"\
    A\",\n        > 3.3 =\"A-\",\n        > 3.0 =\"B+\",\n        > 2.7 =\"B\",\n\
    \        > 2.3 =\"B-\",\n        > 2.0 =\"C+\",\n        > 1.7 =\"C\",\n     \
    \   > 1.3 =\"C-\",\n        > 1.0 =\"D+\",\n        > 0.7 =\"D\",\n        > 0.0\
    \ =\"D-\",\n    }\n    local grades_table3 = { \n        4.0 =\"A+\",\n      \
    \  > 3.7 =\"A\",\n        > 3.3 =\"A-\",\n        > 3.0 =\"B+\",\n        > 2.7\
    \ =\"B\",\n        > 2.3 =\"B-\",\n        > 2.0 =\"C+\",\n        > 1.7 =\"C\"\
    ,\n        > 1.3 =\"C-\",\n        > 1.0 =\"D+\",\n        > 0.7 =\"D\",\n   \
    \     > 0.0 =\"D-\",\n    }\n    local grades_table4 = { \n        4.0 =\"A+\"\
    ,\n        > 3.7 =\"A\",\n        > 3.3 =\"A-\",\n        > 3.0 =\"B+\",\n   \
    \     > 2.7 =\"B\",\n        > 2.3 =\"B-\",\n        > 2.0 =\"C+\",\n        >\
    \ 1.7 =\"C\",\n        > 1.3 =\"C-\",\n        > 1.0 =\"D+\",\n        > 0.7 =\"\
    D\",\n        > 0.0 =\"D-\",\n    }\n    local grades_table5 = { \n        4.0\
    \ =\"A+\",\n        > 3.7 =\"A\",\n        > 3.3 =\"A-\",\n        > 3.0 =\"B+\"\
    ,\n        > 2.7 =\"B\",\n        > 2.3 =\"B-\",\n        > 2.0 =\"C+\",\n   \
    \     > 1.7 =\"C\",\n        > 1.3 =\"C-\",\n        > \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplpd7k148.lua:23: ''}'' expected (to close ''{'' at line 22)
    near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = { \n        { 4.0, \"A+\" },\n        { \"> 3.7\", \"A\" },\n        { \"\
    > 3.3\", \"A-\" },\n        { \"> 3.0\", \"B+\" },\n        { \"> 2.7\", \"B\"\
    \ },\n        { \"> 2.3\", \"B-\" },\n        { \"> 2.0\", \"C+\" },\n       \
    \ { \"> 1.7\", \"C\" },\n        { \"> 1.3\", \"C-\" },\n        { \"> 1.0\",\
    \ \"D+\" },\n        { \"> 0.7\", \"D\" },\n        { \"> 0.0\", \"D-\" },\n \
    \       { 0.0, \"E\" },\n    }\n    local grades_table_length = #grades_table\n\
    \    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfamzol4e.lua:82: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    grades_table[3] = gpa\n    grades_table[4]\
    \ = letter\n    grades_table[5] = gpa\n    grades_table[6] = letter\n    grades_table[7]\
    \ = gpa\n    grades_table[8] = letter\n    grades_table[9] = gpa\n    grades_table[10]\
    \ = letter\n    grades_table[11] = gpa\n    grades_table[12] = letter\n    grades_table[13]\
    \ = gpa\n    grades_table[14] = letter\n    grades_table[15] = gpa\n    grades_table[16]\
    \ = letter\n    grades_table[17] = gpa\n    grades_table[18] = letter\n    grades_table[19]\
    \ = gpa\n    grades_table[20] = letter\n    grades_table[21] = gpa\n    grades_table[22]\
    \ = letter\n    grades_table[23] = gpa\n    grades_table[24] = letter\n    grades_table[25]\
    \ = gpa\n    grades_table[26] = letter\n    grades_table[27] = gpa\n    grades_table[28]\
    \ = letter\n    grades_table[29] = gpa\n    grades_table[30] = letter\n    grades_table[31]\
    \ = gpa\n    grades_table[32] = letter\n    grades_table[33] = gpa\n    grades_table[34]\
    \ = letter\n    grades_table[35] = gpa\n    grades_table[36] = letter\n    grades_table[37]\
    \ = gpa\n    grades_table[38] = letter\n    grades_table[39] = gpa\n    grades_table[40]\
    \ = letter\n    grades_table[41] = gpa\n    grades_table[42] = letter\n    grades_table[43]\
    \ = gpa\n    grades_table[44] = letter\n    grades_table[45] = gpa\n    grades_table[46]\
    \ = letter\n    grades_table[47] = gpa\n    grades_table[48] = letter\n    grades_table[49]\
    \ = gpa\n    grades_table[50] = letter\n    grades_table[51] = gpa\n    grades_table[52]\
    \ = letter\n    grades_table[53] = gpa\n    grades_table[54] = letter\n    grades_table[55]\
    \ = gpa\n    grades_table[56] = letter\n    grades_table[57] = gpa\n    grades_table[58]\
    \ = letter\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8m_qzcss.lua:96: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in ipairs(grades) do\n   \
    \     grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter_grade\n\
    \    if grades_average >= 4.0 then\n        grades_letter_grade = 'A+'\n    elseif\
    \ grades_average >= 3.7 then\n        grades_letter_grade = 'A'\n    elseif grades_average\
    \ >= 3.3 then\n        grades_letter_grade = 'A-'\n    elseif grades_average >=\
    \ 3.0 then\n        grades_letter_grade = 'B+'\n    elseif grades_average >= 2.7\
    \ then\n        grades_letter_grade = 'B'\n    elseif grades_average >= 2.3 then\n\
    \        grades_letter_grade = 'B-'\n    elseif grades_average >= 2.0 then\n \
    \       grades_letter_grade = 'C+'\n    elseif grades_average >= 1.7 then\n  \
    \      grades_letter_grade = 'C'\n    elseif grades_average >= 1.3 then\n    \
    \    grades_letter_grade = 'C-'\n    elseif grades_average >= 1.0 then\n     \
    \   grades_letter_grade = 'D+'\n    elseif grades_average >= 0.7 then\n      \
    \  grades_letter_grade = 'D'\n    elseif grades_average >= 0.0 then\n        grades_letter_grade\
    \ = 'D-'\n    else\n        grades_letter_grade = 'E'\n    end\n    return grades_letter_grade\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpee2gour0.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpee2gour0.lua:63: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for i = 1, #grades do\n        local grade\
    \ = grades[i]\n        if grade ~= nil then\n            grades_sum = grades_sum\
    \ + grade\n            grades_count = grades_count + 1\n        end\n    end\n\
    \    if grades_count > 0 then\n        grades_sum = grades_sum / grades_count\n\
    \    end\n    local grades_letter = nil\n    if grades_sum >= 4.0 then\n     \
    \   grades_letter = \"A+\"\n    elseif grades_sum >= 3.7 then\n        grades_letter\
    \ = \"A\"\n    elseif grades_sum >= 3.3 then\n        grades_letter = \"A-\"\n\
    \    elseif grades_sum >= 3.0 then\n        grades_letter = \"B+\"\n    elseif\
    \ grades_sum >= 2.7 then\n        grades_letter = \"B\"\n    elseif grades_sum\
    \ >= 2.3 then\n        grades_letter = \"B-\"\n    elseif grades_sum >= 2.0 then\n\
    \        grades_letter = \"C+\"\n    elseif grades_sum >= 1.7 then\n        grades_letter\
    \ = \"C\"\n    elseif grades_sum >= 1.3 then\n        grades_letter = \"C-\"\n\
    \    elseif grades_sum >= 1.0 then\n        grades_letter = \"D+\"\n    elseif\
    \ grades_sum >= 0.7 then\n        grades_letter = \"D\"\n    elseif grades_sum\
    \ >= 0.0 then\n        grades_letter = \"D-\"\n    else\n        grades_letter\
    \ = \"E\"\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafu17i5k.lua:68:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmpafu17i5k.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_array\
    \ = string.split(grades, \",\")\n    local grades_array_length = #grades_array\n\
    \    local grades_array_average = grades_array_length / 2\n    local grades_array_average\
    \ = math.floor(grades_array_average)\n    local grades_array_average = grades_array_average\
    \ + 1\n    local grades_array_average = grades_array_average * 4\n    local grades_array_average\
    \ = grades_array_average / 2\n    local grades_array_average = math.floor(grades_array_average)\n\
    \    local grades_array_average = grades_array_average + 1\n    local grades_array_average\
    \ = grades_array_average * 4\n    local grades_array_average = grades_array_average\
    \ / 2\n    local grades_array_average = math.floor(grades_array_average)\n   \
    \ local grades_array_average = grades_array_average + 1\n    local grades_array_average\
    \ = grades_array_average * 4\n    local grades_array_average = grades_array_average\
    \ / 2\n    local grades_array_average = math.floor(grades_array_average)\n   \
    \ local grades_array_average = grades_array_average + 1\n    local grades_array_average\
    \ = grades_array_average * 4\n    local grades_array_average = grades_array_average\
    \ / 2\n    local grades_array_average = math.floor(grades_array_average)\n   \
    \ local grades_array_average = grades_array_average + 1\n    local grades_array_average\
    \ = grades_array_average * 4\n    local grades_array_average = grades_array_average\
    \ / 2\n    local grades_array_average = math.floor(grades_array_average)\n   \
    \ local grades_array_average = grades_array_average + 1\n    local grades_array_average\
    \ = grades_array_average * 4\n    local grades_array_average = grades_array_average\
    \ / 2\n    local grades_array_average = math.floor(grades_array_average)\n   \
    \ local grades_array_average = grades_array_average + 1\n    local grades_array_average\
    \ = grades_array_average * 4\n    local grades_array_average = grades_array_average\
    \ / 2\n    local grades_array_average = math.floor(grades_array_average)\n   \
    \ local grades_array_average = grades_array_average + 1\n    local grades_array_average\
    \ = grades_array_average * 4\n    local grades_array_average = grades_array_average\
    \ / 2\n    local grades_array_average = math.floor(grades_array_average)\n   \
    \ local grades_array_average = grades_array_average + 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl7ku54__.lua:71: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local i = 0\n  while i < #grades do\n    local gpa = grades[i]\n   \
    \ local letter = nil\n    if gpa > 3.0 then\n      letter = 'A+'\n    elseif gpa\
    \ > 2.7 then\n      letter = 'A'\n    elseif gpa > 2.3 then\n      letter = 'A-'\n\
    \    elseif gpa > 2.0 then\n      letter = 'B+'\n    elseif gpa > 1.7 then\n \
    \     letter = 'B'\n    elseif gpa > 1.3 then\n      letter = 'B-'\n    elseif\
    \ gpa > 1.0 then\n      letter = 'C+'\n    elseif gpa > 0.7 then\n      letter\
    \ = 'C'\n    elseif gpa > 0.3 then\n      letter = 'C-'\n    elseif gpa > 0.0\
    \ then\n      letter = 'D+'\n    elseif gpa > -0.7 then\n      letter = 'D'\n\
    \    elseif gpa > -0.3 then\n      letter = 'D-'\n    elseif gpa > -0.0 then\n\
    \      letter = 'E'\n    end\n    grades_table[i] = letter\n    i = i + 1\n  end\n\
    \  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaafdl16b.lua:27:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpaafdl16b.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpaafdl16b.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  local gpa_table\
    \ = { 4.0, \"A+\", > 3.7, \"A\", > 3.3, \"A-\", > 3.0, \"B+\", > 2.7, \"B\", >\
    \ 2.3, \"B-\", > 2.0, \"C+\", > 1.7, \"C\", > 1.3, \"C-\", > 1.0, \"D+\", > 0.7,\
    \ \"D\", > 0.0, \"D-\", 0.0 }\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n  local\
    \ gpa_table_length = #g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3dnxzx6i.lua:25: unexpected symbol near ''>''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = { \n      { 4.0, \"A+\" },\n      { 3.7, \"A\" },\n      { 3.3, \"A-\" },\n\
    \      { 3.0, \"B+\" },\n      { 2.7, \"B\" },\n      { 2.3, \"B-\" },\n     \
    \ { 2.0, \"C+\" },\n      { 1.7, \"C\" },\n      { 1.3, \"C-\" },\n      { 1.0,\
    \ \"D+\" },\n      { 0.7, \"D\" },\n      { 0.0, \"D-\" },\n      { 0.0, \"E\"\
    \ }\n   }\n   local grades_table_length = #grades_table\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp58f4x586.lua:83: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = { \n      4.0 =  'A+',\n      3.7 =  'A',\n      3.3 =  'A-',\n      3.0 =\
    \  'B+',\n      2.7 =  'B',\n      2.3 =  'B-',\n      2.0 =  'C+',\n      1.7\
    \ = 'C',\n      1.3 =  'C-',\n      1.0 =  'D+',\n      0.7 = 'D',\n      0.0\
    \ =  'D-',\n      0.0 =  'E',\n   }\n   local grades_table_length = #grades_table\n\
    \   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\
    \ + 1\n   local grades_table_length = grades_table_length + 1\n   local grades_table_length\
    \ = grades_table_length + 1\n   local grades_table_length = grades_table_length\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnk2fr7pp.lua:23: ''}'' expected (to close ''{'' at line 22)
    near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz2tbfcfd.lua:85: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      local gpa = grades[i]\n      local letter\
    \ = nil\n      if gpa > 3.0 then\n         letter = 'A+'\n      elseif gpa > 2.7\
    \ then\n         letter = 'A'\n      elseif gpa > 2.0 then\n         letter =\
    \ 'B+'\n      elseif gpa > 1.7 then\n         letter = 'B'\n      elseif gpa >\
    \ 1.3 then\n         letter = 'B-'\n      elseif gpa > 1.0 then\n         letter\
    \ = 'C+'\n      elseif gpa > 0.7 then\n         letter = 'C'\n      elseif gpa\
    \ > 0.3 then\n         letter = 'C-'\n      elseif gpa > 0.0 then\n         letter\
    \ = 'D+'\n      elseif gpa > -0.3 then\n         letter = 'D'\n      elseif gpa\
    \ > -0.7 then\n         letter = 'D-'\n      elseif gpa > -1.0 then\n        \
    \ letter = 'E'\n      else\n         letter = 'F'\n      end\n      grades_table[i]\
    \ = letter\n   end\n   return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3t5vo4m.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A\", \"\
    B-\", \"B\", \"A+\"}\nstack traceback:\n\t/tmp/tmpa3t5vo4m.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        local\
    \ gpa = grade:match(\"^(-?[%d]+.?[%d]+)(.?)$\")\n        local letter_grade\n\
    \        if gpa then\n            letter_grade = \"A+\"\n            if gpa:match(\"\
    ^(-?[%d]+.?[%d]+)(.?)$\") then\n                letter_grade = \"A\"\n       \
    \     elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\") then\n                letter_grade\
    \ = \"A-\"\n            elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\") then\n  \
    \              letter_grade = \"B+\"\n            elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\"\
    ) then\n                letter_grade = \"B\"\n            elseif gpa:match(\"\
    ^(-?[%d]+.?[%d]+)(.?)$\") then\n                letter_grade = \"B-\"\n      \
    \      elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\") then\n                letter_grade\
    \ = \"C+\"\n            elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\") then\n  \
    \              letter_grade = \"C\"\n            elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\"\
    ) then\n                letter_grade = \"C-\"\n            elseif gpa:match(\"\
    ^(-?[%d]+.?[%d]+)(.?)$\") then\n                letter_grade = \"D+\"\n      \
    \      elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\") then\n                letter_grade\
    \ = \"D\"\n            elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\") then\n   \
    \             letter_grade = \"D-\"\n            elseif gpa:match(\"^(-?[%d]+.?[%d]+)(.?)$\"\
    ) then\n                letter_grade = \"E\"\n            end\n        else\n\
    \            letter_grade = \"E\"\n        end\n        grades_table[i] = letter_grade\n\
    \    end\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04s3fu2k.lua:25:\
    \ attempt to index a number value (local 'grade')\nstack traceback:\n\t/tmp/tmp04s3fu2k.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp04s3fu2k.lua:65: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local grade = grades[2]\n  grades_table[gpa]\
    \ = grade\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8144dqy.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmp_8144dqy.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  local grades_table\
    \ = {gpa, letter}\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9er0yjy7.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3}\nstack traceback:\n\
    \t/tmp/tmp9er0yjy7.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local gpa = grades[i]\n    local letter =\
    \ nil\n    if gpa > 4.0 then\n      letter = 'A+'\n    elseif gpa > 3.7 then\n\
    \      letter = 'A'\n    elseif gpa > 3.3 then\n      letter = 'A-'\n    elseif\
    \ gpa > 3.0 then\n      letter = 'B+'\n    elseif gpa > 2.7 then\n      letter\
    \ = 'B'\n    elseif gpa > 2.3 then\n      letter = 'B-'\n    elseif gpa > 2.0\
    \ then\n      letter = 'C+'\n    elseif gpa > 1.7 then\n      letter = 'C'\n \
    \   elseif gpa > 1.3 then\n      letter = 'C-'\n    elseif gpa > 1.0 then\n  \
    \    letter = 'D+'\n    elseif gpa > 0.7 then\n      letter = 'D'\n    elseif\
    \ gpa > 0.0 then\n      letter = 'D-'\n    else\n      letter = 'E'\n    end\n\
    \    table.insert(grades_table, gpa, letter)\n  end\n  return grades_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhtf2xf2.lua:53:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpzhtf2xf2.lua:53:\
    \ in local 'candidate'\n\t/tmp/tmpzhtf2xf2.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      local gpa = grades[i]\n      local letter_grade\n\
    \      if gpa > 3.0 then\n         letter_grade = 'A+'\n      elseif gpa > 2.7\
    \ then\n         letter_grade = 'A'\n      elseif gpa > 2.3 then\n         letter_grade\
    \ = 'A-'\n      elseif gpa > 2.0 then\n         letter_grade = 'B+'\n      elseif\
    \ gpa > 1.7 then\n         letter_grade = 'B'\n      elseif gpa > 1.3 then\n \
    \        letter_grade = 'B-'\n      elseif gpa > 1.0 then\n         letter_grade\
    \ = 'C+'\n      elseif gpa > 0.7 then\n         letter_grade = 'C'\n      elseif\
    \ gpa > 0.3 then\n         letter_grade = 'C-'\n      elseif gpa > 0.0 then\n\
    \         letter_grade = 'D+'\n      elseif gpa > -0.3 then\n         letter_grade\
    \ = 'D'\n      elseif gpa > -0.7 then\n         letter_grade = 'D-'\n      elseif\
    \ gpa > -1.0 then\n         letter_grade = 'E'\n      else\n         letter_grade\
    \ = 'F'\n      end\n      grades_table[i] = {gpa, letter_grade}\n   end\n   return\
    \ grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqoak157.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"A+\"}, {3,\
    \ \"A\"}, {1.7, \"B-\"}, {2, \"B\"}, {3.5, \"A+\"}}\nstack traceback:\n\t/tmp/tmpbqoak157.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz2tbfcfd.lua:85: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = { \n        4.0, \n        { 4.0, A+},\n        { 3.7, A },\n        { 3.3,\
    \ A- },\n        { 3.0, B+},\n        { 2.7, B },\n        { 2.3, B-},\n     \
    \   { 2.0, C+},\n        { 1.7, C },\n        { 1.3, C-},\n        { 1.0, D+ },\n\
    \        { 0.7, D },\n        { 0.0, D-},\n        0.0\n    }\n    local grades_table_length\
    \ = #grades_table\n    local grades_table_length = grades_table_length + 1\n \
    \   local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grades_table_length = grades_table_length\
    \ + 1\n    local grades_table_length = grades_table_length + 1\n    local grades_table_length\
    \ = grades_table_length + 1\n    local grade\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6xg2ffqm.lua:24: unexpected symbol near ''}''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {}\n        grades_table[i][1]\
    \ = grades[i]\n        grades_table[i][2] = grades[i]\n        grades_table[i][3]\
    \ = grades[i]\n        grades_table[i][4] = grades[i]\n        grades_table[i][5]\
    \ = grades[i]\n        grades_table[i][6] = grades[i]\n        grades_table[i][7]\
    \ = grades[i]\n        grades_table[i][8] = grades[i]\n        grades_table[i][9]\
    \ = grades[i]\n        grades_table[i][10] = grades[i]\n        grades_table[i][11]\
    \ = grades[i]\n        grades_table[i][12] = grades[i]\n        grades_table[i][13]\
    \ = grades[i]\n        grades_table[i][14] = grades[i]\n        grades_table[i][15]\
    \ = grades[i]\n        grades_table[i][16] = grades[i]\n        grades_table[i][17]\
    \ = grades[i]\n        grades_table[i][18] = grades[i]\n        grades_table[i][19]\
    \ = grades[i]\n        grades_table[i][20] = grades[i]\n        grades_table[i][21]\
    \ = grades[i]\n        grades_table[i][22] = grades[i]\n        grades_table[i][23]\
    \ = grades[i]\n        grades_table[i][24] = grades[i]\n        grades_table[i][25]\
    \ = grades[i]\n        grades_table[i][26] = grades[i]\n        grades_table[i][27]\
    \ = grades[i]\n        grades_table[i][28] = grades[i]\n        grades_table[i][29]\
    \ = grades[i]\n        grades_table[i][30] = grades[i]\n        grades_table[i][31]\
    \ = grades[i]\n        grades_table[i][32] = grades[i]\n        grades_table[i][33]\
    \ = grades[i]\n        grades_table[i][34] = grades[i]\n        grades_table[i][35]\
    \ = grades[i]\n        grades_table[i][36] = grades[i]\n        grades_table[i][37]\
    \ = grades[i]\n        grades_table[i][38] = grades[i]\n        grades_table[i][39]\
    \ = grades[i]\n        grades_table[i][40] = grades[i]\n        grades_table[i][41]\
    \ = grades[i]\n        grades_table[i][42] = grades[i]\n        grades_table[i][43]\
    \ = grades[i]\n        grades_table[i][44] = grades[i]\n        grades_table[i][45]\
    \ = grades[i]\n        grades_table[i][46] = grades[i]\n        grades_table[i][47]\
    \ = grades[i]\n        grades_table[i][48] = grades[i]\n        grades_table[i][49]\
    \ = grades[i]\n        grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_cldmimb.lua:75: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table[1]\
    \ = gpa\n    grades_table[2] = grade\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpriqkasd6.lua:25: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local index = 1\n    for i = 1, #grades do\n        grades_table[index]\
    \ = grades[i]\n        index = index + 1\n    end\n    local grades_table_sorted\
    \ = {}\n    for i = 1, #grades_table do\n        grades_table_sorted[i] = grades_table[i]\n\
    \    end\n    local grades_table_sorted_sorted = {}\n    for i = 1, #grades_table_sorted\
    \ do\n        grades_table_sorted_sorted[i] = grades_table_sorted[i]\n    end\n\
    \    local grades_table_sorted_sorted_sorted = {}\n    for i = 1, #grades_table_sorted_sorted\
    \ do\n        grades_table_sorted_sorted_sorted[i] = grades_table_sorted_sorted[i]\n\
    \    end\n    local grades_table_sorted_sorted_sorted_sorted = {}\n    for i =\
    \ 1, #grades_table_sorted_sorted_sorted do\n        grades_table_sorted_sorted_sorted_sorted[i]\
    \ = grades_table_sorted_sorted_sorted[i]\n    end\n    local grades_table_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted do\n        grades_table_sorted_sorted_sorted_sorted_sorted[i]\
    \ = grades_table_sorted_sorted_sorted_sorted[i]\n    end\n    local grades_table_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted_sorted do\n \
    \       grades_table_sorted_sorted_sorted_sorted_sorted_sorted[i] = grades_table_sorted_sorted_sorted_sorted_sorted[i]\n\
    \    end\n    local grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted_sorted_sorted\
    \ do\n        grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted[i]\
    \ = grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted[i]\n    end\n\
    \    local grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ do\n        grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted[i]\
    \ = grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted[i]\n\
    \    end\n    local grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ do\n        grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted[i]\
    \ = grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted[i]\n\
    \    end\n    local grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ do\n        grades_table_sorted_sorted_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmik0h1yd.lua:67: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\n    local grades_average = grades_average\n    local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz2tbfcfd.lua:85: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local gpa = grades[i]\n    local letter =\
    \ nil\n    if gpa > 0 then\n      if gpa > 3.0 then\n        letter = 'A+'\n \
    \     elseif gpa > 2.7 then\n        letter = 'A'\n      elseif gpa > 2.3 then\n\
    \        letter = 'A-'\n      elseif gpa > 2.0 then\n        letter = 'B+'\n \
    \     elseif gpa > 1.7 then\n        letter = 'B'\n      elseif gpa > 1.3 then\n\
    \        letter = 'B-'\n      elseif gpa > 1.0 then\n        letter = 'C+'\n \
    \     elseif gpa > 0.7 then\n        letter = 'C'\n      elseif gpa > 0.3 then\n\
    \        letter = 'C-'\n      elseif gpa > 0.0 then\n        letter = 'D+'\n \
    \     elseif gpa > -0.7 then\n        letter = 'D'\n      elseif gpa > -0.3 then\n\
    \        letter = 'D-'\n      elseif gpa > -0.0 then\n        letter = 'E'\n \
    \     end\n    end\n    grades_table[i] = letter\n  end\n  return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46uhsfj7.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A\", \"\
    B-\", \"B\", \"A+\"}\nstack traceback:\n\t/tmp/tmp46uhsfj7.lua:63: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = { }\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[gpa]\
    \ = letter\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4htln44b.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmp4htln44b.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local grade = grades[2]\n  local letter_grade\n\
    \  \n  if gpa > 4.0 then\n    letter_grade = 'A+'\n  elseif gpa > 3.7 then\n \
    \   letter_grade = 'A'\n  elseif gpa > 3.3 then\n    letter_grade = 'A-'\n  elseif\
    \ gpa > 3.0 then\n    letter_grade = 'B+'\n  elseif gpa > 2.7 then\n    letter_grade\
    \ = 'B'\n  elseif gpa > 2.3 then\n    letter_grade = 'B-'\n  elseif gpa > 2.0\
    \ then\n    letter_grade = 'C+'\n  elseif gpa > 1.7 then\n    letter_grade = 'C'\n\
    \  elseif gpa > 1.3 then\n    letter_grade = 'C-'\n  elseif gpa > 1.0 then\n \
    \   letter_grade = 'D+'\n  elseif gpa > 0.7 then\n    letter_grade = 'D'\n  elseif\
    \ gpa > 0.0 then\n    letter_grade = 'D-'\n  else\n    letter_grade = 'E'\n  end\n\
    \  \n  grades_table[1] = gpa\n  grades_table[2] = letter_grade\n  return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm2jc7ji.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, \"A\"}\nstack\
    \ traceback:\n\t/tmp/tmpnm2jc7ji.lua:63: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68jsyoik.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp68jsyoik.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  \n  -- If the GPA\
    \ is less than 3.0 then it is an E\n  if gpa < 3.0 then\n    grades_table[1] =\
    \ letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 3.0 and\
    \ 3.7 then it is an A\n  if gpa >= 3.0 and gpa <= 3.7 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 3.7\
    \ and 3.3 then it is an A-\n  if gpa >= 3.7 and gpa <= 3.3 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 3.3\
    \ and 3.0 then it is an B+\n  if gpa >= 3.3 and gpa <= 3.0 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 2.7\
    \ and 2.3 then it is an B\n  if gpa >= 2.7 and gpa <= 2.3 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 2.3\
    \ and 2.0 then it is an B-\n  if gpa >= 2.3 and gpa <= 2.0 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 1.7\
    \ and 1.3 then it is an C+\n  if gpa >= 1.7 and gpa <= 1.3 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 1.3\
    \ and 1.0 then it is an C\n  if gpa >= 1.3 and gpa <= 1.0 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 0.7\
    \ and 1.0 then it is an D+\n  if gpa >= 0.7 and gpa <= 1.0 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is between 0.0\
    \ and 0.0 then it is an D\n  if gpa >= 0.0 and gpa <= 0.0 then\n    grades_table[1]\
    \ = letter\n    return grades_table\n  end\n  \n  -- If the GPA is less than 0.0\
    \ then it is an E\n  grades_table[1] = letter\n  return grades_table\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93881c81.lua:94:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {3}\nstack traceback:\n\
    \t/tmp/tmp93881c81.lua:94: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 0
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter = nil\n        if gpa >= 4.0 then\n            letter = 'A+'\n      \
    \  elseif gpa > 3.7 then\n            letter = 'A'\n        elseif gpa > 3.3 then\n\
    \            letter = 'A-'\n        elseif gpa > 3.0 then\n            letter\
    \ = 'B+'\n        elseif gpa > 2.7 then\n            letter = 'B'\n        elseif\
    \ gpa > 2.3 then\n            letter = 'B-'\n        elseif gpa > 2.0 then\n \
    \           letter = 'C+'\n        elseif gpa > 1.7 then\n            letter =\
    \ 'C'\n        elseif gpa > 1.3 then\n            letter = 'C-'\n        elseif\
    \ gpa > 1.0 then\n            letter = 'D+'\n        elseif gpa > 0.7 then\n \
    \           letter = 'D'\n        elseif gpa > 0.0 then\n            letter =\
    \ 'D-'\n        else\n            letter = 'E'\n        end\n        table.insert(grades_table,\
    \ letter)\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa =\
    \ grade[1]\n    local letter = grade[2]\n    grades_table[i] = {gpa, letter}\n\
    \  end\n  local max_gpa = grades_table[1][1]\n  local max_letter = grades_table[1][2]\n\
    \  local min_gpa = grades_table[1][1]\n  local min_letter = grades_table[1][2]\n\
    \  for i = 2, #grades_table do\n    if grades_table[i][1] > max_gpa then\n   \
    \   max_gpa = grades_table[i][1]\n      max_letter = grades_table[i][2]\n    end\n\
    \    if grades_table[i][1] < min_gpa then\n      min_gpa = grades_table[i][1]\n\
    \      min_letter = grades_table[i][2]\n    end\n  end\n  local grades_table =\
    \ {}\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa = grade[1]\n\
    \    local letter = grade[2]\n    grades_table[i] = {gpa, letter}\n  end\n  local\
    \ max_gpa = grades_table[1][1]\n  local max_letter = grades_table[1][2]\n  local\
    \ min_gpa = grades_table[1][1]\n  local min_letter = grades_table[1][2]\n  for\
    \ i = 2, #grades_table do\n    if grades_table[i][1] > max_gpa then\n      max_gpa\
    \ = grades_table[i][1]\n      max_letter = grades_table[i][2]\n    end\n    if\
    \ grades_table[i][1] < min_gpa then\n      min_gpa = grades_table[i][1]\n    \
    \  min_letter = grades_table[i][2]\n    end\n  end\n  local grades_table = {}\n\
    \  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa = grade[1]\n\
    \    local letter = grade[2]\n    grades_table[i] = {gpa, letter}\n  end\n  local\
    \ max_gpa = grades_table[1][1]\n  local max_letter = grades_table[1][2]\n  local\
    \ min_gpa = grades_table[1][1]\n  local min_letter = grades_table[1][2]\n  for\
    \ i = 2, #grades_table do\n    if grades_table[i][1] > max_gpa then\n      max_gpa\
    \ = grades_table[i][1]\n      max_letter = grades_table[i][2]\n    end\n    if\
    \ grades_table[i][1] < min_gpa then\n      min_g\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp58bke0pl.lua:82: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local letter\
    \ = grade[3]\n    grades_table[gpa] = letter\n    return grades_table\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9366rmxq.lua:25:\
    \ attempt to index a number value (local 'grade')\nstack traceback:\n\t/tmp/tmp9366rmxq.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp9366rmxq.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0 }\n   local grades_table_length\
    \ = #grades_table\n   local grades_table_max = grades_table_length - 1\n   local\
    \ grades_table_min = grades_table_length\n   local grades_table_average = grades_table_length\
    \ / 2\n   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_table_length\n\
    \   local grades_table_average = grades_table_average * grades_table_length\n\
    \   local grades_table_average = grades_table_average / grades_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3ozdwmwq.lua:65: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter\n  if gpa > 3.0 then\n    grades_table[3]\
    \ = \"A+\"\n  elseif gpa > 2.7 then\n    grades_table[3] = \"A\"\n  elseif gpa\
    \ > 2.0 then\n    grades_table[3] = \"B+\"\n  elseif gpa > 1.7 then\n    grades_table[3]\
    \ = \"B\"\n  elseif gpa > 1.0 then\n    grades_table[3] = \"B-\"\n  elseif gpa\
    \ > 0.7 then\n    grades_table[3] = \"C+\"\n  elseif gpa > 0.3 then\n    grades_table[3]\
    \ = \"C\"\n  elseif gpa > 0.0 then\n    grades_table[3] = \"C-\"\n  elseif gpa\
    \ > 0.0 then\n    grades_table[3] = \"D+\"\n  elseif gpa > 0.0 then\n    grades_table[3]\
    \ = \"D\"\n  else\n    grades_table[3] = \"D-\"\n  end\n  if gpa > 0.0 then\n\
    \    grades_table[4] = \"E\"\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe1x0po6.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3, \"A+\", \"\
    E\"}\nstack traceback:\n\t/tmp/tmppe1x0po6.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    grades_table[gpa]\
    \ = grade\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66qx4kgo.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmp66qx4kgo.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local grades_table_length = #grades\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_average = 0\n    local gpa_sum2 = 0\n    local\
    \ gpa_count2 = 0\n    local gpa_average2 = 0\n    local gpa_sum3 = 0\n    local\
    \ gpa_count3 = 0\n    local gpa_average3 = 0\n    local gpa_sum4 = 0\n    local\
    \ gpa_count4 = 0\n    local gpa_average4 = 0\n    local gpa_sum5 = 0\n    local\
    \ gpa_count5 = 0\n    local gpa_average5 = 0\n    local gpa_sum6 = 0\n    local\
    \ gpa_count6 = 0\n    local gpa_average6 = 0\n    local gpa_sum7 = 0\n    local\
    \ gpa_count7 = 0\n    local gpa_average7 = 0\n    local gpa_sum8 = 0\n    local\
    \ gpa_count8 = 0\n    local gpa_average8 = 0\n    local gpa_sum9 = 0\n    local\
    \ gpa_count9 = 0\n    local gpa_average9 = 0\n    local gpa_sum10 = 0\n    local\
    \ gpa_count10 = 0\n    local gpa_average10 = 0\n    local gpa_sum11 = 0\n    local\
    \ gpa_count11 = 0\n    local gpa_average11 = 0\n    local gpa_sum12 = 0\n    local\
    \ gpa_count12 = 0\n    local gpa_average12 = 0\n    local gpa_sum13 = 0\n    local\
    \ gpa_count13 = 0\n    local gpa_average13 = 0\n    local gpa_sum14 = 0\n    local\
    \ gpa_count14 = 0\n    local gpa_average14 = 0\n    local gpa_sum15 = 0\n    local\
    \ gpa_count15 = 0\n    local gpa_average15 = 0\n    local gpa_sum16 = 0\n    local\
    \ gpa_count16 = 0\n    local gpa_average16 = 0\n    local gpa_sum17 = 0\n    local\
    \ gpa_count17 = 0\n    local gpa_average17 = 0\n    local gpa_sum18 = 0\n    local\
    \ gpa_count18 = 0\n    local gpa_average18 = 0\n    local gpa_sum19 = 0\n    local\
    \ gpa_count19 = 0\n    local gpa_average19 = 0\n    local gpa_sum20 = 0\n    local\
    \ gpa_count20 = 0\n    local gpa_average20 = 0\n    local gpa_sum21 = 0\n    local\
    \ gpa_count21 = 0\n    local g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi9b2yr57.lua:99: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local index = 1\n  for _, grade in ipairs(grades) do\n    grades_table[index]\
    \ = grade\n    index = index + 1\n  end\n  local grades_table_sorted = {}\n  for\
    \ i = 1, #grades_table do\n    grades_table_sorted[i] = grades_table[i]\n  end\n\
    \  table.sort(grades_table_sorted)\n  local grades_string = \"\"\n  for _, grade\
    \ in ipairs(grades_table_sorted) do\n    grades_string = grades_string .. grade\n\
    \  end\n  return grades_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwayb6h3.lua:43:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"1.7233.54.0\"\n\
    stack traceback:\n\t/tmp/tmpbwayb6h3.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local grade = grades[2]\n  grades_table[gpa]\
    \ = grade\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8144dqy.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmp_8144dqy.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    grades_table[3] = gpa\n    grades_table[4]\
    \ = letter\n    grades_table[5] = gpa\n    grades_table[6] = letter\n    grades_table[7]\
    \ = gpa\n    grades_table[8] = letter\n    grades_table[9] = gpa\n    grades_table[10]\
    \ = letter\n    grades_table[11] = gpa\n    grades_table[12] = letter\n    grades_table[13]\
    \ = gpa\n    grades_table[14] = letter\n    grades_table[15] = gpa\n    grades_table[16]\
    \ = letter\n    grades_table[17] = gpa\n    grades_table[18] = letter\n    grades_table[19]\
    \ = gpa\n    grades_table[20] = letter\n    grades_table[21] = gpa\n    grades_table[22]\
    \ = letter\n    grades_table[23] = gpa\n    grades_table[24] = letter\n    grades_table[25]\
    \ = gpa\n    grades_table[26] = letter\n    grades_table[27] = gpa\n    grades_table[28]\
    \ = letter\n    grades_table[29] = gpa\n    grades_table[30] = letter\n    grades_table[31]\
    \ = gpa\n    grades_table[32] = letter\n    grades_table[33] = gpa\n    grades_table[34]\
    \ = letter\n    grades_table[35] = gpa\n    grades_table[36] = letter\n    grades_table[37]\
    \ = gpa\n    grades_table[38] = letter\n    grades_table[39] = gpa\n    grades_table[40]\
    \ = letter\n    grades_table[41] = gpa\n    grades_table[42] = letter\n    grades_table[43]\
    \ = gpa\n    grades_table[44] = letter\n    grades_table[45] = gpa\n    grades_table[46]\
    \ = letter\n    grades_table[47] = gpa\n    grades_table[48] = letter\n    grades_table[49]\
    \ = gpa\n    grades_table[50] = letter\n    grades_table[51] = gpa\n    grades_table[52]\
    \ = letter\n    grades_table[53] = gpa\n    grades_table[54] = letter\n    grades_table[55]\
    \ = gpa\n    grades_table[56] = letter\n    grades_table[57] = gpa\n    grades_table[58]\
    \ = letter\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8m_qzcss.lua:96: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 0\n    while i < #grades do\n        grades_table[i] = grades[i]\n\
    \        i = i + 1\n    end\n    local grades_table_sorted = {}\n    local j =\
    \ 0\n    while j < #grades_table do\n        grades_table_sorted[j] = j\n    \
    \    j = j + 1\n    end\n    local grades_table_sorted_reversed = {}\n    local\
    \ k = 0\n    while k < #grades_table_sorted do\n        grades_table_sorted_reversed[k]\
    \ = grades_table_sorted[k]\n        k = k + 1\n    end\n    local grades_table_sorted_reversed_sorted\
    \ = {}\n    local l = 0\n    while l < #grades_table_sorted_reversed do\n    \
    \    grades_table_sorted_reversed_sorted[l] = grades_table_sorted_reversed[l]\n\
    \        l = l + 1\n    end\n    local grades_table_sorted_reversed_sorted_sorted\
    \ = {}\n    local m = 0\n    while m < #grades_table_sorted_reversed_sorted do\n\
    \        grades_table_sorted_reversed_sorted_sorted[m] = grades_table_sorted_reversed_sorted[m]\n\
    \        m = m + 1\n    end\n    local grades_table_sorted_reversed_sorted_sorted_sorted\
    \ = {}\n    local n = 0\n    while n < #grades_table_sorted_reversed_sorted_sorted\
    \ do\n        grades_table_sorted_reversed_sorted_sorted_sorted[n] = grades_table_sorted_reversed_sorted_sorted[n]\n\
    \        n = n + 1\n    end\n    local grades_table_sorted_reversed_sorted_sorted_sorted\
    \ = {}\n    local o = 0\n    while o < #grades_table_sorted_reversed_sorted_sorted_sorted\
    \ do\n        grades_table_sorted_reversed_sorted_sorted_sorted[o] = grades_table_sorted_reversed_sorted_sorted_sorted[o]\n\
    \        o = o + 1\n    end\n    local grades_table_sorted_reversed_sorted_sorted_sorted_sorted\
    \ = {}\n    local p = 0\n    while p < #grades_table_sorted_reversed_sorted_sorted_sorted_sorted\
    \ do\n        grades_table_sorted_reversed_sorted_sorted_sorted_sorted[p] = grades_table_sorted_reversed_sorted_sorted_sorted[p]\n\
    \        p = p + 1\n    end\n    local grades_table_sorted_reversed_sorted_sorted_sorted_sorted\
    \ = {}\n    local q = 0\n    while q < #grades_table_sorted_reversed_sorted_sorted_sorted_sorted\
    \ do\n        grades_table_sorted_reversed_sorted_sorted_sorted_sorted[q] = grades_table_sorted_reversed_sorted_sorted_sorted_sorted[q]\n\
    \        q = q + 1\n    end\n    local grades_table_sorted_reversed_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    local r = 0\n    while r < \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfjxmfmsy.lua:79: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local letter_grade\n\
    \    \n    -- If the GPA is less than 3.0 then it is an E\n    if gpa < 3.0 then\n\
    \        letter_grade = \"E\"\n        return letter_grade\n    end\n    \n  \
    \  -- If the GPA is between 3.0 and 3.7 then it is an A\n    if gpa >= 3.0 and\
    \ gpa <= 3.7 then\n        letter_grade = \"A\"\n        return letter_grade\n\
    \    end\n    \n    -- If the GPA is between 3.7 and 3.3 then it is an A-\n  \
    \  if gpa >= 3.7 and gpa <= 3.3 then\n        letter_grade = \"A-\"\n        return\
    \ letter_grade\n    end\n    \n    -- If the GPA is between 3.3 and 3.0 then it\
    \ is an B+\n    if gpa >= 3.3 and gpa <= 3.0 then\n        letter_grade = \"B+\"\
    \n        return letter_grade\n    end\n    \n    -- If the GPA is between 2.7\
    \ and 2.3 then it is an B\n    if gpa >= 2.7 and gpa <= 2.3 then\n        letter_grade\
    \ = \"B\"\n        return letter_grade\n    end\n    \n    -- If the GPA is between\
    \ 2.3 and 2.0 then it is an B-\n    if gpa >= 2.3 and gpa <= 2.0 then\n      \
    \  letter_grade = \"B-\"\n        return letter_grade\n    end\n    \n    -- If\
    \ the GPA is between 1.7 and 1.3 then it is an C+\n    if gpa >= 1.7 and gpa <=\
    \ 1.3 then\n        letter_grade = \"C+\"\n        return letter_grade\n    end\n\
    \    \n    -- If the GPA is between 1.3 and 1.0 then it is an C\n    if gpa >=\
    \ 1.3 and gpa <= 1.0 then\n        letter_grade = \"C\"\n        return letter_grade\n\
    \    end\n    \n    -- If the GPA is between 0.7 and 1.0 then it is an D+\n  \
    \  if gpa >= 0.7 and gpa <= 1.0 then\n        letter_grade = \"D+\"\n        return\
    \ letter_grade\n    end\n    \n    -- If the GPA is between 0.0 and 0.7 then it\
    \ is an D\n    if gpa >= 0.0 and gpa <= 0.7 then\n        letter_grade = \"D\"\
    \n        return letter_grade\n    end\n    \n    -- If the GPA is less than 0.0\
    \ then it is an D-\n    if gpa < 0.0 then\n        letter_grade = \"D-\"\n   \
    \     return letter_grade\n    end\n    \n    -- If the GPA is less than 0.7 then\
    \ it is an E\n    if gpa < 0.7 then\n        letter_grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq8xav2zp.lua:96: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2uukbvl.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpn2uukbvl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade > 4.0 then\n            grades_table[i] = 'A+'\n        elseif grade >\
    \ 3.7 then\n            grades_table[i] = 'A'\n        elseif grade > 3.3 then\n\
    \            grades_table[i] = 'A-'\n        elseif grade > 3.0 then\n       \
    \     grades_table[i] = 'B+'\n        elseif grade > 2.7 then\n            grades_table[i]\
    \ = 'B'\n        elseif grade > 2.3 then\n            grades_table[i] = 'B-'\n\
    \        elseif grade > 2.0 then\n            grades_table[i] = 'C+'\n       \
    \ elseif grade > 1.7 then\n            grades_table[i] = 'C'\n        elseif grade\
    \ > 1.3 then\n            grades_table[i] = 'C-'\n        elseif grade > 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade > 0.7 then\n       \
    \     grades_table[i] = 'D'\n        elseif grade > 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy9zq6ot.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpyy9zq6ot.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {}\n        grades_table[i][1]\
    \ = grades[i]\n        grades_table[i][2] = grades[i]\n        grades_table[i][3]\
    \ = grades[i]\n        grades_table[i][4] = grades[i]\n        grades_table[i][5]\
    \ = grades[i]\n        grades_table[i][6] = grades[i]\n        grades_table[i][7]\
    \ = grades[i]\n        grades_table[i][8] = grades[i]\n        grades_table[i][9]\
    \ = grades[i]\n        grades_table[i][10] = grades[i]\n        grades_table[i][11]\
    \ = grades[i]\n        grades_table[i][12] = grades[i]\n        grades_table[i][13]\
    \ = grades[i]\n        grades_table[i][14] = grades[i]\n        grades_table[i][15]\
    \ = grades[i]\n        grades_table[i][16] = grades[i]\n        grades_table[i][17]\
    \ = grades[i]\n        grades_table[i][18] = grades[i]\n        grades_table[i][19]\
    \ = grades[i]\n        grades_table[i][20] = grades[i]\n        grades_table[i][21]\
    \ = grades[i]\n        grades_table[i][22] = grades[i]\n        grades_table[i][23]\
    \ = grades[i]\n        grades_table[i][24] = grades[i]\n        grades_table[i][25]\
    \ = grades[i]\n        grades_table[i][26] = grades[i]\n        grades_table[i][27]\
    \ = grades[i]\n        grades_table[i][28] = grades[i]\n        grades_table[i][29]\
    \ = grades[i]\n        grades_table[i][30] = grades[i]\n        grades_table[i][31]\
    \ = grades[i]\n        grades_table[i][32] = grades[i]\n        grades_table[i][33]\
    \ = grades[i]\n        grades_table[i][34] = grades[i]\n        grades_table[i][35]\
    \ = grades[i]\n        grades_table[i][36] = grades[i]\n        grades_table[i][37]\
    \ = grades[i]\n        grades_table[i][38] = grades[i]\n        grades_table[i][39]\
    \ = grades[i]\n        grades_table[i][40] = grades[i]\n        grades_table[i][41]\
    \ = grades[i]\n        grades_table[i][42] = grades[i]\n        grades_table[i][43]\
    \ = grades[i]\n        grades_table[i][44] = grades[i]\n        grades_table[i][45]\
    \ = grades[i]\n        grades_table[i][46] = grades[i]\n        grades_table[i][47]\
    \ = grades[i]\n        grades_table[i][48] = grades[i]\n        grades_table[i][49]\
    \ = grades[i]\n        grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_cldmimb.lua:75: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      local grade = grades[i]\n      if grade\
    \ > 0 then\n         grades_table[i] = \"A+\"\n      elseif grade > 3.7 then\n\
    \         grades_table[i] = \"A\"\n      elseif grade > 3.3 then\n         grades_table[i]\
    \ = \"A-\"\n      elseif grade > 3 then\n         grades_table[i] = \"B+\"\n \
    \     elseif grade > 2.7 then\n         grades_table[i] = \"B\"\n      elseif\
    \ grade > 2.3 then\n         grades_table[i] = \"B-\"\n      elseif grade > 2\
    \ then\n         grades_table[i] = \"C+\"\n      elseif grade > 1.7 then\n   \
    \      grades_table[i] = \"C\"\n      elseif grade > 1.3 then\n         grades_table[i]\
    \ = \"C-\"\n      elseif grade > 1 then\n         grades_table[i] = \"D+\"\n \
    \     elseif grade > 0.7 then\n         grades_table[i] = \"D\"\n      elseif\
    \ grade > 0 then\n         grades_table[i] = \"D-\"\n      else\n         grades_table[i]\
    \ = \"E\"\n      end\n   end\n   return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe9byw8a.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A+\", \"\
    A+\", \"A+\", \"A+\"}\nstack traceback:\n\t/tmp/tmppe9byw8a.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {}\n        grades_table[i][1]\
    \ = grades[i]\n        grades_table[i][2] = grades[i]\n        grades_table[i][3]\
    \ = grades[i]\n        grades_table[i][4] = grades[i]\n        grades_table[i][5]\
    \ = grades[i]\n        grades_table[i][6] = grades[i]\n        grades_table[i][7]\
    \ = grades[i]\n        grades_table[i][8] = grades[i]\n        grades_table[i][9]\
    \ = grades[i]\n        grades_table[i][10] = grades[i]\n        grades_table[i][11]\
    \ = grades[i]\n        grades_table[i][12] = grades[i]\n        grades_table[i][13]\
    \ = grades[i]\n        grades_table[i][14] = grades[i]\n        grades_table[i][15]\
    \ = grades[i]\n        grades_table[i][16] = grades[i]\n        grades_table[i][17]\
    \ = grades[i]\n        grades_table[i][18] = grades[i]\n        grades_table[i][19]\
    \ = grades[i]\n        grades_table[i][20] = grades[i]\n    end\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yvbik5l.lua:52:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    {\n   \
    \     4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n\
    \        4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n      \
    \  4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n\
    \        4.0,\n        4.0,\n        4.0\n    },\n    {3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},\n    {\n        1.7,\n        1.7,\n  \
    \      1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n\
    \        1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n      \
    \  1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n\
    \        1.7\n    },\n    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2},\n    {\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n \
    \       3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n       \
    \ 3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n\
    \        3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5\n    }\n\
    }\nstack traceback:\n\t/tmp/tmp0yvbik5l.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = letter\n    grades_table[2] = letter\n    grades_table[3] = letter\n    grades_table[4]\
    \ = letter\n    grades_table[5] = letter\n    grades_table[6] = letter\n    grades_table[7]\
    \ = letter\n    grades_table[8] = letter\n    grades_table[9] = letter\n    grades_table[10]\
    \ = letter\n    grades_table[11] = letter\n    grades_table[12] = letter\n   \
    \ grades_table[13] = letter\n    grades_table[14] = letter\n    grades_table[15]\
    \ = letter\n    grades_table[16] = letter\n    grades_table[17] = letter\n   \
    \ grades_table[18] = letter\n    grades_table[19] = letter\n    grades_table[20]\
    \ = letter\n    grades_table[21] = letter\n    grades_table[22] = letter\n   \
    \ grades_table[23] = letter\n    grades_table[24] = letter\n    grades_table[25]\
    \ = letter\n    grades_table[26] = letter\n    grades_table[27] = letter\n   \
    \ grades_table[28] = letter\n    grades_table[29] = letter\n    grades_table[30]\
    \ = letter\n    grades_table[31] = letter\n    grades_table[32] = letter\n   \
    \ grades_table[33] = letter\n    grades_table[34] = letter\n    grades_table[35]\
    \ = letter\n    grades_table[36] = letter\n    grades_table[37] = letter\n   \
    \ grades_table[38] = letter\n    grades_table[39] = letter\n    grades_table[40]\
    \ = letter\n    grades_table[41] = letter\n    grades_table[42] = letter\n   \
    \ grades_table[43] = letter\n    grades_table[44] = letter\n    grades_table[45]\
    \ = letter\n    grades_table[46] = letter\n    grades_table[47] = letter\n   \
    \ grades_table[48] = letter\n    grades_table[49] = letter\n    grades_table[50]\
    \ = letter\n    grades_table[51] = letter\n    grades_table[52] = letter\n   \
    \ grades_table[53] = letter\n    grades_table[54] = letter\n    grades_table[55]\
    \ = letter\n    grades_table[56] = letter\n    grades_table[57] = letter\n   \
    \ grades_table[58] = letter\n    grades_table[59] = letter\n    grades_table[60]\
    \ = letter\n    grades_table[61] = letter\n    grades_table[62\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc1qtssev.lua:87: '']'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = { }\n    local gpa = tonumber(grades)\n    local letter = nil\n    local gpa_table\
    \ = {\n        4.0, ['A+'] = true, \n        3.7, ['A'] = true, \n        3.3,\
    \ ['A-'] = true, \n        3.0, ['B+'] = true, \n        2.7, ['B'] = true, \n\
    \        2.3, ['B-'] = true, \n        2.0, ['C+'] = true, \n        1.7, ['C']\
    \ = true, \n        1.3, ['C-'] = true, \n        1.0, ['D+'] = true, \n     \
    \   0.7, ['D'] = true, \n        0.0, ['D-'] = true, \n        0.0, ['E'] = true\n\
    \    }\n    local gpa_table_length = #gpa_table\n    local gpa_table_length =\
    \ #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_table_length = #gpa_table\n    local gpa_table_length\
    \ = #gpa_table\n    local gpa_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbpi8px02.lua:87: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = { }\n  local index = 1\n  for _, grade in ipairs(grades) do\n    grades_table[index]\
    \ = grade\n    index = index + 1\n  end\n  local grades_length = #grades_table\n\
    \  local grades_index = 1\n  local grades_sum = 0\n  local grades_average = 0\n\
    \  local grades_letter_grade\n  local grades_letter_grade_index\n  local grades_letter_grade_index2\n\
    \  local grades_letter_grade_index3\n  local grades_letter_grade_index4\n  local\
    \ grades_letter_grade_index5\n  local grades_letter_grade_index6\n  local grades_letter_grade_index7\n\
    \  local grades_letter_grade_index8\n  local grades_letter_grade_index9\n  local\
    \ grades_letter_grade_index10\n  local grades_letter_grade_index11\n  local grades_letter_grade_index12\n\
    \  local grades_letter_grade_index13\n  local grades_letter_grade_index14\n  local\
    \ grades_letter_grade_index15\n  local grades_letter_grade_index16\n  local grades_letter_grade_index17\n\
    \  local grades_letter_grade_index18\n  local grades_letter_grade_index19\n  local\
    \ grades_letter_grade_index20\n  local grades_letter_grade_index21\n  local grades_letter_grade_index22\n\
    \  local grades_letter_grade_index23\n  local grades_letter_grade_index24\n  local\
    \ grades_letter_grade_index25\n  local grades_letter_grade_index26\n  local grades_letter_grade_index27\n\
    \  local grades_letter_grade_index28\n  local grades_letter_grade_index29\n  local\
    \ grades_letter_grade_index30\n  local grades_letter_grade_index31\n  local grades_letter_grade_index32\n\
    \  local grades_letter_grade_index33\n  local grades_letter_grade_index34\n  local\
    \ grades_letter_grade_index35\n  local grades_letter_grade_index36\n  local grades_letter_grade_index37\n\
    \  local grades_letter_grade_index38\n  local grades_letter_grade_index39\n  local\
    \ grades_letter_grade_index40\n  local grades_letter_grade_index41\n  local grades_letter_grade_index42\n\
    \  local grades_letter_grade_index43\n  local grades_letter_grade_index44\n  local\
    \ grades_letter_grade_index45\n  local grades_letter_grade_index46\n  local grades_letter_grade_index47\n\
    \  local grades_letter_grade_index48\n  local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu1pse1di.lua:94: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2uukbvl.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpn2uukbvl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter\n  if gpa > 3.0 then\n    grades_table[3]\
    \ = letter\n  elseif gpa > 2.7 then\n    grades_table[4] = letter\n  elseif gpa\
    \ > 2.0 then\n    grades_table[5] = letter\n  elseif gpa > 1.7 then\n    grades_table[6]\
    \ = letter\n  elseif gpa > 1.3 then\n    grades_table[7] = letter\n  elseif gpa\
    \ > 1.0 then\n    grades_table[8] = letter\n  elseif gpa > 0.7 then\n    grades_table[9]\
    \ = letter\n  elseif gpa > 0.0 then\n    grades_table[10] = letter\n  else\n \
    \   grades_table[11] = letter\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb96xwegi.lua:52:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3, 3}\nstack\
    \ traceback:\n\t/tmp/tmpb96xwegi.lua:52: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter_grade\n  \n  if gpa < 4.0 then\n\
    \    letter_grade = 'A+'\n  elseif gpa > 3.7 then\n    letter_grade = 'A'\n  elseif\
    \ gpa > 3.3 then\n    letter_grade = 'A-'\n  elseif gpa > 3.0 then\n    letter_grade\
    \ = 'B+'\n  elseif gpa > 2.7 then\n    letter_grade = 'B'\n  elseif gpa > 2.3\
    \ then\n    letter_grade = 'B-'\n  elseif gpa > 2.0 then\n    letter_grade = 'C+'\n\
    \  elseif gpa > 1.7 then\n    letter_grade = 'C'\n  elseif gpa > 1.3 then\n  \
    \  letter_grade = 'C-'\n  elseif gpa > 1.0 then\n    letter_grade = 'D+'\n  elseif\
    \ gpa > 0.7 then\n    letter_grade = 'D'\n  elseif gpa > 0.0 then\n    letter_grade\
    \ = 'D-'\n  else\n    letter_grade = 'E'\n  end\n  \n  grades_table[1] = gpa\n\
    \  grades_table[2] = letter_grade\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2s7ccz_y.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, \"A\"}\nstack\
    \ traceback:\n\t/tmp/tmp2s7ccz_y.lua:62: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter_grade\n        if gpa < 4.0 then\n            letter_grade = \"A+\"\n\
    \        elseif gpa > 3.7 then\n            letter_grade = \"A\"\n        elseif\
    \ gpa > 3.3 then\n            letter_grade = \"A-\"\n        elseif gpa > 3.0\
    \ then\n            letter_grade = \"B+\"\n        elseif gpa > 2.7 then\n   \
    \         letter_grade = \"B\"\n        elseif gpa > 2.3 then\n            letter_grade\
    \ = \"B-\"\n        elseif gpa > 2.0 then\n            letter_grade = \"C+\"\n\
    \        elseif gpa > 1.7 then\n            letter_grade = \"C\"\n        elseif\
    \ gpa > 1.3 then\n            letter_grade = \"C-\"\n        elseif gpa > 1.0\
    \ then\n            letter_grade = \"D+\"\n        elseif gpa > 0.7 then\n   \
    \         letter_grade = \"D\"\n        elseif gpa > 0.0 then\n            letter_grade\
    \ = \"D-\"\n        else\n            letter_grade = \"E\"\n        end\n    \
    \    grades_table[i] = {gpa, letter_grade}\n    end\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2m3febh.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"A\"}, {3,\
    \ \"A+\"}, {1.7, \"A+\"}, {2, \"A+\"}, {3.5, \"A+\"}}\nstack traceback:\n\t/tmp/tmpw2m3febh.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    for i = 1, #grades do\n        grades_sum = grades_sum + grades[i]\n\
    \    end\n    local grades_avg = grades_sum / #grades\n    local grades_diff =\
    \ 0\n    for i = 1, #grades do\n        grades_diff = grades_diff + (grades[i]\
    \ - grades_avg)\n    end\n    local grades_diff_sign = grades_diff / grades_avg\n\
    \    local grades_diff_sign_string = \"\"\n    if grades_diff_sign > 0 then\n\
    \        grades_diff_sign_string = \"+\"\n    elseif grades_diff_sign < 0 then\n\
    \        grades_diff_sign_string = \"-\"\n    end\n    local grades_string = \"\
    \"\n    if grades_avg >= 4.0 then\n        grades_string = \"A+\"\n    elseif\
    \ grades_avg >= 3.7 then\n        grades_string = \"A\"\n    elseif grades_avg\
    \ >= 3.3 then\n        grades_string = \"A-\"\n    elseif grades_avg >= 3.0 then\n\
    \        grades_string = \"B+\"\n    elseif grades_avg >= 2.7 then\n        grades_string\
    \ = \"B\"\n    elseif grades_avg >= 2.3 then\n        grades_string = \"B-\"\n\
    \    elseif grades_avg >= 2.0 then\n        grades_string = \"C+\"\n    elseif\
    \ grades_avg >= 1.7 then\n        grades_string = \"C\"\n    elseif grades_avg\
    \ >= 1.3 then\n        grades_string = \"C-\"\n    elseif grades_avg >= 1.0 then\n\
    \        grades_string = \"D+\"\n    elseif grades_avg >= 0.7 then\n        grades_string\
    \ = \"D\"\n    elseif grades_avg >= 0.0 then\n        grades_string = \"D-\"\n\
    \    else\n        grades_string = \"E\"\n    end\n    return grades_string ..\
    \ grades_diff_sign_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua645j67.lua:72:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B+\"\nstack traceback:\n\
    \t/tmp/tmpua645j67.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted and grades_sorted[grades_length/2] or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    local grades_average = grades_average or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    local grades_average = grades_average or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    local grades_average = grades_average or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    local grades_average = grades_average or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    local grades_average = grades_average or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    local grades_average = grades_average or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    local grades_average = grades_average or 0\n    local grades_average\
    \ = grades_average or 0\n    local grades_average = grades_average or 0\n    local\
    \ grades_average = grades_average or 0\n    local grades_average = grades_average\
    \ or 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpee3rhki4.lua:77: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local gpa = grades[i]\n    local letter_grade\n\
    \    if gpa > 3.0 then\n      letter_grade = 'A+'\n    elseif gpa > 2.7 then\n\
    \      letter_grade = 'A'\n    elseif gpa > 2.3 then\n      letter_grade = 'A-'\n\
    \    elseif gpa > 2.0 then\n      letter_grade = 'B+'\n    elseif gpa > 1.7 then\n\
    \      letter_grade = 'B'\n    elseif gpa > 1.3 then\n      letter_grade = 'B-'\n\
    \    elseif gpa > 1.0 then\n      letter_grade = 'C+'\n    elseif gpa > 0.7 then\n\
    \      letter_grade = 'C'\n    elseif gpa > 0.3 then\n      letter_grade = 'C-'\n\
    \    elseif gpa > 0.0 then\n      letter_grade = 'D+'\n    elseif gpa > -0.7 then\n\
    \      letter_grade = 'D'\n    elseif gpa > -0.3 then\n      letter_grade = 'D-'\n\
    \    else\n      letter_grade = 'E'\n    end\n    grades_table[i] = {gpa, letter_grade}\n\
    \  end\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v1_rby6.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"A+\"}, {3,\
    \ \"A\"}, {1.7, \"B-\"}, {2, \"B\"}, {3.5, \"A+\"}}\nstack traceback:\n\t/tmp/tmp2v1_rby6.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 1\n    while i <= #grades do\n        local grade = grades[i]\n\
    \        local gpa = grade[1]\n        local letter = grade[2]\n        grades_table[i]\
    \ = {gpa, letter}\n        i = i + 1\n    end\n    return grades_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnaam4x4l.lua:26:\
    \ attempt to index a number value (local 'grade')\nstack traceback:\n\t/tmp/tmpnaam4x4l.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpnaam4x4l.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50gcmkt_.lua:33:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3}\nstack traceback:\n\
    \t/tmp/tmp50gcmkt_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter\n  if gpa > 3.7 then\n    grades_table[3]\
    \ = letter\n  elseif gpa > 3.3 then\n    grades_table[4] = letter\n  elseif gpa\
    \ > 3.0 then\n    grades_table[5] = letter\n  elseif gpa > 2.7 then\n    grades_table[6]\
    \ = letter\n  elseif gpa > 2.3 then\n    grades_table[7] = letter\n  elseif gpa\
    \ > 2.0 then\n    grades_table[8] = letter\n  elseif gpa > 1.7 then\n    grades_table[9]\
    \ = letter\n  elseif gpa > 1.3 then\n    grades_table[10] = letter\n  elseif gpa\
    \ > 1.0 then\n    grades_table[11] = letter\n  elseif gpa > 0.7 then\n    grades_table[12]\
    \ = letter\n  elseif gpa > 0.0 then\n    grades_table[13] = letter\n  else\n \
    \   grades_table[14] = letter\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf12tmmg2.lua:58:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3, 3}\nstack\
    \ traceback:\n\t/tmp/tmpf12tmmg2.lua:58: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grade\
    \ = letter\n    if gpa > 3.0 then\n        grade = \"A+\"\n    elseif gpa > 2.7\
    \ then\n        grade = \"A\"\n    elseif gpa > 2.3 then\n        grade = \"A-\"\
    \n    elseif gpa > 2.0 then\n        grade = \"B+\"\n    elseif gpa > 1.7 then\n\
    \        grade = \"B\"\n    elseif gpa > 1.3 then\n        grade = \"B-\"\n  \
    \  elseif gpa > 1.0 then\n        grade = \"C+\"\n    elseif gpa > 0.7 then\n\
    \        grade = \"C\"\n    elseif gpa > 0.3 then\n        grade = \"C-\"\n  \
    \  elseif gpa > 0.0 then\n        grade = \"D+\"\n    elseif gpa > -0.7 then\n\
    \        grade = \"D\"\n    elseif gpa > -0.3 then\n        grade = \"D-\"\n \
    \   elseif gpa > -0.0 then\n        grade = \"E\"\n    end\n    grades_table[1]\
    \ = grade\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphipwn0_r.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\"}\nstack traceback:\n\
    \t/tmp/tmphipwn0_r.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local grades_table_length = #grades\n    for i = 1, grades_table_length\
    \ do\n        local gpa = grades[i]\n        local letter_grade\n        if gpa\
    \ > 3.0 then\n            letter_grade = 'A+'\n        elseif gpa > 2.7 then\n\
    \            letter_grade = 'A'\n        elseif gpa > 2.0 then\n            letter_grade\
    \ = 'B+'\n        elseif gpa > 1.7 then\n            letter_grade = 'B'\n    \
    \    elseif gpa > 1.3 then\n            letter_grade = 'B-'\n        elseif gpa\
    \ > 1.0 then\n            letter_grade = 'C+'\n        elseif gpa > 0.7 then\n\
    \            letter_grade = 'C'\n        elseif gpa > 0.3 then\n            letter_grade\
    \ = 'C-'\n        elseif gpa > 0.0 then\n            letter_grade = 'D+'\n   \
    \     elseif gpa > -0.3 then\n            letter_grade = 'D'\n        elseif gpa\
    \ > -0.7 then\n            letter_grade = 'D-'\n        elseif gpa > -1.0 then\n\
    \            letter_grade = 'E'\n        else\n            letter_grade = 'F'\n\
    \        end\n        grades_table[i] = {gpa, letter_grade}\n    end\n    return\
    \ grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpy0b6sv.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"A+\"}, {3,\
    \ \"A\"}, {1.7, \"B-\"}, {2, \"B\"}, {3.5, \"A+\"}}\nstack traceback:\n\t/tmp/tmpdpy0b6sv.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {}\n        grades_table[i][1]\
    \ = grades[i]\n        grades_table[i][2] = grades[i]\n        grades_table[i][3]\
    \ = grades[i]\n        grades_table[i][4] = grades[i]\n        grades_table[i][5]\
    \ = grades[i]\n        grades_table[i][6] = grades[i]\n        grades_table[i][7]\
    \ = grades[i]\n        grades_table[i][8] = grades[i]\n        grades_table[i][9]\
    \ = grades[i]\n        grades_table[i][10] = grades[i]\n        grades_table[i][11]\
    \ = grades[i]\n        grades_table[i][12] = grades[i]\n        grades_table[i][13]\
    \ = grades[i]\n        grades_table[i][14] = grades[i]\n        grades_table[i][15]\
    \ = grades[i]\n        grades_table[i][16] = grades[i]\n        grades_table[i][17]\
    \ = grades[i]\n        grades_table[i][18] = grades[i]\n        grades_table[i][19]\
    \ = grades[i]\n        grades_table[i][20] = grades[i]\n        grades_table[i][21]\
    \ = grades[i]\n        grades_table[i][22] = grades[i]\n        grades_table[i][23]\
    \ = grades[i]\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupp2l2_b.lua:55:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    {\n   \
    \     4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n\
    \        4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n      \
    \  4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n\
    \        4.0,\n        4.0,\n        4.0,\n        4.0,\n        4.0,\n      \
    \  4.0\n    },\n    {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3},\n    {\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n\
    \        1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n      \
    \  1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n\
    \        1.7,\n        1.7,\n        1.7,\n        1.7,\n        1.7,\n      \
    \  1.7,\n        1.7,\n        1.7\n    },\n    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},\n    {\n        3.5,\n        3.5,\n\
    \        3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n      \
    \  3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n\
    \        3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5,\n      \
    \  3.5,\n        3.5,\n        3.5,\n        3.5,\n        3.5\n    }\n}\nstack\
    \ traceback:\n\t/tmp/tmpupp2l2_b.lua:55: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.020 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = { }\n  local grades_table_length = #grades\n  for i = 1, grades_table_length\
    \ do\n    local gpa = grades[i]\n    local letter = nil\n    if gpa > 3.0 then\n\
    \      letter = \"A+\"\n    else if gpa > 2.7 then\n      letter = \"A\"\n   \
    \ else if gpa > 2.0 then\n      letter = \"B+\"\n    else if gpa > 1.7 then\n\
    \      letter = \"B\"\n    else if gpa > 1.3 then\n      letter = \"B-\"\n   \
    \ else if gpa > 1.0 then\n      letter = \"C+\"\n    else if gpa > 0.7 then\n\
    \      letter = \"C\"\n    else if gpa > 0.3 then\n      letter = \"C-\"\n   \
    \ else if gpa > 0.0 then\n      letter = \"D+\"\n    else if gpa > -0.3 then\n\
    \      letter = \"D\"\n    else if gpa > -0.7 then\n      letter = \"D-\"\n  \
    \  else if gpa > -1.0 then\n      letter = \"E\"\n    end\n    grades_table[i]\
    \ = letter\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpri8vcuxg.lua:68: ''end'' expected (to close ''if'' at line
    43) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grade\
    \ = ''\n  \n  -- The first grade is always A+\n  local first_grade = grades_sorted[1]\n\
    \  local first_grade_index = #grades_sorted\n  \n  -- The last grade is always\
    \ D-\n  local last_grade = grades_sorted[grades_length - 1]\n  local last_grade_index\
    \ = grades_length - 1\n  \n  -- The middle grade is always D\n  local middle_grade\
    \ = grades_sorted[grades_length / 2]\n  local middle_grade_index = grades_length\
    \ / 2\n  \n  -- The middle grade is always D\n  local middle_grade = grades_sorted[grades_length\
    \ / 2]\n  local middle_grade_index = grades_length / 2\n  \n  -- The middle grade\
    \ is always D\n  local middle_grade = grades_sorted[grades_length / 2]\n  local\
    \ middle_grade_index = grades_length / 2\n  \n  -- The middle grade is always\
    \ D\n  local middle_grade = grades_sorted[grades_length / 2]\n  local middle_grade_index\
    \ = grades_length / 2\n  \n  -- The middle grade is always D\n  local middle_grade\
    \ = grades_sorted[grades_length / 2]\n  local middle_grade_index = grades_length\
    \ / 2\n  \n  -- The middle grade is always D\n  local middle_grade = grades_sorted[grades_length\
    \ / 2]\n  local middle_grade_index = grades_length / 2\n  \n  -- The middle grade\
    \ is always D\n  local middle_grade = grades_sorted[grades_length / 2]\n  local\
    \ middle_grade_index = grades_length / 2\n  \n  -- The middle grade is always\
    \ D\n  local middle_grade = grades_sorted[grades_length / 2]\n  local middle_grade_index\
    \ = grades_length / 2\n  \n  -- The middle grade is always D\n  local middle_grade\
    \ = grades_sorted[grades_length / 2]\n  local middle_grade_index = grades_length\
    \ / 2\n  \n  -- The middle grade is always D\n  local middle_grade = grades_sorted[grades_length\
    \ / 2]\n  local middle_grade_index = grades_length / 2\n  \n  -- The middle grade\
    \ is always D\n  local middle_grade = grades_sorted[grades_length / 2]\n  local\
    \ middle_grade_index = grades_length\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp143wfj_4.lua:89: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 0
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local gpa = grades[i]\n    local letter =\
    \ nil\n    if gpa >= 4.0 then\n      letter = 'A+'\n    elseif gpa > 3.7 then\n\
    \      letter = 'A'\n    elseif gpa > 3.3 then\n      letter = 'A-'\n    elseif\
    \ gpa > 3.0 then\n      letter = 'B+'\n    elseif gpa > 2.7 then\n      letter\
    \ = 'B'\n    elseif gpa > 2.3 then\n      letter = 'B-'\n    elseif gpa > 2.0\
    \ then\n      letter = 'C+'\n    elseif gpa > 1.7 then\n      letter = 'C'\n \
    \   elseif gpa > 1.3 then\n      letter = 'C-'\n    elseif gpa > 1.0 then\n  \
    \    letter = 'D+'\n    elseif gpa > 0.7 then\n      letter = 'D'\n    elseif\
    \ gpa > 0.0 then\n      letter = 'D-'\n    else\n      letter = 'E'\n    end\n\
    \    grades_table[i] = letter\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = { \n        4.0 = {'A+'},\n        3.7 = {'A'},\n        3.3 = {'A-'},\n \
    \       3.0 = {'B+'},\n        2.7 = {'B'},\n        2.3 = {'B-'},\n        2.0\
    \ = {'C+'},\n        1.7 = {'C'},\n        1.3 = {'C-'},\n        1.0 = {'D+'},\n\
    \        0.7 = {'D'},\n        0.0 = {'D-'},\n        0.0 = {'E'}\n    }\n   \
    \ local grades_table_length = #grades_table\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmdfy7eex.lua:23: ''}'' expected (to close ''{'' at line 22)
    near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local lettergrade\n    if gpa > 3.0 then\n\
    \        lettergrade = 'A+'\n    elseif gpa > 2.7 then\n        lettergrade =\
    \ 'A'\n    elseif gpa > 2.3 then\n        lettergrade = 'A-'\n    elseif gpa >\
    \ 2.0 then\n        lettergrade = 'B+'\n    elseif gpa > 1.7 then\n        lettergrade\
    \ = 'B'\n    elseif gpa > 1.3 then\n        lettergrade = 'B-'\n    elseif gpa\
    \ > 1.0 then\n        lettergrade = 'C+'\n    elseif gpa > 0.7 then\n        lettergrade\
    \ = 'C'\n    elseif gpa > 0.3 then\n        lettergrade = 'C-'\n    elseif gpa\
    \ > 0.0 then\n        lettergrade = 'D+'\n    elseif gpa > -0.7 then\n       \
    \ lettergrade = 'D'\n    elseif gpa > -0.3 then\n        lettergrade = 'D-'\n\
    \    elseif gpa > -0.0 then\n        lettergrade = 'E'\n    else\n        lettergrade\
    \ = 'F'\n    end\n    grades_table[1] = lettergrade\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnigpoke.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\"}\nstack traceback:\n\
    \t/tmp/tmptnigpoke.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {}\n        grades_table[i][1]\
    \ = grades[i]\n        grades_table[i][2] = grades[i]\n        grades_table[i][3]\
    \ = grades[i]\n        grades_table[i][4] = grades[i]\n        grades_table[i][5]\
    \ = grades[i]\n        grades_table[i][6] = grades[i]\n        grades_table[i][7]\
    \ = grades[i]\n        grades_table[i][8] = grades[i]\n        grades_table[i][9]\
    \ = grades[i]\n        grades_table[i][10] = grades[i]\n        grades_table[i][11]\
    \ = grades[i]\n        grades_table[i][12] = grades[i]\n        grades_table[i][13]\
    \ = grades[i]\n        grades_table[i][14] = grades[i]\n        grades_table[i][15]\
    \ = grades[i]\n        grades_table[i][16] = grades[i]\n        grades_table[i][17]\
    \ = grades[i]\n        grades_table[i][18] = grades[i]\n        grades_table[i][19]\
    \ = grades[i]\n        grades_table[i][20] = grades[i]\n        grades_table[i][21]\
    \ = grades[i]\n        grades_table[i][22] = grades[i]\n        grades_table[i][23]\
    \ = grades[i]\n        grades_table[i][24] = grades[i]\n        grades_table[i][25]\
    \ = grades[i]\n        grades_table[i][26] = grades[i]\n        grades_table[i][27]\
    \ = grades[i]\n        grades_table[i][28] = grades[i]\n        grades_table[i][29]\
    \ = grades[i]\n        grades_table[i][30] = grades[i]\n        grades_table[i][31]\
    \ = grades[i]\n        grades_table[i][32] = grades[i]\n        grades_table[i][33]\
    \ = grades[i]\n        grades_table[i][34] = grades[i]\n        grades_table[i][35]\
    \ = grades[i]\n        grades_table[i][36] = grades[i]\n        grades_table[i][37]\
    \ = grades[i]\n        grades_table[i][38] = grades[i]\n        grades_table[i][39]\
    \ = grades[i]\n        grades_table[i][40] = grades[i]\n        grades_table[i][41]\
    \ = grades[i]\n        grades_table[i][42] = grades[i]\n        grades_table[i][43]\
    \ = grades[i]\n        grades_table[i][44] = grades[i]\n        grades_table[i][45]\
    \ = grades[i]\n        grades_table[i][46] = grades[i]\n        grades_table[i][47]\
    \ = grades[i]\n        grades_table[i][48] = grades[i]\n        grades_table[i][49]\
    \ = grades[i]\n        grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_cldmimb.lua:75: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = {\n         gpa = grades[i],\n\
    \         letter_grade = string.upper(string.sub(grades[i], 1, 1))\n      }\n\
    \   end\n   return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg33huym5.lua:35:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    {gpa=4.0,\
    \ letter_grade=\"4\"},\n    {gpa=3, letter_grade=\"3\"},\n    {gpa=1.7, letter_grade=\"\
    1\"},\n    {gpa=2, letter_grade=\"2\"},\n    {gpa=3.5, letter_grade=\"3\"}\n}\n\
    stack traceback:\n\t/tmp/tmpg33huym5.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local letter_grade = ''\n    while grades_index < grades_length do\n\
    \        local grade = grades_sorted[grades_index]\n        if grade > 0 then\n\
    \            local grades_index = grades_index + 1\n            local letter_grade\
    \ = letter_grade .. '+'\n        elseif grade < 0 then\n            local grades_index\
    \ = grades_index + 1\n            local letter_grade = letter_grade .. '-'\n \
    \       elseif grade == 0 then\n            local grades_index = grades_index\
    \ + 1\n            local letter_grade = letter_grade .. '0'\n        end\n   \
    \ end\n    return letter_grade\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp57x3bd2a.lua:23:\
    \ attempt to get length of a nil value (local 'grades_sorted')\nstack traceback:\n\
    \t/tmp/tmp57x3bd2a.lua:23: in local 'candidate'\n\t/tmp/tmp57x3bd2a.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local letter\n\
    \    if gpa > 3.0 then\n        letter = 'A+'\n    elseif gpa > 2.7 then\n   \
    \     letter = 'A'\n    elseif gpa > 2.3 then\n        letter = 'A-'\n    elseif\
    \ gpa > 2.0 then\n        letter = 'B+'\n    elseif gpa > 1.7 then\n        letter\
    \ = 'B'\n    elseif gpa > 1.3 then\n        letter = 'B-'\n    elseif gpa > 1.0\
    \ then\n        letter = 'C+'\n    elseif gpa > 0.7 then\n        letter = 'C'\n\
    \    elseif gpa > 0.3 then\n        letter = 'C-'\n    elseif gpa > 0.0 then\n\
    \        letter = 'D+'\n    elseif gpa > -0.3 then\n        letter = 'D'\n   \
    \ elseif gpa > -0.7 then\n        letter = 'D-'\n    elseif gpa > -1.0 then\n\
    \        letter = 'E'\n    else\n        letter = 'F'\n    end\n    grades_table[1]\
    \ = letter\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5asg9yf.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\"}\nstack traceback:\n\
    \t/tmp/tmpk5asg9yf.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        if gpa\
    \ > 4.0 then\n            grades_table[i] = \"A+\"\n        elseif gpa > 3.7 then\n\
    \            grades_table[i] = \"A\"\n        elseif gpa > 3.3 then\n        \
    \    grades_table[i] = \"A-\"\n        elseif gpa > 3.0 then\n            grades_table[i]\
    \ = \"B+\"\n        elseif gpa > 2.7 then\n            grades_table[i] = \"B\"\
    \n        elseif gpa > 2.3 then\n            grades_table[i] = \"B-\"\n      \
    \  elseif gpa > 2.0 then\n            grades_table[i] = \"C+\"\n        elseif\
    \ gpa > 1.7 then\n            grades_table[i] = \"C\"\n        elseif gpa > 1.3\
    \ then\n            grades_table[i] = \"C-\"\n        elseif gpa > 1.0 then\n\
    \            grades_table[i] = \"D+\"\n        elseif gpa > 0.7 then\n       \
    \     grades_table[i] = \"D\"\n        elseif gpa > 0.0 then\n            grades_table[i]\
    \ = \"D-\"\n        else\n            grades_table[i] = \"E\"\n        end\n \
    \   end\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8aq58b2.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpm8aq58b2.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\n  local grades_table = {}\n  local gpa = grades[1]\n  local letter\n\
    \  \n  if gpa > 3.0 then\n    letter = 'A+'\n  elseif gpa > 2.7 then\n    letter\
    \ = 'A'\n  elseif gpa > 2.3 then\n    letter = 'A-'\n  elseif gpa > 2.0 then\n\
    \    letter = 'B+'\n  elseif gpa > 1.7 then\n    letter = 'B'\n  elseif gpa >\
    \ 1.3 then\n    letter = 'B-'\n  elseif gpa > 1.0 then\n    letter = 'C+'\n  elseif\
    \ gpa > 0.7 then\n    letter = 'C'\n  elseif gpa > 0.3 then\n    letter = 'C-'\n\
    \  elseif gpa > 0.0 then\n    letter = 'D+'\n  elseif gpa > 0.0 then\n    letter\
    \ = 'D'\n  elseif gpa > 0.0 then\n    letter = 'D-'\n  elseif gpa > 0.0 then\n\
    \    letter = 'E'\n  else\n    letter = 'F'\n  end\n  \n  grades_table[1] = letter\n\
    \  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilslr740.lua:64:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\"}\nstack traceback:\n\
    \t/tmp/tmpilslr740.lua:64: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[gpa]\
    \ = letter\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcb3o269t.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmpcb3o269t.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\n  local grades_table = {}\n  local grades_table_length = #grades\n\
    \  local index = 1\n  local grade\n  local gpa\n  local letter\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local grades_table_length\n  local grades_table_length\n  local grades_table_length\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn8daztzi.lua:109: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50gcmkt_.lua:33:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3}\nstack traceback:\n\
    \t/tmp/tmp50gcmkt_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter_grade\n    if gpa > 3.0 then\n\
    \        letter_grade = 'A+'\n    elseif gpa > 2.7 then\n        letter_grade\
    \ = 'A'\n    elseif gpa > 2.3 then\n        letter_grade = 'A-'\n    elseif gpa\
    \ > 2.0 then\n        letter_grade = 'B+'\n    elseif gpa > 1.7 then\n       \
    \ letter_grade = 'B'\n    elseif gpa > 1.3 then\n        letter_grade = 'B-'\n\
    \    elseif gpa > 1.0 then\n        letter_grade = 'C+'\n    elseif gpa > 0.7\
    \ then\n        letter_grade = 'C'\n    elseif gpa > 0.3 then\n        letter_grade\
    \ = 'C-'\n    elseif gpa > 0.0 then\n        letter_grade = 'D+'\n    elseif gpa\
    \ > -0.7 then\n        letter_grade = 'D'\n    elseif gpa > -0.3 then\n      \
    \  letter_grade = 'D-'\n    elseif gpa > -0.0 then\n        letter_grade = 'E'\n\
    \    else\n        letter_grade = 'F'\n    end\n    grades_table[1] = letter_grade\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv74u0jbi.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\"}\nstack traceback:\n\
    \t/tmp/tmpv74u0jbi.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = grades[i]\n    end\n\
    \    local grades_sorted = table.sort(grades_table)\n    local grades_length =\
    \ #grades_sorted\n    local grades_average = grades_length / 2\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2rm8vb_m.lua:79: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter = nil\n        if gpa > 4.0 then\n            letter = 'A+'\n       \
    \ elseif gpa > 3.7 then\n            letter = 'A'\n        elseif gpa > 3.3 then\n\
    \            letter = 'A-'\n        elseif gpa > 3.0 then\n            letter\
    \ = 'B+'\n        elseif gpa > 2.7 then\n            letter = 'B'\n        elseif\
    \ gpa > 2.3 then\n            letter = 'B-'\n        elseif gpa > 2.0 then\n \
    \           letter = 'C+'\n        elseif gpa > 1.7 then\n            letter =\
    \ 'C'\n        elseif gpa > 1.3 then\n            letter = 'C-'\n        elseif\
    \ gpa > 1.0 then\n            letter = 'D+'\n        elseif gpa > 0.7 then\n \
    \           letter = 'D'\n        elseif gpa > 0.0 then\n            letter =\
    \ 'D-'\n        else\n            letter = 'E'\n        end\n        grades_table[i]\
    \ = letter\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d7v2keb.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp7d7v2keb.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 0\n    for i = 1, #grades do\n        grades_table[i] =\
    \ grades[i]\n    end\n    local grades_table_sorted = table.sort(grades_table)\n\
    \    local grades_table_sorted_length = #grades_table_sorted\n    local grades_table_sorted_index\
    \ = grades_table_sorted_length - 1\n    local grades_table_sorted_value = grades_table_sorted[grades_table_sorted_index]\n\
    \    local grades_table_sorted_index_2 = grades_table_sorted_index - 1\n    local\
    \ grades_table_sorted_value_2 = grades_table_sorted[grades_table_sorted_index_2]\n\
    \    local grades_table_sorted_index_3 = grades_table_sorted_index - 2\n    local\
    \ grades_table_sorted_value_3 = grades_table_sorted[grades_table_sorted_index_3]\n\
    \    local grades_table_sorted_index_4 = grades_table_sorted_index - 3\n    local\
    \ grades_table_sorted_value_4 = grades_table_sorted[grades_table_sorted_index_4]\n\
    \    local grades_table_sorted_index_5 = grades_table_sorted_index - 4\n    local\
    \ grades_table_sorted_value_5 = grades_table_sorted[grades_table_sorted_index_5]\n\
    \    local grades_table_sorted_index_6 = grades_table_sorted_index - 5\n    local\
    \ grades_table_sorted_value_6 = grades_table_sorted[grades_table_sorted_index_6]\n\
    \    local grades_table_sorted_index_7 = grades_table_sorted_index - 6\n    local\
    \ grades_table_sorted_value_7 = grades_table_sorted[grades_table_sorted_index_7]\n\
    \    local grades_table_sorted_index_8 = grades_table_sorted_index - 7\n    local\
    \ grades_table_sorted_value_8 = grades_table_sorted[grades_table_sorted_index_8]\n\
    \    local grades_table_sorted_index_9 = grades_table_sorted_index - 8\n    local\
    \ grades_table_sorted_value_9 = grades_table_sorted[grades_table_sorted_index_9]\n\
    \    local grades_table_sorted_index_10 = grades_table_sorted_index - 9\n    local\
    \ grades_table_sorted_value_10 = grades_table_sorted[grades_table_sorted_index_10]\n\
    \    local grades_table_sorted_index_11 = grades_table_sorted_index - 10\n   \
    \ local grades_table_sorted_value_11 = grades_table_sorted[grades_table_sorted_index_11]\n\
    \    local grades_table_sorted_index_12 = grades_table_sorted_index - 11\n   \
    \ local grades_table_sorted_value_12 = grades_table_sorted[grades_table_sorted_index_12]\n\
    \    local grades_table_sorted_index_13 = grades_table_sorted_index - 12\n   \
    \ local grades_table_sorted_value_13 = grades_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2d5af8r4.lua:67: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    local grades_table = {}\n    local grades_table = {}\n    local grades_table\
    \ = {}\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph9jdgbxh.lua:108: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  local gpa_table\
    \ = {\n    4.0,'A+',\n    3.7,'A',\n    3.3,'A- ',\n    3.0,'B+',\n    2.7,'B',\n\
    \    2.3,'B-',\n    2.0,'C+',\n    1.7,'C',\n    1.3,'C-',\n    1.0,'D+',\n  \
    \  0.7,'D',\n    0.3,'D-',\n    0.0,'E',\n  }\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n  local gpa_table_length = #gpa_table\n\
    \  local gpa_table_length = #gpa_table\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl6rei6af.lua:89: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    grades_table[i] = grades[i]\n  end\n  \n\
    \  local grades_sorted = table.sort(grades_table)\n  local grades_sorted_reverse\
    \ = table.sort(grades_table, 'reverse')\n  \n  local grades_sorted_reverse_table\
    \ = {}\n  for i = 1, #grades_sorted_reverse do\n    grades_sorted_reverse_table[i]\
    \ = grades_sorted_reverse[i]\n  end\n  \n  local grades_sorted_reverse_table_sorted\
    \ = table.sort(grades_sorted_reverse_table)\n  \n  local grades_sorted_reverse_table_sorted_reverse\
    \ = table.sort(grades_sorted_reverse_table, 'reverse')\n  \n  local grades_sorted_reverse_table_sorted_reverse_table\
    \ = {}\n  for i = 1, #grades_sorted_reverse_table_sorted_reverse do\n    grades_sorted_reverse_table_sorted_reverse_table[i]\
    \ = grades_sorted_reverse_table_sorted_reverse[i]\n  end\n  \n  local grades_sorted_reverse_table_sorted_reverse_table_sorted\
    \ = table.sort(grades_sorted_reverse_table_sorted_reverse_table)\n  \n  local\
    \ grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse = table.sort(grades_sorted_reverse_table_sorted_reverse_table,\
    \ 'reverse')\n  \n  local grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table\
    \ = {}\n  for i = 1, #grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse\
    \ do\n    grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table[i]\
    \ = grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse[i]\n  end\n\
    \  \n  local grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted\
    \ = table.sort(grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table)\n\
    \  \n  local grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse\
    \ = table.sort(grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table,\
    \ 'reverse')\n  \n  local grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table\
    \ = {}\n  for i = 1, #grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse\
    \ do\n    grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table[i]\
    \ = grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse[i]\n\
    \  end\n  \n  local grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted\
    \ = table.sort(grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table)\n\
    \  \n  local grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse\
    \ = table.sort(grades_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table_sorted_reverse_table,\
    \ 'reverse')\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6jzvjtuy.lua:78: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade > 4.0 then\n            grades_table[i] = 'A+'\n        elseif grade >\
    \ 3.7 then\n            grades_table[i] = 'A'\n        elseif grade > 3.3 then\n\
    \            grades_table[i] = 'A-'\n        elseif grade > 3.0 then\n       \
    \     grades_table[i] = 'B+'\n        elseif grade > 2.7 then\n            grades_table[i]\
    \ = 'B'\n        elseif grade > 2.3 then\n            grades_table[i] = 'B-'\n\
    \        elseif grade > 2.0 then\n            grades_table[i] = 'C+'\n       \
    \ elseif grade > 1.7 then\n            grades_table[i] = 'C'\n        elseif grade\
    \ > 1.3 then\n            grades_table[i] = 'C-'\n        elseif grade > 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade > 0.7 then\n       \
    \     grades_table[i] = 'D'\n        elseif grade > 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy9zq6ot.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpyy9zq6ot.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    if gpa > 3.0 then\n        grades_table[3]\
    \ = letter\n        if gpa > 2.7 then\n            grades_table[4] = letter\n\
    \            if gpa > 2.0 then\n                grades_table[5] = letter\n   \
    \             if gpa > 1.7 then\n                    grades_table[6] = letter\n\
    \                    if gpa > 1.3 then\n                        grades_table[7]\
    \ = letter\n                        if gpa > 1.0 then\n                      \
    \      grades_table[8] = letter\n                            if gpa > 0.7 then\n\
    \                                grades_table[9] = letter\n                  \
    \              grades_table[10] = letter\n                            end\n  \
    \                      end\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavoav9qa.lua:55:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3}\nstack traceback:\n\t/tmp/tmpavoav9qa.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68jsyoik.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp68jsyoik.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2uukbvl.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpn2uukbvl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[gpa]\
    \ = letter\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcb3o269t.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmpcb3o269t.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    grades_table[3] = gpa\n    grades_table[4]\
    \ = letter\n    grades_table[5] = gpa\n    grades_table[6] = letter\n    grades_table[7]\
    \ = gpa\n    grades_table[8] = letter\n    grades_table[9] = gpa\n    grades_table[10]\
    \ = letter\n    grades_table[11] = gpa\n    grades_table[12] = letter\n    grades_table[13]\
    \ = gpa\n    grades_table[14] = letter\n    grades_table[15] = gpa\n    grades_table[16]\
    \ = letter\n    grades_table[17] = gpa\n    grades_table[18] = letter\n    grades_table[19]\
    \ = gpa\n    grades_table[20] = letter\n    grades_table[21] = gpa\n    grades_table[22]\
    \ = letter\n    grades_table[23] = gpa\n    grades_table[24] = letter\n    grades_table[25]\
    \ = gpa\n    grades_table[26] = letter\n    grades_table[27] = gpa\n    grades_table[28]\
    \ = letter\n    grades_table[29] = gpa\n    grades_table[30] = letter\n    grades_table[31]\
    \ = gpa\n    grades_table[32] = letter\n    grades_table[33] = gpa\n    grades_table[34]\
    \ = letter\n    grades_table[35] = gpa\n    grades_table[36] = letter\n    grades_table[37]\
    \ = gpa\n    grades_table[38] = letter\n    grades_table[39] = gpa\n    grades_table[40]\
    \ = letter\n    grades_table[41] = gpa\n    grades_table[42] = letter\n    grades_table[43]\
    \ = gpa\n    grades_table[44] = letter\n    grades_table[45] = gpa\n    grades_table[46]\
    \ = letter\n    grades_table[47] = gpa\n    grades_table[48] = letter\n    grades_table[49]\
    \ = gpa\n    grades_table[50] = letter\n    grades_table[51] = gpa\n    grades_table[52]\
    \ = letter\n    grades_table[53] = gpa\n    grades_table[54] = letter\n    grades_table[55]\
    \ = gpa\n    grades_table[56] = letter\n    grades_table[57] = gpa\n    grades_table[58]\
    \ = letter\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8m_qzcss.lua:96: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[gpa]\
    \ = letter\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcb3o269t.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmpcb3o269t.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {}\n        grades_table[i][1]\
    \ = grades[i]\n        grades_table[i][2] = grades[i]\n        grades_table[i][3]\
    \ = grades[i]\n        grades_table[i][4] = grades[i]\n        grades_table[i][5]\
    \ = grades[i]\n        grades_table[i][6] = grades[i]\n        grades_table[i][7]\
    \ = grades[i]\n        grades_table[i][8] = grades[i]\n        grades_table[i][9]\
    \ = grades[i]\n        grades_table[i][10] = grades[i]\n        grades_table[i][11]\
    \ = grades[i]\n        grades_table[i][12] = grades[i]\n        grades_table[i][13]\
    \ = grades[i]\n        grades_table[i][14] = grades[i]\n        grades_table[i][15]\
    \ = grades[i]\n        grades_table[i][16] = grades[i]\n        grades_table[i][17]\
    \ = grades[i]\n        grades_table[i][18] = grades[i]\n        grades_table[i][19]\
    \ = grades[i]\n        grades_table[i][20] = grades[i]\n        grades_table[i][21]\
    \ = grades[i]\n        grades_table[i][22] = grades[i]\n        grades_table[i][23]\
    \ = grades[i]\n    end\n    local grades_table_sorted = {}\n    for i = 1, #grades_table\
    \ do\n        table.insert(grades_table_sorted, grades_table[i])\n    end\n  \
    \  table.sort(grades_table_sorted)\n    local grades_table_sorted_sorted = {}\n\
    \    for i = 1, #grades_table_sorted do\n        table.insert(grades_table_sorted_sorted,\
    \ grades_table_sorted[i])\n    end\n    local grades_table_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted do\n        table.insert(grades_table_sorted_sorted_sorted,\
    \ grades_table_sorted_sorted[i])\n    end\n    local grades_table_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted do\n        table.insert(grades_table_sorted_sorted_sorted_sorted,\
    \ grades_table_sorted_sorted_sorted[i])\n    end\n    local grades_table_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted do\n        table.insert(grades_table_sorted_sorted_sorted_sorted_sorted,\
    \ grades_table_sorted_sorted_sorted_sorted[i])\n    end\n    local grades_table_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n    for i = 1, #grades_table_sorted_sorted_sorted_sorted_sorted do\n \
    \       table.insert(grades_table_sorted_sorted_sorted_sorted_sorted_sorted, grades_table_sorted_sorted_sorted_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ppx16ha.lua:73: '')'' expected (to close ''('' at line 72)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local gpa = grades[i]\n    local letter =\
    \ nil\n    if gpa < 4.0 then\n      letter = 'A+'\n    elseif gpa > 3.7 then\n\
    \      letter = 'A'\n    elseif gpa > 3.3 then\n      letter = 'A-'\n    elseif\
    \ gpa > 3.0 then\n      letter = 'B+'\n    elseif gpa > 2.7 then\n      letter\
    \ = 'B'\n    elseif gpa > 2.3 then\n      letter = 'B-'\n    elseif gpa > 2.0\
    \ then\n      letter = 'C+'\n    elseif gpa > 1.7 then\n      letter = 'C'\n \
    \   elseif gpa > 1.3 then\n      letter = 'C-'\n    elseif gpa > 1.0 then\n  \
    \    letter = 'D+'\n    elseif gpa > 0.7 then\n      letter = 'D'\n    elseif\
    \ gpa > 0.0 then\n      letter = 'D-'\n    else\n      letter = 'E'\n    end\n\
    \    grades_table[i] = letter\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1fa6e2q.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"A+\", \"\
    A+\", \"A+\", \"A+\"}\nstack traceback:\n\t/tmp/tmpg1fa6e2q.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 0\n    for _, grade in ipairs(grades) do\n        grades_table[i]\
    \ = grade\n        i = i + 1\n    end\n    local grades_sorted = {}\n    table.sort(grades_table)\n\
    \    for _, grade in ipairs(grades_sorted) do\n        grades_sorted[#grades_sorted\
    \ + 1] = grade\n    end\n    local grades_final = {}\n    for _, grade in ipairs(grades_sorted)\
    \ do\n        grades_final[#grades_final + 1] = grade\n    end\n    return grades_final\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b_5dn1e.lua:43:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmp6b_5dn1e.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = {}\n      grades_table[i][1]\
    \ = grades[i]\n      if grades[i] < 3.0 then\n         grades_table[i][2] = 'A+'\n\
    \      elseif grades[i] < 3.7 then\n         grades_table[i][2] = 'A'\n      elseif\
    \ grades[i] < 4.0 then\n         grades_table[i][2] = 'A-'\n      elseif grades[i]\
    \ < 4.3 then\n         grades_table[i][2] = 'B+'\n      elseif grades[i] < 4.7\
    \ then\n         grades_table[i][2] = 'B'\n      elseif grades[i] < 5.0 then\n\
    \         grades_table[i][2] = 'B-'\n      elseif grades[i] < 5.3 then\n     \
    \    grades_table[i][2] = 'C+'\n      elseif grades[i] < 5.7 then\n         grades_table[i][2]\
    \ = 'C'\n      elseif grades[i] < 6.0 then\n         grades_table[i][2] = 'C-'\n\
    \      elseif grades[i] < 6.3 then\n         grades_table[i][2] = 'D+'\n     \
    \ elseif grades[i] < 6.7 then\n         grades_table[i][2] = 'D'\n      elseif\
    \ grades[i] < 7.0 then\n         grades_table[i][2] = 'D-'\n      elseif grades[i]\
    \ < 7.3 then\n         grades_table[i][2] = 'E'\n      else\n         grades_table[i][2]\
    \ = 'F'\n      end\n   end\n   return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg960zt5_.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"B+\"}, {3,\
    \ \"A\"}, {1.7, \"A+\"}, {2, \"A+\"}, {3.5, \"A\"}}\nstack traceback:\n\t/tmp/tmpg960zt5_.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local lettergrade\n    \n    if gpa >=\
    \ 4.0 then\n        lettergrade = 'A+'\n    elseif gpa > 3.7 then\n        lettergrade\
    \ = 'A'\n    elseif gpa > 3.3 then\n        lettergrade = 'A-'\n    elseif gpa\
    \ > 3.0 then\n        lettergrade = 'B+'\n    elseif gpa > 2.7 then\n        lettergrade\
    \ = 'B'\n    elseif gpa > 2.3 then\n        lettergrade = 'B-'\n    elseif gpa\
    \ > 2.0 then\n        lettergrade = 'C+'\n    elseif gpa > 1.7 then\n        lettergrade\
    \ = 'C'\n    elseif gpa > 1.3 then\n        lettergrade = 'C-'\n    elseif gpa\
    \ > 1.0 then\n        lettergrade = 'D+'\n    elseif gpa > 0.7 then\n        lettergrade\
    \ = 'D'\n    elseif gpa > 0.0 then\n        lettergrade = 'D-'\n    else\n   \
    \     lettergrade = 'E'\n    end\n    \n    grades_table[1] = lettergrade\n  \
    \  \n    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pit91a3.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\"}\nstack traceback:\n\
    \t/tmp/tmp8pit91a3.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = {}\n      grades_table[i][1]\
    \ = grades[i]\n      if grades[i] >= 4.0 then\n         grades_table[i][2] = 'A+'\n\
    \      elseif grades[i] >= 3.7 then\n         grades_table[i][2] = 'A'\n     \
    \ elseif grades[i] >= 3.3 then\n         grades_table[i][2] = 'A-'\n      elseif\
    \ grades[i] >= 3.0 then\n         grades_table[i][2] = 'B+'\n      elseif grades[i]\
    \ >= 2.7 then\n         grades_table[i][2] = 'B'\n      elseif grades[i] >= 2.3\
    \ then\n         grades_table[i][2] = 'B-'\n      elseif grades[i] >= 2.0 then\n\
    \         grades_table[i][2] = 'C+'\n      elseif grades[i] >= 1.7 then\n    \
    \     grades_table[i][2] = 'C'\n      elseif grades[i] >= 1.3 then\n         grades_table[i][2]\
    \ = 'C-'\n      elseif grades[i] >= 1.0 then\n         grades_table[i][2] = 'D+'\n\
    \      elseif grades[i] >= 0.7 then\n         grades_table[i][2] = 'D'\n     \
    \ elseif grades[i] >= 0.0 then\n         grades_table[i][2] = 'D-'\n      else\n\
    \         grades_table[i][2] = 'E'\n      end\n   end\n   return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wz0okg9.lua:60:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"A+\"}, {3,\
    \ \"B+\"}, {1.7, \"C\"}, {2, \"C+\"}, {3.5, \"A-\"}}\nstack traceback:\n\t/tmp/tmp8wz0okg9.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = {\n         gpa = grades[i],\n\
    \         letter_grade = \n            grades[i] >= 4.0 and\n            grades[i]\
    \ <= 5.0 and\n            grades[i] <= 6.0 and\n            grades[i] <= 7.0 and\n\
    \            grades[i] <= 8.0 and\n            grades[i] <= 9.0 and\n        \
    \    grades[i] <= 10.0 and\n            grades[i] <= 11.0 and\n            grades[i]\
    \ <= 12.0 and\n            grades[i] <= 13.0 and\n            grades[i] <= 14.0\
    \ and\n            grades[i] <= 15.0 and\n            grades[i] <= 16.0 and\n\
    \            grades[i] <= 17.0 and\n            grades[i] <= 18.0 and\n      \
    \      grades[i] <= 19.0 and\n            grades[i] <= 20.0 and\n            grades[i]\
    \ <= 21.0 and\n            grades[i] <= 22.0 and\n            grades[i] <= 23.0\
    \ and\n            grades[i] <= 24.0 and\n            grades[i] <= 25.0 and\n\
    \            grades[i] <= 26.0 and\n            grades[i] <= 27.0 and\n      \
    \      grades[i] <= 28.0 and\n            grades[i] <= 29.0 and\n            grades[i]\
    \ <= 30.0 and\n            grades[i] <= 31.0 and\n            grades[i] <= 32.0\
    \ and\n            grades[i] <= 33.0 and\n            grades[i] <= 34.0 and\n\
    \            grades[i] <= 35.0 and\n            grades[i] <= 36.0 and\n      \
    \      grades[i] <= 37.0 and\n            grades[i] <= 38.0 and\n            grades[i]\
    \ <= 39.0 and\n            grades[i] <= 40.0 and\n            grades[i] <= 41.0\
    \ and\n            grades[i] <= 42.0 and\n            grades[i] <= 43.0 and\n\
    \            grades[i] <= 44.0 and\n            grades[i] <= 45.0 and\n      \
    \      grades[i] <= 46.0 and\n            grades[i] <= 47.0 and\n            grades[i]\
    \ <= 48.0 and\n            grades[i] <= 49.0 and\n            grades[i] <= 50.0\
    \ and\n            grades[i] <= 51.0 and\n            grades[i] <= 52.0 and\n\
    \            grades[i] <= 53.0 and\n            grades[i] <= 54.0 and\n      \
    \      grades[i] <= 55.0 and\n            grades[i] <= 56.0 and\n            grades[i]\
    \ <= 57.0 and\n            grades[i] <= 58.0 and\n            grades[i] <= 59.0\
    \ and\n            grades[i] <= 60.0 and\n            grades[i] <= 61.0 and\n\
    \            grades[i] \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu_pqs4sp.lua:86: ''}'' expected (to close ''{'' at line 24)
    near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 0\n    for key, value in pairs(grades) do\n        grades_table[i]\
    \ = {GPA = value, Letter = key}\n        i = i + 1\n    end\n    table.sort(grades_table)\n\
    \    local grades_length = #grades_table\n    local grades_index = 1\n    local\
    \ grades_letters = {}\n    local grades_letters_index = 1\n    local grades_letters_length\
    \ = 1\n    local grades_letters_index = 1\n    local grades_letters_index = 1\n\
    \    local grades_letters_index = 1\n    local grades_letters_index = 1\n    local\
    \ grades_letters_index = 1\n    local grades_letters_index = 1\n    local grades_letters_index\
    \ = 1\n    local grades_letters_index = 1\n    local grades_letters_index = 1\n\
    \    local grades_letters_index = 1\n    local grades_letters_index = 1\n    local\
    \ grades_letters_index = 1\n    local grades_letters_index = 1\n    local grades_letters_index\
    \ = 1\n    local grades_letters_index = 1\n    local grades_letters_index = 1\n\
    \    local grades_letters_index = 1\n    local grades_letters_index = 1\n    local\
    \ grades_letters_index = 1\n    local grades_letters_index = 1\n    local grades_letters_index\
    \ = 1\n    local grades_letters_index = 1\n    local grades_letters_index = 1\n\
    \    local grades_letters_index = 1\n    local grades_letters_index = 1\n    local\
    \ grades_letters_index = 1\n    local grades_letters_index = 1\n    local grades_letters_index\
    \ = 1\n    local grades_letters_index = 1\n    local grades_letters_index = 1\n\
    \    local grades_letters_index = 1\n    local grades_letters_index = 1\n    local\
    \ grades_letters_index = 1\n    local grades_letters_index = 1\n    local grades_letters_index\
    \ = 1\n    local grades_letters_index = 1\n    local grades_letters_index = 1\n\
    \    local grades_letters_index = 1\n    local grades_letters_index = 1\n    local\
    \ grades_letters_index = 1\n    local grades_letters_index = 1\n    local grades_letters_index\
    \ = 1\n    local grades_letters_index = 1\n    local grades_letters_index = 1\n\
    \    local grades_letters_index = 1\n    local grades_letters_index = 1\n    local\
    \ grades_letters_index = 1\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpve1twpj9.lua:94: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = grades[i]\n   end\n\
    \   local grades_sorted = table.sort(grades_table)\n   local grades_sorted_length\
    \ = #grades_sorted\n   local grades_sorted_index = grades_sorted_length - 1\n\
    \   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local grades_sorted_index\
    \ = grades_sorted_index - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n\
    \   local grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grades_sorted_index = grades_sorted_index\
    \ - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local\
    \ grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grades_sorted_index = grades_sorted_index\
    \ - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local\
    \ grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grades_sorted_index = grades_sorted_index\
    \ - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local\
    \ grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grades_sorted_index = grades_sorted_index\
    \ - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local\
    \ grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grades_sorted_index = grades_sorted_index\
    \ - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local\
    \ grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grades_sorted_index = grades_sorted_index\
    \ - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local\
    \ grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grades_sorted_index = grades_sorted_index\
    \ - 1\n   local grades_sorted_value = grades_sorted[grades_sorted_index]\n   local\
    \ grades_sorted_index = grades_sorted_index - 1\n   local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n   local grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvyl61tzt.lua:75: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter_grade\n  \n  if gpa >= 4.0 then\n\
    \    letter_grade = 'A+'\n  elseif gpa > 3.7 then\n    letter_grade = 'A'\n  elseif\
    \ gpa > 3.3 then\n    letter_grade = 'A-'\n  elseif gpa > 3.0 then\n    letter_grade\
    \ = 'B+'\n  elseif gpa > 2.7 then\n    letter_grade = 'B'\n  elseif gpa > 2.3\
    \ then\n    letter_grade = 'B-'\n  elseif gpa > 2.0 then\n    letter_grade = 'C+'\n\
    \  elseif gpa > 1.7 then\n    letter_grade = 'C'\n  elseif gpa > 1.3 then\n  \
    \  letter_grade = 'C-'\n  elseif gpa > 1.0 then\n    letter_grade = 'D+'\n  elseif\
    \ gpa > 0.7 then\n    letter_grade = 'D'\n  elseif gpa > 0.0 then\n    letter_grade\
    \ = 'D-'\n  else\n    letter_grade = 'E'\n  end\n  \n  table.insert(grades_table,\
    \ gpa, letter_grade)\n  return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaaol2b52.lua:54:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpaaol2b52.lua:54:\
    \ in local 'candidate'\n\t/tmp/tmpaaol2b52.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\n  local grades_sum = 0\n  for i = 1, #grades do\n    grades_sum =\
    \ grades_sum + grades[i]\n  end\n  \n  local grades_avg = grades_sum / #grades\n\
    \  \n  local grades_min = grades[1]\n  local grades_max = grades[#grades]\n  \n\
    \  local grades_min_diff = grades_max - grades_min\n  local grades_max_diff =\
    \ grades_max - grades_avg\n  \n  if grades_min_diff > grades_max_diff then\n \
    \   return grades_min .. \"+\" \n  elseif grades_min_diff < grades_max_diff then\n\
    \    return grades_min .. \"-\"\n  else\n    return grades_min .. \"+\"\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm0dil0b.lua:48:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"4.0-\"\nstack traceback:\n\
    \t/tmp/tmpnm0dil0b.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    grades_table[gpa]\
    \ = grade\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66qx4kgo.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmp66qx4kgo.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2uukbvl.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpn2uukbvl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_sorted\
    \ = table.sort(grades)\n   local grades_sorted_length = #grades_sorted\n   local\
    \ grades_sorted_index = 1\n   local grades_sorted_value = grades_sorted[1]\n \
    \  local grades_sorted_index_plus_one = grades_sorted_index + 1\n   local grades_sorted_value_plus_one\
    \ = grades_sorted_value + 1\n   local grades_sorted_index_minus_one = grades_sorted_index\
    \ - 1\n   local grades_sorted_value_minus_one = grades_sorted_value - 1\n   local\
    \ grades_sorted_index_minus_two = grades_sorted_index - 2\n   local grades_sorted_value_minus_two\
    \ = grades_sorted_value - 2\n   local grades_sorted_index_minus_three = grades_sorted_index\
    \ - 3\n   local grades_sorted_value_minus_three = grades_sorted_value - 3\n  \
    \ local grades_sorted_index_minus_four = grades_sorted_index - 4\n   local grades_sorted_value_minus_four\
    \ = grades_sorted_value - 4\n   local grades_sorted_index_minus_five = grades_sorted_index\
    \ - 5\n   local grades_sorted_value_minus_five = grades_sorted_value - 5\n   local\
    \ grades_sorted_index_minus_six = grades_sorted_index - 6\n   local grades_sorted_value_minus_six\
    \ = grades_sorted_value - 6\n   local grades_sorted_index_minus_seven = grades_sorted_index\
    \ - 7\n   local grades_sorted_value_minus_seven = grades_sorted_value - 7\n  \
    \ local grades_sorted_index_minus_eight = grades_sorted_index - 8\n   local grades_sorted_value_minus_eight\
    \ = grades_sorted_value - 8\n   local grades_sorted_index_minus_nine = grades_sorted_index\
    \ - 9\n   local grades_sorted_value_minus_nine = grades_sorted_value - 9\n   local\
    \ grades_sorted_index_minus_ten = grades_sorted_index - 10\n   local grades_sorted_value_minus_ten\
    \ = grades_sorted_value - 10\n   local grades_sorted_index_minus_eleven = grades_sorted_index\
    \ - 11\n   local grades_sorted_value_minus_eleven = grades_sorted_value - 11\n\
    \   local grades_sorted_index_minus_twelve = grades_sorted_index - 12\n   local\
    \ grades_sorted_value_minus_twelve = grades_sorted_value - 12\n   local grades_sorted_index_minus_thirteen\
    \ = grades_sorted_index - 13\n   local grades_sorted_value_minus_thirteen = grades_sorted_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcnom6r7v.lua:66: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = grades[i]\n    end\n\
    \    local grades_sorted = table.sort(grades_table)\n    local grades_reversed\
    \ = table.sort(grades_sorted, function(a, b) return a < b end)\n    local grades_reversed_sorted\
    \ = table.sort(grades_reversed, function(a, b) return a < b end)\n    local grades_reversed_sorted_index\
    \ = table.find(grades_reversed_sorted, function(grade) return grade > 0.0 end)\n\
    \    local grades_reversed_sorted_index_length = #grades_reversed_sorted_index\n\
    \    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_sorted_index_length\
    \ - 1\n    local grades_reversed_sorted_index_length = grades_reversed_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjjofbmd6.lua:65: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local grade = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = 'A+'\n  if gpa > 3.7 then\n    grades_table[3] =\
    \ 'A'\n  elseif gpa > 3.3 then\n    grades_table[4] = 'A-'\n  elseif gpa > 3.0\
    \ then\n    grades_table[5] = 'B+'\n  elseif gpa > 2.7 then\n    grades_table[6]\
    \ = 'B'\n  elseif gpa > 2.3 then\n    grades_table[7] = 'B-'\n  elseif gpa > 2.0\
    \ then\n    grades_table[8] = 'C+'\n  elseif gpa > 1.7 then\n    grades_table[9]\
    \ = 'C'\n  elseif gpa > 1.3 then\n    grades_table[10] = 'C-'\n  elseif gpa >\
    \ 1.0 then\n    grades_table[11] = 'D+'\n  elseif gpa > 0.7 then\n    grades_table[12]\
    \ = 'D'\n  elseif gpa > 0.0 then\n    grades_table[13] = 'D-'\n  else\n    grades_table[14]\
    \ = 'E'\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsya7zrgp.lua:58:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, \"A+\", \"A\"\
    }\nstack traceback:\n\t/tmp/tmpsya7zrgp.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68jsyoik.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp68jsyoik.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter = nil\n        if gpa > 4.0 then\n            letter = 'A+'\n       \
    \ elseif gpa > 3.7 then\n            letter = 'A'\n        elseif gpa > 3.3 then\n\
    \            letter = 'A-'\n        elseif gpa > 3.0 then\n            letter\
    \ = 'B+'\n        elseif gpa > 2.7 then\n            letter = 'B'\n        elseif\
    \ gpa > 2.3 then\n            letter = 'B-'\n        elseif gpa > 2.0 then\n \
    \           letter = 'C+'\n        elseif gpa > 1.7 then\n            letter =\
    \ 'C'\n        elseif gpa > 1.3 then\n            letter = 'C-'\n        elseif\
    \ gpa > 1.0 then\n            letter = 'D+'\n        elseif gpa > 0.7 then\n \
    \           letter = 'D'\n        elseif gpa > 0.0 then\n            letter =\
    \ 'D-'\n        else\n            letter = 'E'\n        end\n        grades_table[i]\
    \ = letter\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d7v2keb.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp7d7v2keb.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter = nil\n        if gpa > 4.0 then\n            letter = 'A+'\n       \
    \ elseif gpa > 3.7 then\n            letter = 'A'\n        elseif gpa > 3.3 then\n\
    \            letter = 'A-'\n        elseif gpa > 3.0 then\n            letter\
    \ = 'B+'\n        elseif gpa > 2.7 then\n            letter = 'B'\n        elseif\
    \ gpa > 2.3 then\n            letter = 'B-'\n        elseif gpa > 2.0 then\n \
    \           letter = 'C+'\n        elseif gpa > 1.7 then\n            letter =\
    \ 'C'\n        elseif gpa > 1.3 then\n            letter = 'C-'\n        elseif\
    \ gpa > 1.0 then\n            letter = 'D+'\n        elseif gpa > 0.7 then\n \
    \           letter = 'D'\n        elseif gpa > 0.0 then\n            letter =\
    \ 'D-'\n        else\n            letter = 'E'\n        end\n        grades_table[i]\
    \ = letter\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d7v2keb.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp7d7v2keb.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\n  -- The function should return a list of letter grades\n  -- The\
    \ grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return a list of letter grades\n  --\
    \ The grades argument is a list of GPAs for some students\n  -- The function should\
    \ return a list of letter grades\n  -- The grades argument is a list of GPAs for\
    \ some students\n  -- The function should return \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu3940khl.lua:76: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter = nil\n        if gpa > 3.0 then\n            letter = 'A+'\n       \
    \ elseif gpa > 2.7 then\n            letter = 'A'\n        elseif gpa > 2.0 then\n\
    \            letter = 'B+'\n        elseif gpa > 1.7 then\n            letter\
    \ = 'B'\n        elseif gpa > 1.3 then\n            letter = 'B-'\n        elseif\
    \ gpa > 1.0 then\n            letter = 'C+'\n        elseif gpa > 0.7 then\n \
    \           letter = 'C'\n        elseif gpa > 0.3 then\n            letter =\
    \ 'C-'\n        elseif gpa > 0.0 then\n            letter = 'D+'\n        elseif\
    \ gpa > 0.0 then\n            letter = 'D'\n        elseif gpa > 0.0 then\n  \
    \          letter = 'D-'\n        else\n            letter = 'E'\n        end\n\
    \        grades_table[i] = letter\n    end\n    return grades_table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu235_5r.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A\", \"\
    B-\", \"B\", \"A+\"}\nstack traceback:\n\t/tmp/tmpzu235_5r.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade > 0 then\n            grades_table[i] = grade - 0.5\n        else\n  \
    \          grades_table[i] = 0\n        end\n    end\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxht9q2_w.lua:37:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {3.5, 2.5, 1.2, 1.5,\
    \ 3.0}\nstack traceback:\n\t/tmp/tmpxht9q2_w.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade > 4.0 then\n            grades_table[i] = 'A+'\n        elseif grade >\
    \ 3.7 then\n            grades_table[i] = 'A'\n        elseif grade > 3.3 then\n\
    \            grades_table[i] = 'A-'\n        elseif grade > 3.0 then\n       \
    \     grades_table[i] = 'B+'\n        elseif grade > 2.7 then\n            grades_table[i]\
    \ = 'B'\n        elseif grade > 2.3 then\n            grades_table[i] = 'B-'\n\
    \        elseif grade > 2.0 then\n            grades_table[i] = 'C+'\n       \
    \ elseif grade > 1.7 then\n            grades_table[i] = 'C'\n        elseif grade\
    \ > 1.3 then\n            grades_table[i] = 'C-'\n        elseif grade > 1.0 then\n\
    \            grades_table[i] = 'D+'\n        elseif grade > 0.7 then\n       \
    \     grades_table[i] = 'D'\n        elseif grade > 0.0 then\n            grades_table[i]\
    \ = 'D-'\n        else\n            grades_table[i] = 'E'\n        end\n    end\n\
    \    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy9zq6ot.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmpyy9zq6ot.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = {}\n      grades_table[i][1]\
    \ = grades[i]\n      if grades[i] < 3.0 then\n         grades_table[i][2] = 'A+'\n\
    \      elseif grades[i] < 3.7 then\n         grades_table[i][2] = 'A'\n      elseif\
    \ grades[i] < 4.0 then\n         grades_table[i][2] = 'A-'\n      elseif grades[i]\
    \ < 4.7 then\n         grades_table[i][2] = 'B+'\n      elseif grades[i] < 5.0\
    \ then\n         grades_table[i][2] = 'B'\n      elseif grades[i] < 5.7 then\n\
    \         grades_table[i][2] = 'B-'\n      elseif grades[i] < 6.0 then\n     \
    \    grades_table[i][2] = 'C+'\n      elseif grades[i] < 6.7 then\n         grades_table[i][2]\
    \ = 'C'\n      elseif grades[i] < 7.0 then\n         grades_table[i][2] = 'C-'\n\
    \      elseif grades[i] < 7.7 then\n         grades_table[i][2] = 'D+'\n     \
    \ elseif grades[i] < 8.0 then\n         grades_table[i][2] = 'D'\n      elseif\
    \ grades[i] < 8.7 then\n         grades_table[i][2] = 'D-'\n      elseif grades[i]\
    \ < 9.0 then\n         grades_table[i][2] = 'E'\n      else\n         grades_table[i][2]\
    \ = 'F'\n      end\n   end\n   return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh394v9r.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"B+\"}, {3,\
    \ \"A\"}, {1.7, \"A+\"}, {2, \"A+\"}, {3.5, \"A\"}}\nstack traceback:\n\t/tmp/tmpoh394v9r.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter\n  if gpa > 3.7 then\n    grades_table[3]\
    \ = \"A+\"\n  elseif gpa > 3.3 then\n    grades_table[3] = \"A\"\n  elseif gpa\
    \ > 3.0 then\n    grades_table[3] = \"B+\"\n  elseif gpa > 2.7 then\n    grades_table[3]\
    \ = \"B\"\n  elseif gpa > 2.3 then\n    grades_table[3] = \"B-\"\n  elseif gpa\
    \ > 2.0 then\n    grades_table[3] = \"C+\"\n  elseif gpa > 1.7 then\n    grades_table[3]\
    \ = \"C\"\n  elseif gpa > 1.3 then\n    grades_table[3] = \"C-\"\n  elseif gpa\
    \ > 1.0 then\n    grades_table[3] = \"D+\"\n  elseif gpa > 0.7 then\n    grades_table[3]\
    \ = \"D\"\n  elseif gpa > 0.0 then\n    grades_table[3] = \"D-\"\n  else\n   \
    \ grades_table[3] = \"E\"\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfakonvo_.lua:58:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3, \"A+\"}\n\
    stack traceback:\n\t/tmp/tmpfakonvo_.lua:58: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local grades_table_length = #grades\n  local grades_table_max_index\
    \ = grades_table_length - 1\n  local grades_table_min_index = 1\n  local grades_table_max_value\
    \ = grades[grades_table_max_index]\n  local grades_table_min_value = grades[grades_table_min_index]\n\
    \  local grades_table_min_value_diff = grades_table_max_value - grades_table_min_value\n\
    \  local grades_table_max_value_diff = grades_table_min_value - grades_table_max_value\n\
    \  local grades_table_max_value_diff_sign = grades_table_max_value_diff > 0 and\
    \ 1 or -1\n  local grades_table_min_value_diff_sign = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_2 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_2 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_3 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_3 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_4 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_4 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_5 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_5 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_6 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_6 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_7 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_7 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_8 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_8 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_9 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_value_diff_sign_9 = grades_table_min_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_max_value_diff_sign_10 = grades_table_max_value_diff\
    \ > 0 and 1 or -1\n  local grades_table_min_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoxtqmcv6.lua:62: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = grades[i]\n    end\n\
    \    local grades_sorted = table.sort(grades_table)\n    local grades_sorted_reverse\
    \ = table.sort(grades_table, function(a, b) return a < b end)\n    local grades_sorted_reverse2\
    \ = table.sort(grades_sorted_reverse, function(a, b) return a < b end)\n    local\
    \ grades_sorted_reverse3 = table.sort(grades_sorted_reverse2, function(a, b) return\
    \ a < b end)\n    local grades_sorted_reverse4 = table.sort(grades_sorted_reverse3,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse5 = table.sort(grades_sorted_reverse4,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse6 = table.sort(grades_sorted_reverse5,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse7 = table.sort(grades_sorted_reverse6,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse8 = table.sort(grades_sorted_reverse7,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse9 = table.sort(grades_sorted_reverse8,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse10 = table.sort(grades_sorted_reverse9,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse11 = table.sort(grades_sorted_reverse10,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse12 = table.sort(grades_sorted_reverse11,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse13 = table.sort(grades_sorted_reverse12,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse14 = table.sort(grades_sorted_reverse13,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse15 = table.sort(grades_sorted_reverse14,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse16 = table.sort(grades_sorted_reverse15,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse17 = table.sort(grades_sorted_reverse16,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse18 = table.sort(grades_sorted_reverse17,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse19 = table.sort(grades_sorted_reverse18,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse20 = table.sort(grades_sorted_reverse19,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse21 = table.sort(grades_sorted_reverse20,\
    \ function(a, b) return a < b end)\n    local grades_sorted_reverse\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkjk_evwg.lua:61: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = \"A+\"\n    if gpa > 3.7 then\n        grades_table[3]\
    \ = \"A\"\n    elseif gpa > 3.3 then\n        grades_table[4] = \"A-\"\n    elseif\
    \ gpa > 3.0 then\n        grades_table[5] = \"B+\"\n    elseif gpa > 2.7 then\n\
    \        grades_table[6] = \"B\"\n    elseif gpa > 2.3 then\n        grades_table[7]\
    \ = \"B-\"\n    elseif gpa > 2.0 then\n        grades_table[8] = \"C+\"\n    elseif\
    \ gpa > 1.7 then\n        grades_table[9] = \"C\"\n    elseif gpa > 1.3 then\n\
    \        grades_table[10] = \"C-\"\n    elseif gpa > 1.0 then\n        grades_table[11]\
    \ = \"D+\"\n    elseif gpa > 0.7 then\n        grades_table[12] = \"D\"\n    elseif\
    \ gpa > 0.0 then\n        grades_table[13] = \"D-\"\n    else\n        grades_table[14]\
    \ = \"E\"\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_b974yn.lua:58:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, \"A+\", \"A\"\
    }\nstack traceback:\n\t/tmp/tmpy_b974yn.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        local\
    \ gpa = grade[1]\n        local letter = grade[2]\n        grades_table[i] = {gpa,\
    \ letter}\n    end\n    grades_table.sort(function(a, b) return a[1] < b[1] end)\n\
    \    local grades_sorted = {}\n    for i = 1, #grades_table do\n        grades_sorted[i]\
    \ = grades_table[i][1]\n    end\n    return grades_sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yem333o.lua:25:\
    \ attempt to index a number value (local 'grade')\nstack traceback:\n\t/tmp/tmp4yem333o.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp4yem333o.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter = string.upper(string.sub(gpa, 1, 1))\n        grades_table[i] = letter\n\
    \    end\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjj5mqx5.lua:34:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"4\", \"3\", \"\
    1\", \"2\", \"3\"}\nstack traceback:\n\t/tmp/tmpgjj5mqx5.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 0\n    for _, grade in ipairs(grades) do\n        if grade\
    \ > 0 then\n            grades_table[i] = grade\n            i = i + 1\n     \
    \   end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprytlx58e.lua:36:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {0=4.0, 3, 1.7, 2,\
    \ 3.5}\nstack traceback:\n\t/tmp/tmprytlx58e.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[gpa]\
    \ = letter\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi_dt8i1.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmpqi_dt8i1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcv3_bmp7.lua:104: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local grade = grades[2]\n  grades_table[gpa]\
    \ = grade\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8144dqy.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmp_8144dqy.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local total_grades = 0\n    local total_letters = 0\n    for i = 1,\
    \ #grades do\n        local grade = grades[i]\n        local letter_grade = string.upper(string.sub(grade,\
    \ 1, 1))\n        local gpa = grades[i]\n        if gpa > 0 then\n           \
    \ total_grades = total_grades + 1\n            grades_table[total_grades] = grades_table[total_grades]\
    \ .. letter_grade\n            total_letters = total_letters + 1\n        end\n\
    \    end\n    if total_grades > 0 then\n        grades_table[total_grades] = grades_table[total_grades]\
    \ .. \"-\"\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14lgt5fq.lua:31:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp14lgt5fq.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp14lgt5fq.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letter = nil\n    local grades_letter_length = nil\n \
    \   local grades_letter_length = #grades_letter\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\
    \ + 1\n    local grades_letter_length = grades_letter_length / grades_length\n\
    \    local grades_letter_length = grades_letter_length + 1\n    local grades_letter_length\
    \ = grades_letter_length / grades_length\n    local grades_letter_length = grades_letter_length\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnk7q_18x.lua:74: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    grades_table[3] = gpa\n    grades_table[4]\
    \ = letter\n    grades_table[5] = gpa\n    grades_table[6] = letter\n    grades_table[7]\
    \ = gpa\n    grades_table[8] = letter\n    grades_table[9] = gpa\n    grades_table[10]\
    \ = letter\n    grades_table[11] = gpa\n    grades_table[12] = letter\n    grades_table[13]\
    \ = gpa\n    grades_table[14] = letter\n    grades_table[15] = gpa\n    grades_table[16]\
    \ = letter\n    grades_table[17] = gpa\n    grades_table[18] = letter\n    grades_table[19]\
    \ = gpa\n    grades_table[20] = letter\n    grades_table[21] = gpa\n    grades_table[22]\
    \ = letter\n    grades_table[23] = gpa\n    grades_table[24] = letter\n    grades_table[25]\
    \ = gpa\n    grades_table[26] = letter\n    grades_table[27] = gpa\n    grades_table[28]\
    \ = letter\n    grades_table[29] = gpa\n    grades_table[30] = letter\n    grades_table[31]\
    \ = gpa\n    grades_table[32] = letter\n    grades_table[33] = gpa\n    grades_table[34]\
    \ = letter\n    grades_table[35] = gpa\n    grades_table[36] = letter\n    grades_table[37]\
    \ = gpa\n    grades_table[38] = letter\n    grades_table[39] = gpa\n    grades_table[40]\
    \ = letter\n    grades_table[41] = gpa\n    grades_table[42] = letter\n    grades_table[43]\
    \ = gpa\n    grades_table[44] = letter\n    grades_table[45] = gpa\n    grades_table[46]\
    \ = letter\n    grades_table[47] = gpa\n    grades_table[48] = letter\n    grades_table[49]\
    \ = gpa\n    grades_table[50] = letter\n    grades_table[51] = gpa\n    grades_table[52]\
    \ = letter\n    grades_table[53] = gpa\n    grades_table[54] = letter\n    grades_table[55]\
    \ = gpa\n    grades_table[56] = letter\n    grades_table[57] = gpa\n    grades_table[58]\
    \ = letter\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8m_qzcss.lua:96: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[gpa]\
    \ = letter\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi_dt8i1.lua:32:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4=3}\nstack traceback:\n\
    \t/tmp/tmpqi_dt8i1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter_grade\n    \n    if gpa >\
    \ 4.0 then\n        letter_grade = 'A+'\n    elseif gpa > 3.7 then\n        letter_grade\
    \ = 'A'\n    elseif gpa > 3.3 then\n        letter_grade = 'A-'\n    elseif gpa\
    \ > 3.0 then\n        letter_grade = 'B+'\n    elseif gpa > 2.7 then\n       \
    \ letter_grade = 'B'\n    elseif gpa > 2.3 then\n        letter_grade = 'B-'\n\
    \    elseif gpa > 2.0 then\n        letter_grade = 'C+'\n    elseif gpa > 1.7\
    \ then\n        letter_grade = 'C'\n    elseif gpa > 1.3 then\n        letter_grade\
    \ = 'C-'\n    elseif gpa > 1.0 then\n        letter_grade = 'D+'\n    elseif gpa\
    \ > 0.7 then\n        letter_grade = 'D'\n    elseif gpa > 0.0 then\n        letter_grade\
    \ = 'D-'\n    else\n        letter_grade = 'E'\n    end\n    \n    grades_table[1]\
    \ = letter_grade\n    \n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvb6evsk.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\"}\nstack traceback:\n\
    \t/tmp/tmpmvb6evsk.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {\n            GPA\
    \ = grades[i],\n            Letter = string.sub(grades[i], 1, 1) .. string.sub(grades[i],\
    \ 2, 1) .. string.sub(grades[i], 3, 1) .. string.sub(grades[i], 4, 1)\n      \
    \  }\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewazwafe.lua:35:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    {GPA=4.0,\
    \ Letter=\"4\"},\n    {GPA=3, Letter=\"3\"},\n    {GPA=1.7, Letter=\"1\"},\n \
    \   {GPA=2, Letter=\"2\"},\n    {GPA=3.5, Letter=\"3\"}\n}\nstack traceback:\n\
    \t/tmp/tmpewazwafe.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local lettergrade\n\
    \    if gpa > 3.0 then\n        lettergrade = 'A+'\n    elseif gpa > 2.7 then\n\
    \        lettergrade = 'A'\n    elseif gpa > 2.3 then\n        lettergrade = 'A-'\n\
    \    elseif gpa > 2.0 then\n        lettergrade = 'B+'\n    elseif gpa > 1.7 then\n\
    \        lettergrade = 'B'\n    elseif gpa > 1.3 then\n        lettergrade = 'B-'\n\
    \    elseif gpa > 1.0 then\n        lettergrade = 'C+'\n    elseif gpa > 0.7 then\n\
    \        lettergrade = 'C'\n    elseif gpa > 0.3 then\n        lettergrade = 'C-'\n\
    \    elseif gpa > 0.0 then\n        lettergrade = 'D+'\n    elseif gpa > -0.3\
    \ then\n        lettergrade = 'D'\n    elseif gpa > -0.7 then\n        lettergrade\
    \ = 'D-'\n    elseif gpa > -1.0 then\n        lettergrade = 'E'\n    else\n  \
    \      lettergrade = 'F'\n    end\n    grades_table[1] = gpa\n    grades_table[2]\
    \ = lettergrade\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xm3atjw.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, \"A+\"}\nstack\
    \ traceback:\n\t/tmp/tmp2xm3atjw.lua:63: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter\n  if gpa > 3.0 then\n    grades_table[3]\
    \ = letter\n  elseif gpa > 2.7 then\n    grades_table[4] = letter\n  elseif gpa\
    \ > 2.3 then\n    grades_table[5] = letter\n  elseif gpa > 2.0 then\n    grades_table[6]\
    \ = letter\n  elseif gpa > 1.7 then\n    grades_table[7] = letter\n  elseif gpa\
    \ > 1.3 then\n    grades_table[8] = letter\n  elseif gpa > 1.0 then\n    grades_table[9]\
    \ = letter\n  elseif gpa > 0.7 then\n    grades_table[10] = letter\n  elseif gpa\
    \ > 0.0 then\n    grades_table[11] = letter\n  else\n    grades_table[12] = letter\n\
    \  end\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh2fuk9g.lua:54:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3, 3}\nstack\
    \ traceback:\n\t/tmp/tmpmh2fuk9g.lua:54: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  for i = 1, #grades do\n    local gpa = grades[i]\n    local letter_grade\n\
    \    if gpa < 3.0 then\n      letter_grade = 'A+'\n    elseif gpa < 3.7 then\n\
    \      letter_grade = 'A'\n    elseif gpa < 4.0 then\n      letter_grade = 'A-'\n\
    \    elseif gpa < 4.7 then\n      letter_grade = 'B+'\n    elseif gpa < 5.0 then\n\
    \      letter_grade = 'B'\n    elseif gpa < 5.7 then\n      letter_grade = 'B-'\n\
    \    elseif gpa < 6.0 then\n      letter_grade = 'C+'\n    elseif gpa < 6.7 then\n\
    \      letter_grade = 'C'\n    elseif gpa < 7.0 then\n      letter_grade = 'C-'\n\
    \    elseif gpa < 7.7 then\n      letter_grade = 'D+'\n    elseif gpa < 8.0 then\n\
    \      letter_grade = 'D'\n    elseif gpa < 8.7 then\n      letter_grade = 'D-'\n\
    \    elseif gpa < 9.0 then\n      letter_grade = 'E'\n    end\n    grades_table[i]\
    \ = letter_grade\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbq2_j1b.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"B+\", \"A\", \"\
    A+\", \"A+\", \"A\"}\nstack traceback:\n\t/tmp/tmpdbq2_j1b.lua:61: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter_grade\n        if gpa > 3.0 then\n            letter_grade = 'A+'\n \
    \       elseif gpa > 2.7 then\n            letter_grade = 'A'\n        elseif\
    \ gpa > 2.3 then\n            letter_grade = 'A-'\n        elseif gpa > 2.0 then\n\
    \            letter_grade = 'B+'\n        elseif gpa > 1.7 then\n            letter_grade\
    \ = 'B'\n        elseif gpa > 1.3 then\n            letter_grade = 'B-'\n    \
    \    elseif gpa > 1.0 then\n            letter_grade = 'C+'\n        elseif gpa\
    \ > 0.7 then\n            letter_grade = 'C'\n        elseif gpa > 0.3 then\n\
    \            letter_grade = 'C-'\n        elseif gpa > 0.0 then\n            letter_grade\
    \ = 'D+'\n        elseif gpa > 0.0 then\n            letter_grade = 'D'\n    \
    \    else\n            letter_grade = 'D-'\n        end\n        grades_table[i]\
    \ = {gpa, letter_grade}\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3_jaw8v.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {{4.0, \"A+\"}, {3,\
    \ \"A\"}, {1.7, \"B-\"}, {2, \"B\"}, {3.5, \"A+\"}}\nstack traceback:\n\t/tmp/tmp_3_jaw8v.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local grades_table_length = #grades\n  local current_grade = 0\n  local\
    \ current_letter = 'A'\n  local current_gpa -- The GPA of the current student\n\
    \  local current_letter -- The letter grade of the current student\n  for i =\
    \ 1, grades_table_length do\n    current_gpa = grades[i]\n    if current_gpa >\
    \ 0 then\n      current_letter = current_gpa > 3.0 ? 'A+' :\n        current_gpa\
    \ > 2.7 ? 'A' :\n        current_gpa > 2.3 ? 'A-' :\n        current_gpa > 2.0\
    \ ? 'B+' :\n        current_gpa > 1.7 ? 'B' :\n        current_gpa > 1.3 ? 'B-'\
    \ :\n        current_gpa > 1.0 ? 'C+' :\n        current_gpa > 0.7 ? 'C' :\n \
    \       current_gpa > 0.3 ? 'C-' :\n        current_gpa > 0.0 ? 'D+' :\n     \
    \   current_gpa > 0.0 ? 'D' :\n        'E'\n      grades_table[i] = current_letter\n\
    \    end\n  end\n  return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp05pnt8sr.lua:31: unexpected symbol near ''?''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local grades_table_length = #grades\n    local index = 1\n    local\
    \ gpa\n    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    \    local letter_grade\n    local letter_grade_length\n    local letter_grade_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8m93gufm.lua:119: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = { \n    4.0 =\"A+\",\n    > 3.7 =\"A\",\n    > 3.3 =\"A-\",\n    > 3.0 =\"\
    B+\",\n    > 2.7 =\"B\",\n    > 2.3 =\"B-\",\n    > 2.0 =\"C+\",\n    > 1.7 =\"\
    C\",\n    > 1.3 =\"C-\",\n    > 1.0 =\"D+\",\n    > 0.7 =\"D\",\n    > 0.0 =\"\
    D-\",\n    0.0 =\"E\",\n  }\n  \n  local grades_table_length = #grades_table\n\
    \  local grades_table_length = grades_table_length + 1\n  \n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local grades_table_length = grades_table_length\
    \ + 1\n  local grades_table_length = grades_table_length + 1\n  local grades_table_length\
    \ = grades_table_length + 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcd_fir5f.lua:23: ''}'' expected (to close ''{'' at line 22)
    near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local function\
    \ get_letter_grade(grade)\n    local gpa, letter = grade\n    local gpa = gpa\
    \ or 0\n    local letter = letter or \"E\"\n    local gpa = gpa or 0\n    local\
    \ letter = letter or \"E\"\n    local gpa = gpa or 0\n    local letter = letter\
    \ or \"E\"\n    local gpa = gpa or 0\n    local letter = letter or \"E\"\n   \
    \ local gpa = gpa or 0\n    local letter = letter or \"E\"\n    local gpa = gpa\
    \ or 0\n    local letter = letter or \"E\"\n    local gpa = gpa or 0\n    local\
    \ letter = letter or \"E\"\n    local gpa = gpa or 0\n    local letter = letter\
    \ or \"E\"\n    local gpa = gpa or 0\n    local letter = letter or \"E\"\n   \
    \ local gpa = gpa or 0\n    local letter = letter or \"E\"\n    local gpa = gpa\
    \ or 0\n    local letter = letter or \"E\"\n    local gpa = gpa or 0\n    local\
    \ letter = letter or \"E\"\n    local gpa = gpa or 0\n    local letter = letter\
    \ or \"E\"\n    local gpa = gpa or 0\n    local letter = letter or \"E\"\n   \
    \ local gpa = gpa or 0\n    local letter = letter or \"E\"\n    local gpa = gpa\
    \ or 0\n    local letter = letter or \"E\"\n    local gpa = gpa or 0\n    local\
    \ letter = letter or \"E\"\n    local gpa = gpa or 0\n    local letter = letter\
    \ or \"E\"\n    local gpa = gpa or 0\n    local letter = letter or \"E\"\n   \
    \ local gpa = gpa or 0\n    local letter = letter or \"E\"\n    local gpa = gpa\
    \ or 0\n    local letter = letter or \"E\"\n    local gpa = gpa or 0\n    local\
    \ letter = letter or \"E\"\n    local gpa = gpa or 0\n    local letter = letter\
    \ or \"E\"\n    local gpa = gpa or 0\n    local letter = letter or \"E\"\n   \
    \ local gpa = gpa or 0\n    local letter = letter or \"E\"\n    local gpa = gpa\
    \ or 0\n    local letter = letter or \"E\"\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84m4gb6a.lua:88: ''end'' expected (to close ''function'' at
    line 22) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local grades_table\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr81g83je.lua:104: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = grades[i]\n    end\n\
    \    local grades_sorted = table.sort(grades_table)\n    local grades_sorted_length\
    \ = #grades_sorted\n    local grades_sorted_first = grades_sorted[1]\n    local\
    \ grades_sorted_last = grades_sorted[grades_sorted_length]\n    local grades_sorted_first_index\
    \ = #grades_sorted - 1\n    local grades_sorted_last_index = grades_sorted_length\
    \ - 1\n    local grades_sorted_first_grade = grades_sorted[grades_sorted_first_index]\n\
    \    local grades_sorted_last_grade = grades_sorted[grades_sorted_last_index]\n\
    \    local grades_sorted_first_index = grades_sorted_first_index - 1\n    local\
    \ grades_sorted_last_index = grades_sorted_last_index - 1\n    local grades_sorted_first_grade\
    \ = grades_sorted[grades_sorted_first_index]\n    local grades_sorted_last_grade\
    \ = grades_sorted[grades_sorted_last_index]\n    local grades_sorted_first_index\
    \ = grades_sorted_first_index - 1\n    local grades_sorted_last_index = grades_sorted_last_index\
    \ - 1\n    local grades_sorted_first_grade = grades_sorted[grades_sorted_first_index]\n\
    \    local grades_sorted_last_grade = grades_sorted[grades_sorted_last_index]\n\
    \    local grades_sorted_first_index = grades_sorted_first_index - 1\n    local\
    \ grades_sorted_last_index = grades_sorted_last_index - 1\n    local grades_sorted_first_grade\
    \ = grades_sorted[grades_sorted_first_index]\n    local grades_sorted_last_grade\
    \ = grades_sorted[grades_sorted_last_index]\n    local grades_sorted_first_index\
    \ = grades_sorted_first_index - 1\n    local grades_sorted_last_index = grades_sorted_last_index\
    \ - 1\n    local grades_sorted_first_grade = grades_sorted[grades_sorted_first_index]\n\
    \    local grades_sorted_last_grade = grades_sorted[grades_sorted_last_index]\n\
    \    local grades_sorted_first_index = grades_sorted_first_index - 1\n    local\
    \ grades_sorted_last_index = grades_sorted_last_index - 1\n    local grades_sorted_first_grade\
    \ = grades_sorted[grades_sorted_first_index]\n    local grades_sorted_last_grade\
    \ = grades_sorted[grades_sorted_last_index]\n    local grades_sorted_first_index\
    \ = grades_sorted_first_index - 1\n    local grades_sorted_last_index = grades_sorted_last_index\
    \ - 1\n    local grades_sorted_first_grade = grades_sorted[grades_sorted_first_index]\n\
    \    local grades_sorted_last_grade = grade\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw5eqh3dw.lua:70: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {\n      4.0,'A+',\n      3.7,'A',\n      3.3,'A- ',\n      3.0,'B+',\n  \
    \    2.7,'B',\n      2.3,'B-',\n      2.0,'C+',\n      1.7,'C',\n      1.3,'C-',\n\
    \      1.0,'D+',\n      0.7,'D',\n      0.0,'D-',\n      0.0,'E',\n   }\n   local\
    \ grades_length = #grades_table\n   local grades_index = 0\n   local grades_index2\
    \ = 0\n   local grades_index3 = 0\n   local grades_index4 = 0\n   local grades_index5\
    \ = 0\n   local grades_index6 = 0\n   local grades_index7 = 0\n   local grades_index8\
    \ = 0\n   local grades_index9 = 0\n   local grades_index10 = 0\n   local grades_index11\
    \ = 0\n   local grades_index12 = 0\n   local grades_index13 = 0\n   local grades_index14\
    \ = 0\n   local grades_index15 = 0\n   local grades_index16 = 0\n   local grades_index17\
    \ = 0\n   local grades_index18 = 0\n   local grades_index19 = 0\n   local grades_index20\
    \ = 0\n   local grades_index21 = 0\n   local grades_index22 = 0\n   local grades_index23\
    \ = 0\n   local grades_index24 = 0\n   local grades_index25 = 0\n   local grades_index26\
    \ = 0\n   local grades_index27 = 0\n   local grades_index28 = 0\n   local grades_index29\
    \ = 0\n   local grades_index30 = 0\n   local grades_index31 = 0\n   local grades_index32\
    \ = 0\n   local grades_index33 = 0\n   local grades_index34 = 0\n   local grades_index35\
    \ = 0\n   local grades_index36 = 0\n   local grades_index37 = 0\n   local grades_index38\
    \ = 0\n   local grades_index39 = 0\n   local grades_index40 = 0\n   local grades_index41\
    \ = 0\n   local grades_index42 = 0\n   local grades_index43 = 0\n   local grades_index44\
    \ = 0\n   local grades_index45 = 0\n   local grades_index46 = 0\n   local grades_index47\
    \ = 0\n   local grades_index48 = 0\n   local grades_index49 = 0\n   local grades_index50\
    \ = 0\n   local grades_index51 = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmponw8o58a.lua:102: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    grades_table[1] = gpa\n    grades_table[2] = letter\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4d248yrb.lua:34:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3}\nstack traceback:\n\
    \t/tmp/tmp4d248yrb.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter_grade = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter_grade\n  grades_table[3] = gpa\n  grades_table[4]\
    \ = letter_grade\n  grades_table[5] = gpa\n  grades_table[6] = letter_grade\n\
    \  grades_table[7] = gpa\n  grades_table[8] = letter_grade\n  grades_table[9]\
    \ = gpa\n  grades_table[10] = letter_grade\n  grades_table[11] = gpa\n  grades_table[12]\
    \ = letter_grade\n  grades_table[13] = gpa\n  grades_table[14] = letter_grade\n\
    \  grades_table[15] = gpa\n  grades_table[16] = letter_grade\n  grades_table[17]\
    \ = gpa\n  grades_table[18] = letter_grade\n  grades_table[19] = gpa\n  grades_table[20]\
    \ = letter_grade\n  grades_table[21] = gpa\n  grades_table[22] = letter_grade\n\
    \  grades_table[23] = gpa\n  grades_table[24] = letter_grade\n  grades_table[25]\
    \ = gpa\n  grades_table[26] = letter_grade\n  grades_table[27] = gpa\n  grades_table[28]\
    \ = letter_grade\n  grades_table[29] = gpa\n  grades_table[30] = letter_grade\n\
    \  grades_table[31] = gpa\n  grades_table[32] = letter_grade\n  grades_table[33]\
    \ = gpa\n  grades_table[34] = letter_grade\n  grades_table[35] = gpa\n  grades_table[36]\
    \ = letter_grade\n  grades_table[37] = gpa\n  grades_table[38] = letter_grade\n\
    \  grades_table[39] = gpa\n  grades_table[40] = letter_grade\n  grades_table[41]\
    \ = gpa\n  grades_table[42] = letter_grade\n  grades_table[43] = gpa\n  grades_table[44]\
    \ = letter_grade\n  grades_table[45] = gpa\n  grades_table[46] = letter_grade\n\
    \  grades_table[47] = gpa\n  grades_table[48] = letter_grade\n  grades_table[49]\
    \ = gpa\n  grades_table[50] = letter_grade\n  grades_table[51] = gpa\n  grades_table[52]\
    \ = letter_grade\n  grades_table[53] = gpa\n  grades_table[54] = letter_grade\n\
    \  grades_table[55] = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpop2brxi5.lua:80: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {\n      4.0,\n      3.7,\n      3.3,\n      3.0,\n      2.7,\n      2.3,\n\
    \      2.0,\n      1.7,\n      1.3,\n      1.0,\n      0.7,\n      0.0,\n    \
    \  0.0\n   }\n   local grades_length = #grades_table\n   local grades_index =\
    \ 1\n   local grades_sum = 0\n   local grades_average = 0\n   local grades_letter_grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp10355nj4.lua:54: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\n  -- The function should return a list of letter grades.\n  -- The\
    \ grades argument is a list of GPAs.\n  -- The function should return a list of\
    \ letter grades.\n  -- The grades argument is a list of GPAs.\n  -- The function\
    \ should return a list of letter grades.\n  -- The grades argument is a list of\
    \ GPAs.\n  -- The function should return a list of letter grades.\n  -- The grades\
    \ argument is a list of GPAs.\n  -- The function should return a list of letter\
    \ grades.\n  -- The grades argument is a list of GPAs.\n  -- The function should\
    \ return a list of letter grades.\n  -- The grades argument is a list of GPAs.\n\
    \  -- The function should return a list of letter grades.\n  -- The grades argument\
    \ is a list of GPAs.\n  -- The function should return a list of letter grades.\n\
    \  -- The grades argument is a list of GPAs.\n  -- The function should return\
    \ a list of letter grades.\n  -- The grades argument is a list of GPAs.\n  --\
    \ The function should return a list of letter grades.\n  -- The grades argument\
    \ is a list of GPAs.\n  -- The function should return a list of letter grades.\n\
    \  -- The grades argument is a list of GPAs.\n  -- The function should return\
    \ a list of letter grades.\n  -- The grades argument is a list of GPAs.\n  --\
    \ The function should return a list of letter grades.\n  -- The grades argument\
    \ is a list of GPAs.\n  -- The function should return a list of letter grades.\n\
    \  -- The grades argument is a list of GPAs.\n  -- The function should return\
    \ a list of letter grades.\n  -- The grades argument is a list of GPAs.\n  --\
    \ The function should return a list of letter grades.\n  -- The grades argument\
    \ is a list of GPAs.\n  -- The function should return a list of letter grades.\n\
    \  -- The grades argument is a list of GPAs.\n  -- The function should return\
    \ a list of letter grades.\n  -- The grades argument is a list of GPAs.\n  --\
    \ The function should return a list of letter grades.\n  -- The grades argument\
    \ is a list of GPAs.\n  -- The function should return a list of letter grades.\n\
    \  -- The grades argument is a list of GPAs.\n  -- The function should return\
    \ a list of letter grades.\n  -- The grades argument is a list of GPAs.\n  --\
    \ The function should return a list of letter grades.\n  -- The grades argument\
    \ is a list of GPAs.\n  -- The function should return a list of letter grades.\n\
    \  -- The grades argument is a list of GPAs.\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiz2o6a4w.lua:82: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2uukbvl.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpn2uukbvl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = {\n         gpa = grades[i],\n\
    \         letter_grade = string.upper(string.sub(grades[i], 1, 1))\n      }\n\
    \   end\n   return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg33huym5.lua:35:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    {gpa=4.0,\
    \ letter_grade=\"4\"},\n    {gpa=3, letter_grade=\"3\"},\n    {gpa=1.7, letter_grade=\"\
    1\"},\n    {gpa=2, letter_grade=\"2\"},\n    {gpa=3.5, letter_grade=\"3\"}\n}\n\
    stack traceback:\n\t/tmp/tmpg33huym5.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        if gpa\
    \ > 0 then\n            grades_table[i] = \"A+\"\n        elseif gpa > 3.7 then\n\
    \            grades_table[i] = \"A\"\n        elseif gpa > 3.3 then\n        \
    \    grades_table[i] = \"A-\"\n        elseif gpa > 3 then\n            grades_table[i]\
    \ = \"B+\"\n        elseif gpa > 2.7 then\n            grades_table[i] = \"B\"\
    \n        elseif gpa > 2.3 then\n            grades_table[i] = \"B-\"\n      \
    \  elseif gpa > 2 then\n            grades_table[i] = \"C+\"\n        elseif gpa\
    \ > 1.7 then\n            grades_table[i] = \"C\"\n        elseif gpa > 1.3 then\n\
    \            grades_table[i] = \"C-\"\n        elseif gpa > 1 then\n         \
    \   grades_table[i] = \"D+\"\n        elseif gpa > 0.7 then\n            grades_table[i]\
    \ = \"D\"\n        elseif gpa > 0 then\n            grades_table[i] = \"D-\"\n\
    \        else\n            grades_table[i] = \"E\"\n        end\n    end\n   \
    \ return grades_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcp8vgdg.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A+\", \"\
    A+\", \"A+\", \"A+\"}\nstack traceback:\n\t/tmp/tmpjcp8vgdg.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local index = 1\n  local index2 = 1\n  local index3 = 1\n  local index4\
    \ = 1\n  local index5 = 1\n  local index6 = 1\n  local index7 = 1\n  local index8\
    \ = 1\n  local index9 = 1\n  local index10 = 1\n  local index11 = 1\n  local index12\
    \ = 1\n  local index13 = 1\n  local index14 = 1\n  local index15 = 1\n  local\
    \ index16 = 1\n  local index17 = 1\n  local index18 = 1\n  local index19 = 1\n\
    \  local index20 = 1\n  local index21 = 1\n  local index22 = 1\n  local index23\
    \ = 1\n  local index24 = 1\n  local index25 = 1\n  local index26 = 1\n  local\
    \ index27 = 1\n  local index28 = 1\n  local index29 = 1\n  local index30 = 1\n\
    \  local index31 = 1\n  local index32 = 1\n  local index33 = 1\n  local index34\
    \ = 1\n  local index35 = 1\n  local index36 = 1\n  local index37 = 1\n  local\
    \ index38 = 1\n  local index39 = 1\n  local index40 = 1\n  local index41 = 1\n\
    \  local index42 = 1\n  local index43 = 1\n  local index44 = 1\n  local index45\
    \ = 1\n  local index46 = 1\n  local index47 = 1\n  local index48 = 1\n  local\
    \ index49 = 1\n  local index50 = 1\n  local index51 = 1\n  local index52 = 1\n\
    \  local index53 = 1\n  local index54 = 1\n  local index55 = 1\n  local index56\
    \ = 1\n  local index57 = 1\n  local index58 = 1\n  local index59 = 1\n  local\
    \ index60 = 1\n  local index61 = 1\n  local index62 = 1\n  local index63 = 1\n\
    \  local index64 = 1\n  local index65 = 1\n  local index66 = 1\n  local index67\
    \ = 1\n  local index68 = 1\n  local index69 = 1\n  local index70 = 1\n  local\
    \ index71 = 1\n  local index72 = 1\n  local index73 = 1\n  local index74 = 1\n\
    \  local index75 = 1\n  local index76 = 1\n  local index77 = 1\n  local index78\
    \ = 1\n  local index79 = 1\n  local index80 = 1\n  local index81 = 1\n  local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq36qpqzf.lua:117: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * 100\n    local\
    \ grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\n    local grades_average = grades_average * 100\n  \
    \  local grades_average = grades_average / 100\n    local grades_average = grades_average\
    \ * 100\n    local grades_average = grades_average / 100\n    local grades_average\
    \ = grades_average * 100\n    local grades_average = grades_average / 100\n  \
    \  local grades_average = grades_average * 100\n    local grades_average = grades_average\
    \ / 100\n    local grades_average = grades_average * 100\n    local grades_average\
    \ = grades_average / 100\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwtkvyn58.lua:77: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    grades_table[3] = gpa\n    grades_table[4]\
    \ = letter\n    grades_table[5] = gpa\n    grades_table[6] = letter\n    grades_table[7]\
    \ = gpa\n    grades_table[8] = letter\n    grades_table[9] = gpa\n    grades_table[10]\
    \ = letter\n    grades_table[11] = gpa\n    grades_table[12] = letter\n    grades_table[13]\
    \ = gpa\n    grades_table[14] = letter\n    grades_table[15] = gpa\n    grades_table[16]\
    \ = letter\n    grades_table[17] = gpa\n    grades_table[18] = letter\n    grades_table[19]\
    \ = gpa\n    grades_table[20] = letter\n    grades_table[21] = gpa\n    grades_table[22]\
    \ = letter\n    grades_table[23] = gpa\n    grades_table[24] = letter\n    grades_table[25]\
    \ = gpa\n    grades_table[26] = letter\n    grades_table[27] = gpa\n    grades_table[28]\
    \ = letter\n    grades_table[29] = gpa\n    grades_table[30] = letter\n    grades_table[31]\
    \ = gpa\n    grades_table[32] = letter\n    grades_table[33] = gpa\n    grades_table[34]\
    \ = letter\n    grades_table[35] = gpa\n    grades_table[36] = letter\n    grades_table[37]\
    \ = gpa\n    grades_table[38] = letter\n    grades_table[39] = gpa\n    grades_table[40]\
    \ = letter\n    grades_table[41] = gpa\n    grades_table[42] = letter\n    grades_table[43]\
    \ = gpa\n    grades_table[44] = letter\n    grades_table[45] = gpa\n    grades_table[46]\
    \ = letter\n    grades_table[47] = gpa\n    grades_table[48] = letter\n    grades_table[49]\
    \ = gpa\n    grades_table[50] = letter\n    grades_table[51] = gpa\n    grades_table[52]\
    \ = letter\n    grades_table[53] = gpa\n    grades_table[54] = letter\n    grades_table[55]\
    \ = gpa\n    grades_table[56] = letter\n    grades_table[57] = gpa\n    grades_table[58]\
    \ = letter\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8m_qzcss.lua:96: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade > 0 then\n            grades_table[i] = \"A+\"\n        elseif grade <\
    \ 0 then\n            grades_table[i] = \"A-\"\n        else\n            grades_table[i]\
    \ = \"B+\"\n        end\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposcu6s7o.lua:39:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A+\", \"\
    A+\", \"A+\", \"A+\"}\nstack traceback:\n\t/tmp/tmposcu6s7o.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_sorted_length = #grades_sorted\n    local\
    \ grades_sorted_index = grades_sorted_length - 1\n    local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n    local grades_sorted_index_plus_one\
    \ = grades_sorted_index + 1\n    local grades_sorted_value_plus_one = grades_sorted_value\
    \ + 1\n    local grades_sorted_index_minus_one = grades_sorted_index - 1\n   \
    \ local grades_sorted_value_minus_one = grades_sorted_value - 1\n    local grades_sorted_index_minus_two\
    \ = grades_sorted_index - 2\n    local grades_sorted_value_minus_two = grades_sorted_value\
    \ - 2\n    local grades_sorted_index_minus_three = grades_sorted_index - 3\n \
    \   local grades_sorted_value_minus_three = grades_sorted_value - 3\n    local\
    \ grades_sorted_index_minus_four = grades_sorted_index - 4\n    local grades_sorted_value_minus_four\
    \ = grades_sorted_value - 4\n    local grades_sorted_index_minus_five = grades_sorted_index\
    \ - 5\n    local grades_sorted_value_minus_five = grades_sorted_value - 5\n  \
    \  local grades_sorted_index_minus_six = grades_sorted_index - 6\n    local grades_sorted_value_minus_six\
    \ = grades_sorted_value - 6\n    local grades_sorted_index_minus_seven = grades_sorted_index\
    \ - 7\n    local grades_sorted_value_minus_seven = grades_sorted_value - 7\n \
    \   local grades_sorted_index_minus_eight = grades_sorted_index - 8\n    local\
    \ grades_sorted_value_minus_eight = grades_sorted_value - 8\n    local grades_sorted_index_minus_nine\
    \ = grades_sorted_index - 9\n    local grades_sorted_value_minus_nine = grades_sorted_value\
    \ - 9\n    local grades_sorted_index_minus_ten = grades_sorted_index - 10\n  \
    \  local grades_sorted_value_minus_ten = grades_sorted_value - 10\n    local grades_sorted_index_minus_eleven\
    \ = grades_sorted_index - 11\n    local grades_sorted_value_minus_eleven = grades_sorted_value\
    \ - 11\n    local grades_sorted_index_minus_twelve = grades_sorted_index - 12\n\
    \    local grades_sorted_value_minus_twelve = grades_sorted_value - 12\n    local\
    \ grades_sorted_index_minus_thirteen = grades_sorted_index - 13\n    local grades_sorted_value_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbp5l0w32.lua:66: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter_grade = grades[2]\n    local\
    \ count = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count\
    \ = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n\
    \    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n   \
    \ local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum\
    \ = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n\
    \    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum\
    \ = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n\
    \    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum\
    \ = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n\
    \    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum\
    \ = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n\
    \    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum\
    \ = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n\
    \    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum\
    \ = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local gpa_count = 0\n\
    \    local gpa_sum = 0\n    local gpa_count = 0\n    local gpa_sum = 0\n    local\
    \ gpa_count = 0\n    local gpa_sum = 0\n    local gpa_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv48ujl1j.lua:113: ''end'' expected (to close ''function''
    at line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local letter_grade = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = letter_grade\n  grades_table[3] = gpa\n  grades_table[4]\
    \ = letter_grade\n  grades_table[5] = gpa\n  grades_table[6] = letter_grade\n\
    \  grades_table[7] = gpa\n  grades_table[8] = letter_grade\n  grades_table[9]\
    \ = gpa\n  grades_table[10] = letter_grade\n  grades_table[11] = gpa\n  grades_table[12]\
    \ = letter_grade\n  grades_table[13] = gpa\n  grades_table[14] = letter_grade\n\
    \  grades_table[15] = gpa\n  grades_table[16] = letter_grade\n  grades_table[17]\
    \ = gpa\n  grades_table[18] = letter_grade\n  grades_table[19] = gpa\n  grades_table[20]\
    \ = letter_grade\n  grades_table[21] = gpa\n  grades_table[22] = letter_grade\n\
    \  grades_table[23] = gpa\n  grades_table[24] = letter_grade\n  grades_table[25]\
    \ = gpa\n  grades_table[26] = letter_grade\n  grades_table[27] = gpa\n  grades_table[28]\
    \ = letter_grade\n  grades_table[29] = gpa\n  grades_table[30] = letter_grade\n\
    \  grades_table[31] = gpa\n  grades_table[32] = letter_grade\n  grades_table[33]\
    \ = gpa\n  grades_table[34] = letter_grade\n  grades_table[35] = gpa\n  grades_table[36]\
    \ = letter_grade\n  grades_table[37] = gpa\n  grades_table[38] = letter_grade\n\
    \  grades_table[39] = gpa\n  grades_table[40] = letter_grade\n  grades_table[41]\
    \ = gpa\n  grades_table[42] = letter_grade\n  grades_table[43] = gpa\n  grades_table[44]\
    \ = letter_grade\n  grades_table[45] = gpa\n  grades_table[46] = letter_grade\n\
    \  grades_table[47] = gpa\n  grades_table[48] = letter_grade\n  grades_table[49]\
    \ = gpa\n  grades_table[50] = letter_grade\n  grades_table[51] = gpa\n  grades_table[52]\
    \ = letter_grade\n  grades_table[53] = gpa\n  grades_table[54] = letter_grade\n\
    \  grades_table[55] = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpop2brxi5.lua:80: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        grades_table[i] = {}\n        grades_table[i][1]\
    \ = grades[i]\n        grades_table[i][2] = grades[i]\n        grades_table[i][3]\
    \ = grades[i]\n        grades_table[i][4] = grades[i]\n        grades_table[i][5]\
    \ = grades[i]\n        grades_table[i][6] = grades[i]\n        grades_table[i][7]\
    \ = grades[i]\n        grades_table[i][8] = grades[i]\n        grades_table[i][9]\
    \ = grades[i]\n        grades_table[i][10] = grades[i]\n        grades_table[i][11]\
    \ = grades[i]\n        grades_table[i][12] = grades[i]\n        grades_table[i][13]\
    \ = grades[i]\n        grades_table[i][14] = grades[i]\n        grades_table[i][15]\
    \ = grades[i]\n        grades_table[i][16] = grades[i]\n        grades_table[i][17]\
    \ = grades[i]\n        grades_table[i][18] = grades[i]\n        grades_table[i][19]\
    \ = grades[i]\n        grades_table[i][20] = grades[i]\n        grades_table[i][21]\
    \ = grades[i]\n        grades_table[i][22] = grades[i]\n        grades_table[i][23]\
    \ = grades[i]\n        grades_table[i][24] = grades[i]\n        grades_table[i][25]\
    \ = grades[i]\n        grades_table[i][26] = grades[i]\n        grades_table[i][27]\
    \ = grades[i]\n        grades_table[i][28] = grades[i]\n        grades_table[i][29]\
    \ = grades[i]\n        grades_table[i][30] = grades[i]\n        grades_table[i][31]\
    \ = grades[i]\n        grades_table[i][32] = grades[i]\n        grades_table[i][33]\
    \ = grades[i]\n        grades_table[i][34] = grades[i]\n        grades_table[i][35]\
    \ = grades[i]\n        grades_table[i][36] = grades[i]\n        grades_table[i][37]\
    \ = grades[i]\n        grades_table[i][38] = grades[i]\n        grades_table[i][39]\
    \ = grades[i]\n        grades_table[i][40] = grades[i]\n        grades_table[i][41]\
    \ = grades[i]\n        grades_table[i][42] = grades[i]\n        grades_table[i][43]\
    \ = grades[i]\n        grades_table[i][44] = grades[i]\n        grades_table[i][45]\
    \ = grades[i]\n        grades_table[i][46] = grades[i]\n        grades_table[i][47]\
    \ = grades[i]\n        grades_table[i][48] = grades[i]\n        grades_table[i][49]\
    \ = grades[i]\n        grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_cldmimb.lua:75: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_sorted\
    \ = table.sort(grades)\n   local grades_length = #grades_sorted\n   local grades_average\
    \ = grades_length / #grades\n   local grades_average = grades_average\n   local\
    \ grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grades_average\n   local grades_average = grades_average\n\
    \   local grades_average = grade\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp99l7ncqw.lua:85: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_table\
    \ = {}\n  local gpa = grades[1]\n  local grade = grades[2]\n  grades_table[1]\
    \ = gpa\n  grades_table[2] = \"A+\"\n  grades_table[3] = \">3.7\"\n  grades_table[4]\
    \ = \">3.3\"\n  grades_table[5] = \">3.0\"\n  grades_table[6] = \">2.7\"\n  grades_table[7]\
    \ = \">2.3\"\n  grades_table[8] = \">2.0\"\n  grades_table[9] = \">1.7\"\n  grades_table[10]\
    \ = \">1.3\"\n  grades_table[11] = \">1.0\"\n  grades_table[12] = \">0.7\"\n \
    \ grades_table[13] = \">0.0\"\n  grades_table[14] = \"E\"\n  grades_table[15]\
    \ = \"F\"\n  grades_table[16] = \"F\"\n  grades_table[17] = \"F\"\n  grades_table[18]\
    \ = \"F\"\n  grades_table[19] = \"F\"\n  grades_table[20] = \"F\"\n  grades_table[21]\
    \ = \"F\"\n  grades_table[22] = \"F\"\n  grades_table[23] = \"F\"\n  grades_table[24]\
    \ = \"F\"\n  grades_table[25] = \"F\"\n  grades_table[26] = \"F\"\n  grades_table[27]\
    \ = \"F\"\n  grades_table[28] = \"F\"\n  grades_table[29] = \"F\"\n  grades_table[30]\
    \ = \"F\"\n  grades_table[31] = \"F\"\n  grades_table[32] = \"F\"\n  grades_table[33]\
    \ = \"F\"\n  grades_table[34] = \"F\"\n  grades_table[35] = \"F\"\n  grades_table[36]\
    \ = \"F\"\n  grades_table[37] = \"F\"\n  grades_table[38] = \"F\"\n  grades_table[39]\
    \ = \"F\"\n  grades_table[40] = \"F\"\n  grades_table[41] = \"F\"\n  grades_table[42]\
    \ = \"F\"\n  grades_table[43] = \"F\"\n  grades_table[44] = \"F\"\n  grades_table[45]\
    \ = \"F\"\n  grades_table[46] = \"F\"\n  grades_table[47] = \"F\"\n  grades_table[48]\
    \ = \"F\"\n  grades_table[49] = \"F\"\n  grades_table[50] = \"F\"\n  grades_table[51]\
    \ = \"F\"\n  grades_table[52] = \"F\"\n  grades_table[\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7o4zfa9g.lua:78: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local grades_table_length = #grades\n    for i = 1, grades_table_length\
    \ do\n        local grade = grades[i]\n        local gpa = grade[1]\n        local\
    \ letter = grade[2]\n        local gpa_table = {}\n        gpa_table[1] = gpa\n\
    \        gpa_table[2] = gpa\n        gpa_table[3] = gpa\n        gpa_table[4]\
    \ = gpa\n        gpa_table[5] = gpa\n        gpa_table[6] = gpa\n        gpa_table[7]\
    \ = gpa\n        gpa_table[8] = gpa\n        gpa_table[9] = gpa\n        gpa_table[10]\
    \ = gpa\n        gpa_table[11] = gpa\n        gpa_table[12] = gpa\n        gpa_table[13]\
    \ = gpa\n        gpa_table[14] = gpa\n        gpa_table[15] = gpa\n        gpa_table[16]\
    \ = gpa\n        gpa_table[17] = gpa\n        gpa_table[18] = gpa\n        gpa_table[19]\
    \ = gpa\n        gpa_table[20] = gpa\n        gpa_table[21] = gpa\n        gpa_table[22]\
    \ = gpa\n        gpa_table[23] = gpa\n        gpa_table[24] = gpa\n        gpa_table[25]\
    \ = gpa\n        gpa_table[26] = gpa\n        gpa_table[27] = gpa\n        gpa_table[28]\
    \ = gpa\n        gpa_table[29] = gpa\n        gpa_table[30] = gpa\n        gpa_table[31]\
    \ = gpa\n        gpa_table[32] = gpa\n        gpa_table[33] = gpa\n        gpa_table[34]\
    \ = gpa\n        gpa_table[35] = gpa\n        gpa_table[36] = gpa\n        gpa_table[37]\
    \ = gpa\n        gpa_table[38] = gpa\n        gpa_table[39] = gpa\n        gpa_table[40]\
    \ = gpa\n        gpa_table[41] = gpa\n        gpa_table[42] = gpa\n        gpa_table[43]\
    \ = gpa\n        gpa_table[44] = gpa\n        gpa_table[45] = gpa\n        gpa_table[46]\
    \ = gpa\n        gpa_table[47] = gpa\n        gpa_table[48] = gpa\n        gpa_table[49]\
    \ = gpa\n        gpa_table[50] = gpa\n        gpa_table[51] = gpa\n        gpa_table[52]\
    \ = gpa\n        gpa_table[53] = gpa\n        gpa_table[54] = gpa\n        gpa_table[55]\
    \ = gpa\n        gpa_table[56] = gpa\n        gpa_table[57] = gpa\n        gpa_table[58\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpozktjk5d.lua:87: '']'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {\n      { 4.0, \"A+\" },\n      { 3.7, \"A\" },\n      { 3.3, \"A-\" },\n\
    \      { 3.0, \"B+\" },\n      { 2.7, \"B\" },\n      { 2.3, \"B-\" },\n     \
    \ { 2.0, \"C+\" },\n      { 1.7, \"C\" },\n      { 1.3, \"C-\" },\n      { 1.0,\
    \ \"D+\" },\n      { 0.7, \"D\" },\n      { 0.0, \"D-\" },\n      { 0.0, \"E\"\
    \ }\n   }\n   local grades_length = #grades_table\n   local grades_index = 1\n\
    \   local grades_index2 = 1\n   local grades_index3 = 1\n   local grades_index4\
    \ = 1\n   local grades_index5 = 1\n   local grades_index6 = 1\n   local grades_index7\
    \ = 1\n   local grades_index8 = 1\n   local grades_index9 = 1\n   local grades_index10\
    \ = 1\n   local grades_index11 = 1\n   local grades_index12 = 1\n   local grades_index13\
    \ = 1\n   local grades_index14 = 1\n   local grades_index15 = 1\n   local grades_index16\
    \ = 1\n   local grades_index17 = 1\n   local grades_index18 = 1\n   local grades_index19\
    \ = 1\n   local grades_index20 = 1\n   local grades_index21 = 1\n   local grades_index22\
    \ = 1\n   local grades_index23 = 1\n   local grades_index24 = 1\n   local grades_index25\
    \ = 1\n   local grades_index26 = 1\n   local grades_index27 = 1\n   local grades_index28\
    \ = 1\n   local grades_index29 = 1\n   local grades_index30 = 1\n   local grades_index31\
    \ = 1\n   local grades_index32 = 1\n   local grades_index33 = 1\n   local grades_index34\
    \ = 1\n   local grades_index35 = 1\n   local grades_index36 = 1\n   local grades_index37\
    \ = 1\n   local grades_index38 = 1\n   local grades_index39 = 1\n   local grades_index40\
    \ = 1\n   local grades_index41 = 1\n   local grades_index42 = 1\n   local grades_index43\
    \ = 1\n   local grades_index44 = 1\n   local grades_index45 = 1\n   local grades_index46\
    \ = 1\n   local grades_index47 = 1\n   local grades_index48 = 1\n   local grades_index49\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7hoai5ws.lua:99: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ * grades_average\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average * grades_average\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9lbs6__l.lua:72: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        local\
    \ letter = string.sub(grades_table, i - 1, 1)\n        grades_table[i - 1] = string.sub(grades_table,\
    \ i - 1, 1) + string.format(\"%+d\", gpa / 10)\n    end\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu508m6m3.lua:25:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpu508m6m3.lua:25: in local 'candidate'\n\t/tmp/tmpu508m6m3.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 0\n    local j = 1\n    local k = 1\n    local grades_table_length\
    \ = #grades\n    local grades_table_length = grades_table_length - 1\n    local\
    \ grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    local grades_table_length = grades_table_length - 1\n    local grades_table_length\
    \ = grades_table_length - 1\n    local grades_table_length = grades_table_length\
    \ - 1\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpegu7elkk.lua:80: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    if gpa > 3.0 then\n        grades_table[3]\
    \ = \"A+\"\n    elseif gpa > 2.7 then\n        grades_table[3] = \"A\"\n    elseif\
    \ gpa > 2.3 then\n        grades_table[3] = \"A-\"\n    elseif gpa > 2.0 then\n\
    \        grades_table[3] = \"B+\"\n    elseif gpa > 1.7 then\n        grades_table[3]\
    \ = \"B\"\n    elseif gpa > 1.3 then\n        grades_table[3] = \"B-\"\n    elseif\
    \ gpa > 1.0 then\n        grades_table[3] = \"C+\"\n    elseif gpa > 0.7 then\n\
    \        grades_table[3] = \"C\"\n    elseif gpa > 0.3 then\n        grades_table[3]\
    \ = \"C-\"\n    elseif gpa > 0.0 then\n        grades_table[3] = \"D+\"\n    elseif\
    \ gpa > 0.0 then\n        grades_table[3] = \"D\"\n    else\n        grades_table[3]\
    \ = \"D-\"\n    end\n    if letter ~= \"E\" then\n        grades_table[4] = \"\
    E\"\n    end\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11few52z.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3, \"A+\", \"\
    E\"}\nstack traceback:\n\t/tmp/tmp11few52z.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    local grades_table\
    \ = {}\n    grades_table[1] = gpa\n    grades_table[2] = letter\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4d248yrb.lua:34:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3}\nstack traceback:\n\
    \t/tmp/tmp4d248yrb.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\n  local grades_average = grades_average\n  local grades_average\
    \ = grades_average\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjb8p9ljn.lua:85: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscr4ux.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp2gscr4ux.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local gpa_table\
    \ = {\n        4.0, ['A+'],\n        3.7, ['A'],\n        3.3, ['A-'],\n     \
    \   3.0, ['B+'],\n        2.7, ['B'],\n        2.3, ['B-'],\n        2.0, ['C+'],\n\
    \        1.7, ['C'],\n        1.3, ['C-'],\n        1.0, ['D+'],\n        0.7,\
    \ ['D'],\n        0.0, ['D-'],\n        0.0, ['E']\n    }\n    grades_table[gpa]\
    \ = gpa_table[grade]\n    return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdf3xtq53.lua:26: ''='' expected near '',''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4tav4kn.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp_4tav4kn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   -- Your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2uukbvl.lua:28:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpn2uukbvl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      local gpa = grades[i]\n      if gpa >\
    \ 0 then\n         grades_table[i] = \"A+\"\n      elseif gpa > 3.7 then\n   \
    \      grades_table[i] = \"A\"\n      elseif gpa > 3.3 then\n         grades_table[i]\
    \ = \"A-\"\n      elseif gpa > 3 then\n         grades_table[i] = \"B+\"\n   \
    \   elseif gpa > 2.7 then\n         grades_table[i] = \"B\"\n      elseif gpa\
    \ > 2.3 then\n         grades_table[i] = \"B-\"\n      elseif gpa > 2 then\n \
    \        grades_table[i] = \"C+\"\n      elseif gpa > 1.7 then\n         grades_table[i]\
    \ = \"C\"\n      elseif gpa > 1.3 then\n         grades_table[i] = \"C-\"\n  \
    \    elseif gpa > 1 then\n         grades_table[i] = \"D+\"\n      elseif gpa\
    \ > 0.7 then\n         grades_table[i] = \"D\"\n      elseif gpa > 0 then\n  \
    \       grades_table[i] = \"D-\"\n      else\n         grades_table[i] = \"E\"\
    \n      end\n   end\n   return grades_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvr6_y3es.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\", \"A+\", \"\
    A+\", \"A+\", \"A+\"}\nstack traceback:\n\t/tmp/tmpvr6_y3es.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local total_grades = 0\n    for i = 1, #grades do\n        local grade\
    \ = grades[i]\n        local gpa = grade[1]\n        local letter = grade[2]\n\
    \        local grades_table[gpa] = letter\n        total_grades = total_grades\
    \ + 1\n    end\n    local total_gpa = total_grades / #grades\n    local gpa_average\
    \ = total_gpa * 4.0\n    local letter_grade = grades_table[gpa_average]\n    return\
    \ letter_grade\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7,\
    \ 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvcg5cjcc.lua:28: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    for i = 1, #grades do\n        local gpa = grades[i]\n        if gpa\
    \ > 4.0 then\n            grades_table[i] = 'A+'\n        elseif gpa > 3.7 then\n\
    \            grades_table[i] = 'A'\n        elseif gpa > 3.3 then\n          \
    \  grades_table[i] = 'A-'\n        elseif gpa > 3.0 then\n            grades_table[i]\
    \ = 'B+'\n        elseif gpa > 2.7 then\n            grades_table[i] = 'B'\n \
    \       elseif gpa > 2.3 then\n            grades_table[i] = 'B-'\n        elseif\
    \ gpa > 2.0 then\n            grades_table[i] = 'C+'\n        elseif gpa > 1.7\
    \ then\n            grades_table[i] = 'C'\n        elseif gpa > 1.3 then\n   \
    \         grades_table[i] = 'C-'\n        elseif gpa > 1.0 then\n            grades_table[i]\
    \ = 'D+'\n        elseif gpa > 0.7 then\n            grades_table[i] = 'D'\n \
    \       elseif gpa > 0.0 then\n            grades_table[i] = 'D-'\n        else\n\
    \            grades_table[i] = 'E'\n        end\n    end\n    return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0arffgve.lua:59:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A\", \"B\", \"\
    C-\", \"C\", \"A-\"}\nstack traceback:\n\t/tmp/tmp0arffgve.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local i = 0\n    while i < #grades do\n        grades_table[i] = grades[i]\n\
    \        i = i + 1\n    end\n    local grades_table_sorted = {}\n    table.sort(grades_table)\n\
    \    for i = 1, #grades_table_sorted do\n        grades_table_sorted[i] = grades_table[i]\n\
    \    end\n    local grades_table_sorted_reversed = {}\n    table.sort(grades_table_sorted,\
    \ function(a, b) return a < b end)\n    for i = 1, #grades_table_sorted_reversed\
    \ do\n        grades_table_sorted_reversed[i] = grades_table_sorted[i]\n    end\n\
    \    local grades_table_sorted_reversed_reversed = {}\n    table.sort(grades_table_sorted_reversed,\
    \ function(a, b) return a < b end)\n    for i = 1, #grades_table_sorted_reversed_reversed\
    \ do\n        grades_table_sorted_reversed_reversed[i] = grades_table_sorted_reversed[i]\n\
    \    end\n    local grades_table_sorted_reversed_reversed_reversed = {}\n    table.sort(grades_table_sorted_reversed_reversed,\
    \ function(a, b) return a < b end)\n    for i = 1, #grades_table_sorted_reversed_reversed_reversed\
    \ do\n        grades_table_sorted_reversed_reversed_reversed[i] = grades_table_sorted_reversed_reversed[i]\n\
    \    end\n    local grades_table_sorted_reversed_reversed_reversed_reversed =\
    \ {}\n    table.sort(grades_table_sorted_reversed_reversed_reversed, function(a,\
    \ b) return a < b end)\n    for i = 1, #grades_table_sorted_reversed_reversed_reversed_reversed\
    \ do\n        grades_table_sorted_reversed_reversed_reversed_reversed[i] = grades_table_sorted_reversed_reversed_reversed[i]\n\
    \    end\n    local grades_table_sorted_reversed_reversed_reversed_reversed_reversed\
    \ = {}\n    table.sort(grades_table_sorted_reversed_reversed_reversed_reversed,\
    \ function(a, b) return a < b end)\n    for i = 1, #grades_table_sorted_reversed_reversed_reversed_reversed_reversed\
    \ do\n        grades_table_sorted_reversed_reversed_reversed_reversed_reversed[i]\
    \ = grades_table_sorted_reversed_reversed_reversed_reversed[i]\n    end\n    local\
    \ grades_table_sorted_reversed_reversed_reversed_reversed_reversed_reversed =\
    \ {}\n    table.sort(grades_table_sorted_reversed_reversed_reversed_reversed_reversed_reversed,\
    \ function(a, b) return a < b end)\n    for i = 1, #grades_table_sorted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ do\n        grades_table_sorted_reversed_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgblqivhh.lua:62: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local grade = grades[2]\n    local lettergrade\n\
    \    if gpa > 3.0 then\n        lettergrade = 'A+'\n    elseif gpa > 2.7 then\n\
    \        lettergrade = 'A'\n    elseif gpa > 2.3 then\n        lettergrade = 'A-'\n\
    \    elseif gpa > 2.0 then\n        lettergrade = 'B+'\n    elseif gpa > 1.7 then\n\
    \        lettergrade = 'B'\n    elseif gpa > 1.3 then\n        lettergrade = 'B-'\n\
    \    elseif gpa > 1.0 then\n        lettergrade = 'C+'\n    elseif gpa > 0.7 then\n\
    \        lettergrade = 'C'\n    elseif gpa > 0.3 then\n        lettergrade = 'C-'\n\
    \    elseif gpa > 0.0 then\n        lettergrade = 'D+'\n    elseif gpa > -0.3\
    \ then\n        lettergrade = 'D'\n    elseif gpa > -0.7 then\n        lettergrade\
    \ = 'D-'\n    elseif gpa > -1.0 then\n        lettergrade = 'E'\n    else\n  \
    \      lettergrade = 'F'\n    end\n    grades_table[1] = gpa\n    grades_table[2]\
    \ = lettergrade\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xm3atjw.lua:63:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, \"A+\"}\nstack\
    \ traceback:\n\t/tmp/tmp2xm3atjw.lua:63: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    grades_table[3] = gpa\n    grades_table[4]\
    \ = letter\n    grades_table[5] = gpa\n    grades_table[6] = letter\n    grades_table[7]\
    \ = gpa\n    grades_table[8] = letter\n    grades_table[9] = gpa\n    grades_table[10]\
    \ = letter\n    grades_table[11] = gpa\n    grades_table[12] = letter\n    grades_table[13]\
    \ = gpa\n    grades_table[14] = letter\n    grades_table[15] = gpa\n    grades_table[16]\
    \ = letter\n    grades_table[17] = gpa\n    grades_table[18] = letter\n    grades_table[19]\
    \ = gpa\n    grades_table[20] = letter\n    grades_table[21] = gpa\n    grades_table[22]\
    \ = letter\n    grades_table[23] = gpa\n    grades_table[24] = letter\n    grades_table[25]\
    \ = gpa\n    grades_table[26] = letter\n    grades_table[27] = gpa\n    grades_table[28]\
    \ = letter\n    grades_table[29] = gpa\n    grades_table[30] = letter\n    grades_table[31]\
    \ = gpa\n    grades_table[32] = letter\n    grades_table[33] = gpa\n    grades_table[34]\
    \ = letter\n    grades_table[35] = gpa\n    grades_table[36] = letter\n    grades_table[37]\
    \ = gpa\n    grades_table[38] = letter\n    grades_table[39] = gpa\n    grades_table[40]\
    \ = letter\n    grades_table[41] = gpa\n    grades_table[42] = letter\n    grades_table[43]\
    \ = gpa\n    grades_table[44] = letter\n    grades_table[45] = gpa\n    grades_table[46]\
    \ = letter\n    grades_table[47] = gpa\n    grades_table[48] = letter\n    grades_table[49]\
    \ = gpa\n    grades_table[50] = letter\n    grades_table[51] = gpa\n    grades_table[52]\
    \ = letter\n    grades_table[53] = gpa\n    grades_table[54] = letter\n    grades_table[55]\
    \ = gpa\n    grades_table[56] = letter\n    grades_table[57] = gpa\n    grades_table[58]\
    \ = letter\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8m_qzcss.lua:96: ''end'' expected (to close ''function'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local lettergrade\n    if gpa > 3.0 then\n\
    \        lettergrade = \"A+\"\n    elseif gpa > 2.7 then\n        lettergrade\
    \ = \"A\"\n    elseif gpa > 2.3 then\n        lettergrade = \"A-\"\n    elseif\
    \ gpa > 2.0 then\n        lettergrade = \"B+\"\n    elseif gpa > 1.7 then\n  \
    \      lettergrade = \"B\"\n    elseif gpa > 1.3 then\n        lettergrade = \"\
    B-\"\n    elseif gpa > 1.0 then\n        lettergrade = \"C+\"\n    elseif gpa\
    \ > 0.7 then\n        lettergrade = \"C\"\n    elseif gpa > 0.3 then\n       \
    \ lettergrade = \"C-\"\n    elseif gpa > 0.0 then\n        lettergrade = \"D+\"\
    \n    elseif gpa > -0.3 then\n        lettergrade = \"D\"\n    elseif gpa > -0.7\
    \ then\n        lettergrade = \"D-\"\n    elseif gpa > -1.0 then\n        lettergrade\
    \ = \"E\"\n    else\n        lettergrade = \"F\"\n    end\n    grades_table[1]\
    \ = lettergrade\n    return grades_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfia87j.lua:61:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {\"A+\"}\nstack traceback:\n\
    \t/tmp/tmprqfia87j.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n    local grades_table\
    \ = {}\n    local gpa = grades[1]\n    local letter = grades[2]\n    grades_table[1]\
    \ = gpa\n    grades_table[2] = letter\n    return grades_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50gcmkt_.lua:33:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3}\nstack traceback:\n\
    \t/tmp/tmp50gcmkt_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n  -- Write your\
    \ code here\n  local grades_table = {}\n  local gpa = grades[1]\n  local letter\
    \ = grades[2]\n  grades_table[1] = gpa\n  grades_table[2] = letter\n  return grades_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9mbaw2z.lua:34:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: {4.0, 3}\nstack traceback:\n\
    \t/tmp/tmpp9mbaw2z.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\nlocal function numerical_letter_grade(grades)\n   local grades_table\
    \ = {}\n   for i = 1, #grades do\n      grades_table[i] = {\n         gpa = grades[i],\n\
    \         letter_grade = \n            ((grades[i] > 0 and 'A+') or\n        \
    \     (grades[i] < 0 and 'A-') or\n             (grades[i] > 0 and 'B+') or\n\
    \             (grades[i] < 0 and 'B-') or\n             (grades[i] > 0 and 'C+')\
    \ or\n             (grades[i] < 0 and 'C-') or\n             (grades[i] > 0 and\
    \ 'D+') or\n             (grades[i] < 0 and 'D-') or\n             (grades[i]\
    \ > 0 and 'D+') or\n             (grades[i] < 0 and 'D-') or\n             (grades[i]\
    \ > 0 and 'E')\n            )\n      }\n   end\n   return grades_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zavcanl.lua:47:\
    \ expected: \n{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \n{\n    {gpa=4.0,\
    \ letter_grade=\"A+\"},\n    {gpa=3, letter_grade=\"A+\"},\n    {gpa=1.7, letter_grade=\"\
    A+\"},\n    {gpa=2, letter_grade=\"A+\"},\n    {gpa=3.5, letter_grade=\"A+\"}\n\
    }\nstack traceback:\n\t/tmp/tmp8zavcanl.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660005518
