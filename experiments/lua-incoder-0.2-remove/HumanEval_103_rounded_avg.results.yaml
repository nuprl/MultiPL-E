language: lua
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m ==\
    \ 0 then\n      return -1\n   end\n   if n == m then\n      return n\n   end\n\
    \   local sum = 0\n   for i = n, m + 1 do\n      sum = sum + i\n   end\n   return\
    \ sum / m\nend\nprint(rounded_avg(5,3))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,1))\n\
    print(rounded_avg(5,2))\nprint(rounded_avg(5,4))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,6))\n\
    print(rounded_avg(5,7))\nprint(rounded_avg(5,8))\nprint(rounded_avg(5,9))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,11))\nprint(rounded_avg(5,12))\nprint(rounded_avg(5,13))\n\
    print(rounded_avg(5,14))\nprint(rounded_avg(5,15))\nprint(rounded_avg(5,16))\n\
    print(rounded_avg(5,17))\nprint(rounded_avg(5,18))\nprint(rounded_avg(5,19))\n\
    print(rounded_avg(5,20))\nprint(rounded_avg(5,21))\nprint(rounded_avg(5,22))\n\
    print(rounded_avg(5,23))\nprint(rounded_avg(5,24))\nprint(rounded_avg(5,25))\n\
    print(rounded_avg(5,26))\nprint(rounded_avg(5,27))\nprint(rounded_avg(5,28))\n\
    print(rounded_avg(5,29))\nprint(rounded_avg(5,30))\nprint(rounded_avg(5,31))\n\
    print(rounded_avg(5,32))\nprint(rounded_avg(5,33))\nprint(rounded_avg(5,34))\n\
    print(rounded_avg(5,35))\nprint(rounded_avg(5,36))\nprint(rounded_avg(5,37))\n\
    print(rounded_avg(5,38))\nprint(rounded_avg(5,39))\nprint(rounded_avg(5,40))\n\
    print(rounded_avg(5,41))\nprint(rounded_avg(5,42))\nprint(rounded_avg(5,43))\n\
    print(rounded_avg(5,44))\nprint(rounded_avg(5,45))\nprint(rounded_avg(5,46))\n\
    print(rounded_avg(5,47))\nprint(rounded_avg(5,48))\nprint(rounded_avg(5,49))\n\
    print(rounded_avg(5,50))\nprint(rounded_avg(5,51))\nprint(roun\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpczb_jqrw.lua:72: '')'' expected (to close ''('' at line 71)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50fx_w3z.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp50fx_w3z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m >\
    \ n then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nprint(rounded_avg(3,5))\nprint(rounded_avg(3,4))\n\
    print(rounded_avg(3,1))\nprint(rounded_avg(3,0))\nprint(rounded_avg(3,-1))\nprint(rounded_avg(3,-2))\n\
    print(rounded_avg(3,-3))\nprint(rounded_avg(3,-4))\nprint(rounded_avg(3,-5))\n\
    print(rounded_avg(3,-6))\nprint(rounded_avg(3,-7))\nprint(rounded_avg(3,-8))\n\
    print(rounded_avg(3,-9))\nprint(rounded_avg(3,-10))\nprint(rounded_avg(3,-11))\n\
    print(rounded_avg(3,-12))\nprint(rounded_avg(3,-13))\nprint(rounded_avg(3,-14))\n\
    print(rounded_avg(3,-15))\nprint(rounded_avg(3,-16))\nprint(rounded_avg(3,-17))\n\
    print(rounded_avg(3,-18))\nprint(rounded_avg(3,-19))\nprint(rounded_avg(3,-20))\n\
    print(rounded_avg(3,-21))\nprint(rounded_avg(3,-22))\nprint(rounded_avg(3,-23))\n\
    print(rounded_avg(3,-24))\nprint(rounded_avg(3,-25))\nprint(rounded_avg(3,-26))\n\
    print(rounded_avg(3,-27))\nprint(rounded_avg(3,-28))\nprint(rounded_avg(3,-29))\n\
    print(rounded_avg(3,-30))\nprint(rounded_avg(3,-31))\nprint(rounded_avg(3,-32))\n\
    print(rounded_avg(3,-33))\nprint(rounded_avg(3,-34))\nprint(rounded_avg(3,-35))\n\
    print(rounded_avg(3,-36))\nprint(rounded_avg(3,-37))\nprint(rounded_avg(3,-38))\n\
    print(rounded_avg(3,-39))\nprint(rounded_avg(3,-40))\nprint(rounded_avg(3,-41))\n\
    print(rounded_avg(3,-42))\nprint(rounded_avg(3,-43))\nprint(rounded_avg(3,-44))\n\
    print(rounded_avg(3,-45))\nprint(rounded_avg(3,-46))\nprint(rounded_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1md9cj0c.lua:67: '')'' expected (to close ''('' at line 66)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt00hzv.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpqnt00hzv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m ==\
    \ 0 then\n      return -1\n   end\n   if n == m then\n      return n\n   end\n\
    \   local sum = 0\n   for i = n, m do\n      sum = sum + i\n   end\n   return\
    \ sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprnnf8vr.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpprnnf8vr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50fx_w3z.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp50fx_w3z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m + 1 do\n    sum\
    \ = sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr_imna9.lua:20:\
    \ expected: \"0b11\"\nactual: 4.2\nstack traceback:\n\t/tmp/tmpnr_imna9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    local\
    \ avg = 0\n    for i = n, m do\n        avg = avg + i\n    end\n    return avg\
    \ / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4ht_la_.lua:17:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp_4ht_la_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >=\
    \ m then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp86f2mdq.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpp86f2mdq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  local i\
    \ = 1\n  while i <= m do\n    sum = sum + i\n    count = count + 1\n    i = i\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdroyydmt.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpdroyydmt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then return -1 end\n  if n == m then return n end\n  local sum = 0\n  local\
    \ count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg394288.lua:21:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpwg394288.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81cpjlu2.lua:18:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp81cpjlu2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81cpjlu2.lua:18:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp81cpjlu2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  else\n    return math.floor((n + m) / 2)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaq8jqdv5.lua:17:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpaq8jqdv5.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt00hzv.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpqnt00hzv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81cpjlu2.lua:18:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp81cpjlu2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt00hzv.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpqnt00hzv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo88r7hv8.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo88r7hv8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\nend\n\
    print(rounded_avg(6, 9))\nprint(rounded_avg(6, 10))\nprint(rounded_avg(6, 11))\n\
    print(rounded_avg(6, 12))\nprint(rounded_avg(6, 13))\nprint(rounded_avg(6, 14))\n\
    print(rounded_avg(6, 15))\nprint(rounded_avg(6, 16))\nprint(rounded_avg(6, 17))\n\
    print(rounded_avg(6, 18))\nprint(rounded_avg(6, 19))\nprint(rounded_avg(6, 20))\n\
    print(rounded_avg(6, 21))\nprint(rounded_avg(6, 22))\nprint(rounded_avg(6, 23))\n\
    print(rounded_avg(6, 24))\nprint(rounded_avg(6, 25))\nprint(rounded_avg(6, 26))\n\
    print(rounded_avg(6, 27))\nprint(rounded_avg(6, 28))\nprint(rounded_avg(6, 29))\n\
    print(rounded_avg(6, 30))\nprint(rounded_avg(6, 31))\nprint(rounded_avg(6, 32))\n\
    print(rounded_avg(6, 33))\nprint(rounded_avg(6, 34))\nprint(rounded_avg(6, 35))\n\
    print(rounded_avg(6, 36))\nprint(rounded_avg(6, 37))\nprint(rounded_avg(6, 38))\n\
    print(rounded_avg(6, 39))\nprint(rounded_avg(6, 40))\nprint(rounded_avg(6, 41))\n\
    print(rounded_avg(6, 42))\nprint(rounded_avg(6, 43))\nprint(rounded_avg(6, 44))\n\
    print(rounded_avg(6, 45))\nprint(rounded_avg(6, 46))\nprint(rounded_avg(6, 47))\n\
    print(rounded_avg(6, 48))\nprint(rounded_avg(6, 49))\nprint(rounded_avg(6, 50))\n\
    print(rounded_avg(6, 51))\nprint(rounded_avg(6, 52))\nprint(rounded_avg(6, 53))\n\
    print(rounded_avg(6, 54))\nprint(rounded_avg(6, 55))\nprint(rounded_avg(6, 56))\n\
    print(rounded_avg(6, 57))\nprint(rounded_avg(6, 58))\nprint(rounded_avg(6, 59))\n\
    print(rounded_avg(6, 60))\nprint(rounded_avg\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp89h16nvj.lua:69: '')'' expected (to close ''('' at line 68)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdiutiuqu.lua:20:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpdiutiuqu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg * 2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_5y7gc_.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo_5y7gc_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  elseif n == m then\n    return n\n  else\n    return\
    \ math.floor((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocufbhv0.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpocufbhv0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt00hzv.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpqnt00hzv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg =\
    \ avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn101stw3.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpn101stw3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  local i = 1\n  while i <= m do\n    sum = sum + i\n\
    \    count = count + 1\n    i = i + 1\n  end\n  if n <= m then\n    return -1\n\
    \  end\n  local avg = sum / count\n  local bin = math.floor(avg)\n  local dec\
    \ = math.floor(avg - bin)\n  return bin + dec - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplea9y52e.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmplea9y52e.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local i\n  for i = n, m do\n    avg = avg + i\n  end\n  return avg\
    \ / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppck__jj6.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmppck__jj6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg * 2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_5y7gc_.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo_5y7gc_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n <=\
    \ m then\n    return n\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooud7tcx.lua:17:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpooud7tcx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local nm\
    \ = math.floor(n/m)*m\n  if nm > m then return -1 end\n  return nm\nend\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 9))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\
    0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\
    0\n0\n0\n0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05jbrozx.lua:69:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp05jbrozx.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kz2zxd.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp24kz2zxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n <=\
    \ m then\n    return n\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooud7tcx.lua:17:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpooud7tcx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m ==\
    \ 0 then\n      return -1\n   end\n   if n == m then\n      return n\n   end\n\
    \   local sum = 0\n   for i = n, m do\n      sum = sum + i\n   end\n   return\
    \ sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprnnf8vr.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpprnnf8vr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  else\n    return ((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uyco4g7.lua:17:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_uyco4g7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if n >=\
    \ m then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7pmigxq.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmph7pmigxq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  elseif n == m then\n    return n\n  else\n    return\
    \ ((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m2h4m8q.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp4m2h4m8q.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0\n  local count = 0\n  local i = 1\n  while i <= m do\n    count = count\
    \ + 1\n    avg = avg + i\n    i = i + 1\n  end\n  if n > m then\n    return -1\n\
    \  end\n  return avg / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphz942ce.lua:24:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpphz942ce.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  elseif n == m then\n    return n\n  else\n    return\
    \ ((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m2h4m8q.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp4m2h4m8q.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gfdc4tn.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp_gfdc4tn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if n >\
    \ m then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso9cv331.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpso9cv331.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\n\
    print(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\n\
    print(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\n\
    print(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\n\
    print(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\n\
    print(rounded_avg(5,10))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0on_36ub.lua:74: '')'' expected (to close ''('' at line 73)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then return -1 end\n  return ((n+m)/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50gp6k5i.lua:14:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp50gp6k5i.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local i = 1\n  while i <= m do\n    avg = avg + i\n    i = i + 1\n\
    \  end\n  avg = avg / m\n  return math.floor(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitxc0uyp.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpitxc0uyp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nprint(rounded_avg(4,6))\nprint(rounded_avg(4,5))\n\
    print(rounded_avg(4,4))\nprint(rounded_avg(4,3))\nprint(rounded_avg(4,2))\nprint(rounded_avg(4,1))\n\
    print(rounded_avg(4,0))\nprint(rounded_avg(3,0))\nprint(rounded_avg(2,0))\nprint(rounded_avg(1,0))\n\
    print(rounded_avg(0,0))\nprint(rounded_avg(5,0))\nprint(rounded_avg(6,0))\nprint(rounded_avg(7,0))\n\
    print(rounded_avg(8,0))\nprint(rounded_avg(9,0))\nprint(rounded_avg(10,0))\nprint(rounded_avg(11,0))\n\
    print(rounded_avg(12,0))\nprint(rounded_avg(13,0))\nprint(rounded_avg(14,0))\n\
    print(rounded_avg(15,0))\nprint(rounded_avg(16,0))\nprint(rounded_avg(17,0))\n\
    print(rounded_avg(18,0))\nprint(rounded_avg(19,0))\nprint(rounded_avg(20,0))\n\
    print(rounded_avg(21,0))\nprint(rounded_avg(22,0))\nprint(rounded_avg(23,0))\n\
    print(rounded_avg(24,0))\nprint(rounded_avg(25,0))\nprint(rounded_avg(26,0))\n\
    print(rounded_avg(27,0))\nprint(rounded_avg(28,0))\nprint(rounded_avg(29,0))\n\
    print(rounded_avg(30,0))\nprint(rounded_avg(31,0))\nprint(rounded_avg(32,0))\n\
    print(rounded_avg(33,0))\nprint(rounded_avg(34,0))\nprint(rounded_avg(35,0))\n\
    print(rounded_avg(36,0))\nprint(rounded_avg(37,0))\nprint(rounded_avg(38,0))\n\
    print(rounded_avg(39,0))\nprint(rounded_avg(40,0))\nprint(rounded_avg(41,0))\n\
    print(rounded_avg(42,0))\nprint(rounded_avg(43,0))\nprint(rounded_avg(44,0))\n\
    print(rounded_avg(45,0))\nprint(rounded_avg(46,0))\nprint(rounded_avg(47,0))\n\
    print(rounded_avg(48,0))\nprint(rounded_avg(49,0))\nprint(rounded_avg(50,0))\n\
    print(rounded_avg(51,0))\nprint(rounded_avg(5\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxgfp878_.lua:75: '')'' expected (to close ''('' at line 74)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m ==\
    \ 0 then\n      return -1\n   end\n   if n == m then\n      return n\n   end\n\
    \   local sum = 0\n   for i = n, m do\n      sum = sum + i\n   end\n   return\
    \ sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprnnf8vr.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpprnnf8vr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nprint(rounded_avg(100, 200))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "7575\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj512mhc.lua:19:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpmj512mhc.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    local\
    \ sum = 0\n    local count = 0\n    for i = n, m do\n        sum = sum + i\n \
    \       count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplul0mbmt.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmplul0mbmt.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m >\
    \ n then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4cfqb3.lua:20:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp2t4cfqb3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  return ((n + m) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc97h3k6.lua:14:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpsc97h3k6.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local nn\
    \ = math.floor(n)\n  local mm = math.floor(m)\n  if mm > n then\n    return -1\n\
    \  end\n  return nn + mm / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydd99kgx.lua:18:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpydd99kgx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gfdc4tn.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp_gfdc4tn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kz2zxd.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp24kz2zxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    if m\
    \ == 0 then\n        return -1\n    end\n    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    return sum / m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfa6_cp5.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpcfa6_cp5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  local i = 1\n  while i <= m do\n    count = count\
    \ + 1\n    avg = avg + i\n    i = i + 1\n  end\n  if n >= m then\n    return -1\n\
    \  end\n  avg = avg / count\n  avg = math.floor(avg * 2) / 2\n  avg = math.floor(avg\
    \ + 0.5) / 2.0\n  return avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8uwnti4.lua:27:\
    \ expected: \"0b11\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpi8uwnti4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gfdc4tn.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp_gfdc4tn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if n >\
    \ m then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso9cv331.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpso9cv331.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n <=\
    \ m then\n    return -1\n  else\n    return math.floor(n / m) * m + math.floor(n\
    \ / m) * math.ceil(m / n)\n  end\nend\nprint(rounded_avg(12, 15))\nprint(rounded_avg(12,\
    \ 16))\nprint(rounded_avg(12, 17))\nprint(rounded_avg(12, 18))\nprint(rounded_avg(12,\
    \ 19))\nprint(rounded_avg(12, 20))\nprint(rounded_avg(12, 21))\nprint(rounded_avg(12,\
    \ 22))\nprint(rounded_avg(12, 23))\nprint(rounded_avg(12, 24))\nprint(rounded_avg(12,\
    \ 25))\nprint(rounded_avg(12, 26))\nprint(rounded_avg(12, 27))\nprint(rounded_avg(12,\
    \ 28))\nprint(rounded_avg(12, 29))\nprint(rounded_avg(12, 30))\nprint(rounded_avg(12,\
    \ 31))\nprint(rounded_avg(12, 32))\nprint(rounded_avg(12, 33))\nprint(rounded_avg(12,\
    \ 34))\nprint(rounded_avg(12, 35))\nprint(rounded_avg(12, 36))\nprint(rounded_avg(12,\
    \ 37))\nprint(rounded_avg(12, 38))\nprint(rounded_avg(12, 39))\nprint(rounded_avg(12,\
    \ 40))\nprint(rounded_avg(12, 41))\nprint(rounded_avg(12, 42))\nprint(rounded_avg(12,\
    \ 43))\nprint(rounded_avg(12, 44))\nprint(rounded_avg(12, 45))\nprint(rounded_avg(12,\
    \ 46))\nprint(rounded_avg(12, 47))\nprint(rounded_avg(12, 48))\nprint(rounded_avg(12,\
    \ 49))\nprint(rounded_avg(12, 50))\nprint(rounded_avg(12, 51))\nprint(rounded_avg(12,\
    \ 52))\nprint(rounded_avg(12, 53))\nprint(rounded_avg(12, 54))\nprint(rounded_avg(12,\
    \ 55))\nprint(rounded_avg(12, 56))\nprint(rounded_avg(12, 57))\nprint(rounded_avg(12,\
    \ 58))\nprint(rounded_avg(12, 59))\nprint(rounded_avg(12, 60))\nprint(rounded_avg(12,\
    \ 61))\nprint(rounded_avg(12, 62))\nprint(rounded_avg(12, 63))\nprint(rounded_avg(12,\
    \ 64))\nprint(rounded_avg(12, 65))\nprint(rounded_avg(12, 66))\nprint(rounded_avg(12,\
    \ 67))\nprint(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz4sgjioo.lua:67: '')'' expected (to close ''('' at line 66)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while n\
    \ <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n  return\
    \ sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb04hv_p9.lua:23:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpb04hv_p9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  return avg / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp014oczxl.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp014oczxl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt00hzv.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpqnt00hzv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m >\
    \ n then\n      return -1\n   end\n   local sum = 0\n   for i = n, m + 1 do\n\
    \      sum = sum + i\n   end\n   return sum / m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr5lisf9.lua:20:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpwr5lisf9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m ==\
    \ 0 then\n      return -1\n   end\n   if n == m then\n      return n\n   end\n\
    \   local sum = 0\n   for i = n, m do\n      sum = sum + i\n   end\n   return\
    \ sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprnnf8vr.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpprnnf8vr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  return ((n + m) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc97h3k6.lua:14:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpsc97h3k6.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    if m\
    \ == 0 then\n        return -1\n    end\n    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    return sum / m\nend\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 0))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 200\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ycb_y1p.lua:69: '')'' expected (to close ''('' at line 68)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nprint(rounded_avg(5,6))\nprint(rounded_avg(5,5))\nprint(rounded_avg(5,4))\n\
    print(rounded_avg(5,3))\nprint(rounded_avg(5,2))\nprint(rounded_avg(5,1))\nprint(rounded_avg(4,1))\n\
    print(rounded_avg(3,1))\nprint(rounded_avg(2,1))\nprint(rounded_avg(1,1))\nprint(rounded_avg(0,1))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(4,0))\nprint(rounded_avg(3,0))\nprint(rounded_avg(2,0))\n\
    print(rounded_avg(1,0))\nprint(rounded_avg(0,0))\nprint(rounded_avg(5,5))\nprint(rounded_avg(4,5))\n\
    print(rounded_avg(3,5))\nprint(rounded_avg(2,5))\nprint(rounded_avg(1,5))\nprint(rounded_avg(0,5))\n\
    print(rounded_avg(5,4))\nprint(rounded_avg(4,4))\nprint(rounded_avg(3,4))\nprint(rounded_avg(2,4))\n\
    print(rounded_avg(1,4))\nprint(rounded_avg(0,4))\nprint(rounded_avg(5,3))\nprint(rounded_avg(4,3))\n\
    print(rounded_avg(3,3))\nprint(rounded_avg(2,3))\nprint(rounded_avg(1,3))\nprint(rounded_avg(0,3))\n\
    print(rounded_avg(5,2))\nprint(rounded_avg(4,2))\nprint(rounded_avg(3,2))\nprint(rounded_avg(2,2))\n\
    print(rounded_avg(1,2))\nprint(rounded_avg(0,2))\nprint(rounded_avg(5,1))\nprint(rounded_avg(4,1))\n\
    print(rounded_avg(3,1))\nprint(rounded_avg(2,1))\nprint(rounded_avg(1,1))\nprint(rounded_avg(0,1))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(4,0))\nprint(rounded_avg(3,0))\nprint(rounded_avg(2,0))\n\
    print(rounded_avg(1,0))\nprint(rounded_avg(0,0))\nprint(rounded_avg(5,5))\nprint(rounded_avg(4,5))\n\
    print(rounded_avg(3,5))\nprint(rounded_avg(2,5))\nprint(rounded_avg(1,5))\nprint(rounded_avg(0,5))\n\
    print(rounded_avg(5,4))\nprint(rounded_avg(4,4))\nprint(roun\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwno2z0yx.lua:81: '')'' expected (to close ''('' at line 80)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  return ((n + m) / 2)\nend\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 0))\nprint(rounded_avg(100, -10))\nprint(rounded_avg(100,\
    \ 100))\nprint(rounded_avg(100, 200))\nprint(rounded_avg(100, 300))\nprint(rounded_avg(100,\
    \ 400))\nprint(rounded_avg(100, 500))\nprint(rounded_avg(100, 600))\nprint(rounded_avg(100,\
    \ 700))\nprint(rounded_avg(100, 800))\nprint(rounded_avg(100, 900))\nprint(rounded_avg(100,\
    \ 1000))\nprint(rounded_avg(100, 1100))\nprint(rounded_avg(100, 1200))\nprint(rounded_avg(100,\
    \ 1300))\nprint(rounded_avg(100, 1400))\nprint(rounded_avg(100, 1500))\nprint(rounded_avg(100,\
    \ 1600))\nprint(rounded_avg(100, 1700))\nprint(rounded_avg(100, 1800))\nprint(rounded_avg(100,\
    \ 1900))\nprint(rounded_avg(100, 2000))\nprint(rounded_avg(100, 2100))\nprint(rounded_avg(100,\
    \ 2200))\nprint(rounded_avg(100, 2300))\nprint(rounded_avg(100, 2400))\nprint(rounded_avg(100,\
    \ 2500))\nprint(rounded_avg(100, 2600))\nprint(rounded_avg(100, 2700))\nprint(rounded_avg(100,\
    \ 2800))\nprint(rounded_avg(100, 2900))\nprint(rounded_avg(100, 3000))\nprint(rounded_avg(100,\
    \ 3100))\nprint(rounded_avg(100, 3200))\nprint(rounded_avg(100, 3300))\nprint(rounded_avg(100,\
    \ 3400))\nprint(rounded_avg(100, 3500))\nprint(rounded_avg(100, 3600))\nprint(rounded_avg(100,\
    \ 3700))\nprint(rounded_avg(100, 3800))\nprint(rounded_avg(100, 3900))\nprint(rounded_avg(100,\
    \ 4000))\nprint(rounded_avg(100, 4100))\nprint(rounded_avg(100, 4200))\nprint(rounded_avg(100,\
    \ 4300))\nprint(rounded_avg(100, 4400))\nprint(rounded_avg(100, 4500))\nprint(rounded_avg(100,\
    \ 4600))\nprint(rounded_avg(100, 4700))\nprint(rounded_avg(100, 4800))\nprint(rounded_avg(100,\
    \ 4900))\nprint(rounded_avg(100, 5000\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7o8ue4wc.lua:65: '')'' expected (to close ''('' at line 64)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0\n  local count = 0\n  local i = n\n  while i <= m do\n    count = count\
    \ + 1\n    avg = avg + i\n    i = i + 1\n  end\n  if count > 0 then\n    avg =\
    \ avg / count\n  end\n  return avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9p56yp6.lua:24:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpv9p56yp6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  else\n    return math.floor((n + m) / 2)\n  end\nend\n\
    print(rounded_avg(8, 10))\nprint(rounded_avg(9, 10))\nprint(rounded_avg(8, 11))\n\
    print(rounded_avg(9, 11))\nprint(rounded_avg(8, 12))\nprint(rounded_avg(9, 12))\n\
    print(rounded_avg(8, 13))\nprint(rounded_avg(9, 13))\nprint(rounded_avg(8, 14))\n\
    print(rounded_avg(9, 14))\nprint(rounded_avg(8, 15))\nprint(rounded_avg(9, 15))\n\
    print(rounded_avg(8, 16))\nprint(rounded_avg(9, 16))\nprint(rounded_avg(8, 17))\n\
    print(rounded_avg(9, 17))\nprint(rounded_avg(8, 18))\nprint(rounded_avg(9, 18))\n\
    print(rounded_avg(8, 19))\nprint(rounded_avg(9, 19))\nprint(rounded_avg(8, 20))\n\
    print(rounded_avg(9, 20))\nprint(rounded_avg(8, 21))\nprint(rounded_avg(9, 21))\n\
    print(rounded_avg(8, 22))\nprint(rounded_avg(9, 22))\nprint(rounded_avg(8, 23))\n\
    print(rounded_avg(9, 23))\nprint(rounded_avg(8, 24))\nprint(rounded_avg(9, 24))\n\
    print(rounded_avg(8, 25))\nprint(rounded_avg(9, 25))\nprint(rounded_avg(8, 26))\n\
    print(rounded_avg(9, 26))\nprint(rounded_avg(8, 27))\nprint(rounded_avg(9, 27))\n\
    print(rounded_avg(8, 28))\nprint(rounded_avg(9, 28))\nprint(rounded_avg(8, 29))\n\
    print(rounded_avg(9, 29))\nprint(rounded_avg(8, 30))\nprint(rounded_avg(9, 30))\n\
    print(rounded_avg(8, 31))\nprint(rounded_avg(9, 31))\nprint(rounded_avg(8, 32))\n\
    print(rounded_avg(9, 32))\nprint(rounded_avg(8, 33))\nprint(rounded_avg(9, 33))\n\
    print(rounded_avg(8, 34))\nprint(rounded_avg(9, 34))\nprint(rounded_avg(8, 35))\n\
    print(rounded_avg(9, 35))\nprint(rounded_avg(8, 36))\nprint(rounded_avg(9, 36))\n\
    print(rounded_avg(8, 37))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "9\n9\n9\n10\n10\n10\n10\n11\n11\n11\n11\n12\n12\n12\n12\n13\n13\n13\n13\n\
    14\n14\n14\n14\n15\n15\n15\n15\n16\n16\n16\n16\n17\n17\n17\n17\n18\n18\n18\n18\n\
    19\n19\n19\n19\n20\n20\n20\n20\n21\n21\n21\n21\n22\n22\n22\n22\nF\nFailed tests:\n\
    -------------\n1) test_humaneval\n/tmp/tmp408vk1s3.lua:72: expected: \"0b11\"\n\
    actual: 3\nstack traceback:\n\t/tmp/tmp408vk1s3.lua:72: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return sum / 2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg56qn7wj.lua:17:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpg56qn7wj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m >\
    \ n then return -1 end\n   local sum = 0\n   for i = n, m do\n      sum = sum\
    \ + i\n   end\n   return sum / 2\nend\nprint(rounded_avg(5,10))\nprint(rounded_avg(5,5))\n\
    print(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(rounded_avg(5,-1))\nprint(rounded_avg(5,10))\n\
    print(rounded_avg(5,5))\nprint(rounded_avg(5,0))\nprint(roun\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps2lh4_82.lua:74: '')'' expected (to close ''('' at line 73)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  else\n    return math.floor(n / m) * m\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s8yxffw.lua:17:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp3s8yxffw.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  return avg / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp014oczxl.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp014oczxl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  return ((n + m) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj569gveg.lua:16:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpj569gveg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  elseif n == m then\n    return n\n  else\n    return\
    \ math.floor((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocufbhv0.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpocufbhv0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nprint(rounded_avg(3,5))\nprint(rounded_avg(3,0))\n\
    print(rounded_avg(3,1))\nprint(rounded_avg(3,2))\nprint(rounded_avg(3,3))\nprint(rounded_avg(3,4))\n\
    print(rounded_avg(3,5))\nprint(rounded_avg(3,6))\nprint(rounded_avg(3,7))\nprint(rounded_avg(3,8))\n\
    print(rounded_avg(3,9))\nprint(rounded_avg(3,10))\nprint(rounded_avg(3,11))\n\
    print(rounded_avg(3,12))\nprint(rounded_avg(3,13))\nprint(rounded_avg(3,14))\n\
    print(rounded_avg(3,15))\nprint(rounded_avg(3,16))\nprint(rounded_avg(3,17))\n\
    print(rounded_avg(3,18))\nprint(rounded_avg(3,19))\nprint(rounded_avg(3,20))\n\
    print(rounded_avg(3,21))\nprint(rounded_avg(3,22))\nprint(rounded_avg(3,23))\n\
    print(rounded_avg(3,24))\nprint(rounded_avg(3,25))\nprint(rounded_avg(3,26))\n\
    print(rounded_avg(3,27))\nprint(rounded_avg(3,28))\nprint(rounded_avg(3,29))\n\
    print(rounded_avg(3,30))\nprint(rounded_avg(3,31))\nprint(rounded_avg(3,32))\n\
    print(rounded_avg(3,33))\nprint(rounded_avg(3,34))\nprint(rounded_avg(3,35))\n\
    print(rounded_avg(3,36))\nprint(rounded_avg(3,37))\nprint(rounded_avg(3,38))\n\
    print(rounded_avg(3,39))\nprint(rounded_avg(3,40))\nprint(rounded_avg(3,41))\n\
    print(rounded_avg(3,42))\nprint(rounded_avg(3,43))\nprint(rounded_avg(3,44))\n\
    print(rounded_avg(3,45))\nprint(rounded_avg(3,46))\nprint(rounded_avg(3,47))\n\
    print(rounded_avg(3,48))\nprint(rounded_avg(3,49))\nprint(rounded_avg(3,50))\n\
    print(rounded_avg(3,51))\nprint(rounded_avg(3,52))\nprint(rounded_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpex21wy6a.lua:71: '')'' expected (to close ''('' at line 70)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg * 2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_5y7gc_.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo_5y7gc_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  if n == m then\n    return n\n  end\n  local\
    \ sum = 0\n  local count = 0\n  local i = 1\n  while i <= m do\n    sum = sum\
    \ + i\n    count = count + 1\n    i = i + 1\n  end\n  return sum / count\nend\n\
    print(rounded_avg(7, 3))\nprint(rounded_avg(7, 0))\nprint(rounded_avg(7, 1))\n\
    print(rounded_avg(7, 2))\nprint(rounded_avg(7, 4))\nprint(rounded_avg(7, 5))\n\
    print(rounded_avg(7, 6))\nprint(rounded_avg(7, 7))\nprint(rounded_avg(7, 8))\n\
    print(rounded_avg(7, 9))\nprint(rounded_avg(7, 10))\nprint(rounded_avg(7, 11))\n\
    print(rounded_avg(7, 12))\nprint(rounded_avg(7, 13))\nprint(rounded_avg(7, 14))\n\
    print(rounded_avg(7, 15))\nprint(rounded_avg(7, 16))\nprint(rounded_avg(7, 17))\n\
    print(rounded_avg(7, 18))\nprint(rounded_avg(7, 19))\nprint(rounded_avg(7, 20))\n\
    print(rounded_avg(7, 21))\nprint(rounded_avg(7, 22))\nprint(rounded_avg(7, 23))\n\
    print(rounded_avg(7, 24))\nprint(rounded_avg(7, 25))\nprint(rounded_avg(7, 26))\n\
    print(rounded_avg(7, 27))\nprint(rounded_avg(7, 28))\nprint(rounded_avg(7, 29))\n\
    print(rounded_avg(7, 30))\nprint(rounded_avg(7, 31))\nprint(rounded_avg(7, 32))\n\
    print(rounded_avg(7, 33))\nprint(rounded_avg(7, 34))\nprint(rounded_avg(7, 35))\n\
    print(rounded_avg(7, 36))\nprint(rounded_avg(7, 37))\nprint(rounded_avg(7, 38))\n\
    print(rounded_avg(7, 39))\nprint(rounded_avg(7, 40))\nprint(rounded_avg(7, 41))\n\
    print(rounded_avg(7, 42))\nprint(rounded_avg(7, 43))\nprint(rounded_avg(7, 44))\n\
    print(rounded_avg(7, 45))\nprint(rounded_avg(7, 46))\nprint(rounded_avg(7, 47))\n\
    print(rounded_avg(7, 48))\nprint(rounded_avg(7, 49))\nprint(rounded_avg(7, 50))\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "2\n-1\n1\n1.5\n2.5\n3\n3.5\n7\n4.5\n5\n5.5\n6\n6.5\n7\n7.5\n8\n8.5\n9\n\
    9.5\n10\n10.5\n11\n11.5\n12\n12.5\n13\n13.5\n14\n14.5\n15\n15.5\n16\n16.5\n17\n\
    17.5\n18\n18.5\n19\n19.5\n20\n20.5\n21\n21.5\n22\n22.5\n23\n23.5\n24\n24.5\n25\n\
    25.5\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj73o9ihz.lua:79:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpj73o9ihz.lua:79:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then return -1 end\n  return n + (m - n) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv2so4tm.lua:14:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmprv2so4tm.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg * 2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_5y7gc_.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo_5y7gc_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  else\n    return ((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyv5ma_c.lua:17:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpnyv5ma_c.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n <=\
    \ m then\n    return n\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooud7tcx.lua:17:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpooud7tcx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  local i = 1\n  while i <= m do\n    count = count\
    \ + 1\n    avg = avg + i\n    i = i + 1\n  end\n  if n <= m then\n    return -1\n\
    \  end\n  avg = avg / count\n  avg = math.floor(avg)\n  avg = math.pow(10, math.floor(math.log10(avg)))\n\
    \  return avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp527hencm.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp527hencm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo88r7hv8.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo88r7hv8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gduuxfa.lua:18:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8gduuxfa.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt00hzv.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpqnt00hzv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if n >\
    \ m then\n      return -1\n   else\n      return (n + (m - n)) / 2\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf7vu42q.lua:17:\
    \ expected: \"0b11\"\nactual: 2.5\nstack traceback:\n\t/tmp/tmpxf7vu42q.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m >\
    \ n then return -1 end\n   local sum = 0\n   for i = n, m + 1 do\n      sum =\
    \ sum + i\n   end\n   return sum / m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzifk940.lua:18:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpwzifk940.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local nm\
    \ = n + m\n  if nm > m then return -1 end\n  return (n + m) / 2.0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph4fe4jt.lua:15:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpph4fe4jt.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    local\
    \ nm = math.floor(n/m)*m\n    if nm > m then\n        return -1\n    end\n   \
    \ return nm\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tms6mt2.lua:17:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp2tms6mt2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    if m\
    \ == 0 then\n        return -1\n    end\n    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    return sum / m\nend\nprint(rounded_avg(100,\
    \ 200))\nprint(rounded_avg(100, 0))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -100))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100,\
    \ -200))\nprint(rounded_avg(100, -200))\nprint(rounded_avg(100, -200))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "75.75\n-1\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n\
    -0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n\
    -0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\n-0\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpe_9f991d.lua:68: expected: \"0b11\"\nactual: 3\nstack\
    \ traceback:\n\t/tmp/tmpe_9f991d.lua:68: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nprint(rounded_avg(6, 10))\nprint(rounded_avg(6,\
    \ 11))\nprint(rounded_avg(6, 12))\nprint(rounded_avg(6, 13))\nprint(rounded_avg(6,\
    \ 14))\nprint(rounded_avg(6, 15))\nprint(rounded_avg(6, 16))\nprint(rounded_avg(6,\
    \ 17))\nprint(rounded_avg(6, 18))\nprint(rounded_avg(6, 19))\nprint(rounded_avg(6,\
    \ 20))\nprint(rounded_avg(6, 21))\nprint(rounded_avg(6, 22))\nprint(rounded_avg(6,\
    \ 23))\nprint(rounded_avg(6, 24))\nprint(rounded_avg(6, 25))\nprint(rounded_avg(6,\
    \ 26))\nprint(rounded_avg(6, 27))\nprint(rounded_avg(6, 28))\nprint(rounded_avg(6,\
    \ 29))\nprint(rounded_avg(6, 30))\nprint(rounded_avg(6, 31))\nprint(rounded_avg(6,\
    \ 32))\nprint(rounded_avg(6, 33))\nprint(rounded_avg(6, 34))\nprint(rounded_avg(6,\
    \ 35))\nprint(rounded_avg(6, 36))\nprint(rounded_avg(6, 37))\nprint(rounded_avg(6,\
    \ 38))\nprint(rounded_avg(6, 39))\nprint(rounded_avg(6, 40))\nprint(rounded_avg(6,\
    \ 41))\nprint(rounded_avg(6, 42))\nprint(rounded_avg(6, 43))\nprint(rounded_avg(6,\
    \ 44))\nprint(rounded_avg(6, 45))\nprint(rounded_avg(6, 46))\nprint(rounded_avg(6,\
    \ 47))\nprint(rounded_avg(6, 48))\nprint(rounded_avg(6, 49))\nprint(rounded_avg(6,\
    \ 50))\nprint(rounded_avg(6, 51))\nprint(rounded_avg(6, 52))\nprint(rounded_avg(6,\
    \ 53))\nprint(rounded_avg(6, 54))\nprint(rounded_avg(6, 55))\nprint(rounded_avg(6,\
    \ 56))\nprint(rounded_avg(6, 57))\nprint(rounded_avg(6, 58))\nprint(rounded_avg(6,\
    \ 59))\nprint(rounded_avg(6, 60))\nprint(rounded_avg(6, 61))\nprint(rounded_avg(6,\
    \ 62))\nprint(roun\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzi_1nspf.lua:70: '')'' expected (to close ''('' at line 69)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo88r7hv8.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo88r7hv8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  return avg / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp014oczxl.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp014oczxl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >=\
    \ m then\n    return -1\n  end\n  return ((m * n + n) / 2)\nend\nprint(rounded_avg(4,6))\n\
    print(rounded_avg(5,6))\nprint(rounded_avg(6,6))\nprint(rounded_avg(7,6))\nprint(rounded_avg(8,6))\n\
    print(rounded_avg(9,6))\nprint(rounded_avg(10,6))\nprint(rounded_avg(11,6))\n\
    print(rounded_avg(12,6))\nprint(rounded_avg(13,6))\nprint(rounded_avg(14,6))\n\
    print(rounded_avg(15,6))\nprint(rounded_avg(16,6))\nprint(rounded_avg(17,6))\n\
    print(rounded_avg(18,6))\nprint(rounded_avg(19,6))\nprint(rounded_avg(20,6))\n\
    print(rounded_avg(21,6))\nprint(rounded_avg(22,6))\nprint(rounded_avg(23,6))\n\
    print(rounded_avg(24,6))\nprint(rounded_avg(25,6))\nprint(rounded_avg(26,6))\n\
    print(rounded_avg(27,6))\nprint(rounded_avg(28,6))\nprint(rounded_avg(29,6))\n\
    print(rounded_avg(30,6))\nprint(rounded_avg(31,6))\nprint(rounded_avg(32,6))\n\
    print(rounded_avg(33,6))\nprint(rounded_avg(34,6))\nprint(rounded_avg(35,6))\n\
    print(rounded_avg(36,6))\nprint(rounded_avg(37,6))\nprint(rounded_avg(38,6))\n\
    print(rounded_avg(39,6))\nprint(rounded_avg(40,6))\nprint(rounded_avg(41,6))\n\
    print(rounded_avg(42,6))\nprint(rounded_avg(43,6))\nprint(rounded_avg(44,6))\n\
    print(rounded_avg(45,6))\nprint(rounded_avg(46,6))\nprint(rounded_avg(47,6))\n\
    print(rounded_avg(48,6))\nprint(rounded_avg(49,6))\nprint(rounded_avg(50,6))\n\
    print(rounded_avg(51,6))\nprint(rounded_avg(52,6))\nprint(rounded_avg(53,6))\n\
    print(rounded_avg(54,6))\nprint(rounded_avg(55,6))\nprint(rounded_avg(56,6))\n\
    print(rounded_avg(57,6))\nprint(rounded_avg(58,6))\nprint(rounded_avg(59,6))\n\
    print(rounded_avg(60,6))\nprint(rounded_avg(61,6))\nprint(rounded_avg(62,6))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "14\n17.5\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\
    -1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\
    -1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\
    -1\n-1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_v15tivq.lua:75:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp_v15tivq.lua:75:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0\n  for i = n, m do\n    avg = avg + i\n  end\n  avg = avg / 2\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycobhde1.lua:18:\
    \ expected: \"0b11\"\nactual: 7\nstack traceback:\n\t/tmp/tmpycobhde1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then return -1 end\n  return ((n + m) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nswf2hb.lua:14:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3nswf2hb.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then return -1 end\n  if n == m then return n end\n  local sum = 0\n  for\
    \ i = n, m+1 do\n    sum = sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sivwa27.lua:19:\
    \ expected: \"0b11\"\nactual: 4.2\nstack traceback:\n\t/tmp/tmp4sivwa27.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    if n\
    \ == m then\n        return n\n    elseif n < m then\n        return -1\n    end\n\
    \    local sum = 0\n    local count = 0\n    for i = n, m do\n        sum = sum\
    \ + i\n        count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51mhfz39.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp51mhfz39.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n <=\
    \ m then\n    return n\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooud7tcx.lua:17:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpooud7tcx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  if n == m then\n    return n\n  end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return sum / m\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl4m9gny.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmprl4m9gny.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if n >\
    \ m then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso9cv331.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpso9cv331.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0\n  local nn = n\n  local mm = m\n  while nn > mm do\n    avg = (avg + nn)/2\n\
    \    nn-=1\n  end\n  while mm > nn do\n    avg = (avg + mm)/2\n    mm-=1\n  end\n\
    \  return avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6mpcfpgg.lua:12: ''='' expected near ''-''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg\
    \ = avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ math.floor(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnt00hzv.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpqnt00hzv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  elseif n == m then\n    return n\n  else\n    return\
    \ math.floor((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocufbhv0.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpocufbhv0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local count = 0\n  local i = n\n  while i <= m do\n    count = count\
    \ + 1\n    avg = avg + i\n    i = i + 1\n  end\n  if count > 0 then\n    avg =\
    \ avg / count\n  end\n  return math.floor(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzmeg8lj.lua:24:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpjzmeg8lj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kz2zxd.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp24kz2zxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return sum / 2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg56qn7wj.lua:17:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpg56qn7wj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  elseif n == m then\n    return n\n  else\n    return\
    \ math.floor((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocufbhv0.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpocufbhv0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  else\n    return math.floor((n + m) / 2)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9sfr5oi.lua:17:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpp9sfr5oi.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50fx_w3z.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp50fx_w3z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local nn = math.floor(n)\n  local mm = math.floor(m)\n  if nn > mm\
    \ then\n    return -1\n  end\n  for i = nn,mm do\n    avg = avg + i\n  end\n \
    \ avg = avg / nn\n  return math.floor(avg * 2) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9mqnfyr.lua:23:\
    \ expected: \"0b11\"\nactual: 15\nstack traceback:\n\t/tmp/tmpd9mqnfyr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while n\
    \ <= m do\n    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n  return\
    \ sum / count\nend\nprint(rounded_avg(100, 200))\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "-1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal3xq3hk.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpal3xq3hk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  return ((n + m) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx033hao_.lua:16:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpx033hao_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kz2zxd.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp24kz2zxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local i = 1\n  while i <= m do\n    avg = avg + i\n    i = i + 1\n\
    \  end\n  avg = avg / m\n  return math.floor(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitxc0uyp.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpitxc0uyp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9,\
    \ 10))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n\
    10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n\
    9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\n10\n9\n9.5\nF\nFailed tests:\n\
    -------------\n1) test_humaneval\n/tmp/tmpbait6gvf.lua:76: expected: \"0b11\"\n\
    actual: 3\nstack traceback:\n\t/tmp/tmpbait6gvf.lua:76: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return sum / 2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg56qn7wj.lua:17:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpg56qn7wj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if n >\
    \ m then return -1 end\n   local sum = 0\n   for i = n, m do\n      sum = sum\
    \ + i\n   end\n   return sum / 2\nend\nprint(rounded_avg(10,20)) --> 15\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\n\
    print(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(rounded_avg(10,10))\
    \ --> 10\nprint(rounded_avg(10,10)) --> 10\nprint(roun\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphmuzx6jy.lua:58: '')'' expected (to close ''('' at line 57)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local i = 1\n  while i <= m do\n    avg = avg + i\n    i = i + 1\n\
    \  end\n  avg = avg / m\n  avg = math.floor(avg)\n  if avg > n then\n    return\
    \ -1\n  else\n    return avg\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6loss88.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpe6loss88.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kz2zxd.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp24kz2zxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    local\
    \ sum = 0\n    local count = 0\n    for i = n, m do\n        sum = sum + i\n \
    \       count = count + 1\n    end\n    if count > 0 then\n        return sum\
    \ / count\n    else\n        return -1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2nzz99w.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo2nzz99w.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  return (n + m) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mjivo73.lua:16:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp7mjivo73.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m ==\
    \ 0 then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / m\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbu902vv.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpjbu902vv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  else\n    return ((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyv5ma_c.lua:17:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpnyv5ma_c.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local i\n  for i = n, m do\n    avg = avg + i\n  end\n  return math.floor(avg\
    \ / 2.0) or -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7goyofk.lua:18:\
    \ expected: \"0b11\"\nactual: 7\nstack traceback:\n\t/tmp/tmpa7goyofk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if n >\
    \ m then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso9cv331.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpso9cv331.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  elseif n == m then\n    return n\n  else\n    return\
    \ ((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m2h4m8q.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp4m2h4m8q.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n    local\
    \ avg = 0.0\n    local count = 0\n    for i = n, m do\n        count = count +\
    \ 1\n        avg = avg + i\n    end\n    if count > 0 then\n        avg = avg\
    \ / count\n    end\n    return math.floor(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnclrs8he.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpnclrs8he.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cnfmn6_.lua:18:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmp7cnfmn6_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50fx_w3z.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp50fx_w3z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kz2zxd.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp24kz2zxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0_lwl6_.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpw0_lwl6_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdiutiuqu.lua:20:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpdiutiuqu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gduuxfa.lua:18:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8gduuxfa.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrenpmdh.lua:20:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmplrenpmdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24kz2zxd.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp24kz2zxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50fx_w3z.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp50fx_w3z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtnmewrm.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpgtnmewrm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  else\n    return ((n + m) / 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uyco4g7.lua:17:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_uyco4g7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0.0\n  local i = 1\n  while i <= m do\n    avg = avg + i\n    i = i + 1\n\
    \  end\n  avg = avg / m\n  return math.floor(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitxc0uyp.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpitxc0uyp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  return ((n + m) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj569gveg.lua:16:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpj569gveg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo88r7hv8.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpo88r7hv8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  for i = n, m + 1 do\n    sum\
    \ = sum + i\n  end\n  return sum / 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok634xg4.lua:20:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpok634xg4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if m ==\
    \ 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n  end\n  return sum / m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50fx_w3z.lua:20:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp50fx_w3z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local avg\
    \ = 0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    avg =\
    \ avg + i\n  end\n  if count > 0 then\n    avg = avg / count\n  end\n  return\
    \ avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn101stw3.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpn101stw3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stwqkey.lua:22:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3stwqkey.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb1l0kie.lua:19:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpxb1l0kie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
- exit_code: 1
  program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n   if m >\
    \ n then\n      return -1\n   end\n   local sum = 0\n   for i = n, m do\n    \
    \  sum = sum + i\n   end\n   return sum / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4cfqb3.lua:20:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp2t4cfqb3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750416
