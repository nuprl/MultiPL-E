name: HumanEval_20_find_closest_elements
language: lua
prompt: "-- From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n-- other and return them in order (smaller number,\
  \ larger number).\nlocal function find_closest_elements(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n  \
  \  lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
  \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest = numbers[1]\n  local largest = numbers[1]\n  for\
    \ i = 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "    local smallest_number\
    \ = numbers[1]\n    local largest_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < smallest_number then\n            smallest_number\
    \ = numbers[i]\n        end\n        if numbers[i] > largest_number then\n   \
    \         largest_number = numbers[i]\n        end\n    end\n    return smallest_number,\
    \ largest_number\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  local smallest_index = nil\n  local second_smallest_index =\
    \ nil\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if\
    \ current_number < smallest_number then\n      smallest_number = current_number\n\
    \      smallest_index = i\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n      second_smallest_index\
    \ = i\n    end\n  end\n  return smallest_index, second_smallest_index\nend", " \
    \ local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = 1\n  local second_smallest_index = 1", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  local second_smallest_distance = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil or distance < smallest_distance then\n      smallest_number = number\n\
    \      smallest_distance = distance\n    end\n    if second_smallest_distance\
    \ == nil or (distance < second_smallest_distance) then\n      second_smallest_number\
    \ = number\n      second_smallest_distance = distance\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "    local smallest_number =\
    \ numbers[1]\n    local second_smallest_number = numbers[1]\n    local smallest_index\
    \ = 1\n    local second_smallest_index = 1\n    for i = 2, #numbers do\n     \
    \   if numbers[i] < smallest_number then\n            smallest_number = numbers[i]\n\
    \            smallest_index = i\n        elseif numbers[i] > second_smallest_number\
    \ then\n            second_smallest_number = numbers[i]\n            second_smallest_index\
    \ = i\n        end\n    end\n    return smallest_index, second_smallest_index\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number\n  local\
    \ largest_number\n  for _, number in ipairs(numbers) do\n    local distance =\
    \ math.abs(number - smallest_number)\n    if distance < smallest_distance then\n\
    \      smallest_distance = distance\n      smallest_number = number\n    end\n\
    \    distance = math.abs(number - largest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      largest_number = number\n  \
    \  end\n  end\n  return smallest_number, largest_number\nend", "    local smallest_number\
    \ = numbers[1]\n    local second_smallest_number = numbers[1]\n    local smallest_index\
    \ = 1\n    local second_smallest_index = 1\n    for i = 2, #numbers do\n     \
    \   if numbers[i] < smallest_number then\n            smallest_number = numbers[i]\n\
    \            smallest_index = i\n        elseif numbers[i] > second_smallest_number\
    \ then\n            second_smallest_number = numbers[i]\n            second_smallest_index\
    \ = i\n        end\n    end\n    return smallest_index, second_smallest_index\n\
    end", "  local function distance(number)\n    return math.abs(number - numbers[1])\n\
    \  end\n  local function less_than(number)\n    return function(number)\n    \
    \  return distance(number) < distance(number)\n    end\n  end\n  local function\
    \ greater_than(number)\n    return function(number)\n      return distance(number)\
    \ > distance(number)\n    end\n  end\n  local function less_than_or_equal(number)\n\
    \    return function(number)\n      return distance(number) <= distance(number)\n\
    \    end\n  end\n  local function greater_than_or_equal(number)\n    return function(number)\n\
    \      return distance(number) >= distance(number)\n    end\n  end\n  local function\
    \ less_than_or_equal_to(number)\n    return function(number)\n      return distance(number)\
    \ <= distance(number)\n    end\n  end\n  local function greater_than_or_equal_to(number)\n\
    \    return function(number)\n      return distance(number) >= distance(number)\n\
    \    end\n  end\n  local function less_than_or_equal_to_or_null(number)\n    return\
    \ function(number)\n      return distance(number) <= distance(number)\n    end\n\
    \  end\n  local function greater_than_or_equal_to_or_null(number)\n    return\
    \ function(number)\n      return distance(number) >= distance(number)\n    end\n\
    \  end\n  local function less_than_or_equal_to_or_null(number)\n    return function(number)\n\
    \      return distance(number) <= distance(number)\n    end\n  end\n  local function\
    \ greater_than_or_equal_to_or_null(number)\n    return function(number)\n    \
    \  return distance(number) >= distance(number)\n    end\n  end\n  local function\
    \ less_than_or_equal_to_or_null(number)\n    return function(number)\n      return\
    \ distance(number) <= distance(number)\n    end\n  end\n  local function greater_than_or_equal_to_or_null(number)\n\
    \    return function(number)\n      return distance(number) >= distance(number)\n\
    \    end\n  end\n  local function less_than_or_equal_to_or_null(number)\n    return\
    \ function(number)\n      return distance(number) <= distance(number)\n    end\n\
    \  end\n  local function greater_than_or_equal_to_or_null(number)\n    return\
    \ function(number)\n      return distance(number) >= distance(number)\n    end\n\
    \  end\n  local function less_than_or_equal_to_or_null(number)\n    return function(number)\n\
    \      return distance(number) <= distance(number)\n    end\n  end\n  local function\
    \ greater_than_or_equal_to_or_null(number)\n    return function(number)\n    \
    \  return distance(number) >= distance(number)\n    end\n  end\n  local function\
    \ less_than_or_equal_to_or_null(number)\n    return function(number)\n      return\
    \ distance(number) <= distance(number)\n    end\n  end\n  local function greater_than_or_equal_to_or_null(number)\n\
    \    return function(number)\n      return distance(", "  local closest_numbers\
    \ = {}\n  local smallest_number = numbers[1]\n  local largest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    end\n  \
    \  if current_number > largest_number then\n      largest_number = current_number\n\
    \    end\n  end\n  table.insert(closest_numbers, smallest_number)\n  table.insert(closest_numbers,\
    \ largest_number)\n  return closest_numbers\nend", "    local smallest_number\
    \ = numbers[1]\n    local second_smallest_number = numbers[1]\n    for _, number\
    \ in pairs(numbers) do\n        if number < smallest_number then\n           \
    \ smallest_number = number\n        elseif number > second_smallest_number then\n\
    \            second_smallest_number = number\n        end\n    end\n    return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    end\n    if current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_number = numbers[1]\n  local largest_number = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > largest_number then\n      largest_number = current_number\n    end\n  end\n\
    \  return smallest_number, largest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  local smallest_index = nil\n \
    \ local second_smallest_index = nil\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n      smallest_index = i\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n      second_smallest_index\
    \ = i\n    end\n  end\n  return smallest_index, second_smallest_index\nend", " \
    \   local smallest, largest = numbers[1], numbers[1]\n    for i = 2, #numbers\
    \ do\n        local distance = math.abs(numbers[i] - largest)\n        if distance\
    \ < smallest then\n            smallest, largest = distance, numbers[i]\n    \
    \    end\n    end\n    return smallest, largest\nend", "    local closest_numbers\
    \ = {}\n    local smallest_distance = nil\n    local smallest_number = nil\n \
    \   local largest_number = nil", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n      smallest,\
    \ largest = diff, numbers[i]\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in ipairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "    local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n    for i = 2, #numbers do\n        local current\
    \ = numbers[i]\n        if current < smallest then\n            smallest = current\n\
    \        end\n        if current > largest then\n            largest = current\n\
    \        end\n    end\n    return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local function distance(number)\n    return math.abs(number - numbers[1])\n\
    \  end", "  local function distance(a, b)\n    return math.abs(a - b)\n  end\n\
    \  local function select_closest_two(numbers)\n    local smallest_distance = math.inf\n\
    \    local smallest_number = nil\n    local second_smallest_number = nil\n   \
    \ for _, number in ipairs(numbers) do\n      if smallest_distance > distance(number,\
    \ second_smallest_number) then\n        smallest_distance = distance(number, second_smallest_number)\n\
    \        smallest_number = number\n        second_smallest_number = number\n \
    \     else\n        second_smallest_number = number\n      end\n    end\n    return\
    \ smallest_number, second_smallest_number\n  end\n  local function select_closest_three(numbers)\n\
    \    local smallest_distance = math.inf\n    local smallest_number = nil\n   \
    \ local second_smallest_number = nil\n    local third_smallest_number = nil\n\
    \    for _, number in ipairs(numbers) do\n      if smallest_distance > distance(number,\
    \ second_smallest_number) then\n        smallest_distance = distance(number, second_smallest_number)\n\
    \        smallest_number = number\n        second_smallest_number = number\n \
    \     elseif smallest_distance > distance(number, third_smallest_number) then\n\
    \        smallest_distance = distance(number, third_smallest_number)\n       \
    \ smallest_number = number\n        third_smallest_number = number\n      else\n\
    \        third_smallest_number = number\n      end\n    end\n    return smallest_number,\
    \ second_smallest_number, third_smallest_number\n  end\n  local function select_closest_four(numbers)\n\
    \    local smallest_distance = math.inf\n    local smallest_number = nil\n   \
    \ local second_smallest_number = nil\n    local third_smallest_number = nil\n\
    \    local fourth_smallest_number = nil\n    for _, number in ipairs(numbers)\
    \ do\n      if smallest_distance > distance(number, second_smallest_number) then\n\
    \        smallest_distance = distance(number, second_smallest_number)\n      \
    \  smallest_number = number\n        second_smallest_number = number\n      elseif\
    \ smallest_distance > distance(number, third_smallest_number) then\n        smallest_distance\
    \ = distance(number, third_smallest_number)\n        smallest_number = number\n\
    \        third_smallest_number = number\n      elseif smallest_distance > distance(number,\
    \ fourth_smallest_number) then\n        smallest_distance = distance(number, fourth_smallest_number)\n\
    \        smallest_number = number\n        fourth_smallest_number = number\n \
    \     else\n        fourth_smallest_number = number\n      end\n    end\n    return\
    \ smallest_number, second_smallest_number, third_smallest_number, fourth_smallest_number\n\
    \  end\n  local function select_closest_five(numbers)\n    ", "  local function\
    \ distance(first, second)\n    return math.abs(first - second)\n  end\n  local\
    \ function less(first, second)\n    return first < second\n  end\n  local function\
    \ greater(first, second)\n    return first > second\n  end\n  local function less_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function equal_to(first,\
    \ second)\n    return first == second\n  end\n  local function not_equal_to(first,\
    \ second)\n    return first ~= second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first, ",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = 1\n  local second_smallest_index = 1\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n      second_smallest_number =\
    \ smallest_number\n      smallest_index = i\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n      smallest_index =\
    \ i\n    end\n  end\n  return smallest_index, second_smallest_index\nend", " \
    \   local smallest, largest = numbers[1], numbers[#numbers]\n    for i = 2, #numbers\
    \ do\n        local current = numbers[i]\n        if current < smallest then\n\
    \            smallest = current\n        elseif current > largest then\n     \
    \       largest = current\n        end\n    end\n    return smallest, largest\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    end\n    if current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ distance = math.abs(numbers[i] - smallest)\n    if distance < smallest then\n\
    \      smallest = distance\n    end\n    distance = math.abs(numbers[i] - largest)\n\
    \    if distance < largest then\n      largest = distance\n    end\n  end\n  return\
    \ smallest, largest\nend", "    local smallest, largest = numbers[1], numbers[#numbers]\n\
    \    for i = 2, #numbers do\n        local diff = math.abs(numbers[i] - largest)\n\
    \        if diff < smallest then\n            smallest, largest = diff, numbers[i]\n\
    \        end\n    end\n    return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_number = numbers[1]\n  local largest_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > largest_number then\n      largest_number = current_number\n\
    \    end\n  end\n  return smallest_number, largest_number\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local this_smallest,\
    \ this_largest = numbers[i], numbers[i]\n    if this_smallest < smallest then\n\
    \      smallest = this_smallest\n    end\n    if this_largest > largest then\n\
    \      largest = this_largest\n    end\n  end\n  return smallest, largest\nend",
  "    local closest_pairs = {}\n    local closest_distance = nil\n    for _, number\
    \ in ipairs(numbers) do\n        local distance = math.abs(number - numbers[1])\n\
    \        if closest_distance == nil then\n            closest_distance = distance\n\
    \            closest_pairs = {numbers[1], number}\n        elseif closest_distance\
    \ > distance then\n            closest_distance = distance\n            closest_pairs\
    \ = {number, numbers[1]}\n        end\n    end\n    return closest_pairs\nend",
  "    local smallest_number = numbers[1]\n    local second_smallest_number = numbers[1]\n\
    \    local smallest_index = 2\n    local second_smallest_index = 2\n    for i\
    \ = 2, #numbers do\n        if numbers[i] < smallest_number then\n           \
    \ smallest_number = numbers[i]\n            smallest_index = i\n        elseif\
    \ numbers[i] > second_smallest_number then\n            second_smallest_number\
    \ = numbers[i]\n            second_smallest_index = i\n        end\n    end\n\
    \    return smallest_index, second_smallest_index\nend", "  local smallest_number\
    \ = numbers[1]\n  local largest_number = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    end\n    if current_number\
    \ > largest_number then\n      largest_number = current_number\n    end\n  end\n\
    \  return smallest_number, largest_number\nend", "    local smallest_number =\
    \ numbers[1]\n    local second_smallest_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < smallest_number then\n            smallest_number\
    \ = numbers[i]\n        end\n        if numbers[i] > second_smallest_number then\n\
    \            second_smallest_number = numbers[i]\n        end\n    end\n    return\
    \ smallest_number, second_smallest_number\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "    local smallest_number = numbers[1]\n    local second_smallest_number\
    \ = numbers[1]\n    local smallest_index = nil\n    local second_smallest_index\
    \ = nil\n    for i = 2, #numbers do\n        if numbers[i] < smallest_number then\n\
    \            smallest_number = numbers[i]\n            smallest_index = i\n  \
    \      end\n        if numbers[i] < second_smallest_number then\n            second_smallest_number\
    \ = numbers[i]\n            second_smallest_index = i\n        end\n    end\n\
    \    return smallest_index, second_smallest_index\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local largest_distance = nil\n  local\
    \ largest_number = nil", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local function\
    \ distance(first, second)\n    return math.abs(first - second)\n  end\n  local\
    \ function less_than(first, second)\n    return first < second\n  end\n  local\
    \ function greater_than(first, second)\n    return first > second\n  end\n  local\
    \ function less_than_or_equal(first, second)\n    return first <= second\n  end\n\
    \  local function greater_than_or_equal(first, second)\n    return first >= second\n\
    \  end\n  local function less_than_or_equal_to(first, second)\n    return first\
    \ < second\n  end\n  local function greater_than_or_equal_to(first, second)\n\
    \    return first > second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n", "    local smallest_number = numbers[1]\n    local second_smallest_number\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < smallest_number\
    \ then\n            smallest_number = numbers[i]\n        elseif numbers[i] >\
    \ second_smallest_number then\n            second_smallest_number = numbers[i]\n\
    \        end\n    end\n    return smallest_number, second_smallest_number\nend",
  "    local smallest_number = numbers[1]\n    local second_smallest_number = numbers[1]\n\
    \    local smallest_index = 1\n    local second_smallest_index = 1\n    for i\
    \ = 2, #numbers do\n        if numbers[i] < smallest_number then\n           \
    \ smallest_number = numbers[i]\n            smallest_index = i\n        elseif\
    \ numbers[i] > second_smallest_number then\n            second_smallest_number\
    \ = numbers[i]\n            second_smallest_index = i\n        end\n    end\n\
    \    return smallest_index, second_smallest_index\nend", "    local smallest_number\
    \ = numbers[1]\n    local second_smallest_number = numbers[1]\n    for _, number\
    \ in pairs(numbers) do\n        if number < smallest_number then\n           \
    \ smallest_number = number\n        elseif number > second_smallest_number then\n\
    \            second_smallest_number = number\n        end\n    end\n    return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "    local smallest_number = numbers[1]\n    local second_smallest_number\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < smallest_number\
    \ then\n            smallest_number = numbers[i]\n        elseif numbers[i] >\
    \ second_smallest_number then\n            second_smallest_number = numbers[i]\n\
    \        end\n    end\n    return smallest_number, second_smallest_number\nend",
  "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n    if\
    \ current < smallest then\n      smallest = current\n    end\n    if current >\
    \ largest then\n      largest = current\n    end\n  end\n  return smallest, largest\n\
    end", "    local closest_pairs = {}\n    local closest_distance = nil\n    for\
    \ i = 1, #numbers do\n        local distance = math.abs(numbers[i] - numbers[#numbers])\n\
    \        if closest_distance == nil then\n            closest_pairs[#closest_pairs\
    \ + 1] = {numbers[i], numbers[#numbers]}\n            closest_distance = distance\n\
    \        elseif closest_distance > distance then\n            closest_pairs[#closest_pairs\
    \ + 1] = {numbers[i], numbers[#numbers]}\n            closest_distance = distance\n\
    \        end\n    end\n    return closest_pairs\nend", "  local smallest, largest\
    \ = numbers[1], numbers[2]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local closest_elements = {}\n  local smallest_distance = nil\n\
    \  local smallest_number = nil\n  local largest_number = nil", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ or distance < smallest_distance then\n      smallest_distance = distance\n \
    \     smallest_number = number\n    end\n    local second_distance = math.abs(number\
    \ - second_smallest_number)\n    if second_distance < smallest_distance then\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "    local smallest_number = numbers[1]\n    local\
    \ second_smallest_number = numbers[1]\n    for _, number in ipairs(numbers) do\n\
    \        if number < smallest_number then\n            smallest_number = number\n\
    \        elseif number > second_smallest_number then\n            second_smallest_number\
    \ = number\n        end\n    end\n    return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  local smallest_index = 1\n  local\
    \ second_smallest_index = 1\n  for i = 2, #numbers do\n    if numbers[i] < smallest_number\
    \ then\n      smallest_number = numbers[i]\n      smallest_index = i\n    elseif\
    \ numbers[i] > second_smallest_number then\n      second_smallest_number = numbers[i]\n\
    \      second_smallest_index = i\n    end\n  end\n  return smallest_index, second_smallest_index\n\
    end", "    local closest_pairs = {}\n    local closest_pair_index = 1\n    local\
    \ closest_pair_value = numbers[1]\n    for i = 2, #numbers do\n        local current_value\
    \ = numbers[i]\n        local current_index = i\n        local current_distance\
    \ = math.abs(current_value - closest_pair_value)\n        for j = 1, #closest_pairs\
    \ do\n            local current_pair = closest_pairs[j]\n            local current_pair_distance\
    \ = math.abs(current_value - current_pair[1])\n            if current_pair_distance\
    \ < current_distance then\n                closest_pair_index = current_index\n\
    \                closest_pair_value = current_pair[1]\n                current_distance\
    \ = current_pair_distance\n            end\n        end\n        table.insert(closest_pairs,\
    \ {current_index, current_value})\n    end\n    return closest_pairs\nend", " \
    \   local smallest = numbers[1]\n    local largest = numbers[1]\n    for i = 2,\
    \ #numbers do\n        if numbers[i] < smallest then\n            smallest = numbers[i]\n\
    \        elseif numbers[i] > largest then\n            largest = numbers[i]\n\
    \        end\n    end\n    return smallest, largest\nend", "    local smallest,\
    \ largest = numbers[1], numbers[1]\n    for i = 2, #numbers do\n        local\
    \ current = numbers[i]\n        if current < smallest then\n            smallest\
    \ = current\n        elseif current > largest then\n            largest = current\n\
    \        end\n    end\n    return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local dist = math.abs(numbers[i]\
    \ - largest)\n    if dist < smallest then\n      smallest, largest = dist, numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    end\n    if current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local distance\
    \ = math.abs(numbers[i] - largest)\n    if distance < smallest then\n      smallest\
    \ = distance\n      largest = numbers[i]\n    end\n  end\n  return smallest, largest\n\
    end", "    local smallest_number = numbers[1]\n    local largest_number = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < smallest_number then\n  \
    \          smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\
    \ then\n            largest_number = numbers[i]\n        end\n    end\n    return\
    \ smallest_number, largest_number\nend", "    local smallest, largest = numbers[1],\
    \ numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < smallest then\n\
    \            smallest = numbers[i]\n        elseif numbers[i] > largest then\n\
    \            largest = numbers[i]\n        end\n    end\n    return smallest,\
    \ largest\nend", "    local smallest_number = numbers[1]\n    local second_smallest_number\
    \ = numbers[1]\n    local smallest_index = nil\n    local second_smallest_index\
    \ = nil\n    for i = 2, #numbers do\n        if numbers[i] < smallest_number then\n\
    \            smallest_number = numbers[i]\n            smallest_index = i\n  \
    \      end\n        if numbers[i] < second_smallest_number then\n            second_smallest_number\
    \ = numbers[i]\n            second_smallest_index = i\n        end\n    end\n\
    \    return smallest_index, second_smallest_index\nend", "  local function distance(first,\
    \ second)\n    return math.abs(first - second)\n  end\n  local function less(first,\
    \ second)\n    return first < second\n  end\n  local function greater(first, second)\n\
    \    return first > second\n  end\n  local function less_or_equal(first, second)\n\
    \    return first <= second\n  end\n  local function greater_or_equal(first, second)\n\
    \    return first >= second\n  end\n  local function less_or_equal_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_equal_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_equal(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_equal(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_equal_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_equal_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_equal_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_equal_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_equal_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_equal_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function greater_or_zero(first,\
    \ second)\n    return first >= 0 or first <= second\n  end\n  local function less_or_equal_or_zero(first,\
    \ second)\n    return first <= 0 or first >= second\n  end\n  local function great",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_number = numbers[1]\n  local largest_number = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > largest_number then\n      largest_number = current_number\n    end\n  end\n\
    \  return smallest_number, largest_number\nend", "    local smallest = numbers[1]\n\
    \    local largest = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < smallest then\n            smallest = numbers[i]\n        elseif numbers[i]\
    \ > largest then\n            largest = numbers[i]\n        end\n    end\n   \
    \ return smallest, largest\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    end\n    if current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "    local smallest_number = numbers[1]\n    local second_smallest_number\
    \ = numbers[1]\n    local smallest_index = 1\n    local second_smallest_index\
    \ = 1\n    for i = 2, #numbers do\n        if numbers[i] < smallest_number then\n\
    \            smallest_number = numbers[i]\n            smallest_index = i\n  \
    \      elseif numbers[i] > second_smallest_number then\n            second_smallest_number\
    \ = numbers[i]\n            second_smallest_index = i\n        end\n    end\n\
    \    return smallest_index, second_smallest_index\nend", "    local smallest =\
    \ numbers[1]\n    local largest = numbers[1]\n    for i = 2, #numbers do\n   \
    \     if numbers[i] < smallest then\n            smallest = numbers[i]\n     \
    \   elseif numbers[i] > largest then\n            largest = numbers[i]\n     \
    \   end\n    end\n    return smallest, largest\nend", "    local smallest_number\
    \ = numbers[1]\n    local largest_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < smallest_number then\n            smallest_number\
    \ = numbers[i]\n        elseif numbers[i] > largest_number then\n            largest_number\
    \ = numbers[i]\n        end\n    end\n    return smallest_number, largest_number\n\
    end", "    local smallest_number = numbers[1]\n    local second_smallest_number\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < smallest_number\
    \ then\n            smallest_number = numbers[i]\n        end\n        if numbers[i]\
    \ > second_smallest_number then\n            second_smallest_number = numbers[i]\n\
    \        end\n    end\n    return smallest_number, second_smallest_number\nend",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "   \
    \ local closest_numbers = {}\n    local smallest_number = numbers[1]\n    local\
    \ largest_number = numbers[1]\n    for _, number in pairs(numbers) do\n      \
    \  if number < smallest_number then\n            smallest_number = number\n  \
    \      elseif number > largest_number then\n            largest_number = number\n\
    \        else\n            table.insert(closest_numbers, number)\n        end\n\
    \    end\n    return smallest_number, largest_number, closest_numbers\nend", " \
    \ local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n      smallest,\
    \ largest = dist, numbers[i]\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    end\n  \
    \  if current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    end\n    if current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "    local smallest_number\
    \ = numbers[1]\n    local second_smallest_number = numbers[1]\n    for _, number\
    \ in pairs(numbers) do\n        if number < smallest_number then\n           \
    \ smallest_number = number\n        elseif number > second_smallest_number then\n\
    \            second_smallest_number = number\n        end\n    end\n    return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  local smallest_index = nil\n \
    \ local second_smallest_index = nil\n  for i = 2, #numbers do\n    if numbers[i]\
    \ < smallest_number then\n      smallest_number = numbers[i]\n      smallest_index\
    \ = i\n    end\n    if numbers[i] < second_smallest_number then\n      second_smallest_number\
    \ = numbers[i]\n      second_smallest_index = i\n    end\n  end\n  return smallest_index,\
    \ second_smallest_index\nend", "    local smallest_number = numbers[1]\n    local\
    \ largest_number = numbers[1]\n    for _, number in pairs(numbers) do\n      \
    \  if number < smallest_number then\n            smallest_number = number\n  \
    \      elseif number > largest_number then\n            largest_number = number\n\
    \        end\n    end\n    return smallest_number, largest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  local smallest_index = nil\n  local second_smallest_index\
    \ = nil\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n   \
    \ if current_number < smallest_number then\n      smallest_number = current_number\n\
    \      smallest_index = i\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n      second_smallest_index\
    \ = i\n    end\n  end\n  return smallest_index, second_smallest_index\nend", " \
    \   local smallest = numbers[1]\n    local largest = numbers[1]\n    for i = 2,\
    \ #numbers do\n        if numbers[i] < smallest then\n            smallest = numbers[i]\n\
    \        elseif numbers[i] > largest then\n            largest = numbers[i]\n\
    \        end\n    end\n    return smallest, largest\nend", "    local smallest_number\
    \ = numbers[1]\n    local largest_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < smallest_number then\n            smallest_number\
    \ = numbers[i]\n        elseif numbers[i] > largest_number then\n            largest_number\
    \ = numbers[i]\n        end\n    end\n    return smallest_number, largest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    end\n    if current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "    local smallest_number\
    \ = numbers[1]\n    local largest_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < smallest_number then\n            smallest_number\
    \ = numbers[i]\n        elseif numbers[i] > largest_number then\n            largest_number\
    \ = numbers[i]\n        end\n    end\n    return smallest_number, largest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  local smallest_index = 1\n  local second_smallest_index = 1\n\
    \  for i = 2, #numbers do\n    if numbers[i] < smallest_number then\n      smallest_number\
    \ = numbers[i]\n      smallest_index = i\n    end\n    if numbers[i] < second_smallest_number\
    \ then\n      second_smallest_number = numbers[i]\n      second_smallest_index\
    \ = i\n    end\n  end\n  return smallest_index, second_smallest_index\nend", " \
    \   local smallest_number = numbers[1]\n    local second_smallest_number = numbers[1]\n\
    \    local smallest_index = 1\n    local second_smallest_index = 1\n    for i\
    \ = 2, #numbers do\n        if numbers[i] < smallest_number then\n           \
    \ smallest_number = numbers[i]\n            smallest_index = i\n        elseif\
    \ numbers[i] < second_smallest_number then\n            second_smallest_number\
    \ = numbers[i]\n            second_smallest_index = i\n        end\n    end\n\
    \    return smallest_index, second_smallest_index\nend", "    local smallest_number\
    \ = numbers[1]\n    local second_smallest_number = numbers[1]\n    local smallest_index\
    \ = nil\n    local second_smallest_index = nil\n    for i = 2, #numbers do\n \
    \       if numbers[i] < smallest_number then\n            smallest_number = numbers[i]\n\
    \            smallest_index = i\n        elseif numbers[i] > second_smallest_number\
    \ then\n            second_smallest_number = numbers[i]\n            second_smallest_index\
    \ = i\n        end\n    end\n    return smallest_index, second_smallest_index\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff < 0 then\n\
    \      largest = smallest\n      smallest = numbers[i]\n    elseif diff > 0 then\n\
    \      largest = numbers[i]\n    end\n  end\n  return smallest, largest\nend",
  "  local function distance(number)\n    return math.abs(number - numbers[1])\n \
    \ end\n  local function less(number)\n    return number < numbers[1]\n  end\n\
    \  local function greater(number)\n    return number > numbers[1]\n  end\n  local\
    \ function less_or_equal(number)\n    return number <= numbers[1]\n  end\n  local\
    \ function greater_or_equal(number)\n    return number >= numbers[1]\n  end\n\
    \  local function less_than(number)\n    return number < numbers[1]\n  end\n \
    \ local function greater_than(number)\n    return number > numbers[1]\n  end\n\
    \  local function less_than_or_equal(number)\n    return number <= numbers[1]\n\
    \  end\n  local function greater_than_or_equal(number)\n    return number >= numbers[1]\n\
    \  end\n  local function less_equal(number)\n    return number < numbers[1]\n\
    \  end\n  local function greater_equal(number)\n    return number > numbers[1]\n\
    \  end\n  local function less_than_or_equal(number)\n    return number <= numbers[1]\n\
    \  end\n  local function greater_than_or_equal(number)\n    return number >= numbers[1]\n\
    \  end\n  local function equal_to(number)\n    return number == numbers[1]\n \
    \ end\n  local function not_equal_to(number)\n    return number ~= numbers[1]\n\
    \  end\n  local function less_than_or_equal_to(number)\n    return number <= numbers[1]\n\
    \  end\n  local function greater_than_or_equal_to(number)\n    return number >=\
    \ numbers[1]\n  end\n  local function less_than_or_equal(number)\n    return number\
    \ < numbers[1]\n  end\n  local function greater_than_or_equal(number)\n    return\
    \ number > numbers[1]\n  end\n  local function less_than_or_equal_to(number)\n\
    \    return number <= numbers[1]\n  end\n  local function greater_than_or_equal(number)\n\
    \    return number >= numbers[1]\n  end\n  local function less_than(number)\n\
    \    return number < numbers[1]\n  end\n  local function greater_than(number)\n\
    \    return number > numbers[1]\n  end\n  local function less_equal(number)\n\
    \    return number <= numbers[1]\n  end\n  local function greater_equal(number)\n\
    \    return number >= numbers[1]\n  end\n  local function less_than_or_equal(number)\n\
    \    return number < numbers[1]\n  end\n  local function greater_than_or_equal(number)\n\
    \    return number > numbers[1]\n  end\n  local function less_than_or_equal_to(number)\n\
    \    return number <= numbers[1]\n  end\n  local function greater_than_or_equal(number)\n\
    \    return number >= numbers[1]\n  end\n  local function less_than(number)\n\
    \    return number < ", "    local closest_numbers = {}\n    local smallest_number\
    \ = numbers[1]\n    local largest_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        local current_number = numbers[i]\n        if current_number < smallest_number\
    \ then\n            smallest_number = current_number\n        end\n        if\
    \ current_number > largest_number then\n            largest_number = current_number\n\
    \        end\n    end\n    table.insert(closest_numbers, smallest_number)\n  \
    \  table.insert(closest_numbers, largest_number)\n    return closest_numbers\n\
    end", "  local function is_close_to_element(element, number)\n    return math.abs(element\
    \ - number) < math.abs(element - number)\n  end\n  local function is_close_to_other_element(element,\
    \ other_element)\n    return math.abs(element - other_element) < math.abs(element\
    \ - other_element)\n  end\n  local function is_close_to_other_elements(element,\
    \ other_elements)\n    for _, other_element in ipairs(other_elements) do\n   \
    \   if is_close_to_element(element, other_element) then\n        return true\n\
    \      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pair(element,\
    \ other_element)\n    for _, other_element_pair in ipairs(other_element) do\n\
    \      if is_close_to_element(element, other_element_pair) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pairs(element,\
    \ other_elements)\n    for _, other_element_pair in ipairs(other_elements) do\n\
    \      if is_close_to_element(element, other_element_pair) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pairs(element,\
    \ other_elements)\n    for _, other_element_pair in ipairs(other_elements) do\n\
    \      if is_close_to_element(element, other_element_pair) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pairs(element,\
    \ other_elements)\n    for _, other_element_pair in ipairs(other_elements) do\n\
    \      if is_close_to_element(element, other_element_pair) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pairs(element,\
    \ other_elements)\n    for _, other_element_pair in ipairs(other_elements) do\n\
    \      if is_close_to_element(element, other_element_pair) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pairs(element,\
    \ other_elements)\n    for _, other_element_pair in ipairs(other_elements) do\n\
    \      if is_close_to_element(element, other_element_pair) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pairs(element,\
    \ other_elements)\n    for _, other_element_pair in ipairs(other_elements) do\n\
    \      if is_close_to_element(element, other_element_pair) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_close_to_other_elements_pairs(element,\
    \ other_elements)\n    for _, other_element_pair in ipair", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_smallest = numbers[i]\n    local current_largest = numbers[i]\n    if\
    \ current_smallest < smallest then\n      smallest = current_smallest\n    end\n\
    \    if current_largest > largest then\n      largest = current_largest\n    end\n\
    \  end\n  return smallest, largest\nend", "  local function distance(first, second)\n\
    \    return math.abs(first - second)\n  end\n  local function less(first, second)\n\
    \    return first < second\n  end\n  local function greater(first, second)\n \
    \   return first > second\n  end\n  local function less_or_equal(first, second)\n\
    \    return first <= second\n  end\n  local function greater_or_equal(first, second)\n\
    \    return first >= second\n  end\n  local function equal_to(first, second)\n\
    \    return first == second\n  end\n  local function not_equal_to(first, second)\n\
    \    return first ~= second\n  end\n  local function less_than(first, second)\n\
    \    return first < second\n  end\n  local function greater_than(first, second)\n\
    \    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than(first,\
    \ second)\n", "    local smallest_distance = nil\n    local smallest_number =\
    \ nil\n    local largest_distance = nil\n    local largest_number = nil\n    for\
    \ _, number in ipairs(numbers) do\n        local distance = math.abs(number -\
    \ smallest_number)\n        if smallest_distance == nil then\n            smallest_distance\
    \ = distance\n            smallest_number = number\n        elseif distance <\
    \ smallest_distance then\n            smallest_distance = distance\n         \
    \   smallest_number = number\n        end\n        local distance = math.abs(number\
    \ - largest_number)\n        if largest_distance == nil then\n            largest_distance\
    \ = distance\n            largest_number = number\n        elseif distance > largest_distance\
    \ then\n            largest_distance = distance\n            largest_number =\
    \ number\n        end\n    end\n    return smallest_number, largest_number\nend",
  "    local smallest_number = numbers[1]\n    local second_smallest_number = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < smallest_number then\n  \
    \          smallest_number = numbers[i]\n        elseif numbers[i] > second_smallest_number\
    \ then\n            second_smallest_number = numbers[i]\n        end\n    end\n\
    \    return smallest_number, second_smallest_number\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local diff =\
    \ numbers[i] - smallest\n    if diff < smallest then\n      smallest = diff\n\
    \      largest = numbers[i]\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_smallest = numbers[i]\n    local current_largest = numbers[i]\n\
    \    if current_smallest < smallest then\n      smallest = current_smallest\n\
    \    end\n    if current_largest > largest then\n      largest = current_largest\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest_number =\
    \ numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "    local smallest, largest = numbers[1], numbers[#numbers]\n    for i\
    \ = 2, #numbers do\n        if numbers[i] < smallest then\n            smallest\
    \ = numbers[i]\n        end\n        if numbers[i] > largest then\n          \
    \  largest = numbers[i]\n        end\n    end\n    return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local this_smallest, this_largest = numbers[i], numbers[i]\n\
    \    if this_smallest < smallest then\n      smallest = this_smallest\n    end\n\
    \    if this_largest > largest then\n      largest = this_largest\n    end\n \
    \ end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < smallest then\n      smallest, largest = distance,\
    \ numbers[i]\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local largest_number = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > largest_number\
    \ then\n      largest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_number = numbers[1]\n  local largest_number = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > largest_number then\n      largest_number = current_number\n    end\n  end\n\
    \  return smallest_number, largest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in ipairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local function distance(number)\n    return\
    \ math.abs(number[1] - number[2])\n  end\n  local function less(number)\n    return\
    \ number[1] < number[2]\n  end\n  local function greater(number)\n    return number[1]\
    \ > number[2]\n  end\n  local function less_or_equal(number)\n    return number[1]\
    \ <= number[2]\n  end\n  local function greater_or_equal(number)\n    return number[1]\
    \ >= number[2]\n  end\n  local function less_than(number)\n    return number[1]\
    \ < number[2]\n  end\n  local function greater_than(number)\n    return number[1]\
    \ > number[2]\n  end\n  local function less_than_or_equal(number)\n    return\
    \ number[1] <= number[2]\n  end\n  local function greater_than_or_equal(number)\n\
    \    return number[1] >= number[2]\n  end\n  local function equal_to(number)\n\
    \    return number[1] == number[2]\n  end\n  local function not_equal_to(number)\n\
    \    return number[1] != number[2]\n  end\n  local function less_than_or_equal_to(number)\n\
    \    return number[1] <= number[2]\n  end\n  local function greater_than_or_equal_to(number)\n\
    \    return number[1] >= number[2]\n  end\n  local function equal_to_or_equal(number)\n\
    \    return number[1] == number[2]\n  end\n  local function not_equal_to_or_equal(number)\n\
    \    return number[1] != number[2]\n  end\n  local function less_than_or_greater(number)\n\
    \    return number[1] < number[2] or number[1] > number[2]\n  end\n  local function\
    \ greater_than_or_less(number)\n    return number[1] > number[2] or number[1]\
    \ < number[2]\n  end\n  local function less_than_or_equal_to(number)\n    return\
    \ number[1] <= number[2] or number[1] >= number[2]\n  end\n  local function greater_than_or_equal_to(number)\n\
    \    return number[1] >= number[2] or number[1] <= number[2]\n  end\n  local function\
    \ less_than_or_greater_or_equal(number)\n    return number[1] < number[2] or number[1]\
    \ > number[2] or number[1] >= number[2]\n  end\n  local function greater_than_or_less_or_equal(number)\n\
    \    return number[1] > number[2] or number[1] < number[2] or number[1] <= number[2]\n\
    \  end\n  local function less_than_or_equal_or_equal(number)\n    return number[1]\
    \ <= number[2] or number[1] >= number[2]\n  end\n  local function greater_than_or_equal_or_equal(number)\n\
    \    return number[1] >= number[2] or number[1] <= number[2]\n  end\n  local function\
    \ less_than_or_greater_or_equal_or_equal(number)\n    return number[1] < ", " \
    \ local smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - smallest)\n    if distance <\
    \ smallest then\n      smallest = distance\n    end\n    distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < largest then\n      largest = distance\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    end\n    if current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "    local smallest_number =\
    \ numbers[1]\n    local largest_number = numbers[1]\n    for i = 2, #numbers do\n\
    \        if numbers[i] < smallest_number then\n            smallest_number = numbers[i]\n\
    \        end\n        if numbers[i] > largest_number then\n            largest_number\
    \ = numbers[i]\n        end\n    end\n    return smallest_number, largest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "    local smallest, largest = numbers[1], numbers[#numbers]\n    for i\
    \ = 2, #numbers do\n        if numbers[i] < smallest then\n            smallest\
    \ = numbers[i]\n        end\n        if numbers[i] > largest then\n          \
    \  largest = numbers[i]\n        end\n    end\n    return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local largest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > largest_number then\n      largest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ largest_distance = nil\n  local largest_number = nil", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local distance =\
    \ math.abs(numbers[i] - smallest)\n    if distance < smallest then\n      smallest\
    \ = distance\n    end\n    distance = math.abs(numbers[i] - largest)\n    if distance\
    \ < largest then\n      largest = distance\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "    local smallest_number\
    \ = numbers[1]\n    local second_smallest_number = numbers[1]\n    for i = 2,\
    \ #numbers do\n        if numbers[i] < smallest_number then\n            smallest_number\
    \ = numbers[i]\n        elseif numbers[i] > second_smallest_number then\n    \
    \        second_smallest_number = numbers[i]\n        end\n    end\n    return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_number\n  local largest_number\n  for _, number in\
    \ ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if distance > largest_distance then\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "    local smallest = numbers[1]\n    local largest\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i] < smallest then\n\
    \            smallest = numbers[i]\n        elseif numbers[i] > largest then\n\
    \            largest = numbers[i]\n        end\n    end\n    return smallest,\
    \ largest\nend", "  local function distance(number)\n    return math.abs(number\
    \ - numbers[1])\n  end\n  local function closest_numbers(numbers)\n    local smallest\
    \ = numbers[1]\n    local largest = numbers[1]\n    for i = 2, #numbers do\n \
    \     if distance(numbers[i]) < distance(largest) then\n        largest = numbers[i]\n\
    \      elseif distance(numbers[i]) > distance(smallest) then\n        smallest\
    \ = numbers[i]\n      end\n    end\n    return smallest, largest\n  end\n  local\
    \ smallest, largest = closest_numbers(numbers)\n  return smallest, largest\nend",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  local smallest_index = 1\n  local second_smallest_index = 1\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n      smallest_index\
    \ = i\n    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n      second_smallest_index = i\n    end\n  end\n  return\
    \ smallest_index, second_smallest_index\nend", "    local smallest = numbers[1]\n\
    \    local largest = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < smallest then\n            smallest = numbers[i]\n        elseif numbers[i]\
    \ > largest then\n            largest = numbers[i]\n        end\n    end\n   \
    \ return smallest, largest\nend", "    local smallest_number = numbers[1]\n  \
    \  local second_smallest_number = numbers[1]\n    for i = 2, #numbers do\n   \
    \     if numbers[i] < smallest_number then\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > second_smallest_number then\n            second_smallest_number\
    \ = numbers[i]\n        end\n    end\n    return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ largest_distance = nil\n  local largest_number = nil", "  local smallest, largest\
    \ = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current_number = numbers[i]\n\
    \    if current_number < smallest_number then\n      smallest_number = current_number\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local function distance(first, second)\n    return math.abs(first - second)\n\
    \  end\n  local function less_than(first, second)\n    return first < second\n\
    \  end\n  local function greater_than(first, second)\n    return first > second\n\
    \  end\n  local function less_than_or_equal(first, second)\n    return first <=\
    \ second\n  end\n  local function greater_than_or_equal(first, second)\n    return\
    \ first >= second\n  end\n  local function less_than_or_equal_to(first, second)\n\
    \    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first < second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first > second\n  end\n  local function less_than_or_equal_to(first,\
    \ second)\n    return first <= second\n  end\n  local function greater_than_or_equal_to(first,\
    \ second)\n    return first >= second\n  end\n  local function less_than_or_equal_to(first, ",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    end\n    if current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "    local smallest_number = numbers[1]\n    local\
    \ largest_number = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < smallest_number then\n            smallest_number = numbers[i]\n        elseif\
    \ numbers[i] > largest_number then\n            largest_number = numbers[i]\n\
    \        end\n    end\n    return smallest_number, largest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "    local smallest\
    \ = numbers[1]\n    local largest = numbers[1]\n    for i = 2, #numbers do\n \
    \       if numbers[i] < smallest then\n            smallest = numbers[i]\n   \
    \     elseif numbers[i] > largest then\n            largest = numbers[i]\n   \
    \     end\n    end\n    return smallest, largest\nend", "    local smallest_number\
    \ = numbers[1]\n    local second_smallest_number = numbers[1]\n    local smallest_index\
    \ = 1\n    local second_smallest_index = 1\n    for i = 2, #numbers do\n     \
    \   if numbers[i] < smallest_number then\n            smallest_number = numbers[i]\n\
    \            smallest_index = i\n        elseif numbers[i] > second_smallest_number\
    \ then\n            second_smallest_number = numbers[i]\n            second_smallest_index\
    \ = i\n        end\n    end\n    return smallest_index, second_smallest_index\n\
    end", "  local closest_pairs = {}\n  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local largest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_number\
    \ ~= nil and smallest_distance == nil then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    elseif smallest_distance ~= nil and distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    local distance = math.abs(number - largest_number)\n\
    \    if largest_number ~= nil and distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    table.insert(closest_pairs,\
    \ {number, distance})\n  end\n  table.sort(closest_pairs, function(a, b)\n   \
    \ return a.distance < b.distance\n  end)\n  return closest_pairs\nend", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for i = 1, #numbers do\n    local distance = math.abs(numbers[i] -\
    \ numbers[smallest_number])\n    if smallest_number == nil or distance < smallest_distance\
    \ then\n      smallest_number = i\n      smallest_distance = distance\n    end\n\
    \    if smallest_number ~= i then\n      local distance = math.abs(numbers[i]\
    \ - numbers[second_smallest_number])\n      if second_smallest_number == nil or\
    \ distance < smallest_distance then\n        second_smallest_number = i\n    \
    \    smallest_distance = distance\n      end\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = math.abs(numbers[i] - largest)\n \
    \   if diff < smallest then\n      smallest, largest = diff, numbers[i]\n    end\n\
    \  end\n  return smallest, largest\nend", "    local smallest_number = numbers[1]\n\
    \    local largest_number = numbers[1]\n    for i = 2, #numbers do\n        if\
    \ numbers[i] < smallest_number then\n            smallest_number = numbers[i]\n\
    \        elseif numbers[i] > largest_number then\n            largest_number =\
    \ numbers[i]\n        end\n    end\n    return smallest_number, largest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number\n  local\
    \ second_smallest_number\n  for _, number in ipairs(numbers) do\n    local distance\
    \ = math.abs(number - smallest_number)\n    if distance < smallest_distance then\n\
    \      smallest_distance = distance\n      smallest_number = number\n    end\n\
    \    if distance < smallest_distance then\n      second_smallest_number = smallest_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ function distance(a, b)\n    return math.abs(a - b)\n  end", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "    local smallest_number =\
    \ numbers[1]\n    local second_smallest_number = numbers[1]\n    for i = 2, #numbers\
    \ do\n        if numbers[i] < smallest_number then\n            smallest_number\
    \ = numbers[i]\n        elseif numbers[i] > second_smallest_number then\n    \
    \        second_smallest_number = numbers[i]\n        end\n    end\n    return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "    local smallest_number =\
    \ numbers[1]\n    local second_smallest_number = numbers[1]\n    for _, number\
    \ in pairs(numbers) do\n        if number < smallest_number then\n           \
    \ smallest_number = number\n        elseif number > second_smallest_number then\n\
    \            second_smallest_number = number\n        end\n    end\n    return\
    \ smallest_number, second_smallest_number\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local dist = math.abs(numbers[i]\
    \ - smallest)\n    if dist < largest then\n      largest = dist\n    else\n  \
    \    smallest = dist\n    end\n  end\n  return smallest, largest\nend", "    local\
    \ smallest_number = numbers[1]\n    local second_smallest_number = numbers[1]\n\
    \    for i = 2, #numbers do\n        if numbers[i] < smallest_number then\n  \
    \          smallest_number = numbers[i]\n        elseif numbers[i] > second_smallest_number\
    \ then\n            second_smallest_number = numbers[i]\n        end\n    end\n\
    \    return smallest_number, second_smallest_number\nend", "  local smallest =\
    \ numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    end\n    if current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "    local smallest_number = numbers[1]\n \
    \   local second_smallest_number = numbers[1]\n    for _, number in pairs(numbers)\
    \ do\n        if number < smallest_number then\n            smallest_number =\
    \ number\n        elseif number > second_smallest_number then\n            second_smallest_number\
    \ = number\n        end\n    end\n    return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  local smallest_index = 1\n  local second_smallest_index = 1\n\
    \  for i = 2, #numbers do\n    if numbers[i] < smallest_number then\n      smallest_number\
    \ = numbers[i]\n      smallest_index = i\n    elseif numbers[i] > second_smallest_number\
    \ then\n      second_smallest_number = numbers[i]\n      second_smallest_index\
    \ = i\n    end\n  end\n  return smallest_number, second_smallest_number, smallest_index,\
    \ second_smallest_index\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      largest = current\n    elseif current > largest\
    \ then\n      smallest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local function\
    \ distance(first, second)\n    return math.abs(first - second)\n  end\n  local\
    \ function less_than(first, second)\n    return first < second\n  end\n  local\
    \ function greater_than(first, second)\n    return first > second\n  end\n  local\
    \ function less_or_equal(first, second)\n    return first <= second\n  end\n \
    \ local function greater_or_equal(first, second)\n    return first >= second\n\
    \  end\n  local function less_than(first, second)\n    return first < second\n\
    \  end\n  local function greater_than(first, second)\n    return first > second\n\
    \  end\n  local function less_or_equal(first, second)\n    return first <= second\n\
    \  end\n  local function greater_or_equal(first, second)\n    return first >=\
    \ second\n  end\n  local function less_than(first, second)\n    return first <\
    \ second\n  end\n  local function greater_than(first, second)\n    return first\
    \ > second\n  end\n  local function less_or_equal(first, second)\n    return first\
    \ <= second\n  end\n  local function greater_or_equal(first, second)\n    return\
    \ first >= second\n  end\n  local function less_than(first, second)\n    return\
    \ first < second\n  end\n  local function greater_than(first, second)\n    return\
    \ first > second\n  end\n  local function less_or_equal(first, second)\n    return\
    \ first <= second\n  end\n  local function greater_or_equal(first, second)\n \
    \   return first >= second\n  end\n  local function less_than(first, second)\n\
    \    return first < second\n  end\n  local function greater_than(first, second)\n\
    \    return first > second\n  end\n  local function less_or_equal(first, second)\n\
    \    return first <= second\n  end\n  local function greater_or_equal(first, second)\n\
    \    return first >= second\n  end\n  local function less_than(first, second)\n\
    \    return first < second\n  end\n  local function greater_than(first, second)\n\
    \    return first > second\n  end\n  local function less_or_equal(first, second)\n\
    \    return first <= second\n  end\n  local function greater_or_equal(first, second)\n\
    \    return first >= second\n  end\n  local function less_than(first, second)\n\
    \    return first < second\n  end\n  local function greater_than(first, second)\n\
    \    return first > second\n  end\n  local function less_or_equal(first, second)\n\
    \    return first <= second\n  end\n  local function greater_or_equal(first, second)\n\
    \    return first >= second\n  end\n  local function less_", "    local smallest,\
    \ largest = numbers[1], numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < smallest then\n            smallest = numbers[i]\n        elseif numbers[i]\
    \ > largest then\n            largest = numbers[i]\n        end\n    end\n   \
    \ return smallest, largest\nend", "    local smallest, largest = numbers[1], numbers[#numbers]\n\
    \    for i = 2, #numbers do\n        local distance = math.abs(numbers[i] - largest)\n\
    \        if distance < smallest then\n            smallest, largest = distance,\
    \ numbers[i]\n        end\n    end\n    return smallest, largest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
