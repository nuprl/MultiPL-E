language: lua
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.starts(prefix) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuwze1i3.lua:5:\
    \ attempt to call field 'starts' (a nil value)\nstack traceback:\n\t/tmp/tmpyuwze1i3.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmpyuwze1i3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))\
    \ ~= prefix then\n      result[#result + 1] = str\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0o2w945.lua:16:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpk0o2w945.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))==prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.starts(prefix) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuwze1i3.lua:5:\
    \ attempt to call field 'starts' (a nil value)\nstack traceback:\n\t/tmp/tmpyuwze1i3.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmpyuwze1i3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.starts(prefix) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuwze1i3.lua:5:\
    \ attempt to call field 'starts' (a nil value)\nstack traceback:\n\t/tmp/tmpyuwze1i3.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmpyuwze1i3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))\
    \ ~= prefix then\n      result[#result + 1] = str\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0o2w945.lua:16:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpk0o2w945.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.starts(prefix) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuwze1i3.lua:5:\
    \ attempt to call field 'starts' (a nil value)\nstack traceback:\n\t/tmp/tmpyuwze1i3.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmpyuwze1i3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))\
    \ ~= prefix then\n      result[#result + 1] = str\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0o2w945.lua:16:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpk0o2w945.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))\
    \ ~= prefix then\n      result[#result + 1] = str\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0o2w945.lua:16:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpk0o2w945.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.starts(prefix) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuwze1i3.lua:5:\
    \ attempt to call field 'starts' (a nil value)\nstack traceback:\n\t/tmp/tmpyuwze1i3.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmpyuwze1i3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))\
    \ ~= prefix then\n      result[#result + 1] = str\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0o2w945.lua:16:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"asd\", \"xxy\", \"john\
    \ doe\"}\nstack traceback:\n\t/tmp/tmpk0o2w945.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))\
    \ = prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg229nqwx.lua:5: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.starts(prefix) then\n\
    \      table.insert(result, string)\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuwze1i3.lua:5:\
    \ attempt to call field 'starts' (a nil value)\nstack traceback:\n\t/tmp/tmpyuwze1i3.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmpyuwze1i3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, string in ipairs(strings) do\n    if string.startswith(prefix)\
    \ then\n      table.insert(result, string)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnbqv_8r.lua:5:\
    \ attempt to call field 'startswith' (a nil value)\nstack traceback:\n\t/tmp/tmplnbqv_8r.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplnbqv_8r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750264
