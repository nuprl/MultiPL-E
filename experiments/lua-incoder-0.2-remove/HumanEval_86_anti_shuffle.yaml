name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n\
    \    local char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii\
    \ value of char\n    local new_char = string.char(ascii - 1) -- ascii value of\
    \ char - 1\n    new_s = new_s .. new_char\n  end\n  return new_s\nend", "  --\
    \ Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c\
    \ = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n    end\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  local new_s = \"\"\
    \n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c ~= \" \" then\n\
    \      new_s = new_s .. c\n    else\n      new_s = new_s .. string.sub(s,i+1,i+1)\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local words\
    \ = {}\n  for w in string.gmatch(s, \"[^ ]+\") do\n    table.insert(words, w)\n\
    \  end\n  table.sort(words)\n  local new_s = \"\"\n  for _, w in ipairs(words)\
    \ do\n    new_s = new_s .. w .. \" \"\n  end\n  return new_s\nend", "  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= \" \" then\n      new_s = new_s .. c\n    end\n  end\n  return new_s\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   local c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s ..\
    \ c\n    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local\
    \ s = s:gsub(\"%w+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = ", "  -- Write your code here.\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- ", "  -- Write your code\
    \ here.\n  -- Note: You should keep the order of words and blank spaces in the\
    \ sentence.\n  -- For example:\n  local function anti_shuffle(s)\n    local words\
    \ = string.gmatch(s, '[%w\\s]+')\n    local shuffled_words = {}\n    for i = 1,\
    \ #words do\n      local word = words[i]\n      local sorted_word = word\n   \
    \   local j = 1\n      while j <= #word do\n        if string.byte(sorted_word)\
    \ > string.byte(word[j]) then\n          sorted_word = word[j]\n        else\n\
    \          j = j + 1\n        end\n      end\n      table.insert(shuffled_words,\
    \ sorted_word)\n    end\n    return table.concat(shuffled_words, ' ')\n  end\n\
    \  return anti_shuffle(s)\nend\nprint(anti_shuffle(\"The quick brown fox jumps\
    \ over the lazy dog\"))", "  -- Write your code here.\n  return s\nend", "  --\
    \ Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c\
    \ = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n    end\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  local s = s:gsub(\"\
    %w+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w)\
    \ return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n\
    \  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = ", "    local\
    \ new_s = \"\"\n    local words = s:gmatch(\"([^ ]+)\")\n    for _, word in pairs(words)\
    \ do\n        local new_word = word\n        local new_word_len = 0\n        for\
    \ i = 1, #word do\n            local c = string.byte(word[i])\n            local\
    \ new_c = string.byte(new_word[i])\n            if c > new_c then\n          \
    \      new_word = new_word .. string.sub(word, 1, i)\n                new_word_len\
    \ = i\n            end\n        end\n        new_s = new_s .. new_word .. \" \"\
    \n    end\n    return new_s\nend", "  -- Write your code here\n  local new_s =\
    \ \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c ~= \" \"\
    \ then\n      new_s = new_s .. c\n    end\n  end\n  return new_s\nend", "  --\
    \ Write your code here.\n  local new_s = \"\"\n  for i = 1, #s do\n    local char\
    \ = string.sub(s,i,i)\n    local new_char = string.char(string.byte(char) + 1)\n\
    \    new_s = new_s .. new_char\n  end\n  return new_s\nend", "    local words\
    \ = string.gmatch(s, \"[^ ]+\")\n    local new_words = {}\n    for _, word in\
    \ pairs(words) do\n        table.insert(new_words, word)\n    end\n    return\
    \ table.concat(new_words, \" \")\nend", "  -- Write your code here.\n  -- return\
    \ s\nend", "  -- Write your code here\n  local words = string.gmatch(s, \"[%w\\\
    s]+\") -- get all words in the string\n  local sorted_words = {}\n  for i = 1,\
    \ #words do\n    sorted_words[#sorted_words + 1] = words[i] -- add each word to\
    \ the sorted list\n  end\n  table.sort(sorted_words) -- sort the words in ascending\
    \ order\n  local new_s = \"\"\n  for i = 1, #sorted_words do\n    new_s = new_s\
    \ .. sorted_words[i] .. \" \"\n  end\n  return new_s\nend", "  -- Write your code\
    \ here.\nend", "  local words = s:gmatch(\"([^ ]+)\")\n  local shuffled_words\
    \ = {}\n  for _, word in pairs(words) do\n    table.insert(shuffled_words, word:gsub(\"\
    %W\", function (c)\n      return string.char(tonumber(c) + 1)\n    end))\n  end\n\
    \  return table.concat(shuffled_words, \" \")\nend", "  -- Write your code here\n\
    \  -- return \"antishuffle\"\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  local words = string.gmatch(s, \"([^ ]+)\")\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    local new_word_ascii = \"\"\n    for i =\
    \ 1, #word do\n      new_word_ascii = new_word_ascii .. string.char(string.byte(word[i])\
    \ + 1)\n    end\n    new_word = new_word .. new_word_ascii\n    new_s = new_s\
    \ .. new_word\n  end\n  return new_s\nend", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n \
    \     new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i)\
    \ .. \" \"\n    end\n  end\n  return new_s\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n \
    \   if string.find(c, \"[%a]\") then\n      new_s = new_s .. string.sub(s,i,i-1)\
    \ .. string.sub(s,i+1,i+1)\n    else\n      new_s = new_s .. c\n    end\n  end\n\
    \  return new_s\nend", "  -- Write your code here.\n  -- return s\nend", "  --\
    \ Write your code here.\n  -- return \"antishuffle\"\nend", "  -- Write your code\
    \ here\n  -- Example: anti_shuffle(\"Hello World\") --> \"olleH dlroW\"\n  --\
    \ Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW   \"\n\
    \  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW  \
    \ \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   olleH   dlroW\
    \   \"\n  -- Example: anti_shuffle(\"   Hello   World   \") --> \"   ", "  --\
    \ Write your code here.\n  return s\nend", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(c,\
    \ \"\\n\") then\n      new_s = new_s .. c\n    else\n      new_s = new_s .. string.sub(s,i,i-1)\
    \ .. c\n    end\n  end\n  return new_s\nend", "  -- Write your code here.\n  --\
    \ Note: You should keep the order of words and blank spaces in the sentence.\n\
    \  -- For example:\n  local function anti_shuffle(s)\n    local new_s = \"\"\n\
    \    local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n    for i\
    \ = 1, #words do\n      local word = words[i]\n      local new_word = word\n \
    \     local j = 1\n      while j <= #word do\n        local c = string.byte(word:sub(j,\
    \ j + 1))\n        if c > 127 then\n          new_word = new_word .. string.char(c\
    \ - 32)\n        else\n          new_word = new_word .. string.char(c)\n     \
    \   end\n        j = j + 1\n      end\n      new_s = new_s .. new_word\n    end\n\
    \    return new_s\n  end\n  -- Write your code here.\n  -- Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n  -- For example:\n  local\
    \ function anti_shuffle(s)\n    local new_s = \"\"\n    local words = s:gmatch(\"\
    ([^ ]+)\") -- Split string into words\n    for i = 1, #words do\n      local word\
    \ = words[i]\n      local new_word = word\n      local j = 1\n      while j <=\
    \ #word do\n        local c = string.byte(word:sub(j, j + 1))\n        if c >\
    \ 127 then\n          new_word = new_word .. string.char(c - 32)\n        else\n\
    \          new_word = new_word .. string.char(c)\n        end\n        j = j +\
    \ 1\n      end\n      new_s = new_s .. new_word\n    end\n    return new_s\n \
    \ end\n  -- Write your code here.\n  -- Note: You should keep the order of words\
    \ and blank spaces in the sentence.\n  -- For example:\n  local function anti_shuffle(s)\n\
    \    local new_s = \"\"\n    local words = s:gmatch(\"([^ ]+)\") -- Split string\
    \ into words\n    for i = 1, #words do\n      local word = words[i]\n      local\
    \ new_word = word\n      local j = 1\n      while j <= #word do\n        local\
    \ c = string.byte(word:sub(j, j + 1))\n        if c > 127 then\n          new_word\
    \ = new_word .. string.char(c - 32)\n        else\n          new_word = new_word\
    \ .. string.char(c)\n        end\n        j = j + 1\n      end\n      new_s =\
    \ new_s .. new_word\n    end\n    return new_s\n  end\n  -- Write your code here.\n\
    \  -- Note: You should keep the order of words and blank spaces in the sentence.\n\
    \  -- For example:\n  local function anti_shuffle(s)\n    local new_s = \"\"\n\
    \    local words = s:", "  -- Write your code here\n  -- return \"antishuffle\"\
    \nend", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n\
    \    local char = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii\
    \ value of char\n    if ascii < 65 then\n      new_s = new_s .. string.char(ascii+32)\n\
    \    elseif ascii < 70 then\n      new_s = new_s .. string.char(ascii-32) .. \"\
    \ \" -- add space before char\n    elseif ascii < 76 then\n      new_s = new_s\
    \ .. string.char(ascii-32) .. \" \" -- add space before char\n    elseif ascii\
    \ < 80 then\n      new_s = new_s .. string.char(ascii-32) .. \" \" -- add space\
    \ before char\n    elseif ascii < 104 then\n      new_s = new_s .. string.char(ascii-32)\
    \ .. \" \" -- add space before char\n    else\n      new_s = new_s .. char\n \
    \   end\n  end\n  return new_s\nend", "  -- Write your solution here\nend", " \
    \ -- Write your code here\n  return s\nend", "  -- Write your code here\n  --\
    \ return s\nend", "  -- Write your code here.\n  local new_s = \"\"\n  for i =\
    \ 1, #s do\n    local char = string.sub(s,i,i)\n    local ascii = string.byte(char)\
    \ -- ascii value of char\n    if ascii < 65 then\n      new_s = new_s .. string.sub(s,i,i)\n\
    \    elseif ascii < 91 then\n      new_s = new_s .. string.sub(s,i,i-1)\n    elseif\
    \ ascii < 97 then\n      new_s = new_s .. string.sub(s,i-1,i-1)\n    elseif ascii\
    \ < 123 then\n      new_s = new_s .. string.sub(s,i-1,i)\n    end\n  end\n  return\
    \ new_s\nend", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1,\
    \ #s do\n    local char = string.sub(s,i,i)\n    local ascii = string.byte(char,1,1)\n\
    \    local new_char = string.char(ascii,ascii,ascii)\n    new_s = new_s .. new_char\n\
    \  end\n  return new_s\nend", "  -- Write your solution here\n  local words =\
    \ {}\n  for w in s:gmatch(\"[^ ]+\") do\n    table.insert(words, w)\n  end\n \
    \ table.sort(words)\n  local new_s = \"\"\n  for _, w in ipairs(words) do\n  \
    \  new_s = new_s .. w .. \" \"\n  end\n  return new_s\nend", "    local words\
    \ = string.gmatch(s, \"[%w\\s]+\") -- Split string into words\n    local new_words\
    \ = {}\n    local word_index = 1\n    for word in words do\n        local new_word\
    \ = \"\"\n        for char in word do -- Iterate over each character in word\n\
    \            -- If the character is alphabetic character then add it to new_word\n\
    \            if string.byte(char) > 64 then\n                new_word = new_word\
    \ .. string.byte(char) -- Add ascii value to new_word\n            else\n    \
    \            new_word = new_word .. string.byte(string.lower(char)) -- Add ascii\
    \ value to new_word\n            end\n        end\n        new_words[word_index]\
    \ = new_word -- Add new_word to new_words\n        word_index = word_index + 1\n\
    \    end\n    return table.concat(new_words) -- Return new_words as string\nend",
  "  -- Write your code here.\n  return s\nend", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n \
    \     new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i)\
    \ .. \" \"\n    end\n  end\n  return new_s\nend", "  -- Write your code here.\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   local char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s\
    \ .. \" \"\n    else\n      new_s = new_s .. string.char(string.byte(char) - 97)\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here.\n  return s\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   local c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s ..\
    \ c\n    else\n      new_s = new_s .. string.sub(s,i,i+1)\n    end\n  end\n  return\
    \ new_s\nend", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1,\
    \ #s do\n    local c = string.sub(s,i,i)\n    if string.find(c,\"[%a]\") then\n\
    \      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. c\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here\n  return s\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   if string.find(s, \" \") then\n      new_s = new_s .. string.sub(s,1,string.find(s,\
    \ \" \")-1)\n      new_s = new_s .. string.sub(s,string.find(s, \" \")+1, #s)\n\
    \    else\n      new_s = new_s .. string.sub(s,1,i)\n    end\n  end\n  return\
    \ new_s\nend", "    local new_s = \"\"\n    local words = s:gmatch(\"[%w]+\")\n\
    \    for _, word in pairs(words) do\n        local new_word = word\n        local\
    \ new_word_len = #word\n        for i = 1, #word do\n            local c = string.byte(word[i])\n\
    \            if c > 127 then\n                new_word = new_word .. string.char(c\
    \ - 256)\n            else\n                new_word = new_word .. string.char(c)\n\
    \            end\n        end\n        new_s = new_s .. new_word\n    end\n  \
    \  return new_s\nend", "  -- Write your code here\n  local new_s = \"\"\n  for\
    \ i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c ~= \" \" then\n    \
    \  new_s = new_s .. c\n    end\n  end\n  return new_s\nend", "  local words =\
    \ string.gmatch(s, \"[^ ]+\") -- Split string into words\n  local new_words =\
    \ {}\n  local new_word = \"\"\n  for i = 1, #words do\n    local word = words[i]\n\
    \    if word ~= \"\" then\n      new_word = new_word .. word\n      new_words[#new_words+1]\
    \ = word\n    end\n  end\n  new_word = new_word .. \" \"\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    if word ~= \"\" then\n      new_word = new_word\
    \ .. word\n      new_words[#new_words+1] = word\n    end\n  end\n  return new_word\n\
    end", "  -- Write your code here.\n  return s\nend", "  -- Write your code here.\n\
    \  -- return \"antishuffle\"\nend", "  local words = s:gmatch(\"([^ ]+)\")\n \
    \ local new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n  \
    \  local new_word = \"\"\n    for j = 1, #word do\n      local c = word[j]\n \
    \     local ascii = string.byte(c)\n      if ascii < 97 then\n        ascii =\
    \ ascii + 26\n      elseif ascii < 123 then\n        ascii = ascii - 26\n    \
    \  end\n      new_word = new_word .. string.char(ascii)\n    end\n    new_words[i]\
    \ = new_word\n  end\n  return table.concat(new_words, \" \")\nend", "  -- Write\
    \ your code here.\nend", "  -- Write your code here.\n  return s\nend", "  --\
    \ Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char\
    \ = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s .. char\n\
    \    else\n      new_s = new_s .. string.char(math.abs(string.byte(char)))\n \
    \   end\n  end\n  return new_s\nend", "  -- Write your code here.\nend", "  local\
    \ new_s = \"\"\n  for w in s:gmatch(\"[^ ]+\") do\n    local new_w = \"\"\n  \
    \  for c in w:gmatch(\"%S+\") do\n      local ascii = string.byte(c)\n      if\
    \ ascii < 32 then\n        ascii = ascii + 32\n      else\n        ascii = ascii\
    \ - 32\n      end\n      new_w = new_w .. string.char(ascii)\n    end\n    new_s\
    \ = new_s .. new_w\n  end\n  return new_s\nend", "    local words = string.gmatch(s,\
    \ \"([^ ]+)\") -- Split sentence into words\n    local new_words = {}\n    for\
    \ _, word in pairs(words) do\n        local new_word = \"\"\n        for i = 1,\
    \ #word do -- Iterate through each character in word\n            local ascii\
    \ = string.byte(word[i]) -- Get the ascii value of current character\n       \
    \     -- If the ascii value is greater than the ascii value of previous character\n\
    \            -- then swap the character\n            if ascii > string.byte(new_word:sub(1,\
    \ #new_word)) then\n                new_word = new_word .. string.char(string.byte(word[i])\
    \ + 1)\n            else\n                new_word = new_word .. string.char(string.byte(word[i])\
    \ - 1)\n            end\n        end\n        new_words[#new_words + 1] = new_word\
    \ -- Add the new word to new_words\n    end\n    return table.concat(new_words,\
    \ \" \") -- Join new_words with space\nend", "    local words = string.gmatch(s,\
    \ \"[^ ]+\")\n    local result = \"\"\n    for _, word in pairs(words) do\n  \
    \      local new_word = word\n        for i = 1, #word do\n            local char\
    \ = string.sub(word, i, i)\n            local ascii = string.byte(char) + 128\n\
    \            if ascii < 127 then\n                new_word = new_word .. string.char(ascii)\n\
    \            else\n                new_word = new_word .. string.char(ascii -\
    \ 127)\n            end\n        end\n        result = result .. new_word\n  \
    \  end\n    return result\nend", "  -- Write your code here.\n  -- Note: Use a\
    \ for loop to iterate through each character in the string.\n  -- Use a while\
    \ loop to iterate through each character in the string.\n  -- Use a table to store\
    \ the characters in ascending order.\n  -- Use a table to store the characters\
    \ in descending order.\n  -- Use a table to store the characters in ascending\
    \ order and store the\n  -- characters in descending order in the table.\n  --\
    \ Use a table to store the characters in ascending order and store the\n  -- characters\
    \ in descending order in the table.\n  -- Use a table to store the characters\
    \ in ascending order and store the\n  -- characters in descending order in the\
    \ table.\n  -- Use a table to store the characters in ascending order and store\
    \ the\n  -- characters in descending order in the table.\n  -- Use a table to\
    \ store the characters in ascending order and store the\n  -- characters in descending\
    \ order in the table.\n  -- Use a table to store the characters in ascending order\
    \ and store the\n  -- characters in descending order in the table.\n  -- Use a\
    \ table to store the characters in ascending order and store the\n  -- characters\
    \ in descending order in the table.\n  -- Use a table to store the characters\
    \ in ascending order and store the\n  -- characters in descending order in the\
    \ table.\n  -- Use a table to store the characters in ascending order and store\
    \ the\n  -- characters in descending order in the table.\n  -- Use a table to\
    \ store the characters in ascending order and store the\n  -- characters in descending\
    \ order in the table.\n  -- Use a table to store the characters in ascending order\
    \ and store the\n  -- characters in descending order in the table.\n  -- Use a\
    \ table to store the characters in ascending order and store the\n  -- characters\
    \ in descending order in the table.\n  -- Use a table to store the characters\
    \ in ascending order and store the\n  -- characters in descending order in the\
    \ table.\n  -- Use a table to store the characters in ascending order and store\
    \ the\n  -- characters in descending order in the table.\n  -- Use a table to\
    \ store the characters in ascending order and store the\n  -- characters in descending\
    \ order in the table.\n  -- Use a table to store the characters in ascending order\
    \ and store the\n  -- characters in descending order in the table.\n  -- Use a\
    \ table to store the characters in ascending order and store the\n  -- characters\
    \ in descending order in the table.\n  -- Use a table to store the characters\
    \ in ", "    local new_s = \"\"\n    local words = string.gmatch(s, \"([^ ]+)\"\
    ) -- Split string into words\n    for _, word in pairs(words) do\n        -- Convert\
    \ each word to ascii value\n        local word_ascii = string.byte(word)\n   \
    \     -- Find out which character is bigger and replace it with that character\n\
    \        local bigger_char = word_ascii\n        for i = 1, #word do\n       \
    \     bigger_char = bigger_char > string.byte(word[i]) and bigger_char or string.byte(word[i])\n\
    \        end\n        -- Replace the word with that character\n        new_s =\
    \ new_s .. string.sub(word, 1, #word) .. bigger_char\n    end\n    return new_s\n\
    end", "  -- Write your code here\n  -- return s\nend", "  -- Write your code here.\n\
    \  -- return s\nend", "  -- Write your code here\n  -- return \"antishuffle\"\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   local char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s\
    \ .. char\n    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    local ascii\
    \ = string.byte(char) -- ascii value of char\n    if ascii < 97 then\n      new_s\
    \ = new_s .. string.sub(s,i,i)\n    end\n  end\n  return new_s\nend", "  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local word = s:sub(i,i)\n\
    \    local new_word = word\n    local j = 1\n    while j <= #word do\n      local\
    \ c = word[j]\n      local c_ascii = string.byte(c)\n      local c_ord = string.byte(string.sub(word,j,j))\n\
    \      if c_ascii < c_ord then\n        new_word = new_word .. string.sub(word,j,j-1)\n\
    \      else\n        new_word = new_word .. c\n      end\n      j = j + 1\n  \
    \  end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend", "  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n  return new_s\nend",
  "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c ~= \" \" then\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    local ascii\
    \ = string.byte(char) -- ascii value of char\n    if ascii < 127 then\n      new_s\
    \ = new_s .. char\n    else\n      new_s = new_s .. string.sub(s,i,i-1)\n    end\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  local new_s = \"\"\
    \n  local words = s:gmatch(\"([^ ]+)\") -- get all words in the sentence\n  for\
    \ i = 1, #words do\n    local word = words[i]\n    local new_word = word\n   \
    \ local j = 1\n    while j <= #word do\n      local c = string.byte(word:sub(j,\
    \ j + 1))\n      if c > 127 then\n        local new_c = string.byte(new_word:sub(j,\
    \ j + 1))\n        new_word = new_word:sub(1, j - 1) .. string.char(new_c - 1)\n\
    \      else\n        local new_c = string.byte(new_word:sub(j, j + 1))\n     \
    \   new_word = new_word:sub(1, j - 1) .. string.char(new_c + 1)\n      end\n \
    \     j = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end", "    local words = string.gmatch(s, \"[%w\\s]+\") -- Split string into words\n\
    \    local new_words = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local new_word = word\n        for j = 1, #word do\n            local\
    \ c = string.sub(word, j, j)\n            local ascii = string.byte(c)\n     \
    \       if ascii < 97 then\n                ascii = ascii + 26\n            else\n\
    \                ascii = ascii - 26\n            end\n            new_word = new_word\
    \ .. string.char(ascii)\n        end\n        new_words[i] = new_word\n    end\n\
    \    return table.concat(new_words, \" \")\nend", "  -- Write your code here\n\
    \  return s\nend", "  -- Write your code here.\nend", "  local words = s:gmatch(\"\
    ([^ ]+)\") -- get all words in string\n  local new_words = {}\n  for _, word in\
    \ pairs(words) do\n    local new_word = word\n    local new_word_len = 0\n   \
    \ for i = 1, #word do\n      local c = string.byte(word[i])\n      -- if c is\
    \ between 32 and 126, then replace it with 32\n      if c >= 32 and c <= 126 then\n\
    \        c = 32\n      else\n        -- if c is between 97 and 122, then replace\
    \ it with 97\n        if c >= 97 and c <= 122 then\n          c = 97\n       \
    \ else\n          -- if c is between 65 and 90, then replace it with 65\n    \
    \      if c >= 65 and c <= 90 then\n            c = 65\n          else\n     \
    \       -- if c is between 48 and 57, then replace it with 48\n            if\
    \ c >= 48 and c <= 57 then\n              c = 48\n            end\n          end\n\
    \        end\n      end\n      new_word = new_word .. string.format(\"%c\", c)\n\
    \      new_word_len = new_word_len + 1\n    end\n    new_words[#new_words + 1]\
    \ = new_word\n  end\n  return table.concat(new_words, \" \")\nend", "  -- Write\
    \ your code here\n  return s\nend", "  -- Write your code here.\n  return s\n\
    end", "  -- Write your code here.\n  local s = s:gsub(\"%w+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return\
    \ w:lower() end)\n  s = s:gsub(\"%S+\", function (w) return w:lower() end)\n \
    \ s = s:gsub(\"%S+\", function (w) return w:lower() end)\n  s = s:gsub(\"%S+\"\
    , function (w) return w:lower() end)\n  s = ", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    if string.find(s, \" \") then\n      local\
    \ words = string.gmatch(s, \" ([^ ]+)\") -- get all words in sentence\n      local\
    \ new_words = {}\n      for _, word in pairs(words) do\n        table.insert(new_words,\
    \ string.char(string.byte(word)))\n      end\n      table.sort(new_words, function(a,\
    \ b) return string.byte(a) > string.byte(b) end)\n      table.insert(new_s, table.concat(new_words,\
    \ \" \"))\n    else\n      table.insert(new_s, string.char(string.byte(s[i])))\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here.\n  return s\n\
    end", "    local words = s:gmatch(\"([^ ]+)\") -- get all words in the string\n\
    \    local new_words = {}\n    for _, word in pairs(words) do\n        table.insert(new_words,\
    \ word:gsub(\"%W\", function (c) return string.char(tonumber(c)) end))\n    end\n\
    \    return table.concat(new_words, \" \")\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    local new_char\
    \ = string.char(ascii - 1)\n    new_s = new_s .. new_char\n  end\n  return new_s\n\
    end", "  -- Write your code here\n  -- return \"antishuffle\"\nend", "    local\
    \ words = s:gmatch(\"[%w]+\")\n    local new_words = {}\n    local word_count\
    \ = {}\n    for i = 1, #words do\n        local word = words[i]\n        local\
    \ word_ascii = string.byte(word)\n        -- If the word is not in the dictionary,\
    \ add it to the dictionary.\n        if word_ascii >= #dictionary then\n     \
    \       table.insert(new_words, word)\n            table.insert(word_count, word_ascii)\n\
    \        end\n    end\n    -- Sort the dictionary in ascending order.\n    table.sort(word_count,\
    \ function(a, b) return word_count[a] < word_count[b] end)\n    -- Replace the\
    \ words in the string with the sorted words.\n    for i = 1, #words do\n     \
    \   local word = words[i]\n        local word_ascii = word_count[string.byte(word)]\n\
    \        -- If the word is not in the dictionary, add it to the dictionary.\n\
    \        if word_ascii >= #dictionary then\n            table.insert(new_words,\
    \ word)\n            table.insert(word_count, word_ascii)\n        end\n    end\n\
    \    return table.concat(new_words, \" \")\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n \
    \   if string.find(c, \"[%a]\") then\n      new_s = new_s .. c\n    else\n   \
    \   new_s = new_s .. string.sub(s,i,i-1)\n    end\n  end\n  return new_s\nend",
  "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c,\"[%a]\") then\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i) ..\
    \ \" \"\n    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local\
    \ words = string.gmatch(s, \"[%w\\s]+\") -- Split string into words\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[i] = words[i] .. \" \" .. string.char(string.byte(words[i]))\
    \ -- Add space before each character\n  end\n  return table.concat(sorted_words,\
    \ \"  \")\nend", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == \" \" then\n      new_s = new_s .. string.sub(s,i,i)\n\
    \    else\n      new_s = new_s .. string.sub(s,i,i) .. \" \"\n    end\n  end\n\
    \  return new_s\nend", "    local words = s:gmatch(\"[^ ]+\")\n    local new_words\
    \ = {}\n    for _, word in pairs(words) do\n        table.insert(new_words, word)\n\
    \    end\n    table.sort(new_words)\n    return table.concat(new_words, \" \"\
    )\nend", "  -- Write your code here\n  local result = {}\n  for i = 1, #s do\n\
    \    local word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word\
    \ do\n      local c = word:sub(j,j)\n      local ascii = string.byte(c)\n    \
    \  if ascii < 97 then\n        ascii = ascii + 26\n      else\n        ascii =\
    \ ascii - 26\n      end\n      new_word = new_word .. string.char(ascii)\n   \
    \ end\n    result[#result + 1] = new_word\n  end\n  return table.concat(result,\"\
    \ \")\nend", "  -- Write your code here\n  local new_s = \"\"\n  local words =\
    \ s:gmatch(\"[%w]+\")\n  for i = 1, #words do\n    local word = words[i]\n   \
    \ local new_word = word:gsub(\"%c\", function (c)\n      local ascii = tonumber(c)\n\
    \      if ascii < 32 then\n        return c\n      else\n        return string.char(tonumber(c)\
    \ - 32)\n      end\n    end)\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end", "    local new_s = \"\"\n    for i = 1, #s do\n        local word = s:sub(i,\
    \ i)\n        local new_word = word\n        for j = 1, #word do\n           \
    \ local c = word[j]\n            local ascii = string.byte(c)\n            if\
    \ ascii < 127 then\n                new_word = new_word .. string.char(ascii +\
    \ 32)\n            else\n                new_word = new_word .. c\n          \
    \  end\n        end\n        new_s = new_s .. new_word\n    end\n    return new_s\n\
    end", "    local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n  \
    \  local sorted_words = {}\n    for _, word in pairs(words) do\n        sorted_words[#sorted_words\
    \ + 1] = word\n    end\n    table.sort(sorted_words) -- Sort the words\n    local\
    \ sorted_s = \"\"\n    for _, word in pairs(sorted_words) do\n        sorted_s\
    \ = sorted_s .. word .. \" \"\n    end\n    return sorted_s\nend", "  -- Write\
    \ your code here.\n  return s\nend", "  -- Write your code here\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\")\
    \ --> \"Hllo Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\
    \n  -- ", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n\
    \    local c = string.sub(s,i,i)\n    if string.find(c, \"\\n\") then\n      new_s\
    \ = new_s .. c\n    else\n      new_s = new_s .. string.char(string.byte(c) -\
    \ 32)\n    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ char == \" \" then\n      new_s = new_s .. char\n    else\n      new_s = new_s\
    \ .. string.char(string.byte(char) + 1)\n    end\n  end\n  return new_s\nend",
  "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local\
    \ word = s:sub(i,i)\n    local new_word = word\n    for j = 1, #word do\n    \
    \  local c = word:sub(j,j)\n      local ascii = string.byte(c)\n      if ascii\
    \ < 97 then\n        ascii = ascii + 26\n      elseif ascii < 123 then\n     \
    \   ascii = ascii - 26\n      else\n        ascii = ascii - 32\n      end\n  \
    \    new_word = new_word .. string.char(ascii)\n    end\n    new_s = new_s ..\
    \ new_word\n  end\n  return new_s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      new_s\
    \ = new_s .. \" \"\n    else\n      new_s = new_s .. string.sub(s,i,i)\n    end\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  local result = \"\"\
    \n  for i = 1, #s do\n    if s[i] ~= \" \" then\n      result = result .. s[i]\n\
    \    else\n      result = result .. \"-\"\n    end\n  end\n  return result\nend",
  "  -- Write your code here\n  return s\nend", "  -- Write your code here\n  local\
    \ words = string.gmatch(s, \"[%w\\s]+\") -- Split string into words\n  local new_words\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while true do\n      local c = string.byte(new_word)\n\
    \      local new_word = string.sub(anti_shuffle(new_word), 1, j) .. string.sub(anti_shuffle(new_word),\
    \ j + 1, #new_word)\n      if not c then\n        break\n      end\n      j =\
    \ j + 1\n    end\n    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ \" \")\nend", "  -- Write your code here\n  local words = string.gmatch(s, \"\
    [%w\\s]+\") -- Split string into words\n  local sorted_words = {}\n  local word_index\
    \ = 1\n  for i = 1, #words do\n    sorted_words[word_index] = words[i] -- Store\
    \ words in sorted order\n    word_index = word_index + 1\n  end\n  -- Write your\
    \ code here\n  return table.concat(sorted_words, \" \")\nend", "  -- Write your\
    \ code here\n  local result = \"\"\n  for i = 1, #s do\n    local word = s:sub(i,i)\n\
    \    local new_word = \"\"\n    for j = 1, #word do\n      local ascii = string.byte(word[j])\n\
    \      if ascii < 65 then\n        ascii = ascii + 32\n      elseif ascii < 91\
    \ then\n        ascii = ascii - 32\n      else\n        ascii = ascii - 64\n \
    \     end\n      new_word = new_word .. string.char(ascii)\n    end\n    result\
    \ = result .. new_word\n  end\n  return result\nend", "  -- Write your code here\n\
    \  local words = {}\n  for word in string.gmatch(s, \"([^ ]+)\") do\n    table.insert(words,\
    \ word)\n  end\n  table.sort(words)\n  local new_s = \"\"\n  for _, word in ipairs(words)\
    \ do\n    new_s = new_s .. word .. \" \"\n  end\n  return new_s\nend", "  -- Write\
    \ your code here\n  return s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  local words = s:gmatch(\"([^ ]+)\")\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    local j = 1\n    while j <=\
    \ #word do\n      local c = string.byte(word:sub(1, j))\n      if c > 127 then\n\
    \        c = string.byte(word:sub(1, j))\n      end\n      if c < 97 then\n  \
    \      c = string.byte(word:sub(1, j))\n      end\n      new_word = new_word ..\
    \ string.char(c)\n      j = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n\
    \  return new_s\nend", "  -- Write your code here.\n  return s\nend", "  local\
    \ words = string.gmatch(s, \"([^ ]+)\") -- Split string into words\n  local new_words\
    \ = {}\n  local new_word = \"\"\n  local i = 0\n  for word in words do\n    i\
    \ = i + 1\n    new_word = new_word .. word\n    if i > #words then break end\n\
    \  end\n  return new_word\nend", "  -- Write your code here\n  local new_s = \"\
    \"\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      new_s =\
    \ new_s .. \" \"\n    else\n      new_s = new_s .. string.sub(s,i,i)\n    end\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  -- return \"antishuffle\"\
    \nend", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n\
    \    if s[i] ~= \" \" then\n      new_s = new_s .. s[i]\n    else\n      new_s\
    \ = new_s .. \"-\"\n    end\n  end\n  return new_s\nend", "  -- Write your code\
    \ here\n  -- return s\nend", "    local words = string.gmatch(s, \"([^ ]+)\")\
    \ -- Split string into words\n    local new_words = {}\n    local new_s = \"\"\
    \n    for i = 1, #words do\n        local word = words[i]\n        local new_word\
    \ = word\n        local j = 1\n        while j <= #word do\n            local\
    \ c = string.byte(word:sub(j, j + 1))\n            local new_c = c\n         \
    \   if c > 127 then\n                new_c = string.byte(word:sub(j, j + 1))\n\
    \                new_word = new_word .. string.char(c - 127)\n            else\n\
    \                new_word = new_word .. string.char(c + 127)\n            end\n\
    \            j = j + 1\n        end\n        new_words[#new_words + 1] = new_word\n\
    \    end\n    for i = 1, #words do\n        local word = words[i]\n        local\
    \ new_word = new_words[i]\n        new_s = new_s .. new_word .. \" \"\n    end\n\
    \    return new_s\nend", "    local words = s:gmatch(\"([^ ]+)\") -- Split string\
    \ into words\n    local new_words = {}\n    local new_s = \"\"\n    for i = 1,\
    \ #words do\n        local word = words[i]\n        local new_word = \"\"\n  \
    \      for j = 1, #word do\n            local c = word[j]\n            local ascii\
    \ = string.byte(c)\n            if ascii < 32 then\n                new_word =\
    \ new_word .. string.char((ascii + 32) % 256)\n            else\n            \
    \    new_word = new_word .. c\n            end\n        end\n        new_words[#new_words+1]\
    \ = new_word\n    end\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local new_word = \"\"\n        for j = 1, #word do\n            local\
    \ c = word[j]\n            local ascii = string.byte(c)\n            if ascii\
    \ < 32 then\n                new_word = new_word .. string.char((ascii - 32 +\
    \ 256) % 256)\n            else\n                new_word = new_word .. c\n  \
    \          end\n        end\n        new_s = new_s .. new_word\n    end\n    return\
    \ new_s\nend", "  -- Write your code here\n  -- return s\nend", "  -- Write your\
    \ code here\n  local new_s = \"\"\n  local words = s:gmatch(\"([^ ]+)\")\n  for\
    \ _, word in pairs(words) do\n    local new_word = word:gsub(\"%W\", function\
    \ (c)\n      return string.char((string.byte(c) - string.byte(\"a\") + 26) % 26\
    \ + string.byte(\"a\"))\n    end)\n    new_s = new_s .. new_word .. \" \"\n  end\n\
    \  return new_s\nend", "  local words = s:gmatch(\"([^ ]+)\") -- Split string\
    \ into words\n  local result = \"\" -- Initialize result string\n  for _, word\
    \ in pairs(words) do\n    local new_word = word:gsub(\"%W\", function (c) -- Replace\
    \ each word with its ascii value\n      return string.char(tonumber(c))\n    end)\n\
    \    result = result .. new_word .. \" \"\n  end\n  return result:sub(1, #result)\
    \ -- Remove last space\nend", "  -- Write your code here\n  local new_s = \"\"\
    \n  local words = s:gmatch(\"[%w-]+\")\n  for i = 1, #words do\n    local word\
    \ = words[i]\n    local new_word = word\n    local j = 1\n    while j <= #word\
    \ do\n      local c = string.byte(word:sub(1, j))\n      if c > 127 then\n   \
    \     local new_c = string.byte(new_word:sub(1, j))\n        new_word:sub(1, j)\
    \ = string.char(new_c - 1)\n      else\n        local new_c = string.byte(new_word:sub(1,\
    \ j))\n        new_word:sub(1, j) = string.char(new_c + 1)\n      end\n      j\
    \ = j + 1\n    end\n    new_s = new_s .. new_word .. \" \"\n  end\n  return new_s\n\
    end", "  -- Write your code here.\n  return s\nend", "  -- Write your code here\n\
    \  local words = s:gmatch(\"([^ ]+)\") -- split string into words\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words+1] = words[i] --\
    \ insert each word into sorted list\n  end\n  sorted_words[#sorted_words+1] =\
    \ \"\" -- append a blank word at the end\n  -- return sorted_words\n  return table.concat(sorted_words,\
    \ \"-\")\nend", "  -- Write your code here.\n  -- return s\nend", "  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if char == \" \" then\n      new_s = new_s .. \" \"\n    else\n      new_s\
    \ = new_s .. string.char(string.byte(char) + 1)\n    end\n  end\n  return new_s\n\
    end", "  -- Write your code here\n  -- return \"antishuffle\"\nend", "  -- Write\
    \ your code here.\n  return s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      new_s\
    \ = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i)\
    \ .. \" \"\n    end\n  end\n  return new_s\nend", "  -- Write your code here.\n\
    \  return s\nend", "  -- Write your code here.\n  return s\nend", "    local new_s\
    \ = \"\"\n    local words = s:gmatch(\"([^ ]+)\")\n    for _, word in pairs(words)\
    \ do\n        local new_word = word\n        for i = 1, #word do\n           \
    \ local c = string.sub(word, 1, i)\n            local n = string.byte(c)\n   \
    \         new_word = new_word .. string.char(n + #new_word)\n        end\n   \
    \     new_s = new_s .. new_word\n    end\n    return new_s\nend", "  -- Write\
    \ your code here.\n  return s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if char\
    \ == \" \" then\n      new_s = new_s .. char\n    else\n      new_s = new_s ..\
    \ string.char(string.byte(char) + 1)\n    end\n  end\n  return new_s\nend", " \
    \   local words = string.gmatch(s, \"([^ ]+)\") -- Split string into words\n \
    \   local new_words = {}\n    for _, word in pairs(words) do\n        table.insert(new_words,\
    \ string.char(string.byte(word)))\n    end\n    return table.concat(new_words,\
    \ \" \")\nend", "  -- Write your solution here\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  local words = s:gmatch(\"[%w]+\")\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    local j = 1\n\
    \    while j <= #word do\n      local c = word[j]\n      local c_ascii = string.byte(c)\n\
    \      if c_ascii < 65 then\n        -- If the character is lower case then swap\
    \ it with upper case\n        if c_ascii < 97 then\n          new_word = new_word\
    \ .. string.char(97 + c_ascii - 65)\n        else\n          new_word = new_word\
    \ .. string.char(c_ascii - 97)\n        end\n      else\n        -- If the character\
    \ is upper case then swap it with lower case\n        if c_ascii < 123 then\n\
    \          new_word = new_word .. string.char(123 + c_ascii - 64)\n        else\n\
    \          new_word = new_word .. string.char(c_ascii - 123)\n        end\n  \
    \    end\n      j = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return\
    \ new_s\nend", "  -- Write your code here\n  return s\nend", "  -- Write your\
    \ code here\n  local new_s = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      new_s = new_s .. \" \"\n    else\n      new_s = new_s ..\
    \ string.sub(s,i,i)\n    end\n  end\n  return new_s\nend", "  -- Write your code\
    \ here\n  local s = s:gsub(\"%w+\", function (w)\n    local s = \"\"\n    for\
    \ i = 1, #w do\n      s = s .. string.char(string.byte(w, i) - i)\n    end\n \
    \   return s\n  end)\n  s = s:gsub(\"%S+\", function (w)\n    local s = \"\"\n\
    \    for i = 1, #w do\n      s = s .. string.char(string.byte(w, i) + i)\n   \
    \ end\n    return s\n  end)\n  return s\nend", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ char == \" \" then\n      new_s = new_s .. char\n    else\n      new_s = new_s\
    \ .. string.char(string.byte(char) - 64)\n    end\n  end\n  return new_s\nend",
  "  local new_s = \"\"\n  for i = 1, #s do\n    local word = s:sub(i,i)\n    local\
    \ new_word = \"\"\n    for j = 1, #word do\n      local c = word:sub(j,j)\n  \
    \    local ascii = string.byte(c)\n      local new_c = string.char(ascii - 1)\n\
    \      new_word = new_word .. new_c\n    end\n    new_s = new_s .. new_word\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  local new_s = \"\"\
    \n  for i = 1, #s do\n    local word = s:sub(i,i)\n    local new_word = word\n\
    \    local j = 1\n    while j <= #word do\n      local c = word:sub(j,j)\n   \
    \   local ascii = string.byte(c)\n      if ascii < 97 then\n        ascii = ascii\
    \ + 26\n      else\n        ascii = ascii - 26\n      end\n      new_word = new_word\
    \ .. string.char(ascii)\n      j = j + 1\n    end\n    new_s = new_s .. new_word\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  -- return \"antishuffle\"\
    \nend", "  -- Write your code here\n  -- return \"antishuffle\"\nend", "  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local word = s:sub(i,i)\n\
    \    if word ~= \"\" then\n      new_s = new_s .. word:gsub(\"%w+\", function(c)\
    \ return c:lower() end)\n    end\n  end\n  return new_s\nend", "  -- Write your\
    \ code here\n  -- return \"antishuffle\"\nend", "  -- Write your code here\n \
    \ local new_s = \"\"\n  local words = s:gmatch(\"[%w]+\")\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    local j = 1\n\
    \    while j <= #word do\n      local c = word[j]\n      if c ~= \" \" then\n\
    \        new_word = new_word .. c\n      else\n        new_word = new_word ..\
    \ word[j + 1]\n      end\n      j = j + 1\n    end\n    new_s = new_s .. new_word\n\
    \  end\n  return new_s\nend", "    local new_s = \"\"\n    local words = s:gmatch(\"\
    ([^ ]+)\") -- get all words in the sentence\n    for _, word in ipairs(words)\
    \ do\n        local new_word = word:gsub(\"%W\", function (c) \n            return\
    \ string.char((string.byte(c) - string.byte(\"a\"))) \n        end) -- replace\
    \ each word with its ascii value\n        new_s = new_s .. new_word .. \" \"\n\
    \    end\n    return new_s\nend", "  local words = s:gmatch(\"([^ ]+)\") -- Split\
    \ string into words\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 97 then\n\
    \        ascii = ascii + 26\n      elseif ascii < 123 then\n        ascii = ascii\
    \ - 26\n      else\n        ascii = ascii - 32\n      end\n      new_word = new_word\
    \ .. string.char(ascii)\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, \" \")\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      new_s\
    \ = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i)\
    \ .. \" \"\n    end\n  end\n  return new_s\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if char == \" \" then\n      new_s = new_s .. char\n    else\n      new_s\
    \ = new_s .. string.char(string.byte(char) + 1)\n    end\n  end\n  return new_s\n\
    end", "    local words = s:gmatch(\"[^ ]+\")\n    local new_words = {}\n    for\
    \ _, word in pairs(words) do\n        local new_word = \"\"\n        for i = 1,\
    \ #word do\n            local c = word[i]\n            local ascii = string.byte(c)\n\
    \            if ascii < 65 then\n                new_word = new_word .. string.char(ascii\
    \ + 32)\n            elseif ascii < 91 then\n                new_word = new_word\
    \ .. string.char(ascii - 32)\n            else\n                new_word = new_word\
    \ .. c\n            end\n        end\n        new_words[#new_words + 1] = new_word\n\
    \    end\n    return table.concat(new_words, \" \")\nend", "  -- Write your code\
    \ here\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo Wrdl\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hllo World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello Wrdl\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n \
    \ -- Example: anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example:\
    \ anti_shuffle(\"Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"\
    Hello World\") --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\"\
    ) --> \"Hello World\"\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hello\
    \ World\"\n  -- Example: anti", "  local words = string.gmatch(s, \"([^ ]+)\"\
    ) -- split on space\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = \"\"\n    for j = 1, #word do -- loop\
    \ through each character in word\n      local c = word[j]\n      local ascii =\
    \ string.byte(c) -- get ascii value of character\n      if ascii < 97 then --\
    \ if ascii value is less than 97\n        new_word = new_word .. string.char(97\
    \ + ascii - 1) -- replace with ascii value\n      else -- ascii value is greater\
    \ than 97\n        new_word = new_word .. string.char(ascii - 97) -- replace with\
    \ ascii value\n      end\n    end\n    new_words[i] = new_word -- add new word\
    \ to new_words\n  end\n  return table.concat(new_words) -- return new string\n\
    end", "  -- Write your code here\n  local result = \"\"\n  for i = 1, #s do\n\
    \    local word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word:sub(j,j))\n      if ascii < 65 then\n\
    \        new_word = new_word .. string.char(97 + ascii)\n      elseif ascii <\
    \ 91 then\n        new_word = new_word .. string.char(ascii - 65)\n      else\n\
    \        new_word = new_word .. string.char(ascii - 90)\n      end\n    end\n\
    \    result = result .. new_word\n  end\n  return result\nend", "  -- Write your\
    \ code here\n  -- return \"antishuffle\"\nend", "  -- Write your code here\n \
    \ return s\nend", "  -- Write your code here\n  -- return string\nend", "  --\
    \ Write your code here\n  -- Example: anti_shuffle(\"Hello World\") --> \"Hllo\
    \ Wrdl\"\n  -- Example: anti_shuffle(\"Hello World!\") --> \"Hllo Wrdl!\"\n  --\
    \ Example: anti_shuffle(\"Hello World!!\") --> \"Hllo Wrdl!!\"\n  -- Example:\
    \ anti_shuffle(\"Hello World!!!\") --> \"Hllo Wrdl!!!\"\n  -- Example: anti_shuffle(\"\
    Hello World!!!!\") --> \"Hllo Wrdl!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!\"\
    ) --> \"Hllo Wrdl!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrdl!!!!!!!\"\n  -- Example: anti_shuffle(\"Hello World!!!!!!!\") -->\
    \ \"Hllo Wrd", "  -- Write your code here\n  -- return s\nend", "  -- Write your\
    \ code here.\n  return s\nend", "  -- Write your solution here\nend", "  -- Write\
    \ your code here\n  -- return string\nend", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c\
    \ ~= \" \" then\n      new_s = new_s .. c\n    else\n      new_s = new_s .. \"\
    \ \"\n    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local\
    \ new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(c,\
    \ \"[%a]\") then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s\
    \ = new_s .. c\n    end\n  end\n  return new_s\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n \
    \   if c ~= \" \" then\n      new_s = new_s .. c\n    else\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    end\n  end\n  return new_s\nend", "  -- Write your\
    \ code here\n  local new_s = \"\"\n  local words = s:gmatch(\"[%w-]+\")\n  for\
    \ _, word in pairs(words) do\n    local new_word = word\n    local new_word_len\
    \ = 0\n    for i = 1, #word do\n      local c = string.byte(word[i])\n      if\
    \ c > 127 then\n        c = string.byte(string.sub(word, 1, i) + string.sub(word,\
    \ i + 1))\n      end\n      new_word = new_word .. string.char(c)\n      new_word_len\
    \ = new_word_len + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return\
    \ new_s\nend", "  -- Write your solution here\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if char == \" \" then\n      new_s = new_s .. char\n    else\n      new_s\
    \ = new_s .. string.char(string.byte(char) + 1)\n    end\n  end\n  return new_s\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   local char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s\
    \ .. \" \"\n    else\n      new_s = new_s .. string.char(string.byte(char) - 32)\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    local ascii\
    \ = string.byte(char) -- ascii value of char\n    if ascii < 32 then\n      new_s\
    \ = new_s .. char\n    else\n      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i)\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    local ascii\
    \ = string.byte(char) -- ascii value of char\n    if ascii < 97 then\n      new_s\
    \ = new_s .. string.sub(s,i,i)\n    elseif ascii < 123 then\n      new_s = new_s\
    \ .. string.sub(s,i,i-1) .. string.sub(s,i+1,i)\n    else\n      new_s = new_s\
    \ .. string.sub(s,i,i-1) .. string.sub(s,i+1,i-1) .. string.sub(s,i+2,i)\n   \
    \ end\n  end\n  return new_s\nend", "  -- Write your code here.\nend", "  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= \" \" then\n      new_s = new_s .. c\n    end\n  end\n  return new_s\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   local char = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s\
    \ .. char\n    else\n      new_s = new_s .. string.char(math.abs(string.byte(char)))\n\
    \    end\n  end\n  return new_s\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    local word = s:sub(i,i)\n    local new_word\
    \ = \"\"\n    for j = 1, #word do\n      local c = word:sub(j,j)\n      local\
    \ ascii = string.byte(c)\n      if ascii < 97 then\n        ascii = ascii + 26\n\
    \      elseif ascii < 123 then\n        ascii = ascii - 26\n      else\n     \
    \   ascii = ascii - 32\n      end\n      new_word = new_word .. string.char(ascii)\n\
    \    end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend", "  -- Write\
    \ your code here.\n  local new_s = \"\"\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s .. char\n\
    \    else\n      new_s = new_s .. string.char(string.byte(char) + 64)\n    end\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  -- return \"antishuffle\"\
    \nend", "  -- Write your code here\n  local result = \"\"\n  for i = 1, #s do\n\
    \    local word = s:sub(i,i)\n    local new_word = \"\"\n    for j = 1, #word\
    \ do\n      local c = word:sub(j,j)\n      local ascii = string.byte(c)\n    \
    \  local new_c = string.char(ascii-32)\n      new_word = new_word .. new_c\n \
    \   end\n    result = result .. new_word\n  end\n  return result\nend", "  --\
    \ Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c\
    \ = string.sub(s,i,i)\n    if string.find(c, \"[%a]\") then\n      new_s = new_s\
    \ .. string.sub(s,i,i)\n    else\n      new_s = new_s .. c\n    end\n  end\n \
    \ return new_s\nend", "  -- Write your code here\n  local words = s:gmatch(\"\
    [^ ]+\")\n  local new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local new_word = word\n    local j = 1\n    while j <= #word do\n      local\
    \ c = string.byte(word:sub(j, j))\n      if c > 127 then\n        local new_c\
    \ = string.byte(new_word:sub(j, j))\n        new_word:insert(new_c - 32)\n   \
    \   else\n        new_word:insert(c)\n      end\n      j = j + 1\n    end\n  \
    \  new_words[i] = new_word\n  end\n  return table.concat(new_words, \"_\")\nend",
  "  -- Write your code here\n  local words = {}\n  local spaces = {}\n  for i = 1,\
    \ #s do\n    if s[i] ~= ' ' then\n      table.insert(words, s[i])\n      table.insert(spaces,\
    \ ' ') -- insert space after each word\n    else\n      table.insert(words, s[i])\n\
    \      table.insert(spaces, ' ') -- insert space after each word\n    end\n  end\n\
    \  table.sort(words)\n  table.sort(spaces)\n  local new_s = ''\n  for i = 1, #words\
    \ do\n    new_s = new_s .. words[i] .. spaces[i]\n  end\n  return new_s\nend",
  "    local words = s:gmatch(\"([^ ]+)\") -- Split string into words\n    local new_words\
    \ = {}\n    for _, word in pairs(words) do\n        local new_word = word\n  \
    \      for i = 1, #word do\n            local c = string.sub(word, i, i)\n   \
    \         local ascii = string.byte(c)\n            if ascii < 97 then\n     \
    \           new_word = new_word .. string.sub(word, i - 1, i)\n            end\n\
    \        end\n        new_words[#new_words + 1] = new_word\n    end\n    return\
    \ table.concat(new_words, \" \")\nend", "  -- Write your code here.\n  -- return\
    \ s\nend", "    local words = string.gmatch(s, \"([^ ]+)\") -- Split string into\
    \ words\n    local new_words = {}\n    local new_word = \"\"\n    local i = 0\n\
    \    while i < #words do\n        -- Find a word that has all its characters arranged\
    \ in ascending order\n        local word = words[i]\n        local j = 1\n   \
    \     while j < #word and word[j] < word[j+1] do\n            j = j + 1\n    \
    \    end\n        -- If word has all its characters arranged in ascending order,\n\
    \        -- append it to new_words and increment i\n        if j == #word then\n\
    \            new_words[#new_words+1] = word\n            i = i + 1\n        else\n\
    \            -- Otherwise, append the word and increment i\n            new_word\
    \ = new_word .. word[j]\n            i = i + 1\n        end\n    end\n    return\
    \ new_word\nend", "  -- Write your code here\n  local new_s = \"\"\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      new_s = new_s .. \"\
    \ \"\n    else\n      new_s = new_s .. string.sub(s,i,i)\n    end\n  end\n  return\
    \ new_s\nend", "  -- Write your code here.\n  return s\nend", "  -- Write your\
    \ code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= \" \" then\n      new_s = new_s .. c\n    end\n  end\n  return new_s\n\
    end", "    local new_s = \"\"\n    local words = string.gmatch(s, \"([^ ]+)\"\
    )\n    for _, word in pairs(words) do\n        local new_word = word\n       \
    \ local new_words = {}\n        for i = 1, #word do\n            local c = string.byte(word[i])\n\
    \            new_words[i] = string.char(c > 127 ? 255 : c - 32)\n        end\n\
    \        new_word = table.concat(new_words, \"-\")\n        new_s = new_s .. new_word\n\
    \    end\n    return new_s\nend", "  -- Write your code here\n  local words =\
    \ string.gmatch(s, '[%w\\s]+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ - 97) + 64)\n    end\n    new_words[#new_words + 1] = new_word\n  end\n  return\
    \ table.concat(new_words, ' ')\nend", "  -- Write your code here\n  local new_s\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      new_s\
    \ = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.sub(s,i,i)\
    \ + string.sub(s,i+1,i+1)\n    end\n  end\n  return new_s\nend", "  -- Write your\
    \ code here\n  local words = string.gmatch(s, \"([^ ]+)\")\n  local new_words\
    \ = {}\n  for _, word in pairs(words) do\n    local new_word = word\n    local\
    \ new_word_len = 0\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      new_word = new_word .. string.char(c - 97)\n      new_word_len = new_word_len\
    \ + 1\n    end\n    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ \" \")\nend", "  -- Write your code here.\n  -- return s\nend", "  -- Write\
    \ your code here\n  local new_s = \"\"\n  local words = s:gmatch(\"([^ ]+)\")\n\
    \  for i = 1, #words do\n    local word = words[i]\n    local new_word = word\n\
    \    local j = 1\n    while j <= #word do\n      local c = string.byte(word:sub(j,j+1))\n\
    \      if c > 127 then\n        local new_c = string.byte(new_word:sub(j,j+1))\n\
    \        if new_c > 127 then\n          new_c = new_c - 256\n        end\n   \
    \     new_word = new_word .. string.char(new_c)\n      else\n        new_word\
    \ = new_word .. word:sub(j,j+1)\n      end\n      j = j + 1\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend", "  -- Write your code here\n\
    \  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n \
    \   if string.find(c, \"\\n\") then\n      new_s = new_s .. c\n    else\n    \
    \  new_s = new_s .. string.char(string.byte(c) - 32)\n    end\n  end\n  return\
    \ new_s\nend", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1,\
    \ #s do\n    local char = string.sub(s,i,i)\n    if char == \" \" then\n     \
    \ new_s = new_s .. char\n    else\n      new_s = new_s .. string.char(string.byte(char)\
    \ - 32)\n    end\n  end\n  return new_s\nend", "  -- Write your code here.\n \
    \ return s\nend", "  local new_s = \"\"\n  for w in s:gmatch(\"([^ ]+)\") do\n\
    \    local new_w = \"\"\n    for c in w:gmatch(\"([%a]+)\") do\n      local new_c\
    \ = c:lower()\n      new_c = string.char(tonumber(new_c) + 1)\n      new_w = new_w\
    \ .. new_c\n    end\n    new_s = new_s .. new_w .. \" \"\n  end\n  return new_s\n\
    end", "  -- Write your code here\n  local new_s = \"\"\n  for i = 1, #s do\n \
    \   local c = string.sub(s,i,i)\n    local j = i\n    while j do\n      local\
    \ k = j - 1\n      if string.sub(s,j,j) == c then\n        j = k\n      else\n\
    \        break\n      end\n    end\n    table.insert(new_s,string.sub(s,i,j))\n\
    \  end\n  return new_s\nend", "  -- Write your code here\n  local words = string.gmatch(s,\
    \ '([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local word =\
    \ words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local c =\
    \ string.byte(word[j])\n      if c > 127 then\n        c = string.byte(string.sub(word,\
    \ 1, j))\n      end\n      new_word = new_word .. string.char(c)\n    end\n  \
    \  new_words[i] = new_word\n  end\n  return table.concat(new_words, '')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
