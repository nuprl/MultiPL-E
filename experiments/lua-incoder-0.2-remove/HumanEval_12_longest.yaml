name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] ~= longest then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  local longest_len = -1\n  local longest_str = nil\n\
    \  for _, str in ipairs(strings) do\n    local len = #str\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_str = str\n    end\n  end\n  return\
    \ longest_str\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #longest < #strings[i]\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == strings[#strings] then\n     \
    \ return strings[i]\n    end\n    if #longest < #strings[i] then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    local len = strings[i]:len()\n    if len > longest_len then\n      longest_len\
    \ = len\n    end\n  end\n  return longest_len\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #longest < #strings[i] then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "    local longest, longestLength = nil, 0\n    for _, str in ipairs(strings)\
    \ do\n        local length = #str\n        if length > longestLength then\n  \
    \          longest, longestLength = str, length\n        end\n    end\n    return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return longest_len\n\
    end", "    local longest, longestLength = nil, 0\n    for _, str in ipairs(strings)\
    \ do\n        if str and str:len() > longestLength then\n            longest,\
    \ longestLength = str, str:len()\n        end\n    end\n    return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end", "  if #strings == 0 then\n   \
    \ return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_string = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest_string then\n      longest_string = strings[i]\n\
    \    else\n      return longest_string\n    end\n  end\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end",
  "  local longest_len = -1\n  local longest_str = \"\"\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest_len =\
    \ len\n      longest_str = str\n    end\n  end\n  return longest_str\nend", " \
    \ if #strings == 0 then return nil end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return longest_len\nend", "  if #strings\
    \ == 0 then return nil end\n  local longest, longestLength = nil, 0\n  for i =\
    \ 1, #strings do\n    local length = strings:len() - i\n    if length > longestLength\
    \ then\n      longest, longestLength = strings[i], length\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end", "  local longest_len = -1\n  local longest_string\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest_len =\
    \ len\n      longest_string = str\n    end\n  end\n  return longest_string\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return longest_len\nend", "    local longest_len\
    \ = -1\n    local longest_string\n    for _, string in ipairs(strings) do\n  \
    \      local len = #string\n        if len > longest_len then\n            longest_len\
    \ = len\n            longest_string = string\n        end\n    end\n    return\
    \ longest_string\nend", "    local longest_len = -1\n    local longest_string\n\
    \    for _, string in ipairs(strings) do\n        local len = #string\n      \
    \  if len > longest_len then\n            longest_len = len\n            longest_string\
    \ = string\n        end\n    end\n    return longest_string\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      return strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then return nil end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  local longest_len = -1\n  local longest_str = \"\"\n  for i = 1, #strings\
    \ do\n    local len = #strings[i]\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_str = strings[i]\n    end\n  end\n  return longest_str\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then return nil end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n    end\n  end\n \
    \ return longest_len\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n    end\n  end\n \
    \ return longest_len\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      return strings[i]\n    end\n    longest\
    \ = longest .. strings[i]\n  end\n  return longest\nend", "    local longest =\
    \ nil\n    local longestLength = 0\n    for _, string in ipairs(strings) do\n\
    \        local length = #string\n        if length > longestLength then\n    \
    \        longest = string\n            longestLength = length\n        end\n \
    \   end\n    return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_string = strings[1]\n  for i = 2, #strings do\n    if strings[i] ==\
    \ longest_string then\n      return longest_string\n    end\n    longest_string\
    \ = strings[i]\n  end\n  return longest_string\nend", "  if #strings == 0 then\
    \ return nil end\n  local longest = strings[1]\n  for i = 2, #strings do\n   \
    \ if #strings[i] == #longest then\n      longest = strings[i]\n    else\n    \
    \  return longest\n    end\n  end\n  return longest\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest < #strings[i]\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest_len = -1\n  local\
    \ longest_string = nil\n  for i = 1, #strings do\n    local len = string.len(strings[i])\n\
    \    if len > longest_len then\n      longest_len = len\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  local longest_len = -1\n  local longest_string\n\
    \  for _, string in ipairs(strings) do\n    local len = #string\n    if len >\
    \ longest_len then\n      longest_len = len\n      longest_string = string\n \
    \   end\n  end\n  return longest_string\nend", "  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] == longest_string then\n      longest_string\
    \ = strings[i]\n    else\n      return longest_string\n    end\n  end\nend", " \
    \ local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    if str and str:len() > longestLength then\n      longest, longestLength =\
    \ str, str:len()\n    end\n  end\n  return longest\nend", "  if #strings == 0\
    \ then return nil end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n   \
    \ local len = strings[i]:len()\n    if len > longest_len then\n      longest_len\
    \ = len\n    end\n  end\n  return longest_len\nend", "  if #strings == 0 then\
    \ return end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = -1\n  local longest_str = nil\n  for i = 1, #strings do\n    local\
    \ len = string.len(strings[i])\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_str = strings[i]\n    end\n  end\n  return longest_str\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then return nil end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_string = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest_string then\n      longest_string = strings[i]\n\
    \    else\n      return longest_string\n    end\n  end\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      return strings[i]\n    end\n  \
    \  longest = longest .. strings[i]\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_string = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest_string then\n      longest_string = strings[i]\n\
    \    else\n      return longest_string\n    end\n  end\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n  for\
    \ i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return longest_len\nend", "  if #strings\
    \ == 0 then return nil end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #longest < #strings[i] then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then return end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = strings[1]:len()\n  local longest_string = strings[1]\n  for i\
    \ = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n      longest_string = strings[i]\n    end\n  end\n  return\
    \ longest_string\nend", "  if #strings == 0 then return nil end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_len = -1\n  local longest_str\
    \ = nil\n  for i = 1, #strings do\n    local len = string.len(strings[i])\n  \
    \  if len > longest_len then\n      longest_len = len\n      longest_str = strings[i]\n\
    \    end\n  end\n  return longest_str\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #longest < #strings[i] then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "    local longest_len = -1\n    local\
    \ longest_str = \"\"\n    for _, str in ipairs(strings) do\n        local len\
    \ = #str\n        if len > longest_len then\n            longest_len = len\n \
    \           longest_str = str\n        end\n    end\n    return longest_str\n\
    end", "  local longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    if string.len > longest_len then\n      longest_len = string.len\n \
    \     longest_string = string\n    end\n  end\n  return longest_string\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "    local longest = strings[1]\n\
    \    for i = 2, #strings do\n        if strings[i] == strings[#strings] then\n\
    \            longest = strings[i]\n        else\n            return longest\n\
    \        end\n    end\n    return longest\nend", "  if #strings == 0 then\n  \
    \  return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return longest_len\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      return longest\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then return nil end\n  local longest = strings[1]\n  for i =\
    \ 2, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end", "  if #strings == 0 then return nil end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      return longest\n    end\n    longest = strings[i]\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end", "    local longest_len = -1\n    local longest_str = \"\"\n    for _, str\
    \ in ipairs(strings) do\n        local len = #str\n        if len > longest_len\
    \ then\n            longest_len = len\n            longest_str = str\n       \
    \ end\n    end\n    return longest_str\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #longest < #strings[i] then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest\
    \ < #strings[i] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return longest_len\nend", "  if #strings == 0 then return nil\
    \ end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then return nil end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end", "  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[#strings] then\n      longest = strings[i]\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      return longest\n    end\n    longest = strings[i]\n \
    \ end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_length = strings[1]:len()\n  for i = 2, #strings do\n    local\
    \ length = strings[i]:len()\n    if length > longest_length then\n      longest_length\
    \ = length\n    end\n  end\n  return longest_length\nend", "    local longest\
    \ = nil\n    local longest_length = nil\n    for _, string in ipairs(strings)\
    \ do\n        local length = #string\n        if length > longest_length then\n\
    \            longest = string\n            longest_length = length\n        end\n\
    \    end\n    return longest or strings[1]\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then return nil end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return longest_len\nend", " \
    \ local longest, longestLength, longestIndex = 0, 0, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    local length = #str\n\
    \    if length > longestLength then\n      longest, longestLength, longestIndex\
    \ = str, length, longestIndex + 1\n    end\n  end\n  return longest, longestLength,\
    \ longestIndex\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest_len = -1\n  local\
    \ longest_str = nil\n  for i = 1, #strings do\n    local len = string.len(strings[i])\n\
    \    if len > longest_len then\n      longest_len = len\n      longest_str = strings[i]\n\
    \    end\n  end\n  return longest_str\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end", "  if #strings == 0 then return nil end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_length = strings[1]:len()\n\
    \  local longest_string = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_length then\n      longest_length = strings[i]:len()\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend", "  if #strings\
    \ == 0 then return nil end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then return nil end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  local longest_string = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "    local longest, longestLength = nil,\
    \ 0\n    for _, s in ipairs(strings) do\n        local length = #s\n        if\
    \ length > longestLength then\n            longest, longestLength = s, length\n\
    \        end\n    end\n    return longest\nend", "  if #strings == 0 then\n  \
    \  return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return longest_len\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "    local longest_len = -1\n    local longest_str = \"\"\n    for _, str\
    \ in ipairs(strings) do\n        local len = #str\n        if len > longest_len\
    \ then\n            longest_len = len\n            longest_str = str\n       \
    \ end\n    end\n    return longest_str\nend", "    local longest_len = -1\n  \
    \  local longest_string\n    for _, string in ipairs(strings) do\n        local\
    \ len = #string\n        if len > longest_len then\n            longest_len =\
    \ len\n            longest_string = string\n        end\n    end\n    return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  local longest_len = -1\n\
    \  local longest_string", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n    end\n  end\n \
    \ return longest_len\nend", "    local longest, longest_len = nil, 0\n    for\
    \ _, str in ipairs(strings) do\n        if longest_len > #str then\n         \
    \   longest, longest_len = str, #str\n        end\n    end\n    return longest,\
    \ longest_len\nend", "  local longest_len = -1\n  local longest_str = \"\"\n \
    \ for _, str in ipairs(strings) do\n    local len = #str\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_str = str\n    end\n  end\n  return\
    \ longest_str\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\
    \ return nil end\n  local longest, longestLength = strings[1], #strings[1]\n \
    \ for i = 2, #strings do\n    if #strings[i] == longestLength then\n      longest,\
    \ longestLength = strings[i], #strings[i]\n    end\n  end\n  return longest\n\
    end", "    local longest_len = -1\n    local longest_string\n    for _, string\
    \ in ipairs(strings) do\n        local len = #string\n        if len > longest_len\
    \ then\n            longest_len = len\n            longest_string = string\n \
    \       end\n    end\n    return longest_string\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = -1\n  local longest_str = nil\n\
    \  for i = 1, #strings do\n    local len = string.len(strings[i])\n    if len\
    \ > longest_len then\n      longest_len = len\n      longest_str = strings[i]\n\
    \    end\n  end\n  return longest_str\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest\
    \ < #strings[i] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "    local longest = nil\n    local\
    \ longestLength = 0\n    for _, str in ipairs(strings) do\n        local length\
    \ = #str\n        if length > longestLength then\n            longest = str\n\
    \            longestLength = length\n        end\n    end\n    return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = -1\n  local longest_str = nil\n  for i = 1, #strings do\n    local\
    \ len = string.len(strings[i])\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_str = strings[i]\n    end\n  end\n  return longest_str\n\
    end", "  local longest_len = -1\n  local longest_str = \"\"\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest_len =\
    \ len\n      longest_str = str\n    end\n  end\n  return longest_str\nend", " \
    \   local longest, longestLength = nil, 0\n    for _, str in ipairs(strings) do\n\
    \        if str and #str > longestLength then\n            longest, longestLength\
    \ = str, #str\n        end\n    end\n    return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == strings[#strings] then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[i] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      return longest\n    end\n    longest\
    \ = strings[i]\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then return nil end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then return nil end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return longest_len\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end", "    local longest_len = -1\n    local longest_str\
    \ = \"\"\n    for _, str in ipairs(strings) do\n        local len = #str\n   \
    \     if len > longest_len then\n            longest_len = len\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  local longest_len = -1\n  local\
    \ longest_str\n  for _, str in ipairs(strings) do\n    local len = #str\n    if\
    \ len > longest_len then\n      longest_len = len\n      longest_str = str\n \
    \   end\n  end\n  return longest_str\nend", "  if #strings == 0 then return nil\
    \ end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return longest_len\nend", " \
    \ if #strings == 0 then\n    return nil\n  end", "  if #strings == 0 then return\
    \ end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then return strings[i] end\n    longest = strings[i]\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n   \
    \ if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return longest_len\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "    local longest_len = -1\n    local longest_str = \"\
    \"\n    for _, str in ipairs(strings) do\n        local len = #str\n        if\
    \ len > longest_len then\n            longest_len = len\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n  for\
    \ i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return longest_len\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_string = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest_string then\n      longest_string = strings[i]\n\
    \    else\n      return longest_string\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] ~= longest then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return longest_len\n\
    end", "  local longest = nil\n  local longestLength = 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest\
    \ = str\n      longestLength = length\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[#strings] then\n      return strings[i]\n    end\n    if #longest\
    \ < #strings[i] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  local longest = nil\n  for _, s in ipairs(strings) do\n    if longest\
    \ == nil or #s > #longest then\n      longest = s\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then return nil end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "    local\
    \ longest = nil\n    local longest_len = -1\n    for _, string in ipairs(strings)\
    \ do\n        local len = #string\n        if len > longest_len then\n       \
    \     longest = string\n            longest_len = len\n        end\n    end\n\
    \    return longest\nend", "    local longest, longestLength = nil, 0\n    for\
    \ _, str in ipairs(strings) do\n        if str == \"\" then break end\n      \
    \  local length = #str\n        if length > longestLength then\n            longest,\
    \ longestLength = str, length\n        end\n    end\n    return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then return nil end\n  local longest_len = strings[1]:len()\n  local longest_string\
    \ = strings[1]\n  for i = 2, #strings do\n    local len = strings[i]:len()\n \
    \   if len > longest_len then\n      longest_len = len\n      longest_string =\
    \ strings[i]\n    end\n  end\n  return longest_string\nend", "  if #strings ==\
    \ 0 then return nil end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "    local\
    \ longest = nil\n    local longestLength = 0\n    for _, str in ipairs(strings)\
    \ do\n        local length = #str\n        if length > longestLength then\n  \
    \          longest = str\n            longestLength = length\n        end\n  \
    \  end\n    return longest\nend", "  if #strings == 0 then\n    return nil\n \
    \ end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then return nil end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_len = -1\n  local longest_str\
    \ = strings[1]\n  for i = 2, #strings do\n    local len = string.len(strings[i])\n\
    \    if len > longest_len then\n      longest_len = len\n      longest_str = strings[i]\n\
    \    end\n  end\n  return longest_str\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      return strings[i]\n    end\n  end\n  return longest\nend", "    local longest_len\
    \ = -1\n    local longest_string\n    for _, string in ipairs(strings) do\n  \
    \      local len = #string\n        if len > longest_len then\n            longest_len\
    \ = len\n            longest_string = string\n        end\n    end\n    return\
    \ longest_string\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
