language: lua
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab\
    \ > bc and (ab == bc or ac == 90)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x5ngono.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5x5ngono.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcvpr3yh.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkcvpr3yh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo66t00zt.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpo66t00zt.lua:9: in local 'candidate'\n\t/tmp/tmpo66t00zt.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check if any of\
    \ a, b, c are negative\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are equal\n  if a == b and a == c then\n\
    \    return true\n  end\n  -- Check if any of a, b, c are 90 degree\n  if math.abs(math.atan2(b,\
    \ a)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 180 degree\n  if math.abs(math.atan2(c, b)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 270 degree\n  if math.abs(math.atan2(a,\
    \ c)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 360 degree\n  if math.abs(math.atan2(b, a)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 180 degree\n  if math.abs(math.atan2(c,\
    \ b)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 90 degree\n  if math.abs(math.atan2(a, c)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 270 degree\n  if math.abs(math.atan2(b,\
    \ a)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 360 degree\n  if math.abs(math.atan2(c, b)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 180 degree\n  if math.abs(math.atan2(a,\
    \ c)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 90 degree\n  if math.abs(math.atan2(b, a)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 270 degree\n  if math.abs(math.atan2(c,\
    \ b)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 360 degree\n  if math.abs(math.atan2(a, c)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 180 degree\n  if math.abs(math.atan2(b,\
    \ a)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 90 degree\n  if math.abs(math.atan2(c, b)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 270 degree\n  if math.abs(math.atan2(a,\
    \ c)) > math.pi then\n    return false\n  end\n  \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpalsk29mu.lua:93: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpji9sr964.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcs4rblp5.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local bx = b[1]\n\
    \   local by = b[2]\n   local bz = b[3]\n   local ax = a[1]\n   local ay = a[2]\n\
    \   local az = a[3]\n   local cx = c[1]\n   local cy = c[2]\n   local cz = c[3]\n\
    \   local det = ax*by + ay*bz + az*cx\n   if det < 0 then\n      return false\n\
    \   elseif det > 0 then\n      return true\n   else\n      return ((by - cy) *\
    \ (cx - az) + (bz - ax) * (cy - ay)) < 0\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkomyrv_z.lua:7:\
    \ attempt to index a number value (local 'b')\nstack traceback:\n\t/tmp/tmpkomyrv_z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkomyrv_z.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   if ab\
    \ > bc then\n      return false\n   elseif ab > ac then\n      return true\n \
    \  elseif bc > ac then\n      return false\n   else\n      return true\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcer6gkh8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcer6gkh8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesf2xh2o.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpesf2xh2o.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or math.abs(math.atan2(b,a)) < math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz56td0ml.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz56td0ml.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9tx732t.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf9tx732t.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvq3ds3ey.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local a, b, c =\
    \ tonumber(a), tonumber(b), tonumber(c)\n    local ab, bc, cb = a - b, b - c,\
    \ c - b\n    local ab_sq = ab * ab\n    local bc_sq = bc * bc \n    local cb_sq\
    \ = cb * cb\n    local det = ab_sq + bc_sq - cb_sq\n    return det > 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzg3r68w.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuzg3r68w.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local ac = math.abs(c - a)\n    local abc = math.abs(b - c)\n    local\
    \ bcd = math.abs(c - b)\n    local det = ab * bcd - abc * ab\n    return det <\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ju_jo59.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ju_jo59.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a < 0 or b < 0 or c < 0 then return false end\n  --\
    \ Check that the sides are equal\n  if a == b and a == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == c then return true end\n  -- Check\
    \ that the sides are equal\n  if b == c then return true end\n  -- Check that\
    \ the sides are equal\n  if a == b and b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b and c == c then return true end\n  --\
    \ Check that the sides are equal\n  if a == c and b == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c and c == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if b == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if b == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if b == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if b == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyd2fn4te.lua:61: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are non-zero.\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa366l3zw.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local a, b, c =\
    \ tonumber(a), tonumber(b), tonumber(c)\n    if a == b and a == c then return\
    \ true end\n    if a == b or a == c then return false end\n    if b == c then\
    \ return false end\n    if a + b > c then return false end\n    if a + c > b then\
    \ return false end\n    if b + c > a then return false end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibv4lkxz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpibv4lkxz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b, c = math.abs(a),\
    \ math.abs(b), math.abs(c)\n\tif a == 0 then return false end\n\tif b == 0 then\
    \ return false end\n\tif c == 0 then return false end\n\tif a == b and a == c\
    \ then return true end\n\tif a > b and a > c then return true end\n\tif b > c\
    \ and b > a then return true end\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6oxnjogl.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6oxnjogl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n    local bc = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n    return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56cxubdi.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp56cxubdi.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  local de\
    \ = math.abs(d - e)\n  return ab > bc and ab > ad and bc > de\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x0iu_z1.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp4x0iu_z1.lua:9: in local 'candidate'\n\t/tmp/tmp4x0iu_z1.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    return\
    \ ab > bc and (ab > ad or bc > ad)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c4rwvxo.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp0c4rwvxo.lua:9: in local 'candidate'\n\t/tmp/tmp0c4rwvxo.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn (math.abs(b\
    \ - c) <= ab and math.abs(a - c) <= bc and\n\t\tmath.abs(b - a) <= ac)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6g4oclu.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm6g4oclu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n   local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \   local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n   return\
    \ is_right_angle\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbw8kpdws.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbw8kpdws.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ (ab > ac or math.abs(math.atan2(b, a)) < math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b5eyu_.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp08b5eyu_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(a\
    \ - b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(c - a)\n   return\
    \ ab >= bc && ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptr2sqo60.lua:10: unexpected symbol near ''&''

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n  return\
    \ is_right_angle\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdthwsqnd.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdthwsqnd.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check if a is\
    \ greater than b and b is greater than c\n  if a > b and b > c then\n    -- Check\
    \ if a is greater than c\n    if a > c then\n      -- Return True\n      return\
    \ true\n    else\n      -- Check if b is greater than c\n      if b > c then\n\
    \        -- Return True\n        return true\n      else\n        -- Return False\n\
    \        return false\n      end\n    end\n  else\n    -- Return False\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86unxjx0.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp86unxjx0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local a, b, c =\
    \ tonumber(a), tonumber(b), tonumber(c)\n   if b == 0 then\n      return false\n\
    \   elseif b > 0 and c > 0 then\n      return math.abs(math.atan2(c,b)) <= math.pi/2\n\
    \   elseif b > 0 and c < 0 then\n      return math.abs(math.atan2(c,b)) <= math.pi\n\
    \   elseif b < 0 and c > 0 then\n      return math.abs(math.atan2(c,b)) <= math.pi\
    \ + math.pi/2\n   elseif b < 0 and c < 0 then\n      return math.abs(math.atan2(c,b))\
    \ <= math.pi + math.pi\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7xvrtq6.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj7xvrtq6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3v6dm2zi.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3v6dm2zi.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and\n        ab > ac and\n        ab > bc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbzsjnac.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprbzsjnac.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplykrisrd.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplykrisrd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(a\
    \ - b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(c - a)\n   if ab\
    \ > bc then\n      return ab > ac\n   else\n      return bc > ac\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrpcdnuk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxrpcdnuk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a > b and a > c then\n\t\
    \treturn true\n\telseif b > c and b > a then\n\t\treturn true\n\telseif c > a\
    \ and c > b then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ro3p_fx.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4ro3p_fx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   -- Check that the\
    \ sides are non-zero\n   if math.abs(a) < 0.001 then\n      return false\n   end\n\
    \   if math.abs(b) < 0.001 then\n      return false\n   end\n   if math.abs(c)\
    \ < 0.001 then\n      return false\n   end\n   -- Check that the sides are equal\n\
    \   if math.abs(a - b) < 0.001 then\n      return false\n   end\n   if math.abs(b\
    \ - c) < 0.001 then\n      return false\n   end\n   if math.abs(c - a) < 0.001\
    \ then\n      return false\n   end\n   -- Check that the angles are equal\n  \
    \ if math.abs(math.atan2(b,a) - math.atan2(c,a)) < 0.001 then\n      return false\n\
    \   end\n   -- Check that the angles are 90 degree\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(a,b)) < 0.001 then\n      return false\n   end\n   -- Check that\
    \ the angles are right\n   if math.abs(math.atan2(b,c) - math.atan2(a,c)) < 0.001\
    \ then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf716z56.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdf716z56.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local is_right_angled = ab > bc and (ab - bc) > (bc - ab)\n  return is_right_angled\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5xp1y9e.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf5xp1y9e.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tlocal ab = math.abs(a + b)\n\
    \tlocal bc = math.abs(b + c)\n\tlocal cb = math.abs(c + b)\n\tlocal abc = math.abs(ab\
    \ + bc)\n\tlocal bcb = math.abs(bc + ab)\n\tlocal abcb = math.abs(abc + bcb)\n\
    \t\n\tif ab == bc and ab == cb then\n\t\treturn true\n\telseif ab == abc and ab\
    \ == bcb then\n\t\treturn true\n\telseif abc == bcb and abc == abcb then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b67m75o.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6b67m75o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(a\
    \ - b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and\n          ab > ac and\n          bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4nlgsf4.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps4nlgsf4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r8yfvp3.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2r8yfvp3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n    local bc = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n    return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56cxubdi.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp56cxubdi.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local a = math.abs(a)\n\
    \    local b = math.abs(b)\n    local c = math.abs(c)\n    local s = math.sqrt((a\
    \ + b) * (a + c) * (b + c))\n    return math.abs((a + b + c) / s) < math.pi/6\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4xann5d.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy4xann5d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkukikw6a.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkukikw6a.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == 90)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70zmpk0k.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp70zmpk0k.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and (ab == ad or ab == -bc)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpya30_hcw.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpya30_hcw.lua:9: in local 'candidate'\n\t/tmp/tmpya30_hcw.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   -- Check that the\
    \ sides are non-zero\n   if math.abs(a) < 0.001 then\n      return false\n   end\n\
    \   if math.abs(b) < 0.001 then\n      return false\n   end\n   if math.abs(c)\
    \ < 0.001 then\n      return false\n   end\n   -- Check that the sides are equal\n\
    \   if math.abs(a - b) < 0.001 then\n      return false\n   end\n   if math.abs(a\
    \ - c) < 0.001 then\n      return false\n   end\n   if math.abs(b - c) < 0.001\
    \ then\n      return false\n   end\n   -- Check that the angles are equal\n  \
    \ if math.abs(math.atan2(b, c) - math.atan2(a, c)) < 0.001 then\n      return\
    \ false\n   end\n   if math.abs(math.atan2(b, a) - math.atan2(c, b)) < 0.001 then\n\
    \      return false\n   end\n   if math.abs(math.atan2(a, c) - math.atan2(b, c))\
    \ < 0.001 then\n      return false\n   end\n   -- Check that the angles are 90\
    \ degree\n   if math.abs(math.atan2(b, a) - math.atan2(c, b)) < 0.001 then\n \
    \     return false\n   end\n   if math.abs(math.atan2(a, c) - math.atan2(b, a))\
    \ < 0.001 then\n      return false\n   end\n   -- Check that the angles are right\
    \ angle\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nkkt8gz.lua:52:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9nkkt8gz.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(a\
    \ - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and (ab > ac or math.abs(a - c) > math.abs(b - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcjwsi52.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplcjwsi52.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a > b and a > c then\n\t\
    \treturn true\n\telseif b > c then\n\t\treturn false\n\telseif c > a then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ak59bm.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr6ak59bm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   -- The sides a,\
    \ b, and c are all positive numbers.\n   -- The angle between them is computed.\n\
    \   -- The angle is measured in radians.\n   -- The angle is measured clockwise\
    \ (positive angles go counter-clockwise).\n   -- If the angle is less than 90\
    \ degrees, return true.\n   -- If the angle is greater than 90 degrees, return\
    \ false.\n   -- If the angle is exactly 90 degrees, return true.\n   -- If the\
    \ angle is exactly 180 degrees, return false.\n   -- If the angle is exactly 270\
    \ degrees, return false.\n   -- If the angle is exactly 360 degrees, return true.\n\
    \   -- If the angle is exactly 45 or more degrees, return false.\n   -- If the\
    \ angle is less than 45 degrees, return false.\n   -- If the angle is greater\
    \ than 135 degrees, return true.\n   -- If the angle is less than 135 degrees,\
    \ return true.\n   -- If the angle is greater than 225 degrees, return false.\n\
    \   -- If the angle is less than 225 degrees, return false.\n   -- If the angle\
    \ is exactly 135 degrees, return true.\n   -- If the angle is exactly 225 degrees,\
    \ return true.\n   -- If the angle is exactly 315 degrees, return false.\n   --\
    \ If the angle is exactly 360 degrees, return false.\n   -- If the angle is exactly\
    \ 450 degrees, return true.\n   -- If the angle is exactly 540 degrees, return\
    \ false.\n   -- If the angle is less than 540 degrees, return false.\n   -- If\
    \ the angle is greater than 675 degrees, return true.\n   -- If the angle is less\
    \ than 675 degrees, return true.\n   -- If the angle is greater than 900 degrees,\
    \ return false.\n   -- If the angle is less than 900 degrees, return false.\n\
    \   -- If the angle is exactly 900 degrees, return true.\n   -- If the angle is\
    \ exactly 180 degrees, return true.\n   -- If the angle is exactly 270 degrees,\
    \ return false.\n   -- If the angle is exactly 360 degrees, return false.\n  \
    \ -- If the angle is exactly 45 or more degrees, return true.\n   -- If the angle\
    \ is greater than 45 degrees, return true.\n   -- If the angle is less than 45\
    \ degrees, return false.\n   -- If the angle is greater than 135 degrees, return\
    \ false.\n   -- If the angle is less than 135 degrees, return false.\n   -- If\
    \ the angle is greater than 225 degrees, return true.\n   -- If the angle is less\
    \ than 225 degrees, return true.\n   -- If the angle is \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg3fwv5ix.lua:63: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab = math.abs(c - a)\n\treturn\
    \ ab > bc and ab > ac_ab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8g4ost6b.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8g4ost6b.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zdbzavc.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgs13u3x.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkgs13u3x.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    return\
    \ ab > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1a9frt_m.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp1a9frt_m.lua:9: in local 'candidate'\n\t/tmp/tmp1a9frt_m.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and\n\t\tab > ad and\n\t\tbc > ad\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplx0fylj4.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmplx0fylj4.lua:9: in local 'candidate'\n\t/tmp/tmplx0fylj4.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and (ab == ad or ab == -bc)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpya30_hcw.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpya30_hcw.lua:9: in local 'candidate'\n\t/tmp/tmpya30_hcw.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9tx732t.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf9tx732t.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == 90)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70zmpk0k.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp70zmpk0k.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zdbzavc.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n\t\n\tif ab > bc then\n\
    \t\tif ab > cb then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \telse\n\t\tif bc > ab then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa48gt7uz.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa48gt7uz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkbg3qw7.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplkbg3qw7.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo66t00zt.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpo66t00zt.lua:9: in local 'candidate'\n\t/tmp/tmpo66t00zt.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a > b and a > c then\n\t\
    \treturn true\n\telseif b > c then\n\t\treturn false\n\telseif b == c then\n\t\
    \treturn math.abs(math.atan2(b,a)) > math.pi/2\n\telse\n\t\treturn math.abs(math.atan2(c,b))\
    \ > math.pi/2\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4fuvzhk.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa4fuvzhk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a + b > c and a + c > b and b + c > a then return\
    \ true end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgifcjw_4.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgifcjw_4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   if ab\
    \ > bc then\n      return false\n   elseif ab > ac then\n      return true\n \
    \  elseif bc > ac then\n      return false\n   else\n      return true\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcer6gkh8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcer6gkh8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zdbzavc.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zdbzavc.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab = math.abs(c - a)\n\treturn\
    \ ab > bc and\n\t\tab > ac_ab and\n\t\tbc > ac_ab\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaskb2gw.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuaskb2gw.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   -- Check that the\
    \ sides are all positive\n   if a < 0 or b < 0 or c < 0 then return false end\n\
    \   -- Check that a + b > c and b + c > a\n   if a + b > c and b + c > a then\
    \ return false end\n   -- Check that a + c > b and a + b > c\n   if a + c > b\
    \ and a + b > c then return false end\n   -- Check that the angles are right\n\
    \   if math.abs(math.atan2(b,c) - math.atan2(a,b)) > math.pi then return false\
    \ end\n   -- Check that the angles are 90\n   if math.abs(math.atan2(b,c) - math.atan2(a,c))\
    \ > math.pi then return false end\n   -- Check that the angles are 0\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(a,b)) < math.pi then return false end\n   -- Check that the angles\
    \ are 90\n   if math.abs(math.atan2(b,c) - math.atan2(c,a)) > math.pi then return\
    \ false end\n   -- Check that the angles are 0\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(c,b)) < math.pi then return false end\n   -- Check that the angles\
    \ are 90\n   if math.abs(math.atan2(b,c) - math.atan2(b,a)) > math.pi then return\
    \ false end\n   -- Check that the angles are 0\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(b,c)) < math.pi then return false end\n   return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk6syo0c.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdk6syo0c.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local a, b, c =\
    \ tonumber(a), tonumber(b), tonumber(c)\n    if a == b and a == c then return\
    \ true end\n    if a == c then return false end\n    if b == c then return false\
    \ end\n    local ab, bc, cb = a - b, c - b, c - a\n    return ab > bc or ab >\
    \ cb\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg67brvd.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeg67brvd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check if any of\
    \ a, b, c are negative\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are zero\n  if a == 0 and b == 0 and c ==\
    \ 0 then\n    return true\n  end\n  -- Check if any of a, b, c are positive\n\
    \  if a > 0 and b > 0 and c > 0 then\n    -- Check if any of a, b, c are equal\n\
    \    if a == b and a == c then\n      return true\n    end\n    -- Check if any\
    \ of a, b, c are opposite\n    if a > b and a > c then\n      return false\n \
    \   end\n    -- Check if any of a, b, c are opposite\n    if b > c and b > a then\n\
    \      return false\n    end\n    -- Check if any of a, b, c are opposite\n  \
    \  if c > a and c > b then\n      return false\n    end\n    -- Check if any of\
    \ a, b, c are opposite\n    if a > b and b > c then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if b > a and b > c then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ c > a and c > b then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if a > c and b > a then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if b > a and b > c then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ c > a and c > b then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if a > b and b > c then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if b > a and b > c then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ c > a and c > b then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if a > c and b > a then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if b > a and b > c then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ c > a and c > b then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if a > b and b > c then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmploygdtyf.lua:104: ''end'' expected (to close ''if'' at line
    16) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local a, b, c =\
    \ tonumber(a), tonumber(b), tonumber(c)\n    if a == b and a == c then return\
    \ true end\n    if a == b or a == c then return false end\n    if b == c then\
    \ return false end\n    if a + b > c then return false end\n    if a + c > b then\
    \ return false end\n    if b + c > a then return false end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibv4lkxz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpibv4lkxz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo66t00zt.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpo66t00zt.lua:9: in local 'candidate'\n\t/tmp/tmpo66t00zt.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local a = math.abs(a)\n\
    \    local b = math.abs(b)\n    local c = math.abs(c)\n    local s = (a + b +\
    \ c) / 2\n    if s <= a or s <= b or s <= c then\n        return false\n    end\n\
    \    local u = (a + b) / 2\n    local v = (b + c) / 2\n    local w = math.sqrt(u\
    \ * u + v * v)\n    if w > 1 then\n        local x = math.sqrt(u * u - w * w)\n\
    \        local y = math.sqrt(v * v - w * w)\n        if x ~= 0 and y ~= 0 then\n\
    \            local angle = (math.atan2(y, x) + math.pi) % (math.pi * 2)\n    \
    \        if angle > math.pi / 2 then\n                angle = angle - math.pi\n\
    \            end\n            if angle < -math.pi / 2 then\n                angle\
    \ = angle + math.pi\n            end\n            if math.abs(angle) < math.pi\
    \ / 4 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfxsgm08.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprfxsgm08.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- The sides are\
    \ a, b, c\n  -- The angle is given by acos((b^2 + c^2 - a^2)/(2*b*c))\n  -- The\
    \ result is between -pi and pi\n  return acos((b^2 + c^2 - a^2)/(2*b*c)) <= math.pi/2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1u1_ad3d.lua:10:\
    \ attempt to call a nil value (global 'acos')\nstack traceback:\n\t/tmp/tmp1u1_ad3d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp1u1_ad3d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab = math.abs(ac - ab)\n\tlocal\
    \ ab_ac = math.abs(ab - ac)\n\treturn ab_ac > bc and (ab_ac == ab or ab_ac ==\
    \ ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4oek82l.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'ac')\nstack traceback:\n\
    \t/tmp/tmps4oek82l.lua:9: in local 'candidate'\n\t/tmp/tmps4oek82l.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- The sides a, b,\
    \ and c are all positive.\n  -- The area of a triangle with sides a, b, and c\
    \ is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle\
    \ with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n \
    \ -- The area of a triangle with sides a, b, and c is given by:\n  -- A = 1/2\
    \ *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b, and c is\
    \ given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle\
    \ with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n \
    \ -- The area of a triangle with sides a, b, and c is given by:\n  -- A = 1/2\
    \ *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b, and c is\
    \ given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle\
    \ with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n \
    \ -- The area of a triangle with sides a, b, and c is given by:\n  -- A = 1/2\
    \ *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b, and c is\
    \ given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle\
    \ with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n \
    \ -- The area of a triangle with sides a, b, and c is given by:\n  -- A = 1/2\
    \ *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b, and c is\
    \ given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle\
    \ with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplhiylvsm.lua:53: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or math.abs(a - b) > math.abs(a - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjeffarct.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjeffarct.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpww2hvxzg.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpww2hvxzg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    local\
    \ cd = math.abs(d - c)\n    return ab > bc and ab > ad and ab > cd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1wwhfe3w.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp1wwhfe3w.lua:9: in local 'candidate'\n\t/tmp/tmp1wwhfe3w.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplykrisrd.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplykrisrd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local ac = math.abs(c - a)\n    local abc = math.abs(b - c)\n    local\
    \ bcd = math.abs(c - b)\n    return ab == abc and (ab == bcd or bc == abc)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1370gow.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw1370gow.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpji9sr964.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpji9sr964.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab = math.abs(c - a)\n\treturn\
    \ ab > bc and (ab == bc or ac_ab == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshzs0smt.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpshzs0smt.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ ac > bc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxkczrvy.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptxkczrvy.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check if any of\
    \ a, b, c is 90 degree\n  if math.abs(a - b) > math.abs(a - c) then\n    if math.abs(b\
    \ - c) > math.abs(b - a) then\n      return true\n    else\n      return false\n\
    \    end\n  else\n    if math.abs(a - c) > math.abs(b - a) then\n      return\
    \ true\n    else\n      return false\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcahzidoz.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcahzidoz.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local ac = math.abs(c - a)\n   if ab > ac then\n      return false\n\
    \   elseif ab == ac then\n      return math.abs(math.atan2(b - a, c - a)) <= math.pi/2\n\
    \   else\n      return math.abs(math.atan2(b - a, c - a)) <= math.pi\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1x307my.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk1x307my.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n\t\n\tif ab > bc then\n\
    \t\tif ab > cb then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \telse\n\t\tif bc > ab then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa48gt7uz.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa48gt7uz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2drn98n.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk2drn98n.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n   local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \   local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n   if ab == bc and\
    \ ab == ac then\n      return true\n   else\n      return false\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4wkznxb.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe4wkznxb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac_ab = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac_ab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsaxsvnr.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvsaxsvnr.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- The sides are\
    \ a, b, and c.\n\t-- The hypotenuse is the length of a side of a triangle with\
    \ sides a, b, and c.\n\t-- The hypotenuse is the square root of the sum of the\
    \ squares of the sides.\n\t-- The hypotenuse is given by the formula:\n\t-- hypotenuse\
    \ = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a right-angled triangle is given by\
    \ the formula:\n\t-- area = sqrt(2 * a * b + c^2)\n\t-- The area of a triangle\
    \ with sides a, b, and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2\
    \ - c^2)\n\t-- The area of a triangle with sides a, b, and c is given by the formula:\n\
    \t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle with sides a, b,\
    \ and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2 - c^2)\n\t-- The\
    \ area of a triangle with sides a, b, and c is given by the formula:\n\t-- area\
    \ = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle with sides a, b, and c\
    \ is given by the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of\
    \ a triangle with sides a, b, and c is given by the formula:\n\t-- area = sqrt(a^2\
    \ + b^2 + c^2)\n\t-- The area of a triangle with sides a, b, and c is given by\
    \ the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle\
    \ with sides a, b, and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2\
    \ + c^2)\n\t-- The area of a triangle with sides a, b, and c is given by the formula:\n\
    \t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle with sides a, b,\
    \ and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The\
    \ area of a triangle with sides a, b, and c is given by the formula:\n\t-- area\
    \ = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle with sides a, b, and c\
    \ is given by the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of\
    \ a triangle with sides a, b, and c \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvbcoai92.lua:56: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal cd = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > cd and\n\t\tbc > cd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz5aylvp.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyz5aylvp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a > b and a > c then\n\t\
    \treturn true\n\telseif b > c then\n\t\treturn false\n\telseif c > a then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6ak59bm.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr6ak59bm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac_ab = math.abs(c - a)\n  \
    \  local ab_ac = math.abs(b - a)\n    return ab == bc and ab_ac == ac_ab\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw52vji4_.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw52vji4_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap0w13ha.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpap0w13ha.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(a\
    \ - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq7amkop.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdq7amkop.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n  return\
    \ is_right_angle\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdthwsqnd.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdthwsqnd.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zdbzavc.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n\treturn\
    \ is_right_angle\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45k4ysik.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp45k4ysik.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   -- Check that the\
    \ sides are non-zero\n   if math.abs(a) < math.abs(b) and math.abs(a) < math.abs(c)\
    \ then\n      -- Check that the angles are right\n      if math.abs(math.atan2(b,a))\
    \ < math.abs(math.atan2(c,a)) then\n         return true\n      else\n       \
    \  return false\n      end\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqbl7w1z.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoqbl7w1z.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2drn98n.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk2drn98n.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg90ptxbw.lua:109: ''end'' expected (to close ''function''
    at line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo66t00zt.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpo66t00zt.lua:9: in local 'candidate'\n\t/tmp/tmpo66t00zt.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab\
    \ > bc and (ab > ac or ac == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbiu3qyfy.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbiu3qyfy.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check if any of\
    \ a, b, or c are negative\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiy2yuzvd.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check if any of\
    \ a, b, c are negative.\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeq7ht7mv.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgs13u3x.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkgs13u3x.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and  ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshovq0be.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpshovq0be.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and (ab == bc or ab == ac)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchspiaao.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpchspiaao.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check if any of\
    \ a, b, c is 90 degree\n  local function is_right_angle(angle)\n    return angle\
    \ == 90 or angle == 180 or angle == 270 \n  end\n  \n  -- Check if all three sides\
    \ are equal\n  local function is_same_side(a, b, c)\n    return a == b or a ==\
    \ c or b == c\n  end\n  \n  -- Check if all three sides are 90 degree\n  local\
    \ function is_right_angle_triangle(a, b, c)\n    return is_right_angle(a) and\
    \ is_right_angle(b) and is_right_angle(c)\n  end\n  \n  -- Check if all three\
    \ sides are 180 degree\n  local function is_right_angle_triangle_2(a, b, c)\n\
    \    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n  end\n\
    \  \n  -- Check if all three sides are 270 degree\n  local function is_right_angle_triangle_3(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 90 degree\n  local function is_right_angle_triangle_4(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 180 degree\n  local function is_right_angle_triangle_5(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 270 degree\n  local function is_right_angle_triangle_6(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 90 degree\n  local function is_right_angle_triangle_7(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 180 degree\n  local function is_right_angle_triangle_8(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 270 degree\n  local function is_right_angle_triangle_9(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 90 degree\n  local function is_right_angle_triangle_10(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 180 degree\n  local function is_right_angle_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl2xzp6wn.lua:69: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check if any three\
    \ sides are equal\n\tif a == b and a == c then\n\t\treturn true\n\tend\n\t-- Check\
    \ if any three sides are 90 degree\n\tif a == b or a == c or b == c then\n\t\t\
    return false\n\tend\n\t-- Check if any three sides are right angle\n\tif math.abs(math.acos((a\
    \ / b) * (b / c))) < math.pi / 2 then\n\t\treturn true\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gscogzv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2gscogzv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab\
    \ > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo66t00zt.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpo66t00zt.lua:9: in local 'candidate'\n\t/tmp/tmpo66t00zt.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(a\
    \ - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and\n           ab > ac and\n           bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypsdkbph.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpypsdkbph.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn (ab\
    \ + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaco_o1b.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdaco_o1b.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgs13u3x.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkgs13u3x.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a > b and a > c then\n\t\
    \treturn true\n\telseif b > c then\n\t\treturn false\n\telseif b == c then\n\t\
    \treturn true\n\telseif a == c then\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83h51a0o.lua:24:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp83h51a0o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm6izxmv.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjm6izxmv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and\n         ab > ac and\n         bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyfb47xp.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoyfb47xp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ (ab > ac or math.fmod(ab, 2) == 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1dfr9tn.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz1dfr9tn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplykrisrd.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplykrisrd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo463jb2v.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo463jb2v.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    -- Check that\
    \ the sides are equal\n    if a == b and a == c then\n      return true\n    end\n\
    \    -- Check that the sides are equal\n    if a == c then\n      return true\n\
    \    end\n    -- Check that the sides are equal\n    if b == c then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a == b or b ==\
    \ c or c == a then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if a == b or a == c or b == c then\n      return true\n    end\n\
    \    -- Check that the sides are equal\n    if a == b or a == c or c == b then\n\
    \      return true\n    end\n    -- Check that the sides are equal\n    if a ==\
    \ b or a == c or c == a then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if a == b or a == c or c == b then\n      return true\n\
    \    end\n    -- Check that the sides are equal\n    if a == b or a == c or c\
    \ == a then\n      return true\n    end\n    -- Check that the sides are equal\n\
    \    if a == b or a == c or c == b then\n      return true\n    end\n    -- Check\
    \ that the sides are equal\n    if a == b or a == c or c == a then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a == b or a ==\
    \ c or c == b then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if a == b or a == c or c == a then\n      return true\n    end\n\
    \    -- Check that the sides are equal\n    if a == b or a == c or c == b then\n\
    \      return true\n    end\n    -- Check that the sides are equal\n    if a ==\
    \ b or a == c or c == a then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if a == b or a == c or c == b then\n      return true\n\
    \    end\n    -- Check that the sides are equal\n    if a == b or a == c or c\
    \ == a then\n      return true\n    end\n    -- Check that the sides are equal\n\
    \    if a == b or a == c or c == b then\n      return true\n    end\n    -- Check\
    \ that the sides are equal\n    if a == b or a == c or c == a then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a == b or a ==\
    \ c or c == b then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if a == b or a == c or c == a then\n      return true\n    end\n\
    \    -- Check that the sides are equal\n    if a == b or a == c or c == b then\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjo6zkxcd.lua:112: ''end'' expected (to close ''if'' at line
    94) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(a\
    \ - b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwwhkzan.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbwwhkzan.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(a\
    \ - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(a - c)\n    return\
    \ ab > bc and\n        ab > ac and\n        bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalfub5dt.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpalfub5dt.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcs4rblp5.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab\
    \ > bc and (ab == bc or ac == 90)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x5ngono.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5x5ngono.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpji9sr964.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zdbzavc.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   -- Check that the\
    \ sides are all positive\n   if a < 0 or b < 0 or c < 0 then return false end\n\
    \   -- Check that the sides are equal\n   if math.abs(a - b) < math.abs(a - c)\
    \ or math.abs(a - c) < math.abs(b - c) then return false end\n   -- Check that\
    \ the angles are right\n   if math.abs(math.atan2(b,a) - math.atan2(c,a)) > math.pi\
    \ then return false end\n   -- Check that the angles are 90\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(a,c)) > math.pi then return false end\n   -- Check that the angles\
    \ are less than 180 degrees\n   if math.abs(math.atan2(b,c) - math.atan2(a,b))\
    \ > math.pi then return false end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozphmwd7.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpozphmwd7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn false\n\tend\n\t-- Check that the sides are equal\n\
    \tif a + b > c and a + c > b and b + c > a then\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64s319mj.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp64s319mj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm6izxmv.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjm6izxmv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    return math.abs(a\
    \ - b) <= math.abs(b - c) and math.abs(a - c) <= math.abs(b - a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz_aadz8.lua:13:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvz_aadz8.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local ac = math.abs(c - a)\n   local abc = math.abs(b - c)\n   local\
    \ bcd = math.abs(c - b)\n   if ab == ac then\n      return ab == bcd\n   elseif\
    \ ab == abc then\n      return math.abs(math.atan2(b, bcd)) == math.pi/2.0\n \
    \  elseif ac == bcd then\n      return math.abs(math.atan2(a, ac)) == math.pi/2.0\n\
    \   else\n      return false\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yy7jm1l.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7yy7jm1l.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    return (b - c)\
    \ ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbdlm6jg.lua:14:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprbdlm6jg.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ca = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ca == bc)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3id56l1.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp3id56l1.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpji9sr964.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == b and a == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and b == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == b and a ==\
    \ c then\n    return true\n  end\n  -- Check that the sides are equal\n  if a\
    \ == c then\n    return true\n  end\n  -- Check that the sides are equal\n  if\
    \ b == c then\n    return true\n  end\n  -- Check that the sides are equal\n \
    \ if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b and b == c then\n    return true\n  end\n \
    \ -- Check that the sides are equal\n  if a == b and a == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b and\
    \ b == c then\n    return true\n  end\n  -- Check that the sides are equal\n \
    \ if a == b and a == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if b == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoqxl4sfs.lua:122: ''end'' expected (to close ''function''
    at line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local ac = math.abs(c - a)\n   local abc = math.abs(b - c)\n   local\
    \ bcd = math.abs(c - b)\n   return ab == abc and ac == bcd and abc > bcd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4cc48qk.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps4cc48qk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gnsnbuc.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gnsnbuc.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal cb = math.abs(c - b)\n\t\n\treturn\
    \ ab > bc and (ab > cb or math.abs(a - c) > math.abs(b - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjeb8bwrk.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjeb8bwrk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ab == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4f_em4u.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph4f_em4u.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab = math.abs(c - a)\n\treturn\
    \ ab > bc and (ab == bc or ab == ac_ab)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtxyunmv.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqtxyunmv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcs4rblp5.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local ac = math.abs(c - a)\n   if ab > ac then\n      return false\n\
    \   else\n      return math.abs(math.atan2(b - a, c - a)) <= math.pi / 2\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvi0wxo1.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfvi0wxo1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n   local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \   local cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n   if ab > bc then\n\
    \      return false\n   elseif ab < bc then\n      return true\n   elseif ab ==\
    \ bc then\n      return math.abs(math.atan2(b, a) - math.atan2(c, b)) <= math.pi\
    \ / 2\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yhplkli.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8yhplkli.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap0w13ha.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpap0w13ha.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and\n           ab > ac and\n           bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72fu4j9g.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp72fu4j9g.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6atbb1y.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr6atbb1y.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local ac = math.abs(c - a)\n   local bc = math.abs(b - c)\n   if ab\
    \ > ac and ab > bc then\n      return true\n   else\n      return false\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgpvhnn7.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbgpvhnn7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    local\
    \ de = math.abs(d - e)\n    return ab >= bc and (ab >= ad or ab >= de)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93zssbf6.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp93zssbf6.lua:9: in local 'candidate'\n\t/tmp/tmp93zssbf6.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and (ab == bc or ac == 90)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsmp5iz5.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbsmp5iz5.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n  return\
    \ is_right_angle\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdthwsqnd.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdthwsqnd.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm6izxmv.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjm6izxmv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo463jb2v.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo463jb2v.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c\
    \ or c == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == c or c == a then\n\t\treturn true\n\tend\n\t\
    -- Check that the sides are equal\n\tif a == b or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == c or c == a then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == c or c\
    \ == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\t\
    if a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are\
    \ equal\n\tif a == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check\
    \ that the sides are equal\n\tif a == c or c == a then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == b or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnr7m6_tx.lua:118: ''end'' expected (to close ''function''
    at line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1_mynpfc.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9tx732t.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf9tx732t.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5brlzpzl.lua:93: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplykrisrd.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplykrisrd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and\n          ab > ac and\n          bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx45w30v.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvx45w30v.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm6izxmv.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjm6izxmv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are non-zero.\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa366l3zw.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcs4rblp5.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n    local bc = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n\
    \    return is_right_angle\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqjed50i.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcqjed50i.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    return\
    \ ab > bc and (ab > ad or bc > ad)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c4rwvxo.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp0c4rwvxo.lua:9: in local 'candidate'\n\t/tmp/tmp0c4rwvxo.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6w_i2pq.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl6w_i2pq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a + b > c and a + c > b and b + c > a then\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9mdzxyl.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk9mdzxyl.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn (math.abs(b\
    \ - c) >= ab and math.abs(b - c) >= ac and math.abs(a - c) >= ab and math.abs(a\
    \ - c) >= ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_vohya_.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1_vohya_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplykrisrd.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplykrisrd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtv3l6ug.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtv3l6ug.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    local\
    \ cd = math.abs(d - c)\n    return ab > bc and (ab > ad or cd > ab)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeptb6h_f.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpeptb6h_f.lua:9: in local 'candidate'\n\t/tmp/tmpeptb6h_f.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(a\
    \ - b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(a - c)\n   return\
    \ ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkvfvd1w.lua:16:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfkvfvd1w.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevm6wrz2.lua:28: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659978389
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\nlocal function right_angle_triangle(a, b, c)\n   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac_ab = math.abs(ac - ab)\n  \
    \ local bc_ab = math.abs(bc - ab)\n   if ab > bc then\n      return ab > ac_ab\
    \ and ab > bc_ab\n   else\n      return bc > ac_ab and bc > bc_ab\n   end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsve5_5l.lua:9:\
    \ attempt to perform arithmetic on a nil value (global 'ac')\nstack traceback:\n\
    \t/tmp/tmpvsve5_5l.lua:9: in local 'candidate'\n\t/tmp/tmpvsve5_5l.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978389
