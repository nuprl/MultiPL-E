name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n--\
  \ >>> digits(4) \n-- 0\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n < 0 then\n    return 0\n  end\n  local product = 1\n  local\
    \ digits = string.gsub(n, \"%d+\", \"\")\n  for i = 1, #digits do\n    local digit\
    \ = tonumber(digits[i])\n    if digit % 2 == 1 then\n      return 0\n    end\n\
    \    product = product * digit\n  end\n  return product\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  local product = 1\n  local digit = 1\n  while n >= 10 do\n    digit = n % 10\n\
    \    product = product * digit\n    n = n / 10\n  end\n  return product\nend",
  "  local product = 1\n  local digits = string.gmatch(n, \"%d*\") -- Split n into\
    \ digits.\n  for i = 1, #digits do\n    product = product * tonumber(digits[i])\n\
    \  end\n  return product\nend", "  if n < 0 then return 0 end\n  local product\
    \ = 1\n  local digits = math.floor(n)\n  while digits > 0 do\n    product = product\
    \ * digits % 10\n    digits = math.floor(digits / 10)\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 1\n\
    \  end\n  if n % 2 == 0 then\n    return 0\n  end\n  local digit = 1\n  while\
    \ n >= 10 do\n    digit = digit * 10\n    n = n / 2\n  end\n  return digit\nend",
  "  if n < 10 then\n    return n\n  else\n    local sum = 0\n    for i = 1, n do\n\
    \      sum = sum + math.floor(n/10) * math.floor(n/10)\n      n = math.floor(n/10)\n\
    \    end\n    return sum\n  end\nend", "  local product = 1\n  for i = 1, n do\n\
    \    if n % 2 == 1 then\n      product = product * i\n    end\n    n = n / 2\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ product = 1\n  for i = 1, n do\n    product = product * math.floor((n % 10)\
    \ + 0.5)\n    n = math.floor((n / 10) + 0.5)\n  end\n  return product\nend", " \
    \ local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product\
    \ = product * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  if\
    \ n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif n < 100\
    \ then\n    return n * 2\n  elseif n < 1000 then\n    return n * 3\n  elseif n\
    \ < 10000 then\n    return n * 4\n  elseif n < 100000 then\n    return n * 5\n\
    \  elseif n < 1000000 then\n    return n * 6\n  elseif n < 10000000 then\n   \
    \ return n * 7\n  elseif n < 100000000 then\n    return n * 8\n  elseif n < 1000000000\
    \ then\n    return n * 9\n  else\n    return 0\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit = n * 10\
    \ + digit\n    n = n / 10\n  end\n  return digit\nend", "  if n == 0 then\n  \
    \  return 0\n  elseif n < 0 then\n    return nil\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits-(n%10)\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n%10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    return n * digits(math.floor(n/10))\n  end\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend", "  local product = 1\n  for i = 1, n do\n\
    \    product = product * math.floor((n - i) / 2)\n  end\n  return product\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n/10)\
    \ * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n/100) * 100 + digits(n\
    \ % 100)\n  else\n    return digits(n/1000) * 1000 + digits(n % 1000)\n  end\n\
    end", "  local product = 1\n  local digit = 1\n  while n > 0 do\n    if n % 2\
    \ == 1 then\n      product = product * digit\n    end\n    digit = digit + 1\n\
    \    n = n / 2\n  end\n  return product\nend", "  if n < 0 then return 0 end\n\
    \  local product = 1\n  local digit = 1\n  while n > 0 do\n    digit = n % 10\n\
    \    product = product * digit\n    n = math.floor(n/10)\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n\
    \    local product = 1\n    local digits = string.sub(n,1,1)\n    for i = 1, digits\
    \ do\n      product = product * 2\n      n = string.sub(n,i+1,1)\n    end\n  \
    \  return product\n  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  else\n    local digit = 1\n    local product = 1\n   \
    \ while n > 0 do\n      digit = n % 10\n      product = product * digit\n    \
    \  n = n / 10\n    end\n    return product\n  end\nend", "  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n    return\
    \ n * digits(math.floor(n/10))\n  end\nend", "  if n == 0 then\n    return 0\n\
    \  end\n  local sum = 0\n  local i = 1\n  while n > 0 do\n    sum = sum + n %\
    \ 10\n    n = n / 10\n    i = i + 1\n  end\n  return sum\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local sum = 0\n\
    \    for i = 1, n do\n      if n % 2 == 1 then\n        sum = sum + 2\n      else\n\
    \        sum = sum + 1\n      end\n      n = n / 2\n    end\n    return sum\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    return n * digits(math.floor(n/10))\n  end\nend", "  if n < 0\
    \ then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits\
    \ = \"\"\n    local i = 1\n    while n > 0 do\n      digits = digits .. string.format(\"\
    %d\", n % 10)\n      n = n / 10\n    end\n    return digits\n  end\nend", "  local\
    \ product = 1\n  local digit = 1\n  while n > 0 do\n    digit = n % 10\n    product\
    \ = product * digit\n    n = n / 10\n  end\n  return product\nend", "  local digits\
    \ = \"\"\n  local i = 1\n  while n > 0 do\n    digits = digits .. math.floor(n/10)\n\
    \    n = math.mod(n, 10)\n    i = i + 1\n  end\n  return i\nend", "  if n == 0\
    \ then return 0 end\n  local product = 1\n  for i = 1, n do\n    if n % 2 == 1\
    \ then return 0 end\n    product = product * i\n  end\n  return product\nend",
  "  local product = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n\
    \    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n    digits\
    \ = digits - 1\n  end\n  return product\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend", "  local digits\
    \ = 1\n  while n > 0 do\n    digits = digits * n % 10\n    n = n / 10\n  end\n\
    \  return digits\nend", "  if n == 0 then\n    return 0\n  elseif n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local digit = 1\n\
    \    while n > 0 do\n      digit = 2 * digit\n      n = n / 10\n    end\n    return\
    \ digit\n  end\nend", "  if n < 10 then\n    return n\n  else\n    local product\
    \ = 1\n    for i = 1, n do\n      if n % 2 == 1 then\n        product = product\
    \ * 10\n      end\n      n = n / 2\n    end\n    return product\n  end\nend",
  "  local product = 1\n  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n\
    \      product = product * digit\n    end\n    n = n / 2\n  end\n  return product\n\
    end", "  local nDigits = math.floor(math.log10(n))\n  local product = 1\n  for\
    \ i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,i))\n  end\n\
    \  return product\nend", "  if n < 10 then\n    return n\n  elseif n < 100 then\n\
    \    return digits(n / 10) * 10 + n % 10\n  else\n    return digits(n / 100) *\
    \ 100 + digits(n % 100)\n  end\nend", "  local product = 1\n  local digits = math.floor(n/10)\n\
    \  while digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  if n < 0 then\n  \
    \  return 0\n  end\n  local product = 1\n  local digit = 1\n  while n >= 1 do\n\
    \    digit = n % 10\n    product = product * digit\n    n = n / 10\n  end\n  return\
    \ product\nend", "  local digits = \"\"\n  local i = 1\n  while n > 0 do\n   \
    \ digits = digits .. tostring(n % 10)\n    n = math.floor(n / 10)\n  end\n  if\
    \ n == 0 then\n    return 0\n  end\n  return digits\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local digit = 1\n  local product = 1\n  while n > 0 do\n\
    \    digit = n % 10\n    product = product * digit\n    n = n / 10\n  end\n  return\
    \ product\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = math.floor(n)\n\
    \  local product = 1\n  while digits > 0 do\n    product = product * digits %\
    \ 10\n    digits = math.floor(digits / 10)\n  end\n  return product\nend", " \
    \ if n < 0 then\n    return 0\n  end\n  local digit = 1\n  local product = 1\n\
    \  while n > 0 do\n    digit = n % 10\n    product = product * digit\n    n =\
    \ n / 10\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  elseif\
    \ n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  local digits = \"\"\n  local i = 1\n  while n > 0 do\n    digits\
    \ = digits .. tostring(n%10)\n    n = math.floor(n/10)\n    i = i + 1\n  end\n\
    \  if i == 1 then\n    digits = digits .. \"0\"\n  end\n  return digits\nend",
  "  if n < 0 then return 0 end\n  local digits = math.floor(n/10)\n  if n % 10 ==\
    \ 0 then return digits * 2 end\n  return digits\nend", "  if n < 0 then return\
    \ 0 end\n  if n == 0 then return 1 end\n  if n % 2 == 0 then return n * digits(n\
    \ - 1) end\n  return n * digits(n / 2)\nend", "  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    local product = 1\n    local\
    \ digit = n % 10\n    while n > 0 do\n      product = product * digit\n      n\
    \ = n / 10\n    end\n    return product\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n\
    \    return digits*10 + digits(remainder)\n  end\nend", "  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits(remainder)*10 + digits\n\
    \  end\nend", "  local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n\
    \      product = product * i\n    end\n    n = n / 2\n  end\n  return product\n\
    end", "  local nDigits = math.floor(math.log(n,2))\n  if nDigits == 0 then\n \
    \   return 0\n  end\n  local product = 1\n  for i = 1, nDigits do\n    product\
    \ = product * math.floor(n/math.pow(2, i))\n  end\n  return product\nend", " \
    \ if n < 10 then\n    return n\n  else\n    local n1 = n % 10\n    local n2 =\
    \ n / 10\n    return digits(n1) * 10 + digits(n2)\n  end\nend", "  local product\
    \ = 1\n  local digits = string.gmatch(n, \"%d*\") -- Get the digits as a string\n\
    \  for i = 1, #digits do\n    local digit = tonumber(digits[i])\n    if digit\
    \ % 2 == 1 then\n      product = product * digit\n    end\n  end\n  return product\n\
    end", "  local product = 1\n  local digits = tostring(n)\n  for i = 1, #digits\
    \ do\n    local digit = tonumber(digits[i])\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n  end\n  return product\nend", "  if n\
    \ < 0 then return 0 end\n  local n1 = math.floor(n)\n  local n2 = math.floor(n/10)\n\
    \  local n3 = math.floor(n/100)\n  local n4 = math.floor(n/1000)\n  local n5 =\
    \ math.floor(n/10000)\n  local n6 = math.floor(n/100000)\n  local n7 = math.floor(n/1000000)\n\
    \  local n8 = math.floor(n/10000000)\n  local n9 = math.floor(n/100000000)\n \
    \ local n10 = math.floor(n/1000000000)\n  local n11 = math.floor(n/10000000000)\n\
    \  local n12 = math.floor(n/100000000000)\n  local n13 = math.floor(n/1000000000000)\n\
    \  local n14 = math.floor(n/10000000000000)\n  local n15 = math.floor(n/100000000000000)\n\
    \  local n16 = math.floor(n/1000000000000000)\n  local n17 = math.floor(n/10000000000000000)\n\
    \  local n18 = math.floor(n/100000000000000000)\n  local n19 = math.floor(n/1000000000000000000)\n\
    \  local n20 = math.floor(n/10000000000000000000)\n  local n21 = math.floor(n/1000000000000000000)\n\
    \  local n22 = math.floor(n/10000000000000000000)\n  local n23 = math.floor(n/100000000000000000000)\n\
    \  local n24 = math.floor(n/1000000000000000000000)\n  local n25 = math.floor(n/10000000000000000000000)\n\
    \  local n26 = math.floor(n/100000000000000000000000)\n  local n27 = math.floor(n/1000000000000000000000000)\n\
    \  local n28 = math.floor(n/10000000000000000000000000)\n  local n29 = math.floor(n/100000000000000000000000000)\n\
    \  local n30 = math.floor(n/1000000000000000000000000000)\n  local n31 = math.floor(n/10000000000000000000000000000)\n\
    \  local n32 = math.floor(n/100000000000000000000000000000)\n  local n33 = math.floor(n/1000000000000000000000000000000)\n\
    \  local n34 = math.floor(n/10000000000000000000000000000000)\n  local n35 = math.floor(n/100000000000000000000000000000000)\n\
    \  local n36 = math.floor(n/1000000000000000000000000000000000)\n  local n37 =\
    \ math.floor(n/10000000000000000000000000000000000)\n  local n38 = math.floor(n/100000000000000000000000000000000000)\n\
    \  local n39 = math.floor(n/1000000000000000000", "  if n < 10 then\n    return\
    \ n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    return digits*10 + digits(n%10)\n  end\nend",
  "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n   \
    \ local digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n/10))\n\
    \  end\nend", "  local product = 1\n  local digits = math.floor(n/10)\n  while\
    \ digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  local product = 1\n\
    \  local digits = string.gsub(n, \"%d+\", \"\")\n  for i = 1, #digits do\n   \
    \ local digit = tonumber(digits[i])\n    if digit % 2 == 1 then\n      return\
    \ 0\n    end\n    product = product * digit\n  end\n  return product\nend", " \
    \ local nDigits = math.floor(n/10)\n  if n % 10 == 0 then\n    return 0\n  else\n\
    \    return nDigits * digits(nDigits)\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local product = 1\n  local digits = math.floor(n)\n  while digits\
    \ > 0 do\n    product = product * digits % 10\n    digits = math.floor(digits\
    \ / 10)\n  end\n  return product\nend", "  local product = 1\n  for i = 1, n do\n\
    \    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n  end\n\
    \  return product\nend", "  local product = 1\n  for i = 1, n do\n    product\
    \ = product * math.floor((n % 10) + 1)\n    n = math.floor((n / 10) + 1)\n  end\n\
    \  return product\nend", "  if n < 0 then return 0 end\n  local product = 1\n\
    \  local digits = string.gsub(n, \"%d+\", \"\")\n  for i = 1, #digits do\n   \
    \ product = product * tonumber(digits[i])\n  end\n  return product\nend", "  if\
    \ n < 0 then\n    return 0\n  end\n  local product = 1\n  local digits = math.floor(n/10)\n\
    \  while digits > 0 do\n    product = product * digits % 10\n    digits = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  elseif n < 100 then\n    return n * 2\n  elseif n < 1000\
    \ then\n    return n * 3\n  elseif n < 10000 then\n    return n * 4\n  elseif\
    \ n < 100000 then\n    return n * 5\n  elseif n < 1000000 then\n    return n *\
    \ 6\n  elseif n < 10000000 then\n    return n * 7\n  elseif n < 100000000 then\n\
    \    return n * 8\n  elseif n < 1000000000 then\n    return n * 9\n  else\n  \
    \  return 0\n  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n\
    \    return n\n  elseif n < 100 then\n    return n * 2\n  elseif n < 1000 then\n\
    \    return n * 3\n  elseif n < 10000 then\n    return n * 4\n  elseif n < 100000\
    \ then\n    return n * 5\n  elseif n < 1000000 then\n    return n * 6\n  elseif\
    \ n < 10000000 then\n    return n * 7\n  elseif n < 100000000 then\n    return\
    \ n * 8\n  elseif n < 1000000000 then\n    return n * 9\n  else\n    return 0\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = 1\n  while\
    \ n > 0 do\n    digits = digits * n % 10\n    n = n / 10\n  end\n  return digits\n\
    end", "  local digits = \"\"\n  local i = 0\n  while n > 0 do\n    local d = n\
    \ % 10\n    if d ~= 0 then\n      digits = digits .. d\n    end\n    n = n / 10\n\
    \    i = i + 1\n  end\n  if i == 0 then\n    return 0\n  end\n  return tonumber(digits)\n\
    end", "  local product = 1\n  local digit\n  for digit = 1, n do\n    if n % 2\
    \ == 1 then\n      product = product * digit\n    end\n    n = n / 2\n  end\n\
    \  return product\nend", "  if n < 0 then return 0 end\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local digits = math.floor(n)\n  if digits % 2 == 1 then\n\
    \    return 0\n  end\n  local product = 1\n  while digits > 0 do\n    product\
    \ = product * digits\n    digits = digits / 2\n  end\n  return product\nend",
  "  local product = 1\n  local digits = string.gmatch(n, \"%d*\") -- Split n into\
    \ digits and store in digits\n  for i = 1, #digits do\n    product = product *\
    \ tonumber(digits[i])\n  end\n  return product\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local product = 1\n  local digit\n  for digit = 2, #n do\n    product\
    \ = product * digit\n  end\n  return product\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  local digit = 1\n  while nDigits > 0 do\n    product =\
    \ product * digit\n    digit = nDigits - 1\n  end\n  return product\nend", " \
    \ if n < 0 then\n    return 0\n  end\n  local product = 1\n  local digit = n %\
    \ 10\n  while n > 0 do\n    product = product * digit\n    n = n / 10\n    digit\
    \ = n % 10\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  local product = 1\n  local digit\n  for digit = 2, #n do\n    if n[digit] %\
    \ 2 == 1 then\n      product = product * digit\n    end\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n\
    \    return n * digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n   \
    \ return n\n  else\n    local digits = math.floor(n/10)\n    local remainder =\
    \ n - 10*digits\n    return digits*10 + digits(remainder)\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n    local\
    \ sum = 0\n    for i = 1, n do\n      sum = sum + math.floor((n % 10) + 0.5)\n\
    \      n = math.floor((n / 10) + 0.5)\n    end\n    return sum\n  end\nend", " \
    \ if n < 10 then\n    return n\n  else\n    local digit = 1\n    local product\
    \ = 1\n    while n > 0 do\n      digit = n % 10\n      product = product * digit\n\
    \      n = n / 10\n    end\n    return product\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local product = 1\n  local digit = 1\n  while n > 0 do\n\
    \    digit = n % 10\n    product = product * digit\n    n = n / 10\n  end\n  return\
    \ product\nend", "  if n == 0 then\n    return 0\n  end\n  local digit = 1\n \
    \ local product = 1\n  while n > 0 do\n    digit = n % 10\n    product = product\
    \ * digit\n    n = n / 10\n  end\n  return product\nend", "  if n < 0 then\n \
    \   return 0\n  end\n  if n == 0 then\n    return 1\n  end\n  if n < 10 then\n\
    \    return n * digits(n - 1)\n  end\n  local digits = n % 10\n  if digits ==\
    \ 0 then\n    return 0\n  end\n  return digits(digits - 1) * 2\nend", "  local\
    \ product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product = product\
    \ * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  if n == 0 then\n\
    \    return 0\n  end\n  local digit = 1\n  local product = 1\n  while n > 0 do\n\
    \    digit = n % 10\n    product = product * digit\n    n = n / 10\n  end\n  return\
    \ product\nend", "  local product = 1\n  local digits = math.floor(n/10)\n  while\
    \ digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  if n < 10 then\n \
    \   return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n\
    \  else\n    return digits(n / 100) * 100 + digits(n % 100)\n  end\nend", "  local\
    \ product = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n    product\
    \ = product * math.floor(n/10)\n    n = math.floor(n/10)\n    digits = digits\
    \ - 1\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  elseif\
    \ n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n   \
    \ return digits*10 + digits(math.floor(n/10))\n  end\nend", "  local product =\
    \ 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n\
    \    end\n  end\n  return product\nend", "  if n == 0 then return 0 end\n  if\
    \ n % 2 == 1 then return 0 end\n  local digit = 1\n  while n >= 10 do\n    digit\
    \ = digit * 10\n    n = math.floor(n/10)\n  end\n  return digit\nend", "  local\
    \ product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product = product\
    \ * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local sum = 0\n\
    \    for i = 1, n do\n      if n % 2 == 1 then\n        sum = sum + 2\n      else\n\
    \        sum = sum + 1\n      end\n    end\n    return sum\n  end\nend", "  if\
    \ n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n/10) *\
    \ 10 + digits(n%10)\n  elseif n < 1000 then\n    return digits(n/100) * 100 +\
    \ digits(n%100) * 10 + digits(n%10)\n  else\n    return 0\n  end\nend", "  local\
    \ product = 1\n  local digit = 1\n  while n >= 1 do\n    digit = n % 10\n    product\
    \ = product * digit\n    n = math.floor(n/10)\n  end\n  return product\nend",
  "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  local digits = math.floor(n/10)\n\
    \  while digits > 0 do\n    product = product * digits % 10\n    digits = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  elseif n <\
    \ 100 then\n    return n * 2\n  elseif n < 1000 then\n    return n * 3\n  elseif\
    \ n < 10000 then\n    return n * 4\n  elseif n < 100000 then\n    return n * 5\n\
    \  elseif n < 1000000 then\n    return n * 6\n  elseif n < 10000000 then\n   \
    \ return n * 7\n  elseif n < 100000000 then\n    return n * 8\n  elseif n < 1000000000\
    \ then\n    return n * 9\n  else\n    return 0\n  end\nend", "  local product\
    \ = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n    product =\
    \ product * math.floor(n/10)\n    n = math.floor(n/10)\n    digits = digits -\
    \ 1\n  end\n  if n == 0 then\n    return 0\n  end\n  return product\nend", " \
    \ if n < 0 then return 0 end\n  local n1 = math.floor(n)\n  local n2 = math.floor(n/10)\n\
    \  local n3 = math.floor(n/100)\n  local n4 = math.floor(n/1000)\n  local n5 =\
    \ math.floor(n/10000)\n  local n6 = math.floor(n/100000)\n  local n7 = math.floor(n/1000000)\n\
    \  local n8 = math.floor(n/10000000)\n  local n9 = math.floor(n/100000000)\n \
    \ local n10 = math.floor(n/1000000000)\n  return n1 * 10 + n2 * 100 + n3 * 1000\
    \ + n4 * 10000 + n5 * 100000 + n6 * 1000000 + n7 * 10000000 + n8 * 10000000 +\
    \ n9 * 100000000 + n10 * 1000000000\nend", "  local digits = \"\"\n  local i =\
    \ 1\n  while n > 0 do\n    digits = digits .. string.format(\"%d\", n % 10)\n\
    \    n = math.floor(n / 10)\n    i = i + 1\n  end\n  if i == 1 then\n    return\
    \ 0\n  end\n  return digits\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n \
    \   n = n % 10\n  end\n  return product\nend", "  local product = 1\n  local digits\
    \ = string.gmatch(n, \"%d*\") -- Get all digits from string\n  for i = 1, #digits\
    \ do\n    if tonumber(digits[i]) then\n      product = product * tonumber(digits[i])\n\
    \    end\n  end\n  return product\nend", "  if n < 0 then return 0 end\n  local\
    \ nDigits = math.floor(n/10)\n  if n % 10 == 0 then return nDigits end\n  local\
    \ nOddDigits = math.floor(n/10)\n  return nDigits * digits(nOddDigits)\nend",
  "  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  elseif n <\
    \ 10 then\n    return n * digits(n - 1)\n  else\n    local digit = 1\n    while\
    \ n > 0 do\n      digit = digit * 2\n      n = n / 10\n    end\n    return digit\n\
    \  end\nend", "  if n < 0 then return 0 end\n  local digits = \"\"\n  local i\
    \ = 1\n  while n > 0 do\n    local d = n % 10\n    digits = d .. digits\n    n\
    \ = n / 10\n  end\n  return digits\nend", "  if n < 0 then\n    return 0\n  elseif\
    \ n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  local product = 1\n  local digit = 1\n  while n > 0 do\n    digit\
    \ = n % 10\n    product = product * digit\n    n = n / 10\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return n * 2\n  elseif n < 1000 then\n    return n * 3\n \
    \ elseif n < 10000 then\n    return n * 4\n  elseif n < 100000 then\n    return\
    \ n * 5\n  elseif n < 1000000 then\n    return n * 6\n  elseif n < 10000000 then\n\
    \    return n * 7\n  elseif n < 100000000 then\n    return n * 8\n  elseif n <\
    \ 1000000000 then\n    return n * 9\n  else\n    return n * 10\n  end\nend", " \
    \ if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n  \
    \  return n % 10 * digits(n / 10)\n  end\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,i))\n\
    \  end\n  return product\nend", "  local product = 1\n  local digits = tostring(n)\n\
    \  for i = 1, #digits do\n    if string.sub(digits, i, i) == string.sub(digits,\
    \ i+1, i+1) then\n      product = product * 2\n    else\n      product = product\
    \ * 10\n    end\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n\
    \  elseif n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  if n == 0 then return 0 end\n  if n % 2 == 0 then return n *\
    \ digits(n - 1) end\n  return digits(n / 2) * digits(n / 2)\nend", "  local product\
    \ = 1\n  local digits = string.gmatch(n, \"%d*\") -- Split n into digits and drop\
    \ the decimal point.\n  for i = 1, #digits do\n    product = product * tonumber(digits[i])\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ digit = 1\n  local product = 1\n  while n > 0 do\n    digit = n % 10\n    product\
    \ = product * digit\n    n = n / 10\n  end\n  return product\nend", "  if n <\
    \ 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n    return\
    \ digits*10 + digits(math.floor(n/10))\n  end\nend", "  local product = 1\n  local\
    \ i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i + 1\n   \
    \ n = n / 10\n  end\n  return product\nend", "  if n == 0 then\n    return 0\n\
    \  end\n  local digit = 1\n  local product = 1\n  while n > 0 do\n    digit =\
    \ n % 10\n    product = product * digit\n    n = math.floor(n/10)\n  end\n  return\
    \ product\nend", "  if n < 0 then return 0 end\n  local digits = math.floor(n/10)\n\
    \  if n % 10 == 0 then\n    return digits * 2\n  else\n    return digits\n  end\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local digit = 1\n  while n > 0\
    \ do\n    digit = n * digit\n    n = math.floor(n/10)\n  end\n  return digit\n\
    end", "  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  elseif\
    \ n % 2 == 1 then\n    return 0\n  else\n    return digits(n / 2)\n  end\nend",
  "  local digits = \"\"\n  local i = 1\n  while n > 0 do\n    digits = digits ..\
    \ math.floor(n/10)\n    n = math.mod(n, 10)\n    i = i + 1\n  end\n  if i == 1\
    \ then return digits end\n  return 0\nend", "  if n < 10 then\n    return n\n\
    \  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if n <\
    \ 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n    return\
    \ n % 10 * digits(n / 10)\n  end\nend", "  local product = 1\n  local digits =\
    \ math.floor(n/10)\n  while digits > 0 do\n    product = product * math.floor(n/10)\n\
    \    n = math.floor(n/10)\n    digits = digits - 1\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return n * digits(n\
    \ / 10)\n  elseif n < 1000 then\n    return n * digits(n / 100) * digits(n / 10)\n\
    \  else\n    return 0\n  end\nend", "  local product = 1\n  local digits = string.gmatch(n,\
    \ \"%d*\") -- Split n into digits and store in digits\n  for _, d in ipairs(digits)\
    \ do\n    if d % 2 == 1 then\n      product = product * d\n    end\n  end\n  return\
    \ product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    return n * digits(math.floor(n/10))\n  end\nend", "  local digits\
    \ = 0\n  while n > 0 do\n    digits = digits * 2 + n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return digits\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  else\n    local product = 1\n    for i = 1, n do\n   \
    \   if n % 2 == 1 then\n        product = product * 2\n      end\n      n = n\
    \ / 2\n    end\n    return product\n  end\nend", "  local product = 1\n  local\
    \ i = 1\n  while n > 0 do\n    product = product * i \n    i = i + 1\n    n =\
    \ n - 1\n  end\n  return product\nend", "  local digits = 0\n  while n > 0 do\n\
    \    digits = digits * 2 + n % 10\n    n = math.floor(n/10)\n  end\n  return digits\n\
    end", "  if n == 0 then\n    return 0\n  end\n  local sum = 0\n  local i = 1\n\
    \  while i <= n do\n    sum = sum + i % 2\n    i = i / 2\n  end\n  return sum\n\
    end", "  local product = 1\n  local digit = 1\n  while n > 0 do\n    product =\
    \ product * digit\n    digit = n % 10\n    n = n / 10\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    if n % 10 == 0 then\n      return 0\n    else\n      return digits*10 + n\
    \ % 10\n    end\n  end\nend", "  if n < 0 then return 0 end\n  local digit = 1\n\
    \  while n > 0 do\n    digit = n * digit\n    n = math.floor(n/10)\n  end\n  return\
    \ digit\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  elseif n < 100 then\n    return n * 2\n  elseif n < 1000 then\n    return\
    \ n * 3\n  elseif n < 10000 then\n    return n * 4\n  elseif n < 100000 then\n\
    \    return n * 5\n  elseif n < 1000000 then\n    return n * 6\n  elseif n < 10000000\
    \ then\n    return n * 7\n  elseif n < 100000000 then\n    return n * 8\n  elseif\
    \ n < 1000000000 then\n    return n * 9\n  else\n    return 0\n  end\nend", " \
    \ if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n  \
    \  return n * digits(math.floor(n/10))\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local product = 1\n  local digit = n % 10\n  while n > 0 do\n  \
    \  product = product * digit\n    n = n / 10\n    digit = n % 10\n  end\n  return\
    \ product\nend", "  local digits = \"\"\n  local i = 1\n  while n > 0 do\n   \
    \ digits = digits .. string.format(\"%d\", n % 10)\n    n = math.floor(n/10)\n\
    \  end\n  if digits == \"\" then\n    return 0\n  end\n  return tonumber(digits)\n\
    end", "  local product = 1\n  local digits = math.floor(n/10)\n  while digits\
    \ > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  if n < 10 then\n \
    \   return n\n  elseif n < 100 then\n    return n * digits(n / 10)\n  elseif n\
    \ < 1000 then\n    return n * digits(n / 100) * digits(n / 10)\n  else\n    return\
    \ 0\n  end\nend", "  local product = 1\n  local digits = math.floor(n/10)\n  while\
    \ digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  if n < 0 then\n  \
    \  return 0\n  elseif n == 0 then\n    return 1\n  elseif n < 10 then\n    return\
    \ n * digits(n - 1)\n  else\n    local digit = 1\n    while n > 0 do\n      digit\
    \ = 2 * digit\n      n = n / 10\n    end\n    return digit\n  end\nend", "  if\
    \ n < 0 then return 0 end\n  local digits = math.floor(n/10)\n  if n % 10 == 0\
    \ then return digits end\n  return digits * digits(math.floor(n/10))\nend", " \
    \ local nDigits = math.floor(math.log10(n))\n  if nDigits == 0 then\n    return\
    \ 0\n  else\n    local product = 1\n    for i = 1, nDigits do\n      product =\
    \ product * math.floor(n/10)\n      n = math.floor(n/10)\n    end\n    return\
    \ product\n  end\nend", "  if n < 0 then\n    return 0\n  elseif n == 0 then\n\
    \    return 1\n  elseif n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  local product = 1\n  local digits = string.gmatch(n, \"%d*\"\
    ) -- Split n into digits and drop the decimal point.\n  for i = 1, #digits do\n\
    \    product = product * tonumber(digits[i])\n  end\n  return product\nend", " \
    \ local product = 1\n  local digit = 1\n  while n ~= 0 do\n    digit = n % 10\n\
    \    product = product * digit\n    n = n / 10\n  end\n  return product\nend",
  "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n \
    \   local remainder = n % 10\n    return digits*10 + digits(remainder)\n  end\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n\
    \    local product = 1\n    for i = 1, n do\n      if n % 2 == 1 then\n      \
    \  product = product * 2\n      else\n        product = product * 3\n      end\n\
    \      n = n / 2\n    end\n    return product\n  end\nend", "  local product =\
    \ 1\n  local digits = string.gmatch(n, \"%d*\") -- get all digits as string\n\
    \  for i = 1, #digits do\n    product = product * tonumber(digits[i])\n  end\n\
    \  return product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n\
    \    return n\n  else\n    local digits = math.floor(n/10)\n    return digits*10\
    \ + digits(math.floor(n%10))\n  end\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend", "  local product\
    \ = 1\n  local digit = 1\n  while n > 0 do\n    product = product * digit\n  \
    \  digit = n % 10\n    n = n / 10\n  end\n  return product\nend", "  local product\
    \ = 1\n  local digits = string.gsub(n, \"%d+\", \"\")\n  for i = 1, #digits do\n\
    \    local digit = tonumber(digits[i])\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n  end\n  return product\nend", "  local product\
    \ = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n    product =\
    \ product * math.floor(n/10)\n    n = math.floor(n/10)\n    digits = digits -\
    \ 1\n  end\n  return product\nend", "  local product = 1\n  for i = 1, n do\n\
    \    if n % 2 == 1 then\n      product = product * i\n    end\n    n = n / 2\n\
    \  end\n  return product\nend", "  local digits = \"\"\n  for i = 1, n do\n  \
    \  digits = digits .. \"*\"\n  end\n  return tonumber(digits)\nend", "  local\
    \ product = 1\n  local digit = 1\n  while n > 0 do\n    digit = n % 10\n    product\
    \ = product * digit\n    n = math.floor(n/10)\n  end\n  return product\nend",
  "  local product = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n\
    \    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n    digits\
    \ = digits - 1\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n\
    \  elseif n < 10 then\n    return n\n  elseif n < 100 then\n    return n * 2\n\
    \  elseif n < 1000 then\n    return n * 3\n  elseif n < 10000 then\n    return\
    \ n * 4\n  elseif n < 100000 then\n    return n * 5\n  elseif n < 1000000 then\n\
    \    return n * 6\n  elseif n < 10000000 then\n    return n * 7\n  elseif n <\
    \ 100000000 then\n    return n * 8\n  elseif n < 1000000000 then\n    return n\
    \ * 9\n  else\n    return 0\n  end\nend", "  if n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return n * digits(n / 10)\n  elseif n < 1000 then\n    return\
    \ n * digits(n / 100) * digits(n / 10)\n  else\n    return 0\n  end\nend", " \
    \ if n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  local digits = math.floor(n/10)\n  if digits == 0 then\n    return\
    \ 0\n  elseif n % 10 == 0 then\n    return 0\n  else\n    return digits*10 + n\
    \ % 10\n  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n  \
    \  return n\n  else\n    local digits = math.floor(n/10)\n    return digits*10\
    \ + digits(math.floor(n/10))\n  end\nend", "  local product = 1\n  for i = 1,\
    \ n do\n    if n % 2 == 1 then\n      product = product * i\n    end\n  end\n\
    \  return product\nend", "  local digits = math.floor(n/10)\n  if n % 10 == 0\
    \ then\n    return 0\n  else\n    return digits*10 + n % 10\n  end\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  for\
    \ i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n  end\n\
    \  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local digits\
    \ = 1\n  while n > 0 do\n    digits = digits * n % 10\n    n = n / 10\n  end\n\
    \  return digits\nend", "  local product = 1\n  local digits = string.gmatch(n,\
    \ \"%d+\") -- Find all digits in n\n  for _, d in ipairs(digits) do\n    product\
    \ = product * tonumber(d)\n  end\n  return product\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local product = 1\n    for\
    \ i = 1, nDigits do\n      product = product * math.floor(n/10) % 10\n      n\
    \ = math.floor(n/10)\n    end\n    return product\n  end\nend", "  local product\
    \ = 1\n  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = n / 2\n  end\n  return product\nend", " \
    \ local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product\
    \ = product * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  local\
    \ product = 1\n  local digits = string.gmatch(n, \"%d*\") -- Find all digits in\
    \ the number\n  for _, digit in ipairs(digits) do\n    if digit % 2 == 1 then\
    \ -- If the digit is odd, multiply it by 2\n      product = product * 2\n    end\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  else\n    local product = 1\n    for i = 1, n do\n   \
    \   if n % 2 == 1 then\n        product = product * 2\n      end\n      n = n\
    \ / 2\n    end\n    return product\n  end\nend", "  local product = 1\n  local\
    \ digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product = product\
    \ * digit\n    end\n    n = n / 2\n  end\n  return product\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n\
    \    end\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  elseif\
    \ n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n   \
    \ local remainder = n - 10*digits\n    return digits(remainder) * 2 + digits\n\
    \  end\nend", "  local product = 1\n  local digits = math.floor(n/10)\n  while\
    \ digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  if n < 10 then\n \
    \   return n\n  else\n    local sum = 0\n    for i = 1, n do\n      sum = sum\
    \ + math.floor((n - i) / 2)\n    end\n    return sum\n  end\nend", "  if n < 0\
    \ then return 0 end\n  local digits = math.floor(n/10)\n  if n % 10 ~= 0 then\
    \ return 0 end\n  local product = 1\n  for i = 1, digits do\n    product = product\
    \ * math.floor(n/10)\n    n = n % 10\n  end\n  return product\nend", "  if n <\
    \ 0 then\n    return 0\n  end\n  local digit = 1\n  local product = 1\n  while\
    \ n > 0 do\n    digit = n % 10\n    product = product * digit\n    n = n / 10\n\
    \  end\n  return product\nend", "  local product = 1\n  for i = 1, n do\n    product\
    \ = product * math.floor((n % 10) + 0.5)\n    n = math.floor(n/10)\n  end\n  return\
    \ product\nend", "  local product = 1\n  local i = 1\n  while n > 0 do\n    product\
    \ = product * math.floor(n/10)\n    n = math.mod(n, 10)\n    i = i + 1\n  end\n\
    \  return product\nend", "  local product = 1\n  local i = 1\n  while i <= n do\n\
    \    product = product * i % 10\n    i = i + 1\n  end\n  return product\nend",
  "  local digits = 0\n  while n > 0 do\n    digits = digits * 10 + n % 10\n    n\
    \ = math.floor(n/10)\n  end\n  return digits\nend", "  local product = 1\n  for\
    \ i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n  end\n\
    \  return product\nend", "  local product = 1\n  local digits = math.floor(n/10)\n\
    \  while digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  if n == 0 then\n    return 0\n  end\n  return\
    \ product\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(n%10)\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  elseif n < 100 then\n    return n * digits(n / 10)\n  else\n    return\
    \ n * digits(n / 10) * digits(n / 100)\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  elseif n < 10 then\n    return n\n  elseif n % 2 == 0 then\n    return\
    \ n * digits(n / 2)\n  else\n    return digits(n / 2) * digits(n / 2)\n  end\n\
    end", "  if n < 10 then\n    return n\n  else\n    return digits(n / 10) * 10\
    \ + n % 10\n  end\nend", "  local product = 1\n  local digits = math.floor(n/10)\n\
    \  while digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
