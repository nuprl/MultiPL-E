name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a tuple (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a list.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  local function largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if\
    \ lst[i] < 0 then\n      if largest == nil then\n        largest = lst[i]\n  \
    \    else\n        largest = largest > lst[i] and largest or lst[i]\n      end\n\
    \    elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest =\
    \ lst[i]\n      else\n        smallest = smallest < lst[i] and smallest or lst[i]\n\
    \      end\n    end\n  end\n  return largest, smallest\nend", "  local function\
    \ is_negative(i)\n    return i < 0\n  end\n  local function is_positive(i)\n \
    \   return i >= 0\n  end\n  local function is_zero(i)\n    return i == 0\n  end\n\
    \  local function is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_or_zero(i)\n    return is_negative(i) or\
    \ is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n    return is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_list(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero_lists(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero(i)\n    return is_negative(i)\
    \ or is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero_lists_and_zero_lists(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero(i)\n    return\
    \ is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero_lists(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero_lists_and_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero_lists_and_zero_lists(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero_lists_and_zero_lists_and_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero_lists_and_zero_lists_and_zero_lists(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero_lists_and_zero_lists_and_zero_lists_and_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_lists_and_zero_lists_and_zero", "  if #lst ==\
    \ 0 then\n    return nil\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n      largest =\
    \ lst[i]\n    end\n    if smallest > lst[i] then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return largest, smallest\nend", "  local function helper(lst)\n\
    \    local max_negative = nil\n    local min_positive = nil\n    for _, value\
    \ in ipairs(lst) do\n      if value < 0 then\n        if max_negative == nil then\n\
    \          max_negative = value\n        else\n          max_negative = math.max(max_negative,\
    \ value)\n        end\n      elseif value > 0 then\n        if min_positive ==\
    \ nil then\n          min_positive = value\n        else\n          min_positive\
    \ = math.min(min_positive, value)\n        end\n      end\n    end\n    return\
    \ max_negative, min_positive\n  end\n  local max_negative, min_positive = helper(lst)\n\
    \  if max_negative == nil and min_positive == nil then\n    return nil, nil\n\
    \  else\n    return max_negative, min_positive\n  end\nend", "  local function\
    \ is_negative(i)\n    return i < 0\n  end\n  local function is_positive(i)\n \
    \   return i >= 0\n  end\n  local function is_zero(i)\n    return i == 0\n  end\n\
    \  local function is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_zero_and_positive(i)\n    return is_zero(i) and is_positive(i)\n\
    \  end\n  local function is_negative_and_zero(i)\n    return is_negative(i) and\
    \ is_zero(i)\n  end\n  local function is_zero_and_negative(i)\n    return is_zero(i)\
    \ and is_negative(i)\n  end\n  local function is_negative_and_negative(i)\n  \
    \  return is_negative(i) and is_negative(i)\n  end\n  local function is_zero_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative(i) and is_positive(i)\n  end\n  local function\
    \ is_negative_and_negative_and_positive(i)\n    return is_negative(i) and is_negative(i)\
    \ and is_positive(i)\n  end\n  local function is_zero_and_negative_and_negative(i)\n\
    \    return is_zero(i) and is_negative(i) and is_negative(i)\n  end\n  local function\
    \ is_negative_and_negative_and_negative(i)\n    return is_negative(i) and is_negative(i)\
    \ and is_negative(i)\n  end\n  local function is_zero_and_negative_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative(i) and is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative(i) and is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_zero_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative(i) and is_negative(i) and is_negative(i)\
    \ and is_positive(i)\n  end\n  local function is_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative(i) and is_negative(i) and is_negative(i)\
    \ and is_positive(i)\n  end\n  local function is_zero_and_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative(i) and is_negative(i) and is_negative(i)\
    \ and is_negative(i) and is_positive(i)\n  end\n  local function is_negative_and_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative(i) and is_negative(i) and is_negative(i)\
    \ and is_negative(i) and is_positive(i)\n  end\n  local function is_zero_and_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative(i) and is_negative(i) and is_negative(i)\
    \ and is_negative(i) and is_negative(i", "  local function helper(lst)\n    local\
    \ largest, smallest = nil, nil\n    for _, v in ipairs(lst) do\n      if v < 0\
    \ then\n        if largest == nil then\n          largest = v\n        else\n\
    \          largest = largest * 10 + v\n        end\n      elseif v > 0 then\n\
    \        if smallest == nil then\n          smallest = v\n        else\n     \
    \     smallest = smallest * 10 + v\n        end\n      end\n    end\n    return\
    \ largest, smallest\n  end\n  return helper(lst)\nend", "  local function helper(lst)\n\
    \    local smallest, largest = nil, nil\n    for i = 1, #lst do\n      if lst[i]\
    \ < smallest then\n        smallest = lst[i]\n      elseif lst[i] > largest then\n\
    \        largest = lst[i]\n      end\n    end\n    return smallest, largest\n\
    \  end\n  local smallest, largest = helper(lst)\n  if smallest == nil then\n \
    \   return nil, largest\n  elseif largest == nil then\n    return smallest, nil\n\
    \  else\n    return smallest, largest\n  end\nend", "  if #lst == 0 then\n   \
    \ return nil, nil\n  end\n  local smallest, largest = lst[1], lst[1]\n  for i\
    \ = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local function helper(lst)\n    local smallest,\
    \ largest = nil, nil\n    for i = 1, #lst do\n      if lst[i] < smallest then\n\
    \        smallest = lst[i]\n      elseif lst[i] > largest then\n        largest\
    \ = lst[i]\n      end\n    end\n    return smallest, largest\n  end\n  local smallest,\
    \ largest = helper(lst)\n  if smallest == nil and largest == nil then\n    return\
    \ nil, nil\n  end\n  return smallest, largest\nend", "  if #lst == 0 then return\
    \ nil, nil end\n  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if\
    \ lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return smallest,\
    \ largest\nend", "  if #lst == 0 then return nil, nil end\n  local smallest, largest\
    \ = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then smallest\
    \ = lst[i] end\n    if lst[i] > largest then largest = lst[i] end\n  end\n  return\
    \ smallest, largest\nend", "  local function is_negative(x)\n    return x < 0\n\
    \  end\n  local function is_positive(x)\n    return x > 0\n  end\n  local function\
    \ is_zero(x)\n    return x == 0\n  end\n  local function is_negative_and_positive(x)\n\
    \    return is_negative(x) and is_positive(x)\n  end\n  local function is_negative_or_zero(x)\n\
    \    return is_negative(x) or is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_positive(x)\n\
    \    return is_negative(x) or is_positive(x)\n  end\n  local function is_positive_or_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_negative(x)\n\
    \    return is_negative(x) or is_negative(x)\n  end\n  local function is_positive_or_negative(x)\n\
    \    return is_positive(x) or is_negative(x)\n  end\n  local function is_positive_or_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_positive_and_zero(x)\n\
    \    return is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local function\
    \ is_negative_or_positive_and_zero(x)\n    return is_negative(x) or is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n    return is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_negative_and_zero(x)\n\
    \    return is_negative(x) or is_negative(x) or is_zero(x)\n  end\n  local function\
    \ is_positive_or_negative_and_zero(x)\n    return is_positive(x) or is_negative(x)\
    \ or is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n    return is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_negative_or_zero(x)\n\
    \    return is_negative(x) or is_negative(x) or is_zero(x)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(x)\n    return is_positive(x) or is_negative(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_negative_or_zero(x)\n\
    \    return is_negative(x) or is_negative(x) or is_zero(x)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(x)\n    return is_positive(x) or is_negative(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_negative_or_zero(x)\n\
    \    return is_negative(x) or is_negative(x) or is_zero(x)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(x)\n    return is_positive(x) or is_negative(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_negative_or_zero(x)\n\
    \    return is_", "  local function is_negative(x)\n    return x < 0\n  end\n\
    \  local function is_positive(x)\n    return x > 0\n  end\n  local function is_zero(x)\n\
    \    return x == 0\n  end\n  local function is_none(x)\n    return x == nil\n\
    \  end\n  local function is_one(x)\n    return x == 1\n  end\n  local function\
    \ is_two(x)\n    return x == 2\n  end\n  local function is_three(x)\n    return\
    \ x == 3\n  end\n  local function is_four(x)\n    return x == 4\n  end\n  local\
    \ function is_five(x)\n    return x == 5\n  end\n  local function is_six(x)\n\
    \    return x == 6\n  end\n  local function is_seven(x)\n    return x == 7\n \
    \ end\n  local function is_eight(x)\n    return x == 8\n  end\n  local function\
    \ is_nine(x)\n    return x == 9\n  end\n  local function is_ten(x)\n    return\
    \ x == 10\n  end\n  local function is_eleven(x)\n    return x == 11\n  end\n \
    \ local function is_twelve(x)\n    return x == 12\n  end\n  local function is_thirteen(x)\n\
    \    return x == 13\n  end\n  local function is_fourteen(x)\n    return x == 14\n\
    \  end\n  local function is_fifteen(x)\n    return x == 15\n  end\n  local function\
    \ is_sixteen(x)\n    return x == 16\n  end\n  local function is_seventeen(x)\n\
    \    return x == 17\n  end\n  local function is_eighteen(x)\n    return x == 18\n\
    \  end\n  local function is_nineteen(x)\n    return x == 19\n  end\n  local function\
    \ is_twenty(x)\n    return x == 20\n  end\n  local function is_twenty_one(x)\n\
    \    return x == 21\n  end\n  local function is_twenty_two(x)\n    return x ==\
    \ 22\n  end\n  local function is_twenty_three(x)\n    return x == 23\n  end\n\
    \  local function is_twenty_four(x)\n    return x == 24\n  end\n  local function\
    \ is_twenty_five(x)\n    return x == 25\n  end\n  local function is_twenty_six(x)\n\
    \    return x == 26\n  end\n  local function is_twenty_seven(x)\n    return x\
    \ == 27\n  end\n  local function is_twenty_eight(x)\n    return x == 28\n  end\n\
    \  local function is_twenty_nine(x)\n    return x == 29\n  end\n  local function\
    \ is_thirty(x)\n    return x == 30 or x == 31 or x == 32\n  end\n  local function\
    \ is_thirty_one(x)\n    return x == 33\n", "  if #lst == 0 then\n    return nil,\
    \ nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local function is_negative(i)\n    return i < 0\n\
    \  end\n  local function is_positive(i)\n    return i > 0\n  end\n  local function\
    \ is_zero(i)\n    return i == 0\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_negative_and_zero(i)\n\
    \    return is_negative(i) or is_negative_or_zero(i)\n  end\n  local function\
    \ is_positive_or_positive_and_zero(i)\n    return is_positive(i) or is_positive_or_zero(i)\n\
    \  end\n  local function is_negative_or_positive_and_zero(i)\n    return is_negative(i)\
    \ or is_positive_or_zero(i)\n  end\n  local function is_negative_or_negative_or_zero(i)\n\
    \    return is_negative(i) or is_negative_or_negative(i)\n  end\n  local function\
    \ is_positive_or_positive_or_zero(i)\n    return is_positive(i) or is_positive_or_zero(i)\n\
    \  end\n  local function is_negative_or_negative_or_positive_and_zero(i)\n   \
    \ return is_negative(i) or is_negative_or_positive_and_zero(i)\n  end\n  local\
    \ function is_positive_or_positive_or_positive_and_zero(i)\n    return is_positive(i)\
    \ or is_positive_or_positive_and_zero(i)\n  end\n  local function is_negative_or_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_negative_or_positive_or_zero(i)\n  end\n  local\
    \ function is_positive_or_positive_or_negative_or_zero(i)\n    return is_positive(i)\
    \ or is_positive_or_negative_or_zero(i)\n  end\n  local function is_negative_or_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_negative_or_positive_or_zero(i)\n  end\n  local\
    \ function is_positive_or_positive_or_negative_or_positive_and_zero(i)\n    return\
    \ is_positive(i) or is_positive_or_negative_or_positive_and_zero(i)\n  end\n \
    \ local function is_negative_or_negative_or_positive_or_positive_and_zero(i)\n\
    \    return is_negative(i) or is_negative_or_negative_or_positive_and_zero(i)\n\
    \  end\n  local function is_positive_or_positive_or_negative_or_negative_or_zero(i)\n\
    \    return is_positive(i) or is_positive_or_negative_or_negative_or_zero(i)\n\
    \  end\n  local function is_negative_or_negative_or_positive_or_negative_or_zero(i)\n\
    \    return is_negative(i) or is_negative_or_negative_or_positive_or_zero(i)\n\
    \  end\n  local function is_positive_", "  if #lst == 0 then return nil, nil end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then largest = lst[i] end\n    if lst[i] < smallest then\
    \ smallest = lst[i] end\n  end\n  return largest, smallest\nend", "  local function\
    \ is_negative_integer(x)\n    return x ~= nil and x ~= false and x ~= 0 and x\
    \ < 0\n  end\n  local function is_positive_integer(x)\n    return x ~= nil and\
    \ x ~= false and x ~= 0 and x > 0\n  end\n  local function get_largest_integer(lst)\n\
    \    local largest = nil\n    for i = 1, #lst do\n      if is_negative_integer(lst[i])\
    \ then\n        if largest == nil then\n          largest = lst[i]\n        else\n\
    \          largest = largest < lst[i] and largest or lst[i]\n        end\n   \
    \   end\n    end\n    return largest\n  end\n  local function get_smallest_integer(lst)\n\
    \    local smallest = nil\n    for i = 1, #lst do\n      if is_positive_integer(lst[i])\
    \ then\n        if smallest == nil then\n          smallest = lst[i]\n       \
    \ else\n          smallest = smallest > lst[i] and smallest or lst[i]\n      \
    \  end\n      end\n    end\n    return smallest\n  end\n  local function get_largest_and_smallest_integers(lst)\n\
    \    local largest_integer = get_largest_integer(lst)\n    local smallest_integer\
    \ = get_smallest_integer(lst)\n    return largest_integer, smallest_integer\n\
    \  end\n  local largest_integer, smallest_integer = get_largest_and_smallest_integers(lst)\n\
    \  return largest_integer, smallest_integer\nend", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if largest < lst[i] then\n      largest = lst[i]\n    end\n    if smallest\
    \ > lst[i] then\n      smallest = lst[i]\n    end\n  end\n  return largest, smallest\n\
    end", "  local function is_negative(i)\n    return i < 0\n  end\n  local function\
    \ is_positive(i)\n    return i >= 0\n  end\n  local function is_zero(i)\n    return\
    \ i == 0\n  end\n  local function is_negative_and_positive(i)\n    return is_negative(i)\
    \ and is_positive(i)\n  end\n  local function is_negative_or_zero(i)\n    return\
    \ is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_list(i)\n    return is_negative_list(i) or is_positive_list(i)\
    \ or is_zero_list(i)\n  end\n  local function is_negative_or_positive_or_zero_tuple(i)\n\
    \    return is_negative_tuple(i) or is_positive_tuple(i) or is_zero_tuple(i)\n\
    \  end\n  local function is_negative_or_positive_or_zero_dict(i)\n    return is_negative_dict(i)\
    \ or is_positive_dict(i) or is_zero_dict(i)\n  end\n  local function is_negative_or_positive_or_zero_list_of_lists(i)\n\
    \    return is_negative_list_of_lists(i) or is_positive_list_of_lists(i) or is_zero_list_of_lists(i)\n\
    \  end\n  local function is_negative_or_positive_or_zero_list_of_tuples(i)\n \
    \   return is_negative_list_of_tuples(i) or is_positive_list_of_tuples(i) or is_zero_list_of_tuples(i)\n\
    \  end\n  local function is_negative_or_positive_or_zero_list_of_dicts(i)\n  \
    \  return is_negative_list_of_dicts(i) or is_positive_list_of_dicts(i) or is_zero_list_of_dicts(i)\n\
    \  end\n  local function is_negative_or_positive_or_zero_list_of_list_of_lists(i)\n\
    \    return is_negative_list_of_list_of_lists(i) or is_positive_list_of_list_of_lists(i)\
    \ or is_zero_list_of_list_of_lists(i)\n  end\n  local function is_negative_or_positive_or_zero_list_of_list_of_tuples(i)\n\
    \    return is_negative_list_of_list_of_tuples(i) or is_positive_list_of_list_of_tuples(i)\
    \ or is_zero_list_of_list_of_tuples(i)\n  end\n  local function is_negative_or_positive_or_zero_list_of_list_of_dicts(i)\n\
    \    return is_negative_list_of_list_of_dicts(i) or is_positive_list_of_list_of_dicts(i)\
    \ or is_zero_list_of_list_of_dicts(i)\n  end\n  local function is_negative_or_positive_or_zero_list_of_list_of_list_of_lists(i)\n\
    \    return is_negative_list_of_list_of_list_of_lists(i) or is_positive_list_of_list_of_list_of_lists(i)\
    \ or is_zero_list_of_list_of_list_of_lists(i)\n  end\n  local function is_negative_or_positive_or_zero_list_of_list_of_",
  "  local function is_negative_integer(x)\n    return x < 0 and x ~= nil\n  end\n\
    \  local function is_positive_integer(x)\n    return x ~= nil and x >= 0\n  end\n\
    \  local function is_none(x)\n    return x == nil\n  end\n  local function is_largest(x,\
    \ y)\n    return is_negative_integer(x) and is_positive_integer(y)\n  end\n  local\
    \ function is_smallest(x, y)\n    return is_positive_integer(x) and is_negative_integer(y)\n\
    \  end\n  local function is_largest(x, y)\n    return is_negative_integer(x) and\
    \ is_positive_integer(y)\n  end\n  local function is_smallest(x, y)\n    return\
    \ is_positive_integer(x) and is_negative_integer(y)\n  end\n  local function is_largest(x,\
    \ y)\n    return is_negative_integer(x) and is_positive_integer(y)\n  end\n  local\
    \ function is_smallest(x, y)\n    return is_positive_integer(x) and is_negative_integer(y)\n\
    \  end\n  local function is_largest(x, y)\n    return is_negative_integer(x) and\
    \ is_positive_integer(y)\n  end\n  local function is_smallest(x, y)\n    return\
    \ is_positive_integer(x) and is_negative_integer(y)\n  end\n  local function is_largest(x,\
    \ y)\n    return is_negative_integer(x) and is_positive_integer(y)\n  end\n  local\
    \ function is_smallest(x, y)\n    return is_positive_integer(x) and is_negative_integer(y)\n\
    \  end\n  local function is_largest(x, y)\n    return is_negative_integer(x) and\
    \ is_positive_integer(y)\n  end\n  local function is_smallest(x, y)\n    return\
    \ is_positive_integer(x) and is_negative_integer(y)\n  end\n  local function is_largest(x,\
    \ y)\n    return is_negative_integer(x) and is_positive_integer(y)\n  end\n  local\
    \ function is_smallest(x, y)\n    return is_positive_integer(x) and is_negative_integer(y)\n\
    \  end\n  local function is_largest(x, y)\n    return is_negative_integer(x) and\
    \ is_positive_integer(y)\n  end\n  local function is_smallest(x, y)\n    return\
    \ is_positive_integer(x) and is_negative_integer(y)\n  end\n  local function is_largest(x,\
    \ y)\n    return is_negative_integer(x) and is_positive_integer(y)\n  end\n  local\
    \ function is_smallest(x, y)\n    return is_positive_integer(x) and is_negative_integer(y)\n\
    \  end\n  local function is_largest(x, y)\n    return is_negative_integer(x) and\
    \ is_positive_integer(y)\n  end\n  local function is_smallest(x, y)\n    return\
    \ is_positive_integer(x) and is_negative_integer(y)\n  end\n", "  local function\
    \ helper(lst)\n    local largest = nil\n    local smallest = nil\n    for i =\
    \ 1, #lst do\n      if lst[i] < 0 then\n        if largest == nil then\n     \
    \     largest = lst[i]\n        else\n          largest = largest * 10 + lst[i]\n\
    \        end\n      elseif lst[i] > 0 then\n        if smallest == nil then\n\
    \          smallest = lst[i]\n        else\n          smallest = smallest * 10\
    \ + lst[i]\n        end\n      end\n    end\n    return largest, smallest\n  end\n\
    \  local largest, smallest = helper(lst)\n  if largest == nil then\n    return\
    \ smallest\n  elseif smallest == nil then\n    return largest\n  else\n    return\
    \ largest, smallest\n  end\nend", "  local function is_negative(num)\n    return\
    \ num < 0\n  end\n  local function is_positive(num)\n    return num > 0\n  end\n\
    \  local function is_zero(num)\n    return num == 0\n  end\n  local function is_none(num)\n\
    \    return num == nil\n  end\n  local function is_integer(num)\n    return type(num)\
    \ == 'number' and num % 1 == 0\n  end\n  local function is_list(num)\n    return\
    \ type(num) == 'table' and num.__len__() == 1\n  end\n  local function is_pair(num)\n\
    \    return type(num) == 'table' and num.__len__() == 2\n  end\n  local function\
    \ is_pair_list(num)\n    return type(num) == 'table' and num.__len__() == 2 and\
    \ is_pair(num[1])\n  end\n  local function is_list(num)\n    return type(num)\
    \ == 'table' and num.__len__() > 0\n  end\n  local function is_pair_list(num)\n\
    \    return type(num) == 'table' and num.__len__() > 0 and is_pair(num[1])\n \
    \ end\n  local function is_pair(num)\n    return type(num) == 'table' and num.__len__()\
    \ == 2 and is_pair(num[1])\n  end\n  local function is_pair_list(num)\n    return\
    \ type(num) == 'table' and num.__len__() > 0 and is_pair(num[1])\n  end\n  local\
    \ function is_pair_list(num)\n    return type(num) == 'table' and num.__len__()\
    \ == 2 and is_pair(num[1])\n  end\n  local function is_pair_list(num)\n    return\
    \ type(num) == 'table' and num.__len__() > 0 and is_pair(num[1])\n  end\n  local\
    \ function is_pair_list(num)\n    return type(num) == 'table' and num.__len__()\
    \ == 2 and is_pair(num[1])\n  end\n  local function is_pair_list(num)\n    return\
    \ type(num) == 'table' and num.__len__() > 0 and is_pair(num[1])\n  end\n  local\
    \ function is_pair_list(num)\n    return type(num) == 'table' and num.__len__()\
    \ == 2 and is_pair(num[1])\n  end\n  local function is_pair_list(num)\n    return\
    \ type(num) == 'table' and num.__len__() > 0 and is_pair(num[1])\n  end\n  local\
    \ function is_pair_list(num)\n    return type(num) == 'table' and num.__len__()\
    \ == 2 and is_pair(num[1])\n  end\n  local function is_pair_list(num)\n    return\
    \ type(num) == 'table' and num.__len__() > 0 and is_pair(num[1])\n  end\n  local\
    \ function is_pair_list(num)\n    return type(num) == 'table' and num.__len__()\
    \ == 2 and is_pair(num[1])\n  end\n  local function is_pair_list(num)\n    return\
    \ type(num) == 'table' and ", "  local function is_negative(x)\n    return x <\
    \ 0\n  end\n  local function is_positive(x)\n    return x > 0\n  end\n  local\
    \ function is_zero(x)\n    return x == 0\n  end\n  local function is_none(x)\n\
    \    return x == nil\n  end\n  local function is_one(x)\n    return x == 1\n \
    \ end\n  local function is_two(x)\n    return x == 2\n  end\n  local function\
    \ is_three(x)\n    return x == 3\n  end\n  local function is_four(x)\n    return\
    \ x == 4\n  end\n  local function is_five(x)\n    return x == 5\n  end\n  local\
    \ function is_six(x)\n    return x == 6\n  end\n  local function is_seven(x)\n\
    \    return x == 7\n  end\n  local function is_eight(x)\n    return x == 8\n \
    \ end\n  local function is_nine(x)\n    return x == 9\n  end\n  local function\
    \ is_ten(x)\n    return x == 10\n  end\n  local function is_eleven(x)\n    return\
    \ x == 11\n  end\n  local function is_twelve(x)\n    return x == 12\n  end\n \
    \ local function is_thirteen(x)\n    return x == 13\n  end\n  local function is_fourteen(x)\n\
    \    return x == 14\n  end\n  local function is_fifteen(x)\n    return x == 15\n\
    \  end\n  local function is_sixteen(x)\n    return x == 16\n  end\n  local function\
    \ is_seventeen(x)\n    return x == 17\n  end\n  local function is_eighteen(x)\n\
    \    return x == 18\n  end\n  local function is_nineteen(x)\n    return x == 19\n\
    \  end\n  local function is_twenty(x)\n    return x == 20\n  end\n  local function\
    \ is_twenty_one(x)\n    return x == 21\n  end\n  local function is_twenty_two(x)\n\
    \    return x == 22\n  end\n  local function is_twenty_three(x)\n    return x\
    \ == 23\n  end\n  local function is_twenty_four(x)\n    return x == 24\n  end\n\
    \  local function is_twenty_five(x)\n    return x == 25\n  end\n  local function\
    \ is_twenty_six(x)\n    return x == 26\n  end\n  local function is_twenty_seven(x)\n\
    \    return x == 27\n  end\n  local function is_twenty_eight(x)\n    return x\
    \ == 28\n  end\n  local function is_twenty_nine(x)\n    return x == 29\n  end\n\
    \  local function is_thirty(x)\n    return x == 30 or x == 31 or x == 32 or x\
    \ == 33 or x == 34 or x == 35 or x == 36 or x == 37 or ", "  local function is_negative(x)\n\
    \    return x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n\
    \  end\n  local function is_zero(x)\n    return x == 0\n  end\n  local function\
    \ is_negative_and_positive(x)\n    return is_negative(x) and is_positive(x)\n\
    \  end\n  local function is_negative_or_zero(x)\n    return is_negative(x) or\
    \ is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n    return is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_positive_or_zero(x)\n\
    \    return is_negative_and_positive(x) or is_positive_or_zero(x)\n  end\n  local\
    \ function is_negative_or_negative_or_zero(x)\n    return is_negative_or_positive(x)\
    \ or is_negative_or_zero(x)\n  end\n  local function is_positive_or_negative_or_zero(x)\n\
    \    return is_positive_or_positive(x) or is_negative_or_zero(x)\n  end\n  local\
    \ function is_positive_or_negative_or_positive_or_zero(x)\n    return is_positive_or_negative(x)\
    \ or is_positive_or_zero(x)\n  end\n  local function is_positive_or_negative_or_negative_or_zero(x)\n\
    \    return is_positive_or_negative_or_positive(x) or is_negative_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative_or_negative(x) or is_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative_or_negative_or_positive(x) or is_negative_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative_or_negative_or_negative(x) or is_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative_or_negative_or_negative(x) or is_negative_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative_or_negative_or_negative(x) or is_negative_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative_or_negative_or_negative(x) or is_negative_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative_or_negative_or_negative(x) or is_negative_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_", "  if #lst == 0 then\n   \
    \ return nil\n  end\n  local max_negative = nil\n  local min_positive = nil\n\
    \  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n\
    \        max_negative = lst[i]\n      else\n        if max_negative < lst[i] then\n\
    \          max_negative = lst[i]\n        end\n      end\n    else\n      if min_positive\
    \ == nil then\n        min_positive = lst[i]\n      else\n        if min_positive\
    \ > lst[i] then\n          min_positive = lst[i]\n        end\n      end\n   \
    \ end\n  end\n  return max_negative, min_positive\nend", "  local function is_negative_integer(x)\n\
    \    return x < 0 and x ~= math.floor(x)\n  end\n  local function is_positive_integer(x)\n\
    \    return x >= 0 and x ~= math.floor(x)\n  end\n  local function is_none(x)\n\
    \    return x == nil or x == false\n  end\n  local function is_integer(x)\n  \
    \  return type(x) == \"number\" and x ~= math.floor(x)\n  end\n  local function\
    \ is_pair(x)\n    return type(x) == \"table\" and type(x[1]) == \"number\"\n \
    \ end\n  local function is_table(x)\n    return type(x) == \"table\"\n  end\n\
    \  local function is_list(t)\n    return type(t) == \"table\" and type(t[1]) ==\
    \ \"list\"\n  end\n  local function is_number(x)\n    return type(x) == \"number\"\
    \n  end\n  local function is_string(x)\n    return type(x) == \"string\"\n  end\n\
    \  local function is_function(x)\n    return type(x) == \"function\"\n  end\n\
    \  local function is_boolean(x)\n    return type(x) == \"boolean\"\n  end\n  local\
    \ function is_nil(x)\n    return type(x) == \"nil\"\n  end\n  local function is_true(x)\n\
    \    return type(x) == \"table\" and type(x[1]) == \"boolean\"\n  end\n  local\
    \ function is_false(x)\n    return type(x) == \"table\" and type(x[1]) == \"boolean\"\
    \n  end\n  local function is_error(x)\n    return type(x) == \"table\" and type(x[1])\
    \ == \"error\"\n  end\n  local function is_table(x)\n    return type(x) == \"\
    table\"\n  end\n  local function is_list(t)\n    return type(t) == \"table\" and\
    \ type(t[1]) == \"list\"\n  end\n  local function is_number(x)\n    return type(x)\
    \ == \"number\"\n  end\n  local function is_string(x)\n    return type(x) == \"\
    string\"\n  end\n  local function is_function(x)\n    return type(x) == \"function\"\
    \n  end\n  local function is_boolean(x)\n    return type(x) == \"boolean\"\n \
    \ end\n  local function is_nil(x)\n    return type(x) == \"nil\"\n  end\n  local\
    \ function is_true(x)\n    return type(x) == \"table\" and type(x[1]) == \"boolean\"\
    \n  end\n  local function is_false(x)\n    return type(x) == \"table\" and type(x[1])\
    \ == \"boolean\"\n  end\n  local function is_error(x)\n    return type(x) == \"\
    table\" and type(x[1]) == \"error\"\n  end\n  local function is_table(x)\n   \
    \ return type(x) == \"table\"\n  end\n  local function is_list(t)\n    return\
    \ type(t) == \"table\" and type(t[1]) == \"list\"\n  end\n  local function ",
  "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n\
    \    return nil, nil\n  end\n  local largest = nil\n  local smallest = nil\n \
    \ for i = 1, #lst do\n    local x = lst[i]\n    if x < 0 then\n      if largest\
    \ == nil then\n        largest = x\n      else\n        largest = largest * 10\
    \ + x\n      end\n    elseif x > 0 then\n      if smallest == nil then\n     \
    \   smallest = x\n      else\n        smallest = smallest * 10 + x\n      end\n\
    \    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", " \
    \ if #lst == 0 then\n    return nil, nil\n  end\n  local smallest, largest = lst[1],\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return largest, smallest\nend", "  local function is_negative(x)\n\
    \    return x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n\
    \  end\n  local function is_zero(x)\n    return x == 0\n  end\n  local function\
    \ is_negative_and_positive(x)\n    return is_negative(x) and is_positive(x)\n\
    \  end\n  local function is_negative_or_zero(x)\n    return is_negative(x) or\
    \ is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n    return is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_positive_or_zero(x)\n\
    \    return is_negative_and_positive(x) or is_positive_or_zero(x)\n  end\n  local\
    \ function is_negative_or_negative_or_zero(x)\n    return is_negative_or_positive(x)\
    \ or is_negative_or_zero(x)\n  end\n  local function is_positive_or_negative_or_zero(x)\n\
    \    return is_positive_or_positive(x) or is_negative_or_zero(x)\n  end\n  local\
    \ function is_positive_or_negative_or_positive_or_zero(x)\n    return is_positive_or_negative(x)\
    \ or is_negative_or_positive_or_zero(x)\n  end\n  local function is_positive_or_negative_or_negative_or_zero(x)\n\
    \    return is_positive_or_negative(x) or is_negative_or_negative_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative(x) or is_negative_or_negative_or_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative(x) or is_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative(x) or is_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative(x) or is_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative(x) or is_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_positive_or_negative(x) or is_negative_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_negative_or_negative_or_negative_or_negative_or_negative_or_positive_",
  "  local function is_negative(x)\n    return x < 0\n  end\n  local function is_positive(x)\n\
    \    return x > 0\n  end\n  local function is_zero(x)\n    return x == 0\n  end\n\
    \  local function is_negative_and_positive(x)\n    return is_negative(x) and is_positive(x)\n\
    \  end\n  local function is_negative_and_zero(x)\n    return is_negative(x) and\
    \ is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n    return is_positive(x)\
    \ and is_zero(x)\n  end\n  local function is_negative_and_zero(x)\n    return\
    \ is_negative(x) and is_zero(x)\n  end\n  local function is_positive_and_negative(x)\n\
    \    return is_positive(x) and is_negative(x)\n  end\n  local function is_negative_and_negative(x)\n\
    \    return is_negative(x) and is_negative(x)\n  end\n  local function is_positive_and_positive_and_negative(x)\n\
    \    return is_positive(x) and is_positive(x) and is_negative(x)\n  end\n  local\
    \ function is_negative_and_positive_and_negative(x)\n    return is_negative(x)\
    \ and is_positive(x) and is_negative(x)\n  end\n  local function is_positive_and_negative_and_negative(x)\n\
    \    return is_positive(x) and is_negative(x) and is_negative(x)\n  end\n  local\
    \ function is_negative_and_negative_and_negative(x)\n    return is_negative(x)\
    \ and is_negative(x) and is_negative(x)\n  end\n  local function is_positive_and_positive_and_negative_and_negative(x)\n\
    \    return is_positive(x) and is_positive(x) and is_negative(x) and is_negative(x)\n\
    \  end\n  local function is_negative_and_positive_and_negative_and_negative(x)\n\
    \    return is_negative(x) and is_positive(x) and is_negative(x) and is_negative(x)\n\
    \  end\n  local function is_positive_and_negative_and_positive_and_negative(x)\n\
    \    return is_positive(x) and is_negative(x) and is_positive(x) and is_negative(x)\n\
    \  end\n  local function is_negative_and_negative_and_positive_and_negative(x)\n\
    \    return is_negative(x) and is_negative(x) and is_positive(x) and is_negative(x)\n\
    \  end\n  local function is_positive_and_negative_and_negative_and_positive(x)\n\
    \    return is_positive(x) and is_negative(x) and is_negative(x) and is_positive(x)\n\
    \  end\n  local function is_negative_and_negative_and_positive_and_positive(x)\n\
    \    return is_negative(x) and is_negative(x) and is_positive(x) and is_positive(x)\n\
    \  end\n  local function is_positive_and_negative_and_negative_and_positive_and_positive(x)\n\
    \    return is_positive(x) and is_negative(x) and is_negative(x) and is_positive(x)\
    \ and is_positive(x)\n  end\n  local function is_negative_and_negative_and_positive_and_positive_and_positive(x)\n\
    \    return is_negative(x", "  local function helper(lst)\n    local smallest,\
    \ largest = nil, nil\n    for i = 1, #lst do\n      if lst[i] < smallest then\n\
    \        smallest = lst[i]\n      end\n      if lst[i] > largest then\n      \
    \  largest = lst[i]\n      end\n    end\n    return smallest, largest\n  end\n\
    \  return helper(lst)\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    local x = lst[i]\n\
    \    if x < 0 then\n      if largest == nil then\n        largest = x\n      else\n\
    \        largest = largest * 10 + x\n      end\n    else\n      if smallest ==\
    \ nil then\n        smallest = x\n      else\n        smallest = smallest * 10\
    \ + x\n      end\n    end\n  end\n  return largest, smallest\nend", "  local function\
    \ is_negative(num)\n    return num < 0\n  end\n  local function is_positive(num)\n\
    \    return num > 0\n  end\n  local function is_zero(num)\n    return num == 0\n\
    \  end\n  local function is_none(num)\n    return num == nil\n  end\n  local function\
    \ is_integer(num)\n    return type(num) == 'number' and num % 1 == 0\n  end\n\
    \  local function is_list(lst)\n    return type(lst) == 'table' and lst ~= nil\n\
    \  end\n  local function is_pair(lst)\n    return type(lst) == 'table' and next(lst)\
    \ ~= nil\n  end\n  local function is_tuple(lst)\n    return type(lst) == 'table'\
    \ and next(lst) == nil\n  end\n  local function is_dict(lst)\n    return type(lst)\
    \ == 'table' and next(lst) == nil and next(lst) == nil\n  end\n  local function\
    \ is_set(lst)\n    return type(lst) == 'table' and next(lst) == nil and next(lst)\
    \ == nil\n  end\n  local function is_function(lst)\n    return type(lst) == 'table'\
    \ and next(lst) == nil and next(lst) == nil\n  end\n  local function is_function(lst)\n\
    \    return type(lst) == 'table' and next(lst) == nil and next(lst) == nil\n \
    \ end\n  local function is_function(lst)\n    return type(lst) == 'table' and\
    \ next(lst) == nil and next(lst) == nil\n  end\n  local function is_function(lst)\n\
    \    return type(lst) == 'table' and next(lst) == nil and next(lst) == nil\n \
    \ end\n  local function is_function(lst)\n    return type(lst) == 'table' and\
    \ next(lst) == nil and next(lst) == nil\n  end\n  local function is_function(lst)\n\
    \    return type(lst) == 'table' and next(lst) == nil and next(lst) == nil\n \
    \ end\n  local function is_function(lst)\n    return type(lst) == 'table' and\
    \ next(lst) == nil and next(lst) == nil\n  end\n  local function is_function(lst)\n\
    \    return type(lst) == 'table' and next(lst) == nil and next(lst) == nil\n \
    \ end\n  local function is_function(lst)\n    return type(lst) == 'table' and\
    \ next(lst) == nil and next(lst) == nil\n  end\n  local function is_function(lst)\n\
    \    return type(lst) == 'table' and next(lst) == nil and next(lst) == nil\n \
    \ end\n  local function is_function(lst)\n    return type(lst) == 'table' and\
    \ next(lst) == nil and next(lst) == nil\n  end\n  local function is_function(lst)\n\
    \    return type(lst) == 'table' and next(lst) == nil and next(lst) == nil\n \
    \ end\n  ", "  local function is_negative(x)\n    return x < 0\n  end\n  local\
    \ function is_positive(x)\n    return x > 0\n  end\n  local function is_zero(x)\n\
    \    return x == 0\n  end\n  local function is_negative_and_positive(x)\n    return\
    \ is_negative(x) and is_positive(x)\n  end\n  local function is_negative_or_zero(x)\n\
    \    return is_negative(x) or is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_zero_and_positive(x)\n\
    \    return is_negative_or_zero(x) and is_positive_or_zero(x)\n  end\n  local\
    \ function is_negative_or_zero_and_negative(x)\n    return is_negative_or_zero(x)\
    \ and is_negative_and_positive(x)\n  end\n  local function is_positive_or_zero_and_negative(x)\n\
    \    return is_positive_or_zero(x) and is_negative_and_positive(x)\n  end\n  local\
    \ function is_negative_or_zero_and_zero(x)\n    return is_negative_or_zero(x)\
    \ and is_zero(x)\n  end\n  local function is_positive_or_zero_and_zero(x)\n  \
    \  return is_positive_or_zero(x) and is_zero(x)\n  end\n  local function is_negative_or_zero_and_zero_and_positive(x)\n\
    \    return is_negative_or_zero(x) and is_positive_or_zero(x)\n  end\n  local\
    \ function is_positive_or_zero_and_zero_and_positive(x)\n    return is_positive_or_zero(x)\
    \ and is_zero(x)\n  end\n  local function is_negative_or_zero_and_zero_and_negative(x)\n\
    \    return is_negative_or_zero(x) and is_negative_and_positive(x)\n  end\n  local\
    \ function is_positive_or_zero_and_zero_and_negative(x)\n    return is_positive_or_zero(x)\
    \ and is_negative_and_positive(x)\n  end\n  local function is_negative_or_zero_and_zero_and_zero(x)\n\
    \    return is_negative_or_zero(x) and is_zero(x)\n  end\n  local function is_positive_or_zero_and_zero_and_zero(x)\n\
    \    return is_positive_or_zero(x) and is_zero(x)\n  end\n  local function is_negative_or_zero_and_zero_and_zero_and_positive(x)\n\
    \    return is_negative_or_zero(x) and is_positive_or_zero(x)\n  end\n  local\
    \ function is_positive_or_zero_and_zero_and_zero_and_positive(x)\n    return is_positive_or_zero(x)\
    \ and is_zero(x)\n  end\n  local function is_negative_or_zero_and_zero_and_zero_and_negative(x)\n\
    \    return is_negative_or_zero(x) and is_negative_and_positive(x)\n  end\n  local\
    \ function is_positive_or_zero_and_zero_and_zero_and_negative(x)\n    return is_positive_or_zero(x)\
    \ and is_negative_and_positive(x)\n  end\n  local function is_negative_or_zero",
  "  local function helper(lst)\n    local positive, negative = nil, nil\n    for\
    \ i = 1, #lst do\n      if lst[i] > 0 then\n        positive = lst[i]\n      elseif\
    \ lst[i] < 0 then\n        negative = lst[i]\n      end\n    end\n    if positive\
    \ ~= nil and negative ~= nil then\n      return negative, positive\n    elseif\
    \ positive ~= nil then\n      return positive, nil\n    elseif negative ~= nil\
    \ then\n      return nil, negative\n    end\n  end\n  return helper(lst)\nend",
  "  if #lst == 0 then\n    return nil\n  end\n  local largest = nil\n  local smallest\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest == nil\
    \ then\n        largest = lst[i]\n      else\n        largest = largest * 10 +\
    \ lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n\
    \        smallest = lst[i]\n      else\n        smallest = smallest * 10 + lst[i]\n\
    \      end\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then\n    return nil, nil\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  local function is_negative_integer(integer)\n\
    \    return integer < 0\n  end\n  local function is_positive_integer(integer)\n\
    \    return integer > 0\n  end\n  local function get_largest_integer(integers)\n\
    \    local largest = nil\n    for integer in integers do\n      if is_negative_integer(integer)\
    \ then\n        if largest == nil then\n          largest = integer\n        else\n\
    \          largest = math.max(largest, integer)\n        end\n      elseif is_positive_integer(integer)\
    \ then\n        if largest == nil then\n          largest = integer\n        else\n\
    \          largest = math.min(largest, integer)\n        end\n      end\n    end\n\
    \    return largest\n  end\n  local function get_smallest_integer(integers)\n\
    \    local smallest = nil\n    for integer in integers do\n      if is_negative_integer(integer)\
    \ then\n        if smallest == nil then\n          smallest = integer\n      \
    \  else\n          smallest = math.min(smallest, integer)\n        end\n     \
    \ elseif is_positive_integer(integer) then\n        if smallest == nil then\n\
    \          smallest = integer\n        else\n          smallest = math.max(smallest,\
    \ integer)\n        end\n      end\n    end\n    return smallest\n  end\n  local\
    \ function get_largest_and_smallest_integers(integers)\n    local largest_integer\
    \ = get_largest_integer(integers)\n    local smallest_integer = get_smallest_integer(integers)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    else\n      return nil, nil\n    end\n\
    \  end\n  local function get_largest_and_smallest_tuples(tuples)\n    local largest_tuple\
    \ = nil\n    local smallest_tuple = nil\n    for tuple in tuples do\n      local\
    \ largest_integer, smallest_integer = get_largest_and_smallest_integers(tuple)\n\
    \      if largest_integer ~= nil and smallest_integer ~= nil then\n        if\
    \ largest_tuple == nil then\n          largest_tuple = tuple\n        else\n \
    \         largest_tuple = math.max(largest_tuple, tuple)\n        end\n      \
    \  if smallest_tuple == nil then\n          smallest_tuple = tuple\n        else\n\
    \          smallest_tuple = math.min(smallest_tuple, tuple)\n        end\n   \
    \   end\n    end\n    if largest_tuple ~= nil and smallest_tuple ~= nil then\n\
    \      return largest_tuple, smallest_tuple\n    else\n      return nil, nil\n\
    \    end\n  end", "  if #lst == 0 then\n    return nil\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local largest = nil\n  local smallest =\
    \ nil\n  for i = 1, #lst do\n    local x = lst[i]\n    if x < 0 then\n      if\
    \ largest == nil then\n        largest = x\n      else\n        largest = largest\
    \ * 10 + x\n      end\n    elseif x > 0 then\n      if smallest == nil then\n\
    \        smallest = x\n      else\n        smallest = smallest * 10 + x\n    \
    \  end\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n\
    \    return nil, nil\n  end\n  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    local v = lst[i]\n    if v < 0 then\n     \
    \ if max_negative == nil then\n        max_negative = v\n      else\n        if\
    \ v > max_negative then\n          max_negative = v\n        end\n      end\n\
    \    else\n      if min_positive == nil then\n        min_positive = v\n     \
    \ else\n        if v < min_positive then\n          min_positive = v\n       \
    \ end\n      end\n    end\n  end\n  return max_negative, min_positive\nend", " \
    \ if #lst == 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local function\
    \ helper(lst)\n    local smallest, largest = nil, nil\n    for i = 1, #lst do\n\
    \      if lst[i] < smallest then\n        smallest = lst[i]\n      end\n     \
    \ if lst[i] > largest then\n        largest = lst[i]\n      end\n    end\n   \
    \ return smallest, largest\n  end\n  local smallest, largest = helper(lst)\n \
    \ if smallest == nil then\n    return largest\n  else\n    return smallest, largest\n\
    \  end\nend", "  if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest or largest\
    \ == nil then\n      largest = lst[i]\n    elseif lst[i] < smallest or smallest\
    \ == nil then\n      smallest = lst[i]\n    end\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n    return\
    \ lst\n  else\n    local max_negative = lst[1]\n    local min_positive = lst[1]\n\
    \    for i = 2, #lst do\n      if max_negative < lst[i] then\n        max_negative\
    \ = lst[i]\n      elseif min_positive > lst[i] then\n        min_positive = lst[i]\n\
    \      end\n    end\n    return max_negative, min_positive\n  end\nend", "  local\
    \ function is_negative(num)\n    return num < 0\n  end\n  local function is_positive(num)\n\
    \    return num > 0\n  end\n  local function is_zero(num)\n    return num == 0\n\
    \  end\n  local function is_negative_integer(num)\n    return is_negative(num)\
    \ and is_integer(num)\n  end\n  local function is_positive_integer(num)\n    return\
    \ is_positive(num) and is_integer(num)\n  end\n  local function is_zero_integer(num)\n\
    \    return is_zero(num) and is_integer(num)\n  end\n  local function is_negative_integer_list(lst)\n\
    \    return is_negative_integer(unpack(lst))\n  end\n  local function is_positive_integer_list(lst)\n\
    \    return is_positive_integer(unpack(lst))\n  end\n  local function is_zero_integer_list(lst)\n\
    \    return is_zero_integer(unpack(lst))\n  end\n  local function is_negative_integer_list_list(lst)\n\
    \    return is_negative_integer_list(unpack(lst))\n  end\n  local function is_positive_integer_list_list(lst)\n\
    \    return is_positive_integer_list(unpack(lst))\n  end\n  local function is_zero_integer_list_list(lst)\n\
    \    return is_zero_integer_list(unpack(lst))\n  end\n  local function is_negative_integer_list_list_list(lst)\n\
    \    return is_negative_integer_list_list(unpack(lst))\n  end\n  local function\
    \ is_positive_integer_list_list_list(lst)\n    return is_positive_integer_list_list(unpack(lst))\n\
    \  end\n  local function is_zero_integer_list_list_list(lst)\n    return is_zero_integer_list_list(unpack(lst))\n\
    \  end\n  local function is_negative_integer_list_list_list_list(lst)\n    return\
    \ is_negative_integer_list_list_list(unpack(lst))\n  end\n  local function is_positive_integer_list_list_list_list(lst)\n\
    \    return is_positive_integer_list_list_list(unpack(lst))\n  end\n  local function\
    \ is_zero_integer_list_list_list_list(lst)\n    return is_zero_integer_list_list_list(unpack(lst))\n\
    \  end\n  local function is_negative_integer_list_list_list_list_list(lst)\n \
    \   return is_negative_integer_list_list_list_list(unpack(lst))\n  end\n  local\
    \ function is_positive_integer_list_list_list_list_list(lst)\n    return is_positive_integer_list_list_list_list_list(unpack(lst))\n\
    \  end\n  local function is_zero_integer_list_list_list_list_list(lst)\n    return\
    \ is_zero_integer_list_list_list_list_list(unpack(lst))\n", "  local function\
    \ helper(lst)\n    local smallest, largest = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n      if v < smallest then\n        smallest = v\n      elseif v > largest\
    \ then\n        largest = v\n      end\n    end\n    return smallest, largest\n\
    \  end\n  return helper(lst)\nend", "  local function is_negative(i)\n    return\
    \ i < 0\n  end\n  local function is_positive(i)\n    return i >= 0\n  end\n  local\
    \ function is_zero(i)\n    return i == 0\n  end\n  local function is_negative_and_positive(i)\n\
    \    return is_negative(i) and is_positive(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive_and_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_and_zero(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_and_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_negative_or_positive_and_negative(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_positive_or_negative(i)\n\
    \    return is_positive(i) or is_negative(i)\n  end\n  local function is_positive_or_negative_and_zero(i)\n\
    \    return is_positive(i) or is_negative(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_negative_and_positive(i)\n    return is_positive(i) or is_negative(i)\n\
    \  end\n  local function is_positive_or_negative_and_negative(i)\n    return is_positive(i)\
    \ or is_negative(i)\n  end\n  local function is_positive_or_positive_and_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_positive_or_positive_and_negative(i)\n\
    \    return is_positive(i) or is_negative(i)\n  end\n  local function is_positive_or_positive_and_positive(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_positive_or_positive_and_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_positive_or_zero_and_negative(i)\n\
    \    return is_positive(i) or is_zero(i) or is_negative(i)\n  end\n  local function\
    \ is_positive_or_zero_and_positive(i)\n    return is_positive(i) or is_zero(i)\
    \ or is_positive(i)\n  end\n  local function is_positive_or_zero_and_zero(i)\n\
    \    return is_positive(i) or is_zero(i) or is_zero(i)\n  end\n  local function\
    \ is_zero(i)\n    return i == 0\n  end\n  local function is_zero_and_negative(i)",
  "  local function is_negative(integer)\n    return integer < 0\n  end\n  local function\
    \ is_positive(integer)\n    return integer > 0\n  end\n  local function is_zero(integer)\n\
    \    return integer == 0\n  end\n  local function is_none(integer)\n    return\
    \ integer == nil\n  end\n  local function is_integer(integer)\n    return integer\
    \ ~= nil\n  end\n  local function is_list(lst)\n    return type(lst) == \"table\"\
    \ and lst ~= nil\n  end\n  local function is_tuple(lst)\n    return type(lst)\
    \ == \"table\" and #lst == 2 and is_integer(lst[1]) and is_integer(lst[2])\n \
    \ end\n  local function is_pair(lst)\n    return type(lst) == \"table\" and #lst\
    \ == 2 and is_integer(lst[1]) and is_list(lst[2])\n  end\n  local function is_pair_list(lst)\n\
    \    return type(lst) == \"table\" and #lst == 2 and is_pair(lst[1]) and is_list(lst[2])\n\
    \  end\n  local function is_list(lst)\n    return type(lst) == \"table\" and lst\
    \ ~= nil\n  end\n  local function is_tuple(lst)\n    return type(lst) == \"table\"\
    \ and #lst == 2 and is_integer(lst[1]) and is_tuple(lst[2])\n  end\n  local function\
    \ is_pair_list(lst)\n    return type(lst) == \"table\" and #lst == 2 and is_pair(lst[1])\
    \ and is_list(lst[2])\n  end\n  local function is_dict(lst)\n    return type(lst)\
    \ == \"table\" and #lst == 2 and is_pair(lst[1]) and is_list(lst[2])\n  end\n\
    \  local function is_dict_list(lst)\n    return type(lst) == \"table\" and #lst\
    \ == 2 and is_dict(lst[1]) and is_list(lst[2])\n  end\n  local function is_dict_pair_list(lst)\n\
    \    return type(lst) == \"table\" and #lst == 2 and is_dict(lst[1]) and is_pair_list(lst[2])\n\
    \  end\n  local function is_dict_pair(lst)\n    return type(lst) == \"table\"\
    \ and #lst == 2 and is_dict(lst[1]) and is_pair(lst[2])\n  end\n  local function\
    \ is_dict_pair_list(lst)\n    return type(lst) == \"table\" and #lst == 2 and\
    \ is_dict(lst[1]) and is_pair_list(lst[2])\n  end\n  local function is_dict_list(lst)\n\
    \    return type(lst) == \"table\" and #lst == 2 and is_dict(lst[1]) and is_list(lst[2])\n\
    \  end\n  local function is_dict_pair_list(lst)\n    return type(lst) == \"table\"\
    \ and #lst == 2 and is_dict(lst[1]) and ", "  if #lst == 0 then\n    return nil,\
    \ nil\n  end\n  local max_negative = nil\n  local min_positive = nil\n  for i\
    \ = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n  \
    \      max_negative = lst[i]\n      else\n        if max_negative < lst[i] then\n\
    \          max_negative = lst[i]\n        end\n      end\n    elseif lst[i] >\
    \ 0 then\n      if min_positive == nil then\n        min_positive = lst[i]\n \
    \     else\n        if min_positive > lst[i] then\n          min_positive = lst[i]\n\
    \        end\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  if #lst == 0 then\n    return nil, nil\n  end\n  local max_negative =\
    \ nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = lst[i]\n      else\n\
    \        if max_negative > lst[i] then\n          max_negative = lst[i]\n    \
    \    end\n      end\n    elseif lst[i] > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = lst[i]\n      else\n        if min_positive < lst[i]\
    \ then\n          min_positive = lst[i]\n        end\n      end\n    end\n  end\n\
    \  return max_negative, min_positive\nend", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if largest <\
    \ lst[i] then\n      largest = lst[i]\n    end\n    if smallest > lst[i] then\n\
    \      smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", " \
    \ if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local function\
    \ helper(lst)\n    local largest = nil\n    local smallest = nil\n    for i =\
    \ 1, #lst do\n      if lst[i] < 0 then\n        if largest == nil then\n     \
    \     largest = lst[i]\n        else\n          largest = largest * 10 + lst[i]\n\
    \        end\n      elseif lst[i] > 0 then\n        if smallest == nil then\n\
    \          smallest = lst[i]\n        else\n          smallest = smallest * 10\
    \ + lst[i]\n        end\n      end\n    end\n    return largest, smallest\n  end\n\
    \  return helper(lst)\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then\n    return nil\n  end\n  local largest = nil\n  local smallest = nil\n\
    \  for i = 1, #lst do\n    local value = lst[i]\n    if value < 0 then\n     \
    \ if largest == nil then\n        largest = value\n      else\n        largest\
    \ = largest * 10 + value\n      end\n    elseif largest ~= nil then\n      if\
    \ smallest == nil then\n        smallest = value\n      else\n        smallest\
    \ = smallest * 10 + value\n      end\n    end\n  end\n  return largest, smallest\n\
    end", "  local function is_negative(x)\n    return x < 0\n  end\n  local function\
    \ is_positive(x)\n    return x > 0\n  end\n  local function is_zero(x)\n    return\
    \ x == 0\n  end\n  local function is_negative_and_zero(x)\n    return is_negative(x)\
    \ and is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n    return\
    \ is_positive(x) and is_zero(x)\n  end\n  local function is_negative_or_zero(x)\n\
    \    return is_negative(x) or is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_negative_and_zero(x)\n\
    \    return is_negative(x) or is_negative_and_zero(x)\n  end\n  local function\
    \ is_positive_or_positive_and_zero(x)\n    return is_positive(x) or is_positive_and_zero(x)\n\
    \  end\n  local function is_negative_or_positive_and_zero(x)\n    return is_negative(x)\
    \ or is_positive_and_zero(x)\n  end\n  local function is_negative_or_negative_or_zero(x)\n\
    \    return is_negative(x) or is_negative_or_zero(x)\n  end\n  local function\
    \ is_positive_or_positive_or_zero(x)\n    return is_positive(x) or is_positive_or_zero(x)\n\
    \  end\n  local function is_negative_or_negative_or_positive_and_zero(x)\n   \
    \ return is_negative(x) or is_negative_or_positive_and_zero(x)\n  end\n  local\
    \ function is_positive_or_positive_or_positive_and_zero(x)\n    return is_positive(x)\
    \ or is_positive_or_positive_and_zero(x)\n  end\n  local function is_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_negative(x) or is_negative_or_positive_or_zero(x)\n  end\n  local\
    \ function is_positive_or_positive_or_positive_or_zero(x)\n    return is_positive(x)\
    \ or is_positive_or_positive_or_zero(x)\n  end\n  local function is_negative_or_negative_or_positive_or_positive_and_zero(x)\n\
    \    return is_negative(x) or is_negative_or_negative_or_positive_and_zero(x)\n\
    \  end\n  local function is_positive_or_positive_or_positive_or_positive_and_zero(x)\n\
    \    return is_positive(x) or is_positive_or_positive_or_positive_and_zero(x)\n\
    \  end\n  local function is_negative_or_negative_or_positive_or_positive_or_zero(x)\n\
    \    return is_negative(x) or is_negative_or_negative_or_positive_or_zero(x)\n\
    \  end\n  local function is_positive_or_positive_or_positive_or_positive_or_zero(x)\n\
    \    return is_positive(x) or is_positive_or_positive_or_positive_or_zero(x)\n\
    \  end\n  local function is_negative_or_negative_or_positive_or_positive_or_positive_and_zero(x)\n\
    \    return is_negative(x) or is_negative_or_negative_or_positive_or_positive_and_zero(x)",
  "  if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local function is_negative(x)\n    return x < 0\n\
    \  end\n  local function is_positive(x)\n    return x > 0\n  end\n  local function\
    \ is_zero(x)\n    return x == 0\n  end\n  local function is_negative_integer(x)\n\
    \    return is_negative(x) and is_integer(x)\n  end\n  local function is_positive_integer(x)\n\
    \    return is_positive(x) and is_integer(x)\n  end\n  local function is_zero_integer(x)\n\
    \    return is_zero(x) and is_integer(x)\n  end\n  local function is_negative_integer_or_zero(x)\n\
    \    return is_negative_integer(x) or is_zero(x)\n  end\n  local function is_positive_integer_or_zero(x)\n\
    \    return is_positive_integer(x) or is_zero(x)\n  end\n  local function is_zero_integer_or_zero(x)\n\
    \    return is_zero_integer(x) or is_zero(x)\n  end\n  local function is_negative_integer_or_zero_integer(x)\n\
    \    return is_negative_integer_or_zero(x) and is_integer(x)\n  end\n  local function\
    \ is_positive_integer_or_zero_integer(x)\n    return is_positive_integer_or_zero(x)\
    \ and is_integer(x)\n  end\n  local function is_zero_integer_or_zero_integer(x)\n\
    \    return is_zero_integer_or_zero(x) and is_integer(x)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero(x)\n    return is_negative_integer_or_zero_integer(x)\
    \ or is_zero(x)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(x)\n\
    \    return is_positive_integer_or_zero_integer(x) or is_zero(x)\n  end\n  local\
    \ function is_zero_integer_or_zero_integer_or_zero(x)\n    return is_zero_integer_or_zero(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_integer_or_zero_integer_or_zero_integer(x)\n\
    \    return is_negative_integer_or_zero_integer_or_zero(x) and is_integer(x)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(x)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(x) and is_integer(x)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(x)\n\
    \    return is_zero_integer_or_zero(x) or is_zero(x)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero_integer_or_zero(x)\n    return is_negative_integer_or_zero_integer_or_zero(x)\
    \ and is_integer(x)\n  end\n  local function is_positive_integer_or_zero_integer_or_",
  "  if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then return\
    \ nil, nil end\n  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then smallest = lst[i] end\n    if lst[i] > largest\
    \ then largest = lst[i] end\n  end\n  return smallest, largest\nend", "  local\
    \ function helper(lst)\n    local largest = nil\n    local smallest = nil\n  \
    \  for i = 1, #lst do\n      if lst[i] < 0 then\n        if largest == nil then\n\
    \          largest = lst[i]\n        else\n          largest = largest * 10 +\
    \ lst[i]\n        end\n      elseif lst[i] > 0 then\n        if smallest == nil\
    \ then\n          smallest = lst[i]\n        else\n          smallest = smallest\
    \ * 10 + lst[i]\n        end\n      end\n    end\n    return largest, smallest\n\
    \  end\n  local largest, smallest = helper(lst)\n  if largest == nil then\n  \
    \  return nil, nil\n  elseif smallest == nil then\n    return largest, nil\n \
    \ else\n    return largest, smallest\n  end\nend", "  local function is_negative(i)\n\
    \    return i < 0\n  end", "  local function helper(lst)\n    local max_negative,\
    \ max_positive = nil, nil\n    for _, v in ipairs(lst) do\n      if v < 0 then\n\
    \        if max_negative == nil then\n          max_negative = v\n        else\n\
    \          max_negative = max_negative > v ? max_negative : v\n        end\n \
    \     elseif v > 0 then\n        if max_positive == nil then\n          max_positive\
    \ = v\n        else\n          max_positive = max_positive < v ? max_positive\
    \ : v\n        end\n      end\n    end\n    return max_negative, max_positive\n\
    \  end\n  return helper(lst)\nend", "  if #lst == 0 then\n    return nil, nil\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n\
    \    if lst[i] < 0 then\n      if largest == nil then\n        largest = lst[i]\n\
    \      else\n        largest = largest * 10 + lst[i]\n      end\n    elseif lst[i]\
    \ > 0 then\n      if smallest == nil then\n        smallest = lst[i]\n      else\n\
    \        smallest = smallest * 10 + lst[i]\n      end\n    end\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local\
    \ largest = nil\n  local smallest = nil\n  for i = 1, #lst do\n    if lst[i] <\
    \ 0 then\n      if largest == nil then\n        largest = lst[i]\n      else\n\
    \        largest = largest * 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n\
    \      if smallest == nil then\n        smallest = lst[i]\n      else\n      \
    \  smallest = smallest * 10 + lst[i]\n      end\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local function is_negative(x)\n    return x < 0\n  end\n\
    \  local function is_positive(x)\n    return x > 0\n  end\n  local function is_zero(x)\n\
    \    return x == 0\n  end\n  local function is_negative_and_positive(x)\n    return\
    \ is_negative(x) and is_positive(x)\n  end\n  local function is_negative_or_zero(x)\n\
    \    return is_negative(x) or is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_positive(x)\n\
    \    return is_negative(x) or is_positive(x)\n  end\n  local function is_negative_or_zero_and_positive(x)\n\
    \    return is_negative(x) or is_zero(x) and is_positive(x)\n  end\n  local function\
    \ is_positive_or_zero_and_negative(x)\n    return is_positive(x) or is_zero(x)\
    \ and is_negative(x)\n  end\n  local function is_negative_or_positive_or_zero(x)\n\
    \    return is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(x)\n    return is_positive(x) or is_negative(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_positive_or_zero_and_positive(x)\n\
    \    return is_negative(x) or is_positive(x) or is_zero(x) and is_positive(x)\n\
    \  end\n  local function is_positive_or_negative_or_zero_and_negative(x)\n   \
    \ return is_positive(x) or is_negative(x) or is_zero(x) and is_negative(x)\n \
    \ end\n  local function is_negative_or_positive_or_zero_and_negative(x)\n    return\
    \ is_negative(x) or is_positive(x) or is_zero(x) and is_negative(x)\n  end\n \
    \ local function is_positive_or_negative_or_zero_and_negative(x)\n    return is_positive(x)\
    \ or is_negative(x) or is_zero(x) and is_negative(x)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_and_negative(x)\n    return is_negative(x) or\
    \ is_positive(x) or is_zero(x) and is_negative(x)\n  end\n  local function is_positive_or_negative_or_zero_and_negative(x)\n\
    \    return is_positive(x) or is_negative(x) or is_zero(x) and is_negative(x)\n\
    \  end\n  local function is_negative_or_positive_or_zero_and_negative(x)\n   \
    \ return is_negative(x) or is_positive(x) or is_zero(x) and is_negative(x)\n \
    \ end\n  local function is_positive_or_negative_or_zero_and_negative(x)\n    return\
    \ is_positive(x) or is_negative(x) or is_zero(x) and is_negative(x)\n  end\n \
    \ local function is_negative_or_positive_or_zero_and_negative(x)\n    return is_negative(x)\
    \ or is_positive(x) or is_zero(x) and is_negative(x)\n  end\n  ", "  if #lst ==\
    \ 0 then\n    return nil, nil\n  end\n  local smallest, largest = lst[1], lst[1]\n\
    \  for i = 2, #lst do\n    if smallest[1] < lst[i] then\n      smallest = lst[i]\n\
    \    end\n    if largest[1] > lst[i] then\n      largest = lst[i]\n    end\n \
    \ end\n  return smallest, largest\nend", "  local function helper(lst)\n    local\
    \ max_negative, min_positive = nil, nil\n    for i = 1, #lst do\n      if lst[i]\
    \ < 0 then\n        if max_negative == nil then\n          max_negative = lst[i]\n\
    \        else\n          max_negative = max_negative > lst[i] and max_negative\
    \ or lst[i]\n        end\n      elseif lst[i] > 0 then\n        if min_positive\
    \ == nil then\n          min_positive = lst[i]\n        else\n          min_positive\
    \ = min_positive < lst[i] and min_positive or lst[i]\n        end\n      end\n\
    \    end\n    return max_negative, min_positive\n  end\n  local max_negative,\
    \ min_positive = helper(lst)\n  if max_negative == nil and min_positive == nil\
    \ then\n    return nil, nil\n  end\n  return max_negative, min_positive\nend",
  "  local function is_negative_integer(x)\n    return x ~= nil and x < 0\n  end\n\
    \  local function is_positive_integer(x)\n    return x ~= nil and x > 0\n  end\n\
    \  local function get_largest_integer(lst)\n    local largest = nil\n    for i\
    \ = 1, #lst do\n      if is_negative_integer(lst[i]) then\n        if largest\
    \ == nil then\n          largest = lst[i]\n        else\n          largest = math.max(largest,\
    \ lst[i])\n        end\n      end\n      if is_positive_integer(lst[i]) then\n\
    \        if largest == nil then\n          largest = lst[i]\n        else\n  \
    \        largest = math.min(largest, lst[i])\n        end\n      end\n    end\n\
    \    return largest\n  end\n  local function get_smallest_integer(lst)\n    local\
    \ smallest = nil\n    for i = 1, #lst do\n      if is_negative_integer(lst[i])\
    \ then\n        if smallest == nil then\n          smallest = lst[i]\n       \
    \ else\n          smallest = math.min(smallest, lst[i])\n        end\n      end\n\
    \      if is_positive_integer(lst[i]) then\n        if smallest == nil then\n\
    \          smallest = lst[i]\n        else\n          smallest = math.max(smallest,\
    \ lst[i])\n        end\n      end\n    end\n    return smallest\n  end\n  local\
    \ function get_largest_and_smallest_integers(lst)\n    local largest_integer =\
    \ get_largest_integer(lst)\n    local smallest_integer = get_smallest_integer(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    else\n      return nil, nil\n    end\n\
    \  end\n  local function get_largest_and_smallest_integers_or_none(lst)\n    local\
    \ largest_integer, smallest_integer = get_largest_and_smallest_integers(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    else\n      return nil, nil\n    end\n\
    \  end\n  local function get_largest_and_smallest_integers_or_none_or_error(lst)\n\
    \    local largest_integer, smallest_integer = get_largest_and_smallest_integers_or_none(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    else\n      error(string.format(\"Could\
    \ not find largest and smallest integers in list %s\", lst))\n    end\n  end\n",
  "  if #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n    return lst\n\
    \  else\n    local largest = lst[1]\n    local smallest = lst[1]\n    for i =\
    \ 2, #lst do\n      if lst[i] > largest then\n        largest = lst[i]\n     \
    \ elseif lst[i] < smallest then\n        smallest = lst[i]\n      end\n    end\n\
    \    return largest, smallest\n  end\nend", "  local function is_negative(x)\n\
    \    return x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n\
    \  end\n  local function is_zero(x)\n    return x == 0\n  end\n  local function\
    \ is_negative_and_positive(x)\n    return is_negative(x) and is_positive(x)\n\
    \  end\n  local function is_negative_or_zero(x)\n    return is_negative(x) or\
    \ is_zero(x)\n  end\n  local function is_positive_or_zero(x)\n    return is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_positive_or_zero(x)\n\
    \    return is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local function\
    \ is_negative_or_negative_or_zero(x)\n    return is_negative(x) or is_negative(x)\
    \ or is_zero(x)\n  end\n  local function is_positive_or_negative_or_zero(x)\n\
    \    return is_positive(x) or is_negative(x) or is_zero(x)\n  end\n  local function\
    \ is_positive_or_positive_or_zero(x)\n    return is_positive(x) or is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_negative(x) or is_negative(x) or is_positive(x) or is_zero(x)\n\
    \  end\n  local function is_positive_or_negative_or_positive_or_zero(x)\n    return\
    \ is_positive(x) or is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local\
    \ function is_negative_or_positive_or_negative_or_zero(x)\n    return is_negative(x)\
    \ or is_positive(x) or is_negative(x) or is_zero(x)\n  end\n  local function is_positive_or_positive_or_negative_or_zero(x)\n\
    \    return is_positive(x) or is_positive(x) or is_negative(x) or is_zero(x)\n\
    \  end\n  local function is_negative_or_negative_or_positive_or_zero(x)\n    return\
    \ is_negative(x) or is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local\
    \ function is_positive_or_positive_or_negative_or_zero(x)\n    return is_positive(x)\
    \ or is_positive(x) or is_negative(x) or is_zero(x)\n  end\n  local function is_negative_or_negative_or_positive_or_zero(x)\n\
    \    return is_negative(x) or is_negative(x) or is_positive(x) or is_zero(x)\n\
    \  end\n  local function is_positive_or_positive_or_negative_or_zero(x)\n    return\
    \ is_positive(x) or is_positive(x) or is_negative(x) or is_zero(x)\n  end\n  local\
    \ function is_negative_or_negative_or_positive_or_zero(x)\n    return is_negative(x)\
    \ or is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local function is_positive_or_positive_or_negative_or_zero(x)\n\
    \    return is_positive(x) or is_positive(x", "  local function is_negative(i)\n\
    \    return i < 0\n  end\n  local function is_positive(i)\n    return i >= 0\n\
    \  end\n  local function is_zero(i)\n    return i == 0\n  end\n  local function\
    \ is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_zero_and_positive(i)\n    return is_zero(i) and is_positive(i)\n\
    \  end\n  local function is_negative_and_zero(i)\n    return is_negative(i) and\
    \ is_zero(i)\n  end\n  local function is_zero_and_negative(i)\n    return is_zero(i)\
    \ and is_negative(i)\n  end\n  local function is_negative_and_negative(i)\n  \
    \  return is_negative(i) and is_negative(i)\n  end\n  local function is_zero_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative(i) and is_positive(i)\n  end\n  local function\
    \ is_negative_and_negative_and_positive(i)\n    return is_negative(i) and is_negative(i)\
    \ and is_positive(i)\n  end\n  local function is_zero_and_negative_and_zero(i)\n\
    \    return is_zero(i) and is_negative(i) and is_zero(i)\n  end\n  local function\
    \ is_negative_and_negative_and_zero(i)\n    return is_negative(i) and is_negative(i)\
    \ and is_zero(i)\n  end\n  local function is_zero_and_negative_and_negative(i)\n\
    \    return is_zero(i) and is_negative(i) and is_negative(i)\n  end\n  local function\
    \ is_negative_and_negative_and_negative(i)\n    return is_negative(i) and is_negative(i)\
    \ and is_negative(i)\n  end\n  local function is_zero_and_negative_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative(i) and is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative(i) and is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_zero_and_negative_and_negative_and_zero(i)\n    return\
    \ is_zero(i) and is_negative(i) and is_negative(i) and is_zero(i)\n  end\n  local\
    \ function is_negative_and_negative_and_negative_and_zero(i)\n    return is_negative(i)\
    \ and is_negative(i) and is_negative(i) and is_zero(i)\n  end\n  local function\
    \ is_zero_and_negative_and_negative_and_negative(i)\n    return is_zero(i) and\
    \ is_negative(i) and is_negative(i) and is_negative(i)\n  end\n  local function\
    \ is_negative_and_negative_and_negative_and_negative(i)\n    return is_negative(i)\
    \ and is_negative(i) and is_negative(i) and is_negative(i)\n  end\n  local function\
    \ is_zero_and_negative_and_negative_and_negative_and_positive(i)\n    return is_zero(i)\
    \ and is_negative(i) and is_", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0\
    \ then\n      if largest == nil then\n        largest = lst[i]\n      else\n \
    \       largest = largest * 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n\
    \      if smallest == nil then\n        smallest = lst[i]\n      else\n      \
    \  smallest = smallest * 10 + lst[i]\n      end\n    end\n  end\n  return largest,\
    \ smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  else\n    local largest = lst[1]\n    local smallest\
    \ = lst[1]\n    for i = 2, #lst do\n      if lst[i] > largest then\n        largest\
    \ = lst[i]\n      elseif lst[i] < smallest then\n        smallest = lst[i]\n \
    \     end\n    end\n    return largest, smallest\n  end\nend", "  if #lst == 0\
    \ then\n    return nil, nil\n  end\n  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    local x = lst[i]\n    if x < 0 then\n     \
    \ if max_negative == nil then\n        max_negative = x\n      else\n        if\
    \ x > max_negative then\n          max_negative = x\n        end\n      end\n\
    \    else\n      if min_positive == nil then\n        min_positive = x\n     \
    \ else\n        if x < min_positive then\n          min_positive = x\n       \
    \ end\n      end\n    end\n  end\n  return max_negative, min_positive\nend", " \
    \ local function is_negative(i)\n    return i < 0\n  end\n  local function is_positive(i)\n\
    \    return i >= 0\n  end\n  local function is_zero(i)\n    return i == 0\n  end\n\
    \  local function is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_and_zero(i)\n    return is_negative(i) and\
    \ is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n    return is_positive(i)\
    \ and is_zero(i)\n  end\n  local function is_negative_or_zero(i)\n    return is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n    return is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive(i)\n    return\
    \ is_negative(i) or is_positive(i)\n  end\n  local function is_positive_or_negative(i)\n\
    \    return is_positive(i) or is_negative(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(i)\n    return is_positive(i) or is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(i)\n    return is_positive(i) or is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(i)\n    return is_positive(i) or is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(i)\n    return is_positive(i) or is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(i)\n    return is_positive(i) or is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_negative_or_zero(i)\n    return is_positive(i) or is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_", "  local function is_negative(x)\n\
    \    return x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n\
    \  end\n  local function is_zero(x)\n    return x == 0\n  end\n  local function\
    \ is_none(x)\n    return x == nil\n  end\n  local function is_integer(x)\n   \
    \ return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\" and x ~= 0\n", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local function is_negative(num)\n    return num\
    \ < 0\n  end\n  local function is_positive(num)\n    return num > 0\n  end\n \
    \ local function is_zero(num)\n    return num == 0\n  end\n  local function is_negative_integer(num)\n\
    \    return is_negative(num) and is_integer(num)\n  end\n  local function is_positive_integer(num)\n\
    \    return is_positive(num) and is_integer(num)\n  end\n  local function is_zero_integer(num)\n\
    \    return is_zero(num) and is_integer(num)\n  end\n  local function is_negative_integer_or_zero(num)\n\
    \    return is_negative_integer(num) or is_zero_integer(num)\n  end\n  local function\
    \ is_positive_integer_or_zero(num)\n    return is_positive_integer(num) or is_zero_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero(num)\n    return is_zero_integer(num)\
    \ or is_zero(num)\n  end\n  local function is_negative_integer_or_zero_integer(num)\n\
    \    return is_negative_integer_or_zero(num) and is_integer(num)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer(num)\n    return is_positive_integer_or_zero(num)\
    \ and is_integer(num)\n  end\n  local function is_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero(num) and is_integer(num)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero(num)\n    return is_negative_integer_or_zero_integer(num)\
    \ or is_zero_integer_or_zero(num)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(num)\n\
    \    return is_positive_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero(num)\n    return\
    \ is_zero_integer_or_zero(num) or is_zero_integer_or_zero(num)\n  end\n  local\
    \ function is_negative_integer_or_zero_integer_or_zero_integer(num)\n    return\
    \ is_negative_integer_or_zero_integer_or_zero(num) and is_integer(num)\n  end\n\
    \  local function is_positive_integer_or_zero_integer_or_zero_integer(num)\n \
    \   return is_positive_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero(num) and is_integer(num)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero_integer_or_zero(num)", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  local function helper(lst)\n\
    \    local largest, smallest = nil, nil\n    for i = 1, #lst do\n      if lst[i]\
    \ > largest then\n        largest = lst[i]\n      elseif lst[i] < smallest then\n\
    \        smallest = lst[i]\n      end\n    end\n    return largest, smallest\n\
    \  end\n  local result = helper(lst)\n  if result == nil then\n    return nil,\
    \ nil\n  end\n  return result\nend", "  local function helper(lst)\n    local\
    \ smallest, largest = nil, nil\n    for _, v in ipairs(lst) do\n      if v < smallest\
    \ then\n        smallest = v\n      elseif v > largest then\n        largest =\
    \ v\n      end\n    end\n    return smallest, largest\n  end\n  return helper(lst)\n\
    end", "  if #lst == 0 then return nil, nil end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then largest\
    \ = lst[i] end\n    if lst[i] < smallest then smallest = lst[i] end\n  end\n \
    \ return largest, smallest\nend", "  local function is_negative(x)\n    return\
    \ x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n  end\n  local\
    \ function is_zero(x)\n    return x == 0\n  end\n  local function is_negative_and_positive(x)\n\
    \    return is_negative(x) and is_positive(x)\n  end\n  local function is_negative_and_zero(x)\n\
    \    return is_negative(x) and is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) and is_zero(x)\n  end\n  local function is_negative_and_zero(x)\n\
    \    return is_negative(x) and is_zero(x)\n  end\n  local function is_positive_and_negative(x)\n\
    \    return is_positive(x) and is_negative(x)\n  end\n  local function is_negative_and_negative(x)\n\
    \    return is_negative(x) and is_negative(x)\n  end\n  local function is_zero_and_negative(x)\n\
    \    return is_zero(x) and is_negative(x)\n  end\n  local function is_zero_and_positive(x)\n\
    \    return is_zero(x) and is_positive(x)\n  end\n  local function is_positive_and_positive(x)\n\
    \    return is_positive(x) and is_positive(x)\n  end\n  local function is_negative_and_positive(x)\n\
    \    return is_negative(x) and is_positive(x)\n  end\n  local function is_negative_and_zero(x)\n\
    \    return is_negative(x) and is_zero(x)\n  end\n  local function is_zero_and_positive(x)\n\
    \    return is_zero(x) and is_positive(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) and is_zero(x)\n  end\n  local function is_zero_and_zero(x)\n\
    \    return is_zero(x) and is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) and is_zero(x)\n  end\n  local function is_zero_and_zero(x)\n\
    \    return is_zero(x) and is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) and is_zero(x)\n  end\n  local function is_zero_and_zero(x)\n\
    \    return is_zero(x) and is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) and is_zero(x)\n  end\n  local function is_zero_and_zero(x)\n\
    \    return is_zero(x) and is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) and is_zero(x)\n  end\n  local function is_zero_and_zero(x)\n\
    \    return is_zero(x) and is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) and is_zero(x)\n  end\n  local function is_zero_and_zero(x)\n\
    \    return is_zero(x", "  if #lst == 0 then\n    return nil\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then return nil, nil end\n  local smallest, largest = lst[1], lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then smallest = lst[i] end\n \
    \   if lst[i] > largest then largest = lst[i] end\n  end\n  return smallest, largest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then return nil, nil end\n  local max_negative = nil\n  local min_positive =\
    \ nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = lst[i]\n      else\n        if max_negative\
    \ < lst[i] then\n          max_negative = lst[i]\n        end\n      end\n   \
    \ elseif lst[i] > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = lst[i]\n      else\n        if min_positive > lst[i] then\n          min_positive\
    \ = lst[i]\n        end\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local max_negative = nil\n\
    \  local min_positive = nil\n  for i = 1, #lst do\n    local v = lst[i]\n    if\
    \ v < 0 then\n      if max_negative == nil then\n        max_negative = v\n  \
    \    else\n        if v > max_negative then\n          max_negative = v\n    \
    \    end\n      end\n    elseif v > 0 then\n      if min_positive == nil then\n\
    \        min_positive = v\n      else\n        if v < min_positive then\n    \
    \      min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return max_negative, min_positive\n\
    \  end\n  return nil\nend", "  local function helper(lst)\n    local smallest,\
    \ largest = nil, nil\n    for i, v in ipairs(lst) do\n      if v < smallest or\
    \ smallest == nil then\n        smallest = v\n      elseif v > largest or largest\
    \ == nil then\n        largest = v\n      end\n    end\n    return smallest, largest\n\
    \  end\n  return helper(lst)\nend", "  if #lst == 0 then\n    return nil\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then return nil, nil end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n    \
    \  largest = lst[i]\n    end\n    if smallest > lst[i] then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\
    \ return nil, nil end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  if #lst == 0 then\n    return nil, nil\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n  local smallest,\
    \ largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return smallest, largest\nend", "  local function\
    \ is_negative(x)\n    return x < 0\n  end\n  local function is_positive(x)\n \
    \   return x > 0\n  end\n  local function is_zero(x)\n    return x == 0\n  end\n\
    \  local function is_none(x)\n    return x == nil\n  end\n  local function is_largest(x,\
    \ y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n    return\
    \ x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n  end\n \
    \ local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n\
    \    return x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n\
    \  end\n  local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n\
    \    return x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n\
    \  end\n  local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n\
    \    return x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n\
    \  end\n  local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n\
    \    return x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n\
    \  end\n  local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n\
    \    return x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n\
    \  end\n  local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n\
    \    return x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n\
    \  end\n  local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n  end\n  local function is_smallest(x, y)\n\
    \    return x < y\n  end\n  local function is_largest(x, y)\n    return x > y\n\
    \  end\n  local function is_smallest(x, y)\n    return x < y\n  end\n  local function\
    \ is_largest(x, y)\n    return x > y\n", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  if #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n\
    \    return lst\n  else\n    local largest = nil\n    local smallest = nil\n \
    \   for i = 1, #lst do\n      if lst[i] < 0 then\n        if largest == nil then\n\
    \          largest = lst[i]\n        else\n          largest = largest * 10 +\
    \ lst[i]\n        end\n      elseif lst[i] > 0 then\n        if smallest == nil\
    \ then\n          smallest = lst[i]\n        else\n          smallest = smallest\
    \ * 10 + lst[i]\n        end\n      end\n    end\n    return largest, smallest\n\
    \  end\nend", "  if #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n\
    \    return lst\n  else\n    local largest = lst[1]\n    local smallest = lst[1]\n\
    \    for i = 2, #lst do\n      if lst[i] > largest then\n        largest = lst[i]\n\
    \      elseif lst[i] < smallest then\n        smallest = lst[i]\n      end\n \
    \   end\n    return (largest, smallest)\n  end\nend", "  local function is_negative(integer)\n\
    \    return integer < 0\n  end\n  local function is_positive(integer)\n    return\
    \ integer > 0\n  end\n  local function is_zero(integer)\n    return integer ==\
    \ 0\n  end\n  local function is_none(integer)\n    return integer == nil\n  end\n\
    \  local function is_integer(integer)\n    return integer ~= nil and integer ~=\
    \ false\n  end\n  local function is_list(lst)\n    return type(lst) == \"table\"\
    \ and lst ~= nil\n  end\n  local function is_tuple(lst)\n    return type(lst)\
    \ == \"table\" and #lst == 2\n  end\n  local function is_number(number)\n    return\
    \ type(number) == \"number\"\n  end\n  local function is_integer(integer)\n  \
    \  return type(integer) == \"number\" and integer % 1 == 0\n  end\n  local function\
    \ is_real(number)\n    return type(number) == \"number\" and number ~= nil\n \
    \ end\n  local function is_integer(integer)\n    return type(integer) == \"number\"\
    \ and integer % 1 == 0\n  end\n  local function is_real(number)\n    return type(number)\
    \ == \"number\" and number ~= nil\n  end\n  local function is_list(lst)\n    return\
    \ type(lst) == \"table\" and lst ~= nil\n  end\n  local function is_tuple(lst)\n\
    \    return type(lst) == \"table\" and #lst == 2\n  end\n  local function is_number(number)\n\
    \    return type(number) == \"number\"\n  end\n  local function is_integer(integer)\n\
    \    return type(integer) == \"number\" and integer % 1 == 0\n  end\n  local function\
    \ is_real(number)\n    return type(number) == \"number\" and number ~= nil\n \
    \ end\n  local function is_integer(integer)\n    return type(integer) == \"number\"\
    \ and integer % 1 == 0\n  end\n  local function is_real(number)\n    return type(number)\
    \ == \"number\" and number ~= nil\n  end\n  local function is_list(lst)\n    return\
    \ type(lst) == \"table\" and lst ~= nil\n  end\n  local function is_tuple(lst)\n\
    \    return type(lst) == \"table\" and #lst == 2\n  end\n  local function is_number(number)\n\
    \    return type(number) == \"number\"\n  end\n  local function is_integer(integer)\n\
    \    return type(integer) == \"number\" and integer % 1 == 0\n  end\n  local function\
    \ is_real(number)\n    return type(number) == \"number\" and number ~= nil\n \
    \ end\n  local function is_integer(integer)\n    return type(integer) == \"number\"\
    \ and integer % 1 == 0\n  end\n  local function is_real(number)\n    return type(",
  "  if #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n    return lst\n\
    \  else\n    local largest = nil\n    local smallest = nil\n    for i = 1, #lst\
    \ do\n      if lst[i] > largest then\n        largest = lst[i]\n      elseif lst[i]\
    \ < smallest then\n        smallest = lst[i]\n      end\n    end\n    return largest,\
    \ smallest\n  end\nend", "  if #lst == 0 then\n    return nil\n  elseif #lst ==\
    \ 1 then\n    return lst\n  else\n    local largest = nil\n    local smallest\
    \ = nil\n    for i = 1, #lst do\n      if lst[i] > largest then\n        largest\
    \ = lst[i]\n      elseif lst[i] < smallest then\n        smallest = lst[i]\n \
    \     end\n    end\n    return largest, smallest\n  end\nend", "  if #lst == 0\
    \ then\n    return nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  local function helper(lst)\n    local max_negative\
    \ = nil\n    local min_positive = nil\n    for _, v in ipairs(lst) do\n      if\
    \ v < 0 then\n        if max_negative == nil then\n          max_negative = v\n\
    \        else\n          max_negative = max_negative > v ? max_negative : v\n\
    \        end\n      elseif v > 0 then\n        if min_positive == nil then\n \
    \         min_positive = v\n        else\n          min_positive = min_positive\
    \ < v ? min_positive : v\n        end\n      end\n    end\n    return max_negative,\
    \ min_positive\n  end\n  local max_negative, min_positive = helper(lst)\n  if\
    \ max_negative == nil then\n    return nil, nil\n  elseif min_positive == nil\
    \ then\n    return max_negative, max_positive\n  else\n    return max_negative,\
    \ min_positive\n  end\nend", "  local function helper(lst)\n    local smallest,\
    \ largest = nil, nil\n    for _, v in ipairs(lst) do\n      if v < smallest then\n\
    \        smallest = v\n      elseif v > largest then\n        largest = v\n  \
    \    end\n    end\n    return smallest, largest\n  end\n  local smallest, largest\
    \ = helper(lst)\n  if smallest == nil and largest == nil then\n    return nil,\
    \ nil\n  else\n    return smallest, largest\n  end\nend", "  if #lst == 0 then\n\
    \    return nil\n  elseif #lst == 1 then\n    return lst\n  else\n    local largest\
    \ = lst[1]\n    local smallest = lst[1]\n    for i = 2, #lst do\n      if lst[i]\
    \ > largest then\n        largest = lst[i]\n      elseif lst[i] < smallest then\n\
    \        smallest = lst[i]\n      end\n    end\n    return largest, smallest\n\
    \  end\nend", "  if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then\n    return nil, nil\n  end\n  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    local x = lst[i]\n    if x < 0 then\n     \
    \ if max_negative == nil then\n        max_negative = x\n      else\n        if\
    \ x > max_negative then\n          max_negative = x\n        end\n      end\n\
    \    else\n      if min_positive == nil then\n        min_positive = x\n     \
    \ else\n        if x < min_positive then\n          min_positive = x\n       \
    \ end\n      end\n    end\n  end\n  return max_negative, min_positive\nend", " \
    \ if #lst == 0 then\n    return nil, nil\n  end\n  local smallest, largest = lst[1],\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  return largest, smallest\nend", "  local function is_negative(i)\n\
    \    return i < 0\n  end\n  local function is_positive(i)\n    return i >= 0\n\
    \  end\n  local function is_zero(i)\n    return i == 0\n  end\n  local function\
    \ is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_or_zero(i)\n    return is_negative(i) or\
    \ is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n    return is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_and_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_and_zero(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_and_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_negative_or_positive_and_negative(i)\n\
    \    return is_negative(i) or is_positive(i) or is_negative(i)\n  end\n  local\
    \ function is_negative_or_positive_and_zero(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_and_negative(i)\n\
    \    return is_negative(i) or is_positive(i) or is_negative(i)\n  end\n  local\
    \ function is_negative_or_positive_and_positive(i)\n    return is_negative(i)\
    \ or is_positive(i)\n  end\n  local function is_negative_or_positive_and_negative(i)\n\
    \    return is_negative(i) or is_positive(i) or is_negative(i)\n  end\n  local\
    \ function is_negative_or_positive_and_zero(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_and_negative(i)\n\
    \    return is_negative(i) or is_positive(i) or is_negative(i)\n  end\n  local\
    \ function is_negative_or_positive_and_positive(i)\n    return is_negative(i)\
    \ or is_positive(i)\n  end\n  local function is_negative_or_positive_and_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_and_negative(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_negative(i)\n  end\n  local function is_negative_or_positive_and_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_negative_or_positive_and_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_and_negative(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_negative(i)\n  end\n  local function is_negative_or_positive_and_positive(i)\n\
    \    return is_", "  if #lst == 0 then return nil, nil end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i]\
    \ then\n      largest = lst[i]\n    end\n    if smallest > lst[i] then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ function is_negative_integer(x)\n    return x ~= nil and x ~= false and x ~=\
    \ 0 and x ~= math.floor(x)\n  end\n  local function is_positive_integer(x)\n \
    \   return x ~= nil and x ~= false and x ~= 0 and x ~= math.ceil(x)\n  end\n \
    \ local function is_largest_integer(x)\n    return is_negative_integer(x) or is_positive_integer(x)\n\
    \  end\n  local function get_largest_integer(lst)\n    local largest_integer =\
    \ nil\n    for i = 1, #lst do\n      if is_largest_integer(lst[i]) then\n    \
    \    largest_integer = lst[i]\n      end\n    end\n    return largest_integer\n\
    \  end\n  local function get_smallest_integer(lst)\n    local smallest_integer\
    \ = nil\n    for i = 1, #lst do\n      if is_negative_integer(lst[i]) then\n \
    \       smallest_integer = lst[i]\n      end\n    end\n    return smallest_integer\n\
    \  end\n  local function get_largest_and_smallest_integer(lst)\n    local largest_integer\
    \ = get_largest_integer(lst)\n    local smallest_integer = get_smallest_integer(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    end\n  end\n  local function get_largest_and_smallest_integers(lst)\n\
    \    local largest_integer, smallest_integer = get_largest_and_smallest_integer(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    end\n  end\n  local function get_largest_and_smallest_integers_or_none(lst)\n\
    \    local largest_integer, smallest_integer = get_largest_and_smallest_integer(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    end\n    return nil\n  end\n  local function\
    \ get_largest_and_smallest_integers_or_none_or_empty(lst)\n    local largest_integer,\
    \ smallest_integer = get_largest_and_smallest_integer(lst)\n    if largest_integer\
    \ ~= nil and smallest_integer ~= nil then\n      return largest_integer, smallest_integer\n\
    \    end\n    return nil, nil\n  end\n  local function get_largest_and_smallest_integers_or_none_or_empty_or_none(lst)\n\
    \    local largest_integer, smallest_integer = get_", "  local function helper(lst)\n\
    \    local max_negative = nil\n    local min_positive = nil\n    for i = 1, #lst\
    \ do\n      if lst[i] < 0 then\n        if max_negative == nil then\n        \
    \  max_negative = lst[i]\n        else\n          max_negative = max_negative\
    \ > lst[i] and max_negative or lst[i]\n        end\n      elseif lst[i] > 0 then\n\
    \        if min_positive == nil then\n          min_positive = lst[i]\n      \
    \  else\n          min_positive = min_positive < lst[i] and min_positive or lst[i]\n\
    \        end\n      end\n    end\n    return max_negative, min_positive\n  end\n\
    \  local max_negative, min_positive = helper(lst)\n  return max_negative or min_positive\
    \ or nil\nend", "  local function is_negative(i)\n    return i < 0\n  end\n  local\
    \ function is_positive(i)\n    return i >= 0\n  end\n  local function is_zero(i)\n\
    \    return i == 0\n  end\n  local function is_negative_and_positive(i)\n    return\
    \ is_negative(i) and is_positive(i)\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_zero_and_positive(i)\n\
    \    return is_zero(i) and is_positive(i)\n  end\n  local function is_zero_and_negative(i)\n\
    \    return is_zero(i) and is_negative(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative_or_zero(i) or is_positive_or_zero(i)\n  end\n  local function\
    \ is_negative_or_zero_or_positive_or_zero(i)\n    return is_negative_or_zero(i)\
    \ or is_positive_or_zero(i)\n  end\n  local function is_negative_or_zero_or_negative_or_positive_or_zero(i)\n\
    \    return is_negative_or_zero(i) or is_negative_or_positive_or_zero(i)\n  end\n\
    \  local function is_negative_or_zero_or_negative_or_positive_or_negative_or_zero(i)\n\
    \    return is_negative_or_zero(i) or is_negative_or_negative_or_positive_or_zero(i)\n\
    \  end\n  local function is_positive_or_zero_or_negative_or_positive_or_negative_or_zero(i)\n\
    \    return is_positive_or_zero(i) or is_negative_or_negative_or_positive_or_zero(i)\n\
    \  end\n  local function is_positive_or_zero_or_negative_or_positive_or_negative_or_positive_or_zero(i)\n\
    \    return is_positive_or_zero(i) or is_negative_or_negative_or_positive_or_negative_or_zero(i)\n\
    \  end\n  local function is_positive_or_zero_or_negative_or_positive_or_negative_or_positive_or_negative_or_zero(i)\n\
    \    return is_positive_or_zero(i) or is_negative_or_negative_or_positive_or_negative_or_positive_or_zero(i)\n\
    \  end\n  local function is_positive_or_zero_or_negative_or_positive_or_negative_or_positive_or_negative_or_positive_or_zero(i)\n\
    \    return is_positive_or_zero(i) or is_negative_or_negative_or_positive_or_negative_or_positive_or_negative_or_zero(i)\n\
    \  end\n  local function is_positive_or_zero_or_negative_or_positive_or_negative_or_positive_or_negative_or_positive_or_zero(i)\n\
    \    return is_positive_or_zero(i) or is_negative_or_negative_or_positive_or_negative_or_positive_or_negative_or_",
  "  local function is_negative(i)\n    return i < 0\n  end\n  local function is_positive(i)\n\
    \    return i >= 0\n  end\n  local function is_zero(i)\n    return i == 0\n  end\n\
    \  local function is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_or_zero(i)\n    return is_negative(i) or\
    \ is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n    return is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive(i)\n    return\
    \ is_negative(i) or is_positive(i)\n  end\n  local function is_positive_and_negative(i)\n\
    \    return is_positive(i) and is_negative(i)\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_negative(i)\n\
    \    return is_negative(i) or is_negative(i)\n  end\n  local function is_positive_and_negative(i)\n\
    \    return is_positive(i) and is_negative(i)\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_positive_and_positive(i)\n\
    \    return is_positive(i) and is_positive(i)\n  end\n  local function is_negative_and_negative(i)\n\
    \    return is_negative(i) and is_negative(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_negative(i)\n\
    \    return is_negative(i) or is_negative(i)\n  end\n  local function is_positive_and_positive(i)\n\
    \    return is_positive(i) and is_positive(i)\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_positive_and_positive(i)\n\
    \    return is_positive(i) and is_positive(i)\n  end\n  local function is_negative_and_negative(i)\n\
    \    return is_negative(i) and is_negative(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_negative(i)\n\
    \    return is_negative(i", "  local largest, smallest = nil, nil\n  for i = 1,\
    \ #lst do\n    if lst[i] < 0 then\n      if largest == nil then\n        largest\
    \ = lst[i]\n      else\n        largest = largest * 10 + lst[i]\n      end\n \
    \   elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest =\
    \ lst[i]\n      else\n        smallest = smallest * 10 + lst[i]\n      end\n \
    \   end\n  end\n  return largest, smallest\nend", "  local function helper(lst)\n\
    \    local largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n \
    \     if lst[i] > largest then\n        largest = lst[i]\n      elseif lst[i]\
    \ < smallest then\n        smallest = lst[i]\n      end\n    end\n    return largest,\
    \ smallest\n  end\n  local function helper2(lst)\n    local largest = nil\n  \
    \  local smallest = nil\n    for i = 1, #lst do\n      if lst[i] > largest then\n\
    \        largest = lst[i]\n      elseif lst[i] < smallest then\n        smallest\
    \ = lst[i]\n      end\n    end\n    return largest, smallest\n  end\n  local function\
    \ helper3(lst)\n    local largest = nil\n    local smallest = nil\n    for i =\
    \ 1, #lst do\n      if lst[i] > largest then\n        largest = lst[i]\n     \
    \ elseif lst[i] < smallest then\n        smallest = lst[i]\n      end\n    end\n\
    \    return largest, smallest\n  end\n  local function helper4(lst)\n    local\
    \ largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n      if lst[i]\
    \ > largest then\n        largest = lst[i]\n      elseif lst[i] < smallest then\n\
    \        smallest = lst[i]\n      end\n    end\n    return largest, smallest\n\
    \  end\n  local function helper5(lst)\n    local largest = nil\n    local smallest\
    \ = nil\n    for i = 1, #lst do\n      if lst[i] > largest then\n        largest\
    \ = lst[i]\n      elseif lst[i] < smallest then\n        smallest = lst[i]\n \
    \     end\n    end\n    return largest, smallest\n  end\n  local function helper6(lst)\n\
    \    local largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n \
    \     if lst[i] > largest then\n        largest = lst[i]\n      elseif lst[i]\
    \ < smallest then\n        smallest = lst[i]\n      end\n    end\n    return largest,\
    \ smallest\n  end\n  local function helper7(lst)\n    local largest = nil\n  \
    \  local smallest = nil\n    for i = 1, #lst do\n      if lst[i] > largest then\n\
    \        largest = lst[i]\n      elseif lst[i] < smallest then\n        smallest\
    \ = lst[i]\n      end\n    end\n    return largest, smallest\n  end\n  local function\
    \ helper8(lst", "  if #lst == 0 then return nil, nil end\n  local smallest, largest\
    \ = lst[1], lst[#lst]\n  for i = 2, #lst do\n    if lst[i] < smallest then smallest\
    \ = lst[i] end\n    if lst[i] > largest then largest = lst[i] end\n  end\n  return\
    \ smallest, largest\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local largest = nil\n  local smallest = nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < 0 then\n      if largest == nil then\n        largest = lst[i]\n      else\n\
    \        largest = largest < lst[i] and largest or lst[i]\n      end\n    else\n\
    \      if smallest == nil then\n        smallest = lst[i]\n      else\n      \
    \  smallest = smallest > lst[i] and smallest or lst[i]\n      end\n    end\n \
    \ end\n  return largest, smallest\nend", "  local function helper(lst)\n    local\
    \ smallest, largest = nil, nil\n    for i = 1, #lst do\n      if lst[i] < smallest\
    \ then\n        smallest = lst[i]\n      elseif lst[i] > largest then\n      \
    \  largest = lst[i]\n      end\n    end\n    return smallest, largest\n  end\n\
    \  local smallest, largest = helper(lst)\n  if smallest == nil then\n    return\
    \ nil, largest\n  end\n  return smallest, largest\nend", "  local function helper(lst)\n\
    \    local max_negative, max_positive = nil, nil\n    for i = 1, #lst do\n   \
    \   if lst[i] < 0 then\n        if max_negative == nil then\n          max_negative\
    \ = lst[i]\n        else\n          max_negative = max_negative > lst[i] and max_negative\
    \ or lst[i]\n        end\n      elseif lst[i] > 0 then\n        if max_positive\
    \ == nil then\n          max_positive = lst[i]\n        else\n          max_positive\
    \ = max_positive < lst[i] and max_positive or lst[i]\n        end\n      end\n\
    \    end\n    return max_negative, max_positive\n  end\n  return helper(lst)\n\
    end", "  if #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n    return\
    \ lst\n  else\n    local largest = lst[1]\n    local smallest = lst[1]\n    for\
    \ i = 2, #lst do\n      if lst[i] > largest then\n        largest = lst[i]\n \
    \     elseif lst[i] < smallest then\n        smallest = lst[i]\n      end\n  \
    \  end\n    return (largest, smallest)\n  end\nend", "  if #lst == 0 then\n  \
    \  return nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local function helper(lst)\n    local positive,\
    \ negative = {}, {}\n    for _, v in ipairs(lst) do\n      if v > 0 then\n   \
    \     table.insert(positive, v)\n      elseif v < 0 then\n        table.insert(negative,\
    \ v)\n      end\n    end\n    if #positive > 0 and #negative > 0 then\n      return\
    \ positive, negative\n    elseif #positive > 0 then\n      return positive, {}\n\
    \    elseif #negative > 0 then\n      return {}, negative\n    else\n      return\
    \ nil, nil\n    end\n  end\n  return helper(lst)\nend", "  local function is_negative_integer(x)\n\
    \    return x < 0\n  end\n  local function is_positive_integer(x)\n    return\
    \ x > 0\n  end\n  local function is_none(x)\n    return x == nil\n  end\n  local\
    \ function is_all_none(lst)\n    for _, x in ipairs(lst) do\n      if x == nil\
    \ then\n        return true\n      end\n    end\n    return false\n  end\n  local\
    \ function is_all_positive(lst)\n    for _, x in ipairs(lst) do\n      if x ==\
    \ nil then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  local function is_all_negative(lst)\n    for _, x in ipairs(lst) do\n     \
    \ if x == nil then\n        return true\n      end\n    end\n    return false\n\
    \  end\n  local function is_all_numbers(lst)\n    for _, x in ipairs(lst) do\n\
    \      if type(x) == \"number\" then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function is_all_numbers_or_none(lst)\n    for\
    \ _, x in ipairs(lst) do\n      if type(x) == \"number\" then\n        return\
    \ true\n      elseif x == nil then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function is_all_numbers_and_none(lst)\n    for\
    \ _, x in ipairs(lst) do\n      if type(x) == \"number\" then\n        return\
    \ true\n      elseif x == nil then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function is_all_numbers_and_numbers(lst)\n \
    \   for _, x in ipairs(lst) do\n      if type(x) == \"number\" then\n        return\
    \ true\n      elseif type(x) == \"number\" then\n        return true\n      end\n\
    \    end\n    return false\n  end\n  local function is_all_numbers_and_numbers_or_none(lst)\n\
    \    for _, x in ipairs(lst) do\n      if type(x) == \"number\" then\n       \
    \ return true\n      elseif type(x) == \"number\" then\n        return true\n\
    \      elseif x == nil then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local function is_all_numbers_and_numbers_and_none(lst)\n  \
    \  for _, x in ipairs(lst) do\n      if type(x) == \"number\" then\n        return\
    \ true\n      elseif type(x) == \"number\" then\n        return true\n      elseif\
    \ x == nil then\n        return true\n      end\n    end\n    return false\n \
    \ end\n  local function is_all_numbers_and_", "  local function helper(lst)\n\
    \    local largest = nil\n    local smallest = nil\n    for _, v in ipairs(lst)\
    \ do\n      if v < 0 then\n        if largest == nil then\n          largest =\
    \ v\n        else\n          largest = largest * 10 + v\n        end\n      elseif\
    \ v > 0 then\n        if smallest == nil then\n          smallest = v\n      \
    \  else\n          smallest = smallest * 10 + v\n        end\n      end\n    end\n\
    \    return largest, smallest\n  end\n  return helper(lst)\nend", "  local function\
    \ is_negative(i)\n    return i < 0\n  end\n  local function is_positive(i)\n \
    \   return i >= 0\n  end\n  local function is_zero(i)\n    return i == 0\n  end\n\
    \  local function is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_or_zero(i)\n    return is_negative(i) or\
    \ is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n    return is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_or_one(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i) or is_one(i)\n  end\n  local function is_negative_or_positive_or_zero_or_one_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\n\
    \  end\n  local function is_negative_or_positive_or_zero_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i)\n  end\n  local function is_negative_or_positive_or_zero_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i)\n  end\n  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i) or is_more(i)\n  end\n  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i) or is_more(i) or is_more(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i) or is_more(i) or is_more(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i) or is_", "  local function is_negative(x)\n    return\
    \ x < 0\n  end", "  local function is_negative(i)\n    return i < 0\n  end\n \
    \ local function is_positive(i)\n    return i >= 0\n  end\n  local function is_zero(i)\n\
    \    return i == 0\n  end\n  local function is_negative_and_positive(i)\n    return\
    \ is_negative(i) and is_positive(i)\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_negative_and_positive(i)\n\
    \    return is_negative(i) or is_negative_and_positive(i)\n  end\n  local function\
    \ is_negative_or_negative_and_zero(i)\n    return is_negative(i) or is_negative_and_zero(i)\n\
    \  end\n  local function is_negative_or_positive_and_zero(i)\n    return is_negative(i)\
    \ or is_positive_and_zero(i)\n  end\n  local function is_negative_or_positive_and_positive(i)\n\
    \    return is_negative(i) or is_positive_and_positive(i)\n  end\n  local function\
    \ is_positive_or_positive_and_zero(i)\n    return is_positive(i) or is_positive_and_zero(i)\n\
    \  end\n  local function is_positive_or_positive_and_positive(i)\n    return is_positive(i)\
    \ or is_positive_and_positive(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_positive_or_positive(i)\n\
    \    return is_positive(i) or is_positive(i)\n  end\n  local function is_zero(i)\n\
    \    return is_zero(i)\n  end\n  local function is_positive(i)\n    return is_positive(i)\n\
    \  end\n  local function is_negative(i)\n    return is_negative(i)\n  end\n  local\
    \ function is_positive_or_negative(i)\n    return is_positive(i) or is_negative(i)\n\
    \  end\n  local function is_negative_or_positive(i)\n    return is_negative(i)\
    \ or is_positive(i)\n  end\n  local function is_positive_or_positive(i)\n    return\
    \ is_positive(i) or is_positive(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_negative_and_positive(i)\n\
    \    return is_negative(i) or is_negative_and_positive(i)\n  end\n  local function\
    \ is_negative_or_negative_and_zero(i)\n    return is_negative(i) or is_negative_and_zero(i)\n\
    \  end", "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest = nil\n\
    \  local smallest = nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local function\
    \ is_negative(x)\n    return x < 0\n  end\n  local function is_positive(x)\n \
    \   return x > 0\n  end\n  local function is_zero(x)\n    return x == 0\n  end\n\
    \  local function is_one(x)\n    return x == 1\n  end\n  local function is_two(x)\n\
    \    return x == 2\n  end\n  local function is_three(x)\n    return x == 3\n \
    \ end\n  local function is_four(x)\n    return x == 4\n  end\n  local function\
    \ is_five(x)\n    return x == 5\n  end\n  local function is_six(x)\n    return\
    \ x == 6\n  end\n  local function is_seven(x)\n    return x == 7\n  end\n  local\
    \ function is_eight(x)\n    return x == 8\n  end\n  local function is_nine(x)\n\
    \    return x == 9\n  end\n  local function is_ten(x)\n    return x == 10\n  end\n\
    \  local function is_eleven(x)\n    return x == 11\n  end\n  local function is_twelve(x)\n\
    \    return x == 12\n  end\n  local function is_thirteen(x)\n    return x == 13\n\
    \  end\n  local function is_fourteen(x)\n    return x == 14\n  end\n  local function\
    \ is_fifteen(x)\n    return x == 15\n  end\n  local function is_sixteen(x)\n \
    \   return x == 16\n  end\n  local function is_seventeen(x)\n    return x == 17\n\
    \  end\n  local function is_eighteen(x)\n    return x == 18\n  end\n  local function\
    \ is_nineteen(x)\n    return x == 19\n  end\n  local function is_twenty(x)\n \
    \   return x == 20\n  end\n  local function is_twenty_one(x)\n    return x ==\
    \ 21\n  end\n  local function is_twenty_two(x)\n    return x == 22\n  end\n  local\
    \ function is_twenty_three(x)\n    return x == 23\n  end\n  local function is_twenty_four(x)\n\
    \    return x == 24\n  end\n  local function is_twenty_five(x)\n    return x ==\
    \ 25\n  end\n  local function is_twenty_six(x)\n    return x == 26\n  end\n  local\
    \ function is_twenty_seven(x)\n    return x == 27\n  end\n  local function is_twenty_eight(x)\n\
    \    return x == 28\n  end\n  local function is_twenty_nine(x)\n    return x ==\
    \ 29\n  end\n  local function is_thirty(x)\n    return x == 30 or x == 31 or x\
    \ == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x\
    \ == 39 or x == 40 or x == 41 or x", "  if #lst == 0 then\n    return nil, nil\n\
    \  end\n  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] >\
    \ largest then\n      largest = lst[i]\n    end\n  end\n  return smallest, largest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local largest = nil\n  local\
    \ smallest = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest\
    \ == nil then\n        largest = lst[i]\n      else\n        largest = largest\
    \ * 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest == nil\
    \ then\n        smallest = lst[i]\n      else\n        smallest = smallest * 10\
    \ + lst[i]\n      end\n    end\n  end\n  return largest, smallest\nend", "  if\
    \ #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n    return lst\n  else\n\
    \    local largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n \
    \     if lst[i] < 0 then\n        if largest == nil then\n          largest =\
    \ lst[i]\n        else\n          largest = largest * 10 + lst[i]\n        end\n\
    \      elseif lst[i] > 0 then\n        if smallest == nil then\n          smallest\
    \ = lst[i]\n        else\n          smallest = smallest * 10 + lst[i]\n      \
    \  end\n      end\n    end\n    return largest, smallest\n  end\nend", "  local\
    \ function is_negative(integer)\n    return integer < 0\n  end\n  local function\
    \ is_positive(integer)\n    return integer > 0\n  end\n  local function is_zero(integer)\n\
    \    return integer == 0\n  end\n  local function is_negative_integer(integer)\n\
    \    return is_negative(integer)\n  end\n  local function is_positive_integer(integer)\n\
    \    return is_positive(integer)\n  end\n  local function is_zero_integer(integer)\n\
    \    return is_zero(integer)\n  end\n  local function is_negative_integer_or_zero(integer)\n\
    \    return is_negative_integer(integer) or is_zero_integer(integer)\n  end\n\
    \  local function is_positive_integer_or_zero(integer)\n    return is_positive_integer(integer)\
    \ or is_zero_integer(integer)\n  end\n  local function is_negative_integer_or_zero_integer(integer)\n\
    \    return is_negative_integer_or_zero(integer) or is_zero_integer(integer)\n\
    \  end\n  local function is_positive_integer_or_zero_integer(integer)\n    return\
    \ is_positive_integer_or_zero(integer) or is_zero_integer(integer)\n  end\n  local\
    \ function is_negative_integer_or_zero_integer_or_zero(integer)\n    return is_negative_integer_or_zero_integer(integer)\
    \ or is_zero_integer(integer)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(integer)\n\
    \    return is_positive_integer_or_zero_integer(integer) or is_zero_integer(integer)\n\
    \  end\n  local function is_negative_integer_or_zero_integer_or_zero_integer(integer)\n\
    \    return is_negative_integer_or_zero_integer_or_zero(integer) or is_zero_integer(integer)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(integer)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(integer) or is_zero_integer(integer)\n\
    \  end\n  local function is_negative_integer_or_zero_integer_or_zero_integer_or_zero(integer)\n\
    \    return is_negative_integer_or_zero_integer_or_zero_integer(integer) or is_zero_integer(integer)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer_or_zero(integer)\n\
    \    return is_positive_integer_or_zero_integer_or_zero_integer(integer) or is_zero_integer(integer)\n\
    \  end\n  local function is_negative_integer_or_zero_integer_or_zero_integer_or_zero_integer(integer)\n\
    \    return is_negative_integer_or_zero_integer_or_zero_integer_or_zero(", " \
    \ if #lst == 0 then return nil, nil end\n  local largest, smallest = lst[1], lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest, smallest\n\
    end", "  local function helper(lst)\n    local smallest, largest = nil, nil\n\
    \    for i = 1, #lst do\n      if lst[i] < smallest then\n        smallest = lst[i]\n\
    \      elseif lst[i] > largest then\n        largest = lst[i]\n      end\n   \
    \ end\n    return smallest, largest\n  end\n  local smallest, largest = helper(lst)\n\
    \  if smallest == nil and largest == nil then\n    return nil, nil\n  end\n  return\
    \ smallest, largest\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n\
    \      largest = lst[i]\n    end\n    if smallest > lst[i] then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then return nil, nil end\n  if lst[1] < 0 then return nil, lst[1] end\n  if\
    \ lst[#lst] == 0 then return nil, lst[#lst] end\n  local a = largest_smallest_integers(lst[#lst]:gsub(\"\
    %d+\", \"\"))\n  if a ~= nil then return a, lst[#lst] end\n  local b = largest_smallest_integers(lst[#lst]:gsub(\"\
    %d-\", \"\"))\n  if b ~= nil then return b, lst[#lst] end\n  return nil, nil\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest, largest =\
    \ lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  return largest, smallest\nend", "  local function is_negative(integer)\n\
    \    return integer < 0\n  end\n  local function is_positive(integer)\n    return\
    \ integer > 0\n  end\n  local function is_zero(integer)\n    return integer ==\
    \ 0\n  end\n  local function is_none(integer)\n    return integer == nil\n  end\n\
    \  local function is_integer(integer)\n    return integer ~= nil\n  end\n  local\
    \ function is_list(lst)\n    return type(lst) == \"table\" and lst ~= nil\n  end\n\
    \  local function is_tuple(lst)\n    return type(lst) == \"table\" and #lst ==\
    \ 2\n  end\n  local function is_pair(lst)\n    return type(lst) == \"table\" and\
    \ #lst == 2 and type(lst[1]) == \"number\"\n  end\n  local function is_pair_list(lst)\n\
    \    return type(lst) == \"table\" and #lst == 2 and type(lst[1]) == \"table\"\
    \n  end\n  local function is_list(lst)\n    return type(lst) == \"table\" and\
    \ lst ~= nil\n  end\n  local function is_tuple(lst)\n    return type(lst) == \"\
    table\" and #lst == 2\n  end\n  local function is_pair(lst)\n    return type(lst)\
    \ == \"table\" and #lst == 2 and type(lst[1]) == \"number\"\n  end\n  local function\
    \ is_pair_list(lst)\n    return type(lst) == \"table\" and #lst == 2 and type(lst[1])\
    \ == \"table\"\n  end\n  local function is_number(number)\n    return type(number)\
    \ == \"number\"\n  end\n  local function is_integer(integer)\n    return type(integer)\
    \ == \"number\" and integer ~= nil\n  end\n  local function is_none(integer)\n\
    \    return integer == nil\n  end\n  local function is_list(lst)\n    return type(lst)\
    \ == \"table\" and lst ~= nil\n  end\n  local function is_tuple(lst)\n    return\
    \ type(lst) == \"table\" and #lst == 2\n  end\n  local function is_pair(lst)\n\
    \    return type(lst) == \"table\" and #lst == 2 and type(lst[1]) == \"number\"\
    \n  end\n  local function is_pair_list(lst)\n    return type(lst) == \"table\"\
    \ and #lst == 2 and type(lst[1]) == \"table\"\n  end\n  local function is_number(number)\n\
    \    return type(number) == \"number\"\n  end\n  local function is_integer(integer)\n\
    \    return type(integer) == \"number\" and integer ~= nil\n  end\n  local function\
    \ is_none(integer)\n    return integer == nil\n  end\n  local function is_list(lst)\n\
    \    return type(lst) == \"table\" and lst ~= ", "  if #lst == 0 then\n    return\
    \ nil, nil\n  end\n  local largest = nil\n  local smallest = nil\n  for i = 1,\
    \ #lst do\n    if lst[i] < 0 then\n      if largest == nil then\n        largest\
    \ = lst[i]\n      else\n        largest = largest * 10 + lst[i]\n      end\n \
    \   elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest =\
    \ lst[i]\n      else\n        smallest = smallest * 10 + lst[i]\n      end\n \
    \   end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then return\
    \ nil, nil end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] > largest then largest = lst[i] end\n    if lst[i]\
    \ < smallest then smallest = lst[i] end\n  end\n  return largest, smallest\nend",
  "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest = nil\n  local\
    \ smallest = nil\n  for i = 1, #lst do\n    local a = lst[i]\n    if a < 0 then\n\
    \      if largest == nil then\n        largest = a\n      else\n        largest\
    \ = largest * 10 + a\n      end\n    elseif largest == nil then\n      smallest\
    \ = a\n    else\n      smallest = smallest * 10 + a\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local function helper(lst)\n    local largest =\
    \ nil\n    local smallest = nil\n    for i = 1, #lst do\n      if lst[i] > largest\
    \ then\n        largest = lst[i]\n      elseif lst[i] < smallest then\n      \
    \  smallest = lst[i]\n      end\n    end\n    return (largest, smallest)\n  end\n\
    \  local result = helper(lst)\n  if result == nil then\n    return (None, None)\n\
    \  end\n  return result\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n\
    \  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  return smallest, largest\nend", " \
    \ if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n\
    \    return nil\n  else\n    local smallest, largest = lst[1], lst[1]\n    for\
    \ i = 2, #lst do\n      if lst[i] < smallest then\n        smallest = lst[i]\n\
    \      elseif lst[i] > largest then\n        largest = lst[i]\n      end\n   \
    \ end\n    return largest, smallest\n  end\nend", "  local function is_negative_integer(x)\n\
    \    return x ~= nil and x ~= false and x ~= 0 and x < 0\n  end\n  local function\
    \ is_positive_integer(x)\n    return x ~= nil and x ~= false and x ~= 0 and x\
    \ > 0\n  end\n  local function get_largest_integer(lst)\n    local largest = nil\n\
    \    for i = 1, #lst do\n      if is_negative_integer(lst[i]) then\n        if\
    \ largest == nil then\n          largest = lst[i]\n        else\n          largest\
    \ = math.max(largest, lst[i])\n        end\n      end\n      if is_positive_integer(lst[i])\
    \ then\n        if largest == nil then\n          largest = lst[i]\n        else\n\
    \          largest = math.min(largest, lst[i])\n        end\n      end\n    end\n\
    \    return largest\n  end\n  local function get_smallest_integer(lst)\n    local\
    \ smallest = nil\n    for i = 1, #lst do\n      if is_negative_integer(lst[i])\
    \ then\n        if smallest == nil then\n          smallest = lst[i]\n       \
    \ else\n          smallest = math.min(smallest, lst[i])\n        end\n      end\n\
    \      if is_positive_integer(lst[i]) then\n        if smallest == nil then\n\
    \          smallest = lst[i]\n        else\n          smallest = math.max(smallest,\
    \ lst[i])\n        end\n      end\n    end\n    return smallest\n  end\n  local\
    \ function get_largest_and_smallest_integers(lst)\n    local largest_integer =\
    \ get_largest_integer(lst)\n    local smallest_integer = get_smallest_integer(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    end\n    return nil, nil\n  end\n  local\
    \ function get_largest_and_smallest_integers_or_none(lst)\n    local largest_integer,\
    \ smallest_integer = get_largest_and_smallest_integers(lst)\n    if largest_integer\
    \ ~= nil and smallest_integer ~= nil then\n      return largest_integer, smallest_integer\n\
    \    end\n    return nil, nil\n  end\n  local function get_largest_and_smallest_integers_or_none_or_error(lst)\n\
    \    local largest_integer, smallest_integer = get_largest_and_smallest_integers_or_none(lst)\n\
    \    if largest_integer ~= nil and smallest_integer ~= nil then\n      return\
    \ largest_integer, smallest_integer\n    end\n    error(string.format('The list ",
  "  if #lst == 0 then return nil, nil end\n  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = lst[i]\n      else\n        if max_negative\
    \ > lst[i] then\n          max_negative = lst[i]\n        end\n      end\n   \
    \ elseif lst[i] > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = lst[i]\n      else\n        if min_positive < lst[i] then\n          min_positive\
    \ = lst[i]\n        end\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  if #lst == 0 then\n    return nil\n  else\n    local largest = lst[1]\n\
    \    local smallest = lst[1]\n    for i = 2, #lst do\n      if lst[i] > largest\
    \ then\n        largest = lst[i]\n      elseif lst[i] < smallest then\n      \
    \  smallest = lst[i]\n      end\n    end\n    return largest, smallest\n  end\n\
    end", "  local function is_negative(i)\n    return i < 0\n  end\n  local function\
    \ is_positive(i)\n    return i >= 0\n  end\n  local function is_zero(i)\n    return\
    \ i == 0\n  end\n  local function is_negative_and_positive(i)\n    return is_negative(i)\
    \ and is_positive(i)\n  end\n  local function is_negative_or_zero(i)\n    return\
    \ is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_negative_or_zero(i)\n    return is_negative(i) or is_negative(i)\
    \ or is_zero(i)\n  end\n  local function is_positive_or_negative_or_zero(i)\n\
    \    return is_positive(i) or is_negative(i) or is_zero(i)\n  end\n  local function\
    \ is_positive_or_positive_or_zero(i)\n    return is_positive(i) or is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_positive_or_negative_or_positive_or_zero(i)\n\
    \    return is_positive(i) or is_negative(i) or is_zero(i) or is_positive(i)\n\
    \  end\n  local function is_negative_or_positive_or_positive_or_zero(i)\n    return\
    \ is_negative(i) or is_positive(i) or is_zero(i) or is_positive(i)\n  end\n  local\
    \ function is_negative_or_negative_or_positive_or_zero(i)\n    return is_negative(i)\
    \ or is_negative(i) or is_zero(i) or is_positive(i)\n  end\n  local function is_positive_or_positive_or_negative_or_zero(i)\n\
    \    return is_positive(i) or is_positive(i) or is_zero(i) or is_negative(i)\n\
    \  end\n  local function is_negative_or_negative_or_positive_or_zero(i)\n    return\
    \ is_negative(i) or is_negative(i) or is_zero(i) or is_positive(i)\n  end\n  local\
    \ function is_positive_or_positive_or_negative_or_zero(i)\n    return is_positive(i)\
    \ or is_positive(i) or is_zero(i) or is_negative(i)\n  end\n  local function is_negative_or_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_negative(i) or is_zero(i) or is_positive(i)\n\
    \  end\n  local function is_positive_or_positive_or_negative_or_zero(i)\n    return\
    \ is_positive(i) or is_positive(i) or is_zero(i) or is_negative(i)\n  end\n  local\
    \ function is_negative_or_negative_or_positive_or_zero(i)\n    return is_negative(i)\
    \ or is_negative(i) or is_zero(i) or is_positive(i)\n  end\n  local function is_positive_or_positive_or_negative_or_zero(i)\n\
    \    return is_positive(i) or is_positive(i", "  local function is_negative(x)\n\
    \    return x < 0\n  end\n  local function is_positive(x)\n    return x > 0\n\
    \  end\n  local function is_zero(x)\n    return x == 0\n  end\n  local function\
    \ is_negative_and_positive(x)\n    return is_negative(x) and is_positive(x)\n\
    \  end\n  local function is_negative_or_zero(x)\n    return is_negative(x) or\
    \ is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n    return is_positive(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_or_positive(x)\n    return\
    \ is_negative(x) or is_positive(x)\n  end\n  local function is_negative_or_zero(x)\n\
    \    return is_negative(x) or is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_positive_and_zero(x)\n\
    \    return is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local function\
    \ is_negative_or_zero(x)\n    return is_negative(x) or is_zero(x)\n  end\n  local\
    \ function is_positive_and_zero(x)\n    return is_positive(x) or is_zero(x)\n\
    \  end\n  local function is_negative_or_positive_and_zero(x)\n    return is_negative(x)\
    \ or is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_zero(x)\n\
    \    return is_negative(x) or is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_positive_and_zero(x)\n\
    \    return is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local function\
    \ is_negative_or_zero(x)\n    return is_negative(x) or is_zero(x)\n  end\n  local\
    \ function is_positive_and_zero(x)\n    return is_positive(x) or is_zero(x)\n\
    \  end\n  local function is_negative_or_positive_and_zero(x)\n    return is_negative(x)\
    \ or is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_zero(x)\n\
    \    return is_negative(x) or is_zero(x)\n  end\n  local function is_positive_and_zero(x)\n\
    \    return is_positive(x) or is_zero(x)\n  end\n  local function is_negative_or_positive_and_zero(x)\n\
    \    return is_negative(x) or is_positive(x) or is_zero(x)\n  end\n  local function\
    \ is_negative_or_zero(x)\n    return is_negative(x) or is_zero(x)\n  end\n  local\
    \ function is_positive_and_zero(x)\n    return is_positive(x) or is_zero(x)\n\
    \  end\n  local function is_negative_or_positive_and_zero(x)\n    return is_negative(x)\
    \ or is_positive(x) or is_zero(x)", "  local function is_negative(i)\n    return\
    \ i < 0\n  end\n  local function is_positive(i)\n    return i >= 0\n  end\n  local\
    \ function is_zero(i)\n    return i == 0\n  end\n  local function is_negative_and_positive(i)\n\
    \    return is_negative(i) and is_positive(i)\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_positive_and_zero(i)\n\
    \    return is_positive(i) and is_zero(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_positive_or_negative(i)\n\
    \    return is_positive(i) or is_negative(i)\n  end\n  local function is_negative_or_negative(i)\n\
    \    return is_negative(i) or is_negative(i)\n  end\n  local function is_positive_or_positive(i)\n\
    \    return is_positive(i) or is_positive(i)\n  end\n  local function is_negative_or_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_positive_or_negative(i)\n\
    \    return is_positive(i) or is_negative(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_positive_or_negative(i)\n\
    \    return is_positive(i) or is_negative(i)\n  end\n  local function is_negative_or_negative(i)\n\
    \    return is_negative(i) or is_negative(i)\n  end\n  local function is_positive_or_positive(i)\n\
    \    return is_positive(i) or is_positive(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive(i)\n\
    \    return is_negative(i) or is_positive(i)\n  end\n  local function is_positive_or_negative(i)\n\
    \    return is_positive(i) or is_negative(i)\n  end\n  local function is_negative_or_negative(i)\n\
    \    return is_negative(i) or is_negative(i)\n  end\n  local function is_positive_or_positive(i)\n\
    \    return is_positive(i) or is_positive(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i", "  if #lst == 0 then return nil, nil end\n  local\
    \ max_negative = max_positive = nil\n  for i = 1, #lst do\n    local negative,\
    \ positive = lst:get_next(i)\n    if negative > max_negative then max_negative\
    \ = negative end\n    if positive < max_positive then max_positive = positive\
    \ end\n  end\n  return max_negative, max_positive\nend", "  if #lst == 0 then\
    \ return nil, nil end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  if #lst == 0 then\n    return nil, nil\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  if #lst == 0 then return nil, nil end\n  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = lst[i]\n      else\n\
    \        if max_negative < lst[i] then\n          max_negative = lst[i]\n    \
    \    end\n      end\n    else\n      if min_positive == nil then\n        min_positive\
    \ = lst[i]\n      else\n        if min_positive > lst[i] then\n          min_positive\
    \ = lst[i]\n        end\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  local function helper(lst)\n    local smallest, largest = nil, nil\n\
    \    for i = 1, #lst do\n      if lst[i] < smallest then\n        smallest = lst[i]\n\
    \      elseif lst[i] > largest then\n        largest = lst[i]\n      end\n   \
    \ end\n    return smallest, largest\n  end\n  local smallest, largest = helper(lst)\n\
    \  if smallest == nil and largest == nil then\n    return nil, nil\n  end\n  return\
    \ smallest, largest\nend", "  local function is_negative(x)\n    return x < 0\n\
    \  end\n  local function is_positive(x)\n    return x > 0\n  end\n  local function\
    \ is_zero(x)\n    return x == 0\n  end\n  local function is_one(x)\n    return\
    \ x == 1\n  end\n  local function is_two(x)\n    return x == 2\n  end\n  local\
    \ function is_three(x)\n    return x == 3\n  end\n  local function is_four(x)\n\
    \    return x == 4\n  end\n  local function is_five(x)\n    return x == 5\n  end\n\
    \  local function is_six(x)\n    return x == 6\n  end\n  local function is_seven(x)\n\
    \    return x == 7\n  end\n  local function is_eight(x)\n    return x == 8\n \
    \ end\n  local function is_nine(x)\n    return x == 9\n  end\n  local function\
    \ is_ten(x)\n    return x == 10\n  end\n  local function is_eleven(x)\n    return\
    \ x == 11\n  end\n  local function is_twelve(x)\n    return x == 12\n  end\n \
    \ local function is_thirteen(x)\n    return x == 13\n  end\n  local function is_fourteen(x)\n\
    \    return x == 14\n  end\n  local function is_fifteen(x)\n    return x == 15\n\
    \  end\n  local function is_sixteen(x)\n    return x == 16\n  end\n  local function\
    \ is_seventeen(x)\n    return x == 17\n  end\n  local function is_eighteen(x)\n\
    \    return x == 18\n  end\n  local function is_nineteen(x)\n    return x == 19\n\
    \  end\n  local function is_twenty(x)\n    return x == 20\n  end\n  local function\
    \ is_twenty_one(x)\n    return x == 21\n  end\n  local function is_twenty_two(x)\n\
    \    return x == 22\n  end\n  local function is_twenty_three(x)\n    return x\
    \ == 23\n  end\n  local function is_twenty_four(x)\n    return x == 24\n  end\n\
    \  local function is_twenty_five(x)\n    return x == 25\n  end\n  local function\
    \ is_twenty_six(x)\n    return x == 26\n  end\n  local function is_twenty_seven(x)\n\
    \    return x == 27\n  end\n  local function is_twenty_eight(x)\n    return x\
    \ == 28\n  end\n  local function is_twenty_nine(x)\n    return x == 29\n  end\n\
    \  local function is_thirty(x)\n    return x == 30 or x == 31 or x == 32 or x\
    \ == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x\
    \ == 40 or x == 41 or x", "  if #lst == 0 then\n    return nil, nil\n  end\n \
    \ local largest, smallest = nil, nil\n  for i = 1, #lst do\n    local value =\
    \ lst[i]\n    if value < 0 then\n      if largest == nil then\n        largest\
    \ = value\n      else\n        largest = largest * 10 + value\n      end\n   \
    \ elseif largest ~= nil then\n      if smallest == nil then\n        smallest\
    \ = value\n      else\n        smallest = smallest * 10 + value\n      end\n \
    \   end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n    return\
    \ nil, nil\n  end\n  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if\
    \ lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local function is_negative(i)\n    return i < 0\n  end\n \
    \ local function is_positive(i)\n    return i > 0\n  end\n  local function is_zero(i)\n\
    \    return i == 0\n  end\n  local function is_negative_and_positive(i)\n    return\
    \ is_negative(i) and is_positive(i)\n  end\n  local function is_negative_or_zero(i)\n\
    \    return is_negative(i) or is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n\
    \    return is_positive(i) or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_or_one(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i) or i == 1\n  end\n  local function is_negative_or_positive_or_zero_or_one_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or i >= 1\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more(i)\n    return\
    \ is_negative(i) or is_positive(i) or is_zero(i) or i >= 2\n  end\n  local function\
    \ is_negative_or_positive_or_zero_or_more_or_more_or_more(i)\n    return is_negative(i)\
    \ or is_positive(i) or is_zero(i) or i >= 3\n  end\n  local function is_negative_or_positive_or_zero_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or i >= 4\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or i >= 5\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or i >= 6\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or i >= 7\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or i >= 8\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or i >= 9\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_", "  if #lst == 0 then\n \
    \   return nil, nil\n  end\n  local largest = nil\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if lst[i] < 0 then\n      if largest == nil then\n     \
    \   largest = lst[i]\n      else\n        largest = largest * 10 + lst[i]\n  \
    \    end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest\
    \ = lst[i]\n      else\n        smallest = smallest * 10 + lst[i]\n      end\n\
    \    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then return\
    \ nil, nil end\n  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if\
    \ lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return smallest,\
    \ largest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local max_negative = nil\n  local min_positive = nil\n  for i\
    \ = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n  \
    \      max_negative = lst[i]\n      else\n        if max_negative < lst[i] then\n\
    \          max_negative = lst[i]\n        end\n      end\n    end\n    if lst[i]\
    \ > 0 then\n      if min_positive == nil then\n        min_positive = lst[i]\n\
    \      else\n        if min_positive > lst[i] then\n          min_positive = lst[i]\n\
    \        end\n      end\n    end\n  end\n  if max_negative == nil then\n    return\
    \ nil\n  end\n  if min_positive == nil then\n    return max_negative\n  end\n\
    \  return max_negative, min_positive\nend", "  local function helper(lst)\n  \
    \  local max_negative, min_positive = nil, nil\n    for _, v in ipairs(lst) do\n\
    \      if v < 0 then\n        if max_negative == nil then\n          max_negative\
    \ = v\n        else\n          max_negative = max_negative > v ? max_negative\
    \ : v\n        end\n      elseif v > 0 then\n        if min_positive == nil then\n\
    \          min_positive = v\n        else\n          min_positive = min_positive\
    \ < v ? min_positive : v\n        end\n      end\n    end\n    return max_negative,\
    \ min_positive\n  end\n  return helper(lst)\nend", "  if #lst == 0 then\n    return\
    \ nil\n  else\n    local largest = lst[1]\n    local smallest = lst[1]\n    for\
    \ i = 2, #lst do\n      if lst[i] > largest then\n        largest = lst[i]\n \
    \     elseif lst[i] < smallest then\n        smallest = lst[i]\n      end\n  \
    \  end\n    return largest, smallest\n  end\nend", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then return nil, nil end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then largest = lst[i] end\n    if lst[i] < smallest then smallest = lst[i] end\n\
    \  end\n  return largest, smallest\nend", "  local function is_negative(i)\n \
    \   return i < 0\n  end\n  local function is_positive(i)\n    return i >= 0\n\
    \  end\n  local function is_zero(i)\n    return i == 0\n  end\n  local function\
    \ is_negative_and_positive(i)\n    return is_negative(i) and is_positive(i)\n\
    \  end\n  local function is_negative_or_zero(i)\n    return is_negative(i) or\
    \ is_zero(i)\n  end\n  local function is_positive_or_zero(i)\n    return is_positive(i)\
    \ or is_zero(i)\n  end\n  local function is_negative_or_positive_or_zero(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_or_one(i)\n    return is_negative(i) or is_positive(i)\
    \ or is_zero(i) or is_one(i)\n  end\n  local function is_negative_or_positive_or_zero_or_one_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\n\
    \  end\n  local function is_negative_or_positive_or_zero_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i)\n  end\n  local function is_negative_or_positive_or_zero_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i)\n  end\n  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i) or is_more(i)\n  end\n  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i) or is_more(i) or is_more(i)\n  end\n  local function\
    \ is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i) or is_more(i) or is_more(i) or is_more(i) or is_more(i)\n  end\n\
    \  local function is_negative_or_positive_or_zero_or_more_or_more_or_more_or_more_or_more_or_more(i)\n\
    \    return is_negative(i) or is_positive(i) or is_zero(i) or is_one(i) or is_more(i)\
    \ or is_more(i", "  local function is_negative_integer(x)\n    return x < 0 and\
    \ x ~= nil\n  end\n  local function is_positive_integer(x)\n    return x >= 0\
    \ and x ~= nil\n  end\n  local function is_none(x)\n    return x == nil\n  end\n\
    \  local function is_largest(lhs, rhs)\n    return lhs > rhs\n  end\n  local function\
    \ is_smallest(lhs, rhs)\n    return lhs < rhs\n  end\n  local function is_largest(lhs,\
    \ rhs)\n    return lhs > rhs\n  end\n  local function is_smallest(lhs, rhs)\n\
    \    return lhs < rhs\n  end\n  local function is_largest(lhs, rhs)\n    return\
    \ lhs > rhs\n  end\n  local function is_smallest(lhs, rhs)\n    return lhs < rhs\n\
    \  end\n  local function is_largest(lhs, rhs)\n    return lhs > rhs\n  end\n \
    \ local function is_smallest(lhs, rhs)\n    return lhs < rhs\n  end\n  local function\
    \ is_largest(lhs, rhs)\n    return lhs > rhs\n  end\n  local function is_smallest(lhs,\
    \ rhs)\n    return lhs < rhs\n  end\n  local function is_largest(lhs, rhs)\n \
    \   return lhs > rhs\n  end\n  local function is_smallest(lhs, rhs)\n    return\
    \ lhs < rhs\n  end\n  local function is_largest(lhs, rhs)\n    return lhs > rhs\n\
    \  end\n  local function is_smallest(lhs, rhs)\n    return lhs < rhs\n  end\n\
    \  local function is_largest(lhs, rhs)\n    return lhs > rhs\n  end\n  local function\
    \ is_smallest(lhs, rhs)\n    return lhs < rhs\n  end\n  local function is_largest(lhs,\
    \ rhs)\n    return lhs > rhs\n  end\n  local function is_smallest(lhs, rhs)\n\
    \    return lhs < rhs\n  end\n  local function is_largest(lhs, rhs)\n    return\
    \ lhs > rhs\n  end\n  local function is_smallest(lhs, rhs)\n    return lhs < rhs\n\
    \  end\n  local function is_largest(lhs, rhs)\n    return lhs > rhs\n  end\n \
    \ local function is_smallest(lhs, rhs)\n    return lhs < rhs\n  end\n  local function\
    \ is_largest(lhs, rhs)\n    return lhs > rhs\n  end\n  local function is_smallest(lhs,\
    \ rhs)\n    return lhs < rhs\n  end\n  local function is_largest(lhs, rhs)\n \
    \   return lhs > rhs\n", "  local function is_negative_integer(x)\n    return\
    \ x < 0\n  end\n  local function is_positive_integer(x)\n    return x > 0\n  end\n\
    \  local function is_none(x)\n    return x == nil\n  end\n  local function is_integer(x)\n\
    \    return type(x) == \"number\"\n  end\n  local function is_pair(x)\n    return\
    \ type(x) == \"table\" and x[1] == 1\n  end\n  local function is_list(t)\n   \
    \ return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return type(t) == \"table\" and t[1] == 1\n  end\n  local function is_pair_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 2\n  end\n  local function is_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return type(t) == \"table\" and t[1] == 1\n  end\n  local function is_pair_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 2\n  end\n  local function is_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return type(t) == \"table\" and t[1] == 1\n  end\n  local function is_pair_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 2\n  end\n  local function is_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return type(t) == \"table\" and t[1] == 1\n  end\n  local function is_pair_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 2\n  end\n  local function is_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return type(t) == \"table\" and t[1] == 1\n  end\n  local function is_pair_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 2\n  end\n  local function is_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return type(t) == \"table\" and t[1] == 1\n  end\n  local function is_pair_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 2\n  end\n  local function is_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return type(t) == \"table\" and t[1] == 1\n  end\n  local function is_pair_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 2\n  end\n  local function is_list(t)\n\
    \    return type(t) == \"table\" and t[1] == 0\n  end\n  local function is_table(t)\n\
    \    return ", "  local function helper(lst)\n    local max_val = nil\n    local\
    \ min_val = nil\n    for _, v in ipairs(lst) do\n      if v < 0 then\n       \
    \ if max_val == nil then\n          max_val = v\n        else\n          max_val\
    \ = v\n        end\n      elseif v > 0 then\n        if min_val == nil then\n\
    \          min_val = v\n        else\n          min_val = v\n        end\n   \
    \   end\n    end\n    return max_val, min_val\n  end\n  local max_val, min_val\
    \ = helper(lst)\n  if max_val == nil and min_val == nil then\n    return nil,\
    \ nil\n  end\n  return max_val, min_val\nend", "  if #lst == 0 then return nil,\
    \ nil end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then largest = lst[i] end\n    if lst[i] < smallest\
    \ then smallest = lst[i] end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then return nil, nil end\n  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = lst[i]\n      else\n        if max_negative\
    \ < lst[i] then\n          max_negative = lst[i]\n        end\n      end\n   \
    \ else\n      if min_positive == nil then\n        min_positive = lst[i]\n   \
    \   else\n        if min_positive > lst[i] then\n          min_positive = lst[i]\n\
    \        end\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local function\
    \ is_negative_integer(x)\n    return x < 0 and x ~= nil\n  end\n  local function\
    \ is_positive_integer(x)\n    return x ~= nil and x > 0\n  end\n  local function\
    \ largest_integer(x)\n    if is_negative_integer(x) then\n      return x\n   \
    \ elseif is_positive_integer(x) then\n      return x\n    else\n      return nil\n\
    \    end\n  end\n  local function smallest_integer(x)\n    if is_negative_integer(x)\
    \ then\n      return nil\n    elseif is_positive_integer(x) then\n      return\
    \ x\n    else\n      return nil\n    end\n  end\n  local function largest_and_smallest(lst)\n\
    \    local largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n \
    \     local x = lst[i]\n      if largest == nil then\n        largest = x\n  \
    \      smallest = x\n      elseif largest < x then\n        largest = x\n    \
    \  elseif smallest > x then\n        smallest = x\n      end\n    end\n    return\
    \ largest, smallest\n  end\n  local function largest_and_smallest_tuples(lst)\n\
    \    local largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n \
    \     local x = lst[i]\n      if largest == nil then\n        largest = x\n  \
    \      smallest = x\n      elseif largest < x then\n        largest = x\n    \
    \  elseif smallest > x then\n        smallest = x\n      end\n    end\n    return\
    \ largest, smallest\n  end\n  local function largest_and_smallest_lists(lst)\n\
    \    local largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n \
    \     local x = lst[i]\n      if largest == nil then\n        largest = x\n  \
    \      smallest = x\n      elseif largest < x then\n        largest = x\n    \
    \  elseif smallest > x then\n        smallest = x\n      end\n    end\n    return\
    \ largest, smallest\n  end\n  local function largest_and_smallest_dictionaries(lst)\n\
    \    local largest = nil\n    local smallest = nil\n    for i = 1, #lst do\n \
    \     local x = lst[i]\n      if largest == nil then\n        largest = x\n  \
    \      smallest = x\n      elseif largest < x then\n        largest = x\n    \
    \  elseif smallest > x then\n        smallest = x\n      end\n    end\n    return\
    \ largest, smallest\n  end\n  local function largest_", "  if #lst == 0 then\n\
    \    return nil\n  elseif #lst == 1 then\n    return lst\n  else\n    local smallest,\
    \ largest = lst[1], lst[1]\n    for i = 2, #lst do\n      if lst[i] < smallest\
    \ then\n        smallest = lst[i]\n      elseif lst[i] > largest then\n      \
    \  largest = lst[i]\n      end\n    end\n    return largest, smallest\n  end\n\
    end", "  if #lst == 0 then\n    return nil\n  elseif #lst == 1 then\n    return\
    \ lst\n  else\n    local largest = lst[1]\n    local smallest = lst[1]\n    for\
    \ i = 2, #lst do\n      if lst[i] > largest then\n        largest = lst[i]\n \
    \     elseif lst[i] < smallest then\n        smallest = lst[i]\n      end\n  \
    \  end\n    return largest, smallest\n  end\nend", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local function helper(lst)\n    local max_negative,\
    \ min_positive = nil, nil\n    for i = 1, #lst do\n      if lst[i] < 0 then\n\
    \        if max_negative == nil then\n          max_negative = i\n        else\n\
    \          max_negative = max_negative > i ? max_negative : i\n        end\n \
    \     elseif lst[i] > 0 then\n        if min_positive == nil then\n          min_positive\
    \ = i\n        else\n          min_positive = min_positive < i ? min_positive\
    \ : i\n        end\n      end\n    end\n    return max_negative, min_positive\n\
    \  end\n  local max_negative, min_positive = helper(lst)\n  if max_negative ==\
    \ nil and min_positive == nil then\n    return nil, nil\n  end\n  return max_negative,\
    \ min_positive\nend", "  local function helper(lst)\n    local max_negative, min_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n      if v < 0 then\n        if\
    \ max_negative == nil then\n          max_negative = v\n        else\n       \
    \   max_negative = max_negative > v ? max_negative : v\n        end\n      elseif\
    \ v > 0 then\n        if min_positive == nil then\n          min_positive = v\n\
    \        else\n          min_positive = min_positive < v ? min_positive : v\n\
    \        end\n      end\n    end\n    return max_negative, min_positive\n  end\n\
    \  return helper(lst)\nend", "  local function is_negative(i)\n    return i <\
    \ 0\n  end\n  local function is_positive(i)\n    return i > 0\n  end\n  local\
    \ function is_zero(i)\n    return i == 0\n  end\n  local function is_negative_and_positive(i)\n\
    \    return is_negative(i) and is_positive(i)\n  end\n  local function is_zero_and_positive(i)\n\
    \    return is_zero(i) and is_positive(i)\n  end\n  local function is_negative_and_zero(i)\n\
    \    return is_negative(i) and is_zero(i)\n  end\n  local function is_zero_and_negative(i)\n\
    \    return is_zero(i) and is_negative(i)\n  end\n  local function is_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative_and_positive(i)\n  end\n  local function\
    \ is_zero_and_negative_and_positive(i)\n    return is_zero(i) and is_negative_and_positive(i)\n\
    \  end\n  local function is_negative_and_negative_and_zero(i)\n    return is_negative(i)\
    \ and is_negative_and_zero(i)\n  end\n  local function is_zero_and_negative_and_zero(i)\n\
    \    return is_zero(i) and is_negative_and_zero(i)\n  end\n  local function is_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative_and_negative_and_positive(i)\n  end\n\
    \  local function is_zero_and_negative_and_negative_and_positive(i)\n    return\
    \ is_zero(i) and is_negative_and_negative_and_positive(i)\n  end\n  local function\
    \ is_negative_and_negative_and_negative_and_zero(i)\n    return is_negative(i)\
    \ and is_negative_and_negative_and_zero(i)\n  end\n  local function is_zero_and_negative_and_negative_and_zero(i)\n\
    \    return is_zero(i) and is_negative_and_negative_and_zero(i)\n  end\n  local\
    \ function is_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative_and_negative_and_negative_and_positive(i)\n\
    \  end\n  local function is_zero_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_zero(i) and is_negative_and_negative_and_negative_and_positive(i)\n\
    \  end\n  local function is_negative_and_negative_and_negative_and_negative_and_zero(i)\n\
    \    return is_negative(i) and is_negative_and_negative_and_negative_and_zero(i)\n\
    \  end\n  local function is_zero_and_negative_and_negative_and_negative_and_zero(i)\n\
    \    return is_zero(i) and is_negative_and_negative_and_negative_and_zero(i)\n\
    \  end\n  local function is_negative_and_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_negative(i) and is_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \  end\n  local function is_zero_and_negative_and_negative_and_negative_and_negative_and_positive(i)\n\
    \    return is_zero(i", "  local function helper(lst)\n    local max_negative\
    \ = nil\n    local min_positive = nil\n    for _, v in ipairs(lst) do\n      if\
    \ v < 0 then\n        if max_negative == nil then\n          max_negative = v\n\
    \        else\n          max_negative = max_negative > v ? max_negative : v\n\
    \        end\n      elseif v > 0 then\n        if min_positive == nil then\n \
    \         min_positive = v\n        else\n          min_positive = min_positive\
    \ < v ? min_positive : v\n        end\n      end\n    end\n    return max_negative,\
    \ min_positive\n  end\n  local max_negative, min_positive = helper(lst)\n  if\
    \ max_negative == nil and min_positive == nil then\n    return nil, nil\n  else\n\
    \    return max_negative, min_positive\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
