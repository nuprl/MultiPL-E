name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\nlocal function change_base(x,\
  \ base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   if base < 10 then\n      error(\"Base must be less than 10\")\n\
    \   end\n   local s = \"\"\n   for i = 1, 10 do\n      local digit = math.floor(x/base)*base\n\
    \      x = x - digit*base\n      if i == base then\n         s = digit .. s\n\
    \      else\n         s = digit .. s .. \"0123456789\"\n      end\n   end\n  \
    \ return s\nend", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local\
    \ t = x % base\n    s = string.rep(\"0\", i - 1) + s\n    x = math.floor(x / base)\n\
    \    i = i + 1\n  end\n  return s .. string.rep(\"0\", i - 1)\nend", "  local\
    \ digits = math.floor(x/base^0)\n  x = x - base*digits\n  return string.format(\"\
    %d\",x), digits\nend", "  if base < 2 then\n    return \"Error: base must be greater\
    \ than 1\"\n  end\n  if base == 10 then\n    return tostring(x)\n  end\n  local\
    \ s = \"\"\n  while x ~= 0 do\n    local digit = x % base\n    x = x / base\n\
    \    s = tostring(digit) + s\n  end\n  return s\nend", "\tlocal s = \"\"\n\tlocal\
    \ i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx = x /\
    \ base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "   local s = \"\"\n   for i =\
    \ 1, 10 do\n      s = s .. string.format(\"%0\" .. base .. \"d\", x / base)\n\
    \      x = x % base\n   end\n   return s\nend", "   assert(base > 0 and base <\
    \ 10)\n   local s = \"\"\n   for i = 1, 10 do\n      s = s .. string.format(\"\
    %0\" .. base .. \"d\", x / base^i)\n   end\n   return s\nend", "\tlocal digits\
    \ = math.floor(math.log10(x))\n\tlocal base10 = 10^base\n\tlocal digits_str =\
    \ string.format(\"%0*d\", digits, base)\n\tlocal x = x / base10\n\tlocal x_str\
    \ = string.format(\"%0*d\", digits, x)\n\treturn x_str .. digits_str\nend", " \
    \ if base == 10 then\n    return tostring(x)\n  elseif base == 16 then\n    return\
    \ tostring(x, 16)\n  else\n    return tostring(x, base)\n  end\nend", "    if\
    \ base < 2 then\n        error(\"base must be >= 2\")\n    end\n    if base ==\
    \ 10 then\n        return tostring(x)\n    end\n    local s = \"\"\n    while\
    \ x > 0 do\n        local digit = x % base\n        s = tostring(digit) + s\n\
    \        x = x / base\n    end\n    return s\nend", "  if x < 10 then\n    return\
    \ string.format(\"%d\",x)\n  else\n    local s = \"\"\n    local t = base\n  \
    \  while x > t do\n      s = string.format(\"%d%s\",(x%t),s)\n      x = x/t\n\
    \    end\n    return string.format(\"%d%s\",x,s)\n  end\nend", "  -- Base 10 to\
    \ base 16\n  if base == 10 then\n    local s = \"\"\n    for i = 1, 16 do\n  \
    \    s = s .. string.format(\"%x\", x:byte(i))\n    end\n    return s\n  end\n\
    \  -- Base 16 to base 10\n  if base == 16 then\n    local s = \"\"\n    for i\
    \ = 1, 10 do\n      s = s .. string.format(\"%x\", x:byte(i))\n    end\n    return\
    \ s\n  end\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts =\
    \ string.format(\"%d%s\", x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn\
    \ s\nend", "   if base < 2 then\n      error(\"Base must be greater than 1\")\n\
    \   end\n   if base == 10 then\n      return x\n   end\n   local digits = math.floor(x/base)\n\
    \   local result = \"\"\n   for i = 1, digits do\n      result = result .. string.format(\"\
    %d\", base%x)\n      x = x/base\n   end\n   return result .. string.format(\"\
    %d\", x)\nend", "    if base < 2 then\n        error(\"base must be greater than\
    \ 1\")\n    end\n    if base == 10 then\n        return tostring(x)\n    end\n\
    \    local digits = math.floor(x/base)\n    x = x - digits * base\n    local result\
    \ = \"\"\n    while x > 0 do\n        local digit = x % base\n        result =\
    \ string.format(\"%d%s\", digit, result)\n        x = x / base\n    end\n    return\
    \ string.format(\"%d%s\", digits, result)\nend", "  if base < 2 then\n    return\
    \ \"Error: Base must be greater than 1\"\n  end\n  local s = \"\"\n  while x ~=\
    \ 0 do\n    local digit = x % base\n    x = x / base\n    s = string.sub(tostring(digit),\
    \ 1, 1)\n    if s ~= \"\" then\n      s = string.format(\"%0\" .. tostring(base)\
    \ .. \"d\", digit) .. s\n    end\n  end\n  return s\nend", "    if base < 2 then\n\
    \        error(\"base must be >= 2\")\n    end\n    if base == 10 then\n     \
    \   return x\n    end\n    local digits = math.floor(x/base)\n    x = x % base\n\
    \    local result = \"\"\n    while x ~= 0 do\n        result = string.format(\"\
    %d%s\", digits, result)\n        x = x / base\n    end\n    return string.format(\"\
    %d%s\", digits, result)\nend", "    if x < 10 then\n        return string.format(\"\
    %0*d\", base, x)\n    else\n        return string.format(\"%0*d\", base, x)\n\
    \    end\nend", "  if base < 10 then\n    error(\"base must be less than 10\"\
    )\n  end\n  local s = \"\"\n  while x ~= 0 do\n    local digit = x % base\n  \
    \  x = x / base\n    s = string.sub(tostring(digit), 1, 1)..s\n  end\n  return\
    \ s\nend", "  if base < 10 then\n    error(\"base must be less than 10\")\n  end\n\
    \  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local digit = x % base\n\
    \    x = x / base\n    s = string.rep(\"0\", i - 1) + digit .. s\n    i = i +\
    \ 1\n  end\n  return s\nend", "   if base < 10 then\n      error(\"base must be\
    \ greater than or equal to 10\")\n   end\n   local digits = math.floor(x/base)\n\
    \   x = x - digits * base\n   return digits .. x\nend", "    if x < 10 then\n\
    \        return string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "\tlocal digits = math.floor(math.log10(base))\n\
    \tlocal digits_str = string.format(\"%0*d\", digits, base)\n\tlocal digits_str_split\
    \ = string.split(digits_str, \".\")\n\tlocal digits_str_split_reverse = string.split(digits_str,\
    \ \".\")\n\tlocal digits_str_split_reverse[1] = digits_str_split_reverse[1]\n\t\
    local digits_str_split_reverse[2] = digits_str_split_reverse[2]\n\tlocal digits_str_split_reverse[3]\
    \ = digits_str_split_reverse[3]\n\tlocal digits_str_split_reverse[4] = digits_str_split_reverse[4]\n\
    \tlocal digits_str_split_reverse[5] = digits_str_split_reverse[5]\n\tlocal digits_str_split_reverse[6]\
    \ = digits_str_split_reverse[6]\n\tlocal digits_str_split_reverse[7] = digits_str_split_reverse[7]\n\
    \tlocal digits_str_split_reverse[8] = digits_str_split_reverse[8]\n\tlocal digits_str_split_reverse[9]\
    \ = digits_str_split_reverse[9]\n\tlocal digits_str_split_reverse[10] = digits_str_split_reverse[10]\n\
    \tlocal digits_str_split_reverse[11] = digits_str_split_reverse[11]\n\tlocal digits_str_split_reverse[12]\
    \ = digits_str_split_reverse[12]\n\tlocal digits_str_split_reverse[13] = digits_str_split_reverse[13]\n\
    \tlocal digits_str_split_reverse[14] = digits_str_split_reverse[14]\n\tlocal digits_str_split_reverse[15]\
    \ = digits_str_split_reverse[15]\n\tlocal digits_str_split_reverse[16] = digits_str_split_reverse[16]\n\
    \tlocal digits_str_split_reverse[17] = digits_str_split_reverse[17]\n\tlocal digits_str_split_reverse[18]\
    \ = digits_str_split_reverse[18]\n\tlocal digits_str_split_reverse[19] = digits_str_split_reverse[19]\n\
    \tlocal digits_str_split_reverse[20] = digits_str_split_reverse[20]\n\tlocal digits_str_split_reverse[21]\
    \ = digits_str_split_reverse[21]\n\tlocal digits_str_split_reverse[22] = digits_str_split_reverse[22]\n\
    \tlocal digits_str_split_reverse[23] = digits_str_split_reverse[23]\n\tlocal digits_str_split_reverse[24]\
    \ = digits_str_split_reverse[24]\n\tlocal digits_str_split_reverse[25] = digits_str_split_reverse[25]\n\
    \tlocal digits_str_split_reverse[26] = digits_", "    if base < 2 then\n     \
    \   error(\"base must be >= 2\")\n    end\n    if base == 10 then\n        return\
    \ tostring(x)\n    end\n    local s = \"\"\n    while x ~= 0 do\n        s = tostring(x\
    \ / base) + s\n        x = x % base\n    end\n    return s\nend", "\tlocal s =\
    \ \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\
    \t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "   if base < 2 then\n\
    \      error(\"Base must be greater than 1\")\n   end\n   local s = \"\"\n   while\
    \ x ~= 0 do\n      local digit = x % base\n      x = x / base\n      s = string.sub(tostring(digit),\
    \ -base) + s\n   end\n   return s\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\t\
    while x > 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx = x / base\n\t\t\
    i = i + 1\n\tend\n\treturn s\nend", "  local s = \"\"\n  local i = 1\n  while\
    \ i <= base do\n    local t = math.floor(x/base)*base\n    s = s .. string.format(\"\
    %0*d\", base, t)\n    x = x - t\n    i = i + 1\n  end\n  return s\nend", "  if\
    \ base < 10 then\n    error(\"base must be greater than or equal to 10\")\n  end\n\
    \  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local t = x % base\n \
    \   x = x / base\n    s = string.format(\"%d%s\", t, s)\n    i = i + 1\n  end\n\
    \  return s\nend", "    if x < 10 then\n        return string.format(\"%0*d\"\
    , base, x)\n    else\n        return string.format(\"%0*d\", base, x)\n    end\n\
    end", "  local digits = math.floor(math.log(math.abs(x), base))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n  \
    \  x = math.floor(x/base)\n    result = result .. string.char(tonumber(digit)\
    \ .. digit)\n  end\n  return result .. string.char(tonumber(digits))\nend", " \
    \ -- Base 10 -> Base 16\n  if base == 10 then\n    local s = \"\"\n    for i =\
    \ 1, 16 do\n      s = s .. string.char(x%16)\n      x = x/16\n    end\n    return\
    \ s\n  end\n  -- Base 16 -> Base 10\n  if base == 16 then\n    local s = \"\"\n\
    \    for i = 1, 10 do\n      s = s .. string.char(x%10)\n      x = x/10\n    end\n\
    \    return s\n  end\nend", "\tlocal sign = x < 0 and \"-\" or \"+\"\n\tlocal\
    \ digits = math.floor(math.log(x, base))\n\tlocal result = \"\"\n\twhile digits\
    \ do\n\t\tlocal digit = x % base\n\t\tx = x / base\n\t\tresult = string.format(\"\
    %s%d%s\", sign, digit, result)\n\t\tdigits = digits - 1\n\tend\n\treturn result\n\
    end", "    if x < 10 then\n        return tostring(x)\n    end\n    local digits\
    \ = math.floor(math.log(x / base))\n    local digit = digits % base\n    return\
    \ tostring(x / base):sub(1, digit) .. tostring(base)\nend", "    if base < 2 then\n\
    \        error(\"base must be greater than 1\")\n    end\n    if base == 10 then\n\
    \        return tostring(x)\n    end\n    local digits = math.floor(x/base)\n\
    \    local rest = x - digits * base\n    return change_base(digits, base) + tostring(rest)\n\
    end", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile i <= base do\n\t\ts = string.format(\"\
    %0\" .. i .. \"d\", x%base) + s\n\t\tx = math.floor(x/base)\n\t\ti = i + 1\n\t\
    end\n\treturn s\nend", "   if base < 10 then\n      local s = \"\"\n      for\
    \ i = 1, base do\n         s = s .. \"0123456789\"\n      end\n      return (s\
    \ .. x)\n   else\n      return x\n   end\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  while digits > 0 do\n    local digit = x %\
    \ base\n    x = x / base\n    result = table.concat(result, digit)\n    digits\
    \ = digits - 1\n  end\n  return result\nend", "    if x < 10 then\n        return\
    \ tostring(x)\n    end\n    local digits = math.floor(math.log(x / base))\n  \
    \  if digits == 0 then\n        return tostring(x)\n    end\n    local digit =\
    \ digits - 1\n    local digits = digits - base\n    local result = \"\"\n    while\
    \ digits > 0 do\n        local remainder = x / base\n        result = tostring(remainder\
    \ * base) + result\n        x = x - remainder * base\n        digits = digits\
    \ - 1\n    end\n    if x > 0 then\n        result = tostring(x) + result\n   \
    \ end\n    return result\nend", "  if base < 10 then\n    error(\"Base must be\
    \ less than 10\")\n  end\n  local digits = math.floor(x/base)\n  x = x % base\n\
    \  return digits .. x\nend", "  local s = \"\"\n  local i = 1\n  while i <= base\
    \ do\n    local t = math.floor(x/base)*base\n    s = s .. string.format(\"%0*d\"\
    , base, t)\n    x = x - t\n    i = i + 1\n  end\n  return s\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  while digits > 0 do\n\
    \    local digit = x / base\n    x = x - digit * base\n    result = table.concat(result,\
    \ digit)\n    digits = digits - 1\n  end\n  return result\nend", "    if base\
    \ < 2 then\n        error(\"Base must be greater than 1\")\n    end\n    if base\
    \ == 10 then\n        return tostring(x)\n    end\n    local digits = math.floor(math.log(abs(x),\
    \ base))\n    if digits == 0 then\n        return tostring(x)\n    end\n    local\
    \ factor = 10^(digits - 1)\n    local digit = math.floor(x/factor)\n    local\
    \ result = tostring(digit)\n    while digit > 0 do\n        digit = math.floor(digit/base)\n\
    \        result = tostring(digit..result)\n    end\n    return result\nend", " \
    \  local digits = math.floor(math.log10(x))\n   if digits == 0 then\n      return\
    \ \"0\"\n   end\n   if base < 10 then\n      base = 10\n   end\n   if base > digits\
    \ then\n      base = digits\n   end\n   local result = \"\"\n   for i = 1, digits\
    \ do\n      local digit = math.floor(x/base) % base\n      result = result ..\
    \ digit\n      x = x % base\n   end\n   return result .. x\nend", "  local sign\
    \ = x < 0 and \"-\" or \"+\"\n  local digits = math.abs(x)\n  local digits_str\
    \ = tostring(digits)\n  local digits_len = digits_str:len()\n  local digits_len\
    \ = base - digits_len\n  if digits_len > 0 then\n    digits_str = digits_str:sub(1,\
    \ digits_len)\n  else\n    digits_str = \"0\"\n  end\n  return sign .. digits_str\n\
    end", "    if base < 2 then\n        return nil\n    end\n    if base > 10 then\n\
    \        return nil\n    end\n    if x == nil then\n        return nil\n    end\n\
    \    if base == 10 then\n        return tostring(x)\n    end\n    if base == 2\
    \ then\n        return tostring(x * 2)\n    end\n    if base == 8 then\n     \
    \   return tostring(x * 8)\n    end\n    if base == 16 then\n        return tostring(x\
    \ * 16)\n    end\n    if base == 16 then\n        return tostring(x * 16)\n  \
    \  end\n    if base == 10 then\n        return tostring(x * 10)\n    end\n   \
    \ if base == 2 then\n        return tostring(x * 2)\n    end\n    if base == 8\
    \ then\n        return tostring(x * 8)\n    end\n    if base == 16 then\n    \
    \    return tostring(x * 16)\n    end\n    if base == 16 then\n        return\
    \ tostring(x * 16)\n    end\n    if base == 10 then\n        return tostring(x\
    \ * 10)\n    end\n    if base == 2 then\n        return tostring(x * 2)\n    end\n\
    \    if base == 8 then\n        return tostring(x * 8)\n    end\n    if base ==\
    \ 16 then\n        return tostring(x * 16)\n    end\n    if base == 16 then\n\
    \        return tostring(x * 16)\n    end\n    if base == 10 then\n        return\
    \ tostring(x * 10)\n    end\n    if base == 2 then\n        return tostring(x\
    \ * 2)\n    end\n    if base == 8 then\n        return tostring(x * 8)\n    end\n\
    \    if base == 16 then\n        return tostring(x * 16)\n    end\n    if base\
    \ == 16 then\n        return tostring(x * 16)\n    end\n    if base == 10 then\n\
    \        return tostring(x * 10)\n    end\n    if base == 2 then\n        return\
    \ tostring(x * 2)\n    end\n    if base == 8 then\n        return tostring(x *\
    \ 8)\n    end\n    if base == 16 then\n        return tostring(x * 16)\n    end\n\
    \    if base == 16 then\n        return tostring(x * 16)\n    end\n    if base\
    \ == 10 then\n        return tostring(x * 10)\n    end\n    if base == 2 then\n\
    \        return tostring(x * 2)\n    end\n    if base == 8 then\n        return\
    \ tostring(x * 8)\n    end\n    if base == 16 then\n        return tostring(x\
    \ * 16)\n    end\n    if base == 16 then\n        return tostring(x * 16)\n  \
    \  end\n    if base == 10 then\n        return tostring(x * 10)\n    end\n   \
    \ if base == 2 then\n        return tostring(x * 2)\n    end\n    if ", "  assert(base\
    \ > 0 and base < 10)\n  local s = \"\"\n  local i = 1\n  while i * base <= x do\n\
    \    s = string.format(\"%s%d\", s, i * base)\n    i = i + 1\n  end\n  s = string.format(\"\
    %s%d\", s, x)\n  return s\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ base))\n  if digits == 0 then\n    return \"\"\n  else\n    local factor = 10^digits\n\
    \    return string.format(\"%.*f\", digits, x / factor) * factor\n  end\nend",
  "    if base < 2 then\n        error(\"base must be >= 2\")\n    end\n    if base\
    \ == 10 then\n        return x\n    end\n    local digits = math.floor(math.log(math.abs(x),\
    \ base))\n    local digits_str = string.rep(\"0\", digits + 1)\n    digits_str\
    \ = digits_str .. string.format(\"%d\", math.floor((math.abs(x) / base)))\n  \
    \  return digits_str\nend", "    if base < 2 then\n        error(\"Base must be\
    \ greater than 1.\")\n    end\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    local s = \"\"\n    while x > 0 do\n        local digit = x % base\n\
    \        x = x / base\n        s = tostring(digit) + s\n    end\n    return s\n\
    end", "   local s = \"\"\n   for i = 1, #x do\n      local c = string.byte(x)\n\
    \      local digit = string.byte(string.sub(x, i, i))\n      if digit == 0 then\n\
    \         if base == 10 then\n            s = s .. \"0\"\n         else\n    \
    \        s = s .. \"0\"\n            digit = base\n         end\n      else\n\
    \         if digit == base then\n            s = s .. \"0\"\n         else\n \
    \           s = s .. \"0\"\n            digit = digit - base\n         end\n \
    \     end\n      s = s .. string.sub(tostring(digit), 1, 1)\n   end\n   return\
    \ s\nend", "    if x < 10 then\n        return string.format(\"%0*d\", base, x)\n\
    \    else\n        return string.format(\"%0*d\", base, x - 10)\n    end\nend",
  "    if base < 10 then\n        return base_convert(x, base)\n    end\n    return\
    \ base_convert(x, 10)\nend", "  if x < 10 then\n    return tostring(x)\n  else\n\
    \    local digits = math.floor(math.log(x / base))\n    local result = tostring(x\
    \ / base)\n    if digits > 0 then\n      result = change_base(tostring(result\
    \ * base), base)\n    end\n    return result .. tostring(digits + base)\n  end\n\
    end", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"\
    %d%s\", x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "   \
    \ if base < 2 then\n        error(\"base must be greater than 1\")\n    end\n\
    \    if base == 10 then\n        return tostring(x)\n    end\n    local s = \"\
    \"\n    while x > 0 do\n        local digit = x % base\n        s = tostring(digit)\
    \ + s\n        x = math.floor(x/base)\n    end\n    return s\nend", "    if base\
    \ < 2 then\n        error(\"base must be >= 2\")\n    end\n    local s = \"\"\n\
    \    while x > 0 do\n        local digit = x % base\n        s = string.format(\"\
    %d%s\", digit, s)\n        x = math.floor(x/base)\n    end\n    return s\nend",
  "    if base < 2 then\n        error(\"Base must be greater than 1\")\n    end\n\
    \    if base == 10 then\n        return x\n    end\n    local s = \"\"\n    while\
    \ x ~= 0 do\n        local digit = x % base\n        s = string.format(\"%d%s\"\
    , digit, s)\n        x = math.floor(x/base)\n    end\n    return s\nend", "  if\
    \ x < 0 then\n    error(\"negative number\")\n  end\n  if base < 2 then\n    error(\"\
    base must be greater than 1\")\n  end\n  if base == 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - digits * base\n  local\
    \ result = \"\"\n  while x > 0 do\n    local digit = x % base\n    if digit ==\
    \ 0 then\n      result = result .. \"0\"\n    else\n      result = result .. tostring(digit)\n\
    \    end\n    x = x / base\n  end\n  return result .. tostring(x)\nend", "\tlocal\
    \ s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%0\" .. base\
    \ .. \"d\", x - i) + s\n\t\ti = i + 1\n\tend\n\treturn s\nend", "    if x < 0\
    \ then\n        error(\"negative number\")\n    end\n    if base < 2 then\n  \
    \      error(\"base must be >= 2\")\n    end\n    if base > 10 then\n        error(\"\
    base must be <= 10\")\n    end\n    if base == 2 then\n        return x\n    end\n\
    \    local digits = math.floor(x/base)\n    x = x - base*digits\n    if x < 0\
    \ then\n        error(\"negative number\")\n    end\n    local s = \"\"\n    while\
    \ x > 0 do\n        local digit = x % base\n        x = x / base\n        s =\
    \ string.format(\"%c%s\", digit, s)\n    end\n    return s\nend", "  if base <\
    \ 10 then\n    error(\"base must be greater than 10\")\n  end\n  local s = \"\"\
    \n  local i = 1\n  while x > 0 do\n    local digit = x % base\n    x = x / base\n\
    \    s = string.format(\"%d%s\", digit, s)\n    i = i + 1\n  end\n  return s\n\
    end", "  if x < 10 then\n    return tostring(x)\n  else\n    local digits = math.floor(math.log(x\
    \ / base))\n    return tostring((x % base) / base):sub(1, digits) .. tostring(base):sub(1,\
    \ digits)\n  end\nend", "  if x < 0 then\n    error(\"negative number\")\n  end\n\
    \  if base < 2 then\n    error(\"base must be greater than 1\")\n  end\n  if base\
    \ == 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x % base\n  local result = \"\"\n  while x do\n    local digit = math.floor(x/base)\n\
    \    local remainder = x % base\n    if digit == 0 then\n      result = result\
    \ .. digit\n    else\n      result = result .. digit..digits[digit]..remainder\n\
    \    end\n    x = remainder\n  end\n  return result\nend", "    if base < 10 then\n\
    \        error(\"base must be greater than 10\")\n    end\n    if base == 10 then\n\
    \        return tostring(x)\n    end\n    local digits = math.floor(math.log(x,\
    \ base))\n    local result = \"\"\n    for i = 1, digits do\n        result =\
    \ result .. tostring(x / base) .. tostring(base)\n        x = x % base\n    end\n\
    \    if x > 0 then\n        result = result .. tostring(x)\n    end\n    return\
    \ result\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"\
    %d%s\", x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "   if\
    \ base < 10 then\n      error(\"Base must be less than 10\")\n   end\n   local\
    \ s = \"\"\n   for i = 1, 10 do\n      s = s .. string.format(\"%0\" .. base ..\
    \ \"d\", x / base) \n      x = x % base\n   end\n   return s\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  if digits == 0 then\n    return \"\"\n  else\n\
    \    local factor = 10^digits\n    return string.format(\"%0.\" .. (digits - 1)\
    \ .. \"d\", x / factor) * factor\n  end\nend", "    if base < 10 then\n      \
    \  return string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "  -- Base 10\n  if base == 10 then\n    return\
    \ tostring(x)\n  end\n  -- Base 16\n  if base == 16 then\n    return tostring(x,\
    \ \"hex\")\n  end\n  -- Base 2\n  if base == 2 then\n    return tostring(x, \"\
    dec\")\n  end\n  -- Base 8\n  if base == 8 then\n    return tostring(x, \"oct\"\
    )\n  end\n  -- Base 16\n  if base == 16 then\n    return tostring(x, \"hex\")\n\
    \  end\n  -- Base 10\n  if base == 10 then\n    return tostring(x)\n  end\n  --\
    \ Base 2\n  if base == 2 then\n    return tostring(x, \"dec\")\n  end\n  -- Base\
    \ 8\n  if base == 8 then\n    return tostring(x, \"oct\")\n  end\n  -- Base 16\n\
    \  if base == 16 then\n    return tostring(x, \"hex\")\n  end\n  -- Base 2\n \
    \ if base == 2 then\n    return tostring(x, \"dec\")\n  end\n  -- Base 8\n  if\
    \ base == 8 then\n    return tostring(x, \"oct\")\n  end\n  -- Base 16\n  if base\
    \ == 16 then\n    return tostring(x, \"hex\")\n  end\n  -- Base 10\n  if base\
    \ == 10 then\n    return tostring(x)\n  end\n  -- Base 2\n  if base == 2 then\n\
    \    return tostring(x, \"dec\")\n  end\n  -- Base 8\n  if base == 8 then\n  \
    \  return tostring(x, \"oct\")\n  end\n  -- Base 16\n  if base == 16 then\n  \
    \  return tostring(x, \"hex\")\n  end\n  -- Base 2\n  if base == 2 then\n    return\
    \ tostring(x, \"dec\")\n  end\n  -- Base 8\n  if base == 8 then\n    return tostring(x,\
    \ \"oct\")\n  end\n  -- Base 16\n  if base == 16 then\n    return tostring(x,\
    \ \"hex\")\n  end\n  -- Base 10\n  if base == 10 then\n    return tostring(x)\n\
    \  end\n  -- Base 2\n  if base == 2 then\n    return tostring(x, \"dec\")\n  end\n\
    \  -- Base 8\n  if base == 8 then\n    return tostring(x, \"oct\")\n  end\n  --\
    \ Base 16\n  if base == 16 then\n    return tostring(x, \"hex\")\n  end\n  --\
    \ Base 2\n  if base == 2 then\n    return tostring(x, \"dec\")\n  end\n  -- Base\
    \ 8\n  if base == 8 then\n    return tostring(x, \"oct\")\n  end", "  local digits\
    \ = math.floor(x/base)*base\n  x = x - digits*base\n  return string.format(\"\
    %d\",x), digits\nend", "    if base < 10 then\n        error(\"base must be less\
    \ than 10\")\n    end\n    local s = \"\"\n    while x > 0 do\n        local digit\
    \ = x % base\n        s = string.sub(tostring(digit), 1, 1)\n        x = math.floor(x\
    \ / base)\n    end\n    return s\nend", "  local s = \"\"\n  local i = 1\n  while\
    \ i <= base do\n    s = string.format(\"%0\" .. i .. \"d\", x%base) + s\n    x\
    \ = math.floor(x/base)\n    i = i + 1\n  end\n  return s\nend", "  local function\
    \ to_base(num)\n    local digits = {}\n    for i = 1, 10 do\n      digits[i] =\
    \ num % base\n      num = math.floor(num / base)\n    end\n    return table.concat(digits)\n\
    \  end\n  return to_base(x)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(math.log(x / base))\n  if digits == 0 then\n\
    \    return tostring(x)\n  end\n  local factor = 10^(digits - 1)\n  return tostring(x\
    \ * factor) / factor\nend", "    if base < 2 then\n        error(\"base must be\
    \ >= 2\")\n    end\n    if base == 10 then\n        return tostring(x)\n    end\n\
    \    local digits = math.floor(x/base)\n    x = x % base\n    local result = \"\
    \"\n    while x > 0 do\n        local digit = x % base\n        result = string.format(\"\
    %d%s\", digit, result)\n        x = x / base\n    end\n    return string.format(\"\
    %d%s\", digits, result)\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0\
    \ do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\
    \tend\n\treturn s\nend", "    if x < 10 then\n        return string.format(\"\
    %0*d\", base, x)\n    else\n        return string.format(\"%0*d\", base, x)\n\
    \    end\nend", "    if base < 10 then\n        error(\"Base must be less than\
    \ 10\")\n    end\n    if base == 10 then\n        return tostring(x)\n    end\n\
    \    local digits = math.floor(x/base)\n    local remainder = x - digits*base\n\
    \    return change_base(digits, base) + tostring(remainder)\nend", "  local function\
    \ convert(x)\n    if x < 10 then\n      return x\n    else\n      return base\
    \ * tonumber(string.format(\"%0.\" .. base .. \"d\", x / base))\n    end\n  end\n\
    \  return convert(x)\nend", "\tlocal digits = math.floor(math.log(math.abs(x),\
    \ base))\n\tlocal digits_str = string.rep(\"0\", digits + 2)\n\tdigits_str = digits_str\
    \ .. string.format(\"%0\", base)\n\tlocal result = tonumber(string.format(\"%s%s\"\
    , digits_str, x))\n\treturn result\nend", "  if x < 10 then\n    return string.format(\"\
    %0.\" .. base .. \"d\", x)\n  end\n  return x\nend", "   assert(base > 0)\n  \
    \ assert(base < 10)\n   local s = \"\"\n   for i = 1, 10 do\n      local digit\
    \ = math.floor(x * base) / base\n      x = x - digit * base\n      if x > 0 then\n\
    \         s = s .. digit\n      else\n         s = s .. \"-\" .. digit\n     \
    \ end\n   end\n   return s\nend", "\tlocal digits = math.floor(x/base)+1\n\tlocal\
    \ result = \"\"\n\twhile digits > 0 do\n\t\tresult = string.format(\"%d%s\", digits,\
    \ result)\n\t\tdigits = digits - 1\n\tend\n\treturn result\nend", "  if x < 10\
    \ then\n    return string.format(\"%0*d\", base, x)\n  else\n    return string.format(\"\
    %0*d\", base, x - 10)\n  end\nend", "  if base == 10 then\n    return tostring(x)\n\
    \  elseif base == 2 then\n    return tostring(x, 2)\n  else\n    return tostring(x,\
    \ base)\n  end\nend", "   assert(base > 0 and base < 10)\n   local s = \"\"\n\
    \   for i = 1, 10 do\n      local n = math.floor(x * base^i)\n      s = string.format(\"\
    %0\" .. i .. \"d\", n) .. s\n   end\n   return s\nend", "    if x < 0 then\n \
    \       error(\"negative number\")\n    end\n    if base < 2 then\n        error(\"\
    base must be >= 2\")\n    end\n    if base > 10 then\n        error(\"base must\
    \ be <= 10\")\n    end\n    if base == 10 then\n        return tostring(x)\n \
    \   end\n    local s = \"\"\n    while x ~= 0 do\n        local digit = x % base\n\
    \        s = tostring(digit) + s\n        x = floor(x/base)\n    end\n    return\
    \ s\nend", "  local digits = math.floor(math.log(x, base))\n  if digits == 0 then\n\
    \    return \"\"\n  else\n    local factor = 10^digits\n    local result = \"\"\
    \n    while x > factor do\n      x = x / factor\n      result = string.format(\"\
    %s%s\", result, base)\n    end\n    return string.format(\"%s%s\", result, x)\n\
    \  end\nend", "   if base < 10 then\n      error(\"base must be greater than or\
    \ equal to 10\")\n   end\n   if base == 10 then\n      return x\n   end\n   local\
    \ result = \"\"\n   local digits = math.floor(x/base)\n   if digits > 0 then\n\
    \      result = change_base(digits, base) .. result\n   end\n   if digits < base\
    \ then\n      result = result .. \"0\"\n   end\n   return result\nend", "  --\
    \ base numbers are less than 10.\n  if base < 10 then\n    error(\"base must be\
    \ less than 10\")\n  end\n  -- Change numerical base of input number x to base.\n\
    \  -- return string representation after the conversion.\n  -- base numbers are\
    \ less than 10.\n  return string.format(\"%0.\" .. base .. \"d\", x)\nend", " \
    \   if base < 10 then\n        return base_tostring(x, base)\n    end\n    local\
    \ digits = math.floor(math.log(math.abs(x), base))\n    if digits == 0 then\n\
    \        return base_tostring(x, base)\n    end\n    local digits_str = base_tostring(x,\
    \ base)\n    local digits_len = digits_str:len()\n    local digits_pow = math.pow(base,\
    \ digits)\n    local digits_str = digits_str:sub(1, digits_len - 1)\n    local\
    \ digits_str = base_tostring(digits_str, digits_pow)\n    local digits_str = digits_str:reverse()\n\
    \    local digits_str = base_tostring(digits_str, digits)\n    local digits_str\
    \ = digits_str:reverse()\n    local digits_str = base_tostring(digits_str, digits)\n\
    \    local digits_str = digits_str:reverse()\n    local digits_str = base_tostring(digits_str,\
    \ digits)\n    local digits_str = digits_str:reverse()\n    local digits_str =\
    \ base_tostring(digits_str, digits)\n    local digits_str = digits_str:reverse()\n\
    \    local digits_str = base_tostring(digits_str, digits)\n    local digits_str\
    \ = digits_str:reverse()\n    local digits_str = base_tostring(digits_str, digits)\n\
    \    local digits_str = digits_str:reverse()\n    local digits_str = base_tostring(digits_str,\
    \ digits)\n    local digits_str = digits_str:reverse()\n    local digits_str =\
    \ base_tostring(digits_str, digits)\n    local digits_str = digits_str:reverse()\n\
    \    local digits_str = base_tostring(digits_str, digits)\n    local digits_str\
    \ = digits_str:reverse()\n    local digits_str = base_tostring(digits_str, digits)\n\
    \    local digits_str = digits_str:reverse()\n    local digits_str = base_tostring(digits_str,\
    \ digits)\n    local digits_str = digits_str:reverse()\n    local digits_str =\
    \ base_tostring(digits_str, digits)\n    local digits_str = digits_str:reverse()\n\
    \    local digits_str = base_tostring(digits_str, digits)\n    local digits_str\
    \ = digits_str:reverse()\n    local digits_str = base_tostring(digits_str, digits)\n\
    \    local digits_str = digits_str:reverse()\n    local digits_str = base_tostring(digits_str,\
    \ digits)\n    local digits_str = digits_str:reverse()\n    local digits_str =\
    \ base_tostring(digits_str, digits)\n    local digits_", "  local function to_base(num,\
    \ base)\n    local digits = math.floor(math.log(num, base))\n    local result\
    \ = \"\"\n    for i = 1, digits do\n      local digit = math.floor(num / base\
    \ ** i)\n      result = string.sub(base:format(\"%d\", digit), -2)\n      result\
    \ = result .. digit\n    end\n    return result\n  end\n  local function from_base(num,\
    \ base)\n    local digits = math.floor(math.log(num, base))\n    local result\
    \ = \"\"\n    for i = 1, digits do\n      local digit = math.floor(num / base\
    \ ** i)\n      result = result .. base:format(\"%d\", digit)\n    end\n    return\
    \ result\n  end\n  local function to_base2(num, base)\n    local digits = math.floor(math.log(num,\
    \ base))\n    local result = \"\"\n    for i = 1, digits do\n      local digit\
    \ = math.floor(num / base ** i)\n      result = result .. base:format(\"%d\",\
    \ digit)\n    end\n    return result\n  end\n  local function from_base2(num,\
    \ base)\n    local digits = math.floor(math.log(num, base))\n    local result\
    \ = \"\"\n    for i = 1, digits do\n      local digit = math.floor(num / base\
    \ ** i)\n      result = result .. base:format(\"%d\", digit)\n    end\n    return\
    \ result\n  end\n  local function to_base3(num, base)\n    local digits = math.floor(math.log(num,\
    \ base))\n    local result = \"\"\n    for i = 1, digits do\n      local digit\
    \ = math.floor(num / base ** i)\n      result = result .. base:format(\"%d\",\
    \ digit)\n    end\n    return result\n  end\n  local function from_base3(num,\
    \ base)\n    local digits = math.floor(math.log(num, base))\n    local result\
    \ = \"\"\n    for i = 1, digits do\n      local digit = math.floor(num / base\
    \ ** i)\n      result = result .. base:format(\"%d\", digit)\n    end\n    return\
    \ result\n  end\n  local function to_base4(num, base)\n    local digits = math.floor(math.log(num,\
    \ base))\n    local result = \"\"\n    for i = 1, digits do\n      local digit\
    \ = math.floor(num / base ** i)\n      result = result .. base:format(\"%d\",\
    \ digit)\n    end\n    return result\n  end\n  local function from_base4(num,\
    \ base)\n    local digits = math.floor(math.log(num, base))\n    local result\
    \ = \"\"\n    for i = 1, digits do\n      local digit = math.floor(num / base\
    \ ** i)\n      result = result .. base:format(\"%d\", digit)\n    end\n    return\
    \ result\n  end\n  local function to_base5(num, base)\n    local digits = math.floor(math.log(num,\
    \ base))\n    local result = \"\"\n    for ", "    if x < 10 then\n        return\
    \ tostring(x)\n    end\n    local digits = math.floor(math.log(x, base))\n   \
    \ if digits == 0 then\n        return tostring(x)\n    end\n    local digits_str\
    \ = tostring(digits)\n    local digits_len = #digits_str\n    local digits_pow\
    \ = math.pow(base, digits)\n    local digits_str = digits_str:sub(1, digits_len\
    \ - 1)\n    local digits_str = digits_str:gsub(\"^\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"%\", \"\")\n    local digits_str = digits_str:gsub(\"*\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"/\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"+\", \"\")\n    local digits_str = digits_str:gsub(\"-\"\
    , \"\")\n    local digits_str = digits_str:gsub(\",\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"'\", \"\")\n    local digits_str = digits_str:gsub(\"%\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"^\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"(\", \"\")\n    local digits_str = digits_str:gsub(\")\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"[\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"]\", \"\")\n    local digits_str = digits_str:gsub(\"{\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"}\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\",\", \"\")\n    local digits_str = digits_str:gsub(\"'\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"%\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"^\", \"\")\n    local digits_str = digits_str:gsub(\"(\"\
    , \"\")\n    local digits_str = digits_str:gsub(\")\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"[\", \"\")\n    local digits_str = digits_str:gsub(\"]\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"{\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"}\", \"\")\n    local digits_str = digits_str:gsub(\",\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"'\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"%\", \"\")\n    local digits_str = digits_str:gsub(\"^\"\
    , \"\")\n    local digits_str = digits_str:", "    if base < 10 then\n       \
    \ error(\"base must be greater than or equal to 10\")\n    end\n    if base ==\
    \ 10 then\n        return tostring(x)\n    end\n    local digits = math.floor(math.log(x,\
    \ base))\n    local digits_str = tostring(digits)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_str = digits_str:sub(1,\
    \ digits_len - 1)\n    local digits_str = digits_str:gsub(\"^\", \"\")\n    local\
    \ digits_str = digits_str:gsub(\"%\", \"\")\n    local digits_str = digits_str:gsub(\"\
    *\", \"\")\n    local digits_str = digits_str:gsub(\"/\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"+\", \"\")\n    local digits_str = digits_str:gsub(\"-\"\
    , \"\")\n    local digits_str = digits_str:gsub(\",\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"'\", \"\")\n    local digits_str = digits_str:gsub(\"(\"\
    , \"\")\n    local digits_str = digits_str:gsub(\")\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\",\", \"\")\n    local digits_str = digits_str:gsub(\"'\"\
    , \"\")\n    local digits_str = digits_str:gsub(\",\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"'\", \"\")\n    local digits_str = digits_str:gsub(\",\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"'\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\",\", \"\")\n    local digits_str = digits_str:gsub(\"'\"\
    , \"\")\n    local digits_str = digits_str:gsub(\",\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"'\", \"\")\n    local digits_str = digits_str:gsub(\",\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"'\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\",\", \"\")\n    local digits_str = digits_str:gsub(\"'\"\
    , \"\")\n    local digits_str = digits_str:gsub(\",\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\"'\", \"\")\n    local digits_str = digits_str:gsub(\",\"\
    , \"\")\n    local digits_str = digits_str:gsub(\"'\", \"\")\n    local digits_str\
    \ = digits_str:gsub(\",\", \"\")\n    local digits_str = digits_str:gsub(\"'\"\
    , \"\")\n    local digit", "   assert(base > 0 and base < 10)\n   local s = \"\
    \"\n   for i = 1, 10 do\n      s = s .. string.format(\"%0\" .. base .. \"d\"\
    , x / base^i)\n   end\n   return s\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\t\
    while i <= base do\n\t\ts = s .. string.format(\"%0\" .. i .. \"d\", x / base)\n\
    \t\tx = x % base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "    if base == 10 then\n\
    \        return tostring(x)\n    end\n    if base < 10 then\n        error(\"\
    base must be greater than or equal to 10\")\n    end\n    if base > 36 then\n\
    \        error(\"base must be less than or equal to 36\")\n    end\n    local\
    \ s = \"\"\n    local t = x\n    while t > 0 do\n        local digit = t % base\n\
    \        s = string.format(\"%d%s\", digit, s)\n        t = math.floor(t/base)\n\
    \    end\n    return s\nend", "    if base < 10 then\n        return string.format(\"\
    %0.\" .. base .. \"d\", x)\n    else\n        return string.format(\"%0.\" ..\
    \ base .. \"x\", x)\n    end\nend", "\tlocal digits = math.floor(math.log10(x))\n\
    \tlocal digits_base = 10\n\tlocal digits_power = 1\n\twhile digits > digits_base\
    \ do\n\t\tdigits_power = digits_power * base\n\t\tdigits = digits - digits_base\n\
    \tend\n\tlocal digits_power = digits_power + 1\n\tlocal digits_remainder = digits\
    \ - digits_base\n\tlocal digits_remainder_power = digits_remainder\n\tlocal digits_remainder_power\
    \ = digits_remainder_power + 1\n\tlocal digits_remainder_remainder = digits_remainder\
    \ - digits_remainder_power\n\tlocal digits_remainder_remainder_power = digits_remainder_remainder\n\
    \tlocal digits_remainder_remainder_power = digits_remainder_remainder_power +\
    \ 1\n\tlocal digits_remainder_remainder_remainder = digits_remainder_remainder\
    \ - digits_remainder_remainder_power\n\tlocal digits_remainder_remainder_remainder_power\
    \ = digits_remainder_remainder_remainder\n\tlocal digits_remainder_remainder_remainder_power\
    \ = digits_remainder_remainder_remainder_power + 1\n\tlocal digits_remainder_remainder_remainder_remainder\
    \ = digits_remainder_remainder_remainder - digits_remainder_remainder_remainder_power\n\
    \tlocal digits_remainder_remainder_remainder_remainder_power = digits_remainder_remainder_remainder_remainder\n\
    \tlocal digits_remainder_remainder_remainder_remainder_power = digits_remainder_remainder_remainder_remainder_power\
    \ + 1\n\tlocal digits_remainder_remainder_remainder_remainder_remainder = digits_remainder_remainder_remainder_remainder\
    \ - digits_remainder_remainder_remainder_remainder_power\n\tlocal digits_remainder_remainder_remainder_remainder_power\
    \ = digits_remainder_remainder_remainder_remainder_power\n\tlocal digits_remainder_remainder_remainder_remainder_power\
    \ = digits_remainder_remainder_remainder_remainder_power + 1\n\tlocal digits_remainder_remainder_remainder_remainder_remainder\
    \ = digits_remainder_remainder_remainder_remainder_remainder - digits_remainder_remainder_remainder_remainder_remainder_power\n\
    \tlocal digits_remainder_remainder_remainder_remainder_remainder_power = digits_remainder_remainder_remainder_remainder_remainder_power\n\
    \tlocal digits_remainder_remainder_remainder_remainder_power = digits_remainder_remainder_remainder_remainder_power\
    \ + 1\n\tlocal digits_remainder_remainder_remain", "\t-- base is less than 10.\n\
    \tif base < 10 then\n\t\t-- base is less than 10.\n\t\treturn x\n\tend\n\t-- base\
    \ is greater than 10.\n\t-- return string representation after the conversion.\n\
    \t-- base numbers are less than 10.\n\tlocal s = \"\"\n\t-- convert x to string.\n\
    \ts = tostring(x)\n\t-- convert string to number.\n\tx = tonumber(s)\n\t-- convert\
    \ x to base.\n\tx = x * base\n\t-- convert x to string.\n\ts = tostring(x)\n\t\
    -- convert string to number.\n\tx = tonumber(s)\n\t-- convert x to string.\n\t\
    s = tostring(x)\n\t-- convert string to number.\n\tx = tonumber(s)\n\t-- convert\
    \ x to string.\n\ts = tostring(x)\n\t-- convert string to number.\n\tx = tonumber(s)\n\
    \t-- convert x to string.\n\ts = tostring(x)\n\t-- convert string to number.\n\
    \tx = tonumber(s)\n\t-- convert x to string.\n\ts = tostring(x)\n\t-- convert\
    \ string to number.\n\tx = tonumber(s)\n\t-- convert x to string.\n\ts = tostring(x)\n\
    \t-- convert string to number.\n\tx = tonumber(s)\n\t-- convert x to string.\n\
    \ts = tostring(x)\n\t-- convert string to number.\n\tx = tonumber(s)\n\t-- convert\
    \ x to string.\n\ts = tostring(x)\n\t-- convert string to number.\n\tx = tonumber(s)\n\
    \t-- convert x to string.\n\ts = tostring(x)\n\t-- convert string to number.\n\
    \tx = tonumber(s)\n\t-- convert x to string.\n\ts = tostring(x)\n\t-- convert\
    \ string to number.\n\tx = tonumber(s)\n\t-- convert x to string.\n\ts = tostring(x)\n\
    \t-- convert string to number.\n\tx = tonumber(s)\n\t-- convert x to string.\n\
    \ts = tostring(x)\n\t-- convert string to number.\n\tx = tonumber(s)\n\t-- convert\
    \ x to string.\n\ts = tostring(x)\n\t-- convert string to number.\n\tx = tonumber(s)\n\
    \t-- convert x to string.\n\ts = tostring(x)\n\t-- convert string to number.\n\
    \tx = tonumber(s)\n\t-- convert x to string.\n\ts = tostring(x)\n\t-- convert\
    \ string to number.\n\tx = tonumber(s)\n\t-- convert x to string.\n\ts = tostring(x)\n\
    \t-- convert string to number.\n\tx = tonumber(s)\n\t-- convert ", "   local s\
    \ = \"\"\n   for i = 1, 10 do\n      local digit = math.floor(x * base) / base\n\
    \      x = x - digit * base\n      if x > 0 then\n         s = s .. digit\n  \
    \    else\n         s = s .. \"-\"\n      end\n   end\n   return s\nend", "  \
    \  if base < 10 then\n        error(\"base must be greater than or equal to 10\"\
    )\n    end\n    if base == 10 then\n        return tostring(x)\n    end\n    local\
    \ s = \"\"\n    while x > 0 do\n        local digit = x % base\n        s = tostring(digit)\
    \ + s\n        x = x / base\n    end\n    return s\nend", "    if x < 10 then\n\
    \        return tostring(x)\n    else\n        local s = tostring(x)\n       \
    \ local t = \"\"\n        local i = 0\n        while i < #s do\n            local\
    \ c = string.sub(s,i,i)\n            if c >= \"0\" and c <= \"9\" then\n     \
    \           t = t .. c\n            elseif c == \".\" then\n                t\
    \ = t .. c\n            else\n                t = t .. \"0\"  -- change base to\
    \ base 10.\n            end\n            i = i + 1\n        end\n        return\
    \ t .. tostring(base)\n    end\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  else\n    local digits = math.floor(math.log(x / base))\n    return tostring((x\
    \ / base):pow(digits)) * base\n  end\nend", "   if base < 2 then\n      error(\"\
    Base must be greater than 1\")\n   end\n   if base == 10 then\n      return x\n\
    \   end\n   if base == 2 then\n      return string.format(\"%x\", x)\n   end\n\
    \   if base == 8 then\n      return string.format(\"%o\", x)\n   end\n   if base\
    \ == 16 then\n      return string.format(\"%x\", x)\n   end\n   if base == 32\
    \ then\n      return string.format(\"%x\", x)\n   end\n   if base == 64 then\n\
    \      return string.format(\"%x\", x)\n   end\n   if base == 128 then\n     \
    \ return string.format(\"%x\", x)\n   end\n   if base == 256 then\n      return\
    \ string.format(\"%x\", x)\n   end\n   if base == 512 then\n      return string.format(\"\
    %x\", x)\n   end\n   if base == 1024 then\n      return string.format(\"%x\",\
    \ x)\n   end\n   if base == 2048 then\n      return string.format(\"%x\", x)\n\
    \   end\n   if base == 4096 then\n      return string.format(\"%x\", x)\n   end\n\
    \   if base == 8192 then\n      return string.format(\"%x\", x)\n   end\n   if\
    \ base == 16384 then\n      return string.format(\"%x\", x)\n   end\n   if base\
    \ == 32768 then\n      return string.format(\"%x\", x)\n   end\n   if base ==\
    \ 65536 then\n      return string.format(\"%x\", x)\n   end\n   if base == 131072\
    \ then\n      return string.format(\"%x\", x)\n   end\n   if base == 262144 then\n\
    \      return string.format(\"%x\", x)\n   end\n   if base == 524288 then\n  \
    \    return string.format(\"%x\", x)\n   end\n   if base == 1048576 then\n   \
    \   return string.format(\"%x\", x)\n   end\n   if base == 2097152 then\n    \
    \  return string.format(\"%x\", x)\n   end\n   if base == 4194304 then\n     \
    \ return string.format(\"%x\", x)\n   end\n   if base == 8388608 then\n      return\
    \ string.format(\"%x\", x)\n   end\n   if base == 16777216 then\n      return\
    \ string.format(\"%x\", x)\n   end\n   if base == 33554432 then\n      return\
    \ string.format(\"%x\", x)\n   end\n   if base == 67108864 then\n      return\
    \ string.format(\"%x\", x)\n   end\n   if base == 134217728 then\n      return\
    \ string.format(\"%x\", x)\n   end\n", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile\
    \ x > 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx = x / base\n\t\ti = i\
    \ + 1\n\tend\n\treturn s\nend", "  if base < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(x)\n\
    end", "   local s = \"\"\n   for i = 1, 10 do\n      s = s .. string.format(\"\
    %0\" .. base .. \"d\", x / base)\n      x = x % base\n   end\n   return s\nend",
  "  local digits = math.floor(math.log10(x)) + 1 -- Number of digits in the base.\n\
    \  local digits_base = 10^digits -- Base of the digits in the base.\n  local digits_x\
    \ = x / digits_base -- The digits in the number.\n  local digits_x_base = digits_x\
    \ / base -- The digits in the base.\n  local digits_x_base_str = string.format(\"\
    %0*d\", digits, digits_x_base) -- The digits in the base as a string.\n  local\
    \ digits_x_base_str_len = #digits_x_base_str -- The length of the digits in the\
    \ base as a string.\n  local digits_x_base_str_len = math.abs(digits_x_base_str_len)\
    \ -- The length of the digits in the base as a number.\n  local digits_x_base_str_len\
    \ = math.max(digits_x_base_str_len, 1) -- The length of the digits in the base\
    \ as a number.\n  local digits_x_base_str_len = math.min(digits_x_base_str_len,\
    \ base) -- The length of the digits in the base as a number.\n  local digits_x_base_str\
    \ = string.sub(digits_x_base_str, 1, digits_x_base_str_len) -- The digits in the\
    \ base as a string.\n  local digits_x_base_str = string.gsub(digits_x_base_str,\
    \ \"0\", string.rep(\"0\", digits)) -- The digits in the base as a string.\n \
    \ local digits_x_base_str = string.gsub(digits_x_base_str, \"1\", string.rep(\"\
    1\", digits)) -- The digits in the base as a string.\n  local digits_x_base_str\
    \ = string.gsub(digits_x_base_str, \"2\", string.rep(\"2\", digits)) -- The digits\
    \ in the base as a string.\n  local digits_x_base_str = string.gsub(digits_x_base_str,\
    \ \"3\", string.rep(\"3\", digits)) -- The digits in the base as a string.\n \
    \ local digits_x_base_str = string.gsub(digits_x_base_str, \"4\", string.rep(\"\
    4\", digits)) -- The digits in the base as a string.\n  local digits_x_base_str\
    \ = string.gsub(digits_x_base_str, \"5\", string.rep(\"5\", digits)) -- The digits\
    \ in the base as a string.\n  local digits_x_base_str = string.gsub(digits_x_base_str,\
    \ \"6\", string.rep(\"6\", digits)) -- The digits in the base as a string.\n \
    \ local digits_x_base_str = string.gsub(digits_x_base_str, \"7\", string.rep(\"\
    7\", digits)) -- The digits in the base as a string.\n  local digits_x_base_str\
    \ = string.gsub(digits_x_base_str", "    if base < 2 then\n        error(\"base\
    \ must be >= 2\")\n    end\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    local s = \"\"\n    local i = 1\n    while x > 0 do\n        local\
    \ digit = x % base\n        s = tostring(digit) + s\n        x = x / base\n  \
    \      i = i + 1\n    end\n    return s\nend", "    if base < 2 then\n       \
    \ error(\"base must be greater than 1\")\n    end\n    if base == 10 then\n  \
    \      return tostring(x)\n    end\n    if base == 2 then\n        local s = \"\
    \"\n        for i = 1, 32 do\n            local t = x % base\n            if t\
    \ ~= 0 then\n                s = s .. tostring(t) .. \"-\"\n            end\n\
    \            x = x / base\n        end\n        return s\n    end\n    local s\
    \ = \"\"\n    for i = 1, 32 do\n        local t = x % base\n        if t ~= 0\
    \ then\n            s = s .. tostring(t) .. \"-\"\n        end\n        x = x\
    \ / base\n    end\n    return s\nend", "    if x < 10 then\n        return string.format(\"\
    %0*d\", base, x)\n    else\n        return string.format(\"%0*d\", base, x)\n\
    \    end\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = x % base\n    local remainder\
    \ = x / base\n    x = remainder\n    result = string.sub(result, 1, digits) +\
    \ tostring(digit) + result\n    digits = digits - 1\n  end\n  return result\n\
    end", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  else\n\
    \    return string.format(\"%0*d\", base, x)\n  end\nend", "\tlocal s = \"\"\n\
    \tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx\
    \ = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "    if base < 2 then\n\
    \        error(\"base must be >= 2\")\n    end\n    if base == 10 then\n     \
    \   return tostring(x)\n    end\n    local digits = math.floor(math.log(abs(x),\
    \ base))\n    if digits == 0 then\n        error(\"base must be >= 2\")\n    end\n\
    \    local digits_str = tostring(digits)\n    local digits_len = #digits_str\n\
    \    local digits_pow = math.pow(base, digits)\n    local digits_div = digits_pow\
    \ / x\n    local digits_mod = digits_pow % x\n    local digits_str = digits_str\
    \ .. tostring(digits_div)\n    local digits_len = #digits_str\n    local digits_str\
    \ = digits_str .. tostring(digits_mod)\n    local digits_len = #digits_str\n \
    \   if digits_len > 0 then\n        digits_str = digits_str .. \"0\"\n    end\n\
    \    if digits_len < digits_len then\n        digits_str = digits_str .. \"0\"\
    \n    end\n    return digits_str\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile\
    \ x > 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx = x / base\n\t\ti = i\
    \ + 1\n\tend\n\treturn s\nend", "    if base < 2 then\n        error(\"Base must\
    \ be greater than 1\")\n    end\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(x/base)\n    x = x - digits * base\n \
    \   local result = \"\"\n    while x > 0 do\n        local digit = x % base\n\
    \        result = string.format(\"%d%s\", digit, result)\n        x = x / base\n\
    \    end\n    return string.format(\"%d%s\", digits, result)\nend", "\tlocal s\
    \ = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%d%s\", x,\
    \ s)\n\t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "  if base < 2\
    \ then\n    return \"Invalid base\"\n  end\n  local s = \"\"\n  local i = 1\n\
    \  while x > 0 do\n    local digit = x % base\n    x = math.floor(x / base)\n\
    \    s = string.sub(tostring(digit), -i-1) + s\n    i = i + 1\n  end\n  return\
    \ s\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile i <= base do\n\t\ts = string.format(\"\
    %0\" .. i .. \"d\", x%base) + s\n\t\tx = math.floor(x/base)\n\t\ti = i + 1\n\t\
    end\n\treturn s\nend", "   if base < 2 then\n      error(\"base must be >= 2\"\
    )\n   end\n   if base == 10 then\n      return x\n   end\n   if base == 16 then\n\
    \      return \"0x\" .. x\n   end\n   if base == 8 then\n      return \"0b\" ..\
    \ x\n   end\n   if base == 2 then\n      return \"0x\" .. tostring(x)\n   end\n\
    \   if base == 16 then\n      return \"0x\" .. tostring(x)\n   end\n   if base\
    \ == 8 then\n      return \"0b\" .. tostring(x)\n   end\n   if base == 2 then\n\
    \      return \"0x\" .. tostring(x)\n   end\n   if base == 16 then\n      return\
    \ \"0x\" .. tostring(x)\n   end\n   if base == 8 then\n      return \"0b\" ..\
    \ tostring(x)\n   end\n   if base == 2 then\n      return \"0x\" .. tostring(x)\n\
    \   end\n   if base == 16 then\n      return \"0x\" .. tostring(x)\n   end\n \
    \  if base == 8 then\n      return \"0b\" .. tostring(x)\n   end\n   if base ==\
    \ 2 then\n      return \"0x\" .. tostring(x)\n   end\n   if base == 16 then\n\
    \      return \"0x\" .. tostring(x)\n   end\n   if base == 8 then\n      return\
    \ \"0b\" .. tostring(x)\n   end\n   if base == 2 then\n      return \"0x\" ..\
    \ tostring(x)\n   end\n   if base == 16 then\n      return \"0x\" .. tostring(x)\n\
    \   end\n   if base == 8 then\n      return \"0b\" .. tostring(x)\n   end\n  \
    \ if base == 2 then\n      return \"0x\" .. tostring(x)\n   end\n   if base ==\
    \ 16 then\n      return \"0x\" .. tostring(x)\n   end\n   if base == 8 then\n\
    \      return \"0b\" .. tostring(x)\n   end\n   if base == 2 then\n      return\
    \ \"0x\" .. tostring(x)\n   end\n   if base == 16 then\n      return \"0x\" ..\
    \ tostring(x)\n   end\n   if base == 8 then\n      return \"0b\" .. tostring(x)\n\
    \   end\n   if base == 2 then\n      return \"0x\" .. tostring(x)\n   end\n  \
    \ if base == 16 then\n      return \"0x\" .. tostring(x)\n   end\n   if base ==\
    \ 8 then\n      return \"0b\" ", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x >\
    \ 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\
    \tend\n\treturn s\nend", "  local s = \"\"\n  local i = 1\n  while i <= base do\n\
    \    local t = math.floor(x/base)*base\n    s = string.sub(tostring(t), -2)..s\n\
    \    x = x - t\n    i = i + 1\n  end\n  return s\nend", "    if base == 10 then\n\
    \        return tostring(x)\n    end\n    if base < 10 then\n        error(\"\
    base must be less than 10\")\n    end\n    local digits = math.floor(x/base)\n\
    \    local result = tostring(digits)\n    while digits > 0 do\n        digits\
    \ = digits - base\n        result = string.format(\"%s%s\", result, tostring(base))\n\
    \    end\n    return result\nend", "    if base < 2 then\n        return nil\n\
    \    end\n    if base > 10 then\n        return nil\n    end\n    if base == 10\
    \ then\n        return tostring(x)\n    end\n    local s = \"\"\n    local t =\
    \ x\n    while t > 0 do\n        local digit = math.floor(t)\n        s = string.format(\"\
    %d%s\", digit, s)\n        t = t - digit\n    end\n    return string.format(\"\
    %d%s\", x, s)\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile i <= base do\n\t\
    \ts = s .. string.format(\"%d\", x / base) .. string.format(\"%o\", x % base)\n\
    \t\tx = x % base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "\tlocal s = \"\"\n\t\
    local i = 1\n\twhile i <= base do\n\t\ts = s .. string.format(\"%0*d\", i, x)\n\
    \t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "\tlocal digits = math.floor(x/base)+1\n\
    \tlocal result = \"\"\n\twhile digits > 0 do\n\t\tlocal digit = math.mod(x, base)\n\
    \t\tx = x/base\n\t\tresult = string.format(\"%d%s\", digit, result)\n\tend\n\t\
    return result\nend", "   if base < 10 then\n      error(\"Base must be less than\
    \ 10\")\n   end\n   local s = \"\"\n   for i = 1, 10 do\n      local n = math.floor(x\
    \ * base) + i\n      s = s .. string.format(\"%0*d\", base, n)\n   end\n   return\
    \ s\nend", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  end\n\
    \  return x\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = x % base\n    x = x / base\n\
    \    result = string.sub(tostring(digit), -digit-1, -1) + result\n  end\n  return\
    \ result .. tostring(x)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(math.log(x / base))\n  local digits_str = tostring(digits)\n\
    \  local digits_len = #digits_str\n  local digits_pow = math.pow(base, digits)\n\
    \  local digits_div = digits - digits_pow\n  local digits_div_base = math.pow(base,\
    \ digits_div)\n  local digits_div_base2 = math.pow(base, digits_div - digits_div_base)\n\
    \  local digits_div_base3 = math.pow(base, digits_div - digits_div_base2)\n  local\
    \ digits_div_base4 = math.pow(base, digits_div - digits_div_base3)\n  local digits_div_base5\
    \ = math.pow(base, digits_div - digits_div_base4)\n  local digits_div_base6 =\
    \ math.pow(base, digits_div - digits_div_base5)\n  local digits_div_base7 = math.pow(base,\
    \ digits_div - digits_div_base6)\n  local digits_div_base8 = math.pow(base, digits_div\
    \ - digits_div_base7)\n  local digits_div_base9 = math.pow(base, digits_div -\
    \ digits_div_base8)\n  local digits_div_base10 = math.pow(base, digits_div - digits_div_base9)\n\
    \  local digits_div_base11 = math.pow(base, digits_div - digits_div_base10)\n\
    \  local digits_div_base12 = math.pow(base, digits_div - digits_div_base11)\n\
    \  local digits_div_base13 = math.pow(base, digits_div - digits_div_base12)\n\
    \  local digits_div_base14 = math.pow(base, digits_div - digits_div_base13)\n\
    \  local digits_div_base15 = math.pow(base, digits_div - digits_div_base14)\n\
    \  local digits_div_base16 = math.pow(base, digits_div - digits_div_base15)\n\
    \  local digits_div_base17 = math.pow(base, digits_div - digits_div_base16)\n\
    \  local digits_div_base18 = math.pow(base, digits_div - digits_div_base17)\n\
    \  local digits_div_base19 = math.pow(base, digits_div - digits_div_base18)\n\
    \  local digits_div_base20 = math.pow(base, digits_div - digits_div_base19)\n\
    \  local digits_div_base21 = math.pow(base, digits_div - digits_div_base20)\n\
    \  local digits_div_base22 = math.pow(base, digits_div - digits_div_base21)",
  "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%d%s\"\
    , x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "   local s\
    \ = \"\"\n   for i = 1, #x do\n      s = s .. string.format(\"%0\" .. base ..\
    \ \"d\", tonumber(x[i]))\n   end\n   return s\nend", "  if base < 10 then\n  \
    \  error(\"base must be greater than 10\")\n  end\n  local s = \"\"\n  while x\
    \ > 0 do\n    local digit = x % base\n    x = x / base\n    s = string.format(\"\
    %d%s\", digit, s)\n  end\n  return s\nend", "  if base < 2 then\n    error(\"\
    Base must be greater than 1\")\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - base*digits\n  return tostring(digits), x\nend", "   local s = \"\"\n\
    \   for i = 1, 10 do\n      local t = math.floor(x/base)*base\n      x = x - t\n\
    \      if x ~= 0 then\n         s = s .. string.format(\"%d\", t)\n      end\n\
    \   end\n   return s\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile i < base\
    \ do\n\t\ts = string.format(\"%d%s\", i * x, s)\n\t\ti = i + 1\n\tend\n\treturn\
    \ s\nend", "    if x < 10 then\n        return tostring(x)\n    end\n    local\
    \ digits = math.floor(math.log(x / base))\n    if digits == 0 then\n        return\
    \ tostring(x)\n    end\n    local digit = math.pow(base, digits)\n    local result\
    \ = x / digit\n    local remainder = x % digit\n    if remainder > 0 then\n  \
    \      return change_base(result, remainder)\n    end\n    return tostring(result)\n\
    end", "   if x < 10 then\n      return x\n   end\n   if base < 2 then\n      return\
    \ nil\n   end\n   if base > 10 then\n      return nil\n   end\n   local digits\
    \ = math.floor(math.log(x + 1, base))\n   if digits < 0 then\n      return nil\n\
    \   end\n   local digits_str = string.format(\"%0*d\", digits, base)\n   return\
    \ digits_str:sub(1, digits_str:len() - 1)\nend", "\t-- base numbers are less than\
    \ 10.\n\tif base < 10 then\n\t\treturn x\n\tend", "    if x < 10 then\n      \
    \  return string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "   if base < 2 then\n      error(\"base must\
    \ be >= 2\")\n   end\n   if base == 10 then\n      return x\n   end\n   if base\
    \ == 16 then\n      return \"0x\" .. x\n   end\n   if base == 2 then\n      return\
    \ \"0b\" .. x\n   end\n   if base == 8 then\n      return \"0o\" .. x\n   end\n\
    \   if base == 16 then\n      return \"0x\" .. x\n   end\n   if base == 32 then\n\
    \      return \"0x\" .. x\n   end\n   if base == 64 then\n      return \"0x\"\
    \ .. x\n   end\n   if base == 128 then\n      return \"0x\" .. x\n   end\n   if\
    \ base == 256 then\n      return \"0x\" .. x\n   end\n   if base == 512 then\n\
    \      return \"0x\" .. x\n   end\n   if base == 1024 then\n      return \"0x\"\
    \ .. x\n   end\n   if base == 2048 then\n      return \"0x\" .. x\n   end\n  \
    \ if base == 4096 then\n      return \"0x\" .. x\n   end\n   if base == 8192 then\n\
    \      return \"0x\" .. x\n   end\n   if base == 16384 then\n      return \"0x\"\
    \ .. x\n   end\n   if base == 32768 then\n      return \"0x\" .. x\n   end\n \
    \  if base == 65536 then\n      return \"0x\" .. x\n   end\n   if base == 131072\
    \ then\n      return \"0x\" .. x\n   end\n   if base == 262144 then\n      return\
    \ \"0x\" .. x\n   end\n   if base == 524288 then\n      return \"0x\" .. x\n \
    \  end\n   if base == 1048576 then\n      return \"0x\" .. x\n   end\n   if base\
    \ == 2097152 then\n      return \"0x\" .. x\n   end\n   if base == 4194304 then\n\
    \      return \"0x\" .. x\n   end\n   if base == 8388608 then\n      return \"\
    0x\" .. x\n   end\n   if base == 16777216 then\n      return \"0x\" .. x\n   end\n\
    \   if base == 33554432 then\n      return \"0x\" .. x\n   end\n   if base ==\
    \ 67108864 then\n      return \"0x\" .. x\n   end\n   if base ", "  -- base numbers\
    \ are less than 10.\n  if base < 10 then\n    return \"Error: base must be less\
    \ than 10.\"\n  end\n  -- Change numerical base of input number x to base.\n \
    \ -- return string representation after the conversion.\n  -- base numbers are\
    \ less than 10.\n  local function convert(x)\n    -- Change numerical base of\
    \ input number x to base.\n    -- return string representation after the conversion.\n\
    \    -- base numbers are less than 10.\n    if base == 10 then\n      return x\n\
    \    else\n      local function convert(x)\n        -- Change numerical base of\
    \ input number x to base.\n        -- return string representation after the conversion.\n\
    \        -- base numbers are less than 10.\n        if base == 2 then\n      \
    \    return x:reverse()\n        else\n          local function convert(x)\n \
    \           -- Change numerical base of input number x to base.\n            --\
    \ return string representation after the conversion.\n            -- base numbers\
    \ are less than 10.\n            if base == 8 then\n              return x:reverse():reverse()\n\
    \            else\n              local function convert(x)\n                --\
    \ Change numerical base of input number x to base.\n                -- return\
    \ string representation after the conversion.\n                -- base numbers\
    \ are less than 10.\n                if base == 16 then\n                  return\
    \ x:reverse():reverse():reverse()\n                else\n                  local\
    \ function convert(x)\n                    -- Change numerical base of input number\
    \ x to base.\n                    -- return string representation after the conversion.\n\
    \                    -- base numbers are less than 10.\n                    if\
    \ base == 32 then\n                      return x:reverse():reverse():reverse():reverse()\n\
    \                    else\n                      local function convert(x)\n \
    \                       -- Change numerical base of input number x to base.\n\
    \                        -- return string representation after the conversion.\n\
    \                        -- base numbers are less than 10.\n                 \
    \       if base == 64 then\n                          return x:reverse():reverse():reverse():reverse():reverse()\n\
    \                        else\n                          local function convert(x)\n\
    \                            -- Change numerical base of input number x to base.\n\
    \                            -- return string representation after the conversion.\n\
    \                            -- base numbers are less than 10.\n             \
    \               if base == 128 then\n                              return x:reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \                            else\n                              local function\
    \ convert(x)\n                                -- Change numerical base of input\
    \ number x to base.\n                                -- return string representation\
    \ after the conversion.\n                                -- base numbers are less\
    \ than 10.\n                                if base == 256 then\n            \
    \                      return x:reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \                                else\n                                  local\
    \ function convert(x)\n                                    -- Change numerical\
    \ base of input number x to base.\n                                    -- return\
    \ string representation after the conversion.", "\tlocal s = \"\"\n\twhile x >\
    \ 0 do\n\t\ts = string.format(\"%0\" .. base .. \"d\", x - 1) .. s\n\t\tx = math.floor(x/base)\n\
    \tend\n\treturn s\nend", "  local s = \"\"\n  local i = 1\n  while i <= base do\n\
    \    local t = math.floor(x/base)*base\n    x = x - t\n    s = s .. string.format(\"\
    %0*d\", base, t)\n    i = i + 1\n  end\n  return s\nend", "  if x < 0 then\n \
    \   error(\"negative number\")\n  end\n  if base < 2 then\n    error(\"base must\
    \ be >= 2\")\n  end\n  if base == 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  local remainder = x - base*digits\n  if remainder\
    \ == 0 then\n    return tostring(digits)\n  else\n    return tostring(digits)..change_base(remainder,\
    \ base)\n  end\nend", "    if base < 10 then\n        error(\"base must be greater\
    \ than 10\")\n    end\n    if base == 10 then\n        return tostring(x)\n  \
    \  end\n    local digits = math.floor(math.log(x, base))\n    local result = \"\
    \"\n    for i = 1, digits do\n        local digit = tostring(x:mod(base))\n  \
    \      result = digit .. result\n        x = x:div(base)\n    end\n    return\
    \ result\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"\
    %d%s\", x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "\t--\
    \ Base must be less than 10.\n\tif base < 10 then\n\t\terror(\"Base must be less\
    \ than 10.\")\n\tend\n\t-- Base must be 0.\n\tif base == 0 then\n\t\terror(\"\
    Base must be 0.\")\n\tend\n\t-- Base must be 1.\n\tif base == 1 then\n\t\treturn\
    \ x\n\tend\n\t-- Base must be 2.\n\tif base == 2 then\n\t\treturn tostring(x)\n\
    \tend\n\t-- Base must be 3.\n\tif base == 3 then\n\t\treturn tostring(x * 1000\
    \ + 0.5)\n\tend\n\t-- Base must be 4.\n\tif base == 4 then\n\t\treturn tostring(x\
    \ * 1000000 + 0.5)\n\tend\n\t-- Base must be 5.\n\tif base == 5 then\n\t\treturn\
    \ tostring(x * 100000000 + 0.5)\n\tend\n\t-- Base must be 6.\n\tif base == 6 then\n\
    \t\treturn tostring(x * 1000000000000 + 0.5)\n\tend\n\t-- Base must be 7.\n\t\
    if base == 7 then\n\t\treturn tostring(x * 1000000000000000 + 0.5)\n\tend\n\t\
    -- Base must be 8.\n\tif base == 8 then\n\t\treturn tostring(x * 1000000000000000000\
    \ + 0.5)\n\tend\n\t-- Base must be 9.\n\tif base == 9 then\n\t\treturn tostring(x\
    \ * 1000000000000000000000 + 0.5)\n\tend\n\t-- Base must be 10.\n\tif base ==\
    \ 10 then\n\t\treturn tostring(x * 1000000000000000000000000 + 0.5)\n\tend\n\t\
    -- Base must be 11.\n\tif base == 11 then\n\t\treturn tostring(x * 10000000000000000000000000000\
    \ + 0.5)\n\tend\n\t-- Base must be 12.\n\tif base == 12 then\n\t\treturn tostring(x\
    \ * 10000000000000000000000000000000 + 0.5)\n\tend\n\t-- Base must be 13.\n\t\
    if base == 13 then\n\t\treturn tostring(x * 100000000000000000000000000000000\
    \ + 0.5)\n\tend\n\t-- Base must be 14.\n\tif base == 14 then\n\t\treturn tostring(x\
    \ * 1000000000000000000000000000000000 + 0.5)\n\tend\n\t-- Base must be 15.\n\t\
    if base == 15 then\n\t\treturn tostring(x * 100000000000000000000000000000000000000\
    \ + 0.5)\n\tend\n\t-- Base must be 16.\n\tif base == 16 then\n\t\treturn tostring(x\
    \ * 10000000000000000000000000000000000000000 + 0.5)\n\tend\n\t-- Base must be\
    \ 17.\n\tif base == 17 then\n\t\treturn tostring(x * 100000000000000000000000000000000000000000\
    \ + 0.5)\n\tend\n\t-- Base must be 18.\n\tif base == 18 then\n\t\treturn tostring(x\
    \ * 10000000000000000000000000000000000000000000000 + 0.5)\n\tend\n\t-- Base must\
    \ be 19.", "  local digits = math.floor(math.log(x, base))\n  local result = \"\
    \"\n  while digits > 0 do\n    local digit = x % base\n    local remainder = x\
    \ / base\n    result = string.format(\"%d%s%s\", digit, string.rep(\"0\", digits\
    \ - 1), result)\n    x = remainder\n  end\n  return result\nend", "    if base\
    \ < 2 then\n        error(\"Base must be greater than 1\")\n    end\n    if base\
    \ > 10 then\n        error(\"Base must be less than 10\")\n    end\n    if base\
    \ == 10 then\n        return x\n    end\n    local s = \"\"\n    local i = 1\n\
    \    while i <= base do\n        s = string.format(\"%0\" .. i .. \"d\", x%base)\
    \ + s\n        x = math.floor(x/base)\n        i = i + 1\n    end\n    return\
    \ s\nend", "  if base < 2 then\n    return \"Error: base must be >= 2.\"\n  end\n\
    \  if base == 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log10(base))\n\
    \  local digits_str = tostring(digits)\n  local digits_len = #digits_str\n  local\
    \ digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digits_len\n  local digits_str = digits_str:sub(1,\
    \ digits_len)\n  local digits_str = digits_str..\"0\"\n  local digits_len = #digits_str\n\
    \  local digits_len = digits_len + digit", "    if x < 10 then\n        return\
    \ string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = x % base\n  \
    \  x = x / base\n    result = table.concat(result, digit)\n    digits = digits\
    \ - 1\n  end\n  return result\nend", "   local s = \"\"\n   for i = 1, 10 do\n\
    \      s = s .. string.format(\"%0\" .. base .. \"d\", x / base^i)\n   end\n \
    \  return s\nend", "    if x < 0 then\n        error(\"negative number\")\n  \
    \  end\n    if base < 2 then\n        error(\"base must be greater than 1\")\n\
    \    end\n    if base == 10 then\n        return tostring(x)\n    end\n    local\
    \ digits = math.floor(math.log(abs(x), base))\n    local digits_str = tostring(digits)\n\
    \    local digits_len = #digits_str\n    local digits_pow = math.pow(base, digits)\n\
    \    local digits_pow_str = tostring(digits_pow)\n    local digits_pow_len = #digits_pow_str\n\
    \    local digits_pow_str_len = digits_len + digits_pow_len\n    local digits_pow_str_len\
    \ = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len\
    \ - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len\
    \ + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n  \
    \  local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len\
    \ = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len\
    \ - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len\
    \ + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n  \
    \  local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len\
    \ = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len\
    \ - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len\
    \ + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n  \
    \  local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len\
    \ = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len\
    \ - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len\
    \ + 1\n    local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n  \
    \  local digits_pow_str_len = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len\
    \ = digits_pow_str_len - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len\
    \ - digits_len + 1\n    local digits_pow_str_len = digits_pow_str_len - ", " \
    \   if base < 2 then\n        error(\"base must be greater than 1\")\n    end\n\
    \    if base == 10 then\n        return tostring(x)\n    end\n    if base == 2\
    \ then\n        if x < 0 then\n            error(\"negative numbers not supported\"\
    )\n        end\n        return tostring(x)\n    end\n    if base == 8 then\n \
    \       if x < 0 then\n            error(\"negative numbers not supported\")\n\
    \        end\n        return tostring(x)\n    end\n    if base == 16 then\n  \
    \      if x < 0 then\n            error(\"negative numbers not supported\")\n\
    \        end\n        return tostring(x)\n    end\n    if base == 2 then\n   \
    \     if x < 0 then\n            error(\"negative numbers not supported\")\n \
    \       end\n        return tostring(x)\n    end\n    if base == 8 then\n    \
    \    if x < 0 then\n            error(\"negative numbers not supported\")\n  \
    \      end\n        return tostring(x)\n    end\n    if base == 16 then\n    \
    \    if x < 0 then\n            error(\"negative numbers not supported\")\n  \
    \      end\n        return tostring(x)\n    end\n    if base == 10 then\n    \
    \    if x < 0 then\n            error(\"negative numbers not supported\")\n  \
    \      end\n        return tostring(x)\n    end\n    if base == 2 then\n     \
    \   if x < 0 then\n            error(\"negative numbers not supported\")\n   \
    \     end\n        return tostring(x)\n    end\n    if base == 8 then\n      \
    \  if x < 0 then\n            error(\"negative numbers not supported\")\n    \
    \    end\n        return tostring(x)\n    end\n    if base == 16 then\n      \
    \  if x < 0 then\n            error(\"negative numbers not supported\")\n    \
    \    end\n        return tostring(x)\n    end\n    if base == 10 then\n      \
    \  if x < 0 then\n            error(\"negative numbers not supported\")\n    \
    \    end\n        return tostring(x)\n    end\n    if base == 2 then\n       \
    \ if x < 0 then\n            error(\"negative numbers not supported\")\n     \
    \   end\n        return tostring(x)\n    end\n    if base == 8 then\n        if\
    \ x < 0 then\n            error(\"negative numbers not supported\")\n        end\n\
    \        return tostring(x)\n    end\n    if base == 16 then\n        if x < 0\
    \ then\n            error(\"negative numbers not supported\")\n        end\n \
    \       return tostring(x)\n    end\n    if base == 10 then\n        if x < 0\
    \ then\n            error(\"negative numbers not supported\")\n        end\n \
    \       return tostring(x)\n    end\n    if base == 2 then\n        if x < 0 then\n\
    \            error(\"negative numbers not supported\")\n        end\n        return\
    \ tostring(x)\n    end\n    if base == 8 then\n        if x < 0 then\n       \
    \     error(\"negative numbers not supported\")\n        end\n        return tostring(x)\n\
    \    end\n    if base == 16 then\n        if x < ", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  while digits > 0 do\n    local digit = x %\
    \ base\n    x = x / base\n    result = string.sub(tostring(digit), -digits, -1)\
    \ + result\n  end\n  return result .. tostring(x)\nend", "\tlocal s = \"\"\n\t\
    local i = 1\n\twhile i <= base do\n\t\ts = s .. string.format(\"%0\" .. i .. \"\
    d\", x / base)\n\t\tx = x % base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "  \
    \ if base < 10 then\n      local s = \"\"\n      for i = 1, base do\n        \
    \ s = s .. \"0123456789\"\n      end\n      return string.format(\"%0\" .. base\
    \ .. \"d\", x)\n   else\n      return x\n   end\nend", "   local s = \"\"\n  \
    \ for i = 1, 10 do\n      s = s .. string.format(\"%\" .. (base-1) .. \"d\", x\
    \ / base)\n      x = x % base\n   end\n   return s\nend", "    if base < 2 then\n\
    \        error(\"Base must be greater than 1\")\n    end\n    if base == 10 then\n\
    \        return tostring(x)\n    end\n    local s = \"\"\n    while x ~= 0 do\n\
    \        local digit = tostring(x%base)\n        x = floor(x/base)\n        s\
    \ = digit .. s\n    end\n    return s\nend", "    if base < 10 then\n        return\
    \ string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "    if x < 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(x/base)\n    return change_base(digits,\
    \ base) * base + tostring(x - digits * base)\nend", "  local digits = math.floor(x/base^0)\n\
    \  x = x - base*digits\n  return string.format(\"%d\",x), digits\nend", "  if\
    \ x < 10 then\n    return tostring(x)\n  else\n    local s = \"\"\n    local i\
    \ = 1\n    while x > 0 do\n      s = tostring(base * i) + s\n      x = x / base\n\
    \      i = i + 1\n    end\n    return s\n  end\nend", "    if base < 10 then\n\
    \        error(\"Base must be less than 10\")\n    end\n    if base == 10 then\n\
    \        return tostring(x)\n    end\n    local s = \"\"\n    while x ~= 0 do\n\
    \        local digit = x % base\n        s = tostring(digit) + s\n        x =\
    \ floor(x/base)\n    end\n    return s\nend", "    if x < 0 then\n        error(\"\
    negative number\")\n    end\n    if base < 2 then\n        error(\"base must be\
    \ greater than 1\")\n    end\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(x/base)\n    local rest = x - base*digits\n\
    \    return change_base(rest, base), digits\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ base))\n  local result = \"\"\n  local factor = 1\n  for i = 1, digits do\n\
    \    local digit = math.floor(x/factor) % base\n    result = table.concat(result,\
    \ digit)\n    x = math.floor(x / factor) / base\n    factor = factor * base\n\
    \  end\n  return table.concat(result, digits)\nend", "\tlocal s = \"\"\n\tlocal\
    \ i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%0\" .. base .. \"d\", x -\
    \ i) + s\n\t\ti = i + 1\n\tend\n\treturn s\nend", "    if base < 2 then\n    \
    \    error(\"base must be >= 2\")\n    end\n    if base == 10 then\n        return\
    \ tostring(x)\n    end\n    local digits = math.floor(x/base)\n    x = x - digits\
    \ * base\n    local result = \"\"\n    while x ~= 0 do\n        local digit =\
    \ math.floor(x/10)\n        result = string.format(\"%d%s\", digit, result)\n\
    \        x = x - digit * 10\n    end\n    return string.format(\"%d%s\", digits,\
    \ result)\nend", "  local digits = math.floor(math.log(x, base))\n  if digits\
    \ == 0 then\n    return \"\"\n  else\n    local factor = 10^digits\n    return\
    \ string.format(\"%d%0*d\", x / factor, factor, x % factor)\n  end\nend", "  local\
    \ function to_base(x, base)\n    if base < 2 then\n      return x\n    end\n \
    \   local digits = math.floor(math.log(x / base))\n    return base * math.pow(base,\
    \ digits)\n  end\n  return to_base(x, base)\nend", "\tlocal s = \"\"\n\tlocal\
    \ i = 1\n\twhile x > 0 do\n\t\ts = string.format(\"%0\" .. base .. \"d\", x /\
    \ base) + s\n\t\tx = x % base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "  if base\
    \ < 10 then\n    error(\"base must be less than 10\")\n  end\n  local s = \"\"\
    \n  local i = 1\n  while x > 0 do\n    local digit = x % base\n    x = x / base\n\
    \    s = string.sub(tostring(digit), -#digit+1, -#s+1)..s\n    i = i + 1\n  end\n\
    \  return s\nend", "    if x < 10 then\n        return tostring(x)\n    end\n\
    \    local digits = math.floor(math.log(x, base))\n    if digits == 0 then\n \
    \       return tostring(x)\n    end\n    local factor = 10^(digits - 1)\n    local\
    \ result = x / factor\n    if result < 1 then\n        return tostring(x)\n  \
    \  end\n    if result == 1 then\n        return tostring(base)\n    end\n    return\
    \ tostring(base) * change_base(result, base)\nend", "   local s = \"\"\n   for\
    \ i = 1, 10 do\n      s = s .. string.format(\"%\" .. base .. \"d\", x / base^i)\n\
    \   end\n   return s\nend", "   if base < 10 then\n      error(\"Base must be\
    \ less than 10\")\n   end\n   local s = \"\"\n   for i = 1, 10 do\n      s = s\
    \ .. string.format(\"%0\" .. base .. \"d\", x / base) \n      x = x % base\n \
    \  end\n   return s\nend", "\tlocal s = \"\"\n\twhile x > 0 do\n\t\tlocal digit\
    \ = x % base\n\t\tx = math.floor(x/base)\n\t\ts = string.sub(tostring(digit),\
    \ 1) + s\n\tend\n\treturn s\nend", "    if base < 2 then\n        error(\"base\
    \ must be >= 2\")\n    end\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(math.log(x, base))\n    local digits_str\
    \ = tostring(digits)\n    local digits_len = #digits_str\n    local digits_pow\
    \ = math.pow(base, digits)\n    local digits_pow2 = math.pow(base, digits)\n \
    \   local digits_pow3 = math.pow(base, digits)\n    local digits_pow4 = math.pow(base,\
    \ digits)\n    local digits_pow5 = math.pow(base, digits)\n    local digits_pow6\
    \ = math.pow(base, digits)\n    local digits_pow7 = math.pow(base, digits)\n \
    \   local digits_pow8 = math.pow(base, digits)\n    local digits_pow9 = math.pow(base,\
    \ digits)\n    local digits_pow10 = math.pow(base, digits)\n    local digits_pow11\
    \ = math.pow(base, digits)\n    local digits_pow12 = math.pow(base, digits)\n\
    \    local digits_pow13 = math.pow(base, digits)\n    local digits_pow14 = math.pow(base,\
    \ digits)\n    local digits_pow15 = math.pow(base, digits)\n    local digits_pow16\
    \ = math.pow(base, digits)\n    local digits_pow17 = math.pow(base, digits)\n\
    \    local digits_pow18 = math.pow(base, digits)\n    local digits_pow19 = math.pow(base,\
    \ digits)\n    local digits_pow20 = math.pow(base, digits)\n    local digits_pow21\
    \ = math.pow(base, digits)\n    local digits_pow22 = math.pow(base, digits)\n\
    \    local digits_pow23 = math.pow(base, digits)\n    local digits_pow24 = math.pow(base,\
    \ digits)\n    local digits_pow25 = math.pow(base, digits)\n    local digits_pow26\
    \ = math.pow(base, digits)\n    local digits_pow27 = math.pow(base, digits)\n\
    \    local digits_pow28 = math.pow(base, digits)\n    local digits_pow29 = math.pow(base,\
    \ digits)\n    local digits_pow30 = math.pow(base, digits)\n    local digits_pow31\
    \ = math.pow(base, digits)\n    local digits_pow32 = math.pow(base, digits)\n\
    \    local digits_pow33 = math.pow(base, digits)\n    local digits_pow34 = math.pow(base,\
    \ digits)\n    local digits_pow35 = math.pow(base, digits)\n    local digits_pow36\
    \ = math.pow(", "    if base < 2 then\n        error(\"Base must be greater than\
    \ 1\")\n    end\n    if base > 10 then\n        error(\"Base must be less than\
    \ 10\")\n    end\n    if base == 10 then\n        return x\n    end\n    local\
    \ s = \"\"\n    local i = 1\n    while x > 1 do\n        local t = x % base\n\
    \        x = x\n        s = string.format(\"%d%s\", t, s)\n        i = i + 1\n\
    \    end\n    return string.format(\"%d%s\", x, s)\nend", "\tlocal s = \"\"\n\t\
    local i = 0\n\twhile x > 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx =\
    \ x / base\n\t\ti = i + 1\n\tend\n\treturn s\nend", "  if base == 10 then\n  \
    \  return tostring(x)\n  elseif base == 16 then\n    return tostring(x:byte())\n\
    \  elseif base == 2 then\n    return tostring(x:short())\n  elseif base == 8 then\n\
    \    return tostring(x:long())\n  else\n    assert(false, \"Unknown base \" ..\
    \ tostring(base))\n  end\nend", "    if base < 10 then\n        error(\"base must\
    \ be less than 10\")\n    end\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    local s = tostring(x)\n    local t = \"\"\n    local i = 1\n   \
    \ while i <= #s do\n        local c = string.sub(s,i,i)\n        if c >= \"0\"\
    \ then\n            local n = tonumber(c)\n            if n > 0 then\n       \
    \         t = t .. string.sub(s,i,i)\n            end\n        elseif c == \"\
    -\" then\n            local n = tonumber(string.sub(s,i,i+1))\n            if\
    \ n > 0 then\n                t = t .. string.sub(s,i,i+1)\n            end\n\
    \        elseif c == \"+\" then\n            local n = tonumber(string.sub(s,i,i+1))\n\
    \            if n < 0 then\n                t = t .. string.sub(s,i,i+1)\n   \
    \         end\n        elseif c == \"/\" then\n            local n = tonumber(string.sub(s,i,i+1))\n\
    \            if n == 0 then\n                error(\"divide by zero\")\n     \
    \       end\n            t = t .. string.sub(s,i,i+1)\n        elseif c == \"\
    %\" then\n            local n = tonumber(string.sub(s,i,i+1))\n            if\
    \ n == 0 then\n                error(\"modulo by zero\")\n            end\n  \
    \          t = t .. string.sub(s,i,i+1)\n        else\n            error(\"invalid\
    \ character\")\n        end\n        i = i + 2\n    end\n    return t\nend", " \
    \   if base < 2 then\n        error(\"base must be greater than 1\")\n    end\n\
    \    if base == 10 then\n        return tostring(x)\n    end\n    local digits\
    \ = math.floor(x/base)\n    local rest = x - base*digits\n    return change_base(digits,\
    \ base) + tostring(rest)\nend", "\tlocal s = \"\"\n\tlocal i = 1\n\twhile x >\
    \ 0 do\n\t\ts = string.format(\"%d%s\", x, s)\n\t\tx = x / base\n\t\ti = i + 1\n\
    \tend\n\treturn s\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    local remainder = x / base\n    x = remainder\n    result = result .. string.char(tonumber(digit)\
    \ .. string.char(tonumber(remainder)))\n    digits = digits - 1\n  end\n  return\
    \ result\nend", "  local s = \"\"\n  local i = 1\n  while i <= base do\n    local\
    \ t = math.floor(x/base)*base\n    s = string.sub(tostring(t), -2)..s\n    x =\
    \ x - t\n    i = i + 1\n  end\n  return s\nend", "   local s = \"\"\n   for i\
    \ = 1, 10 do\n      s = s .. string.format(\"%0\" .. base .. \"d\", x / base^i)\n\
    \   end\n   return s\nend", "    if x < 10 then\n        return string.format(\"\
    %o\", x)\n    else\n        return string.format(\"%x\", x)\n    end\nend", "\t\
    local function to_base(x, base)\n\t\tlocal ret = \"\"\n\t\tlocal i = 1\n\t\twhile\
    \ x > 0 do\n\t\t\tlocal digit = x % base\n\t\t\tx = x / base\n\t\t\tif digit ~=\
    \ 0 then\n\t\t\t\tret = string.sub(tostring(digit), -#digit) + ret\n\t\t\tend\n\
    \t\t\ti = i + 1\n\t\tend\n\t\treturn ret\n\tend\n\tlocal function to_base_string(x,\
    \ base)\n\t\tlocal ret = \"\"\n\t\tlocal i = 1\n\t\twhile x > 0 do\n\t\t\tlocal\
    \ digit = x % base\n\t\t\tx = x / base\n\t\t\tif digit ~= 0 then\n\t\t\t\tret\
    \ = string.sub(tostring(digit), -#digit) + ret\n\t\t\tend\n\t\t\ti = i + 1\n\t\
    \tend\n\t\treturn ret\n\tend\n\tlocal function to_base_string2(x, base)\n\t\t\
    local ret = \"\"\n\t\tlocal i = 1\n\t\twhile x > 0 do\n\t\t\tlocal digit = x %\
    \ base\n\t\t\tx = x / base\n\t\t\tif digit ~= 0 then\n\t\t\t\tret = string.sub(tostring(digit),\
    \ -#digit) + ret\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn ret\n\tend\n\
    \tlocal function to_base_string3(x, base)\n\t\tlocal ret = \"\"\n\t\tlocal i =\
    \ 1\n\t\twhile x > 0 do\n\t\t\tlocal digit = x % base\n\t\t\tx = x / base\n\t\t\
    \tif digit ~= 0 then\n\t\t\t\tret = string.sub(tostring(digit), -#digit) + ret\n\
    \t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn ret\n\tend\n\tlocal function to_base_string4(x,\
    \ base)\n\t\tlocal ret = \"\"\n\t\tlocal i = 1\n\t\twhile x > 0 do\n\t\t\tlocal\
    \ digit = x % base\n\t\t\tx = x / base\n\t\t\tif digit ~= 0 then\n\t\t\t\tret\
    \ = string.sub(tostring(digit), -#digit) + ret\n\t\t\tend\n\t\t\ti = i + 1\n\t\
    \tend\n\t\treturn ret\n\tend\n\tlocal function to_base_string5(x, base)\n\t\t\
    local ret = \"\"\n\t\tlocal i = 1\n\t\twhile x > 0 do\n\t\t\tlocal digit = x %\
    \ base\n\t\t\tx = x / base\n\t\t\tif digit ~= 0 then\n\t\t\t\tret = string.sub(tostring(digit),\
    \ -#digit) + ret\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn ret\n\tend\n\
    \tlocal function to_base_string6(x, base)\n\t\tlocal ret = \"\"\n\t\tlocal i =\
    \ 1\n\t\twhile x > 0 do\n\t\t\tlocal digit = x % base\n\t\t\tx = x / base\n\t\t\
    \tif digit ~= 0 then\n\t\t\t\tret = string.sub(tostring(digit), -#digit) + ret",
  "    if base < 2 then\n        error(\"base must be >= 2\")\n    end\n    if base\
    \ == 10 then\n        return tostring(x)\n    end\n    local digits = math.floor(x/base)\n\
    \    x = x - base*digits\n    if x < 0 then\n        x = x + base\n    end\n \
    \   return tostring(x)\nend", "\t-- base numbers are less than 10.\n\tif base\
    \ < 10 then\n\t\terror(\"base must be greater than or equal to 10\")\n\tend\n\t\
    -- Change numerical base of input number x to base.\n\t-- return string representation\
    \ after the conversion.\n\t-- base numbers are less than 10.\n\tlocal function\
    \ change_base(x, base)\n\t\t-- base numbers are less than 10.\n\t\tif base < 10\
    \ then\n\t\t\terror(\"base must be greater than or equal to 10\")\n\t\tend\n\t\
    \t-- Change numerical base of input number x to base.\n\t\t-- return string representation\
    \ after the conversion.\n\t\t-- base numbers are less than 10.\n\t\tlocal function\
    \ change_base(x, base)\n\t\t\t-- base numbers are less than 10.\n\t\t\tif base\
    \ < 10 then\n\t\t\t\terror(\"base must be greater than or equal to 10\")\n\t\t\
    \tend\n\t\t\t-- Change numerical base of input number x to base.\n\t\t\t-- return\
    \ string representation after the conversion.\n\t\t\t-- base numbers are less\
    \ than 10.\n\t\t\tlocal function change_base(x, base)\n\t\t\t\t-- base numbers\
    \ are less than 10.\n\t\t\t\tif base < 10 then\n\t\t\t\t\terror(\"base must be\
    \ greater than or equal to 10\")\n\t\t\t\tend\n\t\t\t\t-- Change numerical base\
    \ of input number x to base.\n\t\t\t\t-- return string representation after the\
    \ conversion.\n\t\t\t\t-- base numbers are less than 10.\n\t\t\t\tlocal function\
    \ change_base(x, base)\n\t\t\t\t\t-- base numbers are less than 10.\n\t\t\t\t\t\
    if base < 10 then\n\t\t\t\t\t\terror(\"base must be greater than or equal to 10\"\
    )\n\t\t\t\t\tend\n\t\t\t\t\t-- Change numerical base of input number x to base.\n\
    \t\t\t\t\t-- return string representation after the conversion.\n\t\t\t\t\t--\
    \ base numbers are less than 10.\n\t\t\t\t\tlocal function change_base(x, base)\n\
    \t\t\t\t\t\t-- base numbers are less than 10.\n\t\t\t\t\t\tif base < 10 then\n\
    \t\t\t\t\t\t\terror(\"base must be greater than or equal to 10\")\n\t\t\t\t\t\t\
    end\n\t\t\t\t\t\t-- Change numerical base of input number x to base.\n\t\t\t\t\
    \t\t-- return string representation after the conversion.\n\t\t\t\t\t\t-- base\
    \ numbers are less than 10.\n\t\t\t\t\t\tlocal function change_base(x, base)\n\
    \t\t\t\t\t\t\t-- base numbers are less than 10.\n\t\t\t\t\t\t\tif base < 10 then\n\
    \t\t\t\t\t\t\t\terror(\"base must be greater than or equal to 10\")\n\t\t\t\t\t\
    \t\tend\n\t\t\t\t\t\t\t-- Change numerical base of input number x to base.\n\t\
    \t\t\t\t\t\t-- return string representation after the conversion.\n\t\t\t\t\t\t\
    \t-- base numbers are less than 10.\n\t\t\t\t\t\t\tlocal function change_base(x,\
    \ base)\n\t\t\t\t\t\t\t\t-- base numbers are less than 10.\n\t\t\t\t\t\t\t\tif\
    \ base < 10 then\n\t\t\t\t\t\t\t\t\terror(\"base must be greater than or equal\
    \ to 10\")\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t-- Change numerical base of input\
    \ number x to base.\n\t\t\t\t\t\t\t\t-- return string representation after the\
    \ conversion.\n\t\t\t\t\t\t\t\t-- base numbers are less than 10.\n\t\t\t\t\t\t\
    \t\tlocal function change_base", "    if x < 10 then\n        return string.format(\"\
    %d\",x)\n    else\n        local s = \"\"\n        for i = 1, 10 do\n        \
    \    s = string.format(\"%d%d\",s,math.floor(x/base))\n            x = x % base\n\
    \        end\n        return s\n    end\nend", "    if base < 2 then\n       \
    \ error(\"Base must be greater than 1\")\n    end\n    if base == 10 then\n  \
    \      return x\n    end\n    local digits = math.floor(math.log(math.abs(x),\
    \ base))\n    local digits_str = string.rep(\"0\", digits + 2)\n    local digits_str2\
    \ = string.rep(\"1\", digits + 2)\n    local digits_str3 = string.rep(\"0\", digits\
    \ + 2)\n    local digits_str4 = string.rep(\"1\", digits + 2)\n    local digits_str5\
    \ = string.rep(\"0\", digits + 2)\n    local digits_str6 = string.rep(\"1\", digits\
    \ + 2)\n    local digits_str7 = string.rep(\"0\", digits + 2)\n    local digits_str8\
    \ = string.rep(\"1\", digits + 2)\n    local digits_str9 = string.rep(\"0\", digits\
    \ + 2)\n    local digits_str10 = string.rep(\"1\", digits + 2)\n    local digits_str11\
    \ = string.rep(\"0\", digits + 2)\n    local digits_str12 = string.rep(\"1\",\
    \ digits + 2)\n    local digits_str13 = string.rep(\"0\", digits + 2)\n    local\
    \ digits_str14 = string.rep(\"1\", digits + 2)\n    local digits_str15 = string.rep(\"\
    0\", digits + 2)\n    local digits_str16 = string.rep(\"1\", digits + 2)\n   \
    \ local digits_str17 = string.rep(\"0\", digits + 2)\n    local digits_str18 =\
    \ string.rep(\"1\", digits + 2)\n    local digits_str19 = string.rep(\"0\", digits\
    \ + 2)\n    local digits_str20 = string.rep(\"1\", digits + 2)\n    local digits_str21\
    \ = string.rep(\"0\", digits + 2)\n    local digits_str22 = string.rep(\"1\",\
    \ digits + 2)\n    local digits_str23 = string.rep(\"0\", digits + 2)\n    local\
    \ digits_str24 = string.rep(\"1\", digits + 2)\n    local digits_str25 = string.rep(\"\
    0\", digits + 2)\n    local digits_str26 = string.rep(\"1\", digits + 2)\n   \
    \ local digits_str27 = string.rep(\"0\", digits + 2)\n    local digits_str28 =\
    \ string.rep(\"1\", digits + 2)\n    local digits_str29 = string.rep(\"0\", digits\
    \ + 2)\n    local digits_str30 = string", "   local result = \"\"\n   local digits\
    \ = math.floor(math.log(x, base))\n   if digits == 0 then\n      return x\n  \
    \ end\n   for i = 1, digits do\n      local digit = math.floor(x/base%10)\n  \
    \    x = math.floor(x/10)\n      result = result .. digit\n   end\n   return result\
    \ .. x\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  local i = 0\n  while digits > 0 do\n    local digit = x % base\n \
    \   x = x / base\n    result = string.sub(tostring(digit), -i-1) + result\n  \
    \  digits = digits - 1\n  end\n  return result .. tostring(x)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
