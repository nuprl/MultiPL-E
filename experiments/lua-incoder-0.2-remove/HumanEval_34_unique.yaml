name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n \
    \   if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n  \
    \  end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  table.sort(u)\n \
    \ return table.unpack(u)\nend", "  local seen = {}\n  local out = {}\n  for _,\
    \ v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n    \
    \  table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  table.sort(u)\n  return\
    \ table.unpack(u)\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] then\n        table.insert(l, v)\n  \
    \      break\n      end\n    end\n  end\n  return l\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i =\
    \ 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n    \
    \  if u[v] then\n        local k = v\n        v = u[k]\n        u[k] = nil\n \
    \       break -- exit inner loop\n      end\n    end\n    i = i + 1\n  end\n \
    \ return v\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return table.sort(u)\nend", "  local seen = {}\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  table.sort(u)\n  return table.unpack(u)\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then continue end\n    seen[v] = true\n    out[#out + 1]\
    \ = v\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return table.sort(u)\nend", "  local seen = {}\n  local out = {}\n  for _,\
    \ v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  return table.sort(u)\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  table.sort(u)\n  return table.unpack(u)\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n\
    \    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local v\n  for v in pairs(u)\
    \ do return v end\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\
    \ u[v] = true end\n  return table.sort(u)\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ table.sort(u)\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  table.sort(u)\n  return table.unpack(u)\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ table.sort(u)\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ table.sort(u)\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  return table.sort(u)\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\
    \ u[v] = true end\n  return table.sort(u)\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n\
    \      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n   \
    \   out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local seen = {}\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
