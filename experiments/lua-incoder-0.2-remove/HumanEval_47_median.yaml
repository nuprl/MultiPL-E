name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the list l.\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend", "  local n = #l\n  if n == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(n / 2)\n  if n % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n  if n\
    \ % 2 == 0 then\n    return l[half]\n  else\n    return (l[half-1] + l[half])\
    \ / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid\
    \ = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return\
    \ nil end\n  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n\
    \  if lower > upper then return median end\n  local median = (lower + upper) /\
    \ 2\n  while median > l[mid] do\n    median = (median + lower) / 2\n  end\n  return\
    \ median\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid =\
    \ math.floor((n - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return median(l[mid], l[mid+1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n\
    \  end\nend", "  local n = #l\n  if n < 2 then return nil end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  local n = #l\n  if n <= 1 then return l[1] end\n\
    \  local mid = math.floor(n/2)\n  return median(l[mid], l[#l])\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then return l[mid] end\n  local lower\
    \ = l[mid]\n  local upper = l[#l - 1]\n  return lower + math.abs(upper - lower)\
    \ / 2\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n < 1 then return nil end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n\
    \  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0\
    \ then\n    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)]\
    \ + l[math.floor(n/2)+1])/2\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  end\n  local mid = math.floor(n / 2)\n  if n\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif n ==\
    \ 1 then\n    return l[1]\n  else\n    local mid = math.floor((n + 1) / 2)\n \
    \   return median(l, mid - 1, mid)\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1]) / 2\n \
    \ end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid-1], l[mid])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  local median = median(l[mid], l[n - 1])\n  for i = mid + 1, n do\n\
    \    median = median + l[i] / 2\n  end\n  return median\nend", "  local n = #l\n\
    \  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n\
    \  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n  end\nend",
  "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n / 2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n  end\nend",
  "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend", "  local n = #l\n  if n < 2 then\n    return nil\n  end\n\
    \  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\
    \ return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n  \
    \  return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid-1], l[mid])\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1]) / 2\n \
    \ end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2.0\n  end\nend", "  local n = #l\n  if n == 0 then\n    return\
    \ nil\n  end\n  if n % 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local\
    \ mid = math.floor(n/2)\n  local left = l[mid]\n  local right = median(l[mid+1])\n\
    \  if right == nil then\n    return left\n  end\n  return left + (right-left)*0.5\n\
    end", "  local n = #l\n  if n <= 1 then return l[1] end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  return median(l, mid - 1, mid)\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n  if n\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0\
    \ then\n    return l[math.floor(n/2)]\n  else\n    local mid = math.floor(n/2)\n\
    \    return median(l[mid-1], median(l[mid], l[mid+1]))\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then return l[mid] end\n  local lower =\
    \ l[mid]\n  local upper = l[mid+1]\n  if lower > upper then return median end\n\
    \  local median = lower + math.floor((upper - lower) / 2)\n  return median\nend",
  "  local n = #l\n  if n <= 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n  end\nend", " \
    \ local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend", "  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local\
    \ mid = math.floor((n - 1) / 2)\n  return median(l[mid], l[n - 1])\nend", "  local\
    \ n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n  if\
    \ n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1], l[mid])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n\
    \  local mid = math.floor((n + 1) / 2)\n  local median = median(l, mid)\n  if\
    \ n % 2 == 0 then\n    return median\n  else\n    return median + median(l, mid\
    \ - 1)\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l/2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n \
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  local n = #l\n\
    \  if n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n    return l[math.floor(n/2)]\n\
    \  end\n  local mid = math.floor(n/2)\n  local left = l[mid]\n  local right =\
    \ median(l[mid+1])\n  return left < right and left or right\nend", "  local n\
    \ = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return l[((n\
    \ - 1) / 2) + 1]\n  else\n    return (l[((n - 1) / 2)] + l[((n - 1) / 2) + 1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  if n %\
    \ 2 == 0 then\n    return l[math.floor(n/2)]\n  else\n    return l[math.floor(n/2)]\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid-1], l[mid])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid+1]\n  end\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend", "  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local\
    \ mid = math.floor((n - 1) / 2)\n  local left = l[mid]\n  local right = l[mid+1]\n\
    \  if right < left then\n    return right\n  else\n    return left\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if\
    \ #l % 2 == 1 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper\
    \ = l[mid+1]\n  local median = (lower + upper)/2\n  if median == lower then return\
    \ median end\n  if median == upper then return median end\n  if median == l[mid]\
    \ then return median end\n  return median\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then return l[mid] end\n\
    \  local lower = l[mid]\n  local upper = l[mid+1]\n  if lower > upper then return\
    \ median end\n  return lower + math.floor((upper - lower)/2)\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  elseif n == 1 then\n    return l[1]\n  else\n    local mid = math.floor((n\
    \ + 1) / 2)\n    return median(l[mid], l[n - 1])\n  end\nend", "  local n = #l\n\
    \  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n - 1) /\
    \ 2)\n  return median(l[mid], l[n - 1])\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor((n - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n <= 1\
    \ then\n    return nil\n  end\n  local mid = math.floor(n / 2)\n  local median\
    \ = nil\n  if n % 2 == 0 then\n    median = l[mid]\n  else\n    median = median(l[mid],\
    \ l[mid-1])\n  end\n  return median\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 1 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n < 1 then return nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid-1], l[mid])\n  end\nend",
  "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n / 2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then return l[mid] end\n  local lower = l[mid]\n  local upper\
    \ = l[mid+1]\n  return lower + math.floor((upper - lower)/2)\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l - 1])\n  end\nend", "  local n = #l\n  if n ==\
    \ 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n\
    \  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n  end\nend",
  "  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 1 then\n    return median(l[mid], l[n - 1])\n  else\n\
    \    return median(l[mid], l[mid])\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n  else\n    return l[math.floor(n/2)]\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid-1] + l[mid]/2\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid-1] + l[mid]/2\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return\
    \ nil\n  elseif n == 1 then\n    return l[1]\n  end\n  local mid = math.floor(n/2)\n\
    \  local left = l[mid]\n  local right = median(l[mid+1])\n  if n == mid then\n\
    \    return right\n  elseif n == mid+1 then\n    return left\n  else\n    return\
    \ math.floor((left + right)/2)\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return l[mid] + median(l[mid+1] - l[mid])\n  end\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  local n = #l\n  if n < 2\
    \ then return nil end\n  local mid = math.floor((n - 1) / 2)\n  if n % 2 == 0\
    \ then\n    return l[mid]\n  else\n    return median(l[mid], l[mid+1])\n  end\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n\
    \    return l[1]\n  end\n  local mid = math.floor((n - 1) / 2)\n  if l[mid] <=\
    \ l[mid+1] then\n    return median(l[mid], l[mid+1])\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[mid-1])\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid =\
    \ math.floor(#l/2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid-1] + l[mid]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n  \
    \  return nil\n  elseif n % 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n  else\n\
    \    return (l[((n - 1) / 2)] + l[((n - 1) / 2) + 1]) / 2\n  end\nend", "  local\
    \ n = #l\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2\
    \ - 1)])/2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid-1], l[mid])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\
    \ return l[mid] end\n  local lower = l[mid]\n  local upper = l[mid+1]\n  return\
    \ lower + math.floor((upper - lower)/2)\nend", "  local n = #l\n  if n <= 1 then\n\
    \    return l[1]\n  end\n  local mid = math.floor(n/2)\n  return median(l[mid],\
    \ l[n - 1])\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  local mid = math.floor((n - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[mid+1])\n  end\nend", "  if #l == 0 then\
    \ return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid-1], l[mid])\n  end\nend", "  local n\
    \ = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n  if n\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid-1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return (l[mid-1] + l[mid])/2\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid-1], l[mid])\n  end\nend", "  local n\
    \ = #l\n  if n < 1 then return nil end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n\
    \  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return l[mid-1] + l[mid]/2\n  end\nend", "  local n = #l\n\
    \  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n  if n % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n  end\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n\
    \    return l[1]\n  else\n    local mid = math.floor((n - 1) / 2)\n    return\
    \ median(l[mid], l[n - 1])\n  end\nend", "  local n = #l\n  if n == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n \
    \   return l[mid]\n  else\n    return median(l[mid-1], l[mid])\n  end\nend", " \
    \ local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n <= 1 then\n    return l[1]\n\
    \  end\n  local mid = math.floor((n - 1) / 2)\n  return median(l[mid], l[n - 1])\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ median(l[mid], l[mid-1])\n  end\nend", "  local n = #l\n  if n < 2 then\n  \
    \  return nil\n  end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n  \
    \  return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n < 1 then return nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend",
  "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid]\
    \ + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n  if n\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n \
    \ local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n < 1 then return nil end\n  local mid = math.floor((n + 1) / 2)\n  if n % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return l[mid] + median(l[mid+1]) or median(l[mid-1]) or median(l[mid])\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif n ==\
    \ 1 then\n    return l[1]\n  end\n  local mid = math.floor(n/2)\n  return median(l[mid],\
    \ l[n - 1])\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n <= 1 then return nil end\n\
    \  local mid = math.floor(n/2)\n  if n % 2 == 0 then return l[mid] end\n  local\
    \ lower = median(l[mid-1])\n  local upper = median(l[mid+1])\n  return lower +\
    \ (upper - lower) * 0.5\nend", "  local n = #l\n  if n <= 1 then\n    return l[1]\n\
    \  end\n  local mid = math.floor(n/2)\n  local left = l[mid]\n  local right =\
    \ l[mid+1]\n  if right < left then\n    return median(l)\n  else\n    return left\
    \ + (right-left)/2\n  end\nend", "  local n = #l\n  if n <= 1 then\n    return\
    \ l[1]\n  end\n  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n \
    \   return median(l[mid], l[n - 1])\n  else\n    return median(l[mid], l[mid])\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n\
    \ % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local mid = n / 2\n\
    \  local left = l[mid]\n  local right = l[mid+1]\n  if left < right then\n   \
    \ return median(l)\n  else\n    return right\n  end\nend", "  local n = #l\n \
    \ if n < 2 then\n    return nil\n  end\n  local mid = math.floor((n + 1) / 2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  if n % 2 == 0 then\n    return l[((n - 1) / 2)]:double() + (l[((n - 1) / 2)\
    \ + 1]:double()) / 2.0\n  else\n    return l[((n - 1) / 2)]:double()\n  end\n\
    end", "  local n = #l\n  if n <= 1 then\n    return l[1]\n  end\n  local mid =\
    \ math.floor((n - 1) / 2)\n  local left = l[mid]\n  local right = l[mid+1]\n \
    \ if n == 2 then\n    return left\n  elseif n == 1 then\n    return right\n  else\n\
    \    return math.floor(left + right/2)\n  end\nend", "  local n = #l\n  if n <\
    \ 2 then\n    return nil\n  end\n  local mid = math.floor((n - 1) / 2)\n  if n\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return l[mid] + median(l[mid+1],\
    \ l[mid-1])\n  end\nend", "  local n = #l\n  if n <= 1 then\n    return l[1]\n\
    \  end\n  local mid = math.floor((n - 1) / 2)\n  local left = l[mid]\n  local\
    \ right = l[mid+1]\n  if n == 2 then\n    return left\n  elseif n == 1 then\n\
    \    return right\n  else\n    return math.floor(left + right) / 2\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half\
    \ = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half + 1])\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then return l[mid] end\n \
    \ local lower = l[mid]\n  local upper = l[mid+1]\n  if lower < upper then return\
    \ lower end\n  return upper\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid-1] + l[mid])/2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid-1] + l[mid]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return (l[mid-1] + l[mid])/2\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l == 0 then\
    \ return nil end\n  local mid = math.floor(#l/2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid-1] + l[mid]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n < 1 then return nil end\n  local mid = math.floor((n + 1) / 2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l/2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid-1] + l[mid])/2\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n\
    \ % 2 == 0 then\n    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)]\
    \ + l[math.floor(n/2)+1])/2\n  end\nend", "  local n = #l\n  if n < 1 then return\
    \ nil end\n  local mid = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif\
    \ n == 1 then\n    return l[1]\n  end\n  local mid = math.floor((n - 1) / 2)\n\
    \  return median(l[mid], l[#l])\nend", "  local n = #l\n  if n < 1 then return\
    \ nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid-1] + l[mid]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n < 2 then\n    return nil\n  end\n  local mid = math.floor((n + 1) / 2)\n \
    \ if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return l[mid-1] + l[mid]/2\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
