name: HumanEval_120_maximum
language: lua
prompt: "-- Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- Example\
  \ 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in the range\
  \ of [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
  \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local maxArr = {} -- the max array\n    local maxLen = 0 -- length\
    \ of max array\n    local i = 1\n    while i <= k do\n        local curMax = arr[i]\n\
    \        for j = i + 1, k do\n            if arr[j] > curMax then\n          \
    \      curMax = arr[j]\n            end\n        end\n        maxArr[maxLen] =\
    \ curMax\n        i = i + 1\n        maxLen = maxLen + 1\n    end\n    return\
    \ maxArr\nend", "  local max_arr = {}\n  local max_num = 0\n  local i = 1\n  while\
    \ i <= k do\n    if arr[i] > max_num then\n      max_num = arr[i]\n    end\n \
    \   max_arr[i] = max_num\n    i = i + 1\n  end\n  return max_arr\nend", "    local\
    \ max_arr = {}\n    local max_num = -math.inf\n    for i = 1, k do\n        local\
    \ num = arr[i]\n        if num > max_num then\n            max_num = num\n   \
    \     end\n    end\n    for i = 1, k do\n        local num = arr[i]\n        if\
    \ num > max_num then\n            max_arr[i] = num\n        end\n    end\n   \
    \ return max_arr\nend", "    local max_arr = {}\n    local max_num = 0\n    for\
    \ i = 1, k do\n        max_num = math.max(max_num, arr[i])\n    end\n    for i\
    \ = 1, k do\n        max_arr[i] = max_num\n    end\n    return max_arr\nend",
  "  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Get the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  -- Get the maximum\
    \ number in the remaining elements\n  for i = 2, k do\n    if arr[i] > max_element\
    \ then\n      max_element = arr[i]\n    end\n  end\n  -- Return the maximum number\
    \ in the first k elements\n  return arr[1:k+1]\nend", "    local max_arr = {}\n\
    \    local max_num = 0\n    for i = 1, k do\n        max_num = max_num + arr[i]\n\
    \    end\n    for i = 1, k do\n        if arr[i] > max_num then\n            max_num\
    \ = arr[i]\n        end\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n\
    \    end\n    return max_arr\nend", "    local max_arr = {}\n    local max_num\
    \ = 0\n    for i = 1, k do\n        max_num = max_num + arr[i]\n    end\n    for\
    \ i = 1, k do\n        max_arr[i] = max_num\n    end\n    return max_arr\nend",
  "    local max = 0\n    local max_index = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n            max_index = i\n        end\n\
    \    end\n    local max_value = arr[max_index]\n    for i = 1, k do\n        if\
    \ arr[i] > max_value then\n            arr[max_index] = arr[i]\n        end\n\
    \    end\n    return arr\nend", "  local max_arr = {}\n  local max_k = 0\n  for\
    \ i = 1, k do\n    local max_value = -1000\n    for j = 1, #arr do\n      if arr[j]\
    \ > max_value then\n        max_value = arr[j]\n      end\n    end\n    max_arr[i]\
    \ = max_value\n    max_k = i\n  end\n  return max_arr, max_k\nend", "    local\
    \ maxArr = {}\n    local maxVal = -1000\n    for i = 1, k do\n        local maxIndex\
    \ = -1\n        for j = 1, #arr do\n            if arr[j] > maxVal then\n    \
    \            maxVal = arr[j]\n                maxIndex = j\n            end\n\
    \        end\n        maxArr[i] = arr[maxIndex]\n    end\n    return maxArr\n\
    end", "    local maxArr = {} -- the result array\n    local maxNum = arr[1]\n\
    \    for i = 2, k do\n        if arr[i] > maxNum then\n            maxNum = arr[i]\n\
    \        end\n    end\n    for i = 1, k do\n        maxArr[i] = maxNum\n    end\n\
    \    return maxArr\nend", "  -- Base case\n  if k == 1 then\n    return arr\n\
    \  end\n  \n  -- Get the max number in the first k elements\n  local max_element\
    \ = arr[1]\n  for i = 2, k do\n    if arr[i] > max_element then\n      max_element\
    \ = arr[i]\n    end\n  end\n  \n  -- Sort the remaining elements and return them\n\
    \  local sorted_arr = {}\n  for i = 2, k do\n    table.insert(sorted_arr, arr[i])\n\
    \  end\n  table.sort(sorted_arr)\n  return sorted_arr\nend", "    local results\
    \ = {}\n    local max = 0\n    local i = 1\n    while i <= k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n        end\n        i = i + 1\n    end\n\
    \    local j = 1\n    while j <= k do\n        if arr[j] > max then\n        \
    \    results[j] = arr[j]\n        end\n        j = j + 1\n    end\n    return\
    \ results\nend", "    if k == 0 then\n        return arr\n    end\n    local max_arr\
    \ = {}\n    local max_num = 0\n    for i = 1, k do\n        if arr[i] > max_num\
    \ then\n            max_num = arr[i]\n        end\n    end\n    max_arr[1] = max_num\n\
    \    for i = 2, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend", "    local max_arr\
    \ = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num = math.max(max_num,\
    \ arr[i])\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n    end\n\
    \    return max_arr\nend", "    local max_arr = {}\n    local max_num = 0\n  \
    \  for i = 1, k do\n        max_num = math.max(max_num, arr[i])\n    end\n   \
    \ for i = 1, k do\n        max_arr[i] = max_num\n    end\n    return max_arr\n\
    end", "    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n  \
    \      max_num = math.max(max_num, arr[i])\n    end\n    for i = 1, k do\n   \
    \     max_arr[i] = max_num\n    end\n    return max_arr\nend", "  -- Base case\n\
    \  if k == 0 then\n    return arr\n  end", "    local max_arr = {}\n    local\
    \ max_num = 0\n    local max_idx = 0\n    for i = 1, k do\n        if arr[i] >\
    \ max_num then\n            max_num = arr[i]\n            max_idx = i\n      \
    \  end\n    end\n    max_arr[max_idx] = max_num\n    for i = k + 1, #arr do\n\
    \        if arr[i] > max_num then\n            max_num = arr[i]\n            max_idx\
    \ = i\n        end\n    end\n    return max_arr\nend", "    local maxArr\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local maxIndex\n    local maxLen\n    local maxIndex\n   \
    \ local maxNum\n    local ", "    local maxArr = {} -- the max array\n    local\
    \ maxLen = 0 -- length of max array\n    for i = 1, k do\n        local curMax\
    \ = arr[1]\n        for j = 2, #arr do\n            if arr[j] > curMax then\n\
    \                curMax = arr[j]\n            end\n        end\n        maxArr[#maxArr\
    \ + 1] = curMax\n        maxLen = #maxArr\n    end\n    return maxArr\nend", " \
    \   local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num > arr[i] and max_num or arr[i]\n        max_arr[i] = max_num\n   \
    \ end\n    return max_arr\nend", "  local results = {}\n  local max = 0\n  local\
    \ index = 0\n  local length = #arr\n  for i = 1, length do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n      index = i\n    end\n  end\n  \n  for i = 1,\
    \ k do\n    table.insert(results, max)\n    max = max - 1\n  end\n  \n  return\
    \ results\nend", "  if k == 0 then\n    return arr\n  end\n  \n  local max_arr\
    \ = {}\n  local max_idx = 1\n  \n  for i = 1, k do\n    if arr[i] > arr[max_idx]\
    \ then\n      max_idx = i\n    end\n  end\n  \n  table.insert(max_arr, arr[max_idx])\n\
    \  \n  for i = k + 1, #arr do\n    if arr[i] > arr[max_idx] then\n      max_idx\
    \ = i\n    end\n  end\n  \n  table.insert(max_arr, arr[max_idx])\n  \n  return\
    \ max_arr\nend", "  -- Base case\n  if k == 1 then\n    return arr\n  end", " \
    \   local result = {}\n    local max = 0\n    for i = 1, k do\n        local element\
    \ = arr[i]\n        if element > max then\n            max = element\n       \
    \ end\n    end\n    for i = 1, k do\n        table.insert(result, max)\n    end\n\
    \    return result\nend", "  -- Write your code here.\n  local max = 0\n  local\
    \ max_index = 0\n  for i = 1, k do\n    if arr[i] > max then\n      max = arr[i]\n\
    \      max_index = i\n    end\n  end\n  return arr[max_index], max_index\nend",
  "    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num\
    \ = max_num or arr[i]\n        if arr[i] > max_num then\n            max_num =\
    \ arr[i]\n        end\n    end\n    for i = k + 1, #arr do\n        if arr[i]\
    \ > max_num then\n            max_num = arr[i]\n        end\n    end\n    max_arr\
    \ = max_arr or arr\n    return max_arr\nend", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end\n  -- Get the maximum element in the first k elements\n\
    \  local max_element = arr[1]\n  -- Get the maximum element in the remaining elements\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n\
    \    end\n  end\n  -- Return the maximum element in the first k elements\n  return\
    \ maximum(arr, k - 1)\nend", "  local result = {}\n  local max = 0\n  local index\
    \ = 0\n  local size = #arr\n  \n  for i = 1, size do\n    if arr[i] > max then\n\
    \      max = arr[i]\n      index = i\n    end\n  end\n  \n  for i = 1, k do\n\
    \    if arr[index] > max then\n      max = arr[index]\n    end\n    index = index\
    \ + 1\n  end\n  \n  for i = 1, size do\n    if arr[i] > max then\n      table.insert(result,\
    \ arr[i])\n    end\n  end\n  \n  return result\nend", "  if k == 0 then\n    return\
    \ arr\n  end", "  -- Base case\n  if k == 1 then\n    return arr\n  end", "  \
    \  if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if arr[i] > max_so_far then\n            max_so_far = arr[i]\n        end\n\
    \    end\n    return max_so_far, max_ending_here\nend", "    local results = {}\n\
    \    for i = 1, k do\n        local max = arr[1]\n        for j = 2, #arr do\n\
    \            if arr[j] > max then\n                max = arr[j]\n            end\n\
    \        end\n        results[i] = max\n    end\n    return results\nend", " \
    \ -- Base case\n  if k == 1 then\n    return arr\n  end", "    if k == 0 then\n\
    \        return arr\n    end\n    local max_arr = {}\n    local max_num = arr[1]\n\
    \    for i = 2, k do\n        if arr[i] > max_num then\n            max_num =\
    \ arr[i]\n        end\n    end\n    max_arr[1] = max_num\n    for i = 2, k do\n\
    \        if arr[i] > max_num then\n            max_arr[i] = arr[i]\n        end\n\
    \    end\n    return max_arr\nend", "    local max_arr = {}\n    local max_num\
    \ = 0\n    for i = 1, k do\n        max_num = max_num + arr[i]\n    end\n    for\
    \ i = 1, k do\n        if max_num > arr[i] then\n            max_num = arr[i]\n\
    \        end\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n   \
    \ end\n    return max_arr\nend", "  local max = 0\n  local result = {} -- The\
    \ result list\n  for i = 1, k do\n    local maxVal = arr[1]\n    for j = 2, #arr\
    \ do\n      if arr[j] > maxVal then\n        maxVal = arr[j]\n      end\n    end\n\
    \    table.insert(result, maxVal)\n  end\n  return result\nend", "    local max\
    \ = 0\n    local max_index = 0\n    for i = 1, k do\n        if arr[i] > max then\n\
    \            max = arr[i]\n            max_index = i\n        end\n    end\n \
    \   return max_index, max\nend", "    local maxArr = {} -- the result array\n\
    \    local maxNum = 0 -- The maximum number in the array\n    local i = 1\n  \
    \  while i <= k do\n        if arr[i] > maxNum then\n            maxNum = arr[i]\n\
    \        end\n        i = i + 1\n    end\n    \n    for i = 1, k do\n        maxArr[i]\
    \ = maxNum\n    end\n    return maxArr\nend", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end\n  \n  -- Get the maximum element in the first k elements\n\
    \  local max_element = arr[1]\n  for i = 2, k do\n    if arr[i] > max_element\
    \ then\n      max_element = arr[i]\n    end\n  end\n  \n  -- Sort the remaining\
    \ elements and return them\n  local sorted_arr = {}\n  for i = 2, k do\n    table.insert(sorted_arr,\
    \ arr[i])\n  end\n  table.sort(sorted_arr)\n  return sorted_arr\nend", "  if k\
    \ > #arr then return nil end\n  if k == 1 then return arr end\n  local max_so_far\
    \ = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, #arr do\n    if arr[i]\
    \ > max_ending_here then\n      max_ending_here = max_so_far\n      max_so_far\
    \ = arr[i]\n    end\n  end\n  return max_so_far, arr\nend", "  local max_arr =\
    \ {}\n  local max_num = 0\n  for i = 1, k do\n    max_num = math.max(max_num,\
    \ arr[i])\n  end\n  for i = 1, k do\n    max_arr[i] = max_num\n  end\n  return\
    \ max_arr\nend", "  -- Base case\n  if k == 1 then\n    return arr\n  end\n  --\
    \ Get the max number in the first k elements\n  local max_element = arr[1]\n \
    \ for i = 2, k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n\
    \    end\n  end\n  -- Sort the remaining elements and return them\n  return maximum(arr,\
    \ k - 1) + [max_element]\nend", "    local results = {}\n    for i = 1, k do\n\
    \        local max_val = -1000\n        for j = 1, #arr do\n            if arr[j]\
    \ > max_val then\n                max_val = arr[j]\n            end\n        end\n\
    \        results[i] = max_val\n    end\n    return results\nend", "    if k ==\
    \ 0 then\n        return arr\n    end\n    local max_arr = {}\n    local max_num\
    \ = arr[1]\n    for i = 2, k do\n        if arr[i] > max_num then\n          \
    \  max_num = arr[i]\n        end\n    end\n    for i = 2, k do\n        if arr[i]\
    \ > max_num then\n            max_arr[i] = arr[i]\n        end\n    end\n    return\
    \ max_arr\nend", "    local result = {}\n    local max = 0\n    for i = 1, k do\n\
    \        local element = arr[i]\n        if element > max then\n            max\
    \ = element\n        end\n    end\n    for i = 1, k do\n        local element\
    \ = arr[i]\n        if element == max then\n            result[i] = element\n\
    \        end\n    end\n    return result\nend", "    local max_arr = {}\n    local\
    \ max_num = 0\n    for i = 1, k do\n        max_num = max_num > arr[i] and max_num\
    \ or arr[i]\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n    end\n\
    \    return max_arr\nend", "    local max_arr = {}\n    local max_num = -math.inf\n\
    \    for i = 1, k do\n        local max_elem = arr[i]\n        for j = 1, k do\n\
    \            if arr[j] > max_elem then\n                max_elem = arr[j]\n  \
    \          end\n        end\n        max_arr[i] = max_elem\n        if max_num\
    \ < max_elem then\n            max_num = max_elem\n        end\n    end\n    return\
    \ max_arr\nend", "    local max = 0\n    local max_index = 0\n    for i = 1, k\
    \ do\n        if arr[i] > max then\n            max = arr[i]\n            max_index\
    \ = i\n        end\n    end\n    return max_index, max\nend", "  -- Base case\n\
    \  if k == 1 then\n    return arr\n  end", "  local result = {}\n  local max =\
    \ 0\n  local index = 0\n  for i = 1, k do\n    local element = arr[index]\n  \
    \  if element > max then\n      max = element\n      index = i\n    end\n  end\n\
    \  table.insert(result, max)\n  for i = k + 1, #arr do\n    local element = arr[index]\n\
    \    if element > max then\n      max = element\n      index = i\n    end\n  end\n\
    \  table.insert(result, max)\n  return result\nend", "  -- Base case\n  if k ==\
    \ 1 then\n    return arr\n  end", "  -- Base case\n  if k == 1 then\n    return\
    \ arr\n  end", "    local result = {}\n    local max = 0\n    for i = 1, k do\n\
    \        if arr[i] > max then\n            max = arr[i]\n        end\n    end\n\
    \    for i = 1, k do\n        if arr[i] > max then\n            result[i] = arr[i]\n\
    \        end\n    end\n    return result\nend", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end", "    local results = {}\n    for i = 1, k do\n      \
    \  local max = -1000\n        for j = 1, #arr do\n            if arr[j] > max\
    \ then\n                max = arr[j]\n            end\n        end\n        results[i]\
    \ = max\n    end\n    return results\nend", "    if k == 0 then\n        return\
    \ arr\n    end\n    local max_arr = {}\n    for i = 1, k do\n        max_arr[i]\
    \ = arr[i]\n    end\n    local max_idx = k - 1\n    for i = k, 1, -1 do\n    \
    \    if arr[i] > max_arr[max_idx] then\n            max_arr[max_idx] = arr[i]\n\
    \            max_idx = i\n        end\n    end\n    return max_arr\nend", "  \
    \  local max_arr = {}\n    local max_num = arr[1]\n    for i = 2, k do\n     \
    \   if arr[i] > max_num then\n            max_num = arr[i]\n        end\n    end\n\
    \    max_arr[1] = max_num\n    for i = 2, k do\n        if arr[i] > max_num then\n\
    \            max_arr[i] = arr[i]\n        end\n    end\n    return max_arr\nend",
  "    if k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n\
    \    local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] >\
    \ max_ending_here then\n            max_ending_here = arr[i]\n        end\n  \
    \      if arr[i] > max_so_far then\n            max_so_far = arr[i]\n        end\n\
    \    end\n    return max_so_far, max_ending_here\nend", "    local result = {}\n\
    \    local max = 0\n    for i = 1, k do\n        local cur = arr[i]\n        if\
    \ cur > max then\n            max = cur\n        end\n    end\n    for i = 1,\
    \ k do\n        table.insert(result, max)\n        max = max - 1\n    end\n  \
    \  return result\nend", "  -- Base case\n  if k == 0 then\n    return arr\n  end\n\
    \  -- Get the first k elements\n  local max_arr = arr:sub(1, k)\n  -- Get the\
    \ max element in the remaining array\n  local max_elem = max_arr[1]\n  -- Get\
    \ the remaining array\n  local rest_arr = arr:sub(k + 1)\n  -- Get the max element\
    \ in the remaining array\n  local rest_elem = rest_arr[1]\n  -- Get the max element\
    \ in the remaining array\n  local rest_max_arr = rest_arr:sub(1, k)\n  -- Get\
    \ the max element in the remaining array\n  local rest_max_elem = rest_max_arr[1]\n\
    \  -- Get the max element in the remaining array\n  local rest_rest_max_arr =\
    \ rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_max_elem = rest_rest_max_arr[1]\n  -- Get the max element in the remaining\
    \ array\n  local rest_rest_rest_max_arr = rest_arr:sub(k + 1)\n  -- Get the max\
    \ element in the remaining array\n  local rest_rest_rest_max_elem = rest_rest_rest_max_arr[1]\n\
    \  -- Get the max element in the remaining array\n  local rest_rest_rest_rest_max_arr\
    \ = rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_rest_rest_max_elem = rest_rest_rest_rest_max_arr[1]\n  -- Get the\
    \ max element in the remaining array\n  local rest_rest_rest_rest_rest_max_arr\
    \ = rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_rest_rest_max_elem = rest_rest_rest_rest_max_arr[1]\n  -- Get the\
    \ max element in the remaining array\n  local rest_rest_rest_rest_rest_max_arr\
    \ = rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_rest_rest_rest_max_elem = rest_rest_rest_rest_rest_max_arr[1]\n  --\
    \ Get the max element in the remaining array\n  local rest_rest_rest_rest_rest_rest_max_arr\
    \ = rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_rest_rest_rest_max_elem = rest_rest_rest_rest_rest_max_arr[1]\n  --\
    \ Get the max element in the remaining array\n  local rest_rest_rest_rest_rest_rest_max_arr\
    \ = rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_rest_rest_rest_rest_max_elem = rest_rest_rest_rest_rest_rest_max_arr[1]\n\
    \  -- Get the max element in the remaining array\n  local rest_rest_rest_rest_rest_rest_max_arr\
    \ = rest_arr:sub(k + 1)\n  -- Get the max element in the remaining array\n  local\
    \ rest_rest_rest_rest_", "    local max_arr = {}\n    local max_k = 0\n    local\
    \ max_num = 0\n    for i = 1, k do\n        max_num = max_num + arr[i]\n     \
    \   if max_num > max_arr[k] then\n            max_arr[k] = max_num\n        end\n\
    \    end\n    return max_arr\nend", "    if k == 0 then\n        return arr\n\
    \    end\n    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n\
    \    for i = 2, k do\n        if arr[i] > max_ending_here then\n            max_ending_here\
    \ = arr[i]\n        end\n        if max_ending_here > max_so_far then\n      \
    \      max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\n\
    end", "    local max = 0\n    local results = {}\n    for i = 1, k do\n      \
    \  local element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            results[i] = element\n        end\n\
    \    end\n    return results\nend", "    local results = {}\n    local max = 0\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > max\
    \ then\n            max = element\n        end\n    end\n    for i = 1, k do\n\
    \        local element = arr[i]\n        if element == max then\n            results[i]\
    \ = element\n        end\n    end\n    return results\nend", "    local max_arr\
    \ = {}\n    local max_num = nil\n    for i = 1, k do\n        max_num = arr[i]\n\
    \        for j = 1, k do\n            if arr[j] > max_num then\n             \
    \   max_num = arr[j]\n            end\n        end\n        table.insert(max_arr,\
    \ max_num)\n    end\n    return max_arr\nend", "  local result = {}\n  local max\
    \ = 0\n  local index = 0\n  for i = 1, k do\n    if arr[index] > max then\n  \
    \    max = arr[index]\n    end\n    index = index + 1\n  end\n  \n  for i = 1,\
    \ k do\n    if arr[index] > max then\n      max = arr[index]\n    end\n    index\
    \ = index + 1\n  end\n  \n  for i = 1, k do\n    table.insert(result, max)\n \
    \   index = index + 1\n  end\n  \n  return result\nend", "    local max_arr =\
    \ {}\n    local max_num = 0\n    for i = 1, k do\n        max_num = math.max(max_num,\
    \ arr[i])\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n    end\n\
    \    return max_arr\nend", "    if k == 0 then\n        return arr\n    end\n\
    \    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n    for i\
    \ = 2, k do\n        if arr[i] > max_ending_here then\n            max_ending_here\
    \ = arr[i]\n        end\n        if max_ending_here > max_so_far then\n      \
    \      max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\n\
    end", "  if k > #arr then return nil end\n  if k == 1 then return arr end\n  local\
    \ max_so_far = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_ending_here then\n      max_ending_here = arr[i]\n    end\n\
    \    if max_ending_here > max_so_far then\n      max_so_far = max_ending_here\n\
    \    end\n  end\n  return max_so_far\nend", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end", "  local max_arr = {}\n  local max_arr_len = 0\n  local\
    \ max_arr_i = 0\n  local max_arr_j = 0\n  local max_arr_k = 0\n  local max_arr_arr_i\
    \ = 0\n  local max_arr_arr_j = 0\n  local max_arr_arr_k = 0\n  local max_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_j = 0\n  local max_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_k = 0\n\
    \  local max_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_j = 0\n\
    \  local max_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_i = 0\n\
    \  local max_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_k = 0\n\
    \  local max_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_k = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_k\
    \ = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_i = 0\n  local max_arr_arr_arr_arr_arr_arr_arr_arr_j\
    \ = 0\n", "    local maxArr = {} -- the max array\n    local maxLen = -1 -- length\
    \ of max array\n    for i = 1, k do\n        local curMax = arr[1]\n        for\
    \ j = 2, #arr do\n            if arr[j] > curMax then\n                curMax\
    \ = arr[j]\n            end\n        end\n        maxArr[#maxArr + 1] = curMax\n\
    \    end\n    return maxArr\nend", "  -- Base case\n  if k == 1 then\n    return\
    \ arr\n  end", "    if k == 0 then\n        return arr\n    end\n    local max_so_far\
    \ = arr[1]\n    local max_ending_here = arr[1]\n    for i = 2, k do\n        if\
    \ arr[i] > max_ending_here then\n            max_ending_here = arr[i]\n      \
    \  end\n        if max_ending_here > max_so_far then\n            max_so_far =\
    \ max_ending_here\n        end\n    end\n    return max_so_far\nend", "    if\
    \ k == 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n  \
    \  local max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] > max_ending_here\
    \ then\n            max_ending_here = arr[i]\n        end\n        if max_ending_here\
    \ > max_so_far then\n            max_so_far = max_ending_here\n        end\n \
    \   end\n    return arr\nend", "  local maxArr = {} -- the result array\n  local\
    \ maxNum = arr[1]\n  for i = 2, k do\n    if arr[i] > maxNum then\n      maxNum\
    \ = arr[i]\n    end\n  end\n  maxArr[1] = maxNum\n  for i = 2, k do\n    maxArr[i]\
    \ = arr[i]\n  end\n  return maxArr\nend", "    local max_arr = {}\n    local max_count\
    \ = 0\n    for i = 1, k do\n        max_count = max_count + 1\n        if max_count\
    \ > #arr then\n            max_count = #arr\n        end\n        max_arr[i] =\
    \ arr[max_count]\n    end\n    return max_arr\nend", "    local results = {}\n\
    \    for i = 1, k do\n        local max_value = -1000\n        for j = 1, #arr\
    \ do\n            if arr[j] > max_value then\n                max_value = arr[j]\n\
    \            end\n        end\n        results[i] = max_value\n    end\n    return\
    \ results\nend", "    if k == 0 then\n        return arr\n    end\n    local max_so_far\
    \ = arr[1]\n    local max_ending_here = arr[1]\n    for i = 2, k do\n        if\
    \ arr[i] > max_ending_here then\n            max_ending_here = arr[i]\n      \
    \  end\n        if arr[i] > max_so_far then\n            max_so_far = arr[i]\n\
    \        end\n    end\n    return max_so_far, max_ending_here\nend", "  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end", "  -- Base case\n  if k == 1\
    \ then\n    return arr\n  end\n  \n  -- Get the maximum number in the first k\
    \ elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if arr[i] > max_element\
    \ then\n      max_element = arr[i]\n    end\n  end\n  \n  -- Sort the remaining\
    \ elements and return them\n  local sorted_arr = {}\n  for i = 2, k do\n    if\
    \ arr[i] > max_element then\n      table.insert(sorted_arr, arr[i])\n    end\n\
    \  end\n  return sorted_arr\nend", "    if k == 0 then\n        return arr\n \
    \   end\n    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n\
    \        if arr[i] > max_num then\n            max_num = arr[i]\n        end\n\
    \    end\n    max_arr[1] = max_num\n    for i = 2, k do\n        if arr[i] > max_num\
    \ then\n            max_arr[i] = arr[i]\n        end\n    end\n    return max_arr\n\
    end", "    if k == 0 then\n        return arr\n    end\n    local max_so_far =\
    \ arr[1]\n    local max_ending_here = arr[1]\n    for i = 2, k do\n        if\
    \ arr[i] > max_ending_here then\n            max_ending_here = arr[i]\n      \
    \  end\n        if max_ending_here > max_so_far then\n            max_so_far =\
    \ max_ending_here\n        end\n    end\n    return max_so_far\nend", "  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end", "    local max_arr = {}\n  \
    \  local max_count = 0\n    for i = 1, k do\n        max_count = max_count + 1\n\
    \        if max_count > #max_arr then\n            max_count = #max_arr\n    \
    \    end\n        max_arr[max_count] = arr[i]\n    end\n    return max_arr\nend",
  "  -- Base case\n  if k == 0 then\n    return arr\n  end", "    local maxArr = {}\
    \ -- the max array\n    local maxLen = k\n    for i = 1, k do\n        local maxNum\
    \ = arr[1]\n        for j = 2, #arr do\n            if arr[j] > maxNum then\n\
    \                maxNum = arr[j]\n            end\n        end\n        maxArr[i]\
    \ = maxNum\n    end\n    return maxArr\nend", "    local maxArray = {}\n    local\
    \ maxLength = 0\n    for i = 1, k do\n        local maxElement = arr[1]\n    \
    \    for j = 2, #arr do\n            if arr[j] > maxElement then\n           \
    \     maxElement = arr[j]\n            end\n        end\n        maxArray[i] =\
    \ maxElement\n        if maxLength < #maxArray then\n            maxLength = #maxArray\n\
    \        end\n    end\n    return maxArray\nend", "  local result = {}\n  local\
    \ max = 0\n  local pos = 1\n  local len = #arr\n  while pos < len do\n    if arr[pos]\
    \ > max then\n      max = arr[pos]\n    end\n    pos = pos + 1\n  end\n  \n  --\
    \ If k is less than or equal to zero, return an empty array\n  if k == 0 then\n\
    \    return result\n  end\n  \n  -- If k is greater than or equal to length of\
    \ array, return an empty array\n  if k > len then\n    return result\n  end\n\
    \  \n  -- If k is equal to length of array, return arr\n  if k == len then\n \
    \   for i = 1, len do\n      result[i] = arr[i]\n    end\n    return result\n\
    \  end\n  \n  -- If k is greater than length of array, then return arr\n  local\
    \ i = 1\n  while i <= k do\n    local max = 0\n    local pos = 1\n    local len\
    \ = #arr\n    while pos < len do\n      if arr[pos] > max then\n        max =\
    \ arr[pos]\n      end\n      pos = pos + 1\n    end\n    \n    if max > result[i\
    \ - 1] or i == 1 then\n      result[i - 1] = max\n    end\n    i = i + 1\n  end\n\
    \  \n  return result\nend", "    if k == 0 then\n        return arr\n    end\n\
    \    local max_num = arr[1]\n    local max_idx = 1\n    for idx = 2, k do\n  \
    \      if arr[idx] > max_num then\n            max_num = arr[idx]\n          \
    \  max_idx = idx\n        end\n    end\n    return arr[k - 1], arr[max_idx]\n\
    end", "  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Find the\
    \ max number in the first k elements\n  local max_element = arr[1]\n  for i =\
    \ 2, k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  -- Sort the remaining elements and return them\n  return arr:sub(1,\
    \ k - 1):sort(function(a, b) return a > b end)\nend", "  if k == 0 then\n    return\
    \ arr\n  else\n    local max_arr = {}\n    for i = 1, k do\n      local max_num\
    \ = -1000\n      for j = 1, #arr do\n        if arr[j] > max_num then\n      \
    \    max_num = arr[j]\n        end\n      end\n      table.insert(max_arr, max_num)\n\
    \    end\n    return max_arr\n  end\nend", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end", "  -- Write your code here.\n  local max = 0\n  local\
    \ max_index = 0\n  for i = 1, k do\n    if arr[i] > max then\n      max = arr[i]\n\
    \      max_index = i\n    end\n  end\n  local max_array = arr\n  max_array[max_index]\
    \ = max\n  return max_array\nend", "    local maxArr = {} -- the result array\n\
    \    local maxNum = arr[1]\n    for i = 2, k do\n        if arr[i] > maxNum then\n\
    \            maxNum = arr[i]\n        end\n    end\n    for i = 1, k do\n    \
    \    maxArr[i] = maxNum\n    end\n    return maxArr\nend", "  local max_arr =\
    \ {}\n  local max_num = 0\n  local max_idx = 0\n  for i = 1, k do\n    max_num\
    \ = arr[i]\n    max_idx = i\n  end\n  for i = k + 1, #arr do\n    if arr[i] >\
    \ max_num then\n      max_num = arr[i]\n      max_idx = i\n    end\n  end\n  table.insert(max_arr,\
    \ arr[max_idx])\n  return max_arr\nend", "  local maxArr = {} -- The result array\n\
    \  local maxNum = 0 -- The maximum number\n  local i = 1\n  while i <= k do\n\
    \    if arr[i] > maxNum then\n      maxNum = arr[i]\n    end\n    table.insert(maxArr,\
    \ maxNum)\n    i = i + 1\n  end\n  return maxArr\nend", "    local max_arr = {}\n\
    \    local max_num = 0\n    for i = 1, k do\n        max_num = max_num or arr[i]\n\
    \        max_arr[i] = max_num\n    end\n    for i = k + 1, #arr do\n        max_num\
    \ = max_num or arr[i]\n        max_arr[i] = max_num\n    end\n    return max_arr\n\
    end", "  -- Base case\n  if k == 1 then\n    return arr\n  end", "    if k ==\
    \ 0 then\n        return arr\n    end\n    local max_so_far = arr[1]\n    local\
    \ max_ending_here = arr[1]\n    for i = 2, k do\n        if arr[i] > max_ending_here\
    \ then\n            max_ending_here = arr[i]\n        end\n        if max_ending_here\
    \ > max_so_far then\n            max_so_far = max_ending_here\n        end\n \
    \   end\n    return max_so_far\nend", "    local max_arr = {}\n    local max_num\
    \ = 0\n    local max_index = 0\n    for i = 1, k do\n        max_num = max_num\
    \ + arr[i]\n        if max_num > arr[i] then\n            max_num = arr[i]\n \
    \           max_index = i\n        end\n    end\n    max_arr[max_index] = max_num\n\
    \    for i = k + 1, #arr do\n        max_num = max_num + arr[i]\n        if max_num\
    \ > arr[i] then\n            max_num = arr[i]\n            max_index = i\n   \
    \     end\n    end\n    max_arr[max_index] = max_num\n    return max_arr\nend",
  "    local maxArr = {} -- the max array\n    local maxLen = k\n    for i = 1, k\
    \ do\n        local maxNum = arr[1]\n        for j = 2, #arr do\n            if\
    \ arr[j] > maxNum then\n                maxNum = arr[j]\n            end\n   \
    \     end\n        maxArr[i] = maxNum\n    end\n    return maxArr\nend", "  --\
    \ Base case\n  if k == 1 then\n    return arr\n  end", "    local max_arr = {}\n\
    \    local max_num = 0\n    for i = 1, k do\n        max_num = max_num or arr[i]\n\
    \        max_arr[i] = max_num\n    end\n    for i = k + 1, #arr do\n        max_num\
    \ = max_num or arr[i]\n        max_arr[i] = max_num\n    end\n    return max_arr\n\
    end", "  -- Base case\n  if k == 1 then\n    return arr\n  end\n  -- Find the\
    \ max number in the first k elements\n  local max_element = arr[1]\n  for i =\
    \ 2, k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  -- Sort the remaining elements and return them\n  return arr:sub(1,\
    \ k - 1):sort(function(a, b) return a > b end)\nend", "    local result = {}\n\
    \    local max = 0\n    for i = 1, k do\n        local element = arr[i]\n    \
    \    if element > max then\n            max = element\n        end\n    end\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element == max\
    \ then\n            result[i] = element\n        end\n    end\n    return result\n\
    end", "    local maxArr = {} -- the result array\n    local maxNum = arr[1]\n\
    \    for i = 2, k do\n        if arr[i] > maxNum then\n            maxNum = arr[i]\n\
    \        end\n    end\n    for i = 1, k do\n        maxArr[i] = maxNum\n    end\n\
    \    return maxArr\nend", "  -- Base case\n  if k == 0 then\n    return arr\n\
    \  end\n  \n  -- Find the max number in the first k elements\n  local max_element\
    \ = arr[1]\n  for i = 2, k do\n    if arr[i] > max_element then\n      max_element\
    \ = arr[i]\n    end\n  end\n  \n  -- Find the max number in the remaining elements\n\
    \  local max_element_rest = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] >\
    \ max_element_rest then\n      max_element_rest = arr[i]\n    end\n  end\n  \n\
    \  -- Return the max number in the first k elements\n  return arr .. [max_element]\
    \ .. arr .. [max_element_rest]\nend", "    local max_arr = {}\n    local max_count\
    \ = 0\n    for i = 1, k do\n        max_count = max_count + 1\n        if max_count\
    \ == 1 then\n            max_arr[i] = arr[i]\n        else\n            if arr[i]\
    \ > max_arr[i] then\n                max_arr[i] = arr[i]\n            end\n  \
    \      end\n    end\n    return max_arr\nend", "    local result = {}\n    local\
    \ max = 0\n    for i = 1, k do\n        local element = arr[i]\n        if element\
    \ > max then\n            max = element\n        end\n    end\n    for i = 1,\
    \ k do\n        local element = arr[i]\n        if element == max then\n     \
    \       result[i] = element\n        end\n    end\n    return result\nend", " \
    \ local max = 0\n  local max_index = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n      max_index = i\n    end\n  end\n  return max_index,\
    \ max\nend", "  -- Base case\n  if k == 1 then\n    return arr\n  end", "    local\
    \ max_arr = {}\n    local max_num = -math.inf\n    for i = 1, k do\n        if\
    \ arr[i] > max_num then\n            max_num = arr[i]\n        end\n    end\n\
    \    for i = 1, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend", "    if k == 0 then\n\
    \        return arr\n    end\n    local max_so_far = arr[1]\n    local max_ending_here\
    \ = arr[1]\n    for i = 2, k do\n        if arr[i] > max_ending_here then\n  \
    \          max_ending_here = arr[i]\n        end\n        if max_ending_here >\
    \ max_so_far then\n            max_so_far = max_ending_here\n        end\n   \
    \ end\n    return max_so_far\nend", "    if k > #arr then return nil end\n   \
    \ local max = 0\n    local max_index = 0\n    for i = 1, k do\n        if arr[i]\
    \ > max then\n            max = arr[i]\n            max_index = i\n        end\n\
    \    end\n    return max_index, max\nend", "    local result = {}\n    local max\
    \ = 0\n    local i = 1\n    while i <= k do\n        if arr[i] > max then\n  \
    \          max = arr[i]\n        end\n        i = i + 1\n    end\n    for i =\
    \ 1, k do\n        if arr[i] > max then\n            result[i] = arr[i]\n    \
    \    end\n    end\n    return result\nend", "    local max_arr = {}\n    local\
    \ max_num = 0\n    for i = 1, k do\n        max_num = math.max(max_num, arr[i])\n\
    \    end\n    for i = 1, k do\n        max_arr[i] = max_num\n    end\n    return\
    \ max_arr\nend", "    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n\
    \    for i = 2, #arr do\n        if arr[i] > max_ending_here then\n          \
    \  max_ending_here = arr[i]\n        end\n        if max_ending_here > max_so_far\
    \ then\n            max_so_far = max_ending_here\n        end\n    end\n    return\
    \ max_so_far\nend", "    local result = {}\n    local max = 0\n    for i = 1,\
    \ k do\n        if arr[i] > max then\n            max = arr[i]\n        end\n\
    \    end\n    for i = 1, k do\n        if arr[i] > max then\n            result[i]\
    \ = arr[i]\n        end\n    end\n    for i = k + 1, #arr do\n        if arr[i]\
    \ > max then\n            result[i] = arr[i]\n        end\n    end\n    return\
    \ result\nend", "    local maxArr = {} -- the max array\n    local maxNum = 0\
    \ -- max number\n    local i = 1\n    while i <= k do\n        if arr[i] > maxNum\
    \ then\n            maxNum = arr[i]\n        end\n        table.insert(maxArr,\
    \ maxNum)\n        i = i + 1\n    end\n    return maxArr\nend", "    local max_arr\
    \ = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num = math.max(max_num,\
    \ arr[i])\n    end\n    for i = 1, k do\n        max_arr[i] = max_num\n    end\n\
    \    return max_arr\nend", "    local maxArr = {} -- the max array\n    local\
    \ maxLen = 0 -- length of max array\n    local maxNum = 0 -- max number\n    local\
    \ i = 1\n    while i <= k do\n        local curNum = arr[i]\n        if curNum\
    \ > maxNum then\n            maxNum = curNum\n            maxLen = i\n       \
    \ end\n        i = i + 1\n    end\n    for i = 1, k do\n        table.insert(maxArr,\
    \ arr[i])\n    end\n    return maxArr\nend", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end", "    local result = {}\n    local max = 0\n    local\
    \ index = 0\n    for i = 1, k do\n        if arr[i] > max then\n            max\
    \ = arr[i]\n            index = i\n        end\n    end\n    for i = 1, k do\n\
    \        if arr[i] > max then\n            result[i] = arr[i]\n        else\n\
    \            result[i] = max\n        end\n    end\n    return result\nend", " \
    \ local result = {}\n  local max = 0\n  local index = 0\n  for i = 1, k do\n \
    \   if arr[i] > max then\n      max = arr[i]\n      index = i\n    end\n  end\n\
    \  table.insert(result, max)\n  for i = k + 1, #arr do\n    if arr[i] > max then\n\
    \      max = arr[i]\n      index = i\n    end\n  end\n  table.insert(result, max)\n\
    \  return result\nend", "  -- Write your code here\n  local max = 0\n  local maxIndex\
    \ = 0\n  for i = 1, k do\n    if arr[i] > max then\n      max = arr[i]\n     \
    \ maxIndex = i\n    end\n  end\n  local sortedArray = {}\n  for i = 1, k do\n\
    \    sortedArray[i] = arr[maxIndex + i]\n  end\n  return sortedArray\nend", " \
    \   local max_arr = {}\n    local max_num = -math.inf\n    for i = 1, k do\n \
    \       if arr[i] > max_num then\n            max_num = arr[i]\n        end\n\
    \    end\n    for i = 1, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend", "    local result\
    \ = {}\n    for i = 1, k do\n        local max_element = arr[1]\n        for j\
    \ = 2, #arr do\n            if arr[j] > max_element then\n                max_element\
    \ = arr[j]\n            end\n        end\n        result[#result + 1] = max_element\n\
    \    end\n    return result\nend", "    local result = {}\n    for i = 1, k do\n\
    \        local max_element = arr[1]\n        for j = 2, #arr do\n            if\
    \ arr[j] > max_element then\n                max_element = arr[j]\n          \
    \  end\n        end\n        result[i] = max_element\n    end\n    return result\n\
    end", "    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n  \
    \      max_num = max_num + arr[i]\n    end\n    for i = 1, k do\n        if max_num\
    \ > arr[i] then\n            max_num = arr[i]\n        end\n    end\n    for i\
    \ = 1, k do\n        max_arr[i] = max_num\n    end\n    return max_arr\nend",
  "    local maxArr = {}\n    for i = 1, k do\n        maxArr[i] = arr[i]\n    end\n\
    \    for i = k + 1, #arr do\n        maxArr[i] = arr[i]\n    end\n    return maxArr\n\
    end", "    local max_arr = {}\n    local max_count = 0\n    for i = 1, k do\n\
    \        max_count = max_count + 1\n        if max_count > #max_arr then\n   \
    \         max_count = #max_arr\n        end\n        max_arr[i] = arr[i]\n   \
    \ end\n    for i = k + 1, #arr do\n        max_arr[i] = arr[i]\n    end\n    return\
    \ max_arr\nend", "  -- Base case\n  if k == 1 then\n    return arr\n  end\n  --\
    \ Get the maximum element in the first k elements\n  local max_element = arr[1]\n\
    \  -- Get the maximum element in the remaining elements\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  -- Return the maximum element in the first k elements\n  return arr[k] .. maximum(arr[k+1],\
    \ k-1)\nend", "  -- Base case\n  if k == 1 then\n    return arr\n  end\n  \n \
    \ -- Get the first k elements\n  local max_arr = arr:sub(1, k)\n  \n  -- Get the\
    \ rest of the array\n  local rest_arr = arr:sub(k + 1)\n  \n  -- Recursively find\
    \ the maximum among rest of array\n  local max_rest = maximum(arr, k - 1)\n  \n\
    \  -- Return the maximum among rest of array and max of current array\n  return\
    \ max_arr + max_rest\nend", "  if k == 0 then\n    return arr\n  else\n    local\
    \ max_arr = {}\n    local max_idx = 1\n    for i = 1, k do\n      if arr[i] >\
    \ arr[max_idx] then\n        max_idx = i\n      end\n    end\n    max_arr[max_idx]\
    \ = arr[max_idx]\n    return maximum(arr, k - 1)\n  end\nend", "    if k == 0\
    \ then\n        return arr\n    end\n    local max_arr = {}\n    local max_idx\
    \ = 1\n    for i = 1, k do\n        if arr[i] > arr[max_idx] then\n          \
    \  max_idx = i\n        end\n    end\n    max_arr[max_idx] = arr[max_idx]\n  \
    \  for i = k + 1, #arr do\n        if arr[i] > arr[max_idx] then\n           \
    \ max_idx = i\n        end\n    end\n    max_arr[max_idx] = arr[max_idx]\n   \
    \ return max_arr\nend", "    local max_arr = {}\n    local max_num = 0\n    for\
    \ i = 1, k do\n        max_num = math.max(max_num, arr[i])\n    end\n    for i\
    \ = 1, k do\n        table.insert(max_arr, max_num)\n    end\n    return max_arr\n\
    end", "    local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n  \
    \      max_num = max_num + arr[i]\n    end\n    for i = 1, k do\n        if max_num\
    \ > arr[i] then\n            max_num = arr[i]\n        end\n    end\n    max_arr\
    \ = max_arr + max_num\n    return max_arr\nend", "    local results = {}\n   \
    \ local max = 0\n    local i = 1\n    while i <= k do\n        if arr[i] > max\
    \ then\n            max = arr[i]\n        end\n        i = i + 1\n    end\n  \
    \  local j = 1\n    while j <= k do\n        if arr[j] > max then\n          \
    \  results[j] = arr[j]\n        end\n        j = j + 1\n    end\n    return results\n\
    end", "    local maxArr = {} -- the max array\n    local maxNum = 0 -- max number\n\
    \    for i = 1, k do\n        maxNum = arr[i]\n        for j = 1, k do\n     \
    \       if arr[j] > maxNum then\n                maxNum = arr[j]\n           \
    \ end\n        end\n        maxArr[i] = maxNum\n    end\n    return maxArr\nend",
  "    local result = {}\n    local maxNum = arr[1]\n    for i = 2, k do\n       \
    \ if arr[i] > maxNum then\n            maxNum = arr[i]\n        end\n    end\n\
    \    for i = 2, k do\n        result[i] = maxNum\n    end\n    return result\n\
    end", "    local maxArr = {} -- The result array\n    local maxLength = 0 -- The\
    \ length of the result array\n    local maxNum = 0 -- The maximum number in the\
    \ result array\n    local i = 1\n    \n    -- The first k elements are the maximum\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- The remaining\
    \ elements are the maximum\n    for i = k, #arr do\n        local element = arr[i]\n\
    \        if element > maxNum then\n            maxNum = element\n        end\n\
    \    end\n    \n    -- Add the first k elements to the result array\n    for i\
    \ = 1, k do\n        local element = arr[i]\n        if element > maxNum then\n\
    \            maxNum = element\n        end\n    end\n    \n    -- Add the remaining\
    \ elements to the result array\n    for i = k, #arr do\n        local element\
    \ = arr[i]\n        if element > maxNum then\n            maxNum = element\n \
    \       end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > maxNum then\n            maxNum = element\n\
    \        end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > maxNum then\n            maxNum = element\n\
    \        end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > maxNum then\n            maxNum = element\n\
    \        end\n    end\n    \n    -- Add the first k elements to the result array\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > maxNum\
    \ then\n            maxNum = element\n        end\n    end\n    \n    -- Add the\
    \ remaining elements to the result array\n    for i = k, #arr do\n        local\
    \ element = arr[i]\n        if element > ", "  local result = {}\n  local max\
    \ = 0\n  local i = 1\n  while i <= k do\n    if arr[i] > max then\n      max =\
    \ arr[i]\n    end\n    i = i + 1\n  end\n  local j = 1\n  while j <= k do\n  \
    \  if arr[j] > max then\n      max = arr[j]\n    end\n    j = j + 1\n  end\n \
    \ local i = 1\n  while i <= k do\n    if arr[i] < max then\n      result[i] =\
    \ arr[i]\n    end\n    i = i + 1\n  end\n  return result\nend", "    if k == 0\
    \ then\n        return arr\n    end\n    local max_arr = {}\n    local max_num\
    \ = arr[1]\n    for i = 2, k do\n        if arr[i] > max_num then\n          \
    \  max_num = arr[i]\n        end\n    end\n    for i = 2, k do\n        if arr[i]\
    \ > max_num then\n            max_arr[i] = arr[i]\n        end\n    end\n    return\
    \ max_arr\nend", "  local result = {}\n  local max = 0\n  local i = 1\n  while\
    \ i <= k do\n    if arr[i] > max then\n      max = arr[i]\n    end\n    i = i\
    \ + 1\n  end\n  local j = 1\n  while j <= k do\n    if arr[j] > max then\n   \
    \   max = arr[j]\n    end\n    j = j + 1\n  end\n  local i = 1\n  while i <= k\
    \ do\n    if arr[i] < max then\n      result[i] = arr[i]\n    end\n    i = i +\
    \ 1\n  end\n  return result\nend", "    local result = {}\n    local max = 0\n\
    \    for i = 1, k do\n        local element = arr[i]\n        if element > max\
    \ then\n            max = element\n        end\n    end\n    for i = 1, k do\n\
    \        local element = arr[i]\n        if element > max then\n            result[i]\
    \ = element\n        end\n    end\n    return result\nend", "    local max_arr\
    \ = {}\n    local max_num = 0\n    for i = 1, k do\n        max_num = max_num\
    \ + arr[i]\n    end\n    for i = 1, k do\n        if max_num > arr[i] then\n \
    \           max_num = max_num - arr[i]\n        else\n            max_arr[i] =\
    \ max_num\n            max_num = 0\n        end\n    end\n    return max_arr\n\
    end", "  -- Base case\n  if k == 1 then\n    return arr\n  end", "  -- base case\n\
    \  if k == 0 then\n    return arr\n  end\n  -- base case\n  if k == 1 then\n \
    \   return arr[1]\n  end\n  -- recursive case\n  local max_element = maximum(arr,\
    \ k - 1)\n  local max_index = -1\n  for i = 1, k do\n    if arr[i] > max_element\
    \ then\n      max_element = arr[i]\n      max_index = i\n    end\n  end\n  return\
    \ max_index, max_element\nend", "    local maxArr = {} -- the max array\n    local\
    \ maxLen = 0 -- length of max array\n    local maxNum = 0 -- max number in max\
    \ array\n    local i = 1\n    local j = 1\n    local k = 1\n    while i <= k do\n\
    \        if arr[i] > maxNum then\n            maxNum = arr[i]\n            maxArr\
    \ = {arr[i]}\n        else\n            j = i + 1\n            while j <= k do\n\
    \                if arr[j] > maxNum then\n                    maxNum = arr[j]\n\
    \                    maxArr = {arr[j]}\n                else\n               \
    \     j = j + 1\n                end\n            end\n        end\n        i\
    \ = i + 1\n    end\n    return maxArr\nend", "    local max_arr = {}\n    local\
    \ max_count = 0\n    for i = 1, k do\n        local max_val = -1000\n        for\
    \ j = 1, #arr do\n            if arr[j] > max_val then\n                max_val\
    \ = arr[j]\n            end\n        end\n        max_arr[i] = max_val\n     \
    \   if max_count < i then\n            max_count = i\n        end\n    end\n \
    \   return max_arr\nend", "    if k == 0 then\n        return arr\n    end\n \
    \   local max_arr = {}\n    local max_num = arr[1]\n    for i = 2, k do\n    \
    \    if arr[i] > max_num then\n            max_num = arr[i]\n        end\n   \
    \ end\n    for i = 1, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        else\n            max_arr[i] = max_num\n        end\n    end\n\
    \    return max_arr\nend", "    if k > #arr then return nil end\n    local max_so_far\
    \ = arr[1]\n    local max_ending_here = arr[1]\n    for i = 2, k do\n        if\
    \ arr[i] > max_ending_here then\n            max_ending_here = arr[i]\n      \
    \  end\n        if arr[i] > max_so_far then\n            max_so_far = arr[i]\n\
    \        end\n    end\n    return max_so_far, max_ending_here\nend", "  local\
    \ maxArray = {}\n  local maxLength = 0\n  local maxValue = 0\n  local i = 1\n\
    \  while i <= k do\n    if arr[i] > maxValue then\n      maxValue = arr[i]\n \
    \     maxLength = i\n    end\n    i = i + 1\n  end\n  maxArray = arr:sub(1, maxLength)\n\
    \  return maxArray\nend", "    if k == 0 then\n        return arr\n    end\n \
    \   local max_arr = {}\n    local max_num = 0\n    for i = 1, k do\n        if\
    \ arr[i] > max_num then\n            max_num = arr[i]\n        end\n    end\n\
    \    for i = 1, k do\n        if arr[i] > max_num then\n            max_arr[i]\
    \ = arr[i]\n        end\n    end\n    return max_arr\nend", "    local max_arr\
    \ = {}\n    local max_count = 0\n    for i = 1, k do\n        local max_element\
    \ = arr[1]\n        for j = 2, #arr do\n            if arr[j] > max_element then\n\
    \                max_element = arr[j]\n            end\n        end\n        max_arr[i]\
    \ = max_element\n        max_count = max_count + 1\n    end\n    return max_arr,\
    \ max_count\nend", "    if k == 0 then\n        return arr\n    end\n    local\
    \ max_so_far = arr[1]\n    local max_ending_here = arr[1]\n    for i = 2, k do\n\
    \        if arr[i] > max_ending_here then\n            max_ending_here = arr[i]\n\
    \        end\n        if arr[i] > max_so_far then\n            max_so_far = arr[i]\n\
    \        end\n    end\n    return max_so_far, max_ending_here\nend", "    local\
    \ maxArr = {} -- the result array\n    local maxNum = 0 -- stores the maximum\
    \ number in arr\n    local i = 1\n    while i <= k do\n        if arr[i] > maxNum\
    \ then\n            maxNum = arr[i]\n        end\n        i = i + 1\n    end\n\
    \    maxArr = maxArr + maxNum\n    return maxArr\nend", "    if k == 0 then\n\
    \        return arr\n    end\n    local max_so_far = arr[1]\n    local max_ending_here\
    \ = arr[1]\n    for i = 2, k do\n        if arr[i] > max_ending_here then\n  \
    \          max_ending_here = arr[i]\n        end\n        if max_ending_here >\
    \ max_so_far then\n            max_so_far = max_ending_here\n        end\n   \
    \ end\n    return max_so_far\nend", "  -- Write your code here.\n  local max_arr\
    \ = {}\n  local max_num = 0\n  for i = 1, k do\n    max_num = max_num + arr[i]\n\
    \  end\n  for i = 1, k do\n    if arr[i] > max_num then\n      max_num = arr[i]\n\
    \    end\n  end\n  for i = 1, k do\n    max_arr[i] = max_num\n  end\n  return\
    \ max_arr\nend", "    if k > #arr then return nil end\n    local max_so_far =\
    \ arr[1]\n    local max_ending_here = arr[1]\n    for i = 2, k do\n        if\
    \ arr[i] > max_ending_here then\n            max_ending_here = arr[i]\n      \
    \  end\n        if max_ending_here > max_so_far then\n            max_so_far =\
    \ max_ending_here\n        end\n    end\n    return max_so_far\nend", "  local\
    \ result = {}\n  local max = 0\n  local pos = 1\n  local len = #arr\n  while pos\
    \ < len do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n    pos\
    \ = pos + 1\n  end\n  \n  while k >= 1 do\n    local pos = 1\n    local len =\
    \ #result\n    while pos < len do\n      if result[pos] > max then\n        max\
    \ = result[pos]\n      end\n      pos = pos + 1\n    end\n    \n    local pos\
    \ = 1\n    local len = #result\n    while pos < len do\n      result[pos] = arr[pos]\n\
    \      pos = pos + 1\n    end\n    \n    local pos = 1\n    local len = #result\n\
    \    while pos < len do\n      arr[pos] = max\n      pos = pos + 1\n    end\n\
    \    \n    k = k - 1\n  end\n  \n  return result\nend", "    local max_arr = {}\n\
    \    local max_num = 0\n    for i = 1, k do\n        max_num = max_num or arr[i]\n\
    \        if arr[i] > max_num then\n            max_num = arr[i]\n        end\n\
    \    end\n    for i = 1, k do\n        max_arr[i] = max_num\n    end\n    return\
    \ max_arr\nend", "    local max_arr = {}\n    local max_num = 0\n    for i = 1,\
    \ k do\n        max_num = math.max(max_num, arr[i])\n    end\n    for i = 1, k\
    \ do\n        max_arr[i] = max_num\n    end\n    return max_arr\nend", "  local\
    \ max_arr = {}\n  local max_num = 0\n  for i = 1, k do\n    max_num = max_num\
    \ or arr[i]\n    max_arr[i] = max_num\n  end\n  for i = k + 1, #arr do\n    max_num\
    \ = max_num or arr[i]\n    if max_num > max_arr[i] then\n      max_arr[i] = max_num\n\
    \    end\n  end\n  return max_arr\nend", "    local max_arr = {}\n    local max_num\
    \ = 0\n    for i = 1, k do\n        max_num = math.max(max_num, arr[i])\n    end\n\
    \    for i = 1, k do\n        max_arr[i] = max_num\n    end\n    return max_arr\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, k do\n       \
    \ local element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            result[#result + 1] = element\n  \
    \      end\n    end\n    return result\nend", "  -- base case\n  if k == 1 then\n\
    \    return arr\n  end\n  \n  -- recursive case\n  local max_arr = {}\n  local\
    \ max_idx = nil\n  for i = 1, k do\n    local max_val = -math.inf\n    for j =\
    \ 1, #arr do\n      if arr[j] > max_val then\n        max_val = arr[j]\n     \
    \ end\n    end\n    max_arr[i] = max_val\n  end\n  \n  return maximum(max_arr,\
    \ k-1)\nend", "  -- base case\n  if k == 1 then\n    return arr\n  end\n  -- recursive\
    \ case\n  local max_so_far = arr[1]\n  local max_ending_here = arr[1]\n  for i\
    \ = 2, #arr do\n    if arr[i] > max_ending_here then\n      max_ending_here =\
    \ arr[i]\n    end\n    if max_ending_here > max_so_far then\n      max_so_far\
    \ = max_ending_here\n    end\n  end\n  return maximum(arr, k - 1) + [max_so_far]\n\
    end", "  -- Base case\n  if k == 0 then\n    return arr\n  end", "  local max_so_far\
    \ = nil\n  local max_ending_here = nil\n  for i = 1, k do\n    if max_ending_here\
    \ == nil then\n      max_ending_here = arr[i]\n    else\n      if max_ending_here\
    \ > arr[i] then\n        max_ending_here = arr[i]\n      end\n    end\n    if\
    \ max_so_far == nil then\n      max_so_far = max_ending_here\n    else\n     \
    \ if max_so_far > max_ending_here then\n        max_so_far = max_ending_here\n\
    \      end\n    end\n  end\n  return max_so_far\nend", "  -- Base case\n  if k\
    \ == 0 then\n    return arr\n  end", "    local maxArr = {} -- the result array\n\
    \    local maxLen = k -- length of the result array\n    local curMax = arr[1]\n\
    \    for i = 2, k do\n        if arr[i] > curMax then\n            curMax = arr[i]\n\
    \        end\n    end\n    maxArr[1] = curMax\n    for i = 2, k do\n        if\
    \ arr[i] > curMax then\n            table.insert(maxArr, arr[i])\n        end\n\
    \    end\n    return maxArr\nend", "  local maxArr = {} -- the max array\n  local\
    \ maxLen = 0 -- length of max array\n  local i = 1\n  while i <= k do\n    local\
    \ curMax = arr[i]\n    for j = i + 1, k do\n      if arr[j] > curMax then\n  \
    \      curMax = arr[j]\n      end\n    end\n    maxArr[i] = curMax\n    maxLen\
    \ = i\n    i = i + 1\n  end\n  return maxArr\nend", "  -- Base case\n  if k ==\
    \ 1 then\n    return arr\n  end", "    if k == 0 then\n        return arr\n  \
    \  end\n    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n  \
    \  for i = 2, k do\n        if arr[i] > max_ending_here then\n            max_ending_here\
    \ = arr[i]\n        end\n        if max_ending_here > max_so_far then\n      \
    \      max_so_far = max_ending_here\n        end\n    end\n    return arr\nend",
  "    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n    for i =\
    \ 2, k do\n        if arr[i] > max_ending_here then\n            max_ending_here\
    \ = arr[i]\n        else\n            max_so_far = max_ending_here\n         \
    \   max_ending_here = arr[i]\n        end\n    end\n    return max_so_far, max_ending_here\n\
    end", "    local max = 0\n    local results = {}\n    for i = 1, k do\n      \
    \  local element = arr[i]\n        if element > max then\n            max = element\n\
    \        end\n    end\n    for i = 1, k do\n        local element = arr[i]\n \
    \       if element == max then\n            results[i] = element\n        end\n\
    \    end\n    return results\nend", "    local result = {}\n    local max = 0\n\
    \    for i = 1, k do\n        if arr[i] > max then\n            max = arr[i]\n\
    \        end\n    end\n    for i = 1, k do\n        if arr[i] > max then\n   \
    \         result[i] = arr[i]\n        end\n    end\n    for i = k + 1, #arr do\n\
    \        if arr[i] > max then\n            result[i] = arr[i]\n        end\n \
    \   end\n    return result\nend", "  if k > #arr then return nil end\n  local\
    \ max_so_far = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_ending_here then\n      max_ending_here = arr[i]\n    end\n\
    \    if max_ending_here > max_so_far then\n      max_so_far = max_ending_here\n\
    \    end\n  end\n  return max_so_far\nend", "    local maxArr = {} -- the max\
    \ array\n    local maxIndex = 0 -- index of max element\n    local maxValue =\
    \ arr[1]\n    for i = 2, k do\n        if arr[i] > maxValue then\n           \
    \ maxValue = arr[i]\n            maxIndex = i\n        end\n    end\n    for i\
    \ = 1, k do\n        maxArr[i] = arr[maxIndex + 1]\n    end\n    return maxArr\n\
    end", "    local results = {}\n    local max = 0\n    local index = 0\n    local\
    \ length = #arr\n    while index < length do\n        if arr[index] > max then\n\
    \            max = arr[index]\n        end\n        index = index + 1\n    end\n\
    \    local i = 0\n    while i < k do\n        if arr[i] > max then\n         \
    \   results[i] = arr[i]\n        end\n        i = i + 1\n    end\n    return results\n\
    end", "  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n\
    \  \n  local j = 1\n  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n\
    \    end\n    j = j + 1\n  end\n  \n  local i = 1\n  while i <= k do\n    if arr[i]\
    \ < max then\n      table.insert(result, max)\n    end\n    i = i + 1\n  end\n\
    \  \n  return result\nend", "  local result = {}\n  local max = 0\n  local i =\
    \ 1\n  while i <= k do\n    local element = arr[i]\n    if element > max then\n\
    \      max = element\n    end\n    i = i + 1\n  end\n  local j = 1\n  while j\
    \ <= k do\n    local element = arr[j]\n    if element > max then\n      max =\
    \ element\n    end\n    j = j + 1\n  end\n  local i = 1\n  while i <= k do\n \
    \   local element = arr[i]\n    if element > max then\n      max = element\n \
    \   end\n    i = i + 1\n  end\n  while j <= k do\n    local element = arr[j]\n\
    \    if element > max then\n      max = element\n    end\n    j = j + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while j <= k do\n    local\
    \ element = arr[j]\n    if element > max then\n      max = element\n    end\n\
    \    j = j + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while j <=\
    \ k do\n    local element = arr[j]\n    if element > max then\n      max = element\n\
    \    end\n    j = j + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while j <= k do\n    local element = arr[j]\n    if element > max then\n  \
    \    max = element\n    end\n    j = j + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while j <= k do\n    local element = arr[j]\n    if element\
    \ > max then\n      max = element\n    end\n    j = j + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while j <= k do\n    local element = arr[j]\n\
    \    if element > max then\n      max = element\n    end\n    j = j + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while j <= k do\n    local\
    \ element = arr[j]\n    if element > max then\n      max = element\n", "  local\
    \ result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if arr[i]\
    \ > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local j = 1\n\
    \  while j <= k do\n    if arr[j] > max then\n      max = arr[j]\n    end\n  \
    \  j = j + 1\n  end\n  local i = 1\n  while i <= k do\n    if arr[i] < max then\n\
    \      table.insert(result, max)\n    end\n    i = i + 1\n  end\n  return result\n\
    end", "    local max_so_far = nil\n    local max_ending_here = nil\n    local\
    \ i = 1\n    while i <= k do\n        if max_ending_here == nil then\n       \
    \     max_ending_here = arr[i]\n        else\n            if arr[i] > max_ending_here\
    \ then\n                max_ending_here = arr[i]\n            end\n        end\n\
    \        i = i + 1\n    end\n    if max_ending_here ~= nil then\n        max_so_far\
    \ = max_ending_here\n    end\n    return max_so_far\nend", "    if k == 0 then\n\
    \        return arr\n    end\n    local max_so_far = arr[1]\n    local max_ending_here\
    \ = arr[1]\n    for i = 2, k do\n        if arr[i] > max_ending_here then\n  \
    \          max_ending_here = arr[i]\n        end\n        if max_ending_here >\
    \ max_so_far then\n            max_so_far = max_ending_here\n        end\n   \
    \ end\n    return max_so_far\nend", "  if k > #arr then\n    return nil\n  end\n\
    \  local max_so_far = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, k\
    \ do\n    if arr[i] > max_ending_here then\n      max_ending_here = arr[i]\n \
    \   end\n    if max_ending_here > max_so_far then\n      max_so_far = max_ending_here\n\
    \    end\n  end\n  return max_so_far\nend", "    if k > #arr then\n        return\
    \ nil\n    end\n    local max_so_far = arr[1]\n    local max_ending_here = arr[1]\n\
    \    for i = 2, k do\n        if arr[i] > max_ending_here then\n            max_ending_here\
    \ = arr[i]\n        end\n        if arr[i] > max_so_far then\n            max_so_far\
    \ = arr[i]\n        end\n    end\n    return max_so_far\nend", "  -- Write your\
    \ code here.\n  local max_arr = {}\n  local max_num = nil\n  for i = 1, k do\n\
    \    max_num = arr[i]\n    for j = 1, k do\n      if arr[j] > max_num then\n \
    \       max_num = arr[j]\n      end\n    end\n    max_arr[i] = max_num\n  end\n\
    \  return max_arr\nend", "    local max_arr = {}\n    local max_num = nil\n  \
    \  for i = 1, k do\n        max_num = -1000\n        for j = 1, k do\n       \
    \     if arr[j] > max_num then\n                max_num = arr[j]\n           \
    \ end\n        end\n        max_arr[i] = max_num\n    end\n    return max_arr\n\
    end", "    local result = {}\n    local max = 0\n    for i = 1, k do\n       \
    \ if arr[i] > max then\n            max = arr[i]\n        end\n    end\n    for\
    \ i = 1, k do\n        if arr[i] > max then\n            result[i] = max\n   \
    \     else\n            result[i] = arr[i]\n        end\n    end\n    return result\n\
    end", "  -- Base case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the\
    \ max element in the first k elements\n  local max_element = arr[1]\n  for i =\
    \ 2, k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n    end\n\
    \  end\n  \n  -- Sort the remaining elements\n  local sorted_array = arr\n  for\
    \ i = 2, k do\n    table.insert(sorted_array, arr[i])\n  end\n  \n  return sorted_array\n\
    end", "  local max_arr = {}\n  local max_num = 0\n  for i = 1, k do\n    max_num\
    \ = math.max(max_num, arr[i])\n  end\n  for i = 1, k do\n    if arr[i] > max_num\
    \ then\n      max_num = arr[i]\n    end\n  end\n  for i = 1, k do\n    max_arr[i]\
    \ = max_num\n  end\n  return max_arr\nend", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end\n  -- Get the max element in the first k elements\n  local\
    \ max_element = arr[1]\n  -- Get the max element in the remaining elements\n \
    \ for i = 2, k do\n    if arr[i] > max_element then\n      max_element = arr[i]\n\
    \    end\n  end\n  -- Return the max element in the first k elements\n  return\
    \ arr[k]:max(max_element)\nend", "    local max_arr = {}\n    local max_num =\
    \ arr[1]\n    for i = 2, k do\n        if arr[i] > max_num then\n            max_num\
    \ = arr[i]\n        end\n    end\n    for i = 1, k do\n        if arr[i] > max_num\
    \ then\n            max_arr[i] = arr[i]\n        end\n    end\n    return max_arr\n\
    end", "    local maxArr = {} -- the result array\n    local maxNum = 0 -- stores\
    \ the maximum number in the array\n    local i = 1\n    while i <= k do\n    \
    \    if arr[i] > maxNum then\n            maxNum = arr[i]\n        end\n     \
    \   i = i + 1\n    end\n    maxArr = maxArr + maxNum\n    return maxArr\nend",
  "    local results = {}\n    local max = 0\n    local index = 0\n    for i = 1,\
    \ k do\n        if arr[i] > max then\n            max = arr[i]\n            index\
    \ = i\n        end\n    end\n    table.insert(results, max)\n    for i = k + 1,\
    \ #arr do\n        if arr[i] > max then\n            max = arr[i]\n          \
    \  index = i\n        end\n    end\n    table.insert(results, arr[index])\n  \
    \  return results\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
