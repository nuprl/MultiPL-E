name: HumanEval_92_any_int
language: lua
prompt: "-- Create a function that takes 3 numbers.\n-- Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  -- Returns false in any other cases.\n-- Examples\nlocal function any_int(x, y,\
  \ z)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
  \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
  \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
  \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
  \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
  \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if x ~= nil and y ~= nil and z ~= nil then\n    return x == y and\
    \ type(z) == 'number' and z == math.floor(x) + math.floor(y)\n  else\n    return\
    \ false\n  end\nend", "   if type(y) == 'number' and type(z) == 'number' then\n\
    \      return math.abs(x - y) + math.abs(z - y) == math.abs(x + z + y)\n   else\n\
    \      return false\n   end\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y or x == z\n  elseif type(y) == 'number' then\n    return\
    \ x == y\n  elseif type(z) == 'number' then\n    return x == z\n  else\n    return\
    \ false\n  end\nend", "   if type(y) == 'number' and type(z) == 'number' then\n\
    \      return ((x == y) or (x == z) or (y == z))\n   else\n      return false\n\
    \   end\nend", "  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n\
    \        return (x == y and y == z and type(z) == 'number')\n      else\n    \
    \    return (x == y and y == z and type(z) == 'number')\n      end\n    else\n\
    \      return (x == y and y == z and type(z) == 'number')\n    end\n  else\n \
    \   if y ~= nil then\n      if z ~= nil then\n        return (y == z and type(z)\
    \ == 'number')\n      else\n        return (y == z and type(z) == 'number')\n\
    \      end\n    else\n      return (y == z and type(z) == 'number')\n    end\n\
    \  end\nend", "  if type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y or x == z\n  elseif type(y) == 'table' then\n    for _, v in pairs(y)\
    \ do\n      if any_int(x, y, z) then\n        return true\n      end\n    end\n\
    \  elseif type(y) == 'string' then\n    return x == y\n  else\n    return false\n\
    \  end\nend", "  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n\
    \        return (x == y and y == z and type(z) == 'integer')\n      else\n   \
    \     return (x == y and y == z and type(z) == 'integer')\n      end\n    else\n\
    \      return (x == y and y == z and type(z) == 'integer')\n    end\n  else\n\
    \    if y ~= nil then\n      if z ~= nil then\n        return (y == z and type(z)\
    \ == 'integer')\n      else\n        return (y == z and type(z) == 'integer')\n\
    \      end\n    else\n      return (y == z and type(z) == 'integer')\n    end\n\
    \  end\nend", "  return x == y or x == z or y == z\nend", "   if type(x) == \"\
    number\" and type(y) == \"number\" and type(z) == \"number\" then\n      return\
    \ x == y + z\n   else\n      return false\n   end\nend", "  if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n    return x == y + z\n\
    \  else\n    return false\n  end\nend", "  if type(y) == 'number' and type(z)\
    \ == 'number' then\n    return x == y or x == z\n  else\n    return false\n  end\n\
    end", "  if type(y) == 'number' and type(z) == 'number' then\n    return x ==\
    \ y or x == z\n  else\n    return false\n  end\nend", "    if x == y and y ==\
    \ z and x == z then\n        return true\n    end\n    return false\nend", " \
    \ if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\"\
    \ then\n    return x == y + z\n  else\n    return false\n  end\nend", "  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return x == y + z\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y + z\n  elseif type(y) == 'number'\
    \ then\n    return x == y\n  elseif type(z) == 'number' then\n    return x ==\
    \ z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "  if type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y + z\n  else\n    return false\n  end\n\
    end", "    if type(y) == 'number' and type(z) == 'number' then\n        return\
    \ math.abs(x - y) + math.abs(z - y) == math.abs(x + z + y)\n    end\n    return\
    \ false\nend", "  if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y + z\n  else\n    return false\n  end\n\
    end", "  if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"\
    number\" then\n    return x == y + z\n  else\n    return false\n  end\nend", " \
    \ if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n        return\
    \ x or y or z\n      else\n        return true\n      end\n    else\n      return\
    \ true\n    end\n  else\n    return false\n  end\nend", "  if x == y or x == z\
    \ or y == z then\n    return true\n  else\n    return false\n  end\nend", "  if\
    \ x ~= nil and y ~= nil and z ~= nil then\n    if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n      return x == y + z\n    end\n\
    \  end\n  return false\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y or x == z\n  else\n    return false\n  end\nend", " \
    \ if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\"\
    \ then\n    return x == y + z\n  else\n    return false\n  end\nend", "  return\
    \ type(y) == 'number' and type(z) == 'number' and type(y) == type(z) and math.floor(x)\
    \ == math.floor(y) and math.floor(x) == math.floor(z)\nend", "  if x == y then\n\
    \    return true\n  elseif x == z then\n    return true\n  elseif y == z then\n\
    \    return true\n  else\n    return false\n  end\nend", "  if x == y or x ==\
    \ z or y == z then\n    return true\n  end\n  return false\nend", "  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y + z\n  else\n    return false\n  end\nend", "  if x == y or x == z or\
    \ y == z then return true end\n  return false\nend", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "    if type(y) == 'number' and\
    \ type(z) == 'number' then\n        return x == y or x == z\n    end\n    return\
    \ false\nend", "  if type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y or x == z\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y + z\n  elseif type(y) == 'number'\
    \ then\n    return x == y\n  elseif type(z) == 'number' then\n    return x ==\
    \ z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y or x == z\n  elseif type(y) == 'number' and type(z)\
    \ == 'table' then\n    return x == y\n  elseif type(x) == 'number' and type(z)\
    \ == 'table' then\n    return x == z\n  elseif type(x) == 'table' and type(y)\
    \ == 'table' then\n    return x == y\n  else\n    return false\n  end\nend", " \
    \ if x == y or x == z or y == z then\n    return true\n  end\n  return false\n\
    end", "  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n    \
    \    return (x == y and y == z and type(z) == 'number')\n      else\n        return\
    \ (x == y and y == z and type(z) == 'table')\n      end\n    else\n      return\
    \ (x == y and type(y) == 'number')\n    end\n  else\n    if y ~= nil then\n  \
    \    return (y == z and type(z) == 'number')\n    else\n      return (type(y)\
    \ == 'table')\n    end\n  end\nend", "  return type(y) == 'number' and type(z)\
    \ == 'number' and type(y) == type(z) and math.floor(x) == math.floor(y) and math.floor(x)\
    \ == math.floor(z)\nend", "  if type(y) == 'number' and type(z) == 'number' then\n\
    \    return x == y or x == z or y == z\n  else\n    return false\n  end\nend",
  "  if type(y) == 'number' and type(z) == 'number' then\n    return x == y or x ==\
    \ z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "  return ((type(y) == 'number' and type(z) ==\
    \ 'number') and\n          math.floor(x) == math.floor(y) and math.floor(x) ==\
    \ math.floor(z)) or\n         (type(y) == 'table' and type(z) == 'table') or\n\
    \         (type(y) == 'string' and type(z) == 'string') or\n         (type(x)\
    \ == 'table' and type(z) == 'table') or\n         (type(x) == 'string' and type(z)\
    \ == 'string') or\n         (type(x) == 'number' and type(y) == 'number' and type(z)\
    \ == 'number'))\nend", "  if type(y) == 'number' and type(z) == 'number' then\n\
    \    return x == y or x == z\n  else\n    return false\n  end\nend", "  if x ==\
    \ y and y == z then\n    return true\n  elseif x ~= y or y ~= z then\n    return\
    \ false\n  else\n    return true\n  end\nend", "  if type(y) == 'number' and type(z)\
    \ == 'number' then\n    return x == y or x == z\n  else\n    return false\n  end\n\
    end", "   if type(y) == 'number' and type(z) == 'number' then\n      return math.abs(x\
    \ - y) + math.abs(z - y) == math.abs(x + z + y)\n   else\n      return false\n\
    \   end\nend", "   if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n      return ((x == y) or (x == z) or (y == z)) and ((x\
    \ % 1 == 0) and (y % 1 == 0) and (z % 1 == 0))\n   else\n      return false\n\
    \   end\nend", "  if type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y or x == z\n  else\n    return false\n  end\nend", "  return x ~= nil\
    \ and y ~= nil and z ~= nil and x == y and tonumber(x) == y and tonumber(z) ==\
    \ z\nend", "  if type(x) == 'number' and type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y + z\n  else\n    return false\n  end\nend", "   if type(y)\
    \ == 'number' and type(z) == 'number' then\n      return ((x + y) == z) or ((x\
    \ + y) == z + z)\n   else\n      return false\n   end\nend", "  if type(x) ==\
    \ 'number' and type(y) == 'number' and type(z) == 'number' then\n    return x\
    \ == y + z\n  else\n    return false\n  end\nend", "  if type(y) == 'number' and\
    \ type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y) == 'number'\
    \ then\n    return x == y\n  elseif type(z) == 'number' then\n    return x ==\
    \ z\n  else\n    return false\n  end\nend", "  if type(y) == 'number' and type(z)\
    \ == 'number' then\n    return x == y or x == z\n  elseif type(y) == 'table' and\
    \ type(z) == 'table' then\n    for _, v in pairs(y) do\n      if any_int(x, y,\
    \ v) then\n        return true\n      end\n    end\n    for _, v in pairs(z) do\n\
    \      if any_int(x, y, v) then\n        return true\n      end\n    end\n   \
    \ return false\n  else\n    return false\n  end\nend", "  if x == y or x == z\
    \ or y == z then\n    return true\n  end\n  return false\nend", "  return x ~=\
    \ nil and y ~= nil and z ~= nil and x == y and tonumber(x) == tonumber(y) and\
    \ tonumber(x) == tonumber(z)\nend", "  return type(y) == 'number' and type(z)\
    \ == 'number' and type(y) == type(z) and math.floor(x) == math.floor(y) and math.floor(x)\
    \ == math.floor(z)\nend", "  return x == y or x == z or y == z\nend", "  if x\
    \ == y then\n    return z == x\n  elseif x == z then\n    return y == z\n  else\n\
    \    return false\n  end\nend", "  if x == y or x == z or y == z then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if x == y or x == z or y ==\
    \ z then\n    return true\n  else\n    return false\n  end\nend", "  if type(y)\
    \ == 'number' and type(z) == 'number' then\n    return x == y + z\n  elseif type(y)\
    \ == 'number' then\n    return x == y\n  elseif type(z) == 'number' then\n   \
    \ return x == z\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y)\
    \ == 'number' then\n    return x == y\n  elseif type(z) == 'number' then\n   \
    \ return x == z\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y)\
    \ == 'table' then\n    for _, v in pairs(y) do\n      if any_int(x, y, z) then\n\
    \        return true\n      end\n    end\n    return false\n  else\n    return\
    \ false\n  end\nend", "  if x == y then\n    return z == x\n  elseif x == z then\n\
    \    return y == z\n  elseif y == z then\n    return x == y\n  else\n    return\
    \ false\n  end\nend", "    if type(y) == 'number' and type(z) == 'number' then\n\
    \        return math.abs(x - y) + math.abs(z - y) == math.abs(x + z + y)\n   \
    \ end\n    return false\nend", "  if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if type(x) == 'number' and type(y) == 'number' and type(z) ==\
    \ 'number' then\n    return x == y + z\n  else\n    return false\n  end\nend",
  "  if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\"\
    \ then\n    return x == y + z\n  else\n    return false\n  end\nend", "  if x\
    \ ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n        return ((x\
    \ or 0) + (y or 0) + (z or 0)) == ((x or 0) + (y or 0) + (z or 0))\n      else\n\
    \        return true\n      end\n    else\n      return true\n    end\n  else\n\
    \    return false\n  end\nend", "  if type(x) == \"number\" and type(y) == \"\
    number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n    return\
    \ false\n  end\nend", "  return x == y or x == z or y == z\nend", "  if x ~= nil\
    \ and y ~= nil and z ~= nil then\n    if type(x) == \"number\" and type(y) ==\
    \ \"number\" and type(z) == \"number\" then\n      return x == y + z\n    end\n\
    \  end\n  return false\nend", "  if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  return type(y) == 'number' and type(z) == 'number' and type(y)\
    \ == type(z) and math.floor(y) == math.floor(z) and math.ceil(y) == math.ceil(z)\
    \ and y == z + math.floor(y) or false\nend", "  return x == y or x == z or y ==\
    \ z\nend", "  if type(x) == \"number\" and type(y) == \"number\" and type(z) ==\
    \ \"number\" then\n    return x == y + z\n  else\n    return false\n  end\nend",
  "    if type(y) == 'number' and type(z) == 'number' then\n        return math.abs(x\
    \ - y) + math.abs(z - y) == math.abs(x + y + z)\n    end\n    return false\nend",
  "  if type(y) == 'number' and type(z) == 'number' then\n    return x == y or x ==\
    \ z\n  else\n    return false\n  end\nend", "  if type(x) == 'number' and type(y)\
    \ == 'number' and type(z) == 'number' then\n    return x == y + z\n  else\n  \
    \  return false\n  end\nend", "  return x == y or x == z or y == z\nend", "  if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \    return x == y + z\n  else\n    return false\n  end\nend", "  return type(y)\
    \ == 'number' and type(z) == 'number' and type(y) == type(z) and math.floor(x\
    \ + y + z) == math.floor(x + y + z)\nend", "  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y or x == z\n  elseif type(y) == 'table' and type(z) ==\
    \ 'table' then\n    for _, v in pairs(y) do\n      if any_int(x, y, v) then\n\
    \        return true\n      end\n    end\n    for _, v in pairs(z) do\n      if\
    \ any_int(x, y, v) then\n        return true\n      end\n    end\n    return false\n\
    \  else\n    return false\n  end\nend", "    if type(y) == 'number' and type(z)\
    \ == 'number' then\n        return math.floor(x) == math.floor(y) and math.floor(x)\
    \ == math.floor(z)\n    end\n    return false\nend", "  if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n    return x == y + z\n\
    \  else\n    return false\n  end\nend", "  if x == y then\n    return z == x\n\
    \  elseif x == z then\n    return y == z\n  elseif y == z then\n    return x ==\
    \ y\n  else\n    return false\n  end\nend", "  if x == y or x == z or y == z then\n\
    \    return true\n  end\n  return false\nend", "  if x ~= nil and y ~= nil and\
    \ z ~= nil then\n    if x ~= y and x ~= z then\n      return true\n    end\n \
    \ end\n  return false\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n \
    \   return x == y and type(y) == 'number' and type(z) == 'number' and type(z)\
    \ == 'number'\n  else\n    return false\n  end\nend", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\" and\
    \ type(y) == \"number\" and type(z) == \"number\" then\n    return x == y + z\n\
    \  else\n    return false\n  end\nend", "  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "   if type(y) == \"number\" and type(z) == \"\
    number\" then\n      return ((x == y) or (x == z) or (y == z))\n   else\n    \
    \  return false\n   end\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y or x == z\n  elseif type(y) == 'table' and type(z) ==\
    \ 'table' then\n    for _, v in pairs(y) do\n      if any_int(x, y, v) then\n\
    \        return true\n      end\n    end\n    for _, v in pairs(z) do\n      if\
    \ any_int(x, y, v) then\n        return true\n      end\n    end\n    return false\n\
    \  elseif type(y) == 'string' and type(z) == 'string' then\n    return x == y\
    \ or x == z\n  elseif type(y) == 'table' and type(z) == 'number' then\n    for\
    \ _, v in pairs(y) do\n      if any_int(x, y, v) then\n        return true\n \
    \     end\n    end\n    return false\n  elseif type(y) == 'string' and type(z)\
    \ == 'table' then\n    for _, v in pairs(z) do\n      if any_int(x, y, v) then\n\
    \        return true\n      end\n    end\n    return false\n  else\n    return\
    \ false\n  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and\
    \ type(z) == \"number\" then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "   if type(y) == 'number' and type(z) == 'number' then\n      return\
    \ ((x + y) == z) or ((x + z) == y) or ((y + z) == x)\n   else\n      return false\n\
    \   end\nend", "  return x ~= nil and y ~= nil and z ~= nil and x == y and tonumber(x)\
    \ == y and tonumber(y) == z and tonumber(z) == z\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y)\
    \ == 'number' then\n    return x == y\n  elseif type(z) == 'number' then\n   \
    \ return x == z\n  else\n    return false\n  end\nend", "  return type(y) == 'number'\
    \ and type(z) == 'number' and type(y) == type(z) and math.floor(x + y + z) ==\
    \ z\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n    return ((type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\") and\n   \
    \         math.floor(x) == math.floor(y) and math.floor(x) == math.floor(z))\n\
    \  else\n    return false\n  end\nend", "  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "  if type(x) == \"number\" and type(y) == \"\
    number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n    return\
    \ false\n  end\nend", "  if x == y or x == z or y == z then\n    return true\n\
    \  else\n    return false\n  end\nend", "  if x == y or x == z or y == z then\n\
    \    return true\n  end\n  return false\nend", "  if x ~= nil and y ~= nil and\
    \ z ~= nil then\n    return x == y and type(z) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number'\n  else\n    return false\n  end\nend", "  if type(y)\
    \ == 'number' and type(z) == 'number' then\n    return x == y or x == z\n  elseif\
    \ type(y) == 'number' then\n    return x == y\n  elseif type(z) == 'number' then\n\
    \    return x == z\n  else\n    return false\n  end\nend", "  return x ~= nil\
    \ and y ~= nil and z ~= nil and x == y + z and x == y and y == z\nend", "  if\
    \ type(y) == 'number' and type(z) == 'number' then\n    return x == y or x ==\
    \ z\n  elseif type(y) == 'table' and type(z) == 'table' then\n    for _, v in\
    \ pairs(y) do\n      if any_int(x, y, v) then\n        return true\n      end\n\
    \    end\n    for _, v in pairs(z) do\n      if any_int(x, y, v) then\n      \
    \  return true\n      end\n    end\n    return false\n  else\n    return false\n\
    \  end\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "  if x == y or y == z or z == x\
    \ then\n    return true\n  end\n  return false\nend", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "  if x == y or x == z or y == z\
    \ then\n    return true\n  else\n    return false\n  end\nend", "  return x ==\
    \ y or x == z or y == z\nend", "  if x == y or x == z or y == z then return true\
    \ end\n  return false\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y + z\n  elseif type(y) == 'number' then\n    return x\
    \ == y\n  elseif type(z) == 'number' then\n    return x == z\n  else\n    return\
    \ false\n  end\nend", "  return x ~= nil and y ~= nil and z ~= nil and x == y\
    \ and tonumber(x) == y and tonumber(y) == z and tonumber(z) == z\nend", "  return\
    \ type(y) == 'number' and type(z) == 'number' and type(y) == type(z) and math.floor(x)\
    \ == math.floor(y) and math.floor(x) == math.floor(z)\nend", "  if type(y) ==\
    \ 'number' and type(z) == 'number' then\n    return x == y or x == z\n  elseif\
    \ type(y) == 'number' then\n    return x == y\n  elseif type(z) == 'number' then\n\
    \    return x == z\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y)\
    \ == 'table' and type(z) == 'table' then\n    for _, v in pairs(y) do\n      if\
    \ any_int(x, y, v) then\n        return true\n      end\n    end\n    return false\n\
    \  else\n    return false\n  end\nend", "  if x == y or y == z or z == x then\n\
    \    return true\n  end\n  return false\nend", "  if x ~= nil and y ~= nil and\
    \ z ~= nil then\n    return x == y + z\n  else\n    return false\n  end\nend",
  "  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n        return\
    \ (x == y and y == z and type(z) == 'integer')\n      else\n        return (x\
    \ == y and y == z and type(z) == 'integer')\n      end\n    else\n      return\
    \ (x == y and type(z) == 'integer')\n    end\n  else\n    if y ~= nil then\n \
    \     if z ~= nil then\n        return (y == z and type(z) == 'integer')\n   \
    \   else\n        return (y == z and type(z) == 'integer')\n      end\n    else\n\
    \      return (type(z) == 'integer')\n    end\n  end\nend", "  return x == y or\
    \ x == z or y == z\nend", "  if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y or x == z\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  else\n    return\
    \ false\n  end\nend", "  if type(y) == 'number' and type(z) == 'number' then\n\
    \    return x == y + z\n  elseif type(y) == 'number' then\n    return x == y\n\
    \  elseif type(z) == 'number' then\n    return x == z\n  else\n    return false\n\
    \  end\nend", "  return x ~= nil and y ~= nil and z ~= nil and x == y + z\nend",
  "  if x == y then\n    return z == x and z == y\n  elseif x == z then\n    return\
    \ y == z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\" and\
    \ type(y) == \"number\" and type(z) == \"number\" then\n    return x == y + z\n\
    \  else\n    return false\n  end\nend", "  if x ~= nil then\n    if y ~= nil then\n\
    \      if z ~= nil then\n        return (x == y and y == z and type(z) == 'number')\n\
    \      else\n        return (x == y and y == z and type(z) == 'table')\n     \
    \ end\n    else\n      return (x == y and type(y) == 'table')\n    end\n  else\n\
    \    if y ~= nil then\n      if z ~= nil then\n        return (y == z and type(z)\
    \ == 'number')\n      else\n        return (y == z and type(z) == 'table')\n \
    \     end\n    else\n      return (type(y) == 'table')\n    end\n  end\nend",
  "  if type(x) == 'number' and type(y) == 'number' and type(z) == 'number' then\n\
    \    return x == y + z\n  else\n    return false\n  end\nend", "  if type(y) ==\
    \ 'number' and type(z) == 'number' then\n    return x == y or x == z\n  elseif\
    \ type(y) == 'table' then\n    for _, v in pairs(y) do\n      if any_int(x, y,\
    \ z) then\n        return true\n      end\n    end\n    return false\n  else\n\
    \    return false\n  end\nend", "   if type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number' then\n      return x == y + z\n   else\n      return\
    \ false\n   end\nend", "  if type(x) == 'number' and type(y) == 'number' and type(z)\
    \ == 'number' then\n    return x == y + z\n  else\n    return false\n  end\nend",
  "  if x == y or x == z or y == z then\n    return true\n  end\n  return false\n\
    end", "    if type(y) == 'number' and type(z) == 'number' then\n        return\
    \ x ~= nil and y ~= nil and z ~= nil and x == y + z\n    else\n        return\
    \ false\n    end\nend", "  return type(y) == 'number' and type(z) == 'number'\
    \ and type(y) == type(z) and y == z and math.floor(y) == math.floor(z) and math.floor(y)\
    \ + math.floor(z) == y\nend", "    if type(y) == 'number' and type(z) == 'number'\
    \ then\n        return math.abs(x - y) + math.abs(x - z) + math.abs(y - z) ==\
    \ math.abs(x + y + z)\n    end\n    return false\nend", "  if x ~= nil and y ~=\
    \ nil and z ~= nil then\n    return ((type(x) == \"number\" and type(y) == \"\
    number\" and type(z) == \"number\") and\n      ((x == y and x == z) or (x == z\
    \ and y == z)))\n  else\n    return false\n  end\nend", "  if type(x) == 'number'\
    \ and type(y) == 'number' and type(z) == 'number' then\n    return x == y + z\n\
    \  else\n    return false\n  end\nend", "   if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n      return ((x + y + z) == (x\
    \ * y * z))\n   else\n      return false\n   end\nend", "  if x == y then\n  \
    \  return z == x + y\n  elseif x == z then\n    return y == z + x\n  elseif y\
    \ == z then\n    return x == y + z\n  else\n    return false\n  end\nend", " \
    \ if type(y) == 'number' and type(z) == 'number' then\n    return x == y + z\n\
    \  elseif type(y) == 'number' then\n    return x == y\n  elseif type(z) == 'number'\
    \ then\n    return x == z\n  else\n    return false\n  end\nend", "  if type(y)\
    \ == 'number' and type(z) == 'number' then\n    return x == y + z\n  elseif type(y)\
    \ == 'number' then\n    return x == y\n  elseif type(z) == 'number' then\n   \
    \ return x == z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "    if type(y) == 'number' and\
    \ type(z) == 'number' then\n        return math.floor(x) == math.floor(y) + math.floor(z)\n\
    \    end\n    return false\nend", "  if type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if x == y or x == z or y == z then return true end\n  return\
    \ false\nend", "  return x == y or x == z or y == z\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y)\
    \ == 'number' and type(z) == 'string' then\n    return x == y or x == z\n  elseif\
    \ type(y) == 'string' and type(z) == 'number' then\n    return x == y or x ==\
    \ z\n  elseif type(y) == 'string' and type(z) == 'string' then\n    return x ==\
    \ y or x == z\n  elseif type(y) == 'table' and type(z) == 'table' then\n    return\
    \ x == y or x == z\n  else\n    return false\n  end\nend", "  return type(y) ==\
    \ 'number' and type(z) == 'number' and type(y) == type(z) and math.floor(x + y\
    \ + z) == math.floor(x + y + z)\nend", "  if type(x) == 'number' and type(y) ==\
    \ 'number' and type(z) == 'number' then\n    return x == y + z\n  else\n    return\
    \ false\n  end\nend", "  if type(y) == 'number' and type(z) == 'number' then\n\
    \    return x == y or x == z\n  elseif type(y) == 'table' then\n    for _, v in\
    \ pairs(y) do\n      if any_int(x, y, v) then\n        return true\n      end\n\
    \    end\n  elseif type(y) == 'string' then\n    return x == y or x == z\n  elseif\
    \ type(y) == 'boolean' then\n    return x == y or x == z\n  elseif type(y) ==\
    \ 'function' then\n    return any_int(x, y, z)\n  else\n    return false\n  end\n\
    end", "  if type(x) == 'number' and type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y + z\n  else\n    return false\n  end\nend", "  if type(y)\
    \ == 'number' and type(z) == 'number' then\n    return x == y or x == z\n  elseif\
    \ type(y) == 'table' then\n    for _, v in pairs(y) do\n      if any_int(x, y,\
    \ z) then\n        return true\n      end\n    end\n    return false\n  else\n\
    \    return false\n  end\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y + z\n  elseif type(y) == 'number' then\n    return x\
    \ == y\n  elseif type(z) == 'number' then\n    return x == z\n  else\n    return\
    \ false\n  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and\
    \ type(z) == \"number\" then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y + z\n  else\n    return false\n  end\n\
    end", "  if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"\
    number\" then\n    return x == y + z\n  else\n    return false\n  end\nend", " \
    \ if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n        return\
    \ ((type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\"\
    ) and\n                ((x == y) or (x == z) or (y == z)))\n      else\n     \
    \   return true\n      end\n    else\n      return true\n    end\n  else\n   \
    \ return false\n  end\nend", "  if type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y + z\n  else\n    return false\n  end\n\
    end", "  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n    \
    \    return (x == y and y == z and z == tointeger(x)) or x == tointeger(y) or\
    \ y == tointeger(z) or z == tointeger(x)\n      else\n        return (x == y and\
    \ y == tointeger(x)) or x == tointeger(y)\n      end\n    else\n      return (x\
    \ == tointeger(y)) or y == tointeger(x)\n    end\n  else\n    if y ~= nil then\n\
    \      if z ~= nil then\n        return y == z and z == tointeger(y)\n      else\n\
    \        return y == tointeger(z)\n      end\n    else\n      return tointeger(x)\
    \ == tointeger(y)\n    end\n  end\nend", "  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    return x == y + z\n  else\n\
    \    return false\n  end\nend", "  if type(x) == 'number' and type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y + z\n  else\n    return false\n  end\n\
    end", "   if type(y) == 'number' and type(z) == 'number' then\n      return ((x\
    \ == y) or (x == z) or (y == z))\n   else\n      return false\n   end\nend", " \
    \ if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\"\
    \ then\n    return x == y + z\n  else\n    return false\n  end\nend", "  return\
    \ x == y or x == z or y == z\nend", "  if x ~= nil and y ~= nil and z ~= nil then\n\
    \    return x == y + z\n  else\n    return false\n  end\nend", "  if type(x) ==\
    \ 'number' and type(y) == 'number' and type(z) == 'number' then\n    return x\
    \ == y + z\n  else\n    return false\n  end\nend", "  if x == y or x == z or y\
    \ == z then\n    return true\n  end\n  return false\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y)\
    \ == 'number' then\n    return x == y\n  elseif type(z) == 'number' then\n   \
    \ return x == z\n  else\n    return false\n  end\nend", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" then\n    return x == y\
    \ + z\n  else\n    return false\n  end\nend", "  if x ~= nil and y ~= nil and\
    \ z ~= nil then\n    if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n      return (x+y+z) == x\n    else\n      return false\n\
    \    end\n  else\n    return false\n  end\nend", "  if type(y) == 'number' and\
    \ type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y) == 'table'\
    \ then\n    for _, v in pairs(y) do\n      if any_int(x, y, v) then\n        return\
    \ true\n      end\n    end\n    return false\n  elseif type(y) == 'string' then\n\
    \    for _, v in pairs(y) do\n      if any_int(x, y, v) then\n        return true\n\
    \      end\n    end\n    return false\n  else\n    return false\n  end\nend",
  "  if x == y and y == z and x == z then\n    return true\n  else\n    return false\n\
    \  end\nend", "  if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n    return x == y + z\n  else\n    return false\n  end\n\
    end", "  return type(y) == 'number' and type(z) == 'number' and type(y) == type(z)\
    \ and y == z and y or false\nend", "  if x == y and y == z and x == z then\n \
    \   return true\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z or y == z\n  elseif\
    \ type(y) == 'table' then\n    for _, v in pairs(y) do\n      if any_int(x, y,\
    \ v) then\n        return true\n      end\n    end\n  else\n    return false\n\
    \  end\nend", "  if x == y or x == z or y == z then return true end\n  return\
    \ false\nend", "  if type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y or x == z\n  elseif type(y) == 'table' and type(z) == 'table' then\n\
    \    return any_int(x, y, z) or any_int(y, x, z) or any_int(z, x, y)\n  else\n\
    \    return false\n  end\nend", "  if type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y or x == z\n  elseif type(y) == 'table' then\n    for\
    \ _, v in pairs(y) do\n      if any_int(x, y, z) then\n        return true\n \
    \     end\n    end\n  else\n    return false\n  end\nend", "  if type(x) == \"\
    number\" and type(y) == \"number\" and type(z) == \"number\" then\n    return\
    \ x == y + z\n  else\n    return false\n  end\nend", "  if type(y) == 'number'\
    \ and type(z) == 'number' then\n    return x == y or x == z\n  elseif type(y)\
    \ == 'table' and type(z) == 'table' then\n    for _, v in pairs(y) do\n      if\
    \ any_int(x, y, v) then\n        return true\n      end\n    end\n    return false\n\
    \  elseif type(y) == 'string' and type(z) == 'string' then\n    return x == y\
    \ or x == z\n  elseif type(y) == 'table' and type(z) == 'number' then\n    for\
    \ _, v in pairs(y) do\n      if any_int(x, y, v) then\n        return true\n \
    \     end\n    end\n    return false\n  elseif type(y) == 'number' and type(z)\
    \ == 'table' then\n    for _, v in pairs(z) do\n      if any_int(x, y, v) then\n\
    \        return true\n      end\n    end\n    return false\n  elseif type(y) ==\
    \ 'string' and type(z) == 'table' then\n    for _, v in pairs(z) do\n      if\
    \ any_int(x, y, v) then\n        return true\n      end\n    end\n    return false\n\
    \  else\n    return false\n  end\nend", "  if x == y then\n    return true\n \
    \ elseif x == z or y == z then\n    return false\n  else\n    return true\n  end\n\
    end", "  if type(x) == 'number' and type(y) == 'number' and type(z) == 'number'\
    \ then\n    return x == y + z\n  else\n    return false\n  end\nend", "    if\
    \ type(y) == 'number' and type(z) == 'number' then\n        return ((x == y) or\
    \ (x == z) or (y == z))\n    end\n    return false\nend", "    if type(x) == \"\
    number\" and type(y) == \"number\" and type(z) == \"number\" then\n        return\
    \ x == y + z\n    else\n        return false\n    end\nend", "  if type(x) ==\
    \ \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n    return\
    \ x == y + z\n  else\n    return false\n  end\nend", "  return x ~= nil and y\
    \ ~= nil and z ~= nil and x == y and tonumber(x) == tonumber(y) and tonumber(x)\
    \ == tonumber(z)\nend", "  if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n    return x == y + z\n  else\n    return false\n\
    \  end\nend", "  if x ~= nil then\n    if y ~= nil then\n      if z ~= nil then\n\
    \        return (x == y and y == z and type(z) == 'integer')\n      else\n   \
    \     return (x == y and y == z and type(z) == 'table')\n      end\n    else\n\
    \      return (x == y and type(y) == 'table')\n    end\n  else\n    if y ~= nil\
    \ then\n      if z ~= nil then\n        return (y == z and type(z) == 'integer')\n\
    \      else\n        return (y == z and type(z) == 'table')\n      end\n    else\n\
    \      return (type(y) == 'table')\n    end\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
