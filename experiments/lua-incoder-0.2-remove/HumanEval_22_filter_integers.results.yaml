language: lua
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkp3b1yz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmprkp3b1yz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      break\n    end\n    if value ~= math.floor(value)\
    \ then\n      break\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh07bolp.lua:19:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpjh07bolp.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44gkogwz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp44gkogwz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvshu9tby.lua:15:\
    \ expected: {}\nactual: true\nstack traceback:\n\t/tmp/tmpvshu9tby.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      break\n    end\n    if value % 1 ~=\
    \ 0 then\n      break\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjedzbwya.lua:19:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpjedzbwya.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44gkogwz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp44gkogwz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: -1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      table.insert(values, value)\n    end\n\
    \  end\n  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013290
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      filtered_values[#filtered_values\
    \ + 1] = value\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2gznjzm.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpd2gznjzm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(filtered_values,\
    \ value)\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihu83sn4.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpihu83sn4.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered_values,\
    \ value)\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6aax92h.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpa6aax92h.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local new_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(new_values, value)\n\
    \    end\n  end\n  return new_values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaorosnuw.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpaorosnuw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[#values] = value\n      break\n\
    \    end\n  end\n  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdkeishd.lua:17:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpzdkeishd.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      break\n    end\n    if math.floor(value)\
    \ == value then\n      table.insert(values, value)\n    end\n  end\n  return values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7cadwmq.lua:19:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\", 4}\nstack traceback:\n\
    \t/tmp/tmpu7cadwmq.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered_values,\
    \ value)\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6aax92h.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpa6aax92h.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      break\n    end\n    if value % 1 ~=\
    \ 0 then\n      break\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjedzbwya.lua:19:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpjedzbwya.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      filtered_values[#filtered_values\
    \ + 1] = value\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2gznjzm.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpd2gznjzm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      break\n    end\n    if value % 1 ~=\
    \ 0 then\n      break\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjedzbwya.lua:19:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpjedzbwya.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkp3b1yz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmprkp3b1yz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered_values,\
    \ value)\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6aax92h.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpa6aax92h.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4isre38.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpa4isre38.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkp3b1yz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmprkp3b1yz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local new_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      new_values[#new_values + 1] =\
    \ value\n    end\n  end\n  return new_values\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchmt0suw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpchmt0suw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      filtered_values[#filtered_values\
    \ + 1] = value\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2gznjzm.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpd2gznjzm.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4isre38.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpa4isre38.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered_values = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered_values,\
    \ value)\n    end\n  end\n  return filtered_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6aax92h.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpa6aax92h.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm79dy57.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpzm79dy57.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkp3b1yz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmprkp3b1yz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkp3b1yz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmprkp3b1yz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnyypbn3.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmprnyypbn3.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gs380vn.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp4gs380vn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      break\n    end\n    if value ~= value\
    \ then\n      break\n    end\n  end\n  return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyfw30li.lua:19:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpsyfw30li.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local filtered = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(filtered, value)\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkp3b1yz.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmprkp3b1yz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      result[#result + 1] = value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1qxdp2d.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpn1qxdp2d.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == 'number' then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63y2vnh2.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp63y2vnh2.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for _, value in pairs(values) do\n\
    \    if type(value) ~= 'number' then\n      return nil\n    end\n    if value\
    \ ~= math.floor(value) then\n      return nil\n    end\n  end\n  return values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9py4_bw7.lua:19:\
    \ expected: {4, 9}\nactual: nil\nstack traceback:\n\t/tmp/tmp9py4_bw7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local result = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) == \"number\" then\n      table.insert(result, value)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakwu1mi6.lua:16:\
    \ expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpakwu1mi6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local results = {}\n  for _, value in pairs(values)\
    \ do\n    if type(value) ~= 'number' then\n      table.insert(results, value)\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9rbe9bw.lua:16:\
    \ expected: {4, 9}\nactual: {{}, {}, \"adasd\"}\nstack traceback:\n\t/tmp/tmpz9rbe9bw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
- exit_code: 1
  program: "-- Filter given list of any python values only for integers\nlocal function\
    \ filter_integers(values)\n  local value\n  for value in pairs(values) do\n  \
    \  if type(value) ~= 'number' then\n      values[value] = nil\n    end\n  end\n\
    \  return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwksj4ml.lua:16:\
    \ expected: {4, 9}\nactual: {4, {}, {}, 23.2, 9, \"adasd\"}\nstack traceback:\n\
    \t/tmp/tmpxwksj4ml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660013285
