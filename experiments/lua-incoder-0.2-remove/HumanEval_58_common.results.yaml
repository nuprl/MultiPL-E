language: lua
name: HumanEval_58_common
results:
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local common = {}\n  for _, v in ipairs(l1) do\n    for _,\
    \ v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common, v)\n\
    \      end\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje31ysey.lua:17:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpje31ysey.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ true\n      end\n      j2 = j2 + 1\n    end\n    j1 = j1 + 1\n    i2 = i2 +\
    \ 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      l3[k] = l1.[i]\n      l4[k] = l2.[j]\n      i = i + 1\n      j = j + 1\n\
    \      k = k + 1\n    elseif l1.[i] < l2.[j] then\n      i = i + 1\n    else\n\
    \      j = j + 1\n    end\n  end\n  while i <= #l1 do\n    l3[k] = l1.[i]\n  \
    \  i = i + 1\n    k = k + 1\n  end\n  while j <= #l2 do\n    l4[k] = l2.[j]\n\
    \    j = j + 1\n    k = k + 1\n  end\n  return l3, l4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjgi75n5c.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j1]\n    if e1 == e2 then\n\
    \      i1 = i1 + 1\n      j1 = j1 + 1\n    elseif e1 < e2 then\n      i1 = i1\
    \ + 1\n    else\n      j1 = j1 + 1\n    end\n  end\n  return l1[i1]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4vcgs73.lua:23:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpv4vcgs73.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        local\
    \ k = i1\n        while k > 0 and l1[--k] == l2[j2] do\n        end\n        if\
    \ k == 0 then\n          l1 = l1[#l1]\n          i1 = i1 + 1\n        else\n \
    \         j1 = j1 + 1\n        end\n      else\n        j1 = j1 + 1\n      end\n\
    \    end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6t7v50ym.lua:10: unexpected symbol near ''end''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local common\
    \ = {}\n  while i <= #l1 and j <= #l2 do\n    if l1[i] == l2[j] then\n      k\
    \ = k + 1\n      common[k] = l2[j]\n      i = i + 1\n      j = j + 1\n    elseif\
    \ l1[i - 1] == l2[j - 1] then\n      k = k + 1\n      common[k] = l1[i - 1]\n\
    \      i = i + 1\n      j = j + 1\n    else\n      i = i + 1\n      j = j + 1\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8fqzekg.lua:29:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpm8fqzekg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ l1[i1]\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gf37z2w.lua:21:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp2gf37z2w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n      table.insert(l3,\
    \ l1.[i])\n      i = i + 1\n      j = j + 1\n    else\n      if l1.[i] < l2.[j]\
    \ then\n        k = k + 1\n      else\n        k = k - 1\n      end\n    end\n\
    \  end\n  return l3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3nvoy1l6.lua:8: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local common\
    \ = {}\n  while i <= #l1 and j <= #l2 do\n    if l1[i] == l2[j] then\n      common[k]\
    \ = l1[i]\n      i = i + 1\n      j = j + 1\n      k = k + 1\n    elseif l1[i\
    \ - 1] > l2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvsapcgx.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpuvsapcgx.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpuvsapcgx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ true\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxl60cjf.lua:21:\
    \ expected: {1, 5, 653}\nactual: true\nstack traceback:\n\t/tmp/tmpoxl60cjf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      l3.[k] = l1.[i]\n      l4.[k] = l2.[j]\n      i = i + 1\n      j = j +\
    \ 1\n      k = k + 1\n    elseif l1.[i] < l2.[j] then\n      i = i + 1\n    else\n\
    \      j = j + 1\n    end\n  end\n  while i <= #l1 do\n    l3.[k] = l1.[i]\n \
    \   i = i + 1\n    k = k + 1\n  end\n  while j <= #l2 do\n    l4.[k] = l2.[j]\n\
    \    j = j + 1\n    k = k + 1\n  end\n  return l3, l4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr87alkhc.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ true\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxl60cjf.lua:21:\
    \ expected: {1, 5, 653}\nactual: true\nstack traceback:\n\t/tmp/tmpoxl60cjf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        l1[i1] = \"\"\n      end\n      j1 = j1 + 1\n    end\n    i1\
    \ = i1 + 1\n    j1 = 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkscmyk8.lua:22:\
    \ expected: {1, 5, 653}\nactual: {\"\", 4, 3, 34, \"\", 2, \"\", 1, 653, 5}\n\
    stack traceback:\n\t/tmp/tmpmkscmyk8.lua:22: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  local l5 = {}\n  local l6 = {}\n  local l7 = {}\n  local l8\
    \ = {}\n  local l9 = {}\n  local l10 = {}\n  local l11 = {}\n  local l12 = {}\n\
    \  local l13 = {}\n  local l14 = {}\n  local l15 = {}\n  local l16 = {}\n  local\
    \ l17 = {}\n  local l18 = {}\n  local l19 = {}\n  local l20 = {}\n  local l21\
    \ = {}\n  local l22 = {}\n  local l23 = {}\n  local l24 = {}\n  local l25 = {}\n\
    \  local l26 = {}\n  local l27 = {}\n  local l28 = {}\n  local l29 = {}\n  local\
    \ l30 = {}\n  local l31 = {}\n  local l32 = {}\n  local l33 = {}\n  local l34\
    \ = {}\n  local l35 = {}\n  local l36 = {}\n  local l37 = {}\n  local l38 = {}\n\
    \  local l39 = {}\n  local l40 = {}\n  local l41 = {}\n  local l42 = {}\n  local\
    \ l43 = {}\n  local l44 = {}\n  local l45 = {}\n  local l46 = {}\n  local l47\
    \ = {}\n  local l48 = {}\n  local l49 = {}\n  local l50 = {}\n  local l51 = {}\n\
    \  local l52 = {}\n  local l53 = {}\n  local l54 = {}\n  local l55 = {}\n  local\
    \ l56 = {}\n  local l57 = {}\n  local l58 = {}\n  local l59 = {}\n  local l60\
    \ = {}\n  local l61 = {}\n  local l62 = {}\n  local l63 = {}\n  local l64 = {}\n\
    \  local l65 = {}\n  local l66 = {}\n  local l67 = {}\n  local l68 = {}\n  local\
    \ l69 = {}\n  local l70 = {}\n  local l71 = {}\n  local l72 = {}\n  local l73\
    \ = {}\n  local l74 = {}\n  local l75 = {}\n  local l76 = {}\n  local l77 = {}\n\
    \  local l78 = {}\n  local l79 = {}\n  local l80 = {}\n  local l81 = {}\n  local\
    \ l82 = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp56wpoe2l.lua:96: ''end'' expected (to close ''function'' at
    line 2) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        l1[i1] = nil\n        break\n      end\n      j1 = j1 + 1\n\
    \    end\n    i1 = i1 + 1\n    j1 = 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6vg8l99.lua:23:\
    \ expected: {1, 5, 653}\nactual: {2=4, 3=3, 4=34, 6=2, 8=1, 9=653, 10=5}\nstack\
    \ traceback:\n\t/tmp/tmpz6vg8l99.lua:23: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then break end\n    if e1 < e2\
    \ then i1 = i1 + 1 end\n    if e1 > e2 then i2 = i2 + 1 end\n  end\n  return i1,\
    \ i2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjne8ac_.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpcjne8ac_.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpcjne8ac_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    if e1 == e2 then\n\
    \      j1 = j1 + 1\n      j2 = j2 + 1\n    elseif e1 < e2 then\n      i1 = i1\
    \ + 1\n    else\n      j1 = j1 + 1\n    end\n  end\n  return l1, l2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        local\
    \ k = i1 + 1\n        while k < i2 do\n          l1[k] = l1[k]\n          k =\
    \ k + 1\n        end\n        k = i2 + 1\n        while k < j2 do\n          l2[k]\
    \ = l2[k]\n          k = k + 1\n        end\n        i1, i2 = i1 + 1, i2 + 1\n\
    \        j1, j2 = j1 + 1, j2 + 1\n      else\n        local k = j1 + 1\n     \
    \   while k < j2 do\n          l2[k] = l2[k]\n          k = k + 1\n        end\n\
    \        j1, j2 = j1 + 1, j2 + 1\n      end\n    end\n  end\n  return l1, l2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21nqj__0.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmp21nqj__0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    if e1 == e2 then\n\
    \      j1 = j1 + 1\n      j2 = j2 + 1\n    elseif e1 < e2 then\n      i1 = i1\
    \ + 1\n    else\n      j1 = j1 + 1\n    end\n  end\n  return l1, l2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  local l5 = {}\n  local l6 = {}\n  while i <= #l1 and j <=\
    \ #l2 do\n    if l1.[i] == l2.[j] then\n      table.insert(l3, l1.[i])\n     \
    \ k = k + 1\n      i = i + 1\n      j = j + 1\n    else\n      if k ~= 0 then\n\
    \        table.insert(l4, l3.[k])\n        k = k - 1\n      end\n      table.insert(l5,\
    \ l2.[j])\n      k = k + 1\n      j = j + 1\n    end\n  end\n  if k ~= 0 then\n\
    \    table.insert(l6, l5.[k])\n  end\n  return l4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy7lnf88n.lua:11: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local common\
    \ = {}\n  while i <= #l1 and j <= #l2 do\n    if l1[i] == l2[j] then\n      common[k]\
    \ = l1[i]\n      i = i + 1\n      j = j + 1\n      k = k + 1\n    else\n     \
    \ if l1[i - 1] == l2[j - 1] then\n        i = i + 1\n        j = j + 1\n     \
    \   k = k + 1\n      else\n        if l1[i - 1] > l2[j - 1] then\n          i\
    \ = i + 1\n        else\n          j = j + 1\n        end\n      end\n    end\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37fpta_3.lua:33:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp37fpta_3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4584cgx.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpi4584cgx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j1]\n    while j1 <= j2 do\n\
    \      if e1 == l2[--j1] then break end\n    end\n    if j1 == j2 then return\
    \ e1 end\n    local c1 = common(l1, l2)\n    if c1 ~= e1 then return c1 end\n\
    \    i1, j1 = i1 + 1, j1 + 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp42pazx8_.lua:10: unexpected symbol near ''end''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        table.insert(l1, e1)\n        break\n   \
    \   end\n      j1 = j1 + 1\n    end\n    j2 = j2 + 1\n    i1 = i1 + 1\n  end\n\
    \  return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjepy6voi.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpjepy6voi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4584cgx.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpi4584cgx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        l1[i1] = nil\n        i1 = i1 + 1\n      else\n        j1 =\
    \ j1 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpops_n_0w.lua:23:\
    \ expected: {1, 5, 653}\nactual: {2=4, 3=3, 4=34, 5=653, 6=2, 7=5, 8=1}\nstack\
    \ traceback:\n\t/tmp/tmpops_n_0w.lua:23: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local common\
    \ = {}\n  while i <= #l1 and j <= #l2 do\n    if l1[i] == l2[j] then\n      common[k]\
    \ = l1[i]\n      i = i + 1\n      j = j + 1\n      k = k + 1\n    else\n     \
    \ if l1[i - 1] > l2[j - 1] then\n        common[k] = l1[i]\n        i = i + 1\n\
    \      else\n        common[k] = l2[j]\n        j = j + 1\n      end\n      k\
    \ = k + 1\n    end\n  end\n  if i <= #l1 then\n    for j = #l1 + 1, #l2 do\n \
    \     common[k] = l2[j]\n      k = k + 1\n    end\n  end\n  if j <= #l2 then\n\
    \    for i = 1, #l1 do\n      common[k] = l1[i]\n      k = k + 1\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8z_bg9iz.lua:14:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp8z_bg9iz.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp8z_bg9iz.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local n = #l1\n\
    \  local m = #l2\n  local common = {}\n  while i <= n and j <= m do\n    if l1[i]\
    \ == l2[j] then\n      common[k] = l1[i]\n      i = i + 1\n      j = j + 1\n \
    \     k = k + 1\n    else\n      if l1[i] < l2[j] then\n        i = i + 1\n  \
    \    else\n        j = j + 1\n      end\n    end\n  end\n  return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m3ei5dq.lua:29:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmp6m3ei5dq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        l1[i1] = \"\"\n        i1 = i1 + 1\n      elseif l1[l1] ==\
    \ l2[j2] then\n        table.insert(l2, l2[j2])\n        l2[j2] = \"\"\n     \
    \   j2 = j2 + 1\n      else\n        break\n      end\n    end\n    if i1 > i2\
    \ then\n      break\n    end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then break end\n    local i3\
    \ = i1 + 1\n    while i3 <= i2 do\n      if e1~=l2[i3] then break end\n      i3\
    \ = i3 + 1\n    end\n    if i3 == i2 then return e1 end\n    i1, i2 = i2, i3\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_7qs2pf.lua:22:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp5_7qs2pf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapdgcb59.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpapdgcb59.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  local l5 = {}\n  local l6 = {}\n  local l7 = {}\n  local l8\
    \ = {}\n  local l9 = {}\n  local l10 = {}\n  local l11 = {}\n  local l12 = {}\n\
    \  local l13 = {}\n  local l14 = {}\n  local l15 = {}\n  local l16 = {}\n  local\
    \ l17 = {}\n  local l18 = {}\n  local l19 = {}\n  local l20 = {}\n  local l21\
    \ = {}\n  local l22 = {}\n  local l23 = {}\n  local l24 = {}\n  local l25 = {}\n\
    \  local l26 = {}\n  local l27 = {}\n  local l28 = {}\n  local l29 = {}\n  local\
    \ l30 = {}\n  local l31 = {}\n  local l32 = {}\n  local l33 = {}\n  local l34\
    \ = {}\n  local l35 = {}\n  local l36 = {}\n  local l37 = {}\n  local l38 = {}\n\
    \  local l39 = {}\n  local l40 = {}\n  local l41 = {}\n  local l42 = {}\n  local\
    \ l43 = {}\n  local l44 = {}\n  local l45 = {}\n  local l46 = {}\n  local l47\
    \ = {}\n  local l48 = {}\n  local l49 = {}\n  local l50 = {}\n  local l51 = {}\n\
    \  local l52 = {}\n  local l53 = {}\n  local l54 = {}\n  local l55 = {}\n  local\
    \ l56 = {}\n  local l57 = {}\n  local l58 = {}\n  local l59 = {}\n  local l60\
    \ = {}\n  local l61 = {}\n  local l62 = {}\n  local l63 = {}\n  local l64 = {}\n\
    \  local l65 = {}\n  local l66 = {}\n  local l67 = {}\n  local l68 = {}\n  local\
    \ l69 = {}\n  local l70 = {}\n  local l71 = {}\n  local l72 = {}\n  local l73\
    \ = {}\n  local l74 = {}\n  local l75 = {}\n  local l76 = {}\n  local l77 = {}\n\
    \  local l78 = {}\n  local l79 = {}\n  local l80 = {}\n  local l81 = {}\n  local\
    \ l82 = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp56wpoe2l.lua:96: ''end'' expected (to close ''function'' at
    line 2) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4584cgx.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpi4584cgx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    j1 = j1 + 1\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6vaxw1a.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpu6vaxw1a.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapdgcb59.lua:22:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpapdgcb59.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[l1] == l2[j2] then\n        table.insert(common, l1[l1])\n        j1 = j1\
    \ + 1\n      else\n        j2 = j2 + 1\n      end\n    end\n    i2 = i2 + 1\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ true\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxl60cjf.lua:21:\
    \ expected: {1, 5, 653}\nactual: true\nstack traceback:\n\t/tmp/tmpoxl60cjf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ l1[i1]\n      end\n      j2 = j2 + 1\n    end\n    j1 = j1 + 1\n    i2 = i2\
    \ + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      table.insert(l3, l1.[i])\n      k = k + 1\n      i = i + 1\n      j = j\
    \ + 1\n    else\n      if k ~= 0 then\n        table.insert(l4, l3[k])\n     \
    \ end\n      k = 1\n      i = i + 1\n      j = j + 1\n    end\n  end\n  if k ~=\
    \ 0 then\n    table.insert(l4, l3[k])\n  end\n  return l4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpixnpp82b.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4584cgx.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpi4584cgx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local common = {}\n  local i = 1\n  while i <= #l1 do\n  \
    \  local found = false\n    for j = 1, #l2 do\n      if l1[i] == l2[j] then\n\
    \        table.insert(common, l1[i])\n        found = true\n        break\n  \
    \    end\n    end\n    if not found then\n      break\n    end\n    i = i + 1\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrtm90fq.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmprrtm90fq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    j1 = j1 + 1\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6vaxw1a.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpu6vaxw1a.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4584cgx.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpi4584cgx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    if e1 == e2 then\n\
    \      i1 = i1 + 1\n      j2 = j2 + 1\n    elseif e1 < e2 then\n      i1 = i1\
    \ + 1\n    else\n      j2 = j2 + 1\n    end\n  end\n  return l1, l2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t269kfu.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4t269kfu.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp4t269kfu.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    j1 = 1\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3fjyz4x.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1, 653, 5, 1, 653}\n\
    stack traceback:\n\t/tmp/tmpy3fjyz4x.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        l1[i1] = nil\n        i1 = i1 + 1\n      else\n        j2 =\
    \ j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[l1] == l2[j2] then\n        table.insert(common, l1[l1])\n        j1 = j1\
    \ + 1\n      else\n        j2 = j2 + 1\n      end\n    end\n    i2 = i2 + 1\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local n = #l1\n\
    \  local m = #l2\n  local common = {}\n  while i <= n and j <= m do\n    if l1[i]\
    \ == l2[j] then\n      common[k] = l1[i]\n      i = i + 1\n      j = j + 1\n \
    \     k = k + 1\n    elseif l1[i] > l2[j] then\n      i = i + 1\n    else\n  \
    \    j = j + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdqxibfr.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmpmdqxibfr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      l3[k] = l1.[i]\n      l4[k] = l2.[j]\n      i = i + 1\n      j = j + 1\n\
    \      k = k + 1\n    elseif l1.[i] < l2.[j] then\n      i = i + 1\n    else\n\
    \      j = j + 1\n    end\n  end\n  if i <= #l1 then\n    for j = 1, i do\n  \
    \    l3[k] = l1.[j]\n      k = k + 1\n    end\n  elseif j <= #l2 then\n    for\
    \ i = 1, j do\n      l3[k] = l2.[i]\n      k = k + 1\n    end\n  end\n  return\
    \ l3, l4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy_nrclkn.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ true\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxl60cjf.lua:21:\
    \ expected: {1, 5, 653}\nactual: true\nstack traceback:\n\t/tmp/tmpoxl60cjf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        l1[i1] = nil\n      end\n      j1 = j1 + 1\n    end\n    i1\
    \ = i1 + 1\n    j1 = 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gcdpgn_.lua:22:\
    \ expected: {1, 5, 653}\nactual: {2=4, 3=3, 4=34, 6=2, 8=1, 9=653, 10=5}\nstack\
    \ traceback:\n\t/tmp/tmp7gcdpgn_.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        local\
    \ k = i1 + 1\n        while k < i2 do\n          l1[#l1 + 1] = l1[k]\n       \
    \   k = k + 1\n        end\n        local v = l2[j2]\n        l1[#l1 + 1] = v\n\
    \        j2 = j2 + 1\n      else\n        j1 = j1 + 1\n      end\n    end\n  \
    \  i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      table.insert(l3, l1.[i])\n      k = k + 1\n      i = i + 1\n      j = j\
    \ + 1\n    else\n      if k ~= 0 then\n        table.insert(l4, l3[k])\n     \
    \ end\n      k = 1\n      i = i + 1\n      j = j + 1\n    end\n  end\n  if k ~=\
    \ 0 then\n    table.insert(l4, l3[k])\n  end\n  return l4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpixnpp82b.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        return e1\n      end\n      j1 = j1 + 1\n\
    \    end\n    j2 = j2 + 1\n    i1 = i1 + 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xjsubp2.lua:23:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp3xjsubp2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    while j1 <= j2 do\n      table.insert(common, l2[j1])\n\
    \      j1 = j1 + 1\n    end\n    while i1 <= i2 do\n      table.insert(common,\
    \ l1[i1])\n      i1 = i1 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21nqj__0.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmp21nqj__0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j1 = j1 + 1\n      else\n        i1 = i1 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphy3mypme.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmphy3mypme.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmphy3mypme.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local common = {}\n  for _, v1 in ipairs(l1) do\n    for _,\
    \ v2 in ipairs(l2) do\n      if v1 == v2 then\n        table.insert(common, v1)\n\
    \      end\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb9miei4.lua:17:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpzb9miei4.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4584cgx.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpi4584cgx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    j1 = j1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 < i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfp0mawjr.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfp0mawjr.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpfp0mawjr.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        local\
    \ k = i1\n        i1 = i1 + 1\n        j1 = j1 + 1\n        while k > 0 and l1[k]\
    \ == l2[j1] do\n          k = k - 1\n        end\n        if k > 0 then\n    \
    \      l1 = l1:sub(1, k + 1)\n          i1 = i1 + 1\n          j1 = j1 + 1\n \
    \       else\n          l2 = l2:sub(1, j2 + 1)\n          j2 = j2 + 1\n      \
    \  end\n      else\n        break\n      end\n    end\n    if i1 > i2 then\n \
    \     l2 = l2:sub(1, j2 + 1)\n      j2 = j2 + 1\n    end\n    i1 = i1 + 1\n  end\n\
    \  return l1, l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r7xq2yr.lua:15:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp4r7xq2yr.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp4r7xq2yr.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n    j1 = j2 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  local l5 = {}\n  local l6 = {}\n  local l7 = {}\n  local l8\
    \ = {}\n  local l9 = {}\n  local l10 = {}\n  local l11 = {}\n  local l12 = {}\n\
    \  local l13 = {}\n  local l14 = {}\n  local l15 = {}\n  local l16 = {}\n  local\
    \ l17 = {}\n  local l18 = {}\n  local l19 = {}\n  local l20 = {}\n  local l21\
    \ = {}\n  local l22 = {}\n  local l23 = {}\n  local l24 = {}\n  local l25 = {}\n\
    \  local l26 = {}\n  local l27 = {}\n  local l28 = {}\n  local l29 = {}\n  local\
    \ l30 = {}\n  local l31 = {}\n  local l32 = {}\n  local l33 = {}\n  local l34\
    \ = {}\n  local l35 = {}\n  local l36 = {}\n  local l37 = {}\n  local l38 = {}\n\
    \  local l39 = {}\n  local l40 = {}\n  local l41 = {}\n  local l42 = {}\n  local\
    \ l43 = {}\n  local l44 = {}\n  local l45 = {}\n  local l46 = {}\n  local l47\
    \ = {}\n  local l48 = {}\n  local l49 = {}\n  local l50 = {}\n  local l51 = {}\n\
    \  local l52 = {}\n  local l53 = {}\n  local l54 = {}\n  local l55 = {}\n  local\
    \ l56 = {}\n  local l57 = {}\n  local l58 = {}\n  local l59 = {}\n  local l60\
    \ = {}\n  local l61 = {}\n  local l62 = {}\n  local l63 = {}\n  local l64 = {}\n\
    \  local l65 = {}\n  local l66 = {}\n  local l67 = {}\n  local l68 = {}\n  local\
    \ l69 = {}\n  local l70 = {}\n  local l71 = {}\n  local l72 = {}\n  local l73\
    \ = {}\n  local l74 = {}\n  local l75 = {}\n  local l76 = {}\n  local l77 = {}\n\
    \  local l78 = {}\n  local l79 = {}\n  local l80 = {}\n  local l81 = {}\n  local\
    \ l82 = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp56wpoe2l.lua:96: ''end'' expected (to close ''function'' at
    line 2) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1, l2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpog7f56dq.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpog7f56dq.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpog7f56dq.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    while j1 <= j2 do\n      table.insert(common, l2[j1])\n\
    \      j1 = j1 + 1\n    end\n    while i1 <= i2 do\n      table.insert(common,\
    \ l1[i1])\n      i1 = i1 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        l1[i1] = \"\"\n        i1 = i1 + 1\n      else\n        table.insert(l2,\
    \ l2[j2])\n        l2[j2] = \"\"\n        j2 = j2 + 1\n      end\n    end\n  \
    \  i1 = i1 + 1\n    j1 = j2 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        return e1\n      elseif e1 == nil then\n\
    \        return nil\n      else\n        j1 = j1 + 1\n      end\n    end\n   \
    \ j1 = j1 + 1\n    i1 = i1 + 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xy2j5qo.lua:26:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp0xy2j5qo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local common = {}\n  for _, v in ipairs(l1) do\n    for _,\
    \ v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common, v)\n\
    \      end\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje31ysey.lua:17:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpje31ysey.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        return e1\n      end\n      j1 = j1 + 1\n\
    \    end\n    j2 = j2 + 1\n    i1 = i1 + 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xjsubp2.lua:23:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp3xjsubp2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[l1] == l2[j2] then\n        table.insert(common, l1[l1])\n        j2 = j2\
    \ + 1\n      else\n        j1 = j1 + 1\n      end\n    end\n    i1 = i1 + 1\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyen1_2fo.lua:26:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmpyen1_2fo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local common\
    \ = {}\n  while i <= #l1 and j <= #l2 do\n    if l1[i] == l2[j] then\n      common[k]\
    \ = l1[i]\n      i = i + 1\n      j = j + 1\n      k = k + 1\n    else\n     \
    \ if l1[i - 1] > l2[j - 1] then\n        k = k + 1\n      else\n        i = i\
    \ + 1\n      end\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61dg5zcd.lua:14:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp61dg5zcd.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp61dg5zcd.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    j1 = 1\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3fjyz4x.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1, 653, 5, 1, 653}\n\
    stack traceback:\n\t/tmp/tmpy3fjyz4x.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local common = {}\n  for _, v1 in pairs(l1) do\n    for _,\
    \ v2 in pairs(l2) do\n      if v1 == v2 then\n        table.insert(common, v1)\n\
    \      end\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dcuxeor.lua:17:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp6dcuxeor.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmr7to5_.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvmr7to5_.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpvmr7to5_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        return e1\n      end\n      j1 = j1 + 1\n\
    \    end\n    j2 = j2 + 1\n    i1 = i1 + 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xjsubp2.lua:23:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp3xjsubp2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[l1] == l2[j2] then\n        table.insert(common, l1[l1])\n        j1 = j1\
    \ + 1\n      else\n        j2 = j2 + 1\n      end\n    end\n    i2 = i2 + 1\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  local l5 = {}\n  local l6 = {}\n  local l7 = {}\n  local l8\
    \ = {}\n  local l9 = {}\n  local l10 = {}\n  local l11 = {}\n  local l12 = {}\n\
    \  local l13 = {}\n  local l14 = {}\n  local l15 = {}\n  local l16 = {}\n  local\
    \ l17 = {}\n  local l18 = {}\n  local l19 = {}\n  local l20 = {}\n  local l21\
    \ = {}\n  local l22 = {}\n  local l23 = {}\n  local l24 = {}\n  local l25 = {}\n\
    \  local l26 = {}\n  local l27 = {}\n  local l28 = {}\n  local l29 = {}\n  local\
    \ l30 = {}\n  local l31 = {}\n  local l32 = {}\n  local l33 = {}\n  local l34\
    \ = {}\n  local l35 = {}\n  local l36 = {}\n  local l37 = {}\n  local l38 = {}\n\
    \  local l39 = {}\n  local l40 = {}\n  local l41 = {}\n  local l42 = {}\n  local\
    \ l43 = {}\n  local l44 = {}\n  local l45 = {}\n  local l46 = {}\n  local l47\
    \ = {}\n  local l48 = {}\n  local l49 = {}\n  local l50 = {}\n  local l51 = {}\n\
    \  local l52 = {}\n  local l53 = {}\n  local l54 = {}\n  local l55 = {}\n  local\
    \ l56 = {}\n  local l57 = {}\n  local l58 = {}\n  local l59 = {}\n  local l60\
    \ = {}\n  local l61 = {}\n  local l62 = {}\n  local l63 = {}\n  local l64 = {}\n\
    \  local l65 = {}\n  local l66 = {}\n  local l67 = {}\n  local l68 = {}\n  local\
    \ l69 = {}\n  local l70 = {}\n  local l71 = {}\n  local l72 = {}\n  local l73\
    \ = {}\n  local l74 = {}\n  local l75 = {}\n  local l76 = {}\n  local l77 = {}\n\
    \  local l78 = {}\n  local l79 = {}\n  local l80 = {}\n  local l81 = {}\n  local\
    \ l82 = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp56wpoe2l.lua:96: ''end'' expected (to close ''function'' at
    line 2) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        local\
    \ k = i1\n        while k > 0 and l1[k] == l2[k] do\n          k = k - 1\n   \
    \     end\n        if k > 0 then\n          l1 = l1:sub(k, i1)\n          i1 =\
    \ k + 1\n        else\n          l2 = l2:sub(k + 1, j2)\n          j2 = j2 - 1\n\
    \        end\n      else\n        local k = j1\n        while k > 0 and l1[k]\
    \ == l2[k] do\n          k = k - 1\n        end\n        if k > 0 then\n     \
    \     l1 = l1:sub(i1, k + 1)\n          i1 = i1 + 1\n        else\n          l2\
    \ = l2:sub(j2 + 1, j2)\n          j2 = j2 - 1\n        end\n      end\n    end\n\
    \    i1 = i1 + 1\n    j1 = j2 + 1\n  end\n  return l1, l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx079lttp.lua:25:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpx079lttp.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmpx079lttp.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        local\
    \ k = i1\n        while k > 0 and l1[k] == l2[k] do\n          k = k - 1\n   \
    \     end\n        if k > 0 then\n          l1, l2 = l2, l1\n          i1, i2\
    \ = i2, k\n          j1, j2 = j2, k\n        else\n          i1 = i1 + 1\n   \
    \       j1 = j1 + 1\n        end\n      else\n        j1 = j1 + 1\n      end\n\
    \    end\n    i1 = i1 + 1\n    j1 = j1 + 1\n  end\n  return l1, l2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzs6xm6b.lua:33:\
    \ expected: {1, 5, 653}\nactual: {5, 7, 1, 5, 9, 653, 121}\nstack traceback:\n\
    \t/tmp/tmpqzs6xm6b.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      elseif l1[l1] == l2[j2] then\n        table.insert(l2,\
    \ l2[j2])\n        j2 = j2 + 1\n      else\n        break\n      end\n    end\n\
    \  end\n  return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ l1[i1]\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gf37z2w.lua:21:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp2gf37z2w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      l3.[k] = l1.[i]\n      l4.[k] = l2.[j]\n      i = i + 1\n      j = j +\
    \ 1\n      k = k + 1\n    else\n      if l1.[i] < l2.[j] then\n        i = i +\
    \ 1\n      else\n        j = j + 1\n      end\n    end\n  end\n  while i <= #l1\
    \ do\n    l3.[k] = l1.[i]\n    i = i + 1\n    k = k + 1\n  end\n  while j <= #l2\
    \ do\n    l4.[k] = l2.[j]\n    j = j + 1\n    k = k + 1\n  end\n  return l3, l4\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy0jl1g6x.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      l3[k] = l1.[i]\n      l4[k] = l2.[j]\n      i = i + 1\n      j = j + 1\n\
    \      k = k + 1\n    else\n      if l1.[i] < l2.[j] then\n        i = i + 1\n\
    \      else\n        j = j + 1\n      end\n    end\n  end\n  if i <= #l1 then\n\
    \    for k = 1, i do\n      l3[k] = l1.[k]\n    end\n  else\n    for k = 1, j\
    \ do\n      l3[k] = l2.[k]\n    end\n  end\n  return l3, l4\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdyw3_wih.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        table.insert(l1, e1)\n        break\n   \
    \   end\n      j1 = j1 + 1\n    end\n    j2 = j2 + 1\n    i1 = i1 + 1\n  end\n\
    \  return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjepy6voi.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpjepy6voi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ l1[i1]\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gf37z2w.lua:21:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp2gf37z2w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local ans = {}\n\
    \  while i <= #l1 and j <= #l2 do\n    if l1[i] == l2[j] then\n      k = k + 1\n\
    \      ans[k] = l1[i]\n      i = i + 1\n      j = j + 1\n    elseif l1[i - 1]\
    \ > l2[j] then\n      k = k + 1\n      ans[k] = l1[i - 1]\n      i = i + 1\n \
    \   else\n      k = k + 1\n      ans[k] = l2[j]\n      j = j + 1\n    end\n  end\n\
    \  if i <= #l1 then\n    for k = k + 1 , #l1 do\n      ans[k] = l1[i - 1]\n  \
    \  end\n  end\n  if j <= #l2 then\n    for k = k + 1 , #l2 do\n      ans[k] =\
    \ l2[j]\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyfsxnsw.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgyfsxnsw.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpgyfsxnsw.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[l1] == l2[j2] then\n        table.insert(common, l1[l1])\n        j1 = j1\
    \ + 1\n      else\n        j2 = j2 + 1\n      end\n    end\n    i2 = i2 + 1\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        table.insert(l2, l2[j1])\n\
    \        j2 = j2 + 1\n      end\n    end\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local common_elements\
    \ = {}\n  while i <= #l1 and j <= #l2 do\n    if l1[i] == l2[j] then\n      k\
    \ = k + 1\n      common_elements[k] = l1[i]\n      i = i + 1\n      j = j + 1\n\
    \    else\n      k = k + 1\n      common_elements[k] = l2[j]\n      j = j + 1\n\
    \    end\n  end\n  return common_elements\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgxesxjh.lua:25:\
    \ expected: {1, 5, 653}\nactual: {2=5, 3=7, 4=1, 5=5, 6=9, 7=653, 8=121}\nstack\
    \ traceback:\n\t/tmp/tmprgxesxjh.lua:25: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ true\n      end\n      j2 = j2 + 1\n    end\n    j1 = j1 + 1\n    i2 = i2 +\
    \ 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j1]\n    if e1 == e2 then\n\
    \      i1 = i1 + 1\n      j1 = j1 + 1\n    elseif e1 < e2 then\n      i1 = i1\
    \ + 1\n    else\n      j1 = j1 + 1\n    end\n  end\n  return l1[i1]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4vcgs73.lua:23:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpv4vcgs73.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j1 = j1 + 1\n      else\n        table.insert(common,\
    \ l2[j1])\n        j2 = j2 + 1\n      end\n    end\n    while j1 <= j2 do\n  \
    \    table.insert(common, l2[j1])\n      j2 = j2 + 1\n    end\n    while i1 <=\
    \ i2 do\n      table.insert(common, l1[i1])\n      i1 = i1 + 1\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        return\
    \ l1[i1]\n      end\n      j1 = j1 + 1\n    end\n    j1 = 1\n    i1 = i1 + 1\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gf37z2w.lua:21:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp2gf37z2w.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n        i2 = i2 + 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(l1,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    j1 = 1\n    i1 = i1 + 1\n  end\n  return l1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3fjyz4x.lua:23:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1, 653, 5, 1, 653}\n\
    stack traceback:\n\t/tmp/tmpy3fjyz4x.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  while i1 < i2 do\n    local e1 =\
    \ l1[i1]\n    local e2 = l2[i2]\n    if e1 == e2 then\n      i1 = i1 + 1\n   \
    \   i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      i2\
    \ = i2 + 1\n    end\n  end\n  return l1, l2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo1u_ueh7.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo1u_ueh7.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpo1u_ueh7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        return e1\n      end\n      j1 = j1 + 1\n\
    \    end\n    j2 = j2 + 1\n    i1 = i1 + 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xjsubp2.lua:23:\
    \ expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmp3xjsubp2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1\
    \ <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    while j1 <= j2 do\n\
    \      if e1 == l2[j1] then\n        table.insert(l1, e1)\n        break\n   \
    \   end\n      j1 = j1 + 1\n    end\n    j2 = j2 + 1\n    i1 = i1 + 1\n  end\n\
    \  return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjepy6voi.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 1}\nstack traceback:\n\
    \t/tmp/tmpjepy6voi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750340
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j1 = j1 + 1\n      end\n    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig1bgb8.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp0ig1bgb8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750340
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    j1 = j1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local common = {}\n  local i1 = 0\n  local i2 = 0\n  while\
    \ i1 < #l1 and i2 < #l2 do\n    if l1[i1] == l2[i2] then\n      table.insert(common,\
    \ l1[i1])\n      i1 = i1 + 1\n      i2 = i2 + 1\n    else\n      i1 = i1 + 1\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1xmhcw9.lua:21:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmph1xmhcw9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n\
    \        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750345
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif\
    \ l1[i1] < l2[j1] then\n        j2 = j2 - 1\n      else\n        i2 = i2 - 1\n\
    \      end\n    end\n    while j1 > 0 do\n      if l1[i1] == l2[j1] then\n   \
    \     table.insert(common, l1[i1])\n        i1 = i1 + 1\n      elseif l1[i1] >\
    \ l2[j1] then\n        j1 = j1 - 1\n      else\n        i2 = i2 - 1\n      end\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750350
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\nlocal function\
    \ common(l1, l2)\n  local i = 1\n  local j = 1\n  local k = 1\n  local l3 = {}\n\
    \  local l4 = {}\n  while i <= #l1 and j <= #l2 do\n    if l1.[i] == l2.[j] then\n\
    \      table.insert(l3, l1.[i])\n      table.insert(l4, l2.[j])\n      i = i +\
    \ 1\n      j = j + 1\n    else\n      if l1.[i] < l2.[j] then\n        k = k +\
    \ 1\n      else\n        k = k - 1\n      end\n    end\n  end\n  while i <= #l1\
    \ do\n    table.insert(l3, l1.[i])\n    i = i + 1\n  end\n  while j <= #l2 do\n\
    \    table.insert(l4, l2.[j])\n    j = j + 1\n  end\n  return l3, l4\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbxzr3v2w.lua:9: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750345
