language: lua
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, acc)))\n\
    \    return tri_aux\n  end\n  return tri_aux(n, tri_aux(n, tri_aux(n, 0)))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5d6m5sl.lua:29:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpk5d6m5sl.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b, c)\n        if n == 0 then\n   \
    \         return a\n        elseif n == 1 then\n            return b\n       \
    \ else\n            return tri_aux(n - 1, b, a + c, c)\n        end\n    end\n\
    \    return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisyrqq7y.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpisyrqq7y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri(n + 1)\n    end\n  end\n  return tri_aux(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nu8mbvv.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmp0nu8mbvv.lua:22: in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22: in\
    \ function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22: in function </tmp/tmp0nu8mbvv.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 1.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc)\n    local tri_aux = tri_aux(n\
    \ - 2, tri_aux + tri_aux + tri_aux + tri_aux)\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3mlbieu7.lua:21:\
    \ attempt to call a number value (local 'tri_aux')\nstack traceback:\n\t/tmp/tmp3mlbieu7.lua:21:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp3mlbieu7.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp3mlbieu7.lua:20:\
    \ in function </tmp/tmp3mlbieu7.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp3mlbieu7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    else\n      return tri_aux(n - 1, acc) + tri_aux(n - 2, acc + acc)\n    end\n\
    \  end\n  return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9k3kpokf.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp9k3kpokf.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp9k3kpokf.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp9k3kpokf.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp9k3kpokf.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp9k3kpokf.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp9k3kpokf.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp9k3kpokf.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp9k3kpokf.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp9k3kpokf.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp9k3kpokf.lua:20:\
    \ in function </tmp/tmp9k3kpokf.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp9k3kpokf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.250 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjvgqbkq3.lua:19: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1\n    else\n      return tri_aux(n - 1) +\
    \ tri_aux(n - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzp0ei9d5.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in function </tmp/tmpzp0ei9d5.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpzp0ei9d5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.370 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri(n - 1)\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph0jtvxt8.lua:27:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmph0jtvxt8.lua:27: in upvalue 'tri'\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmph0jtvxt8.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.600 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 0 then\n    return 0\n  elseif n == 1 then\n\
    \    return 1\n  else\n    -- Recursive case\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptysud2ix.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmptysud2ix.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmptysud2ix.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.310 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local result = {1,3,5}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n    i = i + 2\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbmrtilj9.lua:19:\
    \ attempt to perform arithmetic on a table value\nstack traceback:\n\t/tmp/tmpbmrtilj9.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpbmrtilj9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppj40hgy2.lua:27:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppj40hgy2.lua:27: in upvalue 'tri'\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmppj40hgy2.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.550 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return [3]\n  -- Recursive case\n\
    \  elseif n == 2 then\n    return [1]\n  -- Odd case\n  elseif n % 2 == 1 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Even case\n  else\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk7a5d70w.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- base case\n  if n == 1 then\n    return 3\n  -- recursive case\n\
    \  elseif n == 2 then\n    return 1 + 2\n  -- base case\n  elseif n == 3 then\n\
    \    return 1 + 2 + 3\n  -- recursive case\n  elseif n % 2 == 0 then\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- base case\n  else\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe84o2bvq.lua:37:\
    \ expected: {1, 3, 2, 8}\nactual: 6\nstack traceback:\n\t/tmp/tmpe84o2bvq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n \
    \   end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55kob6e3.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp55kob6e3.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp55kob6e3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.590 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- base case\n  if n == 1 then\n    return [3]\n  -- recursive case\n\
    \  elseif n == 2 then\n    return [3] + [2,1]\n  -- base case\n  elseif n == 3\
    \ then\n    return [3] + [3,2]\n  -- recursive case\n  elseif n % 2 == 0 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- base case\n  else\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppmkqrf57.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1, tri_aux(n - 1, acc))\n    else\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, acc) + tri(n - 2)))\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptl8jk84r.lua:24:\
    \ attempt to perform arithmetic on a table value\nstack traceback:\n\t/tmp/tmptl8jk84r.lua:24:\
    \ in function </tmp/tmptl8jk84r.lua:16>\n\t(...tail calls...)\n\t/tmp/tmptl8jk84r.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 1 then\n       \
    \     return acc\n        else\n            local tri_aux = tri_aux(n - 1, acc\
    \ + tri(n - 1) + tri(n - 2))\n            return tri_aux\n        end\n    end\n\
    \    return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkg1sti6i.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpkg1sti6i.lua:24: in upvalue 'tri'\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmpkg1sti6i.lua:20: in function </tmp/tmpkg1sti6i.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmpkg1sti6i.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.550 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1, acc)\n    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc) + acc))\n    end\n  end\n  return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd7pvmwy.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpvd7pvmwy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1wawx__.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpf1wawx__.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmpf1wawx__.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpf1wawx__.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpf1wawx__.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpf1wawx__.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpf1wawx__.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpf1wawx__.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpf1wawx__.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpf1wawx__.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpf1wawx__.lua:22:\
    \ in function </tmp/tmpf1wawx__.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpf1wawx__.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.360 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n    else\n      table.insert(acc, tri_aux(n - 1, acc))\n      table.insert(acc,\
    \ tri_aux(n - 2, acc))\n    end\n    return acc\n  end\n  return tri_aux(n, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeq0a13az.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 199975 levels)\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in function </tmp/tmpeq0a13az.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpeq0a13az.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.210 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\tlocal function tri_aux(n, acc)\n\t\tif n == 1 then\n\t\t\treturn acc\n\
    \t\telse\n\t\t\tlocal new_acc = tri_aux(n - 1, acc)\n\t\t\tnew_acc = new_acc +\
    \ (n / 2)\n\t\t\tif n % 2 == 0 then\n\t\t\t\tnew_acc = new_acc + tri_aux(n - 2,\
    \ new_acc)\n\t\t\tend\n\t\t\treturn new_acc\n\t\tend\n\tend\n\treturn tri_aux(n,\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg4mnj3n.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptg4mnj3n.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmptg4mnj3n.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmptg4mnj3n.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmptg4mnj3n.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmptg4mnj3n.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmptg4mnj3n.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmptg4mnj3n.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmptg4mnj3n.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmptg4mnj3n.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmptg4mnj3n.lua:20:\
    \ in function </tmp/tmptg4mnj3n.lua:16>\n\t(...tail calls...)\n\t/tmp/tmptg4mnj3n.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 0 then\n    return 0\n  -- Even case\n  elseif\
    \ n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Odd case\n\
    \  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvh7idzk9.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvh7idzk9.lua:24: in upvalue 'tri'\n\
    \t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24: in upvalue\
    \ 'tri'\n\t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpvh7idzk9.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 0 then\n      return 0\n  \
    \  end\n    if n == 1 then\n      return 1\n    end\n    return tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 3)\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxx2mzt6.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\
    \t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in function </tmp/tmpyxx2mzt6.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpyxx2mzt6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.370 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return { 1 }\n    else\n      local tri_aux = tri_aux(n\
    \ - 1, { acc[1] })\n      local tri_aux = tri_aux(n - 2, { acc[1], acc[2] })\n\
    \      return tri_aux\n    end\n  end\n  return tri_aux(n, { 1 })\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptel0k14z.lua:23:\
    \ attempt to call a table value (local 'tri_aux')\nstack traceback:\n\t/tmp/tmptel0k14z.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmptel0k14z.lua:22: in function </tmp/tmptel0k14z.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmptel0k14z.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2)\n    end\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgv3htgn.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 12\nstack traceback:\n\t/tmp/tmptgv3htgn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n\
    \      return tri_sum\n    end\n    tri_aux(n - 1, tri_aux, tri_sum + tri_aux(n\
    \ - 1, tri_aux, tri_sum))\n  end\n  return tri_aux(n, {}, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkdc1ek38.lua:20:\
    \ attempt to call a table value (local 'tri_aux')\nstack traceback:\n\t/tmp/tmpkdc1ek38.lua:20:\
    \ in function </tmp/tmpkdc1ek38.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpkdc1ek38.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 0 then\n      return 0\n  \
    \  end\n    if n == 1 then\n      return 1\n    end\n    return tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 3)\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxx2mzt6.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\
    \t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in function </tmp/tmpyxx2mzt6.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpyxx2mzt6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.370 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    end\n    local c = a + b\n    a = b\n    b = c\n    return tri_aux(n\
    \ - 1, b, c)\n  end\n  return tri_aux(n, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43z0t2ia.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 4\nstack traceback:\n\t/tmp/tmp43z0t2ia.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, a + b + c, b, c)\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pcqnw1h.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmp4pcqnw1h.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return [3]\n  end\n  -- Recursive\
    \ case\n  local tri_result = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  return tri_result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfh91ga_7.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    else\n      return tri_aux(n - 1, acc)\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtqklyok.lua:29:\
    \ expected: {1, 3, 2, 8}\nactual: {}\nstack traceback:\n\t/tmp/tmpjtqklyok.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n \
    \   end\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_3jf52dp.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_3jf52dp.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmp_3jf52dp.lua:24:\
    \ in function </tmp/tmp_3jf52dp.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp_3jf52dp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.370 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, a + b + c, b, c)\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pcqnw1h.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmp4pcqnw1h.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 1 then\n       \
    \     return acc\n        elseif n == 2 then\n            return tri_aux(n - 1,\
    \ acc)\n        else\n            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc) + tri(n - 2)))\n        end\n    end\n    return tri_aux(n, 0)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoh2rxy8.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpcoh2rxy8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, acc))\n    return\
    \ tri_aux + tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1aokjh2z.lua:29:\
    \ expected: {1, 3, 2, 8}\nactual: 384\nstack traceback:\n\t/tmp/tmp1aokjh2z.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux_1 = tri_aux(n - 1, acc)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, tri_aux_1 + tri_aux_1)\n    return tri_aux_2 + tri_aux_1\n  end\n  return\
    \ tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zosa0ra.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in function </tmp/tmp_zosa0ra.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp_zosa0ra.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.270 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri(n - 1)\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqvr_gu8.lua:27:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmphqvr_gu8.lua:27: in upvalue 'tri'\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmphqvr_gu8.lua:20: in function </tmp/tmphqvr_gu8.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmphqvr_gu8.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.580 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\tlocal function tri_aux(n, acc)\n\t\tif n == 1 then\n\t\t\ttable.insert(acc,\
    \ 1)\n\t\telseif n == 2 then\n\t\t\ttable.insert(acc, 2)\n\t\telse\n\t\t\tlocal\
    \ tri_aux_1 = tri_aux(n - 1, acc)\n\t\t\tlocal tri_aux_2 = tri_aux(n - 2, tri_aux_1\
    \ + tri_aux_1)\n\t\t\ttable.insert(acc, tri_aux_1 + tri_aux_2)\n\t\tend\n\tend\n\
    \ttri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxgmtltf.lua:23:\
    \ attempt to perform arithmetic on a nil value (local 'tri_aux_1')\nstack traceback:\n\
    \t/tmp/tmpcxgmtltf.lua:23: in local 'tri_aux'\n\t/tmp/tmpcxgmtltf.lua:27: in local\
    \ 'candidate'\n\t/tmp/tmpcxgmtltf.lua:33: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 0 then\n       \
    \     return acc\n        elseif n == 1 then\n            return acc\n       \
    \ else\n            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) +\
    \ acc))\n        end\n    end\n    return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s1k1h70.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 18\nstack traceback:\n\t/tmp/tmp4s1k1h70.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1)\n    end\n    return\
    \ tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwhy_6oe.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplwhy_6oe.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmplwhy_6oe.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.720 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc)\n    tri_aux = tri_aux + tri_aux\n\
    \    tri_aux = tri_aux + tri_aux\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6p__k5n.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 192\nstack traceback:\n\t/tmp/tmpn6p__k5n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive case\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1royzv30.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1royzv30.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmp1royzv30.lua:21: in upvalue 'tri'\n\t/tmp/tmp1royzv30.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmp1royzv30.lua:21: in upvalue 'tri'\n\t/tmp/tmp1royzv30.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp1royzv30.lua:21: in upvalue 'tri'\n\t/tmp/tmp1royzv30.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp1royzv30.lua:21: in upvalue 'tri'\n\t/tmp/tmp1royzv30.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmp1royzv30.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp1royzv30.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive case\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5o2ka9f_.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5o2ka9f_.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp5o2ka9f_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc)))\n    else\n      return\
    \ tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n - 2, acc)))))\n    end\n\
    \  end\n  return tri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp320xieiy.lua:24: ''end'' expected (to close ''if'' at line
    17) near '')''

    '
  stdout: ''
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + c, c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp627kkx87.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmp627kkx87.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n\
    \      tri_aux[1] = tri_sum\n      return\n    end\n    tri_aux[1] = tri_sum +\
    \ n / 2\n    tri_aux[2] = tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n\
    \    tri_aux[4] = tri_aux[3] + tri_aux[2]\n    tri_aux[5] = tri_aux[3] + tri_aux[4]\n\
    \    tri_aux[6] = tri_aux[5] + tri_aux[4]\n    tri_aux[7] = tri_aux[6] + tri_aux[4]\n\
    \    tri_aux[8] = tri_aux[7] + tri_aux[4]\n    tri_aux[9] = tri_aux[8] + tri_aux[4]\n\
    \    tri_aux[10] = tri_aux[9] + tri_aux[4]\n    tri_aux[11] = tri_aux[10] + tri_aux[4]\n\
    \    tri_aux[12] = tri_aux[11] + tri_aux[4]\n    tri_aux[13] = tri_aux[12] + tri_aux[4]\n\
    \    tri_aux[14] = tri_aux[13] + tri_aux[4]\n    tri_aux[15] = tri_aux[14] + tri_aux[4]\n\
    \    tri_aux[16] = tri_aux[15] + tri_aux[4]\n    tri_aux[17] = tri_aux[16] + tri_aux[4]\n\
    \    tri_aux[18] = tri_aux[17] + tri_aux[4]\n    tri_aux[19] = tri_aux[18] + tri_aux[4]\n\
    \    tri_aux[20] = tri_aux[19] + tri_aux[4]\n    tri_aux[21] = tri_aux[20] + tri_aux[4]\n\
    \    tri_aux[22] = tri_aux[21] + tri_aux[4]\n    tri_aux[23] = tri_aux[22] + tri_aux[4]\n\
    \    tri_aux[24] = tri_aux[23] + tri_aux[4]\n    tri_aux[25] = tri_aux[24] + tri_aux[4]\n\
    \    tri_aux[26] = tri_aux[25] + tri_aux[4]\n    tri_aux[27] = tri_aux[26] + tri_aux[4]\n\
    \    tri_aux[28] = tri_aux[27] + tri_aux[4]\n    tri_aux[29] = tri\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpohi_l8ud.lua:66: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri(n - 1)\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph0jtvxt8.lua:27:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmph0jtvxt8.lua:27: in upvalue 'tri'\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmph0jtvxt8.lua:20: in function </tmp/tmph0jtvxt8.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmph0jtvxt8.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.600 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\tlocal function tri_aux(n, acc)\n\t\tif n == 0 then\n\t\t\treturn acc\n\
    \t\telseif n == 1 then\n\t\t\treturn {acc[1], acc[2]}\n\t\telse\n\t\t\tlocal a\
    \ = tri_aux(n - 1, {acc[1], acc[2]})\n\t\t\tlocal b = tri_aux(n - 2, {acc[2],\
    \ acc[3]})\n\t\t\treturn {a[1], a[2], b[1], a[3], b[2], b[3]}\n\t\tend\n\tend\n\
    \treturn tri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl93d0tnt.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: {}\nstack traceback:\n\t/tmp/tmpl93d0tnt.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 0 then\n    return 0\n  elseif n == 1 then\n\
    \    return 1\n  else\n    -- Recursive case\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptysud2ix.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmptysud2ix.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmptysud2ix.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.310 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n    elseif n % 2 ==\
    \ 0 then\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n\
    \    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n\
    \ - 2) + tri(n - 1)))\n    end\n  end\n  return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3vonbga.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpn3vonbga.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + c, c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp627kkx87.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmp627kkx87.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n  \
    \    return tri_aux(n - 1) + tri_aux(n - 2) + tri(n / 2)\n    else\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n    end\n  end\n  return tri_aux(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo838fziz.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpo838fziz.lua:24: in upvalue 'tri_aux'\n\
    \t/tmp/tmpo838fziz.lua:22: in function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpo838fziz.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmpo838fziz.lua:22: in\
    \ function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpo838fziz.lua:22: in function </tmp/tmpo838fziz.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmpo838fziz.lua:22:\
    \ in function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:24:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmpo838fziz.lua:24:\
    \ in function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 1.240 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n    else\n      table.insert(acc, tri_aux(n - 1, acc))\n      table.insert(acc,\
    \ tri_aux(n - 2, acc))\n    end\n    return acc\n  end\n  return tri_aux(n, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeq0a13az.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 199975 levels)\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in function </tmp/tmpeq0a13az.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpeq0a13az.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.210 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n \
    \   end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rseu27r.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1rseu27r.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp1rseu27r.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.780 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 1 then\n       \
    \     table.insert(acc, 1)\n        else\n            local tri_aux_1 = tri_aux(n\
    \ - 1, acc)\n            local tri_aux_2 = tri_aux(n - 2, tri_aux_1 + tri_aux_1)\n\
    \            table.insert(acc, tri_aux_1 + tri_aux_2)\n        end\n        return\
    \ acc\n    end\n    return tri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4ykv0l3.lua:21:\
    \ attempt to perform arithmetic on a table value (local 'tri_aux_1')\nstack traceback:\n\
    \t/tmp/tmpq4ykv0l3.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpq4ykv0l3.lua:20: in\
    \ function </tmp/tmpq4ykv0l3.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpq4ykv0l3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 0 then\n    return 0\n  -- Even case\n  elseif\
    \ n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Odd case\n\
    \  else\n    return tri(n - 1) + tri(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyra9q5j3.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpyra9q5j3.lua:24: in upvalue 'tri'\n\
    \t/tmp/tmpyra9q5j3.lua:21: in upvalue 'tri'\n\t/tmp/tmpyra9q5j3.lua:24: in upvalue\
    \ 'tri'\n\t/tmp/tmpyra9q5j3.lua:21: in upvalue 'tri'\n\t/tmp/tmpyra9q5j3.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpyra9q5j3.lua:21: in upvalue 'tri'\n\t/tmp/tmpyra9q5j3.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpyra9q5j3.lua:21: in upvalue 'tri'\n\t/tmp/tmpyra9q5j3.lua:24:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpyra9q5j3.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpyra9q5j3.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.330 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc)\n    tri_aux = tri_aux + tri_aux\n\
    \    tri_aux = tri_aux + tri_aux\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6p__k5n.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 192\nstack traceback:\n\t/tmp/tmpn6p__k5n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri(n + 1)\n    end\n  end\n  return tri_aux(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nu8mbvv.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmp0nu8mbvv.lua:22: in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22: in\
    \ function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22: in function </tmp/tmp0nu8mbvv.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 1.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, acc))\n    if n %\
    \ 2 == 0 then\n      return tri_aux + tri_aux\n    else\n      return tri_aux\
    \ + tri_aux + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1l90bn8l.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 36\nstack traceback:\n\t/tmp/tmp1l90bn8l.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n\
    \  else\n    local a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    return a\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7s_lw0i0.lua:19: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1)\n    end\n    return\
    \ tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwhy_6oe.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplwhy_6oe.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmplwhy_6oe.lua:20: in function </tmp/tmplwhy_6oe.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmplwhy_6oe.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.720 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd42b_df5.lua:19: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, a + b, b)\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8gi7n7_.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpd8gi7n7_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n \
    \   end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rseu27r.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1rseu27r.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmp1rseu27r.lua:20: in function </tmp/tmp1rseu27r.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp1rseu27r.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.780 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    else\n      return tri_aux(n -\
    \ 1, acc) + tri_aux(n - 2, acc + acc)\n    end\n  end\n  return tri_aux(n, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl0w3f97q.lua:22:\
    \ attempt to perform arithmetic on a table value (local 'acc')\nstack traceback:\n\
    \t/tmp/tmpl0w3f97q.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpl0w3f97q.lua:22: in\
    \ function </tmp/tmpl0w3f97q.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpl0w3f97q.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, acc))\n    if n %\
    \ 2 == 0 then\n      return tri_aux + tri_aux\n    else\n      return tri_aux\
    \ + tri_aux + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3eotb9oj.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 2916\nstack traceback:\n\t/tmp/tmp3eotb9oj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n == 1 then\n    return [3]\n  elseif n == 2 then\n    return [1,\
    \ 3]\n  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03sjuzsv.lua:17: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc)\n    tri_aux = tri_aux + tri_aux\n\
    \    tri_aux = tri_aux + tri_aux\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6p__k5n.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 192\nstack traceback:\n\t/tmp/tmpn6p__k5n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n\
    \      return tri_sum\n    elseif n == 1 then\n      return tri_aux(n - 1, tri_sum,\
    \ tri_sum + tri_aux(n - 1, tri_sum, tri_sum))\n    else\n      return tri_aux(n\
    \ - 1, tri_sum + tri_aux(n - 2, tri_sum, tri_sum), tri_sum)\n    end\n  end\n\
    \  return tri_aux(n, 0, 0, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5trp2f9x.lua:22:\
    \ attempt to call a number value (local 'tri_aux')\nstack traceback:\n\t/tmp/tmp5trp2f9x.lua:22:\
    \ in function </tmp/tmp5trp2f9x.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp5trp2f9x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive case\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5o2ka9f_.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5o2ka9f_.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:21: in upvalue 'tri'\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmp5o2ka9f_.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp5o2ka9f_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + b, b + c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n \
    \   lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63jebm4c.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmp63jebm4c.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b)\n        if n == 0 then\n      \
    \      return a\n        elseif n == 1 then\n            return b\n        else\n\
    \            return tri_aux(n - 1, a + b, b)\n        end\n    end\n    return\
    \ tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnjp2q1k.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpgnjp2q1k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 0 then\n       \
    \     return acc\n        elseif n == 1 then\n            return acc\n       \
    \ elseif n % 2 == 0 then\n            return tri_aux(n - 1, tri_aux(n - 1, acc))\n\
    \        else\n            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1,\
    \ tri_aux(n - 2, acc)))))\n        end\n    end\n    return tri_aux(n, {})\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoexewed8.lua:24: ''end'' expected (to close ''if'' at line
    17) near '')''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w5i2x1u.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 5\nstack traceback:\n\t/tmp/tmp7w5i2x1u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b)\n        if n == 0 then\n      \
    \      return a\n        end\n        if n == 1 then\n            return b\n \
    \       end\n        return tri_aux(n - 1, a + b, b)\n    end\n    return tri_aux(n,\
    \ 3, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rqgsie5.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmp7rqgsie5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, acc))\n    if n %\
    \ 2 == 0 then\n      return tri_aux + tri_aux\n    else\n      return tri_aux\
    \ + tri_aux + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3eotb9oj.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 2916\nstack traceback:\n\t/tmp/tmp3eotb9oj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, tri_aux)\n    if n == 0 then\n      return\
    \ 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if n % 2 == 0 then\n\
    \      return tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1,\
    \ tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n\
    \ - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n -\
    \ 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - 1, tri_aux(n - \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8etox_11.lua:25: '')'' expected (to close ''('' at line 24)
    near ''=''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    acc = tri_aux(n - 3, acc + acc)\n    return acc\n  end\n  return tri_aux(n,\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1m_t7fj.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in function </tmp/tmpl1m_t7fj.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpl1m_t7fj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.250 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n    else\n      table.insert(acc, tri_aux(n - 1, acc))\n      table.insert(acc,\
    \ tri_aux(n - 2, acc))\n    end\n    return acc\n  end\n  return tri_aux(n, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeq0a13az.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 199975 levels)\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in function </tmp/tmpeq0a13az.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpeq0a13az.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.210 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    acc = tri_aux(n - 3, acc + acc)\n    return acc\n  end\n  return tri_aux(n,\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1m_t7fj.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpl1m_t7fj.lua:20:\
    \ in function </tmp/tmpl1m_t7fj.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpl1m_t7fj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.250 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2)\n    end\n  end\n  return\
    \ tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmm8d7s5_.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpmm8d7s5_.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmpmm8d7s5_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpmm8d7s5_.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpmm8d7s5_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpmm8d7s5_.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpmm8d7s5_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpmm8d7s5_.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpmm8d7s5_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpmm8d7s5_.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpmm8d7s5_.lua:22:\
    \ in function </tmp/tmpmm8d7s5_.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpmm8d7s5_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.360 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n)\n        if n == 1 then\n            return\
    \ 3\n        end\n        if n % 2 == 0 then\n            return tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 1)\n        else\n            return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2)\n        end\n    end\n\
    \    return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7agt82wf.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7agt82wf.lua:23: in upvalue 'tri_aux'\n\
    \t/tmp/tmp7agt82wf.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmp7agt82wf.lua:23: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp7agt82wf.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmp7agt82wf.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp7agt82wf.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmp7agt82wf.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp7agt82wf.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmp7agt82wf.lua:23:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmp7agt82wf.lua:23:\
    \ in function </tmp/tmp7agt82wf.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp7agt82wf.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.330 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return [3]\n  -- Recursive case\n\
    \  elseif n == 2 then\n    return [1]\n  -- Odd case\n  elseif n % 2 == 0 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Even case\n  else\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe1pfqvpm.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 0 then\n       \
    \     return acc\n        elseif n == 1 then\n            return acc\n       \
    \ else\n            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) +\
    \ acc))\n        end\n    end\n    return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s1k1h70.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 18\nstack traceback:\n\t/tmp/tmp4s1k1h70.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux_1 = tri_aux(n - 1, acc)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, tri_aux_1 + tri_aux_1)\n    return tri_aux_2 + tri_aux_1\n  end\n  return\
    \ tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zosa0ra.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp_zosa0ra.lua:20:\
    \ in function </tmp/tmp_zosa0ra.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp_zosa0ra.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.270 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n < 2 then return n end\n  return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdtj1gec.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxdtj1gec.lua:17: in upvalue 'tri'\n\
    \t/tmp/tmpxdtj1gec.lua:17: in upvalue 'tri'\n\t/tmp/tmpxdtj1gec.lua:17: in upvalue\
    \ 'tri'\n\t/tmp/tmpxdtj1gec.lua:17: in upvalue 'tri'\n\t/tmp/tmpxdtj1gec.lua:17:\
    \ in upvalue 'tri'\n\t/tmp/tmpxdtj1gec.lua:17: in upvalue 'tri'\n\t/tmp/tmpxdtj1gec.lua:17:\
    \ in upvalue 'tri'\n\t/tmp/tmpxdtj1gec.lua:17: in upvalue 'tri'\n\t/tmp/tmpxdtj1gec.lua:17:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmpxdtj1gec.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpxdtj1gec.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.240 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n  \
    \    return tri_aux(n - 1) + tri_aux(n - 2) + tri(n / 2)\n    else\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri(n / 2) + tri(n / 2)\n    end\n  end\n\
    \  return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz0mqx9u.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptz0mqx9u.lua:24: in upvalue 'tri_aux'\n\
    \t/tmp/tmptz0mqx9u.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmptz0mqx9u.lua:24: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmptz0mqx9u.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmptz0mqx9u.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmptz0mqx9u.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmptz0mqx9u.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmptz0mqx9u.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmptz0mqx9u.lua:24:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmptz0mqx9u.lua:24:\
    \ in function </tmp/tmptz0mqx9u.lua:16>\n\t(...tail calls...)\n\t/tmp/tmptz0mqx9u.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.380 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, a + b, b)\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8gi7n7_.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpd8gi7n7_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local result = {n}\n  if n <= 1 then return result end\n  local tri1\
    \ = tri(n - 1)\n  local tri2 = tri(n - 2)\n  local tri3 = tri(n - 3)\n  table.insert(result,\
    \ tri1)\n  table.insert(result, tri2)\n  table.insert(result, tri3)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n89k6lt.lua:30:\
    \ expected: {1, 3, 2, 8}\nactual: {3, {2, {1}, {0}, {-1}}, {1}, {0}}\nstack traceback:\n\
    \t/tmp/tmp8n89k6lt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\t-- Base case\n\tif n == 1 then\n\t\treturn {3}\n\tend\n\t-- Recursive\
    \ case\n\tlocal result = {}\n\tlocal i = 1\n\twhile i <= n do\n\t\ttable.insert(result,\
    \ i)\n\t\ti = i + 2\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5w7q40t.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 3}\nstack traceback:\n\t/tmp/tmph5w7q40t.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + c, c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp627kkx87.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmp627kkx87.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n    elseif n % 2 ==\
    \ 0 then\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc)))\n \
    \   else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n\
    \ - 2, acc)))))\n    end\n  end\n  return tri_aux(n, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzlwu6sat.lua:24: ''end'' expected (to close ''if'' at line
    17) near '')''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 0 then\n      return 0\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2)\n    end\n  end\n  return\
    \ tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcbob6iu.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 18\nstack traceback:\n\t/tmp/tmpdcbob6iu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, a + b + c, b, c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n \
    \   lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki08_8ve.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpki08_8ve.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1, acc)\n    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc) + acc))\n    end\n  end\n  return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd7pvmwy.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpvd7pvmwy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n \
    \   end\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtz2l5je.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 9\nstack traceback:\n\t/tmp/tmpqtz2l5je.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return 3\n  elseif n == 2 then\n\
    \    return 1\n  else\n    -- Recursive case\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg2i22zu0.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpg2i22zu0.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmpg2i22zu0.lua:23: in upvalue 'tri'\n\t/tmp/tmpg2i22zu0.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmpg2i22zu0.lua:23: in upvalue 'tri'\n\t/tmp/tmpg2i22zu0.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmpg2i22zu0.lua:23: in upvalue 'tri'\n\t/tmp/tmpg2i22zu0.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmpg2i22zu0.lua:23: in upvalue 'tri'\n\t/tmp/tmpg2i22zu0.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmpg2i22zu0.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpg2i22zu0.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return 3\n  -- Recursive case\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80hsuhau.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp80hsuhau.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmp80hsuhau.lua:21: in upvalue 'tri'\n\t/tmp/tmp80hsuhau.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmp80hsuhau.lua:21: in upvalue 'tri'\n\t/tmp/tmp80hsuhau.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp80hsuhau.lua:21: in upvalue 'tri'\n\t/tmp/tmp80hsuhau.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmp80hsuhau.lua:21: in upvalue 'tri'\n\t/tmp/tmp80hsuhau.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmp80hsuhau.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp80hsuhau.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.370 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n\
    \  else\n    local a, b, c = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    return\
    \ a + b + c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg6zjbkjb.lua:19: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, acc))\n    tri_aux\
    \ = tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, tri_aux(n - 2, acc))))\n    return\
    \ tri_aux\n  end\n  return tri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3lieok7c.lua:21:\
    \ attempt to call a table value (local 'tri_aux')\nstack traceback:\n\t/tmp/tmp3lieok7c.lua:21:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp3lieok7c.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp3lieok7c.lua:20:\
    \ in function </tmp/tmp3lieok7c.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp3lieok7c.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n    elseif n % 2 ==\
    \ 0 then\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n\
    \    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n\
    \ - 2) + tri(n - 1)))\n    end\n  end\n  return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3vonbga.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpn3vonbga.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n    elseif n == 2 then\n      table.insert(acc, 3)\n    else\n      table.insert(acc,\
    \ tri_aux(n - 1, acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n\
    \    return acc\n  end\n  return tri_aux(n, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k9bo7tw.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: <table 01> {3, <table 01>, 1, <table 01>}\n\
    stack traceback:\n\t/tmp/tmp_k9bo7tw.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, tri_1, tri_2)\n    if n == 0 then\n    \
    \  return tri_1\n    elseif n == 1 then\n      return tri_2\n    else\n      return\
    \ tri_1 + tri_2 + tri_aux(n - 1, tri_1, tri_2)\n    end\n  end\n  return tri_aux(n,\
    \ 3, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5mylr3o.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 9\nstack traceback:\n\t/tmp/tmpg5mylr3o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n\
    \      return tri_sum\n    end\n    tri_aux = (tri_aux[1] or 0) + n\n    if n\
    \ % 2 == 0 then\n      tri_sum = tri_sum + tri_aux\n    end\n    return tri_aux\n\
    \  end\n  return tri_aux(n, {}, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6s9pg0a.lua:32:\
    \ expected: {1, 3, 2, 8}\nactual: 3\nstack traceback:\n\t/tmp/tmpv6s9pg0a.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      return tri_aux\n    end\n    return tri_aux(n -\
    \ 1, tri_aux(n - 2, acc))\n  end\n  return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqojryft.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprqojryft.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmprqojryft.lua:20: in function </tmp/tmprqojryft.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmprqojryft.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.500 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n)\n        if n == 1 then\n            return\
    \ 3\n        elseif n == 2 then\n            return 1\n        elseif n == 3 then\n\
    \            return 2\n        else\n            return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 3)\n        end\n    end\n    return tri_aux(n)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n \
    \   lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfijn3wo8.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 2\nstack traceback:\n\t/tmp/tmpfijn3wo8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n    else\n      table.insert(acc, tri_aux(n - 1, acc))\n      table.insert(acc,\
    \ tri_aux(n - 2, acc))\n    end\n    return acc\n  end\n  return tri_aux(n, {})\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeq0a13az.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 199975 levels)\n\t/tmp/tmpeq0a13az.lua:20:\
    \ in function </tmp/tmpeq0a13az.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpeq0a13az.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.210 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n \
    \   end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55kob6e3.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp55kob6e3.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp55kob6e3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.590 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b, c)\n        if n == 0 then\n   \
    \         return a\n        end\n        if n == 1 then\n            return b\n\
    \        end\n        return tri_aux(n - 1, b, a + c, c)\n    end\n    return\
    \ tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpve7pwfsa.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpve7pwfsa.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n)\n        if n == 1 then\n            return\
    \ 3\n        elseif n == 2 then\n            return 1 + n / 2\n        else\n\
    \            return tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n        end\n\
    \    end\n    return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppmj1ji8z.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppmj1ji8z.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmppmj1ji8z.lua:22: in function </tmp/tmppmj1ji8z.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppmj1ji8z.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmppmj1ji8z.lua:22: in\
    \ function </tmp/tmppmj1ji8z.lua:16>\n\t(...tail calls...)\n\t/tmp/tmppmj1ji8z.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmppmj1ji8z.lua:22: in function </tmp/tmppmj1ji8z.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmppmj1ji8z.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmppmj1ji8z.lua:22:\
    \ in function </tmp/tmppmj1ji8z.lua:16>\n\t(...tail calls...)\n\t/tmp/tmppmj1ji8z.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmppmj1ji8z.lua:22:\
    \ in function </tmp/tmppmj1ji8z.lua:16>\n\t(...tail calls...)\n\t/tmp/tmppmj1ji8z.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.850 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ i)\n    i = i + 2\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rew1n2c.lua:28:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 1, 3}\nstack traceback:\n\t/tmp/tmp5rew1n2c.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return 3\n  else\n    -- Recursive\
    \ case\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiljr6ewj.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpiljr6ewj.lua:21: in upvalue 'tri'\n\
    \t/tmp/tmpiljr6ewj.lua:21: in upvalue 'tri'\n\t/tmp/tmpiljr6ewj.lua:21: in upvalue\
    \ 'tri'\n\t/tmp/tmpiljr6ewj.lua:21: in upvalue 'tri'\n\t/tmp/tmpiljr6ewj.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmpiljr6ewj.lua:21: in upvalue 'tri'\n\t/tmp/tmpiljr6ewj.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmpiljr6ewj.lua:21: in upvalue 'tri'\n\t/tmp/tmpiljr6ewj.lua:21:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpiljr6ewj.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpiljr6ewj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    else\n      return tri_aux(n -\
    \ 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n    end\n  end\n  return tri_aux(n,\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvg5_fq3n.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpvg5_fq3n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri_aux\n    end\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppj40hgy2.lua:27:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppj40hgy2.lua:27: in upvalue 'tri'\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmppj40hgy2.lua:20: in function </tmp/tmppj40hgy2.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmppj40hgy2.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.550 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjvgqbkq3.lua:19: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 1 then\n       \
    \     table.insert(acc, 1)\n        else\n            tri_aux(n - 1, acc)\n  \
    \          tri_aux(n - 2, acc)\n            table.insert(acc, 1 + n / 2)\n   \
    \     end\n    end\n    tri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzsj2s6qq.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzsj2s6qq.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpzsj2s6qq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzsj2s6qq.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpzsj2s6qq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzsj2s6qq.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzsj2s6qq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzsj2s6qq.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzsj2s6qq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzsj2s6qq.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpzsj2s6qq.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpzsj2s6qq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + c, c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp627kkx87.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmp627kkx87.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc,\
    \ 1)\n      return acc\n    end\n    table.insert(acc, tri_aux(n - 1, acc))\n\
    \    table.insert(acc, tri_aux(n - 2, acc))\n    table.insert(acc, tri_aux(n -\
    \ 3, acc))\n    return acc\n  end\n  return tri_aux(n, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbc5o9pcc.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpbc5o9pcc.lua:21: in upvalue 'tri_aux'\n\
    \t/tmp/tmpbc5o9pcc.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpbc5o9pcc.lua:21: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpbc5o9pcc.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpbc5o9pcc.lua:21:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpbc5o9pcc.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpbc5o9pcc.lua:21:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpbc5o9pcc.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpbc5o9pcc.lua:21:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 199975 levels)\n\t/tmp/tmpbc5o9pcc.lua:21:\
    \ in function </tmp/tmpbc5o9pcc.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpbc5o9pcc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.200 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local result = {1,3,5}\n  if n <= 1 then return result[n] end\n  if\
    \ n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) end\n  return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2tjha24.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpi2tjha24.lua:18:\
    \ in upvalue 'tri'\n\t/tmp/tmpi2tjha24.lua:19: in local 'candidate'\n\t/tmp/tmpi2tjha24.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 0 then\n    return 0\n  -- Even case\n  elseif\
    \ n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Odd case\n\
    \  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvh7idzk9.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvh7idzk9.lua:24: in upvalue 'tri'\n\
    \t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24: in upvalue\
    \ 'tri'\n\t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:21: in upvalue 'tri'\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpvh7idzk9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpvh7idzk9.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 0 then\n      return 0\n  \
    \  elseif n == 1 then\n      return 1\n    else\n      return tri_aux(n - 1) +\
    \ tri_aux(n - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzih7p59.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpuzih7p59.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmpuzih7p59.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpuzih7p59.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpuzih7p59.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpuzih7p59.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpuzih7p59.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpuzih7p59.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpuzih7p59.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpuzih7p59.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpuzih7p59.lua:22:\
    \ in function </tmp/tmpuzih7p59.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpuzih7p59.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.300 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, a + b, b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfjl5hir.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpxfjl5hir.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri(n + 1)\n    end\n  end\n  return tri_aux(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nu8mbvv.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmp0nu8mbvv.lua:22: in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22: in\
    \ function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22: in function </tmp/tmp0nu8mbvv.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmp0nu8mbvv.lua:22:\
    \ in function </tmp/tmp0nu8mbvv.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp0nu8mbvv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 1.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 0 then\n    return 0\n  end\n  -- Recursive\
    \ case\n  if n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  else\n    return tri(n - 1) + tri(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsais6d7z.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpsais6d7z.lua:24: in upvalue 'tri'\n\
    \t/tmp/tmpsais6d7z.lua:22: in upvalue 'tri'\n\t/tmp/tmpsais6d7z.lua:24: in upvalue\
    \ 'tri'\n\t/tmp/tmpsais6d7z.lua:22: in upvalue 'tri'\n\t/tmp/tmpsais6d7z.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpsais6d7z.lua:22: in upvalue 'tri'\n\t/tmp/tmpsais6d7z.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpsais6d7z.lua:22: in upvalue 'tri'\n\t/tmp/tmpsais6d7z.lua:24:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpsais6d7z.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpsais6d7z.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    \n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    \n    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n\
    \ - 2)\n    end\n    \n    return tri_aux\n  end\n  \n  return tri_aux(n, 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgnuliino.lua:30:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpgnuliino.lua:30: in upvalue 'tri'\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmpgnuliino.lua:21: in function </tmp/tmpgnuliino.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmpgnuliino.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.560 seconds, 0 successes, 1 error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n  \
    \    return tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n    else\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1) + tri(n + 2)\n    end\n  end\n\
    \  return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4is_v39m.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp4is_v39m.lua:24: in upvalue 'tri_aux'\n\
    \t/tmp/tmp4is_v39m.lua:22: in function </tmp/tmp4is_v39m.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp4is_v39m.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp4is_v39m.lua:22: in\
    \ function </tmp/tmp4is_v39m.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp4is_v39m.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp4is_v39m.lua:22: in function </tmp/tmp4is_v39m.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp4is_v39m.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp4is_v39m.lua:22:\
    \ in function </tmp/tmp4is_v39m.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp4is_v39m.lua:24:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmp4is_v39m.lua:24:\
    \ in function </tmp/tmp4is_v39m.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp4is_v39m.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.810 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1)\n    else\n      return tri_aux(n\
    \ - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n \
    \   end\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_3jf52dp.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_3jf52dp.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp_3jf52dp.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmp_3jf52dp.lua:24:\
    \ in function </tmp/tmp_3jf52dp.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp_3jf52dp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.370 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\tlocal function tri_aux(n, sum)\n\t\tif n == 1 then\n\t\t\tsum[1] =\
    \ 3\n\t\telse\n\t\t\tsum[1] = sum[1] + n / 2\n\t\t\tif n % 2 == 0 then\n\t\t\t\
    \tsum[2] = sum[1] + sum[2]\n\t\t\telse\n\t\t\t\tsum[2] = sum[1] + sum[2] + sum[3]\n\
    \t\t\tend\n\t\tend\n\t\treturn sum\n\tend\n\tlocal sum = {}\n\tsum[1] = n + 1\n\
    \treturn tri_aux(n, sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_77qxaz_.lua:24:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp_77qxaz_.lua:24: in function </tmp/tmp_77qxaz_.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp_77qxaz_.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\tlocal function tri_aux(n, a, b)\n\t\tif n == 0 then\n\t\t\treturn\
    \ a\n\t\telseif n == 1 then\n\t\t\treturn b\n\t\telse\n\t\t\treturn tri_aux(n\
    \ - 1, b, a + b)\n\t\tend\n\tend\n\treturn tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqjyqt3a.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 5\nstack traceback:\n\t/tmp/tmprqjyqt3a.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, a + b, a + b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdrrj7we.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 8\nstack traceback:\n\t/tmp/tmpbdrrj7we.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return [3]\n  -- Recursive case\n\
    \  elseif n % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ -- Odd case\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6uj_8wkp.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, b, a + c, c)\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchelhugp.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpchelhugp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    \n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2\
    \ = tri_aux(n - 2, acc + tri_aux_1 + tri_aux_1)\n    \n    return tri_aux_1 +\
    \ tri_aux_2 + tri_aux_2\n  end\n  \n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0nrcdai.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpz0nrcdai.lua:21: in upvalue 'tri_aux'\n\
    \t/tmp/tmpz0nrcdai.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpz0nrcdai.lua:21: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpz0nrcdai.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpz0nrcdai.lua:21:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpz0nrcdai.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpz0nrcdai.lua:21:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpz0nrcdai.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpz0nrcdai.lua:21:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpz0nrcdai.lua:21:\
    \ in function </tmp/tmpz0nrcdai.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpz0nrcdai.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.210 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\t-- Base case\n\tif n == 1 then\n\t\treturn 3\n\tend\n\t-- Recursive\
    \ case\n\treturn tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfje6s7z3.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpfje6s7z3.lua:21: in upvalue 'tri'\n\
    \t/tmp/tmpfje6s7z3.lua:21: in upvalue 'tri'\n\t/tmp/tmpfje6s7z3.lua:21: in upvalue\
    \ 'tri'\n\t/tmp/tmpfje6s7z3.lua:21: in upvalue 'tri'\n\t/tmp/tmpfje6s7z3.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmpfje6s7z3.lua:21: in upvalue 'tri'\n\t/tmp/tmpfje6s7z3.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmpfje6s7z3.lua:21: in upvalue 'tri'\n\t/tmp/tmpfje6s7z3.lua:21:\
    \ in upvalue 'tri'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpfje6s7z3.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpfje6s7z3.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    \n    local tri_aux_aux = tri_aux(n - 1, acc)\n    \n    if n %\
    \ 2 == 0 then\n      tri_aux_aux = tri_aux_aux + tri_aux(n - 1, tri_aux_aux +\
    \ tri_aux(n - 2, tri_aux_aux))\n    end\n    \n    return tri_aux_aux\n  end\n\
    \  \n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxrc0p2y.lua:36:\
    \ expected: {1, 3, 2, 8}\nactual: 9\nstack traceback:\n\t/tmp/tmpxxrc0p2y.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a, b, c\n    end\n    local new_a = a + b\n    local new_b = a + c\n    local\
    \ new_c = b + c\n    return tri_aux(n - 1, new_a, new_b, new_c)\n  end\n  return\
    \ tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e54k6lc.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 2\nstack traceback:\n\t/tmp/tmp1e54k6lc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\t-- Base case\n\tif n == 1 then\n\t\treturn {3}\n\t-- Odd case\n\t\
    elseif n % 2 == 1 then\n\t\treturn {tri(n - 1) + tri(n - 2) + tri(n + 1)}\n\t\
    -- Even case\n\telse\n\t\treturn {tri(n - 1) + tri(n - 2)}\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfuoi53t4.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpfuoi53t4.lua:21: in upvalue 'tri'\n\
    \t/tmp/tmpfuoi53t4.lua:24: in upvalue 'tri'\n\t/tmp/tmpfuoi53t4.lua:21: in upvalue\
    \ 'tri'\n\t/tmp/tmpfuoi53t4.lua:24: in upvalue 'tri'\n\t/tmp/tmpfuoi53t4.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmpfuoi53t4.lua:24: in upvalue 'tri'\n\t/tmp/tmpfuoi53t4.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmpfuoi53t4.lua:24: in upvalue 'tri'\n\t/tmp/tmpfuoi53t4.lua:21:\
    \ in upvalue 'tri'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpfuoi53t4.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpfuoi53t4.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.810 seconds, 0 successes, 1 error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 0 then\n      return 0\n  \
    \  end\n    if n == 1 then\n      return 1\n    end\n    return tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 3)\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyxx2mzt6.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\
    \t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23: in upvalue 'tri_aux'\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpyxx2mzt6.lua:23:\
    \ in function </tmp/tmpyxx2mzt6.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpyxx2mzt6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.370 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w5i2x1u.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 5\nstack traceback:\n\t/tmp/tmp7w5i2x1u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgzcv1dyi.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpgzcv1dyi.lua:18: in upvalue 'tri'\n\
    \t/tmp/tmpgzcv1dyi.lua:18: in upvalue 'tri'\n\t/tmp/tmpgzcv1dyi.lua:18: in upvalue\
    \ 'tri'\n\t/tmp/tmpgzcv1dyi.lua:18: in upvalue 'tri'\n\t/tmp/tmpgzcv1dyi.lua:18:\
    \ in upvalue 'tri'\n\t/tmp/tmpgzcv1dyi.lua:18: in upvalue 'tri'\n\t/tmp/tmpgzcv1dyi.lua:18:\
    \ in upvalue 'tri'\n\t/tmp/tmpgzcv1dyi.lua:18: in upvalue 'tri'\n\t/tmp/tmpgzcv1dyi.lua:18:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmpgzcv1dyi.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpgzcv1dyi.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\t-- Base case\n\tif n == 0 then\n\t\treturn {0, 1, 1}\n\tend\n\t--\
    \ Recursive case\n\tlocal a, b, c = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\treturn\
    \ a, b, c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rpepe5t.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp9rpepe5t.lua:21: in upvalue 'tri'\n\
    \t/tmp/tmp9rpepe5t.lua:21: in upvalue 'tri'\n\t/tmp/tmp9rpepe5t.lua:21: in upvalue\
    \ 'tri'\n\t/tmp/tmp9rpepe5t.lua:21: in upvalue 'tri'\n\t/tmp/tmp9rpepe5t.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmp9rpepe5t.lua:21: in upvalue 'tri'\n\t/tmp/tmp9rpepe5t.lua:21:\
    \ in upvalue 'tri'\n\t/tmp/tmp9rpepe5t.lua:21: in upvalue 'tri'\n\t/tmp/tmp9rpepe5t.lua:21:\
    \ in upvalue 'tri'\n\t...\t(skipping 499953 levels)\n\t/tmp/tmp9rpepe5t.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp9rpepe5t.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w5i2x1u.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 5\nstack traceback:\n\t/tmp/tmp7w5i2x1u.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return [3]\n  -- Recursive case\n\
    \  elseif n == 2 then\n    return [1]\n  -- Odd case\n  elseif n % 2 == 1 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  -- Even case\n  else\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbn13c_wb.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    local new_acc = tri_aux(n - 1, acc)\n    return tri_aux(n - 1, new_acc)\n\
    \  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1f_a6x3.lua:29:\
    \ expected: {1, 3, 2, 8}\nactual: 3\nstack traceback:\n\t/tmp/tmph1f_a6x3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1\n    elseif n == 3 then\n      return 2\n\
    \    elseif n % 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 3)\n    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\
    \ + tri_aux(n - 4)\n    end\n  end\n  return tri_aux(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn067ow_.lua:35:\
    \ expected: {1, 3, 2, 8}\nactual: 2\nstack traceback:\n\t/tmp/tmpmn067ow_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n - 1, tri_aux(n - 1, acc))\n    else\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, tri_aux(n - 2, acc))))\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuodg99vn.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: {}\nstack traceback:\n\t/tmp/tmpuodg99vn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    \n    local tri_aux2\n    tri_aux2 = function(n)\n      local tri_aux3\
    \ = function(n)\n        return tri_aux(n + 1) + tri_aux(n + 2) + tri_aux(n +\
    \ 3)\n      end\n      return tri_aux3(n)\n    end\n    \n    return tri_aux2(n)\n\
    \  end\n  \n  return tri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxu89gu2.lua:29:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmphxu89gu2.lua:29: in upvalue 'tri_aux'\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\t(...tail calls...)\n\
    \t...\t(skipping 499954 levels)\n\t/tmp/tmphxu89gu2.lua:24: in function </tmp/tmphxu89gu2.lua:23>\n\
    \t(...tail calls...)\n\t/tmp/tmphxu89gu2.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.800 seconds, 0 successes, 1 error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  if n < 1 then return nil end\n  if n == 1 then return 3 end\n  if\
    \ n == 2 then return 1 end\n  local a = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcdyqhix.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptcdyqhix.lua:19: in upvalue 'tri'\n\
    \t/tmp/tmptcdyqhix.lua:19: in upvalue 'tri'\n\t/tmp/tmptcdyqhix.lua:19: in upvalue\
    \ 'tri'\n\t/tmp/tmptcdyqhix.lua:19: in upvalue 'tri'\n\t/tmp/tmptcdyqhix.lua:19:\
    \ in upvalue 'tri'\n\t/tmp/tmptcdyqhix.lua:19: in upvalue 'tri'\n\t/tmp/tmptcdyqhix.lua:19:\
    \ in upvalue 'tri'\n\t/tmp/tmptcdyqhix.lua:19: in upvalue 'tri'\n\t/tmp/tmptcdyqhix.lua:19:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmptcdyqhix.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmptcdyqhix.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b)\n        if n == 0 then\n      \
    \      return a\n        end\n        if n == 1 then\n            return b\n \
    \       end\n        return tri_aux(n - 1, a + b, b)\n    end\n    return tri_aux(n,\
    \ 3, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rqgsie5.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmp7rqgsie5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n  \
    \    return tri_aux(n - 1) + tri_aux(n - 2) + tri(n / 2)\n    else\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n    end\n  end\n  return tri_aux(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo838fziz.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpo838fziz.lua:24: in upvalue 'tri_aux'\n\
    \t/tmp/tmpo838fziz.lua:22: in function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmpo838fziz.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmpo838fziz.lua:22: in\
    \ function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpo838fziz.lua:22: in function </tmp/tmpo838fziz.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmpo838fziz.lua:22:\
    \ in function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:24:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmpo838fziz.lua:24:\
    \ in function </tmp/tmpo838fziz.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpo838fziz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 1.240 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case: Tribonacci sequence is defined for even and odd numbers.\n\
    \  if n <= 1 then\n    return [1]\n  else\n    -- Recursive case: Tribonacci sequence\
    \ is defined for even and odd numbers.\n    if n % 2 == 0 then\n      -- Tribonacci\
    \ sequence is defined for even numbers.\n      return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else\n      -- Tribonacci sequence is defined for odd numbers.\n\
    \      return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_y6mdeit.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 3, tri_aux(n\
    \ - 1, acc))))\n    return tri_aux\n  end\n  return tri_aux(n, {})\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n   \
    \ lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadywjiur.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpadywjiur.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpadywjiur.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpadywjiur.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpadywjiur.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpadywjiur.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpadywjiur.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpadywjiur.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpadywjiur.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpadywjiur.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 111092 levels)\n\t/tmp/tmpadywjiur.lua:20:\
    \ in function </tmp/tmpadywjiur.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpadywjiur.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.090 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b, c)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, b, a + b, c + a)\n  end\n  return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiny1irr8.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpiny1irr8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1\n    else\n      return tri_aux(n - 1) +\
    \ tri_aux(n - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzp0ei9d5.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpzp0ei9d5.lua:22:\
    \ in function </tmp/tmpzp0ei9d5.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpzp0ei9d5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.370 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\tlocal function tri_aux(n, tri_1, tri_2)\n\t\tif n == 0 then\n\t\t\t\
    return tri_1, tri_2\n\t\telseif n == 1 then\n\t\t\treturn tri_1 + tri_2, tri_1\
    \ + tri_2\n\t\telse\n\t\t\treturn tri_aux(n - 1, tri_1 + tri_2, tri_1 + tri_2\
    \ + tri_1)\n\t\tend\n\tend\n\treturn tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvprcnmq.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 26\nstack traceback:\n\t/tmp/tmptvprcnmq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc)\n    local tri_aux = tri_aux(n\
    \ - 1, tri_aux + tri_aux + tri_aux)\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnperxtbf.lua:21:\
    \ attempt to call a number value (local 'tri_aux')\nstack traceback:\n\t/tmp/tmpnperxtbf.lua:21:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpnperxtbf.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpnperxtbf.lua:20:\
    \ in function </tmp/tmpnperxtbf.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpnperxtbf.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ i)\n    i = i + 2\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rew1n2c.lua:28:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 1, 3}\nstack traceback:\n\t/tmp/tmp5rew1n2c.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return [3]\n  -- Recursive case\n\
    \  elseif n == 2 then\n    return [1]\n  -- Odd case\n  elseif n % 2 == 1 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  -- Even case\n  else\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpijmpdhky.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, b, a + b)\n  end\n  return tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p0x15hc.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 5\nstack traceback:\n\t/tmp/tmp6p0x15hc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b, c)\n        if n == 0 then\n   \
    \         return a, b, c\n        end\n        if n % 2 == 0 then\n          \
    \  return tri_aux(n - 1, b, a + b + c, a)\n        else\n            return tri_aux(n\
    \ - 1, c, a + b + c, b)\n        end\n    end\n    return tri_aux(n, 0, 0, 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ifpxo2l.lua:32:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmp6ifpxo2l.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n  \
    \    return tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1)\n    else\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri(n + 1) + tri(n - 1)\n    end\n  end\n\
    \  return tri_aux(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppkwkow7a.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppkwkow7a.lua:24: in upvalue 'tri_aux'\n\
    \t/tmp/tmppkwkow7a.lua:22: in function </tmp/tmppkwkow7a.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppkwkow7a.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmppkwkow7a.lua:22: in\
    \ function </tmp/tmppkwkow7a.lua:16>\n\t(...tail calls...)\n\t/tmp/tmppkwkow7a.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmppkwkow7a.lua:22: in function </tmp/tmppkwkow7a.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmppkwkow7a.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmppkwkow7a.lua:22:\
    \ in function </tmp/tmppkwkow7a.lua:16>\n\t(...tail calls...)\n\t/tmp/tmppkwkow7a.lua:24:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmppkwkow7a.lua:24:\
    \ in function </tmp/tmppkwkow7a.lua:16>\n\t(...tail calls...)\n\t/tmp/tmppkwkow7a.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.850 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 1 then\n    return [3]\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ih7ommv.lua:18: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- base case\n  if n == 0 then\n    return 0\n  elseif n == 1 then\n\
    \    return 1\n  else\n    -- recursive case\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplije3_7x.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplije3_7x.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmplije3_7x.lua:23: in upvalue 'tri'\n\t/tmp/tmplije3_7x.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmplije3_7x.lua:23: in upvalue 'tri'\n\t/tmp/tmplije3_7x.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmplije3_7x.lua:23: in upvalue 'tri'\n\t/tmp/tmplije3_7x.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmplije3_7x.lua:23: in upvalue 'tri'\n\t/tmp/tmplije3_7x.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmplije3_7x.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmplije3_7x.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    elseif n == 1 then\n      return acc\n    elseif n % 2 == 0 then\n      return\
    \ tri_aux(n / 2, tri_aux(n - 1, acc + (n / 2)))\n    else\n      return tri_aux(n\
    \ / 2, tri_aux(n - 1, acc + (n / 2)) + tri_aux(n - 2, acc + (n / 2)))\n    end\n\
    \  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8tgm1asr.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8tgm1asr.lua:24: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8tgm1asr.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp8tgm1asr.lua:24: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8tgm1asr.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp8tgm1asr.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8tgm1asr.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp8tgm1asr.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8tgm1asr.lua:24: in upvalue 'tri_aux'\n\t/tmp/tmp8tgm1asr.lua:24:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 199975 levels)\n\t/tmp/tmp8tgm1asr.lua:24:\
    \ in function </tmp/tmp8tgm1asr.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8tgm1asr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.200 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b, c)\n        if n == 0 then\n   \
    \         return a\n        elseif n == 1 then\n            return b\n       \
    \ else\n            return tri_aux(n - 1, b, a + c, c)\n        end\n    end\n\
    \    return tri_aux(n, 0, 0, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisyrqq7y.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpisyrqq7y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979225
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, tri_aux(n - 1, acc))\n    if n %\
    \ 2 == 1 then\n      tri_aux = tri_aux + tri_aux\n    end\n    return tri_aux\n\
    \  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7471whs.lua:32:\
    \ expected: {1, 3, 2, 8}\nactual: 96\nstack traceback:\n\t/tmp/tmpv7471whs.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n)\n        if n == 1 then\n            return\
    \ 3\n        elseif n % 2 == 0 then\n            return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1)\n        else\n            return tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 1)\n        end\n    end\n    return tri_aux(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv191siq_.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpv191siq_.lua:22: in upvalue 'tri_aux'\n\
    \t/tmp/tmpv191siq_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpv191siq_.lua:22: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpv191siq_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpv191siq_.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpv191siq_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpv191siq_.lua:22:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpv191siq_.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpv191siq_.lua:22:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 499955 levels)\n\t/tmp/tmpv191siq_.lua:22:\
    \ in function </tmp/tmpv191siq_.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpv191siq_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.310 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 1 then\n       \
    \     table.insert(acc, 1)\n        else\n            local tri_aux_1 = tri_aux(n\
    \ - 1, acc)\n            local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n \
    \           table.insert(acc, tri_aux_1 + tri_aux_2)\n        end\n    end\n \
    \   tri_aux(n, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsf8demif.lua:21:\
    \ attempt to perform arithmetic on a table value (local 'acc')\nstack traceback:\n\
    \t/tmp/tmpsf8demif.lua:21: in upvalue 'tri_aux'\n\t/tmp/tmpsf8demif.lua:20: in\
    \ local 'tri_aux'\n\t/tmp/tmpsf8demif.lua:25: in local 'candidate'\n\t/tmp/tmpsf8demif.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b)\n        if n == 0 then\n      \
    \      return a\n        elseif n == 1 then\n            return b\n        else\n\
    \            return tri_aux(n - 1, a + b, b)\n        end\n    end\n    return\
    \ tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnjp2q1k.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpgnjp2q1k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case: Tribonacci sequence is defined for n = 0 and n = 1.\n\
    \  if n == 0 or n == 1 then\n    return 3\n  -- Base case: Tribonacci sequence\
    \ is defined for n = 2.\n  elseif n == 2 then\n    return 1 + n / 2\n  -- Recursive\
    \ case: Tribonacci sequence is defined for n > 2.\n  else\n    return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprkcrcvb0.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprkcrcvb0.lua:24: in upvalue 'tri'\n\
    \t/tmp/tmprkcrcvb0.lua:24: in upvalue 'tri'\n\t/tmp/tmprkcrcvb0.lua:24: in upvalue\
    \ 'tri'\n\t/tmp/tmprkcrcvb0.lua:24: in upvalue 'tri'\n\t/tmp/tmprkcrcvb0.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmprkcrcvb0.lua:24: in upvalue 'tri'\n\t/tmp/tmprkcrcvb0.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmprkcrcvb0.lua:24: in upvalue 'tri'\n\t/tmp/tmprkcrcvb0.lua:24:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmprkcrcvb0.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmprkcrcvb0.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case\n  if n == 0 then\n    return 0\n  elseif n == 1 then\n\
    \    return 1\n  else\n    -- Recursive case\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptysud2ix.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\
    \t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue\
    \ 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23: in upvalue 'tri'\n\t/tmp/tmptysud2ix.lua:23:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmptysud2ix.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmptysud2ix.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.310 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n \
    \   end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55kob6e3.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp55kob6e3.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp55kob6e3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.590 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8afvb35s.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8afvb35s.lua:20:\
    \ in function </tmp/tmp8afvb35s.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp8afvb35s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.280 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n)\n    if n == 1 then\n      return 3\n  \
    \  elseif n == 2 then\n      return 1 + n / 2\n    elseif n % 2 == 0 then\n  \
    \    return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n +1)\n    else\n      return\
    \ tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n +1)\n    end\n  end\n  return tri_aux(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqwbekta.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmphqwbekta.lua:24: in upvalue 'tri_aux'\n\
    \t/tmp/tmphqwbekta.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmphqwbekta.lua:24: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmphqwbekta.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmphqwbekta.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmphqwbekta.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmphqwbekta.lua:24:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmphqwbekta.lua:22: in upvalue 'tri_aux'\n\t/tmp/tmphqwbekta.lua:24:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmphqwbekta.lua:24:\
    \ in function </tmp/tmphqwbekta.lua:16>\n\t(...tail calls...)\n\t/tmp/tmphqwbekta.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.260 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n    else\n      return\
    \ tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 1) + tri(n - 2)))\n\
    \    end\n  end\n  return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7yfy5rd.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmph7yfy5rd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n\tlocal function tri_aux(n, a, b, c)\n\t\tif n == 0 then\n\t\t\treturn\
    \ a\n\t\telseif n == 1 then\n\t\t\treturn b\n\t\telse\n\t\t\treturn tri_aux(n\
    \ - 1, a + b + c, b, c)\n\t\tend\n\tend\n\treturn tri_aux(n, 0, 0, 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n \
    \   lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46cm_m3l.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmp46cm_m3l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 0 then\n       \
    \     return acc\n        elseif n == 1 then\n            return acc\n       \
    \ else\n            return tri_aux(n - 1, tri_aux(n - 2, acc + tri(n - 1) + tri(n\
    \ - 2)))\n        end\n    end\n    return tri_aux(n, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnjm6cxg.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 0\nstack traceback:\n\t/tmp/tmpsnjm6cxg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    local tri_aux_1 = tri_aux(n - 1, acc)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, tri_aux_1 + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n -\
    \ 1, tri_aux_2 + tri_aux_1)\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgha5ahq.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzgha5ahq.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmpzgha5ahq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzgha5ahq.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmpzgha5ahq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzgha5ahq.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzgha5ahq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzgha5ahq.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmpzgha5ahq.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmpzgha5ahq.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 333298 levels)\n\t/tmp/tmpzgha5ahq.lua:20:\
    \ in function </tmp/tmpzgha5ahq.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpzgha5ahq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.210 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, tri_aux, tri_sum)\n    if n == 0 then\n\
    \      tri_aux[1] = tri_sum\n      return tri_aux\n    end\n    tri_aux[1] = tri_sum\
    \ + n / 2\n    tri_aux[2] = tri_aux[1]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n\
    \    return tri_aux\n  end\n  return tri_aux(n, {}, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz7h4v6d.lua:32:\
    \ expected: {1, 3, 2, 8}\nactual: {1.5, 1.5, 3.0}\nstack traceback:\n\t/tmp/tmpfz7h4v6d.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local result = {n}\n  local i = 1\n  while i <= n do\n    local tmp\
    \ = i\n    i = i + 2\n    table.insert(result, tmp)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
    \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrq5xklw.lua:29:\
    \ expected: {1, 3, 2, 8}\nactual: {3, 1, 3}\nstack traceback:\n\t/tmp/tmpfrq5xklw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b)\n        if n == 0 then\n      \
    \      return a\n        elseif n == 1 then\n            return b\n        else\n\
    \            return tri_aux(n - 1, a + b, b)\n        end\n    end\n    return\
    \ tri_aux(n, 3, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnjp2q1k.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 1\nstack traceback:\n\t/tmp/tmpgnjp2q1k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 1 then\n       \
    \     table.insert(acc, 1)\n        else\n            table.insert(acc, tri_aux(n\
    \ - 1, acc))\n            table.insert(acc, tri_aux(n - 2, acc))\n        end\n\
    \        return acc\n    end\n    return tri_aux(n, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_ankmc5.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7_ankmc5.lua:20: in upvalue 'tri_aux'\n\
    \t/tmp/tmp7_ankmc5.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp7_ankmc5.lua:20: in\
    \ upvalue 'tri_aux'\n\t/tmp/tmp7_ankmc5.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp7_ankmc5.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp7_ankmc5.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp7_ankmc5.lua:20:\
    \ in upvalue 'tri_aux'\n\t/tmp/tmp7_ankmc5.lua:20: in upvalue 'tri_aux'\n\t/tmp/tmp7_ankmc5.lua:20:\
    \ in upvalue 'tri_aux'\n\t...\t(skipping 199975 levels)\n\t/tmp/tmp7_ankmc5.lua:20:\
    \ in function </tmp/tmp7_ankmc5.lua:16>\n\t(...tail calls...)\n\t/tmp/tmp7_ankmc5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.150 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return\
    \ 3\n  -- Base case: n is even.\n  elseif n % 2 == 0 then\n    return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  -- Base case: n is odd.\n  else\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa74_xsve.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa74_xsve.lua:24: in upvalue 'tri'\n\
    \t/tmp/tmpa74_xsve.lua:21: in upvalue 'tri'\n\t/tmp/tmpa74_xsve.lua:24: in upvalue\
    \ 'tri'\n\t/tmp/tmpa74_xsve.lua:21: in upvalue 'tri'\n\t/tmp/tmpa74_xsve.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpa74_xsve.lua:21: in upvalue 'tri'\n\t/tmp/tmpa74_xsve.lua:24:\
    \ in upvalue 'tri'\n\t/tmp/tmpa74_xsve.lua:21: in upvalue 'tri'\n\t/tmp/tmpa74_xsve.lua:24:\
    \ in upvalue 'tri'\n\t...\t(skipping 399962 levels)\n\t/tmp/tmpa74_xsve.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpa74_xsve.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc)\n    tri_aux = tri_aux + tri_aux\n\
    \    if n % 2 == 0 then\n      tri_aux = tri_aux + tri_aux\n    end\n    return\
    \ tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qkyvz3x.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: 48\nstack traceback:\n\t/tmp/tmp_qkyvz3x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, acc)\n        if n == 0 then\n       \
    \     return acc\n        end\n        local tri_aux = tri_aux(n - 1, acc + tri(n\
    \ - 1) + tri(n - 2))\n        if n % 2 == 1 then\n            tri_aux = tri_aux\
    \ + tri(n - 1) + tri(n - 2)\n        end\n        return tri_aux\n    end\n  \
    \  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppav4uac4.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppav4uac4.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmppav4uac4.lua:20: in function </tmp/tmppav4uac4.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmppav4uac4.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659979227
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n    local function tri_aux(n, a, b)\n        if n == 0 then\n      \
    \      return a\n        elseif n == 1 then\n            return b\n        else\n\
    \            return tri_aux(n - 1, b, a + b)\n        end\n    end\n    return\
    \ tri_aux(n, 0, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy483f0eq.lua:31:\
    \ expected: {1, 3, 2, 8}\nactual: 2\nstack traceback:\n\t/tmp/tmpy483f0eq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979226
- exit_code: 1
  program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\nlocal function\
    \ tri(n)\n  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n - 2)\n \
    \   end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55kob6e3.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp55kob6e3.lua:26: in upvalue 'tri'\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\t(...tail calls...)\n\
    \t...\t(skipping 199975 levels)\n\t/tmp/tmp55kob6e3.lua:20: in function </tmp/tmp55kob6e3.lua:16>\n\
    \t(...tail calls...)\n\t/tmp/tmp55kob6e3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.590 seconds, 0 successes, 1 error\n"
  timestamp: 1659979226
