name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested lists,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the list,\n-- and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n-- each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\nlocal function get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local row = {}\n  for i = 1, #lst do\n    if lst[i] == x then\n \
    \     table.insert(row, i)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = lst[i]\n    if row[x] == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row + {i, j}\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b[1] < a[1] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n      row\
    \ = { row = row, column = j }\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a.row > b.row end)\n  table.sort(row, function(a, b) return a.column\
    \ > b.column end)\n  local coords = {}\n  for i = 1, #row do\n    table.insert(coords,\
    \ { row = row[i].row, column = row[i].column })\n  end\n  return coords\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j =\
    \ 1, x do\n      table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, lst[i] do\n      row = { row = row, column = j }\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b < a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n    table.insert(row,\
    \ #row + 1)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row, i)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + #lst)\n\
    \    table.insert(row, #row - #lst + 1)\n    table.insert(row, #row - 1)\n   \
    \ table.insert(row, #row - #lst - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + #lst)\n    table.insert(row, #row - #lst + 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - #lst - 1)\n    table.insert(row, #row\
    \ + 1)\n    table.insert(row, #row + #lst)\n    table.insert(row, #row - #lst\
    \ + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - #lst - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + #lst)\n    table.insert(row,\
    \ #row - #lst + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row\
    \ - #lst - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + #lst)\n\
    \    table.insert(row, #row - #lst + 1)\n    table.insert(row, #row - 1)\n   \
    \ table.insert(row, #row - #lst - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + #lst)\n    table.insert(row, #row - #lst + 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - #lst - 1)\n    table.insert(row, #row\
    \ + 1)\n    table.insert(row, #row + #lst)\n    table.insert(row, #row - #lst\
    \ + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - #lst - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + #lst)\n    table.insert(row,\
    \ #row - #lst + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row\
    \ - #lst - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + #lst)\n\
    \    table.insert(row, #row - #lst + 1)\n    table.insert(row, #row - 1)\n   \
    \ table.insert(row, #row ", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n\
    \    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    if lst[i] == x then\n     \
    \ table.insert(row, i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row, i)\n\
    \    table.insert(row, #lst - i)\n    table.insert(row, #lst - i - 1)\n    table.insert(row,\
    \ #lst - i - 2)\n    table.insert(row, #lst - i - 3)\n    table.insert(row, #lst\
    \ - i - 4)\n    table.insert(row, #lst - i - 5)\n    table.insert(row, #lst -\
    \ i - 6)\n    table.insert(row, #lst - i - 7)\n    table.insert(row, #lst - i\
    \ - 8)\n    table.insert(row, #lst - i - 9)\n    table.insert(row, #lst - i -\
    \ 10)\n    table.insert(row, #lst - i - 11)\n    table.insert(row, #lst - i -\
    \ 12)\n    table.insert(row, #lst - i - 13)\n    table.insert(row, #lst - i -\
    \ 14)\n    table.insert(row, #lst - i - 15)\n    table.insert(row, #lst - i -\
    \ 16)\n    table.insert(row, #lst - i - 17)\n    table.insert(row, #lst - i -\
    \ 18)\n    table.insert(row, #lst - i - 19)\n    table.insert(row, #lst - i -\
    \ 20)\n    table.insert(row, #lst - i - 21)\n    table.insert(row, #lst - i -\
    \ 22)\n    table.insert(row, #lst - i - 23)\n    table.insert(row, #lst - i -\
    \ 24)\n    table.insert(row, #lst - i - 25)\n    table.insert(row, #lst - i -\
    \ 26)\n    table.insert(row, #lst - i - 27)\n    table.insert(row, #lst - i -\
    \ 28)\n    table.insert(row, #lst - i - 29)\n    table.insert(row, #lst - i -\
    \ 30)\n    table.insert(row, #lst - i - 31)\n    table.insert(row, #lst - i -\
    \ 32)\n    table.insert(row, #lst - i - 33)\n    table.insert(row, #lst - i -\
    \ 34)\n    table.insert(row, #lst - i - 35)\n    table.insert(row, #lst - i -\
    \ 36)\n    table.insert(row, #lst - i - 37)\n    table.insert(row, #lst - i -\
    \ 38)\n    table.insert(row, #lst - i - 39)\n    table.insert(row, #lst - i -\
    \ 40)\n    table.insert(row, #lst - i - 41)\n    table.insert(", "  local row\
    \ = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    table.insert(row,\
    \ i)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 2)\n    table.insert(row,\
    \ #row - 3)\n    table.insert(row, #row - 4)\n    table.insert(row, #row - 5)\n\
    \    table.insert(row, #row - 6)\n    table.insert(row, #row - 7)\n    table.insert(row,\
    \ #row - 8)\n    table.insert(row, #row - 9)\n    table.insert(row, #row - 10)\n\
    \    table.insert(row, #row - 11)\n    table.insert(row, #row - 12)\n    table.insert(row,\
    \ #row - 13)\n    table.insert(row, #row - 14)\n    table.insert(row, #row - 15)\n\
    \    table.insert(row, #row - 16)\n    table.insert(row, #row - 17)\n    table.insert(row,\
    \ #row - 18)\n    table.insert(row, #row - 19)\n    table.insert(row, #row - 20)\n\
    \    table.insert(row, #row - 21)\n    table.insert(row, #row - 22)\n    table.insert(row,\
    \ #row - 23)\n    table.insert(row, #row - 24)\n    table.insert(row, #row - 25)\n\
    \    table.insert(row, #row - 26)\n    table.insert(row, #row - 27)\n    table.insert(row,\
    \ #row - 28)\n    table.insert(row, #row - 29)\n    table.insert(row, #row - 30)\n\
    \    table.insert(row, #row - 31)\n    table.insert(row, #row - 32)\n    table.insert(row,\
    \ #row - 33)\n    table.insert(row, #row - 34)\n    table.insert(row, #row - 35)\n\
    \    table.insert(row, #row - 36)\n    table.insert(row, #row - 37)\n    table.insert(row,\
    \ #row - 38)\n    table.insert(row, #row - 39)\n    table.insert(row, #row - 40)\n\
    \    table.insert(row, #row - 41)\n    table.insert(row, #row - 42)\n    table.insert(row,\
    \ #row - 43)\n    table.insert(row, #row - 44)\n    table.insert(row, #row - 45)\n\
    \    table.insert(row, #row - 46)\n    table.insert(row, #row - 47)\n    table.insert(row,\
    \ #row - 48)\n    table.insert(row, #row - 49)\n    table.insert(row, #row - 50)\n\
    \    table.insert(row, #row - 51)\n    table.insert(", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = lst[i]\n    if row[x] == nil then\n      break\n\
    \    end\n  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row, i)\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b > a end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n\
    \  table.sort(rows, function(a, b) return rows[a] > rows[b] end)\n  local coords\
    \ = {}\n  for _, v in ipairs(rows) do\n    table.insert(coords, v)\n  end\n  table.sort(coords,\
    \ function(a, b) return coords[a] > coords[b] end)\n  local coord = { x = x, coords\
    \ = coords }\n  table.insert(coord, table.min(coords))\n  table.insert(coord,\
    \ table.max(coords))\n  return coord\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        row = row\n      else\n        row = row + 1\n\
    \      end\n    end\n  end\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = { lst[i][1], lst[i][x] }\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b > a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, lst[i] do\n      row = { row = row,\
    \ column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = row\n    for j = 1, lst[i] do\n      row = { row = row, column = j }\n   \
    \ end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b < a\
    \ end)\n  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, lst[i] do\n      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b < a end)\n  local row = {}\n  for i\
    \ = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n      row = { row\
    \ = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = row\n    for j = 1, lst[i] do\n      row = { row = row, column = j }\n   \
    \ end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b < a\
    \ end)\n  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, lst[i] do\n      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b < a end)\n  local row = {}\n  for i\
    \ = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n      row = { row\
    \ = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = row\n    for j = 1, lst[i] do\n      row = { row = row, column = j }\n   \
    \ end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b < a\
    \ end)\n  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, lst[i] do\n      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b < a end)\n  local row = {}\n  for i\
    \ = 1, #lst do\n    local row = row", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, lst[i] do\n      row = { row = row, column\
    \ = j }\n    end\n  end\n  table.sort(row)\n  return row\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n  \
    \    row = { row = row, column = j }\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a.row > b.row end)\n  table.sort(row, function(a, b) return a.column\
    \ > b.column end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = lst[i]\n    if row[x] ~= nil then\n      table.insert(row, row[x])\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n\
    \    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n    table.insert(row,\
    \ #row + 1)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 0, #lst do\n  \
    \  local row = { lst[i][1] }\n    for j = 1, #lst[i] do\n      if lst[i][j] ==\
    \ x then\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, i)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row\
    \ + 1)\n  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n \
    \   local row = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n\
    \        table.insert(row, j)\n        break\n      end\n    end\n    if #row\
    \ > 0 then\n      table.sort(row)\n      table.sort(row, function(a, b) return\
    \ b - a end)\n      table.sort(row, function(a, b) return row[a] > row[b] end)\n\
    \      table.sort(row, function(a, b) return row[a] < row[b] end)\n      table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n      table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n      table.sort(row, function(a, b) return\
    \ row[a] > row[b] end)\n      table.sort(row, function(a, b) return row[a] < row[b]\
    \ end)\n      table.sort(row, function(a, b) return row[a] < row[b] end)\n   \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n      table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n      table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n      table.sort(row, function(a, b) return\
    \ row[a] < row[b] end)\n      table.sort(row, function(a, b) return row[a] > row[b]\
    \ end)\n      table.sort(row, function(a, b) return row[a] > row[b] end)\n   \
    \   table.sort(row, function(a, b) return row[a] < row[b] end)\n      table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n      table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n      table.sort(row, function(a, b) return\
    \ row[a] > row[b] end)\n      table.sort(row, function(a, b) return row[a] < row[b]\
    \ end)\n      table.sort(row, function(a, b) return row[a] < row[b] end)\n   \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n      table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n      table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n      table.sort(row, function(a, b) return\
    \ row[a] < row[b] end)\n      table.sort(row, function(a, b) return row[a] > row[b]\
    \ end)\n      table.sort(row, function(a, b) return row[a] > row[b] end)\n   \
    \   table.sort(row, function(a, b) return row[a] < row[b] end)\n      table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n      table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n      table.sort(row, function(a, b) return\
    \ row[a] > row[b] end)\n      table.sort(row, function", "  local row = {}\n \
    \ for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n      row\
    \ = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b.column > a.column end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 0, #lst do\n    if i == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        table.insert(row, j)\n      end\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n\
    \      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b)\n    return b[1] < a[1]\n  end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x\
    \ do\n      table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n \
    \ end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "    local row = {}\n    for i = 1,\
    \ #lst do\n        local row = row\n        for j = 1, #lst[i] do\n          \
    \  if lst[i][j] == x then\n                row = row + {i, j, 0}\n           \
    \     break\n            end\n        end\n    end\n    table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n    table.sort(row, function(a, b) return a[1] >\
    \ b[1] end)\n    return row\nend", "  local row = {}\n  for i = 1, #lst do\n \
    \   local row_x = lst[i][1]\n    if row_x == x then\n      table.insert(row, i)\n\
    \    end\n  end\n  table.sort(row, function(a, b) return #a > #b end)\n  table.sort(row,\
    \ function(a, b) return #b > #a end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = lst[i]\n    if row[x] ~= nil then\n   \
    \   table.insert(row, row[x])\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, j)\n        break\n      end\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i][1] }\n    for j = 2, #lst[i] do\n      if row[1] < lst[i][j] then\n\
    \        row[1] = lst[i][j]\n      end\n      if row[2] > lst[i][j] then\n   \
    \     row[2] = lst[i][j]\n      end\n    end\n    table.insert(row, i)\n  end\n\
    \  table.sort(row, function(a, b) return a[2] < b[2] end)\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = { lst[i][1], lst[i][x] }\n    table.insert(row,\
    \ i)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 2)\n    table.insert(row,\
    \ #row - 3)\n    table.insert(row, #row - 4)\n    table.insert(row, #row - 5)\n\
    \    table.insert(row, #row - 6)\n    table.insert(row, #row - 7)\n    table.insert(row,\
    \ #row - 8)\n    table.insert(row, #row - 9)\n    table.insert(row, #row - 10)\n\
    \    table.insert(row, #row - 11)\n    table.insert(row, #row - 12)\n    table.insert(row,\
    \ #row - 13)\n    table.insert(row, #row - 14)\n    table.insert(row, #row - 15)\n\
    \    table.insert(row, #row - 16)\n    table.insert(row, #row - 17)\n    table.insert(row,\
    \ #row - 18)\n    table.insert(row, #row - 19)\n    table.insert(row, #row - 20)\n\
    \    table.insert(row, #row - 21)\n    table.insert(row, #row - 22)\n    table.insert(row,\
    \ #row - 23)\n    table.insert(row, #row - 24)\n    table.insert(row, #row - 25)\n\
    \    table.insert(row, #row - 26)\n    table.insert(row, #row - 27)\n    table.insert(row,\
    \ #row - 28)\n    table.insert(row, #row - 29)\n    table.insert(row, #row - 30)\n\
    \    table.insert(row, #row - 31)\n    table.insert(row, #row - 32)\n    table.insert(row,\
    \ #row - 33)\n    table.insert(row, #row - 34)\n    table.insert(row, #row - 35)\n\
    \    table.insert(row, #row - 36)\n    table.insert(row, #row - 37)\n    table.insert(row,\
    \ #row - 38)\n    table.insert(row, #row - 39)\n    table.insert(row, #row - 40)\n\
    \    table.insert(row, #row - 41)\n    table.insert(row, #row - 42)\n    table.insert(row,\
    \ #row - 43)\n    table.insert(row, #row - 44)\n    table.insert(row, #row - 45)\n\
    \    table.insert(row, #row - 46)\n    table.insert(row, #row - 47)\n    table.insert(row,\
    \ #row - 48)\n    table.insert(row, #row - 49)\n    table.insert(row, #row - 50)\n\
    \    table.insert(row, #row - 5", "  local row = {}\n  for i = 1, #lst do\n  \
    \  if lst[i][1] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 0, #lst do\n    local row = { lst[i][1] }\n    for j = 1,\
    \ x do\n      table.insert(row, lst[i][j])\n    end\n    table.sort(row)\n   \
    \ table.sort(row, function(a, b) return b < a end)\n    table.sort(row, function(a,\
    \ b) return b > a end)\n    table.insert(row, i)\n    table.insert(row, #row -\
    \ 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n    table.insert(row,\
    \ #row - 2)\n    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 2)\n    table.insert(row, #row - 2)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n\
    \    table.insert(row, #row - 2)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 2)\n    table.insert(row, #row - 2)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 2)\n    table.insert(row, #row - 2)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n    table.insert(row,\
    \ #row - 2)\n    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 2)\n    table.insert(row, #row - 2)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n\
    \    table.insert(row, #row - 2)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 2)\n    table.insert(row, #row - 2)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 2)\n    table.insert(row, #row - 2)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n    table.insert(row,\
    \ #row - 2)\n    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 2)\n    table.insert(row, #row - 2)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(", "  local row\
    \ = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n\
    \      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b)\n    return b > a\n  end)\n  local coords = {}\n  for i = 1,\
    \ #row do\n    table.insert(coords, { row = row[i].row, column = row[i].column\
    \ })\n  end\n  table.sort(coords, function(a, b)\n    return b.row > a.row\n \
    \ end)\n  local result = {}\n  for _, coord in ipairs(coords) do\n    table.insert(result,\
    \ { row = coord.row, column = coord.column })\n  end\n  return result\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, { i, j })\n    \
    \  end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    if lst[i] == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ #lst[a] > #lst[b] end)\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row,\
    \ #row - i - 1)\n    table.insert(row, #row - i)\n    table.insert(row, #row -\
    \ i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i\
    \ - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i -\
    \ 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n\
    \    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n  \
    \  table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row,\
    \ #row - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row\
    \ - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row -\
    \ i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i\
    \ - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i -\
    \ 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n\
    \    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n  \
    \  table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row,\
    \ #row - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row\
    \ - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row -\
    \ i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i\
    \ - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i -\
    \ 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n\
    \    table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n  \
    \  table.insert(row, #row - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row,\
    \ #row - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row\
    \ - i - 1)\n    table.insert(row, #row - i - 1)\n    table.insert(row, #row -\
    \ i - 1)\n    table.insert(row, #row ", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    if row_x == x then\n      table.insert(row, i)\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return #b\
    \ > #a end)\n  table.sort(row, function(a, b) return #a > #b end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    if lst[i] == x then\n     \
    \ table.insert(row, i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x\
    \ do\n      table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n \
    \ end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == x then\n      table.insert(row, i)\n \
    \   end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return #lst[a]\
    \ > #lst[b] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row, i)\n    table.insert(row,\
    \ #lst, i)\n    table.insert(row, i)\n    table.insert(row, i)\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  local coords = {}\n  for\
    \ i = 1, #row do\n    table.insert(coords, row[i])\n  end\n  table.sort(coords,\
    \ function(a, b) return b - a end)\n  local coord = { x = x, coords = coords }\n\
    \  return coord\nend", "  local row = {}\n  for i = 1, #lst do\n    if lst[i][1]\
    \ == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return #lst[a] > #lst[b] end)\n  table.sort(row, function(a, b) return #lst[b]\
    \ > #lst[a] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i][1], lst[i][2] }\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    ", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n\
    \    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, lst[i] do\n      row = { row = row, column = j }\n\
    \    end\n  end\n  table.sort(row, function(a, b)\n    return a.row > b.row\n\
    \  end)\n  table.sort(row, function(a, b)\n    return a.column > b.column\n  end)\n\
    \  local coords = {}\n  for i = 1, #row do\n    table.insert(coords, {row = row[i].row,\
    \ column = row[i].column})\n  end\n  return coords\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == x then\n      table.insert(row, i)\n \
    \   end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b -\
    \ a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i][1], lst[i][#lst] }\n    if row[1] < x then\n      table.insert(row,\
    \ row[1])\n      table.insert(row, row[2])\n    end\n    table.insert(row, i)\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b > a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i][1], lst[i][#lst] }\n    table.insert(row, i)\n    table.insert(row,\
    \ #lst + i)\n    table.insert(row, #lst - i)\n    table.insert(row, #lst + #lst\
    \ - i)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b -\
    \ a end)\n  local results = {}\n  for i = 1, #row do\n    local row = row[i]\n\
    \    local cols = {}\n    for j = 1, #row do\n      table.insert(cols, row[j])\n\
    \    end\n    table.sort(cols)\n    table.sort(cols, function(a, b) return b -\
    \ a end)\n    table.insert(results, { i, cols })\n  end\n  return results\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    if row[x] ~=\
    \ nil then\n      table.insert(row, row[x])\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b < a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, #row\
    \ do\n      if row[j] == x then\n        return { i, j }\n      end\n    end\n\
    \  end\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = lst[i]\n\
    \    if row[x] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n\
    \      row = { row = row, column = j }\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a.row > b.row end)\n  table.sort(row, function(a, b) return a.column\
    \ > b.column end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    if lst[i][1] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return #lst[a] > #lst[b] end)\n  table.sort(row, function(a,\
    \ b) return #lst[b] > #lst[a] end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i][1], lst[i][x] }\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b > a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1] }\n    for j = 2,\
    \ #lst[i] do\n      if row[1] < lst[i][j] then\n        row[1] = lst[i][j]\n \
    \     end\n      if row[2] > lst[i][j] then\n        row[2] = lst[i][j]\n    \
    \  end\n    end\n    table.insert(row, 0)\n    table.insert(row, i)\n    table.insert(row,\
    \ #lst[i])\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b[2] < a[2] end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n\
    \  local coords = {}\n  for i = 1, #row do\n    table.insert(coords, row[i])\n\
    \  end\n  table.sort(coords, function(a, b) return b[2] < a[2] end)\n  table.sort(coords,\
    \ function(a, b) return b[1] < a[1] end)\n  local coords_list = {}\n  for i =\
    \ 1, #coords do\n    table.insert(coords_list, coords[i])\n  end\n  return coords_list\n\
    end", "    local row = {}\n    for i = 1, #lst do\n        if lst[i] == x then\n\
    \            table.insert(row, i)\n        end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return #lst[a] > #lst[b] end)\n    return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i]\
    \ }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n    table.insert(row,\
    \ #row + 1)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n      row = {\
    \ row = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, #row do\n      if\
    \ row[j] == x then\n        table.insert(row, j)\n        break\n      end\n \
    \   end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {\
    \ lst[i][1] }\n    for j = 2, #lst[i] do\n      if row[1] == x then\n        table.insert(row,\
    \ lst[i][j])\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b < a end)\n    table.insert(row, 0)\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return a < b end)\n    table.insert(row, #row)\n  end\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = lst[i]\n\
    \    if row[x] then\n      table.insert(row, row[x])\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, j)\n        break\n\
    \      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\
    \ return b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row_x = lst[i]\n    if row_x == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ #lst[a] > #lst[b] end)\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = row\n    for j = 1, lst[i] do\n      row = { row =\
    \ row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        table.insert(row, { i, j })\n        break\n      end\n    end\n\
    \  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row,\
    \ i)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return a[1] <\
    \ b[1] end)\n  local result = {}\n  for _, v in ipairs(row) do\n    table.insert(result,\
    \ v)\n  end\n  return result\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n\
    \    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n      \
    \  table.insert(row, j)\n        break\n      end\n    end\n    table.insert(row,\
    \ #row)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b > a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {\
    \ lst[i] }\n    table.insert(row, i)\n    table.insert(row, #row - i - 1)\n  \
    \  table.insert(row, #row - i)\n    table.insert(row, #row)\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  local rows = {}\n  for\
    \ _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows,\
    \ function(a, b) return rows[b] - rows[a] end)\n  local row = {}\n  for _, v in\
    \ ipairs(rows) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return rows[b] - rows[a] end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return\
    \ rows[b] - rows[a] end)\n  local rows = {}\n  for _, v in ipairs(row) do\n  \
    \  table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return rows[b]\
    \ - rows[a] end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ v)\n  end\n  table.sort(rows, function(a, b) return rows[b] - rows[a] end)\n\
    \  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n\
    \  end\n  table.sort(rows, function(a, b) return rows[b] - rows[a] end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n\
    \  table.sort(rows, function(a, b) return rows[b] - rows[a] end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows,\
    \ function(a, b) return rows[b] - rows[a] end)\n  local rows = {}\n  for _, v\
    \ in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows, function(a,\
    \ b) return rows[b] - rows[a] end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return\
    \ rows[b] - rows[a] end)\n  local rows = {}\n  for _, v in ipairs(row) do\n  \
    \  table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return rows[b]\
    \ - rows[a] end)\n", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n        return\
    \ { i, j }\n      end\n    end\n  end\nend\nprint(get_row({1, 2, 3, 4}, 2))\n\
    print(get_row({1, 2, 3, 4}, 5))\nprint(get_row({1, 2, 3, 4}, 0))\nprint(get_row({1,\
    \ 2, 3, 4}, -1))\nprint(get_row({1, 2, 3, 4}, 10))\nprint(get_row({1, 2, 3, 4},\
    \ 100))\nprint(get_row({1, 2, 3, 4}, -100))\nprint(get_row({1, 2, 3, 4}, 1))\n\
    print(get_row({1, 2, 3, 4}, 2))\nprint(get_row({1, 2, 3, 4}, 3))\nprint(get_row({1,\
    \ 2, 3, 4}, 4))\nprint(get_row({1, 2, 3, 4}, 5))\nprint(get_row({1, 2, 3, 4},\
    \ 6))\nprint(get_row({1, 2, 3, 4}, 7))\nprint(get_row({1, 2, 3, 4}, 8))\nprint(get_row({1,\
    \ 2, 3, 4}, 9))\nprint(get_row({1, 2, 3, 4}, 10))\nprint(get_row({1, 2, 3, 4},\
    \ 11))\nprint(get_row({1, 2, 3, 4}, 12))\nprint(get_row({1, 2, 3, 4}, 13))\nprint(get_row({1,\
    \ 2, 3, 4}, 14))\nprint(get_row({1, 2, 3, 4}, 15))\nprint(get_row({1, 2, 3, 4},\
    \ 16))\nprint(get_row({1, 2, 3, 4}, 17))\nprint(get_row({1, 2, 3, 4}, 18))\nprint(get_row({1,\
    \ 2, 3, 4}, 19))\nprint(get_row({1, 2, 3, 4}, 20))\nprint(get_row({1, 2, 3, 4},\
    \ 21))\nprint(get_row({1, 2, 3, 4}, 22))\nprint(get_row({1, 2, 3, 4}, 23))\nprint(get_row({1,\
    \ 2, 3, 4}, 24))\nprint(get_row({1, 2, 3, 4}, 25))\nprint(get_row({1, 2, 3, 4},\
    \ 26))\nprint(get_row({1, 2, 3, 4}, 27))\nprint(get_row({1, 2, 3, 4}, 28))\nprint(get_row({1,\
    \ 2, 3, 4}, 29))\nprint(get_row({1, 2, 3, 4}, 30))\nprint(get_row({1, 2, 3, 4},\
    \ 31))\nprint(get_row({1, 2, 3, 4}, 32))\nprint(get_row({1, 2, 3, 4}, 33))\nprint(get_row({1,\
    \ 2, 3, 4}, 34))\nprint(get_row({1, 2, 3, 4}, 35))\nprint(get_row({1, 2, 3, 4},\
    \ 36))\nprint(get_row({1, 2, 3, 4}, 37))\nprint(get_row({1, 2, 3, 4}, 38))\nprint(get_row({1,\
    \ 2, 3, 4}, 39))\nprint(get_row({1, 2, 3, 4}, 40))\nprint(get_row({1, 2, 3, 4},\
    \ 41))", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for\
    \ j = 1, lst[i] do\n      row = { row = row, column = j }\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a.row > b.row end)\n  table.sort(row, function(a, b) return\
    \ a.column > b.column end)\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = { lst[i][1] }\n    for j = 2, #lst[i] do\n      if\
    \ row[1] == x then\n        table.insert(row, lst[i][j])\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b < a end)\n \
    \   table.insert(row, 0)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.insert(row, 0)\n    table.sort(row, function(a, b) return a > b end)\n\
    \    table.insert(row, 0)\n  end\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row,\
    \ i)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 2)\n    table.insert(row,\
    \ #row - 3)\n    table.insert(row, #row - 4)\n    table.insert(row, #row - 5)\n\
    \    table.insert(row, #row - 6)\n    table.insert(row, #row - 7)\n    table.insert(row,\
    \ #row - 8)\n    table.insert(row, #row - 9)\n    table.insert(row, #row - 10)\n\
    \    table.insert(row, #row - 11)\n    table.insert(row, #row - 12)\n    table.insert(row,\
    \ #row - 13)\n    table.insert(row, #row - 14)\n    table.insert(row, #row - 15)\n\
    \    table.insert(row, #row - 16)\n    table.insert(row, #row - 17)\n    table.insert(row,\
    \ #row - 18)\n    table.insert(row, #row - 19)\n    table.insert(row, #row - 20)\n\
    \    table.insert(row, #row - 21)\n    table.insert(row, #row - 22)\n    table.insert(row,\
    \ #row - 23)\n    table.insert(row, #row - 24)\n    table.insert(row, #row - 25)\n\
    \    table.insert(row, #row - 26)\n    table.insert(row, #row - 27)\n    table.insert(row,\
    \ #row - 28)\n    table.insert(row, #row - 29)\n    table.insert(row, #row - 30)\n\
    \    table.insert(row, #row - 31)\n    table.insert(row, #row - 32)\n    table.insert(row,\
    \ #row - 33)\n    table.insert(row, #row - 34)\n    table.insert(row, #row - 35)\n\
    \    table.insert(row, #row - 36)\n    table.insert(row, #row - 37)\n    table.insert(row,\
    \ #row - 38)\n    table.insert(row, #row - 39)\n    table.insert(row, #row - 40)\n\
    \    table.insert(row, #row - 41)\n    table.insert(row, #row - 42)\n    table.insert(row,\
    \ #row - 43)\n    table.insert(row, #row - 44)\n    table.insert(row, #row - 45)\n\
    \    table.insert(row, #row - 46)\n    table.insert(row, #row - 47)\n    table.insert(row,\
    \ #row - 48)\n    table.insert(row, #row - 49)\n    table.insert(row, #row - 50)\n\
    \    table.insert(row, #row - ", "  local row = {}\n  for i = 1, #lst do\n   \
    \ local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n \
    \       table.insert(row, i)\n        break\n      end\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return #b > #a end)\n  return row\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row = row + {i, j, 0}\n      end\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b[2]\
    \ < a[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n \
    \   local row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row - 2)\n    table.insert(row, #row - 3)\n   \
    \ table.insert(row, #row - 4)\n    table.insert(row, #row - 5)\n    table.insert(row,\
    \ #row - 6)\n    table.insert(row, #row - 7)\n    table.insert(row, #row - 8)\n\
    \    table.insert(row, #row - 9)\n    table.insert(row, #row - 10)\n    table.insert(row,\
    \ #row - 11)\n    table.insert(row, #row - 12)\n    table.insert(row, #row - 13)\n\
    \    table.insert(row, #row - 14)\n    table.insert(row, #row - 15)\n    table.insert(row,\
    \ #row - 16)\n    table.insert(row, #row - 17)\n    table.insert(row, #row - 18)\n\
    \    table.insert(row, #row - 19)\n    table.insert(row, #row - 20)\n    table.insert(row,\
    \ #row - 21)\n    table.insert(row, #row - 22)\n    table.insert(row, #row - 23)\n\
    \    table.insert(row, #row - 24)\n    table.insert(row, #row - 25)\n    table.insert(row,\
    \ #row - 26)\n    table.insert(row, #row - 27)\n    table.insert(row, #row - 28)\n\
    \    table.insert(row, #row - 29)\n    table.insert(row, #row - 30)\n    table.insert(row,\
    \ #row - 31)\n    table.insert(row, #row - 32)\n    table.insert(row, #row - 33)\n\
    \    table.insert(row, #row - 34)\n    table.insert(row, #row - 35)\n    table.insert(row,\
    \ #row - 36)\n    table.insert(row, #row - 37)\n    table.insert(row, #row - 38)\n\
    \    table.insert(row, #row - 39)\n    table.insert(row, #row - 40)\n    table.insert(row,\
    \ #row - 41)\n    table.insert(row, #row - 42)\n    table.insert(row, #row - 43)\n\
    \    table.insert(row, #row - 44)\n    table.insert(row, #row - 45)\n    table.insert(row,\
    \ #row - 46)\n    table.insert(row, #row - 47)\n    table.insert(row, #row - 48)\n\
    \    table.insert(row, #row - 49)\n    table.insert(row, #row - 50)\n    table.insert(row,\
    \ #row - 51)\n    table.insert(", "  local row = {}\n  for i = 1, #lst do\n  \
    \  if lst[i] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n\
    \      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {\
    \ lst[i][1] }\n    for j = 2, #lst[i] do\n      if row[1] < lst[i][j] then\n \
    \       row[1] = lst[i][j]\n      end\n      if row[2] > lst[i][j] then\n    \
    \    row[2] = lst[i][j]\n      end\n    end\n    table.insert(row, i)\n    table.insert(row,\
    \ j)\n    table.insert(row, #lst[i])\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b[2] < a[2] end)\n  table.sort(row, function(a, b) return\
    \ a[1] < b[1] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i][1], lst[i][2] }\n    if row[1] == x then\n      return\
    \ row\n    end\n  end\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, lst[i] do\n      row = { row = row, column = j }\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_index = row\n  local row_coords = {}\n  for i = 1, #row\
    \ do\n    table.insert(row_coords, row_index[i])\n  end\n  return row_coords\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1] }\n\
    \    for j = 2, #lst[i] do\n      if row[1] <= x then\n        row[1] = row[1]\
    \ + 1\n      else\n        break\n      end\n    end\n    if row[1] <= x then\n\
    \      table.insert(row, row[1], 0)\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b[2] > a[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n     \
    \ table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i][1], lst[i][#lst] }\n    if row.x == x then\n      return\
    \ row\n    end\n  end\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row, #row - i)\n\
    \    table.insert(row, #row + i)\n    table.insert(row, #row - #row + i)\n   \
    \ table.insert(row, #row - #row - i)\n  end\n  table.sort(row)\n  local rows =\
    \ {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows)\n\
    \  local row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v)\n \
    \ end\n  table.sort(row)\n  local row = {}\n  for _, v in ipairs(row) do\n   \
    \ table.insert(row, v)\n  end\n  table.sort(row)\n  local row = {}\n  for _, v\
    \ in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  local\
    \ row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n\
    \  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row)\n  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  local row = {}\n  for _, v in ipairs(row) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row)\n  local row = {}\n  for _,\
    \ v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  local\
    \ row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n\
    \  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n\
    \  table.sort(row)\n  local row = {}\n  for _, v in ipairs(row) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row)\n  local row = {}\n  for _, v in ipairs(row) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row)\n  local row = {}\n  for _,\
    \ v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  local\
    \ row = {}\n  for _, v in ipairs(row) do\n    table.insert(row, v)\n  end\n  table.sort(row)\n\
    \  local row = {}\n  for _, v in ipairs(row) do\n    ", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, { i, j })\n      end\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, j)\n      end\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    if row[x] ~= nil\
    \ then\n      table.insert(row, x)\n      table.insert(row, row[x])\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b > a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n    table.insert(row,\
    \ #row + 1)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  if lst[i] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return #lst[a] > #lst[b] end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j\
    \ = 1, lst[i] do\n      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b < a end)\n  local coords = {}\n  for\
    \ i = 1, #row do\n    table.insert(coords, { row = row[i].row, column = row[i].column\
    \ })\n  end\n  table.sort(coords, function(a, b) return a.row < b.row end)\n \
    \ table.sort(coords, function(a, b) return a.column < b.column end)\n  local results\
    \ = {}\n  for _, coord in ipairs(coords) do\n    table.insert(results, { row =\
    \ coord.row, column = coord.column })\n  end\n  return results\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n\
    \    table.insert(row, i)\n    table.insert(row, #lst)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 2)\n    table.insert(row, #row - 3)\n\
    \    table.insert(row, #row - 4)\n    table.insert(row, #row - 5)\n    table.insert(row,\
    \ #row - 6)\n    table.insert(row, #row - 7)\n    table.insert(row, #row - 8)\n\
    \    table.insert(row, #row - 9)\n    table.insert(row, #row - 10)\n    table.insert(row,\
    \ #row - 11)\n    table.insert(row, #row - 12)\n    table.insert(row, #row - 13)\n\
    \    table.insert(row, #row - 14)\n    table.insert(row, #row - 15)\n    table.insert(row,\
    \ #row - 16)\n    table.insert(row, #row - 17)\n    table.insert(row, #row - 18)\n\
    \    table.insert(row, #row - 19)\n    table.insert(row, #row - 20)\n    table.insert(row,\
    \ #row - 21)\n    table.insert(row, #row - 22)\n    table.insert(row, #row - 23)\n\
    \    table.insert(row, #row - 24)\n    table.insert(row, #row - 25)\n    table.insert(row,\
    \ #row - 26)\n    table.insert(row, #row - 27)\n    table.insert(row, #row - 28)\n\
    \    table.insert(row, #row - 29)\n    table.insert(row, #row - 30)\n    table.insert(row,\
    \ #row - 31)\n    table.insert(row, #row - 32)\n    table.insert(row, #row - 33)\n\
    \    table.insert(row, #row - 34)\n    table.insert(row, #row - 35)\n    table.insert(row,\
    \ #row - 36)\n    table.insert(row, #row - 37)\n    table.insert(row, #row - 38)\n\
    \    table.insert(row, #row - 39)\n    table.insert(row, #row - 40)\n    table.insert(row,\
    \ #row - 41)\n    table.insert(row, #row - 42)\n    table.insert(row, #row - 43)\n\
    \    table.insert(row, #row - 44)\n    table.insert(row, #row - 45)\n    table.insert(row,\
    \ #row - 46)\n    table.insert(row, #row - 47)\n    table.insert(row, #row - 48)\n\
    \    table.insert(row, #row - 49)\n    table.insert(row, #row - 50)", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1] }\n    for j = 2,\
    \ #lst[i] do\n      if row[1] <= x then\n        table.insert(row, lst[i][j])\n\
    \      end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b < a end)\n    table.insert(row, 0)\n    table.sort(row, function(a, b) return\
    \ a < b end)\n    table.insert(row, #row)\n  end\n  return row\nend", "  local\
    \ row = {}\n  for i = 0, #lst do\n    local row = { lst[i][1], lst[i][2] }\n \
    \   if i == x then\n      table.insert(row, i)\n    end\n    table.insert(row,\
    \ table.unpack(row))\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b > a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    for j = 1, #row do row[j] = row[j] or 0 end\n    if row[x]\
    \ == x then return row end\n  end\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        row = row + {i, j, 0}\n        break\n      end\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b[2]\
    \ > a[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n \
    \   local row = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n\
    \        table.insert(row, j)\n        break\n      end\n    end\n    table.insert(row,\
    \ #row + 1)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  if lst[i] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return #b > #a end)\n  return row\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst]\
    \ }\n    if row[1] == x then\n      return row\n    end\n  end\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1] }\n    for j = 2,\
    \ #lst[i] do\n      if row[1] <= x then\n        break\n      end\n      table.insert(row,\
    \ lst[i][j])\n    end\n    table.sort(row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, i)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 1)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 2)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 3)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 4)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 5)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 6)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 7)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 8)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 9)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row + 10)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 11)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 12)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 13)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 14)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 15)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 16)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 17)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 18)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 19)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row + 20)\n    table.",
  "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, j)\n        break\n\
    \      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\
    \ return b - a end)\n  return row\nend", "    local row = {}\n    for i = 1, #lst\
    \ do\n        if lst[i] == x then\n            table.insert(row, i)\n        end\n\
    \    end\n    table.sort(row)\n    table.sort(row, function(a, b) return #lst[a]\
    \ > #lst[b] end)\n    return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i][1], lst[i][x] }\n    table.insert(row, i)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i][1] }\n    for j = 2, #lst[i] do\n      if row[1] <= x then\n      \
    \  break\n      else\n        table.insert(row, lst[i][j])\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b < a end)\n \
    \   table.insert(row, 0)\n    table.sort(row, function(a, b) return b > a end)\n\
    \    table.insert(row, #row)\n  end\n  return row\nend", "  local row = {}\n \
    \ for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n\
    \    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i][1], lst[i][#lst] }\n    table.insert(row, i)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + #lst)\n\
    \    table.insert(row, #row - #lst + 1)\n    table.insert(row, #row - #lst - 1)\n\
    \    table.insert(row, #row + #lst - 1)\n    table.insert(row, #row + #lst + 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row - 1)\n    ", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x\
    \ do\n      table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n \
    \ end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = lst[i]\n    if row[x] ~= nil then\n   \
    \   table.insert(row, row[x])\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n    if row.x ==\
    \ x then\n      return row\n    end\n  end\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row,\
    \ i)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a\
    \ end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ v)\n  end\n  table.sort(rows, function(a, b) return rows[a] > rows[b] end)\n\
    \  local row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v)\n \
    \ end\n  table.sort(row, function(a, b) return rows[a] > rows[b] end)\n  local\
    \ rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n\
    \  table.sort(rows, function(a, b) return rows[a] > rows[b] end)\n  local row\
    \ = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return rows[a] > rows[b] end)\n  local rows = {}\n  for _, v\
    \ in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows, function(a,\
    \ b) return rows[a] > rows[b] end)\n  local row = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ rows[a] > rows[b] end)\n  local rows = {}\n  for _, v in ipairs(row) do\n  \
    \  table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return rows[a]\
    \ > rows[b] end)\n  local row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return rows[a] > rows[b] end)\n\
    \  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n\
    \  end\n  table.sort(rows, function(a, b) return rows[a] > rows[b] end)\n  local\
    \ row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v)\n  end\n \
    \ table.sort(row, function(a, b) return rows[a] > rows[b] end)\n  local rows =\
    \ {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows,\
    \ function(a, b) return rows[a] > rows[b] end)\n  local row = {}\n  for _, v in\
    \ ipairs(rows) do\n    table.insert(row, v)", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n     \
    \ table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    table.insert(row,\
    \ i)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 2)\n    table.insert(row,\
    \ #row - 3)\n    table.insert(row, #row - 4)\n    table.insert(row, #row - 5)\n\
    \    table.insert(row, #row - 6)\n    table.insert(row, #row - 7)\n    table.insert(row,\
    \ #row - 8)\n    table.insert(row, #row - 9)\n    table.insert(row, #row - 10)\n\
    \    table.insert(row, #row - 11)\n    table.insert(row, #row - 12)\n    table.insert(row,\
    \ #row - 13)\n    table.insert(row, #row - 14)\n    table.insert(row, #row - 15)\n\
    \    table.insert(row, #row - 16)\n    table.insert(row, #row - 17)\n    table.insert(row,\
    \ #row - 18)\n    table.insert(row, #row - 19)\n    table.insert(row, #row - 20)\n\
    \    table.insert(row, #row - 21)\n    table.insert(row, #row - 22)\n    table.insert(row,\
    \ #row - 23)\n    table.insert(row, #row - 24)\n    table.insert(row, #row - 25)\n\
    \    table.insert(row, #row - 26)\n    table.insert(row, #row - 27)\n    table.insert(row,\
    \ #row - 28)\n    table.insert(row, #row - 29)\n    table.insert(row, #row - 30)\n\
    \    table.insert(row, #row - 31)\n    table.insert(row, #row - 32)\n    table.insert(row,\
    \ #row - 33)\n    table.insert(row, #row - 34)\n    table.insert(row, #row - 35)\n\
    \    table.insert(row, #row - 36)\n    table.insert(row, #row - 37)\n    table.insert(row,\
    \ #row - 38)\n    table.insert(row, #row - 39)\n    table.insert(row, #row - 40)\n\
    \    table.insert(row, #row - 41)\n    table.insert(row, #row - 42)\n    table.insert(row,\
    \ #row - 43)\n    table.insert(row, #row - 44)\n    table.insert(row, #row - 45)\n\
    \    table.insert(row, #row - 46)\n    table.insert(row, #row - 47)\n    table.insert(row,\
    \ #row - 48)\n    table.insert(row, #row - 49)\n    table.insert(row, #row - 50)\n\
    \    table.insert(row, #row - 51)\n    table.insert(", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b)\n    return b - a\n  end)\n  return row\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n\
    \      table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i]\
    \ }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n    table.insert(row,\
    \ #row + 1)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = row\n    for j = 1, lst[i] do\n      row = { row = row, column\
    \ = j }\n    end\n  end\n  table.sort(row, function(a, b)\n    return a.row >\
    \ b.row\n  end)\n  table.sort(row, function(a, b)\n    return a.column > b.column\n\
    \  end)\n  return row\nend", "  local row = {}\n  for i = 0, #lst - 1 do\n   \
    \ local row = { lst[i] }\n    local row_x = lst[i][1]\n    for j = 1, x do\n \
    \     table.insert(row, lst[i][j])\n    end\n    table.insert(row, row_x)\n  \
    \  table.sort(row)\n    table.sort(row, function(a, b) return b[1] < a[1] end)\n\
    \    table.sort(row, function(a, b) return b[2] > a[2] end)\n    table.sort(row,\
    \ function(a, b) return b[3] < a[3] end)\n    table.sort(row, function(a, b) return\
    \ b[4] > a[4] end)\n    table.sort(row, function(a, b) return b[5] < a[5] end)\n\
    \    table.sort(row, function(a, b) return b[6] > a[6] end)\n    table.sort(row,\
    \ function(a, b) return b[7] < a[7] end)\n    table.sort(row, function(a, b) return\
    \ b[8] > a[8] end)\n    table.sort(row, function(a, b) return b[9] < a[9] end)\n\
    \    table.sort(row, function(a, b) return b[10] > a[10] end)\n    table.sort(row,\
    \ function(a, b) return b[11] < a[11] end)\n    table.sort(row, function(a, b)\
    \ return b[12] > a[12] end)\n    table.sort(row, function(a, b) return b[13] <\
    \ a[13] end)\n    table.sort(row, function(a, b) return b[14] > a[14] end)\n \
    \   table.sort(row, function(a, b) return b[15] < a[15] end)\n    table.sort(row,\
    \ function(a, b) return b[16] > a[16] end)\n    table.sort(row, function(a, b)\
    \ return b[17] < a[17] end)\n    table.sort(row, function(a, b) return b[18] >\
    \ a[18] end)\n    table.sort(row, function(a, b) return b[19] < a[19] end)\n \
    \   table.sort(row, function(a, b) return b[20] > a[20] end)\n    table.sort(row,\
    \ function(a, b) return b[21] < a[21] end)\n    table.sort(row, function(a, b)\
    \ return b[22] > a[22] end)\n    table.sort(row, function(a, b) return b[23] <\
    \ a[23] end)\n    table.sort(row, function(a, b) return b[24] > a[24] end)\n \
    \   table.sort(row, function(a, b) return b[25] < a[25] end)\n    table.sort(row,\
    \ function(a, b) return b[26] > a[26] end)\n    table.sort(row, function(a, b)\
    \ return b[27] < a[27] end)\n    table.sort(row, function(a, b) return b[28] >\
    \ a[28] end)\n    table.sort(row, function(a, b) return b[29] < a[29] end)\n \
    \   table.sort(row, function(a, b", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, lst[i] do\n      row = { row = row, column\
    \ = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ a.column > b.column end)\n  local row_index = row\n  local column_index = row\n\
    \  for i = 1, #row do\n    local row = row_index\n    local column = column_index\n\
    \    for j = 1, lst[i] do\n      row = { row = row, column = column }\n      column\
    \ = column + 1\n    end\n    row_index = row\n    column_index = column\n  end\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ { lst[i][1], lst[i][x] }\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n", "  local row = {}\n  for i = 1, #lst do\n    if\
    \ lst[i][1] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return #lst[a] > #lst[b] end)\n  table.sort(row, function(a,\
    \ b) return #lst[b] > #lst[a] end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n    if row[1] <\
    \ x then\n      table.insert(row, row[1], x)\n    end\n    table.insert(row, #row\
    \ + 1, row[1])\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row_x = lst[i]\n    if row_x == x then\n      table.insert(row, i)\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return #lst[a]\
    \ > #lst[b] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n\
    \    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n      \
    \  table.insert(row, j)\n        break\n      end\n    end\n    table.insert(row,\
    \ #row + 1)\n    table.sort(row)\n    table.sort(row, function(a, b) return b\
    \ - a end)\n    table.insert(row, 0)\n    table.sort(row, function(a, b) return\
    \ a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a, b) return\
    \ row[a] - row[b] end)\n    table.insert(row, 0)\n  end\n  return row\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i]\
    \ do\n      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b.column > a.column end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    if\
    \ row[x] == nil then\n      break\n    end\n  end\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n\
    \      row = { row = row, column = j }\n    end\n  end\n  table.sort(row, function(a,\
    \ b)\n    return a.row > b.row\n  end)\n  table.sort(row, function(a, b)\n   \
    \ return a.column > b.column\n  end)\n  local coords = {}\n  for i = 1, #row do\n\
    \    table.insert(coords, { row = row[i].row, column = row[i].column })\n  end\n\
    \  return coords\nend", "  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = { lst[i] }\n    for j = 1, x do\n      table.insert(row, 0)\n    end\n   \
    \ table.insert(row, #row + 1)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 0, #lst do\n    local row = { lst[i] }\n    for j = 0, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i][1], lst[i][#lst] }\n    if row[1] < x then\n      table.insert(row,\
    \ x)\n    end\n    table.sort(row)\n    table.sort(row)\n    table.insert(row,\
    \ i)\n    table.insert(row, #lst)\n    table.sort(row)\n    table.insert(row,\
    \ #lst)\n  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, j)\n      end\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    if lst[i] == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ #lst[b] >= #lst[a] end)\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = lst[i]\n    if row[x] then\n      table.insert(row,\
    \ row[x])\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\
    \ return b > a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    if lst[i][1] == x then\n      table.insert(row, i)\n    end\n  end\n\
    \  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = row\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[j] = i\n \
    \       break\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i][1] }\n    for j = 2, #lst[i] do\n \
    \     if row[1] == x then\n        table.insert(row, lst[i][j])\n      end\n \
    \   end\n    table.sort(row)\n    table.sort(row, function(a, b) return b < a\
    \ end)\n    table.insert(row, 0)\n    table.sort(row, function(a, b) return b\
    \ > a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b) return\
    \ a < b end)\n    table.insert(row, #row)\n  end\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x\
    \ do\n      table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n \
    \ end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "    local row = {}\n    for i = 1,\
    \ #lst do\n        local row = { lst[i][1] }\n        for j = 2, #lst[i] do\n\
    \            if row[1] <= x then\n                table.insert(row, lst[i][j])\n\
    \            end\n        end\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b < a end)\n        table.insert(row, 0)\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b < a end)\n        table.insert(row,\
    \ 0)\n        table.sort(row)\n        table.sort(row, function(a, b) return b\
    \ < a end)\n        table.insert(row, 0)\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b < a end)\n        table.insert(row, 0)\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b < a end)\n        table.insert(row,\
    \ 0)\n        table.sort(row)\n        table.sort(row, function(a, b) return b\
    \ < a end)\n        table.insert(row, 0)\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b < a end)\n        table.insert(row, 0)\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b < a end)\n        table.insert(row,\
    \ 0)\n        table.sort(row)\n        table.sort(row, function(a, b) return b\
    \ < a end)\n        table.insert(row, 0)\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b < a end)\n        table.insert(row, 0)\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b < a end)\n        table.insert(row,\
    \ 0)\n        table.sort(row)\n        table.sort(row, function(a, b) return b\
    \ < a end)\n        table.insert(row, 0)\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b < a end)\n        table.insert(row, 0)\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b < a end)\n        table.insert(row,\
    \ 0)\n        table.sort(row)\n        table.sort(row, function(a, b) return b\
    \ < a end)\n        table.insert(row, 0)\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b < a end)\n        table.insert(row, 0)\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b < a end)\n        table.insert(row,\
    \ 0)\n        table.sort(row)\n        table.sort(row, function(a, b) return b\
    \ < a end)\n        table.insert(row, 0)\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b < a end)\n        table.insert(row, 0)\n        table.sort(row)\n\
    \        table.sort(row, function(a, b) return b < a end)\n        table.insert(row,\
    \ 0)\n        table.", "  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n        return\
    \ { i, j }\n      end\n    end\n  end\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        row = row\n      else\n        row = row + 1\n      end\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    if lst[i][1]\
    \ == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n \
    \ table.sort(row, function(a, b) return a[#a] > b[#a] end)\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)", "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1] }\n\
    \    for j = 2, #lst[i] do\n      if row[1] == x then\n        table.insert(row,\
    \ lst[i][j])\n      end\n    end\n    table.sort(row)\n    table.sort(row)\n \
    \   table.insert(row, 0)\n    table.insert(row, #row)\n    table.sort(row)\n \
    \   table.insert(row, #row)\n  end\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = lst[i]\n    if row[x] == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row, i)\n\
    \    table.insert(row, i)\n    table.insert(row, i)", "  local row = {}\n  for\
    \ i = 0, #lst - 1 do\n    local row = { lst[i][1], lst[i][2] }\n    if row ==\
    \ x then\n      break\n    end\n  end\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n      row\
    \ = { row = row, column = j }\n    end\n  end\n  table.sort(row, function(a, b)\n\
    \    return a.row > b.row\n  end)\n  table.sort(row, function(a, b)\n    return\
    \ a.column > b.column\n  end)\n  return row\nend", "  local row = {}\n  for i\
    \ = 1, #lst do\n    local row = { lst[i][1] }\n    for j = 2, #lst[i] do\n   \
    \   if row[1] > lst[i][j] then\n        row[1] = lst[i][j]\n      end\n      if\
    \ row[2] > lst[i][j] then\n        row[2] = lst[i][j]\n      end\n    end\n  \
    \  table.insert(row, i)\n    table.insert(row, j)\n    table.insert(row, #lst[i])\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b[2] < a[2]\
    \ end)\n  table.sort(row, function(a, b) return b[1] < a[1] end)\n  return row\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n  \
    \  for j = 1, x do\n      table.insert(row, 0)\n    end\n    table.insert(row,\
    \ #row + 1)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return\
    \ b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n  \
    \  local row = lst[i]\n    if row[x] == nil then\n      row[x] = i\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b[a] <= b[b]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n \
    \ table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, #row\
    \ do\n      if row[j] == x then\n        return { i, j }\n      end\n    end\n\
    \  end\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i][1]\n\
    \    if row_x == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return a[#a] > b[#a] end)\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1] }\n    for\
    \ j = 2, #lst[i] do\n      if row[1] < lst[i][j] then\n        table.insert(row,\
    \ lst[i][j])\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, i)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 2)\n    table.insert(row,\
    \ #row + 3)\n    table.insert(row, #row + 4)\n    table.insert(row, #row + 5)\n\
    \    table.insert(row, #row + 6)\n    table.insert(row, #row + 7)\n    table.insert(row,\
    \ #row + 8)\n    table.insert(row, #row + 9)\n    table.insert(row, #row + 10)\n\
    \    table.insert(row, #row + 11)\n    table.insert(row, #row + 12)\n    table.insert(row,\
    \ #row + 13)\n    table.insert(row, #row + 14)\n    table.insert(row, #row + 15)\n\
    \    table.insert(row, #row + 16)\n    table.insert(row, #row + 17)\n    table.insert(row,\
    \ #row + 18)\n    table.insert(row, #row + 19)\n    table.insert(row, #row + 20)\n\
    \    table.insert(row, #row + 21)\n    table.insert(row, #row + 22)\n    table.insert(row,\
    \ #row + 23)\n    table.insert(row, #row + 24)\n    table.insert(row, #row + 25)\n\
    \    table.insert(row, #row + 26)\n    table.insert(row, #row + 27)\n    table.insert(row,\
    \ #row + 28)\n    table.insert(row, #row + 29)\n    table.insert(row, #row + 30)\n\
    \    table.insert(row, #row + 31)\n    table.insert(row, #row + 32)\n    table.insert(row,\
    \ #row + 33)\n    table.insert(row, #row + 34)\n    table.insert(row, #row + 35)\n\
    \    table.insert(row, #row + 36)\n    table.insert(row, #row + 37)\n    table.insert(row,\
    \ #row + 38)\n    table.insert(row, #row + 39)\n    table.insert(row, #row + 40)\n\
    \    table.insert(row, #row + 41)\n    table.insert(row, #row + 42)\n    table.insert(row,\
    \ #row + 43)\n    table.insert(row, #row + 44)\n    ", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row,\
    \ i)\n    table.insert(row, #lst, i)\n    table.insert(row, #lst, #lst, i)\n \
    \ end\n  table.sort(row)\n  local rows = {}\n  for i = 1, #row do\n    local row\
    \ = row[i]\n    local columns = {}\n    for j = 1, #row do\n      table.insert(columns,\
    \ row[j])\n    end\n    table.insert(rows, i, columns)\n  end\n  table.sort(rows)\n\
    \  local results = {}\n  for i = 1, #rows do\n    local row = rows[i]\n    local\
    \ columns = {}\n    for j = 1, #row do\n      table.insert(columns, row[j])\n\
    \    end\n    table.insert(results, i, columns)\n  end\n  return results\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst]\
    \ }\n    if row.x == x then\n      return row\n    end\n  end\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n\
    \      row = { row = row, column = j }\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i][1] }\n    for j = 2, #lst[i] do\n \
    \     table.insert(row, lst[i][j])\n    end\n    table.insert(row, i)\n    table.insert(row,\
    \ x)\n    table.insert(row, #row)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == x then\n      table.insert(row, i)\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return #lst[b] > #lst[a]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row, lst[i][x])\n\
    \    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i]\
    \ + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row,\
    \ lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n \
    \   table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i]\
    \ + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row,\
    \ lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n \
    \   table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i]\
    \ + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row,\
    \ lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n \
    \   table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i]\
    \ + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row,\
    \ lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n \
    \   table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i]\
    \ + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row,\
    \ lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n \
    \   table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i]\
    \ + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row,\
    \ lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n \
    \   table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row, lst[i][#lst[i]\
    \ + 1 - x])\n    table.insert(row, lst[i][#lst[i] + 1 - x])\n    table.insert(row,\
    \ lst[i][#lst[i] + 1 - x])\n", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i][1] }\n    for j = 2, #lst[i] do\n      if row[1] <= x then\n\
    \        table.insert(row, lst[i][j])\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b < a end)\n    table.insert(row, 0)\n\
    \    table.sort(row, function(a, b) return b > a end)\n    table.insert(row, #row)\n\
    \  end\n  return row\nend", "    local row = {}\n    for i = 1, #lst do\n    \
    \    local row = lst[i]\n        if row[x] == x then\n            table.insert(row,\
    \ i)\n        end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ table.insert(row, j)\n      end\n    end\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b - a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x do\n      table.insert(row,\
    \ 0)\n    end\n    table.insert(row, #row + 1)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {\
    \ lst[i] }\n    for j = 1, #row do row[j] = row[j] .. x end\n    table.insert(row,\
    \ #row)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b -\
    \ a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, lst[i] do\n      row = { row = row, column = j }\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b\
    \ > a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row_x = lst[i]\n    if row_x == x then\n      table.insert(row, i)\n    end\n\
    \  end\n  table.sort(row)\n  table.sort(row, function(a, b) return #row > #b end)\n\
    \  table.sort(row, function(a, b) return #row < #b end)\n  return row\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row = row + {i, j, 0}\n        break\n\
    \      end\n    end\n  end\n  table.sort(row)\n  return row\nend", "  local row\
    \ = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    local row_x = lst[i][1]\n\
    \    if row_x == x then\n      table.insert(row, i)\n    end\n    table.insert(row,\
    \ row_x, -row_x)\n    table.insert(row, row_x, row_x)\n    table.insert(row, row_x,\
    \ row_x)\n    table.insert(row, row_x, row_x)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[2] < b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == x then\n      table.insert(row, i)\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return #lst[b] >= #lst[a] end)\n  return row\n\
    end", "  local row = {}\n  for i = 0, #lst do\n    local row = { lst[i] }\n  \
    \  for j = 1, x do\n      table.insert(row, lst[i])\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b < a end)\n    table.sort(row, function(a,\
    \ b) return b > a end)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, function(a, b) return a > b end)\n    table.sort(row, function(a,\
    \ b) return a < b end)\n    table.sort(row, function(a, b) return a > b end)\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, function(a, b) return a > b end)\n    table.sort(row, function(a,\
    \ b) return a < b end)\n    table.sort(row, function(a, b) return a > b end)\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, function(a, b) return a > b end)\n    table.sort(row, function(a,\
    \ b) return a < b end)\n    table.sort(row, function(a, b) return a > b end)\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, function(a, b) return a > b end)\n    table.sort(row, function(a,\
    \ b) return a < b end)\n    table.sort(row, function(a, b) return a > b end)\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, function(a, b) return a > b end)\n    table.sort(row, function(a,\
    \ b) return a < b end)\n    table.sort(row, function(a, b) return a > b end)\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, function(a, b) return a > b end)\n    table.sort(row, function(a,\
    \ b) return a < b end)\n    table.sort(row, function(a, b) return a > b end)\n\
    \    table.sort(row, function(a, b) return a < b end)\n    table.sort(row, function(a,\
    \ b) return a > b end)\n    table.sort(row, function(a, b) return a < b end)\n\
    \    table.sort(row, ", "  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n        return\
    \ { i, j }\n      end\n    end\n  end\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x\
    \ then\n        table.insert(row, j)\n      end\n    end\n  end\n  table.sort(row)\n\
    \  table.sort(row, function(a, b) return b - a end)\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, x\
    \ do\n      table.insert(row, 0)\n    end\n    table.insert(row, #row + 1)\n \
    \ end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == x then\n      table.insert(row, i)\n \
    \   end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return #lst[a]\
    \ > #lst[b] end)\n  return row\nend", "    local row = {}\n    for i = 1, #lst\
    \ do\n        local row_x = lst[i][1]\n        if row_x == x then\n          \
    \  table.insert(row, i)\n        end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n    return row\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, lst[i] do\n  \
    \    row = { row = row, column = j }\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a.row > b.row end)\n  table.sort(row, function(a, b) return a.column\
    \ > b.column end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = lst[i]\n    if row[x] ~= nil then\n      table.insert(row, row[x])\n\
    \    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return b\
    \ > a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = { lst[i] }\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  table.sort(row, function(a, b) return a[#row] - b[#row]\
    \ end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ v)\n  end\n  table.sort(rows)\n  table.sort(rows, function(a, b) return b -\
    \ a end)\n  table.sort(rows, function(a, b) return a[#rows] - b[#rows] end)\n\
    \  local row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v)\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  table.sort(row, function(a, b) return a[#row] - b[#row] end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows)\n\
    \  table.sort(rows, function(a, b) return b - a end)\n  table.sort(rows, function(a,\
    \ b) return a[#rows] - b[#rows] end)\n  local row = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  table.sort(row, function(a, b) return a[#row] - b[#row]\
    \ end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ v)\n  end\n  table.sort(rows)\n  table.sort(rows, function(a, b) return b -\
    \ a end)\n  table.sort(rows, function(a, b) return a[#rows] - b[#rows] end)\n\
    \  local row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v)\n \
    \ end\n  table.sort(row)\n  table.sort(row, function(a, b) return b - a end)\n\
    \  table.sort(row, function(a, b) return a[#row] - b[#row] end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n  end\n  table.sort(rows)\n\
    \  table.sort(rows, function(a, b) return b - a end)\n  table.sort(rows, function(a,\
    \ b) return a[#rows] - b[#rows] end)\n  local row = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(row, v)\n  end\n  ", "    local row = {}\n    for i = 1,\
    \ #lst do\n        if lst[i] == x then\n            table.insert(row, i)\n   \
    \     end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n\
    \        return { i, j }\n      end\n    end\n  end\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = { lst[i] }\n    for j = 1, #row do row[j]\
    \ = row[j] end\n    if row[x] == x then\n      table.insert(row, x)\n    end\n\
    \    table.insert(row, i)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b - a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row_x = lst[i]\n    if row_x == x then\n      table.insert(row,\
    \ i)\n    end\n  end\n  table.sort(row, function(a, b) return #lst[a] > #lst[b]\
    \ end)\n  table.sort(row, function(a, b) return #lst[b] > #lst[a] end)\n  return\
    \ row\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
