name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Write your code here\nend", "  -- Write your code here\nend",
  "  -- Write your code here\nend", "    local function compare(lhs, rhs)\n      \
    \  local lhs_ones = lhs:bits() - '0'.\n            reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \        local rhs_ones = rhs:bits() - '0'.\n            reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \        if lhs_ones == rhs_ones then\n            return lhs:decimal() - rhs:decimal()\n\
    \        end\n        return lhs_ones < rhs_ones\n    end\n    return table.sort(arr,\
    \ compare)\nend", "  -- Write your code here\nend", "    local function compare(left,\
    \ right)\n        local left_ones = count_ones(left)\n        local right_ones\
    \ = count_ones(right)\n        if left_ones == right_ones then\n            return\
    \ tonumber(left)\n        end\n        return tonumber(right) - tonumber(left)\n\
    \    end\n    table.sort(arr, compare)\nend", "  -- Write your code here\nend",
  "  -- Write your code here\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here\nend", "  -- Write your code here.\n\
    end", "    local function compare(lhs, rhs)\n        if lhs == 0 then\n      \
    \      return 1\n        end\n        if rhs == 0 then\n            return -1\n\
    \        end\n        return lhs < rhs and 1 or -1\n    end\n    table.sort(arr,\
    \ compare)\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "    local function compare(lhs, rhs)\n        if lhs == 0 then\n      \
    \      return 1\n        end\n        if rhs == 0 then\n            return -1\n\
    \        end\n        if lhs < rhs then\n            return -1\n        end\n\
    \        if lhs > rhs then\n            return 1\n        end\n        return\
    \ 0\n    end\n    table.sort(arr, compare)\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\nend", "  -- Write your code here.\n\
    end", "    local function compare(lhs, rhs)\n        if lhs > rhs then\n     \
    \       return 1\n        elseif lhs < rhs then\n            return -1\n     \
    \   else\n            return 0\n        end\n    end\n    table.sort(arr, compare)\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "    local function compare(left, right)\n     \
    \   if left == 0 then\n            return right\n        end\n        if right\
    \ == 0 then\n            return left\n        end\n        if left == -1 then\n\
    \            return -1\n        end\n        if right == -1 then\n           \
    \ return 1\n        end\n        if left == 1 then\n            return -1\n  \
    \      end\n        if right == 1 then\n            return 1\n        end\n  \
    \      return left < right and 1 or -1\n    end\n    table.sort(arr, compare)\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  \
    \  local function compare(left, right)\n        local left_ones = math.floor(left\
    \ / 2)\n        local right_ones = math.floor(right / 2)\n        if left_ones\
    \ == right_ones then\n            return left - right\n        end\n        return\
    \ left_ones - right_ones\n    end\n    table.sort(arr, compare)\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here.\nend", "  -- Write your code here\n\
    end", "    local function compare(arr1, arr2)\n        local i = 1\n        local\
    \ j = 1\n        local k = 1\n        while i < #arr1 and j < #arr2 do\n     \
    \       if arr1[i] == arr2[j] then\n                i = i + 1\n              \
    \  j = j + 1\n            else\n                if arr1[i] < arr2[j] then\n  \
    \                  return -1\n                else\n                    return\
    \ 1\n                end\n            end\n        end\n        if i == #arr1\
    \ then\n            if j == #arr2 then\n                return 0\n           \
    \ else\n                return 1\n            end\n        else\n            if\
    \ j == #arr2 then\n                return -1\n            else\n             \
    \   return 1\n            end\n        end\n    end\n    table.sort(arr, compare)\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here.\nend", "  -- Write your code here.\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here.\nend", "  -- Write your code here\nend", "    local function\
    \ compare(lhs, rhs)\n        local lhs_ones = lhs:bits() - '0'.\n            reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \        local rhs_ones = rhs:bits() - '0'.\n            reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \        if lhs_ones < rhs_ones then\n            return -1\n        elseif lhs_ones\
    \ > rhs_ones then\n            return 1\n        else\n            return lhs:decimal()\
    \ - rhs:decimal()\n        end\n    end\n    return table.sort(arr, compare)\n\
    end", "  -- Write your code here.\nend", "  -- Write your code here\nend", " \
    \ -- Write your code here\nend", "  -- Write your code here.\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here.\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here\nend", "  -- Write your code here\nend",
  "  -- Write your code here\nend", "  -- Write your code here\nend", "    local function\
    \ compare(lhs, rhs)\n        local function bin2dec(n)\n            local s =\
    \ ''\n            for i = 1, 8 do\n                s = s .. string.sub(n, i, i)\n\
    \            end\n            return tonumber(s)\n        end\n        local function\
    \ dec2bin(n)\n            local s = ''\n            for i = 1, 8 do\n        \
    \        s = s .. string.sub(n, i, i)\n            end\n            return s\n\
    \        end\n        local function bin2dec2(lhs, rhs)\n            return tonumber(lhs)\
    \ < tonumber(rhs) and -1 or 1\n        end\n        local function dec2bin2(lhs,\
    \ rhs)\n            return tonumber(lhs) < tonumber(rhs) and -1 or 1\n       \
    \ end\n        local function dec2bin3(lhs, rhs)\n            return tonumber(lhs)\
    \ < tonumber(rhs) and -1 or 1\n        end\n        local function dec2bin4(lhs,\
    \ rhs)\n            return tonumber(lhs) < tonumber(rhs) and -1 or 1\n       \
    \ end\n        local function dec2bin5(lhs, rhs)\n            return tonumber(lhs)\
    \ < tonumber(rhs) and -1 or 1\n        end\n        local function dec2bin6(lhs,\
    \ rhs)\n            return tonumber(lhs) < tonumber(rhs) and -1 or 1\n       \
    \ end\n        local function dec2bin7(lhs, rhs)\n            return tonumber(lhs)\
    \ < tonumber(rhs) and -1 or 1\n        end\n        local function dec2bin8(lhs,\
    \ rhs)\n            return tonumber(lhs) < tonumber(rhs) and -1 or 1\n       \
    \ end\n        local function dec2bin9(lhs, rhs)\n            return tonumber(lhs)\
    \ < tonumber(rhs) and -1 or 1\n        end\n        local function dec2bin10(lhs,\
    \ rhs)\n            return tonumber(lhs) < tonumber(rhs) and -1 or 1\n       \
    \ end\n        local function dec2bin11(lhs, rhs)\n            return tonumber(lhs)\
    \ < tonumber(rhs) and -1 or 1\n        end\n        local function dec2bin12(lhs,\
    \ rhs)\n            return tonumber(lhs) < tonumber(rhs) and -1 or 1\n       \
    \ end\n        local function dec2bin13(lhs, rhs)\n            return tonumber(lhs)\
    \ < tonumber(rhs) and -1 or 1\n        end\n        local function dec2bin14(lhs,\
    \ rhs)\n            return tonumber(lhs) < tonumber(rhs) and -1 or 1\n       \
    \ end\n        local function dec2bin15(lhs, ", "  -- Write your code here\nend",
  "    local function compare(left, right)\n        local left_ones = bit.lshift(bit.band(left,\
    \ 1), 32)\n        local right_ones = bit.lshift(bit.band(right, 1), 32)\n   \
    \     return left_ones - right_ones\n    end\n    table.sort(arr, compare)\nend",
  "    local function compare(lhs, rhs)\n        if lhs < rhs then\n            return\
    \ -1\n        elseif lhs > rhs then\n            return 1\n        else\n    \
    \        return 0\n        end\n    end\n    table.sort(arr, compare)\nend", " \
    \ -- Write your code here.\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "    local function compare(lhs, rhs)\n        if lhs\
    \ == 0 then\n            return 1\n        end\n        if rhs == 0 then\n   \
    \         return -1\n        end\n        return lhs > rhs and 1 or -1\n    end\n\
    \    table.sort(arr, compare)\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here\nend", "  -- Write your code here\nend",
  "  -- Write your code here\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "    local function\
    \ compare(lhs, rhs)\n        if lhs < rhs then\n            return -1\n      \
    \  end\n        if lhs > rhs then\n            return 1\n        end\n       \
    \ return 0\n    end\n    table.sort(arr, compare)\nend", "    local sorted_arr\
    \ = {}\n    local num_ones = 0\n    for i = 1, #arr do\n        if arr[i] == 1\
    \ then\n            num_ones = num_ones + 1\n        end\n    end\n    if num_ones\
    \ == 0 then\n        -- sort by dec. value\n        table.sort(arr, function(x,y)\n\
    \            return math.abs(x-y)\n        end)\n    else\n        -- sort by\
    \ dec. value if number of ones is equal\n        table.sort(arr, function(x,y)\n\
    \            if x == y then\n                return math.abs(x-y)\n          \
    \  else\n                return math.abs(x-y) / num_ones\n            end\n  \
    \      end)\n    end\n    return arr\nend", "  -- Write your code here\nend",
  "    local function compare(lhs, rhs)\n        if lhs < rhs then\n            return\
    \ -1\n        end\n        if lhs > rhs then\n            return 1\n        end\n\
    \        return 0\n    end\n    table.sort(arr, compare)\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "    local function compare(left, right)\n\
    \        local left_ones = math.floor(left / 2)\n        local right_ones = math.floor(right\
    \ / 2)\n        if left_ones == right_ones then\n            return left - right\n\
    \        end\n        return left_ones - right_ones\n    end\n    table.sort(arr,\
    \ compare)\nend", "  -- Write your code here.\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "    local function compare(left, right)\n     \
    \   local left_ones = math.floor(left / 2)\n        local right_ones = math.floor(right\
    \ / 2)\n        if left_ones == right_ones then\n            return left - right\n\
    \        end\n        return left_ones - right_ones\n    end\n    table.sort(arr,\
    \ compare)\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "    local function compare(lhs, rhs)\n        if\
    \ lhs < rhs then\n            return -1\n        end\n        if lhs > rhs then\n\
    \            return 1\n        end\n        return 0\n    end\n    table.sort(arr,\
    \ compare)\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here.\nend", " \
    \ -- Write your code here\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "    local function compare(lhs, rhs)\n        -- If number\
    \ of ones in lhs binary representation is less than number of ones in rhs binary\
    \ representation,\n        -- then lhs comes before rhs.\n        if lhs < rhs\
    \ then\n            return true\n        end\n        -- If number of ones in\
    \ lhs binary representation is greater than number of ones in rhs binary representation,\n\
    \        -- then rhs comes before lhs.\n        if lhs > rhs then\n          \
    \  return false\n        end\n        -- If number of ones in lhs binary representation\
    \ is equal to number of ones in rhs binary representation,\n        -- then compare\
    \ based on decimal value.\n        if lhs == rhs then\n            return lhs\
    \ - rhs\n        end\n    end\n    table.sort(arr, compare)\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here.\nend", "    local function compare(lhs,\
    \ rhs)\n        if lhs < rhs then\n            return -1\n        elseif lhs >\
    \ rhs then\n            return 1\n        else\n            return 0\n       \
    \ end\n    end\n    table.sort(arr, compare)\nend", "  -- Write your code here\n\
    end", "    local sorted_arr = {}\n    local num_ones = 0\n    for i = 1, #arr\
    \ do\n        local num = arr[i]\n        if num ~= 0 then\n            num_ones\
    \ = num_ones + 1\n            table.insert(sorted_arr, num)\n        end\n   \
    \ end\n    if num_ones == 0 then\n        table.sort(sorted_arr)\n    else\n \
    \       local decimal_arr = {}\n        local decimal_num = 0\n        for i =\
    \ 1, #arr do\n            local num = arr[i]\n            if num ~= 0 then\n \
    \               decimal_num = decimal_num + num\n                table.insert(decimal_arr,\
    \ decimal_num)\n            end\n        end\n        table.sort(decimal_arr)\n\
    \        for i = 1, #sorted_arr do\n            local num = sorted_arr[i]\n  \
    \          local decimal_num = decimal_arr[i]\n            sorted_arr[i] = decimal_num\
    \ + num\n        end\n        table.sort(sorted_arr)\n    end\n    return sorted_arr\n\
    end", "  -- Write your code here\nend", "    local function compare(lhs, rhs)\n\
    \        if lhs == 0 then\n            return 1\n        end\n        if lhs ==\
    \ 1 then\n            return -1\n        end\n        if rhs == 0 then\n     \
    \       return -1\n        end\n        if rhs == 1 then\n            return 1\n\
    \        end\n        return lhs - rhs\n    end\n    table.sort(arr, compare)\n\
    end", "  -- Write your code here\nend", "  -- Write your code here.\nend", " \
    \ -- Write your code here\nend", "  -- Write your code here\nend", "    local\
    \ function compare(lhs, rhs)\n        if lhs < rhs then\n            return -1\n\
    \        elseif lhs > rhs then\n            return 1\n        else\n         \
    \   return 0\n        end\n    end\n    table.sort(arr, compare)\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\nend", "    local function compare(lhs, rhs)\n        if lhs == 0\
    \ then\n            return 1\n        end\n        if lhs == -1 then\n       \
    \     return -1\n        end\n        if rhs == 0 then\n            return 1\n\
    \        end\n        if rhs == -1 then\n            return -1\n        end\n\
    \        return lhs - rhs\n    end\n    table.sort(arr, compare)\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here.\nend", "  -- Write your\
    \ code here.\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  \
    \  local function compare(left, right)\n        if left == 0 then\n          \
    \  return right\n        end\n        if right == 0 then\n            return left\n\
    \        end\n        return left > right and 1 or -1\n    end\n    table.sort(arr,\
    \ compare)\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "    local function compare(arr1, arr2)\n        -- arr1 has less number\
    \ of ones\n        if arr1.num < arr2.num then\n            return -1\n      \
    \  end\n        -- arr2 has less number of ones\n        if arr1.num > arr2.num\
    \ then\n            return 1\n        end\n        -- arr1 has equal number of\
    \ ones\n        if arr1.num == arr2.num then\n            return compare(arr1.dec,\
    \ arr2.dec)\n        end\n        -- arr2 has equal number of ones\n        return\
    \ -1\n    end\n    table.sort(arr, compare)\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here\nend", "    local function\
    \ compare(lhs, rhs)\n        if lhs > rhs then\n            return 1\n       \
    \ elseif lhs < rhs then\n            return -1\n        else\n            return\
    \ 0\n        end\n    end\n    table.sort(arr, compare)\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "    local function compare(arr1, arr2)\n\
    \        local i1, i2 = 1, 1\n        while i1 <= #arr1 and i2 <= #arr2 do\n \
    \           if arr1[i1] > arr2[i2] then\n                return 1\n          \
    \  elseif arr1[i1] < arr2[i2] then\n                return -1\n            else\n\
    \                i1, i2 = i1 + 1, i2 + 1\n            end\n        end\n     \
    \   return #arr1 > #arr2 ? 1 : -1\n    end\n    table.sort(arr, compare)\nend",
  "    local function compare(left, right)\n        local left_ones = count_ones(left)\n\
    \        local right_ones = count_ones(right)\n        if left_ones < right_ones\
    \ then\n            return -1\n        elseif left_ones > right_ones then\n  \
    \          return 1\n        else\n            return compare(decimal_value(left),\
    \ decimal_value(right))\n        end\n    end\n    table.sort(arr, compare)\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "  -- Write your code here\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "    local function compare(left, right)\n        local left_ones = count_ones(left)\n\
    \        local right_ones = count_ones(right)\n        if left_ones == right_ones\
    \ then\n            return tonumber(left)\n        end\n        return left_ones\
    \ - right_ones\n    end\n    table.sort(arr, compare)\nend", "  -- Write your\
    \ code here\nend", "  -- Write your code here\nend", "    local function compare(left,\
    \ right)\n        local left_ones = math.floor(left / 2)\n        local right_ones\
    \ = math.floor(right / 2)\n        if left_ones == right_ones then\n         \
    \   return left - right\n        end\n        return left_ones - right_ones\n\
    \    end\n    table.sort(arr, compare)\nend", "  -- Write your code here\nend",
  "  -- Write your code here\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\nend", "  -- Write your code here\nend", "  -- Write your code here\nend",
  "  -- Write your code here\nend", "  -- Write your code here\nend", "    local function\
    \ compare(left, right)\n        if left == 0 then\n            return right\n\
    \        end\n        if right == 0 then\n            return left\n        end\n\
    \        return left > right and 1 or -1\n    end\n    table.sort(arr, compare)\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  \
    \  local function compare(lhs, rhs)\n        if lhs > rhs then\n            return\
    \ 1\n        elseif lhs < rhs then\n            return -1\n        else\n    \
    \        return 0\n        end\n    end\n    table.sort(arr, compare)\nend", " \
    \ -- Write your code here\nend", "  -- Write your code here\nend", "  -- Write\
    \ your code here\nend", "  -- Write your code here\nend", "  -- Write your code\
    \ here\nend", "    local function compare(lhs, rhs)\n        if lhs > rhs then\n\
    \            return 1\n        elseif lhs < rhs then\n            return -1\n\
    \        else\n            return 0\n        end\n    end\n    table.sort(arr,\
    \ compare)\nend", "  -- Write your code here\nend", "  -- Write your code here\n\
    end", "  -- Write your code here\nend", "  -- Write your code here\nend", "  --\
    \ Write your code here\nend", "    local function compare(lhs, rhs)\n        if\
    \ lhs < rhs then\n            return -1\n        end\n        if lhs > rhs then\n\
    \            return 1\n        end\n        return 0\n    end\n    table.sort(arr,\
    \ compare)\nend", "    local function compare(lhs, rhs)\n        if lhs < rhs\
    \ then\n            return -1\n        end\n        if lhs > rhs then\n      \
    \      return 1\n        end\n        return 0\n    end\n    table.sort(arr, compare)\n\
    end", "  -- Write your code here\nend", "  -- Write your code here.\nend", " \
    \ -- Write your code here.\nend", "  -- Write your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
