name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal ab = math.abs(a - b)\n\tlocal bc = math.abs(b - c)\n\tlocal\
    \ ac = math.abs(a - c)\n\treturn ab > bc and (ab == bc or ac == 90)\nend", " \
    \ local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab > bc and\
    \ ab > ad\nend", "  -- Check if any of a, b, c are negative\n  if a < 0 or b <\
    \ 0 or c < 0 then\n    return false\n  end\n  -- Check if any of a, b, c are equal\n\
    \  if a == b and a == c then\n    return true\n  end\n  -- Check if any of a,\
    \ b, c are 90 degree\n  if math.abs(math.atan2(b, a)) > math.pi then\n    return\
    \ false\n  end\n  -- Check if any of a, b, c are 180 degree\n  if math.abs(math.atan2(c,\
    \ b)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 270 degree\n  if math.abs(math.atan2(a, c)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 360 degree\n  if math.abs(math.atan2(b,\
    \ a)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 180 degree\n  if math.abs(math.atan2(c, b)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 90 degree\n  if math.abs(math.atan2(a,\
    \ c)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 270 degree\n  if math.abs(math.atan2(b, a)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 360 degree\n  if math.abs(math.atan2(c,\
    \ b)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 180 degree\n  if math.abs(math.atan2(a, c)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 90 degree\n  if math.abs(math.atan2(b,\
    \ a)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 270 degree\n  if math.abs(math.atan2(c, b)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 360 degree\n  if math.abs(math.atan2(a,\
    \ c)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 180 degree\n  if math.abs(math.atan2(b, a)) > math.pi then\n    return false\n\
    \  end\n  -- Check if any of a, b, c are 90 degree\n  if math.abs(math.atan2(c,\
    \ b)) > math.pi then\n    return false\n  end\n  -- Check if any of a, b, c are\
    \ 270 degree\n  if math.abs(math.atan2(a, c)) > math.pi then\n    return false\n\
    \  end\n  ", "  -- Check that the sides are all positive\n  if a < 0 or b < 0\
    \ or c < 0 then\n    return false\n  end", "    local ab = math.abs(b - a)\n \
    \   local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return ab\
    \ > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\t\
    -- Check that the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\
    \treturn false\n\tend", "   local bx = b[1]\n   local by = b[2]\n   local bz =\
    \ b[3]\n   local ax = a[1]\n   local ay = a[2]\n   local az = a[3]\n   local cx\
    \ = c[1]\n   local cy = c[2]\n   local cz = c[3]\n   local det = ax*by + ay*bz\
    \ + az*cx\n   if det < 0 then\n      return false\n   elseif det > 0 then\n  \
    \    return true\n   else\n      return ((by - cy) * (cx - az) + (bz - ax) * (cy\
    \ - ay)) < 0\n   end\nend", "   local ab = math.abs(b - a)\n   local bc = math.abs(c\
    \ - b)\n   local ac = math.abs(c - a)\n   if ab > bc then\n      return false\n\
    \   elseif ab > ac then\n      return true\n   elseif bc > ac then\n      return\
    \ false\n   else\n      return true\n   end\nend", "\tlocal ab = math.abs(b -\
    \ a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\nend", "\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab > ac or math.abs(math.atan2(b,a)) < math.pi/2)\nend",
  "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn ab > bc and ab > ac\nend", "\t-- Check that the sides are all positive\n\
    \tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", "\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend", "    local a, b, c = tonumber(a), tonumber(b), tonumber(c)\n    local\
    \ ab, bc, cb = a - b, b - c, c - b\n    local ab_sq = ab * ab\n    local bc_sq\
    \ = bc * bc \n    local cb_sq = cb * cb\n    local det = ab_sq + bc_sq - cb_sq\n\
    \    return det > 0\nend", "    local ab = math.abs(b - a)\n    local ac = math.abs(c\
    \ - a)\n    local abc = math.abs(b - c)\n    local bcd = math.abs(c - b)\n   \
    \ local det = ab * bcd - abc * ab\n    return det < 0\nend", "\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend", "  -- Check that the sides are non-zero\n  if a < 0 or b < 0 or c < 0\
    \ then return false end\n  -- Check that the sides are equal\n  if a == b and\
    \ a == c then return true end\n  -- Check that the sides are equal\n  if a ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if b == c then\
    \ return true end\n  -- Check that the sides are equal\n  if a == b and b == c\
    \ then return true end\n  -- Check that the sides are equal\n  if a == b and c\
    \ == c then return true end\n  -- Check that the sides are equal\n  if a == c\
    \ and b == c then return true end\n  -- Check that the sides are equal\n  if b\
    \ == c and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == c and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if b == c and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == c and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if b == c and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == c and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if b == c and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == c and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if b == c and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == c and b", "\t-- Check that the sides are non-zero.\n\tif a ~= 0 or\
    \ b ~= 0 or c ~= 0 then\n\t\treturn false\n\tend", "    local a, b, c = tonumber(a),\
    \ tonumber(b), tonumber(c)\n    if a == b and a == c then return true end\n  \
    \  if a == b or a == c then return false end\n    if b == c then return false\
    \ end\n    if a + b > c then return false end\n    if a + c > b then return false\
    \ end\n    if b + c > a then return false end\n    return true\nend", "\tlocal\
    \ a, b, c = math.abs(a), math.abs(b), math.abs(c)\n\tif a == 0 then return false\
    \ end\n\tif b == 0 then return false end\n\tif c == 0 then return false end\n\t\
    if a == b and a == c then return true end\n\tif a > b and a > c then return true\
    \ end\n\tif b > c and b > a then return true end\n\treturn false\nend", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "    local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n    local bc = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n    return ab\
    \ > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ad = math.abs(a - d)\n  local de = math.abs(d - e)\n  return ab\
    \ > bc and ab > ad and bc > de\nend", "    local ab = math.abs(b - a)\n    local\
    \ bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    return ab > bc and\
    \ (ab > ad or bc > ad)\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b,\
    \ 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn (math.abs(b - c) <= ab and math.abs(a - c) <=\
    \ bc and\n\t\tmath.abs(b - a) <= ac)\nend", "   local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n   local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \   local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n   return\
    \ is_right_angle\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\
    \tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn ab > bc and (ab > ac or math.abs(math.atan2(b,\
    \ a)) < math.pi/2)\nend", "   local ab = math.abs(a - b)\n   local bc = math.abs(b\
    \ - c)\n   local ac = math.abs(c - a)\n   return ab >= bc && ab >= ac\nend", " \
    \ local ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n  local is_right_angle = (ab + bc == math.pow(a, 2) +\
    \ math.pow(b, 2))\n  return is_right_angle\nend", "  -- Check if a is greater\
    \ than b and b is greater than c\n  if a > b and b > c then\n    -- Check if a\
    \ is greater than c\n    if a > c then\n      -- Return True\n      return true\n\
    \    else\n      -- Check if b is greater than c\n      if b > c then\n      \
    \  -- Return True\n        return true\n      else\n        -- Return False\n\
    \        return false\n      end\n    end\n  else\n    -- Return False\n    return\
    \ false\n  end\nend", "   local a, b, c = tonumber(a), tonumber(b), tonumber(c)\n\
    \   if b == 0 then\n      return false\n   elseif b > 0 and c > 0 then\n     \
    \ return math.abs(math.atan2(c,b)) <= math.pi/2\n   elseif b > 0 and c < 0 then\n\
    \      return math.abs(math.atan2(c,b)) <= math.pi\n   elseif b < 0 and c > 0\
    \ then\n      return math.abs(math.atan2(c,b)) <= math.pi + math.pi/2\n   elseif\
    \ b < 0 and c < 0 then\n      return math.abs(math.atan2(c,b)) <= math.pi + math.pi\n\
    \   end\nend", "\tlocal ab = math.abs(a - b)\n\tlocal bc = math.abs(b - c)\n\t\
    local ac = math.abs(c - a)\n\treturn ab >= bc and ab >= ac\nend", "    local ab\
    \ = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c\
    \ - a)\n    return ab > bc and\n        ab > ac and\n        ab > bc\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and\n\t\tab > ac and\n\t\tbc > ac\nend", "   local ab\
    \ = math.abs(a - b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(c -\
    \ a)\n   if ab > bc then\n      return ab > ac\n   else\n      return bc > ac\n\
    \   end\nend", "\tlocal a = math.abs(a)\n\tlocal b = math.abs(b)\n\tlocal c =\
    \ math.abs(c)\n\tif a > b and a > c then\n\t\treturn true\n\telseif b > c and\
    \ b > a then\n\t\treturn true\n\telseif c > a and c > b then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend", "   -- Check that the sides are non-zero\n\
    \   if math.abs(a) < 0.001 then\n      return false\n   end\n   if math.abs(b)\
    \ < 0.001 then\n      return false\n   end\n   if math.abs(c) < 0.001 then\n \
    \     return false\n   end\n   -- Check that the sides are equal\n   if math.abs(a\
    \ - b) < 0.001 then\n      return false\n   end\n   if math.abs(b - c) < 0.001\
    \ then\n      return false\n   end\n   if math.abs(c - a) < 0.001 then\n     \
    \ return false\n   end\n   -- Check that the angles are equal\n   if math.abs(math.atan2(b,a)\
    \ - math.atan2(c,a)) < 0.001 then\n      return false\n   end\n   -- Check that\
    \ the angles are 90 degree\n   if math.abs(math.atan2(b,c) - math.atan2(a,b))\
    \ < 0.001 then\n      return false\n   end\n   -- Check that the angles are right\n\
    \   if math.abs(math.atan2(b,c) - math.atan2(a,c)) < 0.001 then\n      return\
    \ false\n   end\n   return true\nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab\
    \ > ac\nend", "  local ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local\
    \ bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n  local is_right_angled = ab\
    \ > bc and (ab - bc) > (bc - ab)\n  return is_right_angled\nend", "\tlocal a =\
    \ math.abs(a)\n\tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tlocal ab =\
    \ math.abs(a + b)\n\tlocal bc = math.abs(b + c)\n\tlocal cb = math.abs(c + b)\n\
    \tlocal abc = math.abs(ab + bc)\n\tlocal bcb = math.abs(bc + ab)\n\tlocal abcb\
    \ = math.abs(abc + bcb)\n\t\n\tif ab == bc and ab == cb then\n\t\treturn true\n\
    \telseif ab == abc and ab == bcb then\n\t\treturn true\n\telseif abc == bcb and\
    \ abc == abcb then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", " \
    \  local ab = math.abs(a - b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(c\
    \ - a)\n   return ab > bc and\n          ab > ac and\n          bc > ac\nend",
  "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab >= bc and ab >= ac\nend", "    local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n    local bc = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n    return ab\
    \ > bc and ab > ac\nend", "    local ab = math.abs(b - a)\n    local bc = math.abs(c\
    \ - b)\n    local ac = math.abs(c - a)\n    return ab > bc and ab > ac\nend",
  "    local a = math.abs(a)\n    local b = math.abs(b)\n    local c = math.abs(c)\n\
    \    local s = math.sqrt((a + b) * (a + c) * (b + c))\n    return math.abs((a\
    \ + b + c) / s) < math.pi/6\nend", "   local ab = math.abs(b - a)\n   local bc\
    \ = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return (ab > bc and ab\
    \ > ac)\nend", "\t-- Check that the sides are all positive\n\tif a < 0 or b <\
    \ 0 or c < 0 then\n\t\treturn false\n\tend", "\tlocal ab = math.abs(a - b)\n\t\
    local bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\
    \ (ab == bc or ac == 90)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab > bc and (ab == ad or ab ==\
    \ -bc)\nend", "   -- Check that the sides are non-zero\n   if math.abs(a) < 0.001\
    \ then\n      return false\n   end\n   if math.abs(b) < 0.001 then\n      return\
    \ false\n   end\n   if math.abs(c) < 0.001 then\n      return false\n   end\n\
    \   -- Check that the sides are equal\n   if math.abs(a - b) < 0.001 then\n  \
    \    return false\n   end\n   if math.abs(a - c) < 0.001 then\n      return false\n\
    \   end\n   if math.abs(b - c) < 0.001 then\n      return false\n   end\n   --\
    \ Check that the angles are equal\n   if math.abs(math.atan2(b, c) - math.atan2(a,\
    \ c)) < 0.001 then\n      return false\n   end\n   if math.abs(math.atan2(b, a)\
    \ - math.atan2(c, b)) < 0.001 then\n      return false\n   end\n   if math.abs(math.atan2(a,\
    \ c) - math.atan2(b, c)) < 0.001 then\n      return false\n   end\n   -- Check\
    \ that the angles are 90 degree\n   if math.abs(math.atan2(b, a) - math.atan2(c,\
    \ b)) < 0.001 then\n      return false\n   end\n   if math.abs(math.atan2(a, c)\
    \ - math.atan2(b, a)) < 0.001 then\n      return false\n   end\n   -- Check that\
    \ the angles are right angle\n   return true\nend", "\t-- Check that the sides\
    \ are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend",
  "    local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac =\
    \ math.abs(c - a)\n    return ab > bc and ab > ac\nend", "    local ab = math.abs(a\
    \ - b)\n    local bc = math.abs(b - c)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and (ab > ac or math.abs(a - c) > math.abs(b - c))\nend", "\tlocal a\
    \ = math.abs(a)\n\tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a > b\
    \ and a > c then\n\t\treturn true\n\telseif b > c then\n\t\treturn false\n\telseif\
    \ c > a then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "   -- The\
    \ sides a, b, and c are all positive numbers.\n   -- The angle between them is\
    \ computed.\n   -- The angle is measured in radians.\n   -- The angle is measured\
    \ clockwise (positive angles go counter-clockwise).\n   -- If the angle is less\
    \ than 90 degrees, return true.\n   -- If the angle is greater than 90 degrees,\
    \ return false.\n   -- If the angle is exactly 90 degrees, return true.\n   --\
    \ If the angle is exactly 180 degrees, return false.\n   -- If the angle is exactly\
    \ 270 degrees, return false.\n   -- If the angle is exactly 360 degrees, return\
    \ true.\n   -- If the angle is exactly 45 or more degrees, return false.\n   --\
    \ If the angle is less than 45 degrees, return false.\n   -- If the angle is greater\
    \ than 135 degrees, return true.\n   -- If the angle is less than 135 degrees,\
    \ return true.\n   -- If the angle is greater than 225 degrees, return false.\n\
    \   -- If the angle is less than 225 degrees, return false.\n   -- If the angle\
    \ is exactly 135 degrees, return true.\n   -- If the angle is exactly 225 degrees,\
    \ return true.\n   -- If the angle is exactly 315 degrees, return false.\n   --\
    \ If the angle is exactly 360 degrees, return false.\n   -- If the angle is exactly\
    \ 450 degrees, return true.\n   -- If the angle is exactly 540 degrees, return\
    \ false.\n   -- If the angle is less than 540 degrees, return false.\n   -- If\
    \ the angle is greater than 675 degrees, return true.\n   -- If the angle is less\
    \ than 675 degrees, return true.\n   -- If the angle is greater than 900 degrees,\
    \ return false.\n   -- If the angle is less than 900 degrees, return false.\n\
    \   -- If the angle is exactly 900 degrees, return true.\n   -- If the angle is\
    \ exactly 180 degrees, return true.\n   -- If the angle is exactly 270 degrees,\
    \ return false.\n   -- If the angle is exactly 360 degrees, return false.\n  \
    \ -- If the angle is exactly 45 or more degrees, return true.\n   -- If the angle\
    \ is greater than 45 degrees, return true.\n   -- If the angle is less than 45\
    \ degrees, return false.\n   -- If the angle is greater than 135 degrees, return\
    \ false.\n   -- If the angle is less than 135 degrees, return false.\n   -- If\
    \ the angle is greater than 225 degrees, return true.\n   -- If the angle is less\
    \ than 225 degrees, return true.\n   -- If the angle is ", "\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab\
    \ = math.abs(c - a)\n\treturn ab > bc and ab > ac_ab\nend", "  -- Check that the\
    \ sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal\
    \ ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend", "    local ab = math.abs(b - a)\n\
    \    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    return ab\
    \ > bc and ab > ad\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab > bc and\n\t\tab > ad and\n\t\
    \tbc > ad\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ad = math.abs(a - d)\n\treturn ab > bc and (ab == ad or ab == -bc)\nend",
  "    local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac =\
    \ math.abs(c - a)\n    return ab > bc and ab > ac\nend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ ab > ac\nend", "\tlocal ab = math.abs(a - b)\n\tlocal bc = math.abs(b - c)\n\
    \tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab == bc or ac == 90)\nend",
  "  -- Check that the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n\
    \    return false\n  end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\t\
    local ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n\
    \t\n\tif ab > bc then\n\t\tif ab > cb then\n\t\t\treturn true\n\t\telse\n\t\t\t\
    return false\n\t\tend\n\telse\n\t\tif bc > ab then\n\t\t\treturn true\n\t\telse\n\
    \t\t\treturn false\n\t\tend\n\tend\nend", "\tlocal ab = math.abs(a - b)\n\tlocal\
    \ bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab\
    \ > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ad = math.abs(a - d)\n\treturn ab > bc and ab > ad\nend", "\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a > b and a > c then\n\t\
    \treturn true\n\telseif b > c then\n\t\treturn false\n\telseif b == c then\n\t\
    \treturn math.abs(math.atan2(b,a)) > math.pi/2\n\telse\n\t\treturn math.abs(math.atan2(c,b))\
    \ > math.pi/2\n\tend\nend", "\t-- Check that the sides are all positive\n\tif\
    \ a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", "  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a + b > c and a + c > b and b + c > a then return\
    \ true end\n  return false\nend", "   local ab = math.abs(b - a)\n   local bc\
    \ = math.abs(c - b)\n   local ac = math.abs(c - a)\n   if ab > bc then\n     \
    \ return false\n   elseif ab > ac then\n      return true\n   elseif bc > ac then\n\
    \      return false\n   else\n      return true\n   end\nend", "  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end", "  -- Check that the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~=\
    \ 0 then\n    return false\n  end", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac_ab = math.abs(c - a)\n\treturn ab > bc and\n\t\
    \tab > ac_ab and\n\t\tbc > ac_ab\nend", "   -- Check that the sides are all positive\n\
    \   if a < 0 or b < 0 or c < 0 then return false end\n   -- Check that a + b >\
    \ c and b + c > a\n   if a + b > c and b + c > a then return false end\n   --\
    \ Check that a + c > b and a + b > c\n   if a + c > b and a + b > c then return\
    \ false end\n   -- Check that the angles are right\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(a,b)) > math.pi then return false end\n   -- Check that the angles\
    \ are 90\n   if math.abs(math.atan2(b,c) - math.atan2(a,c)) > math.pi then return\
    \ false end\n   -- Check that the angles are 0\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(a,b)) < math.pi then return false end\n   -- Check that the angles\
    \ are 90\n   if math.abs(math.atan2(b,c) - math.atan2(c,a)) > math.pi then return\
    \ false end\n   -- Check that the angles are 0\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(c,b)) < math.pi then return false end\n   -- Check that the angles\
    \ are 90\n   if math.abs(math.atan2(b,c) - math.atan2(b,a)) > math.pi then return\
    \ false end\n   -- Check that the angles are 0\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(b,c)) < math.pi then return false end\n   return true\nend", " \
    \   local a, b, c = tonumber(a), tonumber(b), tonumber(c)\n    if a == b and a\
    \ == c then return true end\n    if a == c then return false end\n    if b ==\
    \ c then return false end\n    local ab, bc, cb = a - b, c - b, c - a\n    return\
    \ ab > bc or ab > cb\nend", "  -- Check if any of a, b, c are negative\n  if a\
    \ < 0 or b < 0 or c < 0 then\n    return false\n  end\n  -- Check if any of a,\
    \ b, c are zero\n  if a == 0 and b == 0 and c == 0 then\n    return true\n  end\n\
    \  -- Check if any of a, b, c are positive\n  if a > 0 and b > 0 and c > 0 then\n\
    \    -- Check if any of a, b, c are equal\n    if a == b and a == c then\n   \
    \   return true\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ a > b and a > c then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if b > c and b > a then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if c > a and c > b then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ a > b and b > c then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if b > a and b > c then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if c > a and c > b then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ a > c and b > a then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if b > a and b > c then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if c > a and c > b then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ a > b and b > c then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if b > a and b > c then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if c > a and c > b then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ a > c and b > a then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n    if b > a and b > c then\n      return false\n    end\n\
    \    -- Check if any of a, b, c are opposite\n    if c > a and c > b then\n  \
    \    return false\n    end\n    -- Check if any of a, b, c are opposite\n    if\
    \ a > b and b > c then\n      return false\n    end\n    -- Check if any of a,\
    \ b, c are opposite\n", "    local a, b, c = tonumber(a), tonumber(b), tonumber(c)\n\
    \    if a == b and a == c then return true end\n    if a == b or a == c then return\
    \ false end\n    if b == c then return false end\n    if a + b > c then return\
    \ false end\n    if a + c > b then return false end\n    if b + c > a then return\
    \ false end\n    return true\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab > bc and ab > ad\n\
    end", "    local a = math.abs(a)\n    local b = math.abs(b)\n    local c = math.abs(c)\n\
    \    local s = (a + b + c) / 2\n    if s <= a or s <= b or s <= c then\n     \
    \   return false\n    end\n    local u = (a + b) / 2\n    local v = (b + c) /\
    \ 2\n    local w = math.sqrt(u * u + v * v)\n    if w > 1 then\n        local\
    \ x = math.sqrt(u * u - w * w)\n        local y = math.sqrt(v * v - w * w)\n \
    \       if x ~= 0 and y ~= 0 then\n            local angle = (math.atan2(y, x)\
    \ + math.pi) % (math.pi * 2)\n            if angle > math.pi / 2 then\n      \
    \          angle = angle - math.pi\n            end\n            if angle < -math.pi\
    \ / 2 then\n                angle = angle + math.pi\n            end\n       \
    \     if math.abs(angle) < math.pi / 4 then\n                return true\n   \
    \         end\n        end\n    end\n    return false\nend", "  -- The sides are\
    \ a, b, c\n  -- The angle is given by acos((b^2 + c^2 - a^2)/(2*b*c))\n  -- The\
    \ result is between -pi and pi\n  return acos((b^2 + c^2 - a^2)/(2*b*c)) <= math.pi/2\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab\
    \ = math.abs(ac - ab)\n\tlocal ab_ac = math.abs(ab - ac)\n\treturn ab_ac > bc\
    \ and (ab_ac == ab or ab_ac == ac)\nend", "  -- The sides a, b, and c are all\
    \ positive.\n  -- The area of a triangle with sides a, b, and c is given by:\n\
    \  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a,\
    \ b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of\
    \ a triangle with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2\
    \ *b * c\n  -- The area of a triangle with sides a, b, and c is given by:\n  --\
    \ A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b,\
    \ and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a\
    \ triangle with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b\
    \ * c\n  -- The area of a triangle with sides a, b, and c is given by:\n  -- A\
    \ = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b, and\
    \ c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle\
    \ with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n \
    \ -- The area of a triangle with sides a, b, and c is given by:\n  -- A = 1/2\
    \ *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b, and c is\
    \ given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle\
    \ with sides a, b, and c is given by:\n  -- A = 1/2 *b^2 *c^2 - a^2 *b * c\n \
    \ -- The area of a triangle with sides a, b, and c is given by:\n  -- A = 1/2\
    \ *b^2 *c^2 - a^2 *b * c\n  -- The area of a triangle with sides a, b, and c is\
    \ given by:\n  -- A = 1/2 *b^2 *c^2 - a^2", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\
    \ (ab > ac or math.abs(a - b) > math.abs(a - c))\nend", "\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend", "    local ab = math.abs(b - a)\n    local\
    \ bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    local cd = math.abs(d\
    \ - c)\n    return ab > bc and ab > ad and ab > cd\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend", "    local ab = math.abs(b - a)\n\
    \    local ac = math.abs(c - a)\n    local abc = math.abs(b - c)\n    local bcd\
    \ = math.abs(c - b)\n    return ab == abc and (ab == bcd or bc == abc)\nend",
  "    local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac =\
    \ math.abs(c - a)\n    return ab > bc and ab > ac\nend", "  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end", "  -- Check that the sides are all positive\n  if a < 0 or b < 0 or c\
    \ < 0 then\n    return false\n  end", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac_ab = math.abs(c - a)\n\treturn ab > bc and (ab\
    \ == bc or ac_ab == math.pi/2)\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) +\
    \ math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\t\
    local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and ac\
    \ > bc\nend", "  -- Check if any of a, b, c is 90 degree\n  if math.abs(a - b)\
    \ > math.abs(a - c) then\n    if math.abs(b - c) > math.abs(b - a) then\n    \
    \  return true\n    else\n      return false\n    end\n  else\n    if math.abs(a\
    \ - c) > math.abs(b - a) then\n      return true\n    else\n      return false\n\
    \    end\n  end\nend", "   local ab = math.abs(b - a)\n   local ac = math.abs(c\
    \ - a)\n   if ab > ac then\n      return false\n   elseif ab == ac then\n    \
    \  return math.abs(math.atan2(b - a, c - a)) <= math.pi/2\n   else\n      return\
    \ math.abs(math.atan2(b - a, c - a)) <= math.pi\n   end\nend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n\t\n\tif ab > bc then\n\
    \t\tif ab > cb then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \telse\n\t\tif bc > ab then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c -\
    \ b)\n\tlocal ac = math.abs(c - a)\n\treturn ab >= bc and ab >= ac\nend", "  \
    \ local ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n   local bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n   local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \   if ab == bc and ab == ac then\n      return true\n   else\n      return false\n\
    \   end\nend", "   local ab = math.abs(b - a)\n   local bc = math.abs(c - b)\n\
    \   local ac_ab = math.abs(c - a)\n   return ab > bc and ab > ac_ab\nend", "\t\
    -- The sides are a, b, and c.\n\t-- The hypotenuse is the length of a side of\
    \ a triangle with sides a, b, and c.\n\t-- The hypotenuse is the square root of\
    \ the sum of the squares of the sides.\n\t-- The hypotenuse is given by the formula:\n\
    \t-- hypotenuse = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a right-angled triangle\
    \ is given by the formula:\n\t-- area = sqrt(2 * a * b + c^2)\n\t-- The area of\
    \ a triangle with sides a, b, and c is given by the formula:\n\t-- area = sqrt(a^2\
    \ + b^2 - c^2)\n\t-- The area of a triangle with sides a, b, and c is given by\
    \ the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle\
    \ with sides a, b, and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2\
    \ - c^2)\n\t-- The area of a triangle with sides a, b, and c is given by the formula:\n\
    \t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle with sides a, b,\
    \ and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The\
    \ area of a triangle with sides a, b, and c is given by the formula:\n\t-- area\
    \ = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle with sides a, b, and c\
    \ is given by the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of\
    \ a triangle with sides a, b, and c is given by the formula:\n\t-- area = sqrt(a^2\
    \ + b^2 + c^2)\n\t-- The area of a triangle with sides a, b, and c is given by\
    \ the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle\
    \ with sides a, b, and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2\
    \ + c^2)\n\t-- The area of a triangle with sides a, b, and c is given by the formula:\n\
    \t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The area of a triangle with sides a, b,\
    \ and c is given by the formula:\n\t-- area = sqrt(a^2 + b^2 + c^2)\n\t-- The\
    \ area of a triangle with sides a, b, and c ", "\tlocal ab = math.abs(a - b)\n\
    \tlocal bc = math.abs(b - c)\n\tlocal cd = math.abs(c - a)\n\treturn ab > bc and\n\
    \t\tab > cd and\n\t\tbc > cd\nend", "\tlocal a = math.abs(a)\n\tlocal b = math.abs(b)\n\
    \tlocal c = math.abs(c)\n\tif a > b and a > c then\n\t\treturn true\n\telseif\
    \ b > c then\n\t\treturn false\n\telseif c > a then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "    local ab = math.abs(b - a)\n    local bc =\
    \ math.abs(c - b)\n    local ac = math.abs(c - a)\n    return ab > bc and ab >\
    \ ac\nend", "    local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n\
    \    local ac_ab = math.abs(c - a)\n    local ab_ac = math.abs(b - a)\n    return\
    \ ab == bc and ab_ac == ac_ab\nend", "    local ab = math.abs(b - a)\n    local\
    \ bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return ab > bc and\
    \ (ab > ac or bc > ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  \
    \  local ab = math.abs(a - b)\n    local bc = math.abs(b - c)\n    local ac =\
    \ math.abs(c - a)\n    return ab > bc and ab > ac\nend", "  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n  return\
    \ is_right_angle\nend", "  -- Check that the sides are non-zero\n  if a ~= 0 or\
    \ b ~= 0 or c ~= 0 then\n    return false\n  end", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n\treturn\
    \ is_right_angle\nend", "   -- Check that the sides are non-zero\n   if math.abs(a)\
    \ < math.abs(b) and math.abs(a) < math.abs(c) then\n      -- Check that the angles\
    \ are right\n      if math.abs(math.atan2(b,a)) < math.abs(math.atan2(c,a)) then\n\
    \         return true\n      else\n         return false\n      end\n   else\n\
    \      return false\n   end\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc =\
    \ math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab >= bc and ab >= ac\n\
    end", "  -- Check that the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0\
    \ then\n    return false\n  end\n  -- Check that the sides are equal\n  if a ==\
    \ b and a == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or b == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n", "    local ab\
    \ = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c\
    \ - a)\n    return ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab > bc and\
    \ ab > ad\nend", "\tlocal ab = math.abs(a - b)\n\tlocal bc = math.abs(b - c)\n\
    \tlocal ac = math.abs(a - c)\n\treturn ab > bc and (ab > ac or ac == 0)\nend",
  "\t-- Check if any of a, b, or c are negative\n\tif a < 0 or b < 0 or c < 0 then\n\
    \t\treturn false\n\tend", "  -- Check if any of a, b, c are negative.\n  if a\
    \ < 0 or b < 0 or c < 0 then\n    return false\n  end", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend", "\t-- Check that the sides are\
    \ all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", " \
    \   local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac =\
    \ math.abs(c - a)\n    return ab > bc and  ab > ac\nend", "    local ab = math.abs(b\
    \ - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c - a)\n    return\
    \ ab > bc and (ab == bc or ab == ac)\nend", "  -- Check if any of a, b, c is 90\
    \ degree\n  local function is_right_angle(angle)\n    return angle == 90 or angle\
    \ == 180 or angle == 270 \n  end\n  \n  -- Check if all three sides are equal\n\
    \  local function is_same_side(a, b, c)\n    return a == b or a == c or b == c\n\
    \  end\n  \n  -- Check if all three sides are 90 degree\n  local function is_right_angle_triangle(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 180 degree\n  local function is_right_angle_triangle_2(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 270 degree\n  local function is_right_angle_triangle_3(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 90 degree\n  local function is_right_angle_triangle_4(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 180 degree\n  local function is_right_angle_triangle_5(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 270 degree\n  local function is_right_angle_triangle_6(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 90 degree\n  local function is_right_angle_triangle_7(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 180 degree\n  local function is_right_angle_triangle_8(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 270 degree\n  local function is_right_angle_triangle_9(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 90 degree\n  local function is_right_angle_triangle_10(a,\
    \ b, c)\n    return is_right_angle(a) and is_right_angle(b) and is_right_angle(c)\n\
    \  end\n  \n  -- Check if all three sides are 180 degree\n  local function is_right_angle_",
  "\t-- Check if any three sides are equal\n\tif a == b and a == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check if any three sides are 90 degree\n\tif a == b or a ==\
    \ c or b == c then\n\t\treturn false\n\tend\n\t-- Check if any three sides are\
    \ right angle\n\tif math.abs(math.acos((a / b) * (b / c))) < math.pi / 2 then\n\
    \t\treturn true\n\tend\n\treturn false\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\treturn ab > bc and\
    \ ab > ad\nend", "    local ab = math.abs(a - b)\n    local bc = math.abs(b -\
    \ c)\n    local ac = math.abs(c - a)\n    return ab > bc and\n           ab >\
    \ ac and\n           bc > ac\nend", "\tlocal ab = math.abs(a - b)\n\tlocal bc\
    \ = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn (ab + bc == ac)\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn ab > bc and (ab == bc or ac == math.pi/2)\nend",
  "\tlocal a = math.abs(a)\n\tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif\
    \ a > b and a > c then\n\t\treturn true\n\telseif b > c then\n\t\treturn false\n\
    \telseif b == c then\n\t\treturn true\n\telseif a == c then\n\t\treturn false\n\
    \tend\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal\
    \ ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and\n         ab > ac and\n\
    \         bc > ac\nend", "    local ab = math.abs(b - a)\n    local bc = math.abs(c\
    \ - b)\n    local ac = math.abs(c - a)\n    return ab > bc and ab > ac\nend",
  "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn ab > bc and (ab > ac or math.fmod(ab, 2) == 0)\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and\n\t\tab > ac and\n\t\tbc > ac\nend", "\tlocal ab = math.abs(b - a)\n\
    \tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc\
    \ and ab > ac)\nend", "  -- Check that the sides are non-zero\n  if a ~= 0 or\
    \ b ~= 0 or c ~= 0 then\n    -- Check that the sides are equal\n    if a == b\
    \ and a == c then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if a == c then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if b == c then\n      return true\n    end\n    -- Check\
    \ that the sides are equal\n    if a == b or b == c or c == a then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a == b or a ==\
    \ c or b == c then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if a == b or a == c or c == b then\n      return true\n    end\n\
    \    -- Check that the sides are equal\n    if a == b or a == c or c == a then\n\
    \      return true\n    end\n    -- Check that the sides are equal\n    if a ==\
    \ b or a == c or c == b then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if a == b or a == c or c == a then\n      return true\n\
    \    end\n    -- Check that the sides are equal\n    if a == b or a == c or c\
    \ == b then\n      return true\n    end\n    -- Check that the sides are equal\n\
    \    if a == b or a == c or c == a then\n      return true\n    end\n    -- Check\
    \ that the sides are equal\n    if a == b or a == c or c == b then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a == b or a ==\
    \ c or c == a then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if a == b or a == c or c == b then\n      return true\n    end\n\
    \    -- Check that the sides are equal\n    if a == b or a == c or c == a then\n\
    \      return true\n    end\n    -- Check that the sides are equal\n    if a ==\
    \ b or a == c or c == b then\n      return true\n    end\n    -- Check that the\
    \ sides are equal\n    if a == b or a == c or c == a then\n      return true\n\
    \    end\n    -- Check that the sides are equal\n    if a == b or a == c or c\
    \ == b then\n      return true\n    end\n    -- Check that the sides are equal\n\
    \    if a == b or a == c or c == a then\n      return true\n    end\n    -- Check\
    \ that the sides are equal\n    if a == b or a == c or c == b then\n      return\
    \ true\n    end\n    -- Check that the sides are equal\n    if a == b or a ==\
    \ c or c == a then\n      return true\n    end\n    -- Check that the sides are\
    \ equal\n    if a == b or a == c or c == b then", "   local ab = math.abs(a -\
    \ b)\n   local bc = math.abs(b - c)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend", "    local ab = math.abs(a - b)\n    local bc = math.abs(b\
    \ - c)\n    local ac = math.abs(a - c)\n    return ab > bc and\n        ab > ac\
    \ and\n        bc > ac\nend", "\t-- Check that the sides are non-zero\n\tif a\
    \ ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\tend", "\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab\
    \ > bc and (ab == bc or ac == 90)\nend", "  -- Check that the sides are all positive\n\
    \  if a < 0 or b < 0 or c < 0 then\n    return false\n  end", "  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end", "   -- Check that the sides are all positive\n   if a < 0 or b < 0 or\
    \ c < 0 then return false end\n   -- Check that the sides are equal\n   if math.abs(a\
    \ - b) < math.abs(a - c) or math.abs(a - c) < math.abs(b - c) then return false\
    \ end\n   -- Check that the angles are right\n   if math.abs(math.atan2(b,a) -\
    \ math.atan2(c,a)) > math.pi then return false end\n   -- Check that the angles\
    \ are 90\n   if math.abs(math.atan2(b,c) - math.atan2(a,c)) > math.pi then return\
    \ false end\n   -- Check that the angles are less than 180 degrees\n   if math.abs(math.atan2(b,c)\
    \ - math.atan2(a,b)) > math.pi then return false end\n   return true\nend", "\t\
    -- Check that the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\
    \treturn false\n\tend\n\t-- Check that the sides are equal\n\tif a == b and a\
    \ == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ a == b or a == c or b == c then\n\t\treturn false\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a + b > c and a + c > b and b + c > a then\n\t\treturn\
    \ true\n\tend\n\treturn false\nend", "   local ab = math.abs(b - a)\n   local\
    \ bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return ab > bc and ab\
    \ > ac\nend", "    return math.abs(a - b) <= math.abs(b - c) and math.abs(a -\
    \ c) <= math.abs(b - a)\nend", "\t-- Check that the sides are all positive\n\t\
    if a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", "   local ab = math.abs(b\
    \ - a)\n   local ac = math.abs(c - a)\n   local abc = math.abs(b - c)\n   local\
    \ bcd = math.abs(c - b)\n   if ab == ac then\n      return ab == bcd\n   elseif\
    \ ab == abc then\n      return math.abs(math.atan2(b, bcd)) == math.pi/2.0\n \
    \  elseif ac == bcd then\n      return math.abs(math.atan2(a, ac)) == math.pi/2.0\n\
    \   else\n      return false\n   end\nend", "    return (b - c) ~= 0\nend", "\t\
    local ab = math.abs(a - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ca = math.abs(c\
    \ - a)\n\treturn ab > bc and (ab == bc or ca == bc)\nend", "  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end", "  -- Check that the sides are all positive\n  if a < 0 or b < 0 or c\
    \ < 0 then\n    return false\n  end\n  -- Check that the sides are equal\n  if\
    \ a == b and a == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if a == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if b == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check\
    \ that the sides are equal\n  if a == b and b == c then\n    return true\n  end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if a == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if b == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if a == b or a == c or b\
    \ == c then\n    return true\n  end\n  -- Check that the sides are equal\n  if\
    \ a == b and b == c then\n    return true\n  end\n  -- Check that the sides are\
    \ equal\n  if a == b and a == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and b == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == b and a ==\
    \ c then\n    return true\n  end\n  -- Check that the sides are equal\n  if a\
    \ == c then\n    return true\n  end\n  -- Check that the sides are equal\n  if\
    \ b == c then\n    return true\n  end\n  -- Check that the sides are equal\n \
    \ if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b and b == c then\n    return true\n  end\n \
    \ -- Check that the sides are equal\n  if a == b and a == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n", "   local ab = math.abs(b - a)\n\
    \   local ac = math.abs(c - a)\n   local abc = math.abs(b - c)\n   local bcd =\
    \ math.abs(c - b)\n   return ab == abc and ac == bcd and abc > bcd\nend", "  \
    \  local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac =\
    \ math.abs(c - a)\n    return ab > bc and ab > ac\nend", "\t-- Check that the\
    \ sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend", "\tlocal ab = math.abs(a - b)\n\tlocal bc = math.abs(b - c)\n\tlocal cb\
    \ = math.abs(c - b)\n\t\n\treturn ab > bc and (ab > cb or math.abs(a - c) > math.abs(b\
    \ - c))\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ac = math.abs(c - a)\n\treturn ab > bc and (ab == bc or ab == ac)\nend",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac_ab = math.abs(c\
    \ - a)\n\treturn ab > bc and (ab == bc or ab == ac_ab)\nend", "\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend", "   local ab = math.abs(b - a)\n   local ac = math.abs(c - a)\n   if ab\
    \ > ac then\n      return false\n   else\n      return math.abs(math.atan2(b -\
    \ a, c - a)) <= math.pi / 2\n   end\nend", "   local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n   local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \   local cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n   if ab > bc then\n\
    \      return false\n   elseif ab < bc then\n      return true\n   elseif ab ==\
    \ bc then\n      return math.abs(math.atan2(b, a) - math.atan2(c, b)) <= math.pi\
    \ / 2\n   end\nend", "    local ab = math.abs(b - a)\n    local bc = math.abs(c\
    \ - b)\n    local ac = math.abs(c - a)\n    return ab > bc and (ab > ac or bc\
    \ > ac)\nend", "    local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n\
    \    local ac = math.abs(c - a)\n    return ab > bc and\n           ab > ac and\n\
    \           bc > ac\nend", "\tlocal ab = math.abs(a - b)\n\tlocal bc = math.abs(b\
    \ - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab > bc and\n\t\tab > ac and\n\t\
    \tbc > ac\nend", "   local ab = math.abs(b - a)\n   local ac = math.abs(c - a)\n\
    \   local bc = math.abs(b - c)\n   if ab > ac and ab > bc then\n      return true\n\
    \   else\n      return false\n   end\nend", "    local ab = math.abs(b - a)\n\
    \    local bc = math.abs(c - b)\n    local ad = math.abs(a - d)\n    local de\
    \ = math.abs(d - e)\n    return ab >= bc and (ab >= ad or ab >= de)\nend", " \
    \   local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac =\
    \ math.abs(c - a)\n    return ab > bc and (ab == bc or ac == 90)\nend", "  local\
    \ ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n  local is_right_angle = (ab + bc == math.pow(a, 2) +\
    \ math.pow(b, 2))\n  return is_right_angle\nend", "   local ab = math.abs(b -\
    \ a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return\
    \ ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "\t-- Check that the sides are all\
    \ positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend\n\t-- Check\
    \ that the sides are equal\n\tif a == b and a == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == b or b == c or c == a then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c\
    \ then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a ==\
    \ c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif b\
    \ == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are\
    \ equal\n\tif a == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check\
    \ that the sides are equal\n\tif a == c or c == a then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == b or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == c or c == a then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == c or c\
    \ == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\t\
    if a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are\
    \ equal\n\tif a == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check\
    \ that the sides are equal\n", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  --\
    \ Check that the sides are all positive\n  if a < 0 or b < 0 or c < 0 then return\
    \ false end\n  -- Check that the sides are equal\n  if a == b and a == c then\
    \ return true end\n  -- Check that the sides are equal\n  if a == c then return\
    \ true end\n  -- Check that the sides are equal\n  if b == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\
    \ return true end\n  -- Check that the sides are equal\n  if a == b or a == c\
    \ or b == c then return true end\n  -- Check that the sides are equal\n  if a\
    \ == b or a == c or b == c then return true end\n  -- Check that the sides are\
    \ equal\n  if a == b or a == c or b == c then return true end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end\n  -- Check that the sides are equal\n  if a == b or\
    \ a == c or b == c then return true end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then return true end\n  -- Check that the sides\
    \ are equal\n  if a == b or a == c or b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then return true end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then return true end", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b,\
    \ 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn ab > bc and ab > ac\nend", "  -- Check that the\
    \ sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == a then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a ", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\n\t\t\
    ab > ac and\n\t\tbc > ac\nend", "   local ab = math.abs(b - a)\n   local bc =\
    \ math.abs(c - b)\n   local ac = math.abs(c - a)\n   return ab > bc and\n    \
    \      ab > ac and\n          bc > ac\nend", "   local ab = math.abs(b - a)\n\
    \   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   return ab >\
    \ bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\t\
    -- Check that the sides are non-zero.\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\
    \treturn false\n\tend", "\t-- Check that the sides are non-zero\n\tif a ~= 0 or\
    \ b ~= 0 or c ~= 0 then\n\t\treturn false\n\tend", "    local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n    local bc = math.sqrt(math.pow(b, 2) + math.pow(c,\
    \ 2))\n    local is_right_angle = (ab + bc == math.pow(a, 2) + math.pow(b, 2))\n\
    \    return is_right_angle\nend", "    local ab = math.abs(b - a)\n    local bc\
    \ = math.abs(c - b)\n    local ad = math.abs(a - d)\n    return ab > bc and (ab\
    \ > ad or bc > ad)\nend", "\tlocal ab = math.abs(a - b)\n\tlocal bc = math.abs(b\
    \ - c)\n\tlocal ac = math.abs(a - c)\n\treturn ab > bc and ab > ac\nend", "  --\
    \ Check that the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n \
    \   return false\n  end\n  -- Check that the sides are equal\n  if a == b and\
    \ a == c then\n    return true\n  end\n  -- Check that the sides are equal\n \
    \ if a == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a + b > c and a + c > b and b + c > a then\n    return\
    \ true\n  end\n  return false\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) +\
    \ math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\t\
    local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn (math.abs(b -\
    \ c) >= ab and math.abs(b - c) >= ac and math.abs(a - c) >= ab and math.abs(a\
    \ - c) >= ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c -\
    \ b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\n\t\tab > ac and\n\t\t\
    bc > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "    local ab\
    \ = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a\
    \ - d)\n    local cd = math.abs(d - c)\n    return ab > bc and (ab > ad or cd\
    \ > ab)\nend", "   local ab = math.abs(a - b)\n   local bc = math.abs(b - c)\n\
    \   local ac = math.abs(a - c)\n   return ab >= bc and ab >= ac\nend", "\t-- Check\
    \ that the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn\
    \ false\n\tend", "   local ab = math.abs(b - a)\n   local bc = math.abs(c - b)\n\
    \   local ac_ab = math.abs(ac - ab)\n   local bc_ab = math.abs(bc - ab)\n   if\
    \ ab > bc then\n      return ab > ac_ab and ab > bc_ab\n   else\n      return\
    \ bc > ac_ab and bc > bc_ab\n   end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
