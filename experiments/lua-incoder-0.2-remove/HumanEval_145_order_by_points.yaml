name: HumanEval_145_order_by_points
language: lua
prompt: "-- Write a function which sorts the given list of integers\n-- in ascending\
  \ order according to the sum of their digits.\n-- Note: if there are several items\
  \ with similar sum of their digits,\n-- order them based on their index in original\
  \ list.\n-- For example:\nlocal function order_by_points(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
  \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
  \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
  \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11,\
  \ -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
  \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function compare_sums(a, b)\n    local sum = 0\n    for i =\
    \ 1, 10 do\n      sum = sum + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n\
    \      b = math.floor(b/10)\n    end\n    return sum\n  end\n  local function\
    \ compare_sums_index(a, b)\n    local sum = 0\n    local i = 1\n    while i <=\
    \ 10 do\n      sum = sum + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n\
    \      b = math.floor(b/10)\n      i = i + 1\n    end\n    return sum\n  end\n\
    \  local function compare_sums_index_reverse(a, b)\n    local sum = 0\n    local\
    \ i = 10\n    while i >= 1 do\n      sum = sum + math.abs(a % 10 - b % 10)\n \
    \     a = math.floor(a/10)\n      b = math.floor(b/10)\n      i = i - 1\n    end\n\
    \    return sum\n  end\n  local function compare_sums_index_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + math.abs(a % 10 - b % 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \      i = i - 1\n    end\n    return sum\n  end\n  local function compare_sums_index_reverse_reverse_reverse_reverse_reverse(a,\
    \ b)\n    local sum = 0\n    local i = 10\n    while i >= 1 do\n      sum = sum\
    \ + ", "  local function compare_sums(a, b)\n    local sum = 0\n    for i = 1,\
    \ 10 do\n      sum = sum + math.abs(math.floor(a / 10) * 10 + a % 10)\n      a\
    \ = math.floor(b / 10) * 10 + b % 10\n    end\n    return sum - math.abs(math.floor(a\
    \ / 10) * 10 + a % 10)\n  end\n  table.sort(nums, compare_sums)\nend", "  local\
    \ function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_sums(a, b)\n    return a.sum\
    \ - b.sum\n  end\n  local function compare_points(a, b)\n    return a.index -\
    \ b.index\n  end\n  local function sort_by_sums(nums)\n    table.sort(nums, compare_sums)\n\
    \  end\n  local function sort_by_points(nums)\n    table.sort(nums, compare_points)\n\
    \  end\n  sort_by_sums(nums)\n  sort_by_points(nums)\n  return nums\nend", " \
    \ local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_sums(a, b)\n    return a[1] +\
    \ b[1]\n  end\n  table.sort(nums, compare_sums)\nend", "  local function compare_sums(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\nend",
  "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare(a,b)\n    local sum = 0\n   \
    \ for i=1,10 do\n      sum = sum + math.abs(math.floor(a/10) + math.floor(b/10)\
    \ - math.floor(a%10 - b%10))\n    end\n    return sum\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend", "  local sorted_nums = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n\
    \    end\n    sorted_nums[i] = sum\n  end\n  table.sort(sorted_nums)\n  return\
    \ sorted_nums\nend", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n\
    \  end\n  table.sort(nums, compare_sums)\n  return nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend", "  local function compare_sums(a, b)\n    return a[1] +\
    \ b[1]\n  end\n  table.sort(nums, compare_sums)\nend", "  local function compare_sums(a,\
    \ b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n  return\
    \ nums\nend", "  local function compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n\
    \    local sum2 = nums[index2]:byte():sum()\n    return sum1 - sum2\n  end\n \
    \ table.sort(nums, compare)\nend", "  local function compare(index1, index2)\n\
    \    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n    return sum1\
    \ - sum2\n  end\n  table.sort(nums, compare)\n  return nums\nend", "  local function\
    \ compare(sum1, sum2)\n    if sum1 > sum2 then\n      return 1\n    elseif sum1\
    \ < sum2 then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend", "  local function compare(lhs, rhs)\n    local\
    \ lhs_sum = 0\n    local rhs_sum = 0\n    for i = 1, #nums do\n      local lhs_digit\
    \ = math.floor(nums[i])\n      local rhs_digit = math.floor(nums[i - 1])\n   \
    \   lhs_sum = lhs_sum + lhs_digit\n      rhs_sum = rhs_sum + rhs_digit\n     \
    \ if lhs_sum > rhs_sum then\n        return true\n      elseif lhs_sum < rhs_sum\
    \ then\n        return false\n      elseif lhs_sum == rhs_sum then\n        return\
    \ i\n      end\n    end\n  end\n  return table.sort(nums, compare)\nend", "  local\
    \ function compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function\
    \ compare_sums_index(a, b)\n    return a.index - b.index\n  end\n  local function\
    \ compare_sums_sum(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)\
    \ - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs) - 1)\n    local\
    \ lhs_sum = tonumber(lhs_digits)\n    local rhs_sum = tonumber(rhs_digits)\n \
    \   if lhs_sum == rhs_sum then\n      return lhs < rhs end\n    return lhs_sum\
    \ < rhs_sum end\n  return table.sort(nums, compare) end", "  local function compare_sums(a,\
    \ b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n  return\
    \ nums\nend", "  local function compare_sums(a, b)\n    return a + b - tonumber(tostring(a)\
    \ + tostring(b))\n  end\n  table.sort(nums, compare_sums)\n  return nums\nend",
  "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare(lhs, rhs)\n  \
    \  local lhs_digits = string.sub(lhs, 1, string.len(lhs) - 1)\n    local rhs_digits\
    \ = string.sub(rhs, 1, string.len(rhs) - 1)\n    local lhs_sum = tonumber(lhs_digits)\n\
    \    local rhs_sum = tonumber(rhs_digits)\n    if lhs_sum == rhs_sum then\n  \
    \    return lhs < rhs end\n    return lhs_sum < rhs_sum end\n  table.sort(nums,\
    \ compare)\n  return nums\nend", "  local function compare_sums(a, b)\n    return\
    \ (a.digits + b.digits):tonumber()\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend", "  local function compare(index1, index2)\n    local sum1\
    \ = nums[index1]\n    local sum2 = nums[index2]\n    if sum1 == sum2 then\n  \
    \    return index1\n    elseif sum1 > sum2 then\n      return index1\n    else\n\
    \      return index2\n    end\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end", "  local function compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs,\
    \ 1, string.len(lhs) - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs)\
    \ - 1)\n    return lhs_digits < rhs_digits\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend", "  local function compare(a,b)\n    local sum = 0\n    for\
    \ i = 1, 10 do\n      sum = sum + math.abs(a%10 - b%10)\n      a = math.floor(a/10)\n\
    \      b = math.floor(b/10)\n    end\n    return sum\n  end\n  return table.sort(nums,\
    \ compare)\nend", "  local function compare(a,b)\n    local sum = 0\n    for i\
    \ = 1, 10 do\n      sum = sum + math.abs(math.floor(a/10) - math.floor(b/10))\n\
    \      a = math.floor(a/10)\n      b = math.floor(b/10)\n    end\n    return sum\n\
    \  end\n  return table.sort(nums, compare)\nend", "  local function compare_sums(a,\
    \ b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n    if sum_a ~= sum_b\
    \ then\n      return sum_a > sum_b\n    else\n      return a.index > b.index\n\
    \    end\n  end\n  table.sort(nums, compare_sums)\nend", "  local function compare_sums(a,\
    \ b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n    if sum_a ~= sum_b\
    \ then\n      return sum_a > sum_b\n    else\n      return a[1] < b[1]\n    end\n\
    \  end\n  table.sort(nums, compare_sums)\nend", "  local function compare_sums(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend", "  local sorted_nums = {}\n  local index = 1\n  for i =\
    \ 1, #nums do\n    local digits = nums:sub(i, i)\n    local sum = 0\n    for j\
    \ = 1, #digits do\n      sum = sum + digits:sub(j, j)\n    end\n    sorted_nums[index]\
    \ = sum\n    index = index + 1\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\n\
    end", "  local function compare_sums(a, b)\n    local sum = 0\n    for i = 1,\
    \ 10 do\n      sum = sum + math.abs(math.floor(a/10) + math.floor(b/10) - math.floor(a/10)\
    \ * math.floor(b/10))\n    end\n    return sum\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_sums(a, b)\n    return a[1] +\
    \ b[1]\n  end\n  return table.sort(nums, compare_sums)\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend", "  local function compare_sums(a, b)\n    local sum = 0\n\
    \    for i = 1, 10 do\n      sum = sum + math.abs(math.floor(a/10) * 10 - math.floor(b/10)\
    \ * 10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n    end\n   \
    \ return sum\n  end\n  table.sort(nums, compare_sums)\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = 0\n\
    \    for j = 1, #nums[i] do\n      num_sum = num_sum + nums[i][j]\n    end\n \
    \   sorted_nums[i] = num_sum\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n\
    \  for i = 1, #nums do\n    local num_sum = 0\n    for j = 1, #nums[i] do\n  \
    \    num_sum = num_sum + nums[i][j]\n    end\n    local index = num_sums[num_sum]\n\
    \    sorted_nums[i] = sorted_nums[i] + index\n  end\n  return sorted_nums\nend",
  "  local function compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function\
    \ compare_sums_index(a, b)\n    return a.index - b.index\n  end\n  local function\
    \ compare_sums_sum(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare(index1, index2)\n    local sum1\
    \ = nums[index1]:byte():sum():float()\n    local sum2 = nums[index2]:byte():sum():float()\n\
    \    return sum1 > sum2 then\n      index1\n    else\n      index2\n    end\n\
    \  end\n  table.sort(nums, compare)\n  return nums\nend", "  local function compare_sums(a,\
    \ b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n  return\
    \ nums\nend", "  local function compare_sums(a, b)\n    local sum = 0\n    for\
    \ i = 1, 10 do\n      sum = sum + math.abs(math.floor(a/10) + math.floor(b/10)\
    \ - math.floor(a/10) * math.floor(b/10))\n    end\n    return sum\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_by_sum(a, b)\n    local sum1\
    \ = math.abs(a) + math.abs(b)\n    local sum2 = math.abs(a + b) + math.abs(a -\
    \ b)\n    return sum1 < sum2 and\n           sum1 < sum2 and\n           sum1\
    \ < sum2 and\n           sum1 < sum2 and\n           sum1 < sum2 and\n       \
    \    sum1 < sum2\n  end\n  return table.sort(nums, compare_by_sum)\nend", "  local\
    \ function compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n     \
    \ sum = sum + math.abs(math.floor(a / 10) * 10 - math.floor(b / 10) * 10)\n  \
    \    a = a % 10\n      b = b % 10\n    end\n    return sum\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare_sums(a, b)\n \
    \   return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n  return nums\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,j):tonumber()\n    end\n\
    \    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  return\
    \ sorted_nums\nend", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n\
    \  end\n  table.sort(nums, compare_sums)\nend", "  local function compare_sums(a,\
    \ b)\n    return a:sum() - b:sum()\n  end\n  return table.sort(nums, compare_sums)\n\
    end", "  local function compare(a,b)\n    return a<b and 1 or a>b and -1 or 0\n\
    \  end\n  local function sort_by_digits(a,b)\n    local sum=0\n    for i=1,10\
    \ do\n      sum=sum+math.floor(a/10^i)*10^i\n      a=math.floor(a/10^i)*10^i\n\
    \    end\n    return sum<b and 1 or sum>b and -1 or 0\n  end\n  local function\
    \ sort_by_index(a,b)\n    return sort_by_digits(a,b)\n  end\n  table.sort(nums,\
    \ compare)\n  table.sort(nums, sort_by_index)\n  return nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend", "  local function compare(index1, index2)\n    local sum1\
    \ = nums[index1]:bytes():sum():float()\n    local sum2 = nums[index2]:bytes():sum():float()\n\
    \    if sum1 == sum2 then\n      return index1\n    elseif sum1 > sum2 then\n\
    \      return index1\n    else\n      return index2\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend", "  local function compare_sums(a, b)\n    return a.sum - b.sum\n\
    \  end\n  local function compare_sums_index(a, b)\n    return a.index - b.index\n\
    \  end\n  local function compare_sums_index2(a, b)\n    return a.index2 - b.index2\n\
    \  end\n  local function compare_sums_index3(a, b)\n    return a.index3 - b.index3\n\
    \  end\n  local function compare_sums_index4(a, b)\n    return a.index4 - b.index4\n\
    \  end\n  local function compare_sums_index5(a, b)\n    return a.index5 - b.index5\n\
    \  end\n  local function compare_sums_index6(a, b)\n    return a.index6 - b.index6\n\
    \  end\n  local function compare_sums_index7(a, b)\n    return a.index7 - b.index7\n\
    \  end\n  local function compare_sums_index8(a, b)\n    return a.index8 - b.index8\n\
    \  end\n  local function compare_sums_index9(a, b)\n    return a.index9 - b.index9\n\
    \  end\n  local function compare_sums_index10(a, b)\n    return a.index10 - b.index10\n\
    \  end\n  local function compare_sums_index11(a, b)\n    return a.index11 - b.index11\n\
    \  end\n  local function compare_sums_index12(a, b)\n    return a.index12 - b.index12\n\
    \  end\n  local function compare_sums_index13(a, b)\n    return a.index13 - b.index13\n\
    \  end\n  local function compare_sums_index14(a, b)\n    return a.index14 - b.index14\n\
    \  end\n  local function compare_sums_index15(a, b)\n    return a.index15 - b.index15\n\
    \  end\n  local function compare_sums_index16(a, b)\n    return a.index16 - b.index16\n\
    \  end\n  local function compare_sums_index17(a, b)\n    return a.index17 - b.index17\n\
    \  end\n  local function compare_sums_index18(a, b)\n    return a.index18 - b.index18\n\
    \  end\n  local function compare_sums_index19(a, b)\n    return a.index19 - b.index19\n\
    \  end\n  local function compare_sums_index20(a, b)\n    return a.index20 - b.index20\n\
    \  end\n  local function compare_sums_index21(a, b)\n    return a.index21 - b.index21\n\
    \  end\n  local function compare_sums_index22(a, b)\n    return a.index22 - b.index22\n\
    \  end\n  local function compare_sums_index23(a, b)\n    return a.index23 - b.index23\n\
    \  end\n  local function compare_sums_index24(a, b)\n    return a.index24 - b.index",
  "  local function compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\"\
    , lhs)\n    local rhs_digits = string.format(\"%0d\", rhs)\n    local lhs_sum\
    \ = lhs_digits:len() - lhs_digits:sub(1, -1):len()\n    local rhs_sum = rhs_digits:len()\
    \ - rhs_digits:sub(1, -1):len()\n    if lhs_sum == rhs_sum then\n      return\
    \ lhs - rhs\n    end\n    return lhs_sum - rhs_sum\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend", "  local function compare(index1, index2)\n \
    \   local sum1 = nums[index1]\n    local sum2 = nums[index2]\n    if sum1 == sum2\
    \ then\n      return index1\n    elseif sum1 < sum2 then\n      return 1\n   \
    \ else\n      return -1\n    end\n  end\n  table.sort(nums, compare)\nend", " \
    \ local function compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n\
    \      sum = sum + math.abs(math.modf(a / 10^i)[1])\n    end\n    return sum -\
    \ math.abs(math.modf(b / 10^i)[1])\n  end\n  table.sort(nums, compare_sums)\n\
    end", "  local function compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n\
    \  table.sort(nums, compare_sums)\n  return nums\nend", "  local function compare_sums(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  table.sort(nums, compare_sums)\n\
    \  table.sort(nums, compare_sums_index)\n  return nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare(index1, index2)\n\
    \    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n    return sum1\
    \ - sum2 -- Compare sums\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare_sums(a, b)\n \
    \   return a[1] + b[1]\n  end\n  return table.sort(nums, compare_sums)\nend",
  "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_sums(a, b)\n    return a:sum()\
    \ - b:sum()\n  end\n  table.sort(nums, compare_sums)\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum_string(nums[i])\n\
    \    if not num_sums[num_sum] then\n      num_sums[num_sum] = 1\n      sorted_nums[#sorted_nums+1]\
    \ = nums[i]\n    end\n  end\n  table.sort(sorted_nums, function(a,b) return num_sums[sum_string(a)]\
    \ - num_sums[sum_string(b)] end)\n  return sorted_nums\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = 0\n\
    \    for j = 1, #nums[i] do\n      num_sum = num_sum + nums[i][j]\n    end\n \
    \   sorted_nums[i] = num_sum\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums2 = {}\n  for i = 1, #nums do\n    sorted_nums2[i] = nums[sorted_nums[i]]\n\
    \  end\n  return sorted_nums2\nend", "  local function compare_sums(a, b)\n  \
    \  return a:sum() - b:sum()\n  end\n  table.sort(nums, compare_sums)\nend", " \
    \ local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local sorted_nums = {}\n  local index\
    \ = 1\n  for i = 1, #nums do\n    local digits = nums:sub(i, i)\n    local sum_digits\
    \ = digits:reduce(function(acc, digit)\n      return acc + digit\n    end)\n \
    \   sorted_nums[index] = sum_digits\n    index = index + 1\n  end\n  return sorted_nums\n\
    end", "  local sorted_nums = {}\n  local sorted_index = {}\n  local sum = 0\n\
    \  for i = 1, #nums do\n    local digit = math.floor(math.abs(nums[i]) / 10)\n\
    \    sum = sum + digit\n    sorted_index[sum] = i\n    sorted_nums[sum] = nums[i]\n\
    \  end\n  table.sort(sorted_nums, function(a, b) return a < b end)\n  return sorted_index\n\
    end", "  local function compare_sums(a, b)\n    return a[1] + b[1] - a[2] + b[2]\
    \ - a[3] + b[3]\n  end\n  return table.sort(nums, compare_sums)\nend", "  local\
    \ sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum\
    \ = 0\n    for j = 1, #nums[i] do\n      num_sum = num_sum + nums[i][j]\n    end\n\
    \    sorted_nums[i] = num_sum\n    num_sums[num_sum] = i\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_index = 1\n  for i = 1, #nums do\n    local num_sum = sorted_nums[i]\n\
    \    local index = num_sums[num_sum]\n    sorted_nums[sorted_nums_index] = nums[index]\n\
    \    sorted_nums_index = sorted_nums_index + 1\n  end\n  return sorted_nums\n\
    end", "  local function compare(lhs, rhs)\n    local lhs_sum = 0\n    local rhs_sum\
    \ = 0\n    for i = 1, #nums do\n      local lhs_digit = math.floor(nums[i])\n\
    \      local rhs_digit = math.floor(rhs[i])\n      lhs_sum = lhs_sum + lhs_digit\n\
    \      rhs_sum = rhs_sum + rhs_digit\n    end\n    if lhs_sum < rhs_sum then\n\
    \      return 1\n    elseif lhs_sum > rhs_sum then\n      return -1\n    else\n\
    \      return 0\n    end\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end", "  local function compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n\
    \    local sum2 = nums[index2]:byte():sum()\n    if sum1 == sum2 then\n      return\
    \ index1\n    elseif sum1 > sum2 then\n      return index1\n    else\n      return\
    \ index2\n    end\n  end\n  table.sort(nums, compare)\nend", "  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare(sum1, sum2)\n    if sum1 > sum2 then\n      return 1\n\
    \    elseif sum1 < sum2 then\n      return -1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(nums, compare)\n  return nums\nend", "  local function compare(lhs,\
    \ rhs)\n    local lhs_sum = 0\n    local rhs_sum = 0\n    for i = 1, #nums do\n\
    \      local lhs_digit = math.floor(math.abs(nums[i] - math.floor(nums[i])))\n\
    \      local rhs_digit = math.floor(math.abs(nums[i] - math.floor(-nums[i])))\n\
    \      lhs_sum = lhs_sum + lhs_digit\n      rhs_sum = rhs_sum + rhs_digit\n  \
    \  end\n    if lhs_sum < rhs_sum then\n      return 1\n    elseif lhs_sum > rhs_sum\
    \ then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend", "  local sorted_nums = {}\n  local num_sums = {}\n  for i =\
    \ 1, #nums do\n    local num_sum = sumDigits(nums[i])\n    sorted_nums[i] = nums[i]\n\
    \    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums, function(a, b) return\
    \ num_sums[a] > num_sums[b] end)\n  return sorted_nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend", "  local function compare_sums(a, b)\n    return a:sum()\
    \ - b:sum()\n  end\n  table.sort(nums, compare_sums)\nend", "  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend", "  local function compare_sums(a, b)\n    return a.sum -\
    \ b.sum\n  end\n  table.sort(nums, compare_sums)\n  return nums\nend", "  local\
    \ function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare_sums(a, b)\n \
    \   local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.floor(a / i) *\
    \ i\n      a = a % i\n    end\n    return sum - math.floor(b / 10) * 10\n  end\n\
    \  return table.sort(nums, compare_sums)\nend", "  local sorted_nums = {}\n  local\
    \ num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum(nums[i])\n   \
    \ sorted_nums[#sorted_nums + 1] = nums[i]\n    num_sums[num_sum] = num_sums[num_sum]\
    \ or {}\n    num_sums[num_sum][#num_sums[num_sum] + 1] = i\n  end\n  table.sort(sorted_nums)\n\
    \  for i = 1, #sorted_nums do\n    local num_sum = sum(sorted_nums[i])\n    local\
    \ index = num_sums[num_sum][#num_sums[num_sum]]\n    sorted_nums[i] = sorted_nums[index]\n\
    \  end\n  return sorted_nums\nend", "  local function compare_sums(a, b)\n   \
    \ return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n  return nums\n\
    end", "  local function compare(index1, index2)\n    local sum1 = nums[index1]:byte()\n\
    \    local sum2 = nums[index2]:byte()\n    if sum1 == sum2 then\n      return\
    \ index1\n    elseif sum1 > sum2 then\n      return index1\n    else\n      return\
    \ index2\n    end\n  end\n  return table.sort(nums, compare)\nend", "  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n\
    \    if sum1 > sum2 then\n      return 1\n    elseif sum1 < sum2 then\n      return\
    \ -1\n    else\n      return index1 - index2\n    end\n  end\n  table.sort(nums,\
    \ compare)\n  return nums\nend", "  local function compare_sums(a, b)\n    return\
    \ a.sum - b.sum\n  end\n  local function compare_sums_index(a, b)\n    return\
    \ a.index - b.index\n  end\n  local function compare_sums_sum(a, b)\n    return\
    \ a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a, b)\n    return\
    \ a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a, b)\n  \
    \  return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare_sums(a, b)\n    return a + b - tonumber(tostring(a) +\
    \ tostring(b))\n  end\n  return table.sort(nums, compare_sums)\nend", "  local\
    \ function compare_by_sum(num1, num2)\n    return num1 + num2 -- Sum digits first\n\
    \  end\n  return table.sort(nums, compare_by_sum)\nend", "  local sorted_nums\
    \ = { }\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n   \
    \ sorted_nums[sum] = nums[i]\n  end\n  return sorted_nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    end", "  local function compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n\
    \  return table.sort(nums, compare_sums)\nend", "  local function compare(index1,\
    \ index2)\n    local sum1 = nums[index1]:byte():sum() -- sum of digits\n    local\
    \ sum2 = nums[index2]:byte():sum() -- sum of digits\n    if sum1 == sum2 then\n\
    \      return index1 -- compare based on index\n    elseif sum1 > sum2 then\n\
    \      return 1 -- compare based on sum\n    else\n      return -1 -- compare\
    \ based on sum\n    end\n  end\n  table.sort(nums, compare)\n  return nums\nend",
  "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j =\
    \ 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local\
    \ function compare(index1, index2)\n    local sum1 = nums[index1]:byte()\n   \
    \ local sum2 = nums[index2]:byte()\n    if sum1 == sum2 then\n      return index1\n\
    \    elseif sum1 > sum2 then\n      return index1\n    else\n      return index2\n\
    \    end\n  end\n  table.sort(nums, compare)\nend", "  local function compare(index1,\
    \ index2)\n    local sum1 = nums[index1]:byte()\n    local sum2 = nums[index2]:byte()\n\
    \    if sum1 == sum2 then\n      return index1\n    elseif sum1 > sum2 then\n\
    \      return index1\n    else\n      return index2\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend", "  local function compare(index1, index2)\n    local sum1 =\
    \ nums[index1]:byte():sum()\n    local sum2 = nums[index2]:byte():sum()\n    if\
    \ sum1 == sum2 then\n      return index1\n    elseif sum1 > sum2 then\n      return\
    \ index1\n    else\n      return index2\n    end\n  end\n  table.sort(nums, compare)\n\
    end", "  local function compare(index1, index2)\n    local sum1 = nums[index1]\n\
    \    local sum2 = nums[index2]\n    return sum1 - sum2 -- Compare sums\n  end\n\
    \  table.sort(nums, compare)\n  return nums\nend", "  local function compare_sums(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index(a,\
    \ b)\n    return a.index - b.index\n  end\n  local function compare_sums_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare(lhs, rhs)\n  \
    \  local lhs_digits = string.sub(lhs, 1, string.len(lhs) - 1)\n    local rhs_digits\
    \ = string.sub(rhs, 1, string.len(rhs) - 1)\n    local lhs_sum = tonumber(lhs_digits)\n\
    \    local rhs_sum = tonumber(rhs_digits)\n    if lhs_sum == rhs_sum then\n  \
    \    return lhs < rhs end\n    return lhs_sum < rhs_sum end\n  return table.sort(nums,\
    \ compare)\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:byte(j) * j\n    end\n\
    \    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  local\
    \ sorted_nums_index = 1\n  for i = 1, #nums do\n    local sum = 0\n    for j =\
    \ 1, 10 do\n      sum = sum + nums[i]:byte(j) * j\n    end\n    if sum == sorted_nums[sorted_nums_index]\
    \ then\n      table.insert(sorted_nums, i)\n      table.insert(sorted_nums, sorted_nums_index)\n\
    \      sorted_nums_index = sorted_nums_index + 1\n    end\n  end\n  return sorted_nums\n\
    end", "  local function compare_sums(a, b)\n    local sum = 0\n    for i = 1,\
    \ 10 do\n      sum = sum + math.floor(a / i) * i\n      a = a % i\n    end\n \
    \   sum = b + math.floor(a / 10) * 10\n    return sum - a\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare_sums(a, b)\n \
    \   return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\nend", "  local\
    \ sorted_nums = {}\n  local sorted_index = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n\
    \    sorted_index[sum] = i\n    sorted_nums[i] = nums[i]\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return sorted_index[a] > sorted_index[b] end)\n  return sorted_nums\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, #nums[i] do\n      sum = sum + nums[i][j] % 10\n    end\n    sorted_nums[i]\
    \ = sum\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local\
    \ function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local sorted_nums = {}\n  local sorted_index\
    \ = {}\n  local sorted_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = math.floor(num / 10)\n    local remainder = num - 10 * digits\n\
    \    sorted_sum = sorted_sum + digits\n    sorted_index[sorted_sum] = i\n    sorted_nums[sorted_sum]\
    \ = num\n  end\n  table.sort(sorted_nums, function(a, b)\n    return a < b\n \
    \ end)\n  for i = 1, #nums do\n    local num = sorted_nums[i]\n    local index\
    \ = sorted_index[sorted_sum]\n    nums[index] = num\n  end\n  return sorted_nums\n\
    end", "  local function compare_sums(a, b)\n    return a + b - tonumber(tostring(a)\
    \ + tostring(b))\n  end\n  table.sort(nums, compare_sums)\n  return nums\nend",
  "  local sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local\
    \ num_sum = sum( string.gmatch(tostring(nums[i]), \"%d*\") )\n    sorted_nums[i]\
    \ = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort( sorted_nums, function(a,b)\
    \ return num_sums[a] > num_sums[b] end)\n  return sorted_nums\nend", "  local\
    \ function compare(lhs, rhs)\n    local lhs_digits = string.format(\"%0d\", lhs:int():digits())\n\
    \    local rhs_digits = string.format(\"%0d\", rhs:int():digits())\n    return\
    \ lhs_digits < rhs_digits\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end", "  local function compare_sums(a, b)\n    return a.sum - b.sum\n  end\n\
    \  table.sort(nums, compare_sums)\nend", "  local sorted_nums = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num_sum = sum( nums[i] )\n    if num_sum\
    \ == 0 then\n      sorted_nums[i] = nums[i]\n      num_sums[i] = num_sum\n   \
    \ else\n      local index = #sorted_nums\n      table.insert(sorted_nums, nums[i])\n\
    \      table.insert(num_sums, num_sum)\n      table.insert(sorted_nums, index)\n\
    \    end\n  end\n  table.sort(sorted_nums, function(a, b) return num_sums[a] >\
    \ num_sums[b] end)\n  return sorted_nums\nend", "  local function compare_sums(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\nend",
  "  local function compare(lhs, rhs)\n    local lhs_digits = string.sub(lhs, 1, string.len(lhs)\
    \ - 1)\n    local rhs_digits = string.sub(rhs, 1, string.len(rhs) - 1)\n    local\
    \ lhs_sum = tonumber(lhs_digits) + tonumber(lhs_digits)\n    local rhs_sum = tonumber(rhs_digits)\
    \ + tonumber(rhs_digits)\n    if lhs_sum > rhs_sum then\n      return 1\n    elseif\
    \ lhs_sum < rhs_sum then\n      return -1\n    else\n      return lhs:byte() -\
    \ rhs:byte()\n    end\n  end\n  return table.sort(nums, compare)\nend", "  local\
    \ sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i]\
    \ do\n      sum = sum + nums[i][j]\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:byte(j) * j\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_sums(a, b)\n    return a.sum\
    \ - b.sum\n  end\n  local function compare_sums_index(a, b)\n    return a.index\
    \ - b.index\n  end\n  local function compare_sums_sum(a, b)\n    return a.sum\
    \ - b.sum\n  end\n  local function compare_sums_sum_index(a, b)\n    return a.sum\
    \ - b.sum\n  end\n  local function compare_sums_sum_index_sum(a, b)\n    return\
    \ a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index(a, b)\n\
    \    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local sorted_nums = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:byte(j)\
    \ * j\n    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend", "  local function compare_sums(a, b)\n    return\
    \ a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n  return nums\nend", " \
    \ local function compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n\
    \      sum = sum + math.floor(a / i) * i\n      a = a % i\n    end\n    return\
    \ sum - math.floor(b / 10) * 10 - math.floor(b % 10)\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local sorted_nums = {}\n  local num_sums = {}\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    local num_sum = tonumber(string.format(\"\
    %0*d\", 10, num))\n    sorted_nums[#sorted_nums + 1] = num\n    num_sums[num_sum]\
    \ = num_sum\n  end\n  table.sort(sorted_nums, function(a, b)\n    local a_sum\
    \ = tonumber(string.format(\"%0*d\", 10, a))\n    local b_sum = tonumber(string.format(\"\
    %0*d\", 10, b))\n    if a_sum == b_sum then\n      return a\n    elseif num_sums[a_sum]\
    \ > num_sums[b_sum] then\n      return 1\n    else\n      return -1\n    end\n\
    \  end)\n  return sorted_nums\nend", "  local function compare(sum1, sum2)\n \
    \   if sum1 > sum2 then\n      return 1\n    elseif sum1 < sum2 then\n      return\
    \ -1\n    else\n      return 0\n    end\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend", "  local function compare_sums(a, b)\n    local sum = 0\n\
    \    for i = 1, 10 do\n      sum = sum + math.abs(math.floor(a/10*10 + b/10 -\
    \ i))\n    end\n    return sum\n  end\n  return table.sort(nums, compare_sums)\n\
    end", "  local function compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n\
    \  table.sort(nums, compare_sums)\n  return nums\nend", "  local sorted_nums =\
    \ {}\n  for i = 1, #nums do\n    local digits = nums:sub(i, i):reverse()\n   \
    \ local sum_digits = digits:reduce(function(acc, digit)\n      return acc + digit\n\
    \    end)\n    table.insert(sorted_nums, sum_digits)\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend", "  local function compare(a,b)\n    return a<b and\
    \ 1 or -1\n  end\n  local function sort_by_digits(a,b)\n    local sum=0\n    for\
    \ i=1,9 do\n      sum=sum+(a%10+b%10)*i\n      a=a/10\n      b=b/10\n    end\n\
    \    return sum<0 and 1 or sum>0 and -1 or 0\n  end\n  local function sort_by_index(nums)\n\
    \    local function compare(a,b)\n      return nums[a]<nums[b] and 1 or -1\n \
    \   end\n    return table.sort(nums, compare)\n  end\n  return sort_by_index(order_by_digits(sort_by_points(nums)))\n\
    end", "  local function compare_sums(a, b)\n    local sum_a = tonumber(string.format(\"\
    %.0d\", a))\n    local sum_b = tonumber(string.format(\"%.0d\", b))\n    if sum_a\
    \ ~= sum_b then\n      return sum_a > sum_b\n    else\n      return a > b\n  \
    \  end\n  end\n  table.sort(nums, compare_sums)\nend", "  local function compare_sums(a,\
    \ b)\n    return a + b - tonumber(tostring(a) + tostring(b))\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare_sums(a, b)\n \
    \   return (a.sum - b.sum) -- Compare sums\n  end\n  table.sort(nums, compare_sums)\
    \ -- Sort by sum\n  table.sort(nums, compare_sums, true) -- Sort by sum, descending\n\
    \  return nums\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n\
    \    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  local\
    \ sorted_nums_index = {}\n  for i = 1, #sorted_nums do\n    sorted_nums_index[sorted_nums[i]]\
    \ = i\n  end\n  local sorted_nums_index_sorted = {}\n  for i = 1, #sorted_nums\
    \ do\n    table.insert(sorted_nums_index_sorted, sorted_nums_index[sorted_nums[i]])\n\
    \  end\n  return sorted_nums_index_sorted\nend", "  local sorted_nums = {}\n \
    \ for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:byte(j) * j\n    end\n    table.insert(sorted_nums, sum)\n  end\n\
    \  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local function compare_sums(a,\
    \ b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums, compare_sums)\n\
    end", "  local function compare(index1, index2)\n    local sum1 = nums[index1]:bytes():sum():tonumber()\n\
    \    local sum2 = nums[index2]:bytes():sum():tonumber()\n    if sum1 == sum2 then\n\
    \      return index1\n    elseif sum1 > sum2 then\n      return index2\n    else\n\
    \      return index1\n    end\n  end\n  table.sort(nums, compare)\n  return nums\n\
    end", "  local function compare_sums(a, b)\n    local sum = 0\n    for i = 1,\
    \ 10 do\n      sum = sum + math.abs(math.floor(a / 10) * 10 - math.floor(b / 10)\
    \ * 10)\n      a = a % 10\n      b = b % 10\n    end\n    return sum\n  end\n\
    \  table.sort(nums, compare_sums)\n  return nums\nend", "  local sorted_nums =\
    \ {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_sum = tonumber(string.format(\"%0.f\", num))\n    sorted_nums[#sorted_nums+1]\
    \ = num\n    num_sums[num_sum] = num_sums[num_sum] or {}\n    num_sums[num_sum][#num_sums[num_sum]+1]\
    \ = i\n  end\n  local sorted_num_sums = {}\n  for num_sum, indices in pairs(num_sums)\
    \ do\n    sorted_num_sums[num_sum] = indices[1]\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[tonumber(string.format(\"%0.f\", a))][tonumber(string.format(\"\
    %0.f\", b))] or tonumber(string.format(\"%0.f\", a)) < tonumber(string.format(\"\
    %0.f\", b)) end)\n  table.sort(sorted_num_sums, function(a, b) return sorted_nums[a]\
    \ < sorted_nums[b] end)\n  return sorted_nums\nend", "  local function compare_sums(a,\
    \ b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.abs(math.floor(a\
    \ / 10) * 10 + a % 10)\n      a = math.floor(b / 10) * 10 + b % 10\n    end\n\
    \    return sum - math.abs(math.floor(a / 10) * 10 + a % 10)\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare(index1, index2)\n    local sum1\
    \ = nums[index1]:bytes():sum():float()\n    local sum2 = nums[index2]:bytes():sum():float()\n\
    \    return sum1 - sum2\n  end\n  table.sort(nums, compare)\nend", "  local function\
    \ compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum\
    \ + math.floor(a / i) * i\n      a = a % i\n    end\n    sum = sum + math.floor(b\
    \ / 10) * 10\n    b = b % 10\n    if sum == b then\n      return a\n    elseif\
    \ sum < b then\n      return -1\n    else\n      return 1\n    end\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_sums(a, b)\n    return a[1] +\
    \ b[1]\n  end\n  table.sort(nums, compare_sums)\n  return nums\nend", "  local\
    \ function compare_sums(a, b)\n    local sum = 0\n    for i = 1, 10 do\n     \
    \ sum = sum + math.abs(math.modf(a / 10^i)[1])\n    end\n    return sum - math.abs(math.modf(b\
    \ / 10^i)[1])\n  end\n  table.sort(nums, compare_sums)\nend", "  local function\
    \ compare_sums(a, b)\n    return a.sum - b.sum\n  end\n  table.sort(nums, compare_sums)\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n\
    \    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  return\
    \ sorted_nums\nend", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n\
    \  end\n  table.sort(nums, compare_sums)\n  return nums\nend", "  local function\
    \ compare(index1, index2)\n    local sum1 = nums[index1]:byte():sum()\n    local\
    \ sum2 = nums[index2]:byte():sum()\n    if sum1 == sum2 then\n      return index1\n\
    \    elseif sum1 > sum2 then\n      return index1\n    else\n      return index2\n\
    \    end\n  end\n  table.sort(nums, compare)\n  return nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend", "  local sorted_nums = {}\n  local sorted_index = {}\n \
    \ for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum\
    \ = sum + nums[i][j]\n    end\n    sorted_index[sum] = i\n    sorted_nums[i] =\
    \ nums[i]\n  end\n  table.sort(sorted_nums, function(a, b) return sorted_index[a]\
    \ > sorted_index[b] end)\n  return sorted_nums\nend", "  local function compare(index1,\
    \ index2)\n    local sum1 = nums[index1]\n    local sum2 = nums[index2]\n    if\
    \ sum1 == sum2 then\n      return index1\n    elseif sum1 > sum2 then\n      return\
    \ index1\n    else\n      return index2\n    end\n  end\n  table.sort(nums, compare)\n\
    end", "  local function compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n\
    \  return table.sort(nums, compare_sums)\nend", "  local function compare_sums(a,\
    \ b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n    if sum_a ~= sum_b\
    \ then\n      return sum_a < sum_b\n    else\n      return a[1] < b[1]\n    end\n\
    \  end\n  table.sort(nums, compare_sums)\n  return nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local sorted_nums = {}\n  local index = 1\n  for i =\
    \ 1, #nums do\n    local digits = nums:sub(i, i)\n    local sum = 0\n    for j\
    \ = 1, #digits do\n      sum = sum + digits:sub(j, j)\n    end\n    sorted_nums[index]\
    \ = sum\n    index = index + 1\n  end\n  return table.sort(sorted_nums)\nend",
  "  local function compare(sum1, sum2)\n    return sum1 > sum2 or\n           sum1\
    \ == sum2 and\n           nums[#nums][#nums+1] > nums[#nums][#nums+1]\n  end\n\
    \  table.sort(nums, compare)\nend", "  local function compare_sums(a, b)\n   \
    \ local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.abs(math.floor(a/10)\
    \ + math.floor(b/10) - math.floor(a%10 - b%10))\n    end\n    return sum\n  end\n\
    \  table.sort(nums, compare_sums)\nend", "  local function compare_sums(a, b)\n\
    \    local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.abs(math.floor(a\
    \ / 10) * 10 - math.floor(b / 10) * 10)\n      a = a % 10\n      b = b % 10\n\
    \    end\n    return sum\n  end\n  table.sort(nums, compare_sums)\nend", "  local\
    \ sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum\
    \ = sumDigits(nums[i])\n    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n\
    \  end\n  table.sort(sorted_nums)\n  for i = 1, #sorted_nums do\n    sorted_nums[i]\
    \ = num_sums[sorted_nums[i]]\n  end\n  return sorted_nums\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum_string(string.sub(tostring(nums[i]),\
    \ 1))\n    if num_sum == nil then\n      num_sum = 0\n    end\n    sorted_nums[i]\
    \ = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums, function(a,\
    \ b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\nend", "  local\
    \ function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local sorted_nums = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num_sum = sumDigits(nums[i])\n    sorted_nums[num_sum]\
    \ = nums[i]\n    num_sums[num_sum] = i\n  end\n  table.sort(sorted_nums, function(a,\
    \ b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\nend", "  local\
    \ function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  return table.sort(nums,\
    \ compare_sums)\nend", "  local function compare(lhs, rhs)\n    local lhs_digits\
    \ = string.format(\"%0d\", lhs)\n    local rhs_digits = string.format(\"%0d\"\
    , rhs)\n    local lhs_sum = sum(lhs_digits)\n    local rhs_sum = sum(rhs_digits)\n\
    \    if lhs_sum < rhs_sum then\n      return -1\n    elseif lhs_sum > rhs_sum\
    \ then\n      return 1\n    else\n      return lhs - rhs\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n\
    \  end\n  return table.sort(nums, compare_sums)\nend", "  local function compare(lhs,\
    \ rhs)\n    local lhs_digits = string.format(\"%0d\", lhs)\n    local rhs_digits\
    \ = string.format(\"%0d\", rhs)\n    local lhs_sum = lhs_digits:len()\n    local\
    \ rhs_sum = rhs_digits:len()\n    if lhs_sum < rhs_sum then\n      return -1\n\
    \    elseif lhs_sum > rhs_sum then\n      return 1\n    else\n      return lhs:sub(1,\
    \ lhs_sum):le(rhs:sub(1, rhs_sum))\n    end\n  end\n  table.sort(nums, compare)\n\
    end", "  local function compare_sums(a, b)\n    return a.sum - b.sum\n  end\n\
    \  local function compare_sums_index(a, b)\n    return a.sum - b.sum\n  end\n\
    \  local function compare_sums_index_reverse(a, b)\n    return b.sum - a.sum\n\
    \  end\n  local function compare_sums_index_reverse_index(a, b)\n    return b.sum\
    \ - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return b.sum - a.sum\n  end\n  local function compare_sums_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse(a,\
    \ b)\n    return a.sum - b.sum\n  end", "  local function compare_sums(a, b)\n\
    \    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n  return nums\n\
    end", "  local function compare_sums(a, b)\n    return a:sum() - b:sum()\n  end\n\
    \  table.sort(nums, compare_sums)\n  return nums\nend", "  local sorted_nums =\
    \ {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum\
    \ = sum + nums[i]:sub(1, j):tonumber()\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local\
    \ sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10\
    \ do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    sorted_nums[i] = sum\n\
    \  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum_string(nums[i])\n\
    \    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\n\
    end", "  local function compare_sums(a, b)\n    return a.sum - b.sum\n  end\n\
    \  table.sort(nums, compare_sums)\nend", "  local function compare(lhs, rhs)\n\
    \    local lhs_digits = string.sub(lhs, 1, string.len(lhs)-1)\n    local rhs_digits\
    \ = string.sub(rhs, 1, string.len(rhs)-1)\n    local lhs_sum = tonumber(lhs_digits)\n\
    \    local rhs_sum = tonumber(rhs_digits)\n    if lhs_sum == rhs_sum then\n  \
    \    return lhs < rhs end\n    return lhs_sum < rhs_sum end\n  return table.sort(nums,\
    \ compare)\nend", "  local function compare_sums(a, b)\n    return a.sum - b.sum\n\
    \  end\n  local function compare_sums_index(a, b)\n    return a.index - b.index\n\
    \  end\n  local function compare_sums_sum(a, b)\n    return a.sum - b.sum\n  end\n\
    \  local function compare_sums_sum_index(a, b)\n    return a.sum - b.sum\n  end\n\
    \  local function compare_sums_sum_index_sum(a, b)\n    return a.sum - b.sum\n\
    \  end\n  local function compare_sums_sum_index_sum_index(a, b)\n    return a.sum\
    \ - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum(a, b)\n\
    \    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum(a,\
    \ b)\n    return a.sum - b.sum\n  end\n  local function compare_sums_sum_index_sum_index_sum_index_sum",
  "  local function compare(sum1, sum2)\n    if sum1 > sum2 then\n      return 1\n\
    \    elseif sum1 < sum2 then\n      return -1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(nums, compare)\n  return nums\nend", "  local function compare_sums(a,\
    \ b)\n    return a:sum() < b:sum()\n  end\n  return table.sort(nums, compare_sums)\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:byte(j) * j\n    end\n    sorted_nums[sum]\
    \ = i\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local\
    \ function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare_sums(a, b)\n    return a.sum\
    \ - b.sum\n  end\n  table.sort(nums, compare_sums)\nend", "  local function compare(index1,\
    \ index2)\n    local sum1 = nums[index1]:byte():sum()\n    local sum2 = nums[index2]:byte():sum()\n\
    \    if sum1 == sum2 then\n      return index1\n    elseif sum1 > sum2 then\n\
    \      return index2\n    else\n      return index1\n    end\n  end\n  table.sort(nums,\
    \ compare)\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n\
    \    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  return\
    \ sorted_nums\nend", "  local function compare_by_sum(num1, num2)\n    local sum1\
    \ = num1:bytes():sum(0, num1:bytes():len())\n    local sum2 = num2:bytes():sum(0,\
    \ num2:bytes():len())\n    return sum1 - sum2\n  end\n  return table.sort(nums,\
    \ compare_by_sum)\nend", "  local function compare_sums(a, b)\n    return a:sum()\
    \ - b:sum()\n  end\n  table.sort(nums, compare_sums)\nend", "  local function\
    \ compare_sums(a, b)\n    local sum_a = sum(a)\n    local sum_b = sum(b)\n   \
    \ if sum_a ~= sum_b then\n      return sum_a < sum_b\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end\n  table.sort(nums, compare_sums)\nend", "  local function\
    \ compare(a,b)\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.abs(a\
    \ - b) * (10 - i)\n    end\n    return sum\n  end\n  table.sort(nums, compare)\n\
    \  return nums\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1, j):tonumber()\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend", "  local function compare(a,b)\n    return a<b and\
    \ 1 or a>b and -1 or 0\n  end\n  local function sort_by_digits(a,b)\n    local\
    \ sum = 0\n    for i=1,10 do\n      sum = sum + math.abs(a%10 - b%10)\n      a\
    \ = math.floor(a/10)\n      b = math.floor(b/10)\n    end\n    return sum\n  end\n\
    \  table.sort(nums, compare)\n  table.sort(nums, sort_by_digits)\n  return nums\n\
    end", "  local function compare(lhs, rhs)\n    local lhs_digits = string.format(\"\
    %0d\", lhs)\n    local rhs_digits = string.format(\"%0d\", rhs)\n    local lhs_sum\
    \ = sum(lhs_digits)\n    local rhs_sum = sum(rhs_digits)\n    if lhs_sum == rhs_sum\
    \ then\n      return lhs - rhs\n    end\n    return lhs_sum - rhs_sum\n  end\n\
    \  table.sort(nums, compare)\n  return nums\nend", "  local function compare_sums(a,\
    \ b)\n    return a:sum() - b:sum()\n  end\n  table.sort(nums, compare_sums)\n\
    end", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\n  return nums\nend", "  local function compare_by_sum(num1, num2)\n\
    \    local sum1 = num1:bytes():reverse():sum():uint()\n    local sum2 = num2:bytes():reverse():sum():uint()\n\
    \    if sum1 == sum2 then\n      return num1:bytes():reverse():index() - num2:bytes():reverse():index()\n\
    \    end\n    return sum1 - sum2\n  end\n  return table.sort(nums, compare_by_sum)\n\
    end", "  local function compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums,\
    \ compare_sums)\nend", "  local function compare(lhs, rhs)\n    local lhs_digits\
    \ = string.format(\"%0d\", lhs)\n    local rhs_digits = string.format(\"%0d\"\
    , rhs)\n    local lhs_sum = lhs_digits:len()\n    local rhs_sum = rhs_digits:len()\n\
    \    if lhs_sum > rhs_sum then\n      return 1\n    elseif lhs_sum < rhs_sum then\n\
    \      return -1\n    else\n      return lhs:byte() - rhs:byte()\n    end\n  end\n\
    \  table.sort(nums, compare)\n  return nums\nend", "  local sorted_nums = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(j, j)\n    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n\
    \    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return a < b end)\n  return sorted_nums\nend", "  local function\
    \ compare_sums(a, b)\n    return a[1] + b[1]\n  end\n  table.sort(nums, compare_sums)\n\
    \  return nums\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
