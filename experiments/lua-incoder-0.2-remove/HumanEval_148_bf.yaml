name: HumanEval_148_bf
language: lua
prompt: "-- There are eight planets in our solar system: the closerst to the Sun \n\
  -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus,\
  \ Neptune.\n-- Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n-- The function should return a tuple containing all planets whose\
  \ orbits are \n-- located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n-- the proximity to the sun. \n-- The function should return an empty\
  \ tuple if planet1 or planet2\n-- are not correct planet names. \n-- Examples\n\
  local function bf(planet1, planet2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
  \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
  \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
  \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
  \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
  \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
  \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function sortByDistance(planet1, planet2)\n        local\
    \ distances = {}\n        for i=1,8 do\n            distances[i] = distance(planet1,\
    \ planet2)\n        end\n        table.sort(distances)\n        return distances\n\
    \    end\n    local distances = sortByDistance(planet1, planet2)\n    if distances[1]\
    \ == distances[2] then\n        return distances[1]\n    else\n        return\
    \ distances[1]\n    end\nend", "    local function dist(planet1, planet2)\n  \
    \      -- TODO: implement the distance function here\n        return nil\n   \
    \ end\n    local function sortByDist(planet1, planet2)\n        -- TODO: implement\
    \ the sortByDist function here\n        return nil\n    end\n    local function\
    \ sortByDist2(planet1, planet2)\n        -- TODO: implement the sortByDist2 function\
    \ here\n        return nil\n    end\n    local function sortByDist3(planet1, planet2)\n\
    \        -- TODO: implement the sortByDist3 function here\n        return nil\n\
    \    end\n    local function sortByDist4(planet1, planet2)\n        -- TODO: implement\
    \ the sortByDist4 function here\n        return nil\n    end\n    local function\
    \ sortByDist5(planet1, planet2)\n        -- TODO: implement the sortByDist5 function\
    \ here\n        return nil\n    end\n    local function sortByDist6(planet1, planet2)\n\
    \        -- TODO: implement the sortByDist6 function here\n        return nil\n\
    \    end\n    local function sortByDist7(planet1, planet2)\n        -- TODO: implement\
    \ the sortByDist7 function here\n        return nil\n    end\n    local function\
    \ sortByDist8(planet1, planet2)\n        -- TODO: implement the sortByDist8 function\
    \ here\n        return nil\n    end\n    local function sortByDist9(planet1, planet2)\n\
    \        -- TODO: implement the sortByDist9 function here\n        return nil\n\
    \    end\n    local function sortByDist10(planet1, planet2)\n        -- TODO:\
    \ implement the sortByDist10 function here\n        return nil\n    end\n    local\
    \ function sortByDist11(planet1, planet2)\n        -- TODO: implement the sortByDist11\
    \ function here\n        return nil\n    end\n    local function sortByDist12(planet1,\
    \ planet2)\n        -- TODO: implement the sortByDist12 function here\n      \
    \  return nil\n    end\n    local function sortByDist13(planet1, planet2)\n  \
    \      -- TODO: implement the sortByDist13 function here\n        return nil\n\
    \    end\n    local function sortByDist14(planet1, planet2)\n        -- TODO:\
    \ implement the sortByDist14 function here\n        return nil\n    end\n    local\
    \ function sortByDist15(planet1, planet2)\n        -- TODO: implement the sortByDist15\
    \ function here\n        return nil\n    end\n    local function sortByDist16(planet1,\
    \ planet", "    local function distance(p1, p2)\n        -- The distance between\
    \ two planets is given by the distance \n        -- between the orbit of planet1\
    \ and the orbit of planet2. \n        -- The distance is given by the distance\
    \ between the \n        -- orbit of planet1 and the orbit of planet2, \n     \
    \   -- multiplied by the distance between the planets \n        -- and divided\
    \ by the distance between the planets \n        -- and the sun. \n        return\
    \ math.abs(p1.orbit.value - p2.orbit.value) * \n            math.abs(p1.orbit.value\
    \ - p2.orbit.value) / \n            math.abs(p1.orbit.value - sun)\n    end\n\
    \    local function sortByProximity(p1, p2)\n        -- The proximity between\
    \ two planets is given by the distance \n        -- between the orbit of planet1\
    \ and the orbit of planet2. \n        -- The proximity is given by the distance\
    \ between the \n        -- orbit of planet1 and the orbit of planet2, \n     \
    \   -- multiplied by the distance between the planets \n        -- and divided\
    \ by the distance between the planets \n        -- and the sun. \n        return\
    \ distance(p1, p2) * distance(p1, p2)\n    end\n    return sortByProximity(planet1,\
    \ planet2)\nend", "    local function dist(planet1, planet2)\n        local function\
    \ dist2(planet1, planet2)\n            local function dist3(planet1, planet2)\n\
    \                local function dist4(planet1, planet2)\n                    local\
    \ function dist5(planet1, planet2)\n                        local function dist6(planet1,\
    \ planet2)\n                            local function dist7(planet1, planet2)\n\
    \                                local function dist8(planet1, planet2)\n    \
    \                                return 0\n                                end\n\
    \                                return dist8\n                            end\n\
    \                            return dist7\n                        end\n     \
    \                   return dist6\n                    end\n                  \
    \  return dist5\n                end\n                return dist4\n         \
    \   end\n            return dist3\n        end\n        return dist2\n    end\n\
    \    return dist(planet1, planet2)\nend\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"\
    Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"\
    Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Venus\", \"Earth\"\
    ))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\n\
    print(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"\
    Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"\
    Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\n\
    print(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"\
    Jupiter\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\"\
    , \"Neptune\"))\nprint(bf(\"Uranus\", \"Neptune\"))", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2 + (a.y-b.y)^2 + (a.z-b.z)^2)\n    end\n\
    \    local function sortByDistance(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByProximity(a,b)\n        return distance(a,b) - distance(b,a)\n\
    \    end\n    local function sortByOrbit(a,b)\n        return distance(a,b) -\
    \ distance(b,a)\n    end\n    local function sortByDistanceAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByOrbitAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByDistanceAndOrbit(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByOrbitAndOrbit(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByDistanceAndOrbitAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByOrbitAndOrbitAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByDistanceAndOrbitAndOrbit(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByOrbitAndOrbitAndOrbit(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByDistanceAndOrbitAndOrbitAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByOrbitAndOrbitAndOrbitAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByDistanceAndOrbitAndOrbitAndOrbit(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByOrbitAndOrbitAndOrbitAndOrbit(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByDistanceAndOrbitAndOrbitAndOrbitAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByOrbitAndOrbitAndOrbitAndOrbitAndProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByDistanceAndOrbitAndOrbitAndOr",
  "    local planets = {\n        Mercury = {\n            Orbit = { \n          \
    \      Longitude = 150.,\n                Latitude = 45.,\n                Distance\
    \ = 1.\n            },\n            Orbit = { \n                Longitude = 140.,\n\
    \                Latitude = 45.,\n                Distance = 1.\n            },\n\
    \            Orbit = { \n                Longitude = 130.,\n                Latitude\
    \ = 45.,\n                Distance = 1.\n            },\n            Orbit = {\
    \ \n                Longitude = 150.,\n                Latitude = 45.,\n     \
    \           Distance = 1.\n            },\n            Orbit = { \n          \
    \      Longitude = 140.,\n                Latitude = 45.,\n                Distance\
    \ = 1.\n            },\n            Orbit = { \n                Longitude = 130.,\n\
    \                Latitude = 45.,\n                Distance = 1.\n            },\n\
    \            Orbit = { \n                Longitude = 150.,\n                Latitude\
    \ = 45.,\n                Distance = 1.\n            },\n            Orbit = {\
    \ \n                Longitude = 140.,\n                Latitude = 45.,\n     \
    \           Distance = 1.\n            },\n            Orbit = { \n          \
    \      Longitude = 130.,\n                Latitude = 45.,\n                Distance\
    \ = 1.\n            },\n            Orbit = { \n                Longitude = 150.,\n\
    \                Latitude = 45.,\n                Distance = 1.\n            },\n\
    \            Orbit = { \n                Longitude = 140.,\n                Latitude\
    \ = 45.,\n                Distance = 1.\n            },\n            Orbit = {\
    \ \n                Longitude = 130.,\n                Latitude = 45.,\n     \
    \           Distance = 1.\n            },\n            Orbit = { \n          \
    \      Longitude = 150.,\n                Latitude = 45.,\n                Distance\
    \ = 1.\n            },\n            Orbit = { \n                Longitude = 140.,\n\
    \                Latitude = 45.,\n                Distance = 1.\n            },\n\
    \            Orbit = { \n                Longitude = 130.,\n                Latitude\
    \ = 45.,\n                Distance = 1.\n            },\n            Orbit = {\
    \ \n                Longitude = 150.,\n                Latitude = 45.,\n     \
    \           Distance = 1.\n            },\n            Orbit = { \n          \
    \      Longitude = 140.,\n                Latitude = 45.,\n                Distance\
    \ = 1.\n            },\n            Orbit = { \n                Longitude = 130.,\n\
    \                Latitude = 45.,\n                Distance = 1.\n            },\n\
    \            Orbit = { \n                Longitude = 150.,\n                Latitude\
    \ = 45.,\n", "    local planets = {Mercury, Venus, Earth, Mars, Jupiter, Saturn,\
    \ Uranus, Neptune}\n    local planet1 = planets[planet1]\n    local planet2 =\
    \ planets[planet2]\n    local sun = Sun()\n    local sun_distance = sun:distanceTo(planet1)\n\
    \    local sun_distance = sun:distanceTo(planet2)\n    local sun_distance = sun_distance:sqrt()\n\
    \    local planet1_distance = planet1:distanceTo(sun)\n    local planet2_distance\
    \ = planet2:distanceTo(sun)\n    local planet1_distance = planet1_distance:sqrt()\n\
    \    local planet2_distance = planet2_distance:sqrt()\n    local planet1_distance\
    \ = planet1_distance:floor()\n    local planet2_distance = planet2_distance:floor()\n\
    \    local planet1_distance = planet1_distance:round()\n    local planet2_distance\
    \ = planet2_distance:round()\n    local planet1_distance = planet1_distance:ceil()\n\
    \    local planet2_distance = planet2_distance:ceil()\n    local planet1_distance\
    \ = planet1_distance:round()\n    local planet2_distance = planet2_distance:round()\n\
    \    local planet1_distance = planet1_distance:floor()\n    local planet2_distance\
    \ = planet2_distance:floor()\n    local planet1_distance = planet1_distance:round()\n\
    \    local planet2_distance = planet2_distance:round()\n    local planet1_distance\
    \ = planet1_distance:ceil()\n    local planet2_distance = planet2_distance:ceil()\n\
    \    local planet1_distance = planet1_distance:round()\n    local planet2_distance\
    \ = planet2_distance:round()\n    local planet1_distance = planet1_distance:floor()\n\
    \    local planet2_distance = planet2_distance:floor()\n    local planet1_distance\
    \ = planet1_distance:round()\n    local planet2_distance = planet2_distance:round()\n\
    \    local planet1_distance = planet1_distance:ceil()\n    local planet2_distance\
    \ = planet2_distance:ceil()\n    local planet1_distance = planet1_distance:round()\n\
    \    local planet2_distance = planet2_distance:round()\n    local planet1_distance\
    \ = planet1_distance:floor()\n    local planet2_distance = plan", "    local function\
    \ distance(p1, p2)\n        -- The distance between two planets is given by the\
    \ distance \n        -- between their orbits.\n        local function distance(p1,\
    \ p2)\n            -- The distance between two planets is given by the distance\
    \ \n            -- between their orbits.\n            local function distance(p1,\
    \ p2)\n                -- The distance between two planets is given by the distance\
    \ \n                -- between their orbits.\n                local function distance(p1,\
    \ p2)\n                    -- The distance between two planets is given by the\
    \ distance \n                    -- between their orbits.\n                  \
    \  local function distance(p1, p2)\n                        -- The distance between\
    \ two planets is given by the distance \n                        -- between their\
    \ orbits.\n                        local function distance(p1, p2)\n         \
    \                   -- The distance between two planets is given by the distance\
    \ \n                            -- between their orbits.\n                   \
    \         local function distance(p1, p2)\n                                --\
    \ The distance between two planets is given by the distance \n               \
    \                 -- between their orbits.\n                                local\
    \ function distance(p1, p2)\n                                    -- The distance\
    \ between two planets is given by the distance \n                            \
    \        -- between their orbits.\n                                    local function\
    \ distance(p1, p2)\n                                        -- The distance between\
    \ two planets is given by the distance \n                                    \
    \    -- between their orbits.\n                                        local function\
    \ distance(p1, p2)\n                                            -- The distance\
    \ between two planets is given by the distance \n                            \
    \                -- between their orbits.\n                                  \
    \          local function distance(p1, p2)\n                                 \
    \               -- The distance between two planets is given by the distance \n\
    \                                                -- between their orbits.\n  \
    \                                              local function distance(p1, p2)\n\
    \                                                    -- The distance between two\
    \ planets is given by the distance \n                                        \
    \            -- between their orbits.\n                                      \
    \              local function distance(p1, p2)\n                             \
    \                           -- The distance between two planets is given by the\
    \ distance \n                                                        -- between\
    \ their orbits.\n                                                        local\
    \ function distance(p1, p2)\n                                                \
    \            -- The distance between two planets is given by the distance \n \
    \                                                           -- between their orbits.\n\
    \                                                            local function distance(p1,\
    \ p2)\n                                                                -- The\
    \ distance between two planets is given by the distance \n                   \
    \                                             -- between their orbits.\n     \
    \                                                           local function distance(p1,\
    \ p2)\n                                                                    --\
    \ The distance between two planets is given by the distance \n               \
    \                                                     -- between their orbits.\n\
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \               -- The distance between two planets is given by the distance \n\
    \                                                                        -- between\
    \ their orbits.\n                                                            \
    \            local function distance(p1, p2)\n                               \
    \                                             -- The distance between two planets\
    \ is given by the distance \n                                                \
    \                            -- between their orbits.\n                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \          -- The distance between two planets is ", "    local function distance(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    return distance\nend",
  "    local function distance(x, y)\n        return math.sqrt(math.pow((x - y), 2))\n\
    \    end\n    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare2(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function compare3(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare4(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare5(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare6(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n  \
    \  local function compare7(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare8(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function compare9(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare10(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare11(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare12(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n \
    \   local function compare13(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare14(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function compare15(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare16(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare17(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare18(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n \
    \   local function compare19(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare20(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function compare21(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare22(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare23(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare24(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n \
    \   local function compare25(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare26(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function compare27(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare28(x, y)\n\
    \        return distance(x, ", "    local function distance(p1, p2)\n        local\
    \ function distance(p1, p2)\n            local function distance(p1, p2)\n   \
    \             local function distance(p1, p2)\n                    local function\
    \ distance(p1, p2)\n                        local function distance(p1, p2)\n\
    \                            local function distance(p1, p2)\n               \
    \                 local function distance(p1, p2)\n                          \
    \          local function distance(p1, p2)\n                                 \
    \       local function distance(p1, p2)\n                                    \
    \        local function distance(p1, p2)\n                                   \
    \             local function distance(p1, p2)\n                              \
    \                      local function distance(p1, p2)\n                     \
    \                                   local function distance(p1, p2)\n        \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local function distance(a,b)\n        return math.sqrt(math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2))\n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance2(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance3(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance4(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance5(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance6(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance7(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance8(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance9(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance10(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n", "    local function\
    \ distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local\
    \ function sort_by_proximity(planet1, planet2)\n        local planet1_orbit =\
    \ planet1_orbits[planet1]\n        local planet2_orbit = planet2_orbits[planet2]\n\
    \        local sun_distance = distance(planet1_orbit[1], planet2_orbit[1])\n \
    \       local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet2_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet1_orbit[1], planet2_orbit[1])\n\
    \        local planet1_orbit_index = distance(planet", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function distance2(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2)\n\
    \    end\n    local function distance3(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance4(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance5(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance6(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance7(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance8(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance9(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance10(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance11(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance12(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance13(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance14(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance15(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance16(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance17(a,b)", "    local function distance(planet1,\
    \ planet2)\n        -- TODO: Write a function that calculates the distance between\
    \ two planets\n        -- given their names as strings.\n        -- The function\
    \ should return the distance between the two planets.\n    end\n    local function\
    \ orbits(planet1, planet2)\n        -- TODO: Write a function that calculates\
    \ the orbit of planet1 and the \n        -- orbit of planet2 given their names\
    \ as strings. \n        -- The function should return the orbits of both planets.\n\
    \    end\n    local function sun(planet1, planet2)\n        -- TODO: Write a function\
    \ that calculates the orbit of planet1 and the \n        -- orbit of planet2 given\
    \ their names as strings. \n        -- The function should return the orbits of\
    \ both planets.\n    end\n    local function proximity(planet1, planet2)\n   \
    \     -- TODO: Write a function that calculates the proximity of the planets\n\
    \        -- given their names as strings. \n        -- The function should return\
    \ the proximity of the two planets.\n    end\n    local function sort(planet1,\
    \ planet2)\n        -- TODO: Write a function that sorts the planets given their\
    \ names as \n        -- strings. The function should return the sorted planets.\n\
    \    end\n    local function planets(planet1, planet2)\n        -- TODO: Write\
    \ a function that calculates the planets whose orbits \n        -- are located\
    \ between the orbit of planet1 and the orbit of planet2. \n        -- The function\
    \ should return the planets whose orbits are located \n        -- between the\
    \ orbit of planet1 and the orbit of planet2.\n    end\n    local function planetsBetween(planet1,\
    \ planet2)\n        -- TODO: Write a function that calculates the planets whose\
    \ orbits \n        -- are located between the orbit of planet1 and the orbit of\
    \ planet2. \n        -- The function should return the planets whose orbits are\
    \ located \n        -- between the orbit of planet1 and the orbit of planet2.\n\
    \    end\n    local function planetsBetween(planet1, planet2)\n        -- TODO:\
    \ Write a function that calculates the planets whose orbits \n        -- are located\
    \ between the orbit of planet1 and the orbit of planet2. \n        -- The function\
    \ should return the planets whose orbits are located \n        -- between the\
    \ orbit of planet1 and the orbit of planet2.\n    end\n    local function planetsBetween(planet",
  "    local function distance(p1, p2)\n        -- TODO: Implement this function\n\
    \    end\n    return distance\nend", "    local function distance(p1, p2)\n  \
    \      -- The distance between two planets is given by the distance \n       \
    \ -- between their orbits.\n        local function distance(p1, p2)\n        \
    \    local function distance(p1, p2)\n                local function distance(p1,\
    \ p2)\n                    local function distance(p1, p2)\n                 \
    \       local function distance(p1, p2)\n                            local function\
    \ distance(p1, p2)\n                                local function distance(p1,\
    \ p2)\n                                    local function distance(p1, p2)\n \
    \                                       local function distance(p1, p2)\n    \
    \                                        local function distance(p1, p2)\n   \
    \                                             local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function ", "    local function distance(x, y)\n\
    \        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function compare(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local\
    \ function compare(x, y)\n        return distance(x, y) < distance(y, x)\n   \
    \ end\n    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function compare(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow(x-y, 2))\n    end\n    local function compare(x, y)\n   \
    \     return distance(x, y) < distance(y, x)\n    end\n    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function compare(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow(x-y, 2))\n    end\n    local function compare(x, y)\n   \
    \     return distance(x, y) < distance(y, x)\n    end\n    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function compare(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow(x-y, 2))\n    end\n    local function compare(x, y)\n   \
    \     return distance(x, y) < distance(y, x)\n    end\n    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function compare(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local ", "    local function distance(planet1,\
    \ planet2)\n        -- TODO: Implement this function\n    end\n    local function\
    \ proximity(planet1, planet2)\n        -- TODO: Implement this function\n    end\n\
    \    local function compare(planet1, planet2)\n        -- TODO: Implement this\
    \ function\n    end\n    local function compare2(planet1, planet2)\n        --\
    \ TODO: Implement this function\n    end\n    local function compare3(planet1,\
    \ planet2)\n        -- TODO: Implement this function\n    end\n    local function\
    \ compare4(planet1, planet2)\n        -- TODO: Implement this function\n    end\n\
    \    local function compare5(planet1, planet2)\n        -- TODO: Implement this\
    \ function\n    end\n    local function compare6(planet1, planet2)\n        --\
    \ TODO: Implement this function\n    end\n    local function compare7(planet1,\
    \ planet2)\n        -- TODO: Implement this function\n    end\n    local function\
    \ compare8(planet1, planet2)\n        -- TODO: Implement this function\n    end\n\
    \    local function compare9(planet1, planet2)\n        -- TODO: Implement this\
    \ function\n    end\n    local function compare10(planet1, planet2)\n        --\
    \ TODO: Implement this function\n    end\n    local function compare11(planet1,\
    \ planet2)\n        -- TODO: Implement this function\n    end\n    local function\
    \ compare12(planet1, planet2)\n        -- TODO: Implement this function\n    end\n\
    \    local function compare13(planet1, planet2)\n        -- TODO: Implement this\
    \ function\n    end\n    local function compare14(planet1, planet2)\n        --\
    \ TODO: Implement this function\n    end\n    local function compare15(planet1,\
    \ planet2)\n        -- TODO: Implement this function\n    end\n    local function\
    \ compare16(planet1, planet2)\n        -- TODO: Implement this function\n    end\n\
    \    local function compare17(planet1, planet2)\n        -- TODO: Implement this\
    \ function\n    end\n    local function compare18(planet1, planet2)\n        --\
    \ TODO: Implement this function\n    end\n    local function compare19(planet1,\
    \ planet2)\n        -- TODO: Implement this function\n    end\n    local function\
    \ compare20(planet1, planet2)\n        -- TODO: Implement this function\n    end\n\
    \    local function compare21(planet1, planet2)\n        -- TODO: Implement this\
    \ function\n    end\n    local function compare22(planet1, planet2)\n        -- ",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local function distance(x, y)\n        return\
    \ math.sqrt((x - planet1.x)^2 + (y - planet1.y)^2)\n    end\n    local function\
    \ sortByDistance(planet1, planet2)\n        local distances = {}\n        for\
    \ _, planet in ipairs(planets) do\n            distances[planet] = distance(planet1,\
    \ planet)\n        end\n        table.sort(distances, function(a, b) return distances[a]\
    \ < distances[b] end)\n        return distances\n    end\n    return sortByDistance(planet1,\
    \ planet2)\nend", "    local planets = {\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local planet1 = planets[planet1]\n\
    \    local planet2 = planets[planet2]\n    local sun = math.rad(math.pi/2)\n \
    \   local planet1orbit = math.rad(planet1 .. \"orbit\")\n    local planet2orbit\
    \ = math.rad(planet2 .. \"orbit\")\n    local planet1orbitorbit = math.rad(planet1\
    \ .. \"orbitorbit\")\n    local planet2orbitorbit = math.rad(planet2 .. \"orbitorbit\"\
    )\n    local planet1orbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbit\"\
    )\n    local planet2orbitorbitorbit = math.rad(planet2 .. \"orbitorbitorbit\"\
    )\n    local planet1orbitorbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbitorbit\"\
    )\n    local planet2orbitorbitorbit = math.rad(planet2 .. \"orbitorbitorbit\"\
    )\n    local planet1orbitorbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbitorbit\"\
    )\n    local planet2orbitorbitorbit = math.rad(planet2 .. \"orbitorbitorbit\"\
    )\n    local planet1orbitorbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbitorbit\"\
    )\n    local planet2orbitorbitorbit = math.rad(planet2 .. \"orbitorbitorbit\"\
    )\n    local planet1orbitorbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbitorbit\"\
    )\n    local planet2orbitorbitorbit = math.rad(planet2 .. \"orbitorbitorbit\"\
    )\n    local planet1orbitorbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbitorbit\"\
    )\n    local planet2orbitorbitorbit = math.rad(planet2 .. \"orbitorbitorbit\"\
    )\n    local planet1orbitorbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbitorbit\"\
    )\n    local planet2orbitorbitorbit = math.rad(planet2 .. \"orbitorbitorbit\"\
    )\n    local planet1orbitorbitorbitorbit = math.rad(planet1 .. \"orbitorbitorbitorbit\"\
    )\n    local planet2orbitorbit", "    local function distance(a,b)\n        return\
    \ math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_proximity(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_orbit(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sort_by_distance(a,b)\n        return distance(a,b", "    local function distance(p1,\
    \ p2)\n        -- Write your code here\n    end\n    return distance\nend", " \
    \   local function distance(p1, p2)\n        -- The distance between two planets\
    \ is given by the distance \n        -- between the orbit of planet1 and the orbit\
    \ of planet2. \n        -- The distance is given by the distance between the \n\
    \        -- orbit of planet1 and the orbit of planet2, \n        -- multiplied\
    \ by the radius of the planet. \n        local function distance(p1, p2)\n   \
    \         -- The distance between two planets is given by the distance \n    \
    \        -- between the orbit of planet1 and the orbit of planet2. \n        \
    \    -- The distance is given by the distance between the \n            -- orbit\
    \ of planet1 and the orbit of planet2, \n            -- multiplied by the radius\
    \ of the planet. \n            local function distance(p1, p2)\n             \
    \   -- The distance between two planets is given by the distance \n          \
    \      -- between the orbit of planet1 and the orbit of planet2. \n          \
    \      -- The distance is given by the distance between the \n               \
    \ -- orbit of planet1 and the orbit of planet2, \n                -- multiplied\
    \ by the radius of the planet. \n                local function distance(p1, p2)\n\
    \                    -- The distance between two planets is given by the distance\
    \ \n                    -- between the orbit of planet1 and the orbit of planet2.\
    \ \n                    -- The distance is given by the distance between the \n\
    \                    -- orbit of planet1 and the orbit of planet2, \n        \
    \            -- multiplied by the radius of the planet. \n                   \
    \ local function distance(p1, p2)\n                        -- The distance between\
    \ two planets is given by the distance \n                        -- between the\
    \ orbit of planet1 and the orbit of planet2. \n                        -- The\
    \ distance is given by the distance between the \n                        -- orbit\
    \ of planet1 and the orbit of planet2, \n                        -- multiplied\
    \ by the radius of the planet. \n                        local function distance(p1,\
    \ p2)\n                            -- The distance between two planets is given\
    \ by the distance \n                            -- between the orbit of planet1\
    \ and the orbit of planet2. \n                            -- The distance is given\
    \ by the distance between the \n                            -- orbit of planet1\
    \ and the orbit of planet2, \n                            -- multiplied by the\
    \ radius of the planet. \n                            local function distance(p1,\
    \ p2)\n                                -- The distance between two planets is\
    \ given by the distance \n                                -- between the orbit\
    \ of planet1 and the orbit of planet2. \n                                -- The\
    \ distance is given by the distance between the \n                           \
    \     -- orbit of planet1 and the orbit of planet2, \n                       \
    \         -- multiplied by the ", "    local planets = {\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    }\n   \
    \ local function distance(p1, p2)\n        local x1, y1, z1 = p1:getPos()\n  \
    \      local x2, y2, z2 = p2:getPos()\n        return math.sqrt((x1 - x2)^2 +\
    \ (y1 - y2)^2 + (z1 - z2)^2)\n    end\n    local function sortByDistance(planet1,\
    \ planet2)\n        local distances = {}\n        for _, planet in ipairs(planets)\
    \ do\n            distances[planet] = distance(planet1, planet)\n        end\n\
    \        table.sort(distances, function(a, b) return distances[a] < distances[b]\
    \ end)\n        return table.unpack(distances)\n    end\n    return sortByDistance(planet1,\
    \ planet2)\nend\nprint(bf(\"Mercury\", \"Earth\")) -- prints {\"Mercury\", \"\
    Earth\"}\nprint(bf(\"Mercury\", \"Venus\")) -- prints {\"Mercury\", \"Venus\"\
    }\nprint(bf(\"Mercury\", \"Mars\")) -- prints {}\nprint(bf(\"Mercury\", \"Jupiter\"\
    )) -- prints {}\nprint(bf(\"Mercury\", \"Saturn\")) -- prints {}\nprint(bf(\"\
    Mercury\", \"Uranus\")) -- prints {}\nprint(bf(\"Mercury\", \"Neptune\")) -- prints\
    \ {}\nprint(bf(\"Venus\", \"Earth\")) -- prints {\"Venus\", \"Earth\"}\nprint(bf(\"\
    Venus\", \"Mars\")) -- prints {\"Venus\", \"Mars\"}\nprint(bf(\"Venus\", \"Jupiter\"\
    )) -- prints {\"Venus\", \"Jupiter\"}\nprint(bf(\"Venus\", \"Saturn\")) -- prints\
    \ {\"Venus\", \"Saturn\"}\nprint(bf(\"Venus\", \"Uranus\")) -- prints {\"Venus\"\
    , \"Uranus\"}\nprint(bf(\"Venus\", \"Neptune\")) -- prints {\"Venus\", \"Neptune\"\
    }\nprint(bf(\"Earth\", \"Mars\")) -- prints {\"Earth\", \"Mars\"}\nprint(bf(\"\
    Earth\", \"Jupiter\")) -- prints {\"Earth\", \"Jupiter\"}\nprint(bf(\"Earth\"\
    , \"Saturn\")) -- prints {\"Earth\", \"Saturn\"}\nprint(bf(\"Earth\", \"Uranus\"\
    )) ", "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function sort_by_distance(x, y)\n        return distance(x,\
    \ y) or 0\n    end\n    local function sort_by_proximity(x, y)\n        return\
    \ distance(x, y) or distance(y, x) or 0\n    end\n    local function sort_by_proximity_and_distance(x,\
    \ y)\n        return distance(x, y) or distance(y, x) or distance(x, y) or 0\n\
    \    end\n    local function sort_by_proximity_and_distance2(x, y)\n        return\
    \ distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x)\n    end\n\
    \    local function sort_by_proximity_and_distance3(x, y)\n        return distance(x,\
    \ y) or distance(y, x) or distance(x, y) or distance(y, x) or distance(x, y) or\
    \ distance(y, x)\n    end\n    local function sort_by_proximity_and_distance4(x,\
    \ y)\n        return distance(x, y) or distance(y, x) or distance(x, y) or distance(y,\
    \ x) or distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x)\n\
    \    end\n    local function sort_by_proximity_and_distance5(x, y)\n        return\
    \ distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x) or distance(x,\
    \ y) or distance(y, x) or distance(x, y) or distance(y, x) or distance(x, y) or\
    \ distance(y, x)\n    end\n    local function sort_by_proximity_and_distance6(x,\
    \ y)\n        return distance(x, y) or distance(y, x) or distance(x, y) or distance(y,\
    \ x) or distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x) or\
    \ distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x)\n    end\n\
    \    local function sort_by_proximity_and_distance7(x, y)\n        return distance(x,\
    \ y) or distance(y, x) or distance(x, y) or distance(y, x) or distance(x, y) or\
    \ distance(y, x) or distance(x, y) or distance(y, x) or distance(x, y) or distance(y,\
    \ x) or distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x)\n\
    \    end\n    local function sort_by_proximity_and_distance8(x, y)\n        return\
    \ distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x) or distance(x,\
    \ y) or distance(y, x) or distance(x, y) or distance(y, x) or distance(x, y) or\
    \ distance(y, x) or distance(x, y) or distance(y, x) or distance(x, y) or distance(y,\
    \ x)\n    end\n    local function sort_by_proximity_and_distance9(x, y)\n    \
    \    return distance(x, y) or distance(y, x) or distance(x, y) or distance(y,\
    \ x) or distance(x, y) or distance(y, x) or distance(x, y) or distance(y, x) or\
    \ distance(x, y) or distance(y, ", "    local function dist(planet1, planet2)\n\
    \        -- The distance between two planets is given by the distance \n     \
    \   -- between the orbit of the two planets. \n        local function dist(planet1,\
    \ planet2)\n            -- The distance between two planets is given by the distance\
    \ \n            -- between the orbit of the two planets. \n            local function\
    \ dist(planet1, planet2)\n                -- The distance between two planets\
    \ is given by the distance \n                -- between the orbit of the two planets.\
    \ \n                local function dist(planet1, planet2)\n                  \
    \  -- The distance between two planets is given by the distance \n           \
    \         -- between the orbit of the two planets. \n                    local\
    \ function dist(planet1, planet2)\n                        -- The distance between\
    \ two planets is given by the distance \n                        -- between the\
    \ orbit of the two planets. \n                        local function dist(planet1,\
    \ planet2)\n                            -- The distance between two planets is\
    \ given by the distance \n                            -- between the orbit of\
    \ the two planets. \n                            local function dist(planet1,\
    \ planet2)\n                                -- The distance between two planets\
    \ is given by the distance \n                                -- between the orbit\
    \ of the two planets. \n                                local function dist(planet1,\
    \ planet2)\n                                    -- The distance between two planets\
    \ is given by the distance \n                                    -- between the\
    \ orbit of the two planets. \n                                    local function\
    \ dist(planet1, planet2)\n                                        -- The distance\
    \ between two planets is given by the distance \n                            \
    \            -- between the orbit of the two planets. \n                     \
    \                   local function dist(planet1, planet2)\n                  \
    \                          -- The distance between two planets is given by the\
    \ distance \n                                            -- between the orbit\
    \ of the two planets. \n                                            local function\
    \ dist(planet1, planet2)\n                                                -- The\
    \ distance between two planets is given by the distance \n                   \
    \                             -- between the orbit of the two planets. \n    \
    \                                            local function dist(planet1, planet2)\n\
    \                                                    -- The distance between two\
    \ planets is given by the distance \n                                        \
    \            -- between the orbit of the two planets. \n                     \
    \                               local function dist(planet1, planet2)\n      \
    \                                                  -- The distance between two\
    \ planets is given by the distance \n                                        \
    \                -- between the orbit of the two planets. \n                 \
    \                                       local function dist(planet1, planet2)\n\
    \                                                            -- The distance between\
    \ two planets is given by the distance \n                                    \
    \                        -- between the orbit of the two planets. \n         \
    \                                                   local function dist(planet1,\
    \ planet2)\n                                                                --\
    \ The distance between two planets is given by the ", "    local planets = {\n\
    \        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\"\
    ,\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"\
    Neptune\",\n    }\n    local function distance(planet1, planet2)\n        local\
    \ distance = math.sqrt((math.pow(planet1.x - planet2.x, 2) + math.pow(planet1.y\
    \ - planet2.y, 2)) + math.pow(planet1.z - planet2.z, 2))\n        return distance\n\
    \    end\n    local function sortByDistance(planet1, planet2)\n        local distance\
    \ = distance(planet1, planet2)\n        return distance\n    end\n    local function\
    \ sortByProximity(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        local proximity = math.abs(distance - math.sin(math.pi/4))\n\
    \        return proximity\n    end\n    local function sortByProximityAndDistance(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        local\
    \ proximity = math.abs(distance - math.sin(math.pi/4))\n        return proximity,\
    \ distance\n    end\n    local function sortByProximityAndDistanceAndSort(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        local\
    \ proximity = math.abs(distance - math.sin(math.pi/4))\n        local sorted =\
    \ sortByProximityAndDistance(planet1, planet2)\n        return proximity, distance,\
    \ sorted\n    end\n    local function sortByProximityAndDistanceAndSort2(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        local\
    \ proximity = math.abs(distance - math.sin(math.pi/4))\n        local sorted =\
    \ sortByProximityAndDistance(planet1, planet2)\n        return proximity, distance,\
    \ sorted\n    end\n    local function sortByProximityAndDistanceAndSort3(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        local\
    \ proximity = math.abs(distance - math.sin(math.pi/4))\n        local sorted =\
    \ sortByProximityAndDistanceAndSort(planet1, planet2)\n        return proximity,\
    \ distance, sorted\n    end\n    local function sortByProximityAndDistanceAndSort4(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        local\
    \ proximity = math.abs(distance - math.sin(math.pi/4))\n        local sorted =\
    \ sort", "    local function dist(planet1, planet2)\n        local function dist2(planet1,\
    \ planet2)\n            local function dist3(planet1, planet2)\n             \
    \   local function dist4(planet1, planet2)\n                    local function\
    \ dist5(planet1, planet2)\n                        local function dist6(planet1,\
    \ planet2)\n                            local function dist7(planet1, planet2)\n\
    \                                local function dist8(planet1, planet2)\n    \
    \                                return 0\n                                end\n\
    \                                return dist8\n                            end\n\
    \                            return dist7\n                        end\n     \
    \                   return dist6\n                    end\n                  \
    \  return dist5\n                end\n                return dist4\n         \
    \   end\n            return dist3\n        end\n        return dist2\n    end\n\
    \    return dist(planet1, planet2)\nend", "    local function distance(p1, p2)\n\
    \        local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                local function distance(p1, p2)\n                    local\
    \ function distance(p1, p2)\n                        local function distance(p1,\
    \ p2)\n                            local function distance(p1, p2)\n         \
    \                       local function distance(p1, p2)\n                    \
    \                local function distance(p1, p2)\n                           \
    \             local function distance(p1, p2)\n                              \
    \              local function distance(p1, p2)\n                             \
    \                   local function distance(p1, p2)\n                        \
    \                            local function distance(p1, p2)\n               \
    \                                         local function distance(p1, p2)\n  \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n\
    \        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\",\n    }\n    local planet1 = planets[planet1]\n\
    \    local planet2 = planets[planet2]\n    local sun = math.rad(math.pi/2)\n \
    \   local orbit1 = {\n        rad = math.rad(planet1),\n        dist = math.rad(planet1)*math.tan(sun),\n\
    \    }\n    local orbit2 = {\n        rad = math.rad(planet2),\n        dist =\
    \ math.rad(planet2)*math.tan(sun),\n    }\n    local orbits = {orbit1, orbit2}\n\
    \    local distances = {}\n    for _, orbit in pairs(orbits) do\n        local\
    \ dist = orbit.rad - sun\n        distances[dist] = true\n    end\n    local sorted\
    \ = table.sort(distances, function(a, b) return a < b end)\n    return sorted\n\
    end", "    local function distance(p1, p2)\n        local function distance(p1,\
    \ p2)\n            local function distance(p1, p2)\n                local function\
    \ distance(p1, p2)\n                    local function distance(p1, p2)\n    \
    \                    local function distance(p1, p2)\n                       \
    \     local function distance(p1, p2)\n                                local function\
    \ distance(p1, p2)\n                                    local function distance(p1,\
    \ p2)\n                                        local function distance(p1, p2)\n\
    \                                            local function distance(p1, p2)\n\
    \                                                local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(p1,\
    \ p2)\n        local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                local function distance(p1, p2)\n                    local\
    \ function distance(p1, p2)\n                        local function distance(p1,\
    \ p2)\n                            local function distance(p1, p2)\n         \
    \                       local function distance(p1, p2)\n                    \
    \                local function distance(p1, p2)\n                           \
    \             local function distance(p1, p2)\n                              \
    \              local function distance(p1, p2)\n                             \
    \                   local function distance(p1, p2)\n                        \
    \                            local function distance(p1, p2)\n               \
    \                                         local function distance(p1, p2)\n  \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local function distance(p1, p2)\n        -- The distance between\
    \ two planets is given by the distance between \n        -- the orbit of planet1\
    \ and the orbit of planet2. \n        -- The distance is given by the distance\
    \ between the orbit of planet1 \n        -- and the orbit of planet2, divided\
    \ by the distance between the \n        -- orbit of planet1 and the orbit of planet1.\n\
    \        local function distance(p1, p2)\n            -- The distance between\
    \ two planets is given by the distance between \n            -- the orbit of planet1\
    \ and the orbit of planet2. \n            -- The distance is given by the distance\
    \ between the orbit of planet1 \n            -- and the orbit of planet2, divided\
    \ by the distance between the \n            -- orbit of planet1 and the orbit\
    \ of planet1.\n            local function distance(p1, p2)\n                --\
    \ The distance between two planets is given by the distance between \n       \
    \         -- the orbit of planet1 and the orbit of planet2. \n               \
    \ -- The distance is given by the distance between the orbit of planet1 \n   \
    \             -- and the orbit of planet2, divided by the distance between the\
    \ \n                -- orbit of planet1 and the orbit of planet1.\n          \
    \      local function distance(p1, p2)\n                    -- The distance between\
    \ two planets is given by the distance between \n                    -- the orbit\
    \ of planet1 and the orbit of planet2. \n                    -- The distance is\
    \ given by the distance between the orbit of planet1 \n                    --\
    \ and the orbit of planet2, divided by the distance between the \n           \
    \         -- orbit of planet1 and the orbit of planet1.\n                    local\
    \ function distance(p1, p2)\n                        -- The distance between two\
    \ planets is given by the distance between \n                        -- the orbit\
    \ of planet1 and the orbit of planet2. \n                        -- The distance\
    \ is given by the distance between the orbit of planet1 \n                   \
    \     -- and the orbit of planet2, divided by the distance between the \n    \
    \                    -- orbit of planet1 and the orbit of planet1.\n         \
    \               local function distance(p1, p2)\n                            --\
    \ The distance between two planets is given by the distance between \n       \
    \                     -- the orbit of planet1 and the orbit of planet2. \n   \
    \                         -- The distance is given by the distance between the\
    \ orbit of planet1 \n                            -- and the orbit of planet2,\
    \ divided by the distance between the \n                            -- orbit of\
    \ planet1 and the orbit of planet1.\n                            local function\
    \ distance(p1, p2)\n                                -- The distance ", "    local\
    \ function distance(p1, p2)\n        local function distance(p1, p2)\n       \
    \     local function distance(p1, p2)\n                local function distance(p1,\
    \ p2)\n                    local function distance(p1, p2)\n                 \
    \       local function distance(p1, p2)\n                            local function\
    \ distance(p1, p2)\n                                local function distance(p1,\
    \ p2)\n                                    local function distance(p1, p2)\n \
    \                                       local function distance(p1, p2)\n    \
    \                                        local function distance(p1, p2)\n   \
    \                                             local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(planet1,\
    \ planet2)\n        -- TODO: Implement the distance function here\n    end\n \
    \   local function sort_by_distance(planet1, planet2)\n        -- TODO: Implement\
    \ the sort_by_distance function here\n    end\n    local function get_planets(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planets function here\n    end\n\
    \    local function get_planet_orbits(planet1, planet2)\n        -- TODO: Implement\
    \ the get_planet_orbits() function here\n    end\n    local function get_planet_orbits_sorted(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted() function\
    \ here\n    end\n    local function get_planet_orbits_sorted_by_distance(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted_by_distance()\
    \ \n        -- function here\n    end\n    local function get_planet_orbits_sorted_by_distance_sorted(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted_by_distance_sorted()\
    \ \n        -- function here\n    end\n    local function get_planet_orbits_sorted_by_distance_sorted_by_distance(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted_by_distance_sorted_by_distance()\
    \ \n        -- function here\n    end\n    local function get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted()\
    \ \n        -- function here\n    end\n    local function get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted_by_distance(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted_by_distance()\
    \ \n        -- function here\n    end\n    local function get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted()\
    \ \n        -- function here\n    end\n    local function get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance(planet1,\
    \ planet2)\n        -- TODO: Implement the get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance()\
    \ \n        -- function here\n    end\n    local function get_planet_orbits_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted_by_distance_sorted(planet1,\
    \ planet2)\n        -- TODO: Implement the ", "    local function distance(a,b)\n\
    \        return math.sqrt(math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2))\n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance2(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance3(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance4(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance5(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance6(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance7(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance8(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance9(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance10(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n", "    local function\
    \ distance(planet1, planet2)\n        -- TODO: Write a function that calculates\
    \ the distance between two planets\n        -- The function should take two planet\
    \ names as strings and return their \n        -- distance in AU.\n        -- The\
    \ function should return 0 if the two planets are not correct planet \n      \
    \  -- names.\n        -- The function should return nil if planet1 or planet2\
    \ are not correct \n        -- planet names.\n        -- The function should return\
    \ nil if planet1 or planet2 are not correct \n        -- planet names.\n     \
    \   -- The function should return nil if planet1 or planet2 are not correct \n\
    \        -- planet names.\n        -- The function should return nil if planet1\
    \ or planet2 are not correct \n        -- planet names.\n        -- The function\
    \ should return nil if planet1 or planet2 are not correct \n        -- planet\
    \ names.\n        -- The function should return nil if planet1 or planet2 are\
    \ not correct \n        -- planet names.\n        -- The function should return\
    \ nil if planet1 or planet2 are not correct \n        -- planet names.\n     \
    \   -- The function should return nil if planet1 or planet2 are not correct \n\
    \        -- planet names.\n        -- The function should return nil if planet1\
    \ or planet2 are not correct \n        -- planet names.\n        -- The function\
    \ should return nil if planet1 or planet2 are not correct \n        -- planet\
    \ names.\n        -- The function should return nil if planet1 or planet2 are\
    \ not correct \n        -- planet names.\n        -- The function should return\
    \ nil if planet1 or planet2 are not correct \n        -- planet names.\n     \
    \   -- The function should return nil if planet1 or planet2 are not correct \n\
    \        -- planet names.\n        -- The function should return nil if planet1\
    \ or planet2 are not correct \n        -- planet names.\n        -- The function\
    \ should return nil if planet1 or planet2 are not correct \n        -- planet\
    \ names.\n        -- The function should return nil if planet1 or planet2 are\
    \ not correct \n        -- planet names.\n        -- The function should return\
    \ nil if planet1 or planet2 are not correct \n        -- planet names.\n     \
    \   -- The function should return nil if planet1 or planet2 are not correct \n\
    \        -- planet names.\n        -- The function should return nil if planet1\
    \ or planet2 are not correct \n        -- planet names.\n        -- The function\
    \ should return nil", "    local function dist(planet1, planet2)\n        -- TODO:\
    \ Implement the distance function here\n    end\n    local function compare(planet1,\
    \ planet2)\n        -- TODO: Implement the compare function here\n    end\n  \
    \  local function compare2(planet1, planet2)\n        -- TODO: Implement the compare2\
    \ function here\n    end\n    local function compare3(planet1, planet2)\n    \
    \    -- TODO: Implement the compare3 function here\n    end\n    local function\
    \ compare4(planet1, planet2)\n        -- TODO: Implement the compare4 function\
    \ here\n    end\n    local function compare5(planet1, planet2)\n        -- TODO:\
    \ Implement the compare5 function here\n    end\n    local function compare6(planet1,\
    \ planet2)\n        -- TODO: Implement the compare6 function here\n    end\n \
    \   local function compare7(planet1, planet2)\n        -- TODO: Implement the\
    \ compare7 function here\n    end\n    local function compare8(planet1, planet2)\n\
    \        -- TODO: Implement the compare8 function here\n    end\n    local function\
    \ compare9(planet1, planet2)\n        -- TODO: Implement the compare9 function\
    \ here\n    end\n    local function compare10(planet1, planet2)\n        -- TODO:\
    \ Implement the compare10 function here\n    end\n    local function compare11(planet1,\
    \ planet2)\n        -- TODO: Implement the compare11 function here\n    end\n\
    \    local function compare12(planet1, planet2)\n        -- TODO: Implement the\
    \ compare12 function here\n    end\n    local function compare13(planet1, planet2)\n\
    \        -- TODO: Implement the compare13 function here\n    end\n    local function\
    \ compare14(planet1, planet2)\n        -- TODO: Implement the compare14 function\
    \ here\n    end\n    local function compare15(planet1, planet2)\n        -- TODO:\
    \ Implement the compare15 function here\n    end\n    local function compare16(planet1,\
    \ planet2)\n        -- TODO: Implement the compare16 function here\n    end\n\
    \    local function compare17(planet1, planet2)\n        -- TODO: Implement the\
    \ compare17 function here\n    end\n    local function compare18(planet1, planet2)\n\
    \        -- TODO: Implement the compare18 function here\n    end\n    local function\
    \ compare19(planet1, planet2)\n        -- TODO: Implement the compare19 function\
    \ here\n    end\n    local function compare20(planet1, planet2)\n        -- TODO:\
    \ Implement the compare20 function here", "    local planets = {\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ planet1 = planets[planet1]\n    local planet2 = planets[planet2]\n    local\
    \ sun = math.rad(math.pi/2)\n    local orbit1 = {\n        rad = math.rad(planet1),\n\
    \        dist = math.rad(planet1)\n    }\n    local orbit2 = {\n        rad =\
    \ math.rad(planet2),\n        dist = math.rad(planet2)\n    }\n    local orbits\
    \ = { orbit1, orbit2 }\n    local suns = {\n        rad = math.rad(sun),\n   \
    \     dist = math.rad(sun)\n    }\n    local orbit, sun = nil, nil\n    for i\
    \ = 1, #orbits, 1 do\n        local dist = math.rad(orbits[i].rad)\n        if\
    \ dist < suns.rad then\n            suns.rad = dist\n            suns.dist = dist\n\
    \            orbit = orbits[i]\n        end\n    end\n    return orbit, suns\n\
    end", "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n     \
    \   \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n\
    \        \"Uranus\",\n        \"Neptune\"\n    }\n    local planet1 = planets[planet1]\n\
    \    local planet2 = planets[planet2]\n    local sun = math.rad(math.pi/2)\n \
    \   local orbit1 = {\n        rad = math.rad(planet1),\n        dist = math.rad(planet1)\n\
    \    }\n    local orbit2 = {\n        rad = math.rad(planet2),\n        dist =\
    \ math.rad(planet2)\n    }\n    local orbits = {\n        orbit1,\n        orbit2\n\
    \    }\n    local sun_dist = math.rad(sun)\n    local orbit1_dist = math.rad(orbit1.rad)\n\
    \    local orbit2_dist = math.rad(orbit2.rad)\n    local orbit1_dist = math.rad(orbit1.dist)\n\
    \    local orbit2_dist = math.rad(orbit2.dist)\n    local orbit1_dist = math.rad(orbit1.rad)\n\
    \    local orbit2_dist = math.rad(orbit2.rad)\n    local orbit1_dist = math.rad(orbit1.dist)\n\
    \    local orbit2_dist = math.rad(orbit2.dist)\n    local orbit1_dist = math.rad(orbit1.rad)\n\
    \    local orbit2_dist = math.rad(orbit2.rad)\n    local orbit1_dist = math.rad(orbit1.dist)\n\
    \    local orbit2_dist = math.rad(orbit2.dist)\n    local orbit1_dist = math.rad(orbit1.rad)\n\
    \    local orbit2_dist = math.rad(orbit2.rad)\n    local orbit1_dist = math.rad(orbit1.dist)\n\
    \    local orbit2_dist = math.rad(orbit2.dist)\n    local orbit1_dist = math.rad(orbit1.rad)\n\
    \    local orbit2_dist = math.rad(orbit2.rad)\n    local orbit1_dist = math.rad(orbit1.dist)\n\
    \    local orbit2_dist = math.rad(orbit2.dist)\n    local orbit1_dist = math.rad(orbit1.rad)\n\
    \    local orbit2_dist = math.rad(orbit2.rad)\n    local orbit1_dist = math.rad(orbit1.dist)\n\
    \    local orbit2_dist = math.rad(orbit2.dist)\n    local orbit1_dist = math.rad(orbit1.rad)\n\
    \    local orbit2_dist = math.rad(orbit2.rad)\n    local orbit1_dist = math.rad(orbit1.dist)\n\
    \    local orbit2_dist = math.rad(orbit", "    local function distance(a,b)\n\
    \        return math.sqrt(math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2))\n\
    \    end\n    local function distance2(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance3(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance4(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance5(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance6(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance7(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance8(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance9(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance10(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance11(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance12(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance13(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance14(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2)\n\
    \    end\n    local function distance15(a,b)\n        return math.pow(a.x-b.x,2)+math.pow(a.y-b.",
  "    local function distance(p1, p2)\n        -- The distance between two planets\
    \ is given by the distance \n        -- between their orbits.\n        return\
    \ math.abs(p1.orbit.time - p2.orbit.time)\n    end\n    local function sortByDistance(planet1,\
    \ planet2)\n        -- The planets are sorted by their distance to the sun.\n\
    \        return distance(planet1, planet2)\n    end\n    local function sortByOrbit(planet1,\
    \ planet2)\n        -- The planets are sorted by their orbits.\n        return\
    \ planet1.orbit.time - planet2.orbit.time\n    end\n    local function sortByName(planet1,\
    \ planet2)\n        -- The planets are sorted by their names.\n        return\
    \ planet1.name < planet2.name\n    end\n    local function sortByDistanceAndOrbit(planet1,\
    \ planet2)\n        -- The planets are sorted by their distance to the sun and\
    \ \n        -- their orbits.\n        return sortByDistance(planet1, planet2),\
    \ sortByOrbit(planet1, planet2)\n    end\n    local function sortByDistanceAndName(planet1,\
    \ planet2)\n        -- The planets are sorted by their distance to the sun and\
    \ \n        -- their names.\n        return sortByDistance(planet1, planet2),\
    \ sortByName(planet1, planet2)\n    end\n    local function sortByOrbitAndName(planet1,\
    \ planet2)\n        -- The planets are sorted by their orbits and names.\n   \
    \     return sortByOrbit(planet1, planet2), sortByName(planet1, planet2)\n   \
    \ end\n    local function sortByDistanceAndOrbitAndName(planet1, planet2)\n  \
    \      -- The planets are sorted by their distance to the sun and \n        --\
    \ their orbits and names.\n        return sortByDistanceAndOrbit(planet1, planet2),\
    \ sortByName(planet1, planet2)\n    end\n    local function sortByDistanceAndOrbitAndNameAndTime(planet1,\
    \ planet2)\n        -- The planets are sorted by their distance to the sun and\
    \ \n        -- their orbits and names and their orbits.\n        return sortByDistanceAndOrbit(planet1,\
    \ planet2), sortByName(planet1, planet2), sortByOrbit(planet1, planet2)\n    end\n\
    \    local function sortByDistanceAndOrbitAndNameAndTimeAndRadius(planet1, planet2)\n\
    \        -- The planets are sorted by their distance ", "    local function dist(planet1,\
    \ planet2)\n        local function dist(planet1, planet2)\n            local function\
    \ dist(planet1, planet2)\n                local function dist(planet1, planet2)\n\
    \                    local function dist(planet1, planet2)\n                 \
    \       local function dist(planet1, planet2)\n                            local\
    \ function dist(planet1, planet2)\n                                local function\
    \ dist(planet1, planet2)\n                                    local function dist(planet1,\
    \ planet2)\n                                        local function dist(planet1,\
    \ planet2)\n                                            local function dist(planet1,\
    \ planet2)\n                                                local function dist(planet1,\
    \ planet2)\n                                                    local function\
    \ dist(planet1, planet2)\n                                                   \
    \     local function dist(planet1, planet2)\n                                \
    \                            local function dist(planet1, planet2)\n         \
    \                                                       local function dist(planet1,\
    \ planet2)\n                                                                 \
    \   local function dist(planet1, planet2)\n                                  \
    \                                      local function dist(planet1, planet2)\n\
    \                                                                            local\
    \ function dist(planet1, planet2)\n                                          \
    \                                      local function dist(planet1, planet2)\n\
    \                                                                            \
    \        local function dist(planet1, planet2)\n                             \
    \                                                           local function dist(planet1,\
    \ planet2)\n                                                                 \
    \                           local function dist(planet1, planet2)\n          \
    \                                                                            \
    \          local function dist(planet1, planet2)\n                           \
    \                                                                         local\
    \ function dist(planet1, planet2)\n                                          \
    \                                                              local function\
    \ dist(planet1, planet2)\n                                                   \
    \                                                         local function dist(planet1,\
    \ planet2)\n                                                                 \
    \                                               local function dist(planet1, planet2)\n\
    \                                                                            \
    \                                        local function dist(planet1, planet2)\n\
    \                                                                            \
    \                                            local function dist(planet1, planet2)\n\
    \                                                                            \
    \                                                local function dist(planet1,\
    \ planet2)\n                                                                 \
    \                                                               local function\
    \ dist(planet1, planet2)\n                                                   \
    \                                                                            \
    \     local function dist(planet1, planet2)\n                                \
    \                                                                            \
    \                            local function dist(planet1, planet2)\n         \
    \                                                                            \
    \                                                       local function dist(planet1,\
    \ planet2)\n                                                                 \
    \                                                                            \
    \   local function dist(planet1, planet2)\n                                  \
    \                                                                            \
    \                                      local function dist(planet1, planet2)\n\
    \                                                                            \
    \                                                                            local\
    \ function dist(planet1, planet2)\n                                          \
    \                                                                            \
    \                                      local function dist(planet1, planet2)\n\
    \                                                                            \
    \                                                                            \
    \        local function dist(planet1, planet2)\n", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2 + (a.y-b.y)^2 + (a.z-b.z)^2)\n    end\n\
    \    local function sortByDistance(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance2(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance3(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance4(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance5(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance6(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance7(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance8(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance9(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance10(a,b)\n        return distance(a,b) \n   \
    \ end\n    local function sortByDistance11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n        return distance(a,b",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\",\n    }\n    local function distance(planet1, planet2)\n\
    \        local distance = math.sqrt((planet1.x - planet2.x)^2 + (planet1.y - planet2.y)^2\
    \ + (planet1.z - planet2.z)^2)\n        return distance\n    end\n    local function\
    \ orbit(planet1, planet2)\n        local distance = distance(planet1, planet2)\n\
    \        local planet = {\n            x = planet1.x + distance * math.cos(planet1.theta),\n\
    \            y = planet1.y + distance * math.sin(planet1.theta),\n           \
    \ z = planet1.z,\n            theta = planet1.theta + math.acos((planet1.x - planet2.x)\
    \ / (distance * distance)),\n        }\n        return planet\n    end\n    local\
    \ function sortByProximity(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        local planet = {\n            x = planet1.x + distance * math.cos(planet1.theta),\n\
    \            y = planet1.y + distance * math.sin(planet1.theta),\n           \
    \ z = planet1.z,\n            theta = planet1.theta + math.acos((planet1.x - planet2.x)\
    \ / (distance * distance)),\n        }\n        return planet\n    end\n    local\
    \ function sortByProximity2(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        local planet = {\n            x = planet1.x + distance * math.cos(planet1.theta),\n\
    \            y = planet1.y + distance * math.sin(planet1.theta),\n           \
    \ z = planet1.z,\n            theta = planet1.theta + math.acos((planet1.x - planet2.x)\
    \ / (distance * distance)),\n        }\n        return planet\n    end\n    local\
    \ function sortByProximity3(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        local planet = {\n            x = planet1.x + distance * math.cos(planet1.theta),\n\
    \            y = planet1.y + distance * math.sin(planet1.theta),\n           \
    \ z = planet1.z,\n            theta = planet1.theta + math.acos((planet1.x - planet2.x)\
    \ / (distance * distance)),\n        }\n        return planet\n    end\n    local\
    \ function sortBy", "    local function distance(x, y)\n        return math.sqrt(math.pow((x\
    \ - y), 2))\n    end\n    local function compare(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow((x - y), 2))\n    end\n    local function compare(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow((x - y), 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function distance(x, y)\n        return math.sqrt(math.pow((x - y), 2))\n\
    \    end\n    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function distance(x, y)\n        return math.sqrt(math.pow((x\
    \ - y), 2))\n    end\n    local function compare(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow((x - y), 2))\n    end\n    local function compare(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow((x - y), 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function distance(x, y)\n        return math.sqrt(math.pow((x - y), 2))\n\
    \    end\n    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function distance(x, y)\n        return math.sqrt(math.pow((x\
    \ - y), 2))\n    end\n    local function compare(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow((x - y), 2))\n    end\n    local function compare(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow((x - y), 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function distance(x, y)\n        return math.sqrt(math.pow((x - y), 2))\n\
    \    end\n    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function distance(x, y)\n        return math.sqrt(math.pow((x\
    \ - y), 2))\n    end\n    local function compare(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow((x - y), 2))\n    end\n    local function compare(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow((x - y), 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local ", "    local function distance(p1, p2)\n        local function distance(p1,\
    \ p2)\n            local function distance(p1, p2)\n                local function\
    \ distance(p1, p2)\n                    local function distance(p1, p2)\n    \
    \                    local function distance(p1, p2)\n                       \
    \     local function distance(p1, p2)\n                                local function\
    \ distance(p1, p2)\n                                    local function distance(p1,\
    \ p2)\n                                        local function distance(p1, p2)\n\
    \                                            local function distance(p1, p2)\n\
    \                                                local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    return distance\nend",
  "    local function distance(p1, p2)\n        -- The distance between two planets\
    \ is given by the distance \n        -- between their orbits.\n        local function\
    \ distance(p1, p2)\n            -- The distance between two planets is given by\
    \ the distance \n            -- between their orbits.\n            local function\
    \ distance(p1, p2)\n                -- The distance between two planets is given\
    \ by the distance \n                -- between their orbits.\n               \
    \ local function distance(p1, p2)\n                    -- The distance between\
    \ two planets is given by the distance \n                    -- between their\
    \ orbits.\n                    local function distance(p1, p2)\n             \
    \           -- The distance between two planets is given by the distance \n  \
    \                      -- between their orbits.\n                        local\
    \ function distance(p1, p2)\n                            -- The distance between\
    \ two planets is given by the distance \n                            -- between\
    \ their orbits.\n                            local function distance(p1, p2)\n\
    \                                -- The distance between two planets is given\
    \ by the distance \n                                -- between their orbits.\n\
    \                                local function distance(p1, p2)\n           \
    \                         -- The distance between two planets is given by the\
    \ distance \n                                    -- between their orbits.\n  \
    \                                  local function distance(p1, p2)\n         \
    \                               -- The distance between two planets is given by\
    \ the distance \n                                        -- between their orbits.\n\
    \                                        local function distance(p1, p2)\n   \
    \                                         -- The distance between two planets\
    \ is given by the distance \n                                            -- between\
    \ their orbits.\n                                            local function distance(p1,\
    \ p2)\n                                                -- The distance between\
    \ two planets is given by the distance \n                                    \
    \            -- between their orbits.\n                                      \
    \          local function distance(p1, p2)\n                                 \
    \                   -- The distance between two planets is given by the distance\
    \ \n                                                    -- between their orbits.\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        -- The distance\
    \ between two planets is given by the distance \n                            \
    \                            -- between their orbits.\n                      \
    \                                  local function distance(p1, p2)\n         \
    \                                                   -- The distance between two\
    \ planets is given by the distance \n                                        \
    \                    -- between their orbits.\n                              \
    \                              local function distance(p1, p2)\n             \
    \                                                   -- The distance between two\
    \ planets is given by the distance \n                                        \
    \                        -- between their orbits.\n                          \
    \                                      local function distance(p1, p2)\n     \
    \                                                               -- The distance\
    \ between two planets is given by the distance \n                            \
    \                                        -- between their orbits.\n          \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                      \
    \  -- The distance between two planets is given by the distance \n           \
    \                                                             -- between their\
    \ orbits.\n                                                                  \
    \      local function distance(p1, p2)\n                                     \
    \                                       -- The distance between two planets is\
    \ given by the distance \n                                                   \
    \                         -- between their orbits.\n                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \          -- The distance between two planets is ", "    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function sort_by_proximity(planet1, planet2)\n        local function sort_by_proximity_helper(planet1,\
    \ planet2)\n            local orbit1 = get_orbit(planet1)\n            local orbit2\
    \ = get_orbit(planet2)\n            local orbit1_sun = get_orbit(\"Sun\")\n  \
    \          local orbit2_sun = get_orbit(\"Sun\")\n            local orbit1_planet1\
    \ = get_orbit(planet1)\n            local orbit2_planet1 = get_orbit(planet1)\n\
    \            local orbit1_planet2 = get_orbit(planet2)\n            local orbit2_planet2\
    \ = get_orbit(planet2)\n            local orbit1_sun_planet1 = get_orbit(\"Sun\"\
    , planet1)\n            local orbit2_sun_planet1 = get_orbit(\"Sun\", planet1)\n\
    \            local orbit1_sun_planet2 = get_orbit(\"Sun\", planet2)\n        \
    \    local orbit2_sun_planet2 = get_orbit(\"Sun\", planet2)\n            local\
    \ orbit1_planet1_sun = get_orbit(planet1, get_orbit(\"Sun\"))\n            local\
    \ orbit2_planet1_sun = get_orbit(planet2, get_orbit(\"Sun\"))\n            local\
    \ orbit1_planet2_sun = get_orbit(planet1, get_orbit(\"Sun\", planet2))\n     \
    \       local orbit2_planet2_sun = get_orbit(planet2, get_orbit(\"Sun\", planet2))\n\
    \            local orbit1_planet1_planet2 = get_orbit(planet1, get_orbit(planet2))\n\
    \            local orbit2_planet1_planet2 = get_orbit(planet2, get_orbit(planet2))\n\
    \            local orbit1_planet2_planet1 = get_orbit(planet1, get_orbit(planet2))\n\
    \            local orbit2_planet2_planet1 = get_orbit(planet2, get_orbit(planet2))\n\
    \            local orbit1_planet1_planet2_sun = get_orbit(planet1, get_orbit(\"\
    Sun\", planet2))\n            local orbit2_planet1_planet2_sun = get_orbit(planet2,\
    \ get_orbit(\"Sun\", planet2))\n            local orbit1_planet2_planet2_sun =\
    \ get_orbit(planet1, get_orbit(\"Sun\", planet2))\n            local orbit2_planet2_planet2_sun\
    \ = get_orbit(planet2, get_orbit", "    local function distance(x, y)\n      \
    \  return math.sqrt(math.pow(x-y, 2))\n    end\n    local function sortByProximity(planet1,\
    \ planet2)\n        local distances = {}\n        for i=1,8 do\n            distances[i]\
    \ = distance(planet1, planet2)\n        end\n        table.sort(distances, function(a,b)\
    \ return distances[a] < distances[b] end)\n        return distances\n    end\n\
    \    return sortByProximity(planet1, planet2)\nend", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function distance2(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2)\n\
    \    end\n    local function distance3(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance4(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance5(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance6(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance7(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance8(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance9(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance10(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance11(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance12(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance13(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance14(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance15(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance16(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance17(a,b)", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function sortByDistance(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance2(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance3(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance4(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance5(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance6(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance7(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance8(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance9(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance10(a,b)\n        return distance(a,b) \n    end\n   \
    \ local function sortByDistance11(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance12(a,b)\n        return distance(a,b) \n   \
    \ end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n        return distance(a,b",
  "    local function distance(planet1, planet2)\n        -- TODO: Write a function\
    \ that calculates the distance between two planets\n        -- The function should\
    \ take two planet names as strings as arguments and \n        -- return their\
    \ distance in meters.\n        -- The function should return 0 if the planets\
    \ are not correct planet names.\n        -- The function should return nil if\
    \ the planets are the same planet.\n        -- The function should return nil\
    \ if the planets are the same planet but \n        -- their orbits do not intersect.\n\
    \        -- The function should return nil if the planets are the same planet\
    \ but \n        -- their orbits do not intersect.\n        -- The function should\
    \ return nil if the planets are the same planet but \n        -- their orbits\
    \ do not intersect.\n        -- The function should return nil if the planets\
    \ are the same planet but \n        -- their orbits do not intersect.\n      \
    \  -- The function should return nil if the planets are the same planet but \n\
    \        -- their orbits do not intersect.\n        -- The function should return\
    \ nil if the planets are the same planet but \n        -- their orbits do not\
    \ intersect.\n        -- The function should return nil if the planets are the\
    \ same planet but \n        -- their orbits do not intersect.\n        -- The\
    \ function should return nil if the planets are the same planet but \n       \
    \ -- their orbits do not intersect.\n        -- The function should return nil\
    \ if the planets are the same planet but \n        -- their orbits do not intersect.\n\
    \        -- The function should return nil if the planets are the same planet\
    \ but \n        -- their orbits do not intersect.\n        -- The function should\
    \ return nil if the planets are the same planet but \n        -- their orbits\
    \ do not intersect.\n        -- The function should return nil if the planets\
    \ are the same planet but \n        -- their orbits do not intersect.\n      \
    \  -- The function should return nil if the planets are the same planet but \n\
    \        -- their orbits do not intersect.\n        -- The function should return\
    \ nil if the planets are the same planet but \n        -- their orbits do not\
    \ intersect.\n        -- The function should return nil if the planets are the\
    \ same planet but \n        -- their orbits do not intersect.\n        -- The\
    \ function should return nil if the planets are the same planet but \n       \
    \ -- their orbits do not intersect.\n        -- The function should return nil\
    \ if the planets are the same planet but ", "    local function distance(x, y)\n\
    \        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function compare(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ f1(planet1, planet2)\n        local planets = {planet1, planet2}\n        local\
    \ planet1 = planets[1]\n        local planet2 = planets[2]\n        local orbit1\
    \ = {x = 0, y = 0, z = 0}\n        local orbit2 = {x = 0, y = 0, z = 0}\n    \
    \    for i = 1, #planets do\n            local planet = planets[i]\n         \
    \   local planet = planet:lower()\n            if planet == \"mercury\" then\n\
    \                orbit1.x = orbit1.x + 1\n                orbit1.y = orbit1.y\
    \ + 1\n                orbit1.z = orbit1.z + 1\n            elseif planet == \"\
    venus\" then\n                orbit2.x = orbit2.x + 1\n                orbit2.y\
    \ = orbit2.y + 1\n                orbit2.z = orbit2.z + 1\n            elseif\
    \ planet == \"earth\" then\n                orbit1.x = orbit1.x + 1\n        \
    \        orbit1.y = orbit1.y + 1\n                orbit1.z = orbit1.z + 1\n  \
    \              orbit2.x = orbit2.x + 1\n                orbit2.y = orbit2.y +\
    \ 1\n                orbit2.z = orbit2.z + 1\n            elseif planet == \"\
    mars\" then\n                orbit1.x = orbit1.x + 1\n                orbit1.y\
    \ = orbit1.y + 1\n                orbit1.z = orbit1.z + 1\n                orbit2.x\
    \ = orbit2.x + 1\n                orbit2.y = orbit2.y + 1\n                orbit2.z\
    \ = orbit2.z + 1\n            elseif planet == \"jupiter\" then\n            \
    \    orbit1.x = orbit1.x + 1\n                orbit1.y = orbit1.y + 1\n      \
    \          orbit1.z = orbit1.z + 1\n                orbit2.x = orbit2.x + 1\n\
    \                orbit2.y = orbit2.y + 1\n                orbit2.z = orbit2.z\
    \ + 1\n            elseif planet == \"saturn\" then\n                orbit1.x\
    \ = orbit1.x + 1\n                orbit1.y = orbit1.y + 1\n                orbit1.z\
    \ = orbit1.z + 1\n                orbit2.x = orbit2.x + 1\n                orbit2.y\
    \ = orbit2.y + 1\n                orbit2.z = orbit2.z + 1\n            elseif\
    \ planet == \"uranus\" then\n                orbit1.x = orbit1.x + 1\n       \
    \         orbit1.y = orbit1.y + 1\n                orbit1.z = orbit1.z + 1\n \
    \               orbit2.x = orbit2.x + 1\n", "    local function distance(p1, p2)\n\
    \        -- The distance between two planets is given by the distance \n     \
    \   -- between the orbit of planet1 and the orbit of planet2.\n        -- The\
    \ orbit of planet1 is the orbit of planet1 plus the \n        -- planet's orbital\
    \ period.\n        local function orbit(p1, p2)\n            local function distance(p1,\
    \ p2)\n                -- The distance between two planets is given by the distance\
    \ \n                -- between the orbit of planet1 and the orbit of planet2.\n\
    \                -- The orbit of planet1 is the orbit of planet1 plus the \n \
    \               -- planet's orbital period.\n                local function orbit(p1,\
    \ p2)\n                    -- The distance between two planets is given by the\
    \ distance \n                    -- between the orbit of planet1 and the orbit\
    \ of planet2.\n                    -- The orbit of planet1 is the orbit of planet1\
    \ plus the \n                    -- planet's orbital period.\n               \
    \     local function distance(p1, p2)\n                        -- The distance\
    \ between two planets is given by the distance \n                        -- between\
    \ the orbit of planet1 and the orbit of planet2.\n                        -- The\
    \ orbit of planet1 is the orbit of planet1 plus the \n                       \
    \ -- planet's orbital period.\n                        local function orbit(p1,\
    \ p2)\n                            -- The distance between two planets is given\
    \ by the distance \n                            -- between the orbit of planet1\
    \ and the orbit of planet2.\n                            -- The orbit of planet1\
    \ is the orbit of planet1 plus the \n                            -- planet's orbital\
    \ period.\n                            local function distance(p1, p2)\n     \
    \                           -- The distance between two planets is given by the\
    \ distance \n                                -- between the orbit of planet1 and\
    \ the orbit of planet2.\n                                -- The orbit of planet1\
    \ is the orbit of planet1 plus the \n                                -- planet's\
    \ orbital period.\n                                local function orbit(p1, p2)\n\
    \                                    -- The distance between two planets is given\
    \ by the distance \n                                    -- between the orbit of\
    \ planet1 and the orbit of planet2.\n                                    -- The\
    \ orbit of planet1 is the orbit of planet1 plus the \n                       \
    \             -- planet's orbital period.\n                                  \
    \  local function distance(p1, p2)\n                                        --\
    \ The distance between two planets is given by the distance \n               \
    \                         -- between the orbit of planet1 and the orbit of planet2.\n\
    \                                        -- The orbit ", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function orbit(a,b)\n        return distance(a,b) <= math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function sort_by_proximity(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity2(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity3(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity4(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity5(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity6(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity7(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity8(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity9(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity10(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sort_by_proximity24(a,b)", "    local function\
    \ distance(planet1, planet2)\n        -- Write your code here\n    end\n    local\
    \ function compare(planet1, planet2)\n        -- Write your code here\n    end\n\
    \    return table.sort(orbits, compare)\nend", "    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function\
    \ sortByProximity(planet1, planet2)\n        local distances = {}\n        for\
    \ i=1,8 do\n            distances[i] = distance(planet1, planet2)\n        end\n\
    \        table.sort(distances, function(a, b) return distances[a] < distances[b]\
    \ end)\n        return distances\n    end\n    return sortByProximity(planet1,\
    \ planet2)\nend", "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function sortByDistance(planet1, planet2)\n        local\
    \ planet1Orbit, planet2Orbit = orbit(planet1), orbit(planet2)\n        local sunOrbit\
    \ = orbit(\"sun\")\n        local planet1Distance = distance(planet1Orbit[1],\
    \ sunOrbit[1])\n        local planet2Distance = distance(planet2Orbit[1], sunOrbit[1])\n\
    \        local planet1Proximity = planet1Distance - planet2Distance\n        local\
    \ planet2Proximity = planet2Distance - planet1Distance\n        if planet1Proximity\
    \ < planet2Proximity then\n            return planet1\n        else\n        \
    \    return planet2\n        end\n    end\n    return sortByDistance(planet1,\
    \ planet2)\nend", "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function compare(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function f(x, y)\n        return compare(x,\
    \ y)\n    end\n    local function g(x, y)\n        return compare(y, x)\n    end\n\
    \    local function h(x, y)\n        return compare(x, y)\n    end\n    local\
    \ function i(x, y)\n        return compare(x, y)\n    end\n    local function\
    \ j(x, y)\n        return compare(x, y)\n    end\n    local function k(x, y)\n\
    \        return compare(x, y)\n    end\n    local function l(x, y)\n        return\
    \ compare(x, y)\n    end\n    local function m(x, y)\n        return compare(x,\
    \ y)\n    end\n    local function n(x, y)\n        return compare(x, y)\n    end\n\
    \    local function o(x, y)\n        return compare(x, y)\n    end\n    local\
    \ function p(x, y)\n        return compare(x, y)\n    end\n    local function\
    \ q(x, y)\n        return compare(x, y)\n    end\n    local function r(x, y)\n\
    \        return compare(x, y)\n    end\n    local function s(x, y)\n        return\
    \ compare(x, y)\n    end\n    local function t(x, y)\n        return compare(x,\
    \ y)\n    end\n    local function u(x, y)\n        return compare(x, y)\n    end\n\
    \    local function v(x, y)\n        return compare(x, y)\n    end\n    local\
    \ function w(x, y)\n        return compare(x, y)\n    end\n    local function\
    \ x(x, y)\n        return compare(x, y)\n    end\n    local function y(x, y)\n\
    \        return compare(x, y)\n    end\n    local function z(x, y)\n        return\
    \ compare(x, y)\n    end\n    local function a(x, y)\n        return compare(x,\
    \ y)\n    end\n    local function b(x, y)\n        return compare(x, y)\n    end\n\
    \    local function c(x, y)\n        return compare(x, y)\n    end\n    local\
    \ function d(x, y)\n        return compare(x, y)\n    end\n    local function\
    \ e(x, y)\n        return compare(x, y)\n    end\n    local function f(x, y)\n\
    \        return compare(x, y)\n    end\n    local function g(x, y)\n        return\
    \ compare(x, y)\n    end\n    local function h(x, y)\n        return compare(x,\
    \ y)\n    end\n    local function i(x, y)\n        return compare(x, y)\n    end\n\
    \    local function j(x, y)\n        return compare(x, y)\n    end\n    local\
    \ function k(x, y)\n        return compare(x, y)\n    end\n    local function\
    \ l(x, y)\n        return compare(x, y)\n    end\n    local function m(x, y)\n\
    \        return compare(x, y)\n    end\n    local function n(x, y)\n        return\
    \ compare(x, y)\n    end\n    local function o(x, y)\n        return compare(x,\
    \ y)\n    end\n    local function p(x, y)\n        return compare(x, y)\n    end\n\
    \    local function q(x, y)\n        return compare(x, y)\n    end\n    local\
    \ function r(x, y)\n        return compare(x, y)\n    end\n    local function\
    \ s(x, y)\n        return compare(x, y)", "    local planets = {\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ function distance(planet1, planet2)\n        -- Your code here\n    end\n  \
    \  local function sort_by_proximity(planet1, planet2)\n        -- Your code here\n\
    \    end\n    return sort_by_proximity(planet1, planet2)\nend", "    local function\
    \ dist(planet1, planet2)\n        local function dist2(planet1, planet2)\n   \
    \         local function dist3(planet1, planet2)\n                local function\
    \ dist4(planet1, planet2)\n                    local function dist5(planet1, planet2)\n\
    \                        local function dist6(planet1, planet2)\n            \
    \                local function dist7(planet1, planet2)\n                    \
    \            local function dist8(planet1, planet2)\n                        \
    \            return 0\n                                end\n                 \
    \           end\n                        end\n                    end\n      \
    \          end\n            end\n        end\n    end\nend", "    local function\
    \ distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance2(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance3(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance4(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance5(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance6(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance7(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance8(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance9(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance10(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n        return distance(a,b",
  "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function sort_by_proximity(planet1, planet2)\n        local\
    \ function distance(x, y)\n            return math.sqrt(math.pow(x-y, 2))\n  \
    \      end\n        local function sort_by_proximity(planet1, planet2)\n     \
    \       local function distance(x, y)\n                return math.sqrt(math.pow(x-y,\
    \ 2))\n            end\n            local function sort_by_proximity(planet1,\
    \ planet2)\n                local function distance(x, y)\n                  \
    \  return math.sqrt(math.pow(x-y, 2))\n                end\n                local\
    \ function sort_by_proximity(planet1, planet2)\n                    local function\
    \ distance(x, y)\n                        return math.sqrt(math.pow(x-y, 2))\n\
    \                    end\n                    local function sort_by_proximity(planet1,\
    \ planet2)\n                        local function distance(x, y)\n          \
    \                  return math.sqrt(math.pow(x-y, 2))\n                      \
    \  end\n                        local function sort_by_proximity(planet1, planet2)\n\
    \                            local function distance(x, y)\n                 \
    \               return math.sqrt(math.pow(x-y, 2))\n                         \
    \   end\n                            local function sort_by_proximity(planet1,\
    \ planet2)\n                                local function distance(x, y)\n  \
    \                                  return math.sqrt(math.pow(x-y, 2))\n      \
    \                          end\n                                local function\
    \ sort_by_proximity(planet1, planet2)\n                                    local\
    \ function distance(x, y)\n                                        return math.sqrt(math.pow(x-y,\
    \ 2))\n                                    end\n                             \
    \       local function sort_by_proximity(planet1, planet2)\n                 \
    \                       local function distance(x, y)\n                      \
    \                      return math.sqrt(math.pow(x-y, 2))\n                  \
    \                      end\n                                        local function\
    \ sort_by_proximity(planet1, planet2)\n                                      \
    \      local function distance(x, y)\n                                       \
    \         return math.sqrt(math.pow(x-y, 2))\n                               \
    \             end\n                                            local function\
    \ sort_by_proximity(planet1, planet2)\n                                      \
    \          local function distance(x, y)\n                                   \
    \                 return math.sqrt(math.pow(x-y, 2))\n                       \
    \                         end\n                                              \
    \  local function sort_by_proximity(planet1, planet2)\n                      \
    \                              local function distance(x, y)\n               \
    \                                         return math.sqrt(math.pow(x-y, 2))\n\
    \                                                    end\n                   \
    \                                 local function sort_by_proximity(planet1, planet2)\n\
    \                                                        local function distance(x,\
    \ y)\n                                                            return math.sqrt(math.pow(x-y,\
    \ 2))\n                                                        end\n         \
    \                                               local function sort_by_proximity(planet1,\
    \ planet2)\n                                                            local\
    \ function distance(x, y)\n                                                  \
    \              return math.sqrt(math.pow(x-y, 2))\n                          \
    \                                  end\n                                     \
    \                       local function sort_by_proximity(planet1, planet2)\n \
    \                                                               local function\
    \ distance(x, y)\n                                                           \
    \         return math.sqrt(", "    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow((x - y), 2))\n    end\n    local function compare(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function sortByProximity(planet1,\
    \ planet2)\n        local function sortByDistance(x, y)\n            return distance(x,\
    \ y) < distance(y, x)\n        end\n        local function sortByProximityAndDistance(x,\
    \ y)\n            return distance(x, y) < distance(y, x) or compare(x, y)\n  \
    \      end\n        return table.sort({planet1, planet2}, sortByDistance)\n  \
    \  end\n    return sortByProximity(planet1, planet2)\nend\nprint(bf(\"Mercury\"\
    , \"Venus\")) -- prints {\"Mercury\", \"Venus\"}\nprint(bf(\"Mercury\", \"Earth\"\
    )) -- prints {\"Mercury\", \"Earth\"}\nprint(bf(\"Mercury\", \"Mars\")) -- prints\
    \ {\"Mercury\", \"Mars\"}\nprint(bf(\"Mercury\", \"Jupiter\")) -- prints {\"Mercury\"\
    , \"Jupiter\"}\nprint(bf(\"Mercury\", \"Saturn\")) -- prints {\"Mercury\", \"\
    Saturn\"}\nprint(bf(\"Mercury\", \"Uranus\")) -- prints {\"Mercury\", \"Uranus\"\
    }\nprint(bf(\"Mercury\", \"Neptune\")) -- prints {\"Mercury\", \"Neptune\"}\n\
    print(bf(\"Venus\", \"Earth\")) -- prints {\"Venus\", \"Earth\"}\nprint(bf(\"\
    Venus\", \"Mars\")) -- prints {\"Venus\", \"Mars\"}\nprint(bf(\"Venus\", \"Jupiter\"\
    )) -- prints {\"Venus\", \"Jupiter\"}\nprint(bf(\"Venus\", \"Saturn\")) -- prints\
    \ {\"Venus\", \"Saturn\"}\nprint(bf(\"Venus\", \"Uranus\")) -- prints {\"Venus\"\
    , \"Uranus\"}\nprint(bf(\"Venus\", \"Neptune\")) -- prints {\"Venus\", \"Neptune\"\
    }\nprint(bf(\"Earth\", \"Mars\")) -- prints {\"Earth\", \"Mars\"}\nprint(bf(\"\
    Earth\", \"Jupiter\")) -- prints {\"Earth\", \"Jupiter\"}\nprint(bf(\"Earth\"\
    , \"Saturn\")) -- prints {\"Earth\", \"Saturn\"}\nprint(bf(\"Earth\", \"Uranus\"\
    )) -- prints {\"Earth\", \"Uranus\"}\nprint(bf(\"Earth\", \"Neptune\")) -- prints\
    \ {\"Earth\", \"Neptune", "    local planets = {\n        \"Mercury\",\n     \
    \   \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n\
    \        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ function distance(planet1, planet2)\n        -- Your code goes here\n    end\n\
    \    local function sort_by_distance(planet1, planet2)\n        -- Your code goes\
    \ here\n    end\n    return sort_by_distance(planet1, planet2)\nend", "    local\
    \ function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistanceDesc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceAscDesc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceDescAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceAscDescDesc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceAscDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceDescDescAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceDescDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceAscDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceDescAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceDescDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceAscDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceDescAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceDescDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceAscDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceDescAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceDescDescAsc(a,b)\n        return distance(b,a)\n\
    \    end\n    local function sortByDistanceAscAsc(a,b)\n        return distance(a,b)\n\
    \    end\n    local function sortByDistanceAscDescAsc(a,b)", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local planet1, planet2 = string.lower(planet1), string.lower(planet2)\n\
    \    local orbit1, orbit2 = orbits[planet1], orbits[planet2]\n    local sun =\
    \ sun(planet1, planet2)\n    local sun_distance = math.abs(math.acos(sun[2]))\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])\n\
    \    local sun_radius = math.abs(sun[3])\n    local sun_radius = math.abs(sun[3])",
  "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance2(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2)\n\
    \    end\n    local function distance3(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance4(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance5(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2)\n\
    \    end\n    local function distance6(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance7(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance8(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance9(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance10(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance11(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance12(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance13(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance14(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance15(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance16(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance17(a,b)\n        return math.sqrt((a.x-",
  "    local function distance(p1, p2)\n        local function distance(p1, p2)\n\
    \            local function distance(p1, p2)\n                local function distance(p1,\
    \ p2)\n                    local function distance(p1, p2)\n                 \
    \       local function distance(p1, p2)\n                            local function\
    \ distance(p1, p2)\n                                local function distance(p1,\
    \ p2)\n                                    local function distance(p1, p2)\n \
    \                                       local function distance(p1, p2)\n    \
    \                                        local function distance(p1, p2)\n   \
    \                                             local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(planet1,\
    \ planet2)\n        -- TODO: Write your function here\n    end\n    local function\
    \ sort_by_distance(planet1, planet2)\n        -- TODO: Write your function here\n\
    \    end\n    return sort_by_distance(distance(planet1, planet2), distance(planet2,\
    \ planet1))\nend", "    local function distance(x, y)\n        return math.sqrt(math.pow((x\
    \ - y), 2))\n    end\n    local function compare(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function orbits(planet)\n        local\
    \ planets = {planet, planet, planet, planet, planet, planet, planet, planet, planet}\n\
    \        local orbits = {}\n        for i = 1, 8 do\n            local x = math.cos(math.rad(i\
    \ * 30))\n            local y = math.sin(math.rad(i * 30))\n            local\
    \ z = math.sin(math.rad(i * 30))\n            local r = distance(x, y, z)\n  \
    \          if r < 0.1 then\n                table.insert(orbits, {x = x, y = y,\
    \ z = z, r = r})\n            end\n        end\n        table.sort(orbits, compare)\n\
    \        return orbits\n    end\n    local orbits1 = orbits(planet1)\n    local\
    \ orbits2 = orbits(planet2)\n    local orbits = orbits1 -- default value\n   \
    \ for i = 1, 8 do\n        if orbits1[i].r < 0.1 and orbits2[i].r < 0.1 then\n\
    \            orbits = orbits1 -- default value\n            break\n        end\n\
    \    end\n    return orbits\nend", "    local function distance(p1, p2)\n    \
    \    local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                local function distance(p1, p2)\n                    local\
    \ function distance(p1, p2)\n                        local function distance(p1,\
    \ p2)\n                            local function distance(p1, p2)\n         \
    \                       local function distance(p1, p2)\n                    \
    \                local function distance(p1, p2)\n                           \
    \             local function distance(p1, p2)\n                              \
    \              local function distance(p1, p2)\n                             \
    \                   local function distance(p1, p2)\n                        \
    \                            local function distance(p1, p2)\n               \
    \                                         local function distance(p1, p2)\n  \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function sortByDistance(planet1, planet2)\n        local\
    \ distances = {}\n        for i=1,8 do\n            distances[i] = distance(planet1,\
    \ planet2)\n        end\n        table.sort(distances, function(a,b) return distances[a]\
    \ < distances[b] end)\n        return distances\n    end\n    return sortByDistance(planet1,\
    \ planet2)\nend\nprint(bf(\"Mercury\", \"Venus\")) -- returns {{Mercury, Venus},\
    \ {Mercury, Venus}, {Mercury, Venus}, {Mercury, Venus}, {Mercury, Venus}, {Mercury,\
    \ Venus}, {Mercury, Venus}, {Mercury, Venus}}\nprint(bf(\"Mercury\", \"Earth\"\
    )) -- returns {{Mercury, Earth}, {Mercury, Earth}, {Mercury, Earth}, {Mercury,\
    \ Earth}, {Mercury, Earth}, {Mercury, Earth}, {Mercury, Earth}, {Mercury, Earth}}\n\
    print(bf(\"Mercury\", \"Mars\")) -- returns {{Mercury, Mars}, {Mercury, Mars},\
    \ {Mercury, Mars}, {Mercury, Mars}, {Mercury, Mars}, {Mercury, Mars}, {Mercury,\
    \ Mars}, {Mercury, Mars}}\nprint(bf(\"Mercury\", \"Jupiter\")) -- returns {{Mercury,\
    \ Jupiter}, {Mercury, Jupiter}, {Mercury, Jupiter}, {Mercury, Jupiter}, {Mercury,\
    \ Jupiter}, {Mercury, Jupiter}, {Mercury, Jupiter}, {Mercury, Jupiter}}\nprint(bf(\"\
    Mercury\", \"Saturn\")) -- returns {{Mercury, Saturn}, {Mercury, Saturn}, {Mercury,\
    \ Saturn}, {Mercury, Saturn}, {Mercury, Saturn}, {Mercury, Saturn}, {Mercury,\
    \ Saturn}, {Mercury, Saturn}}\nprint(bf(\"Mercury\", \"Uranus\")) -- returns {{Mercury,\
    \ Uranus}, {Mercury, Uranus}, {Mercury, Uranus}, {Mercury, Uranus}, {Mercury,\
    \ Uranus}, {Mercury, Uranus}, {Mercury, Uranus}, {Mercury, Uranus}}\nprint(bf(\"\
    Mercury\", \"Neptune\")) -- returns {{Mercury, Neptune}, {Mercury, Neptune}, {Mercury,\
    \ Neptune", "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n\
    \        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\",\n    }\n    local function distance(planet1,\
    \ planet2)\n        local planet1 = planets[planet1]\n        local planet2 =\
    \ planets[planet2]\n        local sun = sun()\n        local sun_distance = math.sqrt((sun_x\
    \ - sun_x_sun)^2 + (sun_y - sun_y_sun)^2)\n        local planet_distance = math.sqrt((planet_x\
    \ - planet_x_planet)^2 + (planet_y - planet_y_planet)^2)\n        return math.abs(sun_distance\
    \ - planet_distance)\n    end\n    local function sort_by_distance(planet1, planet2)\n\
    \        local planet1 = planets[planet1]\n        local planet2 = planets[planet2]\n\
    \        local sun = sun()\n        local sun_distance = math.sqrt((sun_x - sun_x_sun)^2\
    \ + (sun_y - sun_y_sun)^2)\n        local planet_distance = math.sqrt((planet_x\
    \ - planet_x_planet)^2 + (planet_y - planet_y_planet)^2)\n        return math.abs(sun_distance\
    \ - planet_distance)\n    end\n    local function sort_by_proximity(planet1, planet2)\n\
    \        local planet1 = planets[planet1]\n        local planet2 = planets[planet2]\n\
    \        local sun = sun()\n        local sun_distance = math.sqrt((sun_x - sun_x_sun)^2\
    \ + (sun_y - sun_y_sun)^2)\n        local planet_distance = math.sqrt((planet_x\
    \ - planet_x_planet)^2 + (planet_y - planet_y_planet)^2)\n        return math.abs(sun_distance\
    \ - planet_distance)\n    end\n    local function sort_by_proximity_and_distance(planet1,\
    \ planet2)\n        local planet1 = planets[planet1]\n        local planet2 =\
    \ planets[planet2]\n        local sun = sun()\n        local sun_distance = math.sqrt((sun_x\
    \ - sun_x_sun)^2 + (sun_y - sun_y_sun)^2)\n        local planet_distance = math.sqrt((planet_x\
    \ - planet_x_planet)^2 + (planet_y - planet_y_planet)^2)\n        return math.abs(sun_distance\
    \ - planet_", "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance2(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2)\n\
    \    end\n    local function distance3(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance4(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance5(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance6(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance7(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance8(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance9(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance10(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance11(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance12(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance13(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance14(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance15(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance16(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance17(a,b)", "    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow((x - y), 2))\n    end\n    local function\
    \ sort_by_distance(planet1, planet2)\n        local planet1_orbit = orbit(planet1)\n\
    \        local planet2_orbit = orbit(planet2)\n        local planet1_sun = distance(planet1_orbit[1],\
    \ planet1_orbit[2])\n        local planet2_sun = distance(planet2_orbit[1], planet2_orbit[2])\n\
    \        local planet1_planet2 = distance(planet1_orbit[1], planet2_orbit[2])\n\
    \        local planet1_planet1 = distance(planet1_orbit[2], planet2_orbit[1])\n\
    \        local planet2_planet1 = distance(planet2_orbit[1], planet1_orbit[2])\n\
    \        local planet2_planet2 = distance(planet2_orbit[2], planet1_orbit[1])\n\
    \        local planet1_planet2_planet1 = distance(planet1_orbit[1], planet2_orbit[2])\n\
    \        local planet1_planet1_planet2 = distance(planet1_orbit[2], planet2_orbit[1])\n\
    \        local planet2_planet1_planet2 = distance(planet2_orbit[1], planet1_orbit[2])\n\
    \        local planet1_planet1_planet2_planet1 = distance(planet1_orbit[1], planet2_orbit[2])\n\
    \        local planet1_planet2_planet1_planet2 = distance(planet1_orbit[2], planet2_orbit[1])\n\
    \        local planet2_planet1_planet1_planet2 = distance(planet2_orbit[1], planet1_orbit[2])\n\
    \        local planet1_planet1_planet2_planet1_planet2 = distance(planet1_orbit[2],\
    \ planet2_orbit[1])\n        local planet1_planet2_planet1_planet2_planet1 = distance(planet1_orbit[1],\
    \ planet2_orbit[2])\n        local planet1_planet2_planet1_planet2_planet1_planet2\
    \ = distance(planet1_orbit[2], planet2_orbit[1])\n        local planet1_planet2_planet1_planet2_planet1_planet2_planet1\
    \ = distance(planet1_orbit[1], planet2_orbit[2])\n        local planet1_planet2_planet1_planet2_planet1_planet2_planet1_planet2\
    \ = distance(planet1_orbit[2], planet2_orbit[1])\n        local planet1_planet2_planet1_planet2_planet1_planet2_planet1_planet2_planet",
  "    local planets = {\n        Mercury = {\n            Orbit = { x = 0.000000,\
    \ y = 0.000000, z = 0.000000 },\n            Distance = { x = 0.000000, y = 0.000000,\
    \ z = 0.000000 },\n        },\n        Venus = {\n            Orbit = { x = 0.000000,\
    \ y = 0.000000, z = 0.000000 },\n            Distance = { x = 0.000000, y = 0.000000,\
    \ z = 0.000000 },\n        },\n        Earth = {\n            Orbit = { x = 0.000000,\
    \ y = 0.000000, z = 0.000000 },\n            Distance = { x = 0.000000, y = 0.000000,\
    \ z = 0.000000 },\n        },\n        Mars = {\n            Orbit = { x = 0.000000,\
    \ y = 0.000000, z = 0.000000 },\n            Distance = { x = 0.000000, y = 0.000000,\
    \ z = 0.000000 },\n        },\n        Jupiter = {\n            Orbit = { x =\
    \ 0.000000, y = 0.000000, z = 0.000000 },\n            Distance = { x = 0.000000,\
    \ y = 0.000000, z = 0.000000 },\n        },\n        Saturn = {\n            Orbit\
    \ = { x = 0.000000, y = 0.000000, z = 0.000000 },\n            Distance = { x\
    \ = 0.000000, y = 0.000000, z = 0.000000 },\n        },\n        Uranus = {\n\
    \            Orbit = { x = 0.000000, y = 0.000000, z = 0.000000 },\n         \
    \   Distance = { x = 0.000000, y = 0.000000, z = 0.000000 },\n        },\n   \
    \     Neptune = {\n            Orbit = { x = 0.000000, y = 0.000000, z = 0.000000\
    \ },\n            Distance = { x = 0.000000, y = 0.000000, z = 0.000000 },\n \
    \       },\n    }", "    local function distance(p1, p2)\n        -- The distance\
    \ between two planets is given by the distance between \n        -- the orbit\
    \ of planet1 and the orbit of planet2. \n        -- The distance is given by the\
    \ distance between the two orbits.\n        -- The distance is given by the distance\
    \ between the two orbits.\n        -- The distance is given by the distance between\
    \ the two orbits.\n        -- The distance is given by the distance between the\
    \ two orbits.\n        -- The distance is given by the distance between the two\
    \ orbits.\n        -- The distance is given by the distance between the two orbits.\n\
    \        -- The distance is given by the distance between the two orbits.\n  \
    \      -- The distance is given by the distance between the two orbits.\n    \
    \    -- The distance is given by the distance between the two orbits.\n      \
    \  -- The distance is given by the distance between the two orbits.\n        --\
    \ The distance is given by the distance between the two orbits.\n        -- The\
    \ distance is given by the distance between the two orbits.\n        -- The distance\
    \ is given by the distance between the two orbits.\n        -- The distance is\
    \ given by the distance between the two orbits.\n        -- The distance is given\
    \ by the distance between the two orbits.\n        -- The distance is given by\
    \ the distance between the two orbits.\n        -- The distance is given by the\
    \ distance between the two orbits.\n        -- The distance is given by the distance\
    \ between the two orbits.\n        -- The distance is given by the distance between\
    \ the two orbits.\n        -- The distance is given by the distance between the\
    \ two orbits.\n        -- The distance is given by the distance between the two\
    \ orbits.\n        -- The distance is given by the distance between the two orbits.\n\
    \        -- The distance is given by the distance between the two orbits.\n  \
    \      -- The distance is given by the distance between the two orbits.\n    \
    \    -- The distance is given by the distance between the two orbits.\n      \
    \  -- The distance is given by the distance between the two orbits.\n        --\
    \ The distance is given by the distance between the two orbits.\n        -- The\
    \ distance is given by the distance between the two orbits.\n        -- The distance\
    \ is given by the distance between the two orbits.\n        -- The distance is\
    \ given by the distance between the two orbits.\n        -- The distance is given\
    \ by the distance between the two orbits.\n        -- The distance is given by\
    \ the distance between the two orbits.\n        -- The distance is given by the\
    \ distance between the two orbits.\n        -- The distance is given by the distance\
    \ between the two orbits.\n        -- The distance is given by the distance between\
    \ the two orbits.\n        -- The distance is given by the distance between the\
    \ two orbits.\n        -- The distance is given by the ", "    local function\
    \ distance(p1, p2)\n        local function distance(p1, p2)\n            local\
    \ function distance(p1, p2)\n                local function distance(p1, p2)\n\
    \                    local function distance(p1, p2)\n                       \
    \ local function distance(p1, p2)\n                            local function\
    \ distance(p1, p2)\n                                local function distance(p1,\
    \ p2)\n                                    local function distance(p1, p2)\n \
    \                                       local function distance(p1, p2)\n    \
    \                                        local function distance(p1, p2)\n   \
    \                                             local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local planets = {\n   \
    \     \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n\
    \        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    }\n    local planet1 = planets[planet1]\n    local planet2 = planets[planet2]\n\
    \    local sun = sun()\n    local orbit1 = sun:orbit_of(planet1)\n    local orbit2\
    \ = sun:orbit_of(planet2)\n    local distance = math.abs(orbit1:distance(orbit2))\n\
    \    return planets[math.floor(distance * 0.8)], planets[math.floor(distance *\
    \ 0.2)]\nend", "    local function distance(a,b)\n        return math.abs(a.x\
    \ - b.x) + math.abs(a.y - b.y)\n    end\n    local function sortByDistance(planet1,\
    \ planet2)\n        local distances = {}\n        for i=1,8 do\n            distances[i]\
    \ = distance(planet1, planet2[i])\n        end\n        table.sort(distances,\
    \ function(a,b) return distances[a] < distances[b] end)\n        return distances\n\
    \    end\n    local distances = sortByDistance(planet1, planet2)\n    if distances[5]\
    \ ~= distances[6] then\n        return ()\n    end\n    return { planet1, planet2\
    \ }\nend\nprint(bf(\"Mercury\", \"Venus\")) -- returns { Mercury, Venus }\nprint(bf(\"\
    Mercury\", \"Earth\")) -- returns { Mercury, Earth }\nprint(bf(\"Mercury\", \"\
    Mars\")) -- returns { Mercury, Mars }\nprint(bf(\"Mercury\", \"Jupiter\")) --\
    \ returns { Mercury, Jupiter }\nprint(bf(\"Mercury\", \"Saturn\")) -- returns\
    \ { Mercury, Saturn }\nprint(bf(\"Mercury\", \"Uranus\")) -- returns { Mercury,\
    \ Uranus }\nprint(bf(\"Mercury\", \"Neptune\")) -- returns { Mercury, Neptune\
    \ }\nprint(bf(\"Venus\", \"Earth\")) -- returns { Venus, Earth }\nprint(bf(\"\
    Venus\", \"Mars\")) -- returns { Venus, Mars }\nprint(bf(\"Venus\", \"Jupiter\"\
    )) -- returns { Venus, Jupiter }\nprint(bf(\"Venus\", \"Saturn\")) -- returns\
    \ { Venus, Saturn }\nprint(bf(\"Venus\", \"Uranus\")) -- returns { Venus, Uranus\
    \ }\nprint(bf(\"Venus\", \"Neptune\")) -- returns { Venus, Neptune }\nprint(bf(\"\
    Earth\", \"Mars\")) -- returns { Earth, Mars }\nprint(bf(\"Earth\", \"Jupiter\"\
    )) -- returns { Earth, Jupiter }\nprint(bf(\"Earth\", \"Saturn\")) -- returns\
    \ { Earth, Saturn }\nprint(bf(\"Earth\", \"Uranus\")) -- returns { Earth, Uranus\
    \ }\nprint(bf(\"Earth\", \"Neptune\")) -- returns { Earth, Neptune }\nprint(bf(\"\
    Mars\", \"Jupiter\")) -- returns { Mars, J", "    local planets = {\n        \"\
    Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n      \
    \  \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    ,\n    }\n    local function distance(p1, p2)\n        local x1, y1, z1 = p1:getPos()\n\
    \        local x2, y2, z2 = p2:getPos()\n        return math.sqrt((x2 - x1)^2\
    \ + (y2 - y1)^2 + (z2 - z1)^2)\n    end\n    local function sortByDistance(planet1,\
    \ planet2)\n        local distances = {}\n        for _, planet in ipairs(planets)\
    \ do\n            distances[planet] = distance(planet1, planet)\n        end\n\
    \        table.sort(distances, function(a, b) return distances[a] < distances[b]\
    \ end)\n        return distances\n    end\n    return sortByDistance(planet1,\
    \ planet2)\nend\nprint(bf(\"Mercury\", \"Earth\")) -- returns {\"Mercury\", \"\
    Earth\"}\nprint(bf(\"Mercury\", \"Venus\")) -- returns {\"Mercury\", \"Venus\"\
    }\nprint(bf(\"Mercury\", \"Mars\")) -- returns {\"Mercury\", \"Mars\"}\nprint(bf(\"\
    Mercury\", \"Jupiter\")) -- returns {\"Mercury\", \"Jupiter\"}\nprint(bf(\"Mercury\"\
    , \"Saturn\")) -- returns {\"Mercury\", \"Saturn\"}\nprint(bf(\"Mercury\", \"\
    Uranus\")) -- returns {\"Mercury\", \"Uranus\"}\nprint(bf(\"Mercury\", \"Neptune\"\
    )) -- returns {\"Mercury\", \"Neptune\"}\nprint(bf(\"Venus\", \"Earth\")) -- returns\
    \ {\"Venus\", \"Earth\"}\nprint(bf(\"Venus\", \"Mars\")) -- returns {\"Venus\"\
    , \"Mars\"}\nprint(bf(\"Venus\", \"Jupiter\")) -- returns {\"Venus\", \"Jupiter\"\
    }\nprint(bf(\"Venus\", \"Saturn\")) -- returns {\"Venus\", \"Saturn\"}\nprint(bf(\"\
    Venus\", \"Uranus\")) -- returns {\"Venus\", \"Uranus\"}\nprint(bf(\"Venus\",\
    \ \"Neptune\")) -- returns {\"Venus\", \"Neptune\"}\nprint(bf(\"Earth\", \"Mars\"\
    )) -- returns {\"Earth\", \"Mars\"}\nprint(bf(\"Earth\", \"Jupiter\")) -- returns\
    \ {\"Earth\", \"Jupiter\"}\nprint(bf(\"Earth\", \"Saturn\")) -- returns {\"Earth",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local planet1 = planets[planet1]\n    local\
    \ planet2 = planets[planet2]\n    local sun = math.rad(math.pi/2)\n    local orbit1\
    \ = math.rad(planet1 .. \"Orbit\")\n    local orbit2 = math.rad(planet2 .. \"\
    Orbit\")\n    local distance1 = math.rad(planet1 .. \"Distance\")\n    local distance2\
    \ = math.rad(planet2 .. \"Distance\")\n    local distance3 = math.rad(planet1\
    \ .. \"Distance\" .. \"Orbit\")\n    local distance4 = math.rad(planet2 .. \"\
    Distance\" .. \"Orbit\")\n    local distance5 = math.rad(planet1 .. \"Distance\"\
    \ .. \"Distance\")\n    local distance6 = math.rad(planet2 .. \"Distance\" ..\
    \ \"Distance\")\n    local distance7 = math.rad(planet1 .. \"Distance\" .. \"\
    Distance\" .. \"Orbit\")\n    local distance8 = math.rad(planet2 .. \"Distance\"\
    \ .. \"Distance\" .. \"Orbit\")\n    local distance9 = math.rad(planet1 .. \"\
    Distance\" .. \"Distance\" .. \"Distance\")\n    local distance10 = math.rad(planet2\
    \ .. \"Distance\" .. \"Distance\" .. \"Distance\")\n    local distance11 = math.rad(planet1\
    \ .. \"Distance\" .. \"Distance\" .. \"Distance\" .. \"Orbit\")\n    local distance12\
    \ = math.rad(planet2 .. \"Distance\" .. \"Distance\" .. \"Distance\" .. \"Orbit\"\
    )\n    local distance13 = math.rad(planet1 .. \"Distance\" .. \"Distance\" ..\
    \ \"Distance\" .. \"Distance\")\n    local distance14 = math.rad(planet2 .. \"\
    Distance\" .. \"Distance\" .. \"Distance\" .. \"Distance\")\n    local distance15\
    \ = math.rad(planet1 .. \"Distance\" .. \"Distance\" .. \"Distance\" .. \"Distance\"\
    \ .. \"Orbit\")\n    local distance16 = math.rad(planet2 .. \"Distance\" .. \"\
    Distance\" .. \"Distance\" .. \"Distance\" .. \"Orbit\")\n    local distance17\
    \ = math.rad(planet1 .. \"Distance\" ", "    local function distance(p1, p2)\n\
    \        -- The distance between two planets is given by the distance \n     \
    \   -- between their orbits.\n        local function distance(p1, p2)\n      \
    \      -- The distance between two planets is given by the distance \n       \
    \     -- between their orbits.\n            local function distance(p1, p2)\n\
    \                -- The distance between two planets is given by the distance\
    \ \n                -- between their orbits.\n                local function distance(p1,\
    \ p2)\n                    -- The distance between two planets is given by the\
    \ distance \n                    -- between their orbits.\n                  \
    \  local function distance(p1, p2)\n                        -- The distance between\
    \ two planets is given by the distance \n                        -- between their\
    \ orbits.\n                        local function distance(p1, p2)\n         \
    \                   -- The distance between two planets is given by the distance\
    \ \n                            -- between their orbits.\n                   \
    \         local function distance(p1, p2)\n                                --\
    \ The distance between two planets is given by the distance \n               \
    \                 -- between their orbits.\n                                local\
    \ function distance(p1, p2)\n                                    -- The distance\
    \ between two planets is given by the distance \n                            \
    \        -- between their orbits.\n                                    local function\
    \ distance(p1, p2)\n                                        -- The distance between\
    \ two planets is given by the distance \n                                    \
    \    -- between their orbits.\n                                        local function\
    \ distance(p1, p2)\n                                            -- The distance\
    \ between two planets is given by the distance \n                            \
    \                -- between their orbits.\n                                  \
    \          local function distance(p1, p2)\n                                 \
    \               -- The distance between two planets is given by the distance \n\
    \                                                -- between their orbits.\n  \
    \                                              local function distance(p1, p2)\n\
    \                                                    -- The distance between two\
    \ planets is given by the distance \n                                        \
    \            -- between their orbits.\n                                      \
    \              local function distance(p1, p2)\n                             \
    \                           -- The distance between two planets is given by the\
    \ distance \n                                                        -- between\
    \ their orbits.\n                                                        local\
    \ function distance(p1, p2)\n                                                \
    \            -- The distance between two planets is given by the distance \n \
    \                                                           -- between their orbits.\n\
    \                                                            local function distance(p1,\
    \ p2)\n                                                                -- The\
    \ distance between two planets is given by the distance \n                   \
    \                                             -- between their orbits.\n     \
    \                                                           local function distance(p1,\
    \ p2)\n                                                                    --\
    \ The distance between two planets is given by the distance \n               \
    \                                                     -- between their orbits.\n\
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \               -- The distance between two planets is given by the distance \n\
    \                                                                        -- between\
    \ their orbits.\n                                                            \
    \            local function distance(p1, p2)\n                               \
    \                                             -- The distance between two planets\
    \ is given by the distance \n                                                \
    \                            -- between their orbits.\n                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \          -- The distance between two planets is ", "    local function distance(p1,\
    \ p2)\n        -- Your code here\n    end\n    return distance\nend", "    local\
    \ function distance(p1, p2)\n        -- The distance between two planets is their\
    \ distance to the Sun.\n        return p2.x - p1.x\n    end\n    local function\
    \ planet_orbits(planet)\n        -- The orbit of a planet is the orbit of the\
    \ sun minus the orbit of \n        -- the planet.\n        local sun_x = math.sin(math.rad(sun.azimuth))\n\
    \        local sun_y = math.cos(math.rad(sun.azimuth))\n        local sun_z =\
    \ math.sin(math.rad(sun.elevation))\n        local planet_x = math.cos(math.rad(planet.azimuth))\n\
    \        local planet_y = math.sin(math.rad(planet.azimuth))\n        local planet_z\
    \ = math.sin(math.rad(planet.elevation))\n        local sun_x_planet = sun_x -\
    \ planet_x\n        local sun_y_planet = sun_y - planet_y\n        local sun_z_planet\
    \ = sun_z - planet_z\n        local sun_x_planet_squared = sun_x_planet * sun_x_planet\n\
    \        local sun_y_planet_squared = sun_y_planet * sun_y_planet\n        local\
    \ sun_z_planet_squared = sun_z_planet * sun_z_planet\n        local sun_x_planet_squared_magnitude\
    \ = math.sqrt(sun_x_planet_squared)\n        local sun_y_planet_squared_magnitude\
    \ = math.sqrt(sun_y_planet_squared)\n        local sun_z_planet_squared_magnitude\
    \ = math.sqrt(sun_z_planet_squared)\n        local sun_x_planet_squared_magnitude_squared\
    \ = sun_x_planet_squared * sun_x_planet_squared\n        local sun_y_planet_squared_magnitude_squared\
    \ = sun_y_planet_squared * sun_y_planet_squared\n        local sun_z_planet_squared_magnitude_squared\
    \ = sun_z_planet_squared * sun_z_planet_squared\n        local sun_x_planet_squared_magnitude_magnitude\
    \ = math.sqrt(sun_x_planet_squared_magnitude)\n        local sun_y_planet_squared_magnitude_magnitude\
    \ = math.sqrt(sun_y_planet_squared_magnitude)\n        local sun_z_planet_squared_magnitude_magnitude\
    \ = math.sqrt(sun_z_planet_squared_magnitude)\n        local sun_x_planet_squared_magnitude_magnitude_squared\
    \ = sun_x_planet_squared_magnitude * sun_x_planet_squared_", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local function distance(planet1, planet2)\n     \
    \   local distance = 0\n        for i = 1, 8 do\n            distance = distance\
    \ + math.pow((planets[i] - planet1), 2)\n        end\n        return math.sqrt(distance)\n\
    \    end\n    local function compare(planet1, planet2)\n        local distance1\
    \ = distance(planet1, planet2)\n        local distance2 = distance(planet2, planet1)\n\
    \        if distance1 < distance2 then\n            return 1\n        elseif distance1\
    \ > distance2 then\n            return -1\n        else\n            return 0\n\
    \        end\n    end\n    local function compare2(planet1, planet2)\n       \
    \ local distance1 = distance(planet1, planet2)\n        local distance2 = distance(planet2,\
    \ planet1)\n        if distance1 < distance2 then\n            return -1\n   \
    \     elseif distance1 > distance2 then\n            return 1\n        else\n\
    \            return 0\n        end\n    end\n    local function compare3(planet1,\
    \ planet2)\n        local distance1 = distance(planet1, planet2)\n        local\
    \ distance2 = distance(planet2, planet1)\n        if distance1 < distance2 then\n\
    \            return -1\n        elseif distance1 > distance2 then\n          \
    \  return 1\n        else\n            if planet1 < planet2 then\n           \
    \     return -1\n            elseif planet1 > planet2 then\n                return\
    \ 1\n            else\n                return 0\n            end\n        end\n\
    \    end\n    local function compare4(planet1, planet2)\n        local distance1\
    \ = distance(planet1, planet2)\n        local distance2 = distance(planet2, planet1)\n\
    \        if distance1 < distance2 then\n            return -1\n        elseif\
    \ distance1 > distance2 then\n            return 1\n        else\n           \
    \ if planet1 < planet2 then\n                return 1\n            elseif planet1\
    \ > planet2 then\n                return -1\n            else\n              \
    \  return 0\n            end\n        end\n    end\n    local function compare5(planet1,\
    \ planet2)\n        local distance1 = distance(planet1, planet2)\n        local\
    \ distance2 = distance(planet2, planet1)\n        if distance1 < distance2 then\n\
    \            return -1\n        elseif distance1 > distance2 then\n          \
    \  return 1\n        else\n            if planet1 < planet2 then\n           \
    \     return -1\n            elseif planet1 > planet2 then\n                return\
    \ 1\n            else\n", "    local function distance(a,b)\n        -- Distance\
    \ between two planets\n        local function distance(a,b)\n            -- Distance\
    \ between two planets\n            local function distance(a,b)\n            \
    \    -- Distance between two planets\n                local function distance(a,b)\n\
    \                    -- Distance between two planets\n                    local\
    \ function distance(a,b)\n                        -- Distance between two planets\n\
    \                        local function distance(a,b)\n                      \
    \      -- Distance between two planets\n                            local function\
    \ distance(a,b)\n                                -- Distance between two planets\n\
    \                                local function distance(a,b)\n              \
    \                      -- Distance between two planets\n                     \
    \               local function distance(a,b)\n                               \
    \         -- Distance between two planets\n                                  \
    \      local function distance(a,b)\n                                        \
    \    -- Distance between two planets\n                                       \
    \     local function distance(a,b)\n                                         \
    \       -- Distance between two planets\n                                    \
    \            local function distance(a,b)\n                                  \
    \                  -- Distance between two planets\n                         \
    \                           local function distance(a,b)\n                   \
    \                                     -- Distance between two planets\n      \
    \                                                  local function distance(a,b)\n\
    \                                                            -- Distance between\
    \ two planets\n                                                            local\
    \ function distance(a,b)\n                                                   \
    \             -- Distance between two planets\n                              \
    \                                  local function distance(a,b)\n            \
    \                                                        -- Distance between two\
    \ planets\n                                                                  \
    \  local function distance(a,b)\n                                            \
    \                            -- Distance between two planets\n               \
    \                                                         local function distance(a,b)\n\
    \                                                                            --\
    \ Distance between two planets\n                                             \
    \                               local function distance(a,b)\n               \
    \                                                                 -- Distance\
    \ between two planets\n                                                      \
    \                          local function distance(a,b)\n                    \
    \                                                                -- Distance between\
    \ two planets\n                                                              \
    \                      local function distance(a,b)\n                        \
    \                                                                -- Distance between\
    \ two planets\n                                                              \
    \                          local function distance(a,b)\n                    \
    \                                                                        -- Distance\
    \ between two planets\n                                                      \
    \                                      local function distance(a,b)\n        \
    \                                                                            \
    \            -- Distance between two planets\n                               \
    \                                                                 local function\
    \ distance(a,b)\n                                                            \
    \                                        -- Distance between two planets\n   \
    \                                                                            \
    \                     local function distance(a,b)\n                         \
    \                                                                            \
    \   -- Distance between two planets\n                                        \
    \                                                                local function\
    \ distance(a,b)\n                                                            \
    \                                                -- Distance between two planets\n\
    \                                                                            \
    \                                local function distance(a,b)\n              \
    \                                                                            \
    \                      -- Distance between two planets\n                     \
    \                                                                            \
    \               local function distance(a,b)\n                               \
    \                                                                            \
    \         -- Distance between two planets\n                                  \
    \                                                                            \
    \      local function distance(a,b)\n                                        \
    \                                                                            \
    \    -- Distance between two planets\n                                       \
    \                                                                            \
    \     local function distance(a,b)\n                                         \
    \                                                                            \
    \       -- Distance between two planets\n                                    \
    \                                                                            \
    \            local function distance(a,b)\n                                  \
    \                                                                            \
    \                  -- Distance between two planets\n                         \
    \                                                                            \
    \                           local function distance(a,b)\n                   \
    \                                                                            \
    \                                     -- Distance between two planet", "    local\
    \ function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n\
    \    local function compare(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function orbits(planet)\n        local orbits = {}\n\
    \        local sun = math.pi/2 - math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.acos(math.cos(math.pi/2)/math.cos(math.pi/2-math.",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local function distance(x, y)\n        return\
    \ math.sqrt(math.pow(x-y, 2) + math.pow(x-y, 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function orbit(planet1, planet2)\n        local planet1 = planets[planet1]\n\
    \        local planet2 = planets[planet2]\n        local orbit1 = {\n        \
    \    planet1 = planet1,\n            planet2 = planet2,\n            distance\
    \ = distance(planets[planet1], planets[planet2])\n        }\n        local orbit2\
    \ = {\n            planet1 = planet2,\n            planet2 = planet1,\n      \
    \      distance = distance(planets[planet2], planets[planet1])\n        }\n  \
    \      table.sort(orbit1, compare)\n        table.sort(orbit2, compare)\n    \
    \    return orbit1, orbit2\n    end\n    local orbit1, orbit2 = orbit(planet1,\
    \ planet2)\n    local orbit1x = orbit1[1].distance\n    local orbit2x = orbit2[1].distance\n\
    \    if orbit1x <= orbit2x then\n        return orbit1\n    else\n        return\
    \ orbit2\n    end\nend\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\"\
    , \"Venus\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\"\
    , \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"\
    ))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"\
    Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))", "    local function dist(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare2(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare3(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare4(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare5(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare6(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare7(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare8(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare9(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare10(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare11(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare12(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare13(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare14(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare15(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare16(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare17(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare18(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare19(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare20(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare21(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare22(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare23(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function compare24(planet1,\
    \ planet2)\n        -- Your ", "    local function distance(planet1, planet2)\n\
    \        -- TODO: Write a function that calculates the distance between two planets\n\
    \        -- given their names as strings.\n        -- The function should return\
    \ a number representing the distance between\n        -- planet1 and planet2.\n\
    \    end\n    local function orbit(planet1, planet2)\n        -- TODO: Write a\
    \ function that calculates the orbit between two planets\n        -- given their\
    \ names as strings.\n        -- The function should return a tuple containing\
    \ two numbers, the first \n        -- representing the orbit of the planet and\
    \ the second representing the \n        -- distance between the planets.\n   \
    \ end\n    local function orbits(planet1, planet2)\n        -- TODO: Write a function\
    \ that calculates the orbits of two planets\n        -- given their names as strings.\n\
    \        -- The function should return a table containing two numbers, the first\
    \ \n        -- representing the orbit of the planet and the second representing\
    \ the \n        -- distance between the planets.\n    end\n    local function\
    \ sort(orbits)\n        -- TODO: Write a function that sorts the orbits of a planet\
    \ given their \n        -- names as strings.\n        -- The function should return\
    \ a table containing two numbers, the first \n        -- representing the orbit\
    \ of the planet and the second representing the \n        -- distance between\
    \ the planets.\n    end\n    local function distance(planet1, planet2)\n     \
    \   -- TODO: Write a function that calculates the distance between two planets\n\
    \        -- given their names as strings.\n        -- The function should return\
    \ a number representing the distance between\n        -- planet1 and planet2.\n\
    \    end\n    local function orbit(planet1, planet2)\n        -- TODO: Write a\
    \ function that calculates the orbit between two planets\n        -- given their\
    \ names as strings.\n        -- The function should return a tuple containing\
    \ two numbers, the first \n        -- representing the orbit of the planet and\
    \ the second representing the \n        -- distance between the planets.\n   \
    \ end\n    local function orbits(planet1, planet2)\n        -- TODO: Write a function\
    \ that calculates the orbits of two planets\n        -- given their names as strings.\n\
    \        -- The function should return a table containing two numbers, the first\
    \ \n        -- representing the orbit of the planet and the second representing\
    \ the \n        -- distance between the planets.\n    end\n    local function\
    \ sort(orbits)\n        -- TODO: Write a function that sorts the orbits of a planet\
    \ given their \n        -- names as strings.\n        -- The function should return\
    \ a table containing two numbers, the first \n        -- representing the orbit\
    \ of the planet and the second representing the \n        -- distance between\
    \ the planet", "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function compare(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function findOrbit(planet)\n        local\
    \ orbit = {}\n        local sun = math.pi/6\n        local sun_x = math.cos(sun)\n\
    \        local sun_y = math.sin(sun)\n        local sun_z = math.sin(sun)\n  \
    \      local sun_r = math.sqrt(sun_x^2 + sun_y^2 + sun_z^2)\n        local sun_x\
    \ = sun_x * sun_r\n        local sun_y = sun_y * sun_r\n        local sun_z =\
    \ sun_z * sun_r\n        local sun_r = math.sqrt(sun_x^2 + sun_y^2 + sun_z^2)\n\
    \        local sun_x = sun_x * sun_r\n        local sun_y = sun_y * sun_r\n  \
    \      local sun_z = sun_z * sun_r\n        local sun_r = math.sqrt(sun_x^2 +\
    \ sun_y^2 + sun_z^2)\n        local sun_x = sun_x * sun_r\n        local sun_y\
    \ = sun_y * sun_r\n        local sun_z = sun_z * sun_r\n        local sun_r =\
    \ math.sqrt(sun_x^2 + sun_y^2 + sun_z^2)\n        local sun_x = sun_x * sun_r\n\
    \        local sun_y = sun_y * sun_r\n        local sun_z = sun_z * sun_r\n  \
    \      local sun_r = math.sqrt(sun_x^2 + sun_y^2 + sun_z^2)\n        local sun_x\
    \ = sun_x * sun_r\n        local sun_y = sun_y * sun_r\n        local sun_z =\
    \ sun_z * sun_r\n        local sun_r = math.sqrt(sun_x^2 + sun_y^2 + sun_z^2)\n\
    \        local sun_x = sun_x * sun_r\n        local sun_y = sun_y * sun_r\n  \
    \      local sun_z = sun_z * sun_r\n        local sun_r = math.sqrt(sun_x^2 +\
    \ sun_y^2 + sun_z^2)\n        local sun_x = sun_x * sun_r\n        local sun_y\
    \ = sun_y * sun_r\n        local sun_z = sun_z * sun_r\n        local sun_r =\
    \ math.sqrt(sun_x^2 + sun_y^2 + sun_z^2)\n        local sun_x = sun_x * sun_r\n\
    \        local sun_y = sun_y * ", "    local function distance(a,b)\n        return\
    \ math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local function\
    \ compare(a,b)\n        return distance(a,b) \n    end\n    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function compare(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ compare(a,b)\n        return distance(a,b) \n    end\n    local function compare(a,b)\n\
    \        return distance(a,b) \n    end\n    local function compare(a,b)\n   \
    \     return distance(a,b) \n    end\n    local function compare(a,b)\n      \
    \  return distance(a,b) \n    end\n    local function compare(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function compare(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function compare(a,b)\n        return distance(a,b) \n\
    \    end\n    local function compare(a,b)\n        return distance(a,b) \n   \
    \ end\n    local function compare(a,b)\n        return distance(a,b) \n    end\n\
    \    local function compare(a,b)\n        return distance(a,b) \n    end\n   \
    \ local function compare(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function compare(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ compare(a,b)\n        return distance(a,b) \n    end\n    local function compare(a,b)\n\
    \        return distance(a,b) \n    end\n    local function compare(a,b)\n   \
    \     return distance(a,b) \n    end\n    local function compare(a,b)\n      \
    \  return distance(a,b) \n    end\n    local function compare(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function compare(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function compare(a,b)\n        return distance(a,b) \n\
    \    end\n    local function compare(a,b)\n        return distance(a,b) \n   \
    \ end\n    local function compare(a,b)\n        return distance(a,b) \n    end\n\
    \    local function compare(a,b)\n        return distance(a,b) \n    end\n   \
    \ local function compare(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function compare(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ compare(a,b)\n        return distance(a,b) \n    end\n    local function compare(a,b)\n\
    \        return distance(a,b) \n    end\n    local function compare(a,b)\n   \
    \     return distance(a,b) \n    end\n    local function compare(a,b)\n      \
    \  return distance(a,b) \n    end\n", "    local function distance(planet1, planet2)\n\
    \        -- Write your code here\n    end\n    return distance\nend", "    local\
    \ planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n\
    \        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local planet1 = planets[planet1]\n    local\
    \ planet2 = planets[planet2]\n    local sun = sun(planet1, planet2)\n    local\
    \ orbit1 = orbit(planet1, sun)\n    local orbit2 = orbit(planet2, sun)\n    local\
    \ distances = {}\n    for i=1,#orbit1 do\n        distances[i] = distance(orbit1[i],\
    \ orbit2[i])\n    end\n    table.sort(distances, function(a,b) return distances[a]\
    \ < distances[b] end)\n    return table.unpack(distances)\nend\nprint(bf(\"Mercury\"\
    , \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"\
    ))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\n\
    print(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"\
    Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"\
    ))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"\
    Venus\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"\
    Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"\
    ))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"\
    Jupiter\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\"\
    , \"Neptune\"))\nprint(bf(\"Uranus\", \"Neptune\"))", "    local function distance(p1,\
    \ p2)\n        -- The distance between two planets is given by the distance \n\
    \        -- between their orbits.\n        local function distance(p1, p2)\n \
    \           local function distance(p1, p2)\n                -- The distance between\
    \ two planets is given by the distance \n                -- between their orbits.\n\
    \                local function distance(p1, p2)\n                    -- The distance\
    \ between two planets is given by the distance \n                    -- between\
    \ their orbits.\n                    local function distance(p1, p2)\n       \
    \                 -- The distance between two planets is given by the distance\
    \ \n                        -- between their orbits.\n                       \
    \ local function distance(p1, p2)\n                            -- The distance\
    \ between two planets is given by the distance \n                            --\
    \ between their orbits.\n                            local function distance(p1,\
    \ p2)\n                                -- The distance between two planets is\
    \ given by the distance \n                                -- between their orbits.\n\
    \                                local function distance(p1, p2)\n           \
    \                         -- The distance between two planets is given by the\
    \ distance \n                                    -- between their orbits.\n  \
    \                                  local function distance(p1, p2)\n         \
    \                               -- The distance between two planets is given by\
    \ the distance \n                                        -- between their orbits.\n\
    \                                        local function distance(p1, p2)\n   \
    \                                         -- The distance between two planets\
    \ is given by the distance \n                                            -- between\
    \ their orbits.\n                                            local function distance(p1,\
    \ p2)\n                                                -- The distance between\
    \ two planets is given by the distance \n                                    \
    \            -- between their orbits.\n                                      \
    \          local function distance(p1, p2)\n                                 \
    \                   -- The distance between two planets is given by the distance\
    \ \n                                                    -- between their orbits.\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        -- The distance\
    \ between two planets is given by the distance \n                            \
    \                            -- between their orbits.\n                      \
    \                                  local function distance(p1, p2)\n         \
    \                                                   -- The distance between two\
    \ planets is given by the distance \n                                        \
    \                    -- between their orbits.\n                              \
    \                              local function distance(p1, p2)\n             \
    \                                                   -- The distance between two\
    \ planets is given by the distance \n                                        \
    \                        -- between their orbits.\n                          \
    \                                      local function distance(p1, p2)\n     \
    \                                                               -- The distance\
    \ between two planets is given by the distance \n                            \
    \                                        -- between their orbits.\n          \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                      \
    \  -- The distance between two planets is given by the distance \n           \
    \                                                             -- between their\
    \ orbits.\n                                                                  \
    \      local function distance(p1, p2)\n                                     \
    \                                       -- The distance between two planets is\
    \ given by the distance \n                                                   \
    \                         -- between their orbits.\n                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \          -- The distance between two planets is given by the distance \n   \
    \                                                                            \
    \ -- between their orbits.\n                                                 \
    \                               local function distance(p1, p", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local function distance(planet1, planet2)\n     \
    \   -- Your code goes here\n    end\n    return planets[#planets]:distance(planet1,\
    \ planet2)\nend", "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance2(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2)\n\
    \    end\n    local function distance3(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2+(a[4]-b[4])^2)\n\
    \    end\n    local function distance4(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2+(a[4]-b[4])^2+(a[5]-b[5])^2)\n\
    \    end\n    local function distance5(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2+(a[4]-b[4])^2+(a[5]-b[5])^2+(a[6]-b[6])^2)\n\
    \    end\n    local function distance6(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2+(a[4]-b[4])^2+(a[5]-b[5])^2+(a[6]-b[6])^2+(a[7]-b[7])^2)\n\
    \    end\n    local function distance7(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2+(a[4]-b[4])^2+(a[5]-b[5])^2+(a[6]-b[6])^2+(a[7]-b[7])^2+(a[8]-b[8])^2)\n\
    \    end\n    local function distance8(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2+(a[4]-b[4])^2+(a[5]-b[5])^2+(a[6]-b[6])^2+(a[7]-b[7])^2+(a[8]-b[8])^2+(a[9]-b[9])^2)\n\
    \    end\n    local function distance9(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])^2+(a[3]-b[3])^2+(a[4]-b[4])^2+(a[5]-b[5])^2+(a[6]-b[6])^2+(a[7]-b[7])^2+(a[8]-b[8])^2+(a[9]-b[9])^2+(a[10]-b[10])^2)\n\
    \    end\n    local function distance10(a,b)\n        return math.sqrt((a[1]-b[1])^2+(a[2]-b[2])",
  "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function sortByProximity(planet1, planet2)\n        local\
    \ distance1 = distance(planet1.orbit.x, planet1.orbit.y, planet2.orbit.x, planet2.orbit.y)\n\
    \        local distance2 = distance(planet2.orbit.x, planet2.orbit.y, planet1.orbit.x,\
    \ planet1.orbit.y)\n        local proximity = distance1 - distance2\n        return\
    \ proximity\n    end\n    local function sortByProximity2(planet1, planet2)\n\
    \        local distance1 = distance(planet1.orbit.x, planet1.orbit.y, planet2.orbit.x,\
    \ planet2.orbit.y)\n        local distance2 = distance(planet2.orbit.x, planet2.orbit.y,\
    \ planet1.orbit.x, planet1.orbit.y)\n        local proximity = distance1 - distance2\n\
    \        return proximity\n    end\n    local function sortByProximity3(planet1,\
    \ planet2)\n        local distance1 = distance(planet1.orbit.x, planet1.orbit.y,\
    \ planet2.orbit.x, planet2.orbit.y)\n        local distance2 = distance(planet2.orbit.x,\
    \ planet2.orbit.y, planet1.orbit.x, planet1.orbit.y)\n        local proximity\
    \ = distance1 - distance2\n        return proximity\n    end\n    local function\
    \ sortByProximity4(planet1, planet2)\n        local distance1 = distance(planet1.orbit.x,\
    \ planet1.orbit.y, planet2.orbit.x, planet2.orbit.y)\n        local distance2\
    \ = distance(planet2.orbit.x, planet2.orbit.y, planet1.orbit.x, planet1.orbit.y)\n\
    \        local proximity = distance1 - distance2\n        return proximity\n \
    \   end\n    local function sortByProximity5(planet1, planet2)\n        local\
    \ distance1 = distance(planet1.orbit.x, planet1.orbit.y, planet2.orbit.x, planet2.orbit.y)\n\
    \        local distance2 = distance(planet2.orbit.x, planet2.orbit.y, planet1.orbit.x,\
    \ planet1.orbit.y)\n        local proximity = distance1 - distance2\n        return\
    \ proximity\n    end\n    local function sortByProximity6(planet1, planet2)\n\
    \        local distance1 = distance(planet1.orbit.x, planet1.orbit.y, plan", " \
    \   local function distance(x, y)\n        return math.sqrt(math.pow((x - y),\
    \ 2) + math.pow((y - x), 2))\n    end\n    local function compare(x, y)\n    \
    \    return distance(x, y) < distance(y, x)\n    end\n    local function planets(planet1,\
    \ planet2)\n        local planets = {}\n        for i = 1, 8 do\n            if\
    \ compare(planet1, planet2) == true then\n                table.insert(planets,\
    \ i)\n            end\n        end\n        return planets\n    end\n    local\
    \ function orbits(planet1, planet2)\n        local orbits = {}\n        for i\
    \ = 1, 8 do\n            if distance(i, planet1) < distance(i, planet2) then\n\
    \                table.insert(orbits, i)\n            end\n        end\n     \
    \   return orbits\n    end\n    local function sun(planet1, planet2)\n       \
    \ local sun = {}\n        for i = 1, 8 do\n            if distance(i, planet1)\
    \ < distance(i, planet2) then\n                table.insert(sun, i)\n        \
    \    end\n        end\n        return sun\n    end\n    local function orbit(planet1,\
    \ planet2)\n        local orbit = {}\n        for i = 1, 8 do\n            if\
    \ distance(i, planet1) < distance(i, planet2) then\n                table.insert(orbit,\
    \ i)\n            end\n        end\n        return orbit\n    end\n    local function\
    \ orbits(planet1, planet2)\n        local orbits = {}\n        for i = 1, 8 do\n\
    \            if distance(i, planet1) < distance(i, planet2) then\n           \
    \     table.insert(orbits, i)\n            end\n        end\n        return orbits\n\
    \    end\n    local function sun(planet1, planet2)\n        local sun = {}\n \
    \       for i = 1, 8 do\n            if distance(i, planet1) < distance(i, planet2)\
    \ then\n                table.insert(sun, i)\n            end\n        end\n \
    \       return sun\n    end\n    local function orbit(planet1, planet2)\n    \
    \    local orbit = {}\n        for i = 1, 8 do\n            if distance(i, planet1)\
    \ < distance(i, planet2) then\n                table.insert(orbit, i)\n      \
    \      end\n        end\n        return orbit\n    end\n    local function orbits(planet1,\
    \ planet2)\n        local orbits = {}\n        for i = 1, 8 do\n            if\
    \ distance(i, planet1) < distance(i, planet2) then\n                table.insert(orbits,\
    \ i)\n            end\n        end\n        return orbits\n    end\n    local\
    \ function sun(planet1, planet2)\n        local sun = {}\n        for i = 1, 8\
    \ do\n            if distance(i, planet1) < distance(i, plan", "    local function\
    \ distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local\
    \ function compare(x, y)\n        return distance(x, y) < distance(y, x)\n   \
    \ end\n    local function planets(planet1, planet2)\n        local orbit1, orbit2\
    \ = {}, {}\n        for i=1,8 do\n            local x = math.cos(math.rad(i))\
    \ * math.cos(math.rad(i)) * math.cos(math.rad(i))\n            local y = math.cos(math.rad(i))\
    \ * math.sin(math.rad(i)) * math.cos(math.rad(i))\n            local z = math.sin(math.rad(i))\
    \ * math.cos(math.rad(i)) * math.cos(math.rad(i))\n            local r = math.sqrt(math.pow(x,\
    \ 2) + math.pow(y, 2) + math.pow(z, 2))\n            if r > 1 then\n         \
    \       orbit1[i] = {x = x, y = y, z = z, r = r}\n            else\n         \
    \       orbit2[i] = {x = -x, y = -y, z = -z, r = -r}\n            end\n      \
    \  end\n        table.sort(orbit1, compare)\n        table.sort(orbit2, compare)\n\
    \        local results = {}\n        for i=1,8 do\n            if orbit1[i].r\
    \ > 1 and orbit2[i].r > 1 then\n                table.insert(results, {x = orbit1[i].x,\
    \ y = orbit1[i].y, z = orbit1[i].z, r = orbit1[i].r})\n                table.insert(results,\
    \ {x = orbit2[i].x, y = orbit2[i].y, z = orbit2[i].z, r = orbit2[i].r})\n    \
    \        end\n        end\n        return results\n    end\n    return planets(planet1,\
    \ planet2)\nend\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"\
    ))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"\
    Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\"\
    , \"Neptune\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"\
    Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Earth\",\
    \ \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"\
    ))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\n", "    local function\
    \ distance(p1, p2)\n        local function distance(p1, p2)\n            local\
    \ function distance(p1, p2)\n                local function distance(p1, p2)\n\
    \                    local function distance(p1, p2)\n                       \
    \ local function distance(p1, p2)\n                            local function\
    \ distance(p1, p2)\n                                local function distance(p1,\
    \ p2)\n                                    local function distance(p1, p2)\n \
    \                                       local function distance(p1, p2)\n    \
    \                                        local function distance(p1, p2)\n   \
    \                                             local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(p1,\
    \ p2)\n        -- Write your code here\n    end\n    return distance\nend", " \
    \   local function distance(p1, p2)\n        local function distance(p1, p2)\n\
    \            local function distance(p1, p2)\n                local function distance(p1,\
    \ p2)\n                    local function distance(p1, p2)\n                 \
    \       local function distance(p1, p2)\n                            local function\
    \ distance(p1, p2)\n                                local function distance(p1,\
    \ p2)\n                                    local function distance(p1, p2)\n \
    \                                       local function distance(p1, p2)\n    \
    \                                        local function distance(p1, p2)\n   \
    \                                             local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(a,b)\n\
    \        return math.sqrt(math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2))\n\
    \    end\n    local function sort_by_proximity(planet1, planet2)\n        local\
    \ planet1_orbit = planet_orbits[planet1]\n        local planet2_orbit = planet_orbits[planet2]\n\
    \        local planet1_sun = planet_suns[planet1]\n        local planet2_sun =\
    \ planet_suns[planet2]\n        local planet1_planet2_distance = distance(planet1_orbit,\
    \ planet2_orbit)\n        local planet1_sun_distance = distance(planet1_orbit,\
    \ planet1_sun)\n        local planet2_sun_distance = distance(planet2_orbit, planet2_sun)\n\
    \        local planet1_planet2_proximity = planet1_planet2_distance / planet1_sun_distance\n\
    \        local planet1_sun_proximity = planet1_sun_distance / planet2_sun_distance\n\
    \        local planet2_planet1_proximity = planet2_planet1_distance / planet2_sun_distance\n\
    \        local planet2_sun_proximity = planet2_sun_distance / planet1_sun_distance\n\
    \        local planet1_planet2_proximity = planet1_planet2_distance / planet2_sun_distance\n\
    \        local planet1_sun_proximity = planet1_sun_distance / planet1_sun_distance\n\
    \        local planet2_planet1_proximity = planet2_planet1_distance / planet1_sun_distance\n\
    \        local planet2_sun_proximity = planet2_sun_distance / planet2_sun_distance\n\
    \        local planet1_planet2_proximity = planet1_planet2_distance / planet2_sun_distance\n\
    \        local planet1_sun_proximity = planet1_sun_distance / planet1_sun_distance\n\
    \        local planet2_planet1_proximity = planet2_planet1_distance / planet1_sun_distance\n\
    \        local planet2_sun_proximity = planet2_sun_distance / planet2_sun_distance\n\
    \        local planet1_planet2_proximity = planet1_planet2_distance / planet2_sun_distance\n\
    \        local planet1_sun_proximity = planet1_sun_", "    local function dist(planet1,\
    \ planet2)\n        -- TODO: Implement this function\n    end\n    local function\
    \ sortByDist(planet1, planet2)\n        -- TODO: Implement this function\n   \
    \ end\n    return sortByDist(planet1, planet2)\nend", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function sort_by_distance(planet1, planet2)\n        local distances = {}\n\
    \        for i=1,8 do\n            distances[i] = distance(planet1, planet2[i])\n\
    \        end\n        table.sort(distances)\n        local index = 1\n       \
    \ for i=1,8 do\n            if distances[i] == distances[index] then\n       \
    \         index = index + 1\n            else\n                return {planet1[i],\
    \ planet2[i]}\n            end\n        end\n    end\n    return sort_by_distance(planet1,\
    \ planet2)\nend", "    local planets = {\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\",\n    }\n    local planet1 = planets[planet1]\n\
    \    local planet2 = planets[planet2]\n    local sun = math.rad(math.pi/2)\n \
    \   local orbit1 = math.rad(planet1 .. \"orbit\")\n    local orbit2 = math.rad(planet2\
    \ .. \"orbit\")\n    local distance = math.sqrt((math.pow(orbit1-sun,2)) + (math.pow(orbit2-sun,2)))\n\
    \    local proximity = math.abs((math.sin(math.rad(planet1 .. \"orbit\")) - math.sin(math.rad(planet2\
    \ .. \"orbit\"))))\n    return proximity, distance\nend", "    local function\
    \ distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local\
    \ function compare(x, y)\n        return distance(x, y) < distance(y, x)\n   \
    \ end\n    local function compare2(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare3(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function compare4(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare5(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare6(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare7(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n  \
    \  local function compare8(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare9(x, y)\n        return distance(x, y)\
    \ < distance(y, x)\n    end\n    local function compare10(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare11(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare12(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare13(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n \
    \   local function compare14(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare15(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function compare16(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare17(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare18(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare19(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n \
    \   local function compare20(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare21(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function compare22(x, y)\n        return\
    \ distance(x, y) < distance(y, x)\n    end\n    local function compare23(x, y)\n\
    \        return distance(x, y) < distance(y, x)\n    end\n    local function compare24(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ compare25(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n \
    \   local function compare26(x, y)\n        return distance(x, y) < distance(y,\
    \ x)\n    end\n    local function compare27(x, y)\n        return distance(x,\
    \ y) < distance(y, x)\n    end\n    local function compare28(x, y)\n        return\
    \ distance(x, ", "    local function distance(planet1, planet2)\n        -- TODO:\
    \ Write the function here\n    end\n    local function compare(planet1, planet2)\n\
    \        -- TODO: Write the function here\n    end\n    local function compare2(planet1,\
    \ planet2)\n        -- TODO: Write the function here\n    end\n    local function\
    \ compare3(planet1, planet2)\n        -- TODO: Write the function here\n    end\n\
    \    local function compare4(planet1, planet2)\n        -- TODO: Write the function\
    \ here\n    end\n    local function compare5(planet1, planet2)\n        -- TODO:\
    \ Write the function here\n    end\n    local function compare6(planet1, planet2)\n\
    \        -- TODO: Write the function here\n    end\n    local function compare7(planet1,\
    \ planet2)\n        -- TODO: Write the function here\n    end\n    local function\
    \ compare8(planet1, planet2)\n        -- TODO: Write the function here\n    end\n\
    \    local function compare9(planet1, planet2)\n        -- TODO: Write the function\
    \ here\n    end\n    local function compare10(planet1, planet2)\n        -- TODO:\
    \ Write the function here\n    end\n    local function compare11(planet1, planet2)\n\
    \        -- TODO: Write the function here\n    end\n    local function compare12(planet1,\
    \ planet2)\n        -- TODO: Write the function here\n    end\n    local function\
    \ compare13(planet1, planet2)\n        -- TODO: Write the function here\n    end\n\
    \    local function compare14(planet1, planet2)\n        -- TODO: Write the function\
    \ here\n    end\n    local function compare15(planet1, planet2)\n        -- TODO:\
    \ Write the function here\n    end\n    local function compare16(planet1, planet2)\n\
    \        -- TODO: Write the function here\n    end\n    local function compare17(planet1,\
    \ planet2)\n        -- TODO: Write the function here\n    end\n    local function\
    \ compare18(planet1, planet2)\n        -- TODO: Write the function here\n    end\n\
    \    local function compare19(planet1, planet2)\n        -- TODO: Write the function\
    \ here\n    end\n    local function compare20(planet1, planet2)\n        -- TODO:\
    \ Write the function here\n    end\n    local function compare21(planet1, planet2)\n\
    \        -- TODO: Write the function here\n    end\n    local function compare22(planet1,\
    \ planet2)\n        -- ", "    local planets = {\n        \"Mercury\",\n     \
    \   \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n\
    \        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ function distance(planet1, planet2)\n        local distance = math.sqrt((planet1.x\
    \ - planet2.x) * (planet1.x - planet2.x) + (planet1.y - planet2.y) * (planet1.y\
    \ - planet2.y) + (planet1.z - planet2.z) * (planet1.z - planet2.z))\n        return\
    \ distance\n    end\n    local function sortByDistance(planet1, planet2)\n   \
    \     local distance = distance(planet1, planet2)\n        return distance\n \
    \   end\n    local function sortByDistance2(planet1, planet2)\n        local distance\
    \ = distance(planet1, planet2)\n        return distance\n    end\n    local function\
    \ sortByDistance3(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        return distance\n    end\n    local function sortByDistance4(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        return\
    \ distance\n    end\n    local function sortByDistance5(planet1, planet2)\n  \
    \      local distance = distance(planet1, planet2)\n        return distance\n\
    \    end\n    local function sortByDistance6(planet1, planet2)\n        local\
    \ distance = distance(planet1, planet2)\n        return distance\n    end\n  \
    \  local function sortByDistance7(planet1, planet2)\n        local distance =\
    \ distance(planet1, planet2)\n        return distance\n    end\n    local function\
    \ sortByDistance8(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        return distance\n    end\n    local function sortByDistance9(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        return\
    \ distance\n    end\n    local function sortByDistance10(planet1, planet2)\n \
    \       local distance = distance(planet1, planet2)\n        return distance\n\
    \    end\n    local function sortByDistance11(planet1, planet2)\n        local\
    \ distance = distance(planet1, planet2)\n        return distance\n    end\n  \
    \  local function sortByDistance12(planet1, planet2)\n        local distance =\
    \ distance(planet1, planet2)\n        return distance\n    end\n    local function\
    \ sortByDistance13(planet1, planet2)\n        local distance = distance(", " \
    \   local function dist(planet1, planet2)\n        -- Your code here\n    end\n\
    \    return dist(planet1, planet2)\nend", "    local planets = {\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    }\n   \
    \ local function distance(p1, p2)\n        -- The distance between two planets\
    \ is given by the distance between \n        -- the orbit of planet 1 and the\
    \ orbit of planet 2. \n        -- The distance is calculated using the formula:\n\
    \        --     distance = sqrt( (x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2 )\n \
    \       local x1, y1, z1 = p1:getOrbit()\n        local x2, y2, z2 = p2:getOrbit()\n\
    \        return math.sqrt( (x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2 )\n    end\n\
    \    local function sortByProximity(planet1, planet2)\n        local distances\
    \ = {}\n        for _, planet in ipairs(planets) do\n            distances[planet]\
    \ = distance(planet1, planet)\n        end\n        distances = table.sort(distances)\n\
    \        local results = {}\n        for _, planet in ipairs(planets) do\n   \
    \         if distances[planet] == distances[planets[1]] then\n               \
    \ results[#results + 1] = {planet, distances[planet]}\n            end\n     \
    \   end\n        return results[1]\n    end\n    return sortByProximity(planet1,\
    \ planet2)\nend", "    local function distance(p1, p2)\n        local function\
    \ distance(p1, p2)\n            local function distance(p1, p2)\n            \
    \    local function distance(p1, p2)\n                    local function distance(p1,\
    \ p2)\n                        local function distance(p1, p2)\n             \
    \               local function distance(p1, p2)\n                            \
    \    local function distance(p1, p2)\n                                    local\
    \ function distance(p1, p2)\n                                        local function\
    \ distance(p1, p2)\n                                            local function\
    \ distance(p1, p2)\n                                                local function\
    \ distance(p1, p2)\n                                                    local\
    \ function distance(p1, p2)\n                                                \
    \        local function distance(p1, p2)\n                                   \
    \                         local function distance(p1, p2)\n                  \
    \                                              local function distance(p1, p2)\n\
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \               local function distance(p1, p2)\n                            \
    \                                                local function distance(p1, p2)\n\
    \                                                                            \
    \    local function distance(p1, p2)\n                                       \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \            local function distance(p1, p2)\n                               \
    \                                                             local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(planet1,\
    \ planet2)\n        -- TODO: Write a function that calculates the distance between\
    \ two planets\n        -- The function should take two planet names as strings\
    \ and return a\n        -- number representing the distance between them\n   \
    \     -- The function should return 0 if the two planets are not planets\n   \
    \     -- The function should return nil if the two planets are the same\n    \
    \    -- The function should return nil if the two planets are not planets\n  \
    \      -- The function should return nil if the two planets are the same\n   \
    \ end\n    local function sort_by_distance(planet1, planet2)\n        -- TODO:\
    \ Write a function that sorts the planets by the distance between \n        --\
    \ the orbit of planet1 and the orbit of planet2\n        -- The function should\
    \ take two planet names as strings and return a\n        -- table containing two\
    \ elements: the planet name and the distance between\n        -- the planets\n\
    \        -- The function should return nil if the two planets are not planets\n\
    \        -- The function should return nil if the two planets are the same\n \
    \       -- The function should return nil if the two planets are not planets\n\
    \        -- The function should return nil if the two planets are the same\n \
    \   end\n    local function sort_by_proximity(planet1, planet2)\n        -- TODO:\
    \ Write a function that sorts the planets by the proximity to the \n        --\
    \ the sun\n        -- The function should take two planet names as strings and\
    \ return a\n        -- table containing two elements: the planet name and the\
    \ distance between\n        -- the planets\n        -- The function should return\
    \ nil if the two planets are not planets\n        -- The function should return\
    \ nil if the two planets are the same\n        -- The function should return nil\
    \ if the two planets are not planets\n        -- The function should return nil\
    \ if the two planets are the same\n    end\n    local function sort_by_proximity_and_distance(planet1,\
    \ planet2)\n        -- TODO: Write a function that sorts the planets by the proximity\
    \ to the \n        -- the sun and distance between the planets\n        -- The\
    \ function should take two planet names as strings and return a\n        -- table\
    \ containing two elements: the planet name and the distance between\n        --\
    \ the planets\n        -- The function should return nil if the two planets are\
    \ not planets\n        -- The function should return nil if the two planets are\
    \ the same\n        -- The function should return nil if the two planets are not\
    \ planets\n        -- ", "    local function distance(p1, p2)\n        -- The\
    \ distance between two planets is given by the distance \n        -- between the\
    \ orbit of planet1 and the orbit of planet2.\n        -- The distance is given\
    \ by the distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the\
    \ distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        -- The distance is given by the distance between the \n        -- orbit\
    \ of planet1 and the orbit of planet2.\n        -- The distance is given by the ",
  "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function sortByDistance(planet1, planet2)\n        local distances\
    \ = {}\n        local orbit1 = orbit(planet1)\n        local orbit2 = orbit(planet2)\n\
    \        for i=1,8 do\n            distances[i] = distance(orbit1[1], orbit2[1])\n\
    \        end\n        table.sort(distances)\n        return distances\n    end\n\
    \    local distances = sortByDistance(planet1, planet2)\n    local planets = {}\n\
    \    for i=1,8 do\n        if distances[i] <= 0.1 then\n            table.insert(planets,\
    \ planet1)\n        elseif distances[i] <= 0.3 then\n            table.insert(planets,\
    \ planet2)\n        else\n            table.insert(planets, planet1)\n       \
    \     table.insert(planets, planet2)\n        end\n    end\n    return planets\n\
    end", "    local function distance(a,b)\n        return math.sqrt(math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2))\n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance2(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance3(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance4(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance5(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance6(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance7(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance8(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance9(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance10(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n", "    local planets =\
    \ {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local planet1 = planets[planet1]\n    local planet2\
    \ = planets[planet2]\n    local sun = math.rad(math.pi/2)\n    local planet1Orbit\
    \ = math.rad(planet1 .. \"Orbit\")\n    local planet2Orbit = math.rad(planet2\
    \ .. \"Orbit\")\n    local planet1OrbitSun = math.rad(planet1 .. \"OrbitSun\"\
    )\n    local planet2OrbitSun = math.rad(planet2 .. \"OrbitSun\")\n    local planet1OrbitSun\
    \ = math.rad(planet1 .. \"OrbitSun\")\n    local planet2OrbitSun = math.rad(planet2\
    \ .. \"OrbitSun\")\n    local planet1OrbitSun = math.rad(planet1 .. \"OrbitSun\"\
    )\n    local planet2OrbitSun = math.rad(planet2 .. \"OrbitSun\")\n    local planet1OrbitSun\
    \ = math.rad(planet1 .. \"OrbitSun\")\n    local planet2OrbitSun = math.rad(planet2\
    \ .. \"OrbitSun\")\n    local planet1OrbitSun = math.rad(planet1 .. \"OrbitSun\"\
    )\n    local planet2OrbitSun = math.rad(planet2 .. \"OrbitSun\")\n    local planet1OrbitSun\
    \ = math.rad(planet1 .. \"OrbitSun\")\n    local planet2OrbitSun = math.rad(planet2\
    \ .. \"OrbitSun\")\n    local planet1OrbitSun = math.rad(planet1 .. \"OrbitSun\"\
    )\n    local planet2OrbitSun = math.rad(planet2 .. \"OrbitSun\")\n    local planet1OrbitSun\
    \ = math.rad(planet1 .. \"OrbitSun\")\n    local planet2OrbitSun = math.rad(planet2\
    \ .. \"OrbitSun\")\n    local planet1OrbitSun = math.rad(planet1 .. \"OrbitSun\"\
    )\n    local planet2OrbitSun = math.rad(plan", "    local planets = {\n      \
    \  \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n \
    \       \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    }\n    local planet1 = planets[planet1]\n    local planet2 = planets[planet2]\n\
    \    local sun = math.rad(math.pi/2)\n    local planet1_orbit = math.rad(planet1\
    \ .. \"orbit\")\n    local planet2_orbit = math.rad(planet2 .. \"orbit\")\n  \
    \  local planet1_sun = math.rad(planet1 .. \"sun\")\n    local planet2_sun = math.rad(planet2\
    \ .. \"sun\")\n    local planet1_planet2_distance = math.rad(planet1 .. \"orbit\"\
    \ .. \"sun\")\n    local planet1_planet2_distance = math.rad(planet1 .. \"orbit\"\
    \ .. \"orbit\")\n    local planet1_planet2_distance = math.rad(planet1 .. \"orbit\"\
    \ .. \"orbit\" .. \"sun\")\n    local planet1_planet2_distance = math.rad(planet1\
    \ .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"sun\")\n    local planet1_planet2_distance\
    \ = math.rad(planet1 .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"\
    sun\")\n    local planet1_planet2_distance = math.rad(planet1 .. \"orbit\" ..\
    \ \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"sun\")\n    local planet1_planet2_distance\
    \ = math.rad(planet1 .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"\
    orbit\" .. \"orbit\" .. \"sun\")\n    local planet1_planet2_distance = math.rad(planet1\
    \ .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\"\
    \ .. \"orbit\" .. \"sun\")\n    local planet1_planet2_distance = math.rad(planet1\
    \ .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\" .. \"orbit\"\
    \ .. \"orbit\" .. \"orbit\" .. \"sun\")\n    local planet1_planet2_distance =\
    \ math.rad(planet1 .. \"orbit\" .. \"orbit\" .. \"orbit\" ", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\"\n    }\n    local function distance(p1, p2)\n        -- The distance\
    \ between two planets is given by the distance \n        -- between their orbits.\n\
    \        local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                local function distance(p1, p2)\n                    local\
    \ function distance(p1, p2)\n                        local function distance(p1,\
    \ p2)\n                            local function distance(p1, p2)\n         \
    \                       local function distance(p1, p2)\n                    \
    \                local function distance(p1, p2)\n                           \
    \             local function distance(p1, p2)\n                              \
    \              local function distance(p1, p2)\n                             \
    \                   local function distance(p1, p2)\n                        \
    \                            local function distance(p1, p2)\n               \
    \                                         local function distance(p1, p2)\n  \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n", "    local function distance(planet1,\
    \ planet2)\n        local function distance_between(planet1, planet2)\n      \
    \      local function distance_between(planet1, planet2)\n                local\
    \ function distance_between(planet1, planet2)\n                    local function\
    \ distance_between(planet1, planet2)\n                        local function distance_between(planet1,\
    \ planet2)\n                            local function distance_between(planet1,\
    \ planet2)\n                                local function distance_between(planet1,\
    \ planet2)\n                                    local function distance_between(planet1,\
    \ planet2)\n                                        local function distance_between(planet1,\
    \ planet2)\n                                            local function distance_between(planet1,\
    \ planet2)\n                                                local function distance_between(planet1,\
    \ planet2)\n                                                    local function\
    \ distance_between(planet1, planet2)\n                                       \
    \                 local function distance_between(planet1, planet2)\n        \
    \                                                    local function distance_between(planet1,\
    \ planet2)\n                                                                local\
    \ function distance_between(planet1, planet2)\n                              \
    \                                      local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \       local function distance_between(planet1, planet2)\n                  \
    \                                                          local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \               local function distance_between(planet1, planet2)\n          \
    \                                                                          local\
    \ function distance_between(planet1, planet2)\n                              \
    \                                                          local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \                           local function distance_between(planet1, planet2)\n\
    \                                                                            \
    \                    local function distance_between(planet1, planet2)\n     \
    \                                                                            \
    \                   local function distance_between(planet1, planet2)\n      \
    \                                                                            \
    \                      local function distance_between(planet1, planet2)\n   \
    \                                                                            \
    \                             local function distance_between(planet1, planet2)\n\
    \                                                                            \
    \                                    local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \                                                   local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \                                                       local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \                                                           local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \                                                               local function\
    \ distance_between(planet1, planet2)\n                                       \
    \                                                                            \
    \                 local function distance_between(planet1, planet2)\n        \
    \                                                                            \
    \                                                    local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \                                                                           local\
    \ function distance_between(planet1, planet2)\n                              \
    \                                                                            \
    \                                      local function distance_between(planet1,\
    \ planet2)\n                                                                 \
    \                                                                            \
    \       local function distance_between(planet1, planet2)\n                  \
    \                                                                            \
    \                                                          local function distance_between",
  "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2 + (a.y-b.y)^2\
    \ + (a.z-b.z)^2)\n    end\n    local function sortByDistance(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance2(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance3(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance4(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance5(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance6(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance7(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance8(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance9(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance10(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance11(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance12(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance13(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance14(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance15(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance16(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance17(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance18(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance19(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance20(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance21(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance22(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance23(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance24(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance25(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance26(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance27(a,b)\n        return\
    \ distance(a,b", "    local planets = {\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local planet1, planet2\
    \ = string.lower(planet1), string.lower(planet2)\n    local orbit1, orbit2 = orbits[planet1],\
    \ orbits[planet2]\n    local sun = orbits[sun]\n    local sun_distance = math.sqrt((sun_x\
    \ - orbit1.x)^2 + (sun_y - orbit1.y)^2 + (sun_z - orbit1.z)^2)\n    local sun_distance\
    \ = math.sqrt((sun_x - orbit2.x)^2 + (sun_y - orbit2.y)^2 + (sun_z - orbit2.z)^2)\n\
    \    local distances = {}\n    for i = 1, #planets do\n        local distance\
    \ = math.sqrt((planets[i] - orbit1.x)^2 + (planets[i] - orbit1.y)^2 + (planets[i]\
    \ - orbit1.z)^2)\n        distances[i] = distance\n    end\n    local sorted_distances\
    \ = table.sort(distances, function(a, b) return a < b end)\n    local sorted_planets\
    \ = {}\n    for i = 1, #sorted_distances do\n        local planet = planets[math.random(1,\
    \ #planets)]\n        local distance = sorted_distances[i]\n        if distance\
    \ < sun_distance then\n            table.insert(sorted_planets, planet)\n    \
    \    end\n    end\n    return sorted_planets\nend", "    local planets = {\n \
    \       \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\"\
    ,\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"\
    Neptune\"\n    }\n    local function distance(a, b)\n        local d = 0\n   \
    \     for i = 1, #planets do\n            d = d + (planets[i] - a) * (planets[i]\
    \ - b)\n        end\n        return math.sqrt(d)\n    end\n    local function\
    \ sortByDistance(planet1, planet2)\n        local distance1 = distance(planet1,\
    \ planet2)\n        local distance2 = distance(planet2, planet1)\n        if distance1\
    \ < distance2 then\n            return planet1\n        else\n            return\
    \ planet2\n        end\n    end\n    local function sortByProximity(planet1, planet2)\n\
    \        local distance1 = distance(planet1, planet2)\n        local distance2\
    \ = distance(planet2, planet1)\n        if distance1 < distance2 then\n      \
    \      return distance1\n        else\n            return distance2\n        end\n\
    \    end\n    local function sortByProximityAndDistance(planet1, planet2)\n  \
    \      local distance1 = distance(planet1, planet2)\n        local distance2 =\
    \ distance(planet2, planet1)\n        if distance1 < distance2 then\n        \
    \    return distance1, planet1\n        else\n            return distance2, planet2\n\
    \        end\n    end\n    local function sortByProximityAndDistanceAndPlanets(planet1,\
    \ planet2)\n        local distance1, planet1 = sortByProximityAndDistance(planet1,\
    \ planet2)\n        local distance2, planet2 = sortByProximityAndDistance(planet2,\
    \ planet1)\n        if distance1 < distance2 then\n            return distance1,\
    \ planet1, planet2\n        else\n            return distance2, planet1, planet2\n\
    \        end\n    end\n    local function sortByProximityAndDistanceAndPlanetsAndPlanets(planet1,\
    \ planet2)\n        local distance1, planet1, planet2 = sortByProximityAndDistanceAndPlanets(planet1,\
    \ planet2)\n        local distance2, planet2, planet1 = sortByProximityAndDistanceAndPlanets(planet2,\
    \ planet1)\n        if distance1 < distance2 then\n            return distance1,\
    \ planet1, planet2, planet1\n        else\n            return distance2, planet1,\
    \ planet2, planet2\n        end\n    end\n    local function sortByProximityAndDistanceAnd",
  "    local planets = {\n        Mercury = {\n            Orbit = { x = 0.175, y\
    \ = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z =\
    \ -0.003 },\n        },\n        Venus = {\n            Orbit = { x = 0.175, y\
    \ = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z =\
    \ -0.003 },\n        },\n        Earth = {\n            Orbit = { x = 0.175, y\
    \ = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z =\
    \ -0.003 },\n        },\n        Mars = {\n            Orbit = { x = 0.175, y\
    \ = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z =\
    \ -0.003 },\n        },\n        Jupiter = {\n            Orbit = { x = 0.175,\
    \ y = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z\
    \ = -0.003 },\n        },\n        Saturn = {\n            Orbit = { x = 0.175,\
    \ y = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z\
    \ = -0.003 },\n        },\n        Uranus = {\n            Orbit = { x = 0.175,\
    \ y = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z\
    \ = -0.003 },\n        },\n        Neptune = {\n            Orbit = { x = 0.175,\
    \ y = -0.003, z = -0.003 },\n            Distance = { x = 0.175, y = -0.003, z\
    \ = -0.003 },\n        },\n    }\n    local planet1 = planet1 -- Mercury, Venus,\
    \ Earth, Mars, Jupiter, \n    --Saturn, Uranus, Neptune\n    local planet2 = planet2\
    \ -- Mercury, Venus, Earth, Mars, Jupiter, \n    --Saturn, Uranus, Neptune\n \
    \   local planet1Orbit = planets[planet1].Orbit -- { x = 0.175, y = -0.003, \n\
    \    --z = -0.003 }\n    local planet2Orbit = planets[planet2].Orbit -- { x =\
    \ 0.175, y = -0.003, \n    --z = -0.003 }\n    local planet1Distance = planets[planet1].",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local function distance(a, b)\n        -- The\
    \ distance between two planets is given by the distance between \n        -- the\
    \ orbit of planet a and the orbit of planet b\n        local function distance2(a,\
    \ b)\n            -- The distance between two planets is given by the distance\
    \ between \n            -- the orbit of planet a and the orbit of planet b\n \
    \           local function distance3(a, b)\n                -- The distance between\
    \ two planets is given by the distance between \n                -- the orbit\
    \ of planet a and the orbit of planet b\n                local function distance4(a,\
    \ b)\n                    -- The distance between two planets is given by the\
    \ distance between \n                    -- the orbit of planet a and the orbit\
    \ of planet b\n                    local function distance5(a, b)\n          \
    \              -- The distance between two planets is given by the distance between\
    \ \n                        -- the orbit of planet a and the orbit of planet b\n\
    \                        local function distance6(a, b)\n                    \
    \        -- The distance between two planets is given by the distance between\
    \ \n                            -- the orbit of planet a and the orbit of planet\
    \ b\n                            local function distance7(a, b)\n            \
    \                    -- The distance between two planets is given by the distance\
    \ between \n                                -- the orbit of planet a and the orbit\
    \ of planet b\n                                local function distance8(a, b)\n\
    \                                    -- The distance between two planets is given\
    \ by the distance between \n                                    -- the orbit of\
    \ planet a and the orbit of planet b\n                                    local\
    \ function distance9(a, b)\n                                        -- The distance\
    \ between two planets is given by the distance between \n                    \
    \                    -- the orbit of planet a and the orbit of planet b\n    \
    \                                    local function distance10(a, b)\n       \
    \                                     -- The distance between two planets is given\
    \ by the distance between \n                                            -- the\
    \ orbit of planet a and the orbit of planet b\n                              \
    \              local function distance11(a, b)\n                             \
    \                   -- The distance between two planets is given by the distance\
    \ between \n                                                -- the orbit of planet\
    \ a and the orbit of planet b\n                                              \
    \  local function distance12(a, b)\n                                         \
    \           -- The distance between two planets is given by the distance between\
    \ \n                                                    -- the orbit of planet\
    \ a and the orbit of planet b\n                                              \
    \      local function distance13(a, b)\n                                     \
    \                   -- The distance between two planets is given by the distance\
    \ between \n                                                        ", "    local\
    \ function distance(p1, p2)\n        -- The distance between two planets is given\
    \ by the distance \n        -- between their orbits.\n        local function distance(p1,\
    \ p2)\n            -- The distance between two planets is given by the distance\
    \ \n            -- between their orbits.\n            local function distance(p1,\
    \ p2)\n                -- The distance between two planets is given by the distance\
    \ \n                -- between their orbits.\n                local function distance(p1,\
    \ p2)\n                    -- The distance between two planets is given by the\
    \ distance \n                    -- between their orbits.\n                  \
    \  local function distance(p1, p2)\n                        -- The distance between\
    \ two planets is given by the distance \n                        -- between their\
    \ orbits.\n                        local function distance(p1, p2)\n         \
    \                   -- The distance between two planets is given by the distance\
    \ \n                            -- between their orbits.\n                   \
    \         local function distance(p1, p2)\n                                --\
    \ The distance between two planets is given by the distance \n               \
    \                 -- between their orbits.\n                                local\
    \ function distance(p1, p2)\n                                    -- The distance\
    \ between two planets is given by the distance \n                            \
    \        -- between their orbits.\n                                    local function\
    \ distance(p1, p2)\n                                        -- The distance between\
    \ two planets is given by the distance \n                                    \
    \    -- between their orbits.\n                                        local function\
    \ distance(p1, p2)\n                                            -- The distance\
    \ between two planets is given by the distance \n                            \
    \                -- between their orbits.\n                                  \
    \          local function distance(p1, p2)\n                                 \
    \               -- The distance between two planets is given by the distance \n\
    \                                                -- between their orbits.\n  \
    \                                              local function distance(p1, p2)\n\
    \                                                    -- The distance between two\
    \ planets is given by the distance \n                                        \
    \            -- between their orbits.\n                                      \
    \              local function distance(p1, p2)\n                             \
    \                           -- The distance between two planets is given by the\
    \ distance \n                                                        -- between\
    \ their orbits.\n                                                        local\
    \ function distance(p1, p2)\n                                                \
    \            -- The distance between two planets is given by the distance \n \
    \                                                           -- between their orbits.\n\
    \                                                            local function distance(p1,\
    \ p2)\n                                                                -- The\
    \ distance between two planets is given by the distance \n                   \
    \                                             -- between their orbits.\n     \
    \                                                           local function distance(p1,\
    \ p2)\n                                                                    --\
    \ The distance between two planets is given by the distance \n               \
    \                                                     -- between their orbits.\n\
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \               -- The distance between two planets is given by the distance \n\
    \                                                                        -- between\
    \ their orbits.\n                                                            \
    \            local function distance(p1, p2)\n                               \
    \                                             -- The distance between two planets\
    \ is given by the distance \n                                                \
    \                            -- between their orbits.\n                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \          -- The distance between two planets is ", "    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function planetsBetween(planet1, planet2)\n        local orbit1 = getOrbit(planet1)\n\
    \        local orbit2 = getOrbit(planet2)\n        local orbits = setmetatable({},\
    \ {\n            __index = function(t, k)\n                local planet = k\n\
    \                local orbit = getOrbit(planet)\n                local distance\
    \ = distance(orbit[1], orbit[2])\n                local planets = setmetatable({},\
    \ {\n                    __index = function(t, k)\n                        local\
    \ planet = k\n                        local orbit = getOrbit(planet)\n       \
    \                 local distance = distance(orbit[1], orbit[2])\n            \
    \            if distance < 0.1 then\n                            local planets\
    \ = setmetatable({}, {\n                                __index = function(t,\
    \ k)\n                                    local planet = k\n                 \
    \                   local orbit = getOrbit(planet)\n                         \
    \           local distance = distance(orbit[1], orbit[2])\n                  \
    \                  if distance < 0.1 then\n                                  \
    \      local planets = setmetatable({}, {\n                                  \
    \          __index = function(t, k)\n                                        \
    \        local planet = k\n                                                local\
    \ orbit = getOrbit(planet)\n                                                local\
    \ distance = distance(orbit[1], orbit[2])\n                                  \
    \              if distance < 0.1 then\n                                      \
    \              local planets = setmetatable({}, {\n                          \
    \                              __index = function(t, k)\n                    \
    \                                        local planet = k\n                  \
    \                                          local orbit = getOrbit(planet)\n  \
    \                                                          local distance = distance(orbit[1],\
    \ orbit[2])\n                                                            if distance\
    \ < 0.1 then\n                                                               \
    \ return planets\n                                                           \
    \ end\n                                                        end\n         \
    \                                           })\n                             \
    \                   end\n                                                return\
    \ planets\n                                            end\n                 \
    \                       })\n                                    end\n        \
    \                            return planets\n                                end\n\
    \                            })\n                        end\n               \
    \         return planets\n                    end\n                })\n      \
    \          return planets\n            end\n        })\n        for i = 1, #orbits,\
    \ 1 do\n            local planet = orbits[i]\n            local orbit = getOrbit(planet)\n\
    \            local distance = distance(orbit[1], orbit[2])\n            if distance\
    \ < 0.1 then\n                local planets = setmetatable({}, {\n           \
    \         __index = function(t, k)\n                        local planet = k\n\
    \                        local orbit = getOrbit(planet)\n                    \
    \    local distance = distance(orbit[1], orbit[2])\n                        if\
    \ distance < 0.1 then\n                            local planets = setmetatable({},\
    \ {\n                                __", "    local function distance(x, y)\n\
    \        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function compare(x,\
    \ y)\n        return distance(x, y) < distance(y, x)\n    end\n    local function\
    \ sortByProximity(planet1, planet2)\n        local function sortByDistance(x,\
    \ y)\n            return distance(x, y) < distance(y, x)\n        end\n      \
    \  local function sortByOrbit(x, y)\n            return distance(x, y) < distance(y,\
    \ x)\n        end\n        local function sortByProximityAndOrbit(x, y)\n    \
    \        return distance(x, y) < distance(y, x) or distance(x, y) < distance(y,\
    \ x)\n        end\n        return table.sort({\n            planet1 = table.sort({\n\
    \                planet2 = table.sort({\n                    planet1 = table.sort({\n\
    \                        planet2 = table.sort({\n                            planet1\
    \ = table.sort({\n                                planet2 = table.sort({\n   \
    \                                 planet1 = table.sort({\n                   \
    \                     planet2 = table.sort({\n                               \
    \             planet1 = table.sort({\n                                       \
    \         planet2 = table.sort({\n                                           \
    \         planet1 = table.sort({\n                                           \
    \             planet2 = table.sort({\n                                       \
    \                     planet1 = table.sort({\n                               \
    \                                 planet2 = table.sort({\n                   \
    \                                                 planet1 = table.sort({\n   \
    \                                                                     planet2\
    \ = table.sort({\n                                                           \
    \                 planet1 = table.sort({\n                                   \
    \                                             planet2 = table.sort({\n       \
    \                                                                            \
    \ planet1 = table.sort({\n                                                   \
    \                                     planet2 = table.sort({\n               \
    \                                                                            \
    \ planet1 = table.sort({\n                                                   \
    \                                             planet2 = table.sort({\n       \
    \                                                                            \
    \                 planet1 = table.sort({\n                                   \
    \                                                                     planet2\
    \ = table.sort({\n                                                           \
    \                                                 planet1 = table.sort({\n   \
    \                                                                            \
    \                                 planet2 = table.sort({\n                   \
    \                                                                            \
    \                     planet1 = table.sort({\n                               \
    \                                                                            \
    \             planet2 = table.sort({\n                                       \
    \                                                                            \
    \         planet1 = table.sort({\n                                           \
    \                                                                            \
    \         planet2 = table.sort({\n                                           \
    \                                                                            \
    \             planet1 = table.sort({\n                                       \
    \                                                                            \
    \                     planet2 = table.sort({\n                               \
    \                                                                            \
    \                                 planet1 = table.sort({\n                   \
    \                                                                            \
    \                                                 planet2 = table.sort({\n   \
    \                                                                            \
    \                                                                     planet1\
    \ = table.sort({\n                                                           \
    \                                                                            \
    \                 planet2 = table.sort({\n                                   \
    \                                                                            \
    \                                             planet1 = table.sort({\n       \
    \                                                                            \
    \                                                                            \
    \ planet2 = table.sort({\n                                                   \
    \                                                                            \
    \                                     planet1 = table.sort({\n               \
    \                                                                            \
    \                                                                            \
    \ planet2 = table.sort({\n                                                   \
    \                                                                            \
    \                                             planet1 = table.sort({\n       \
    \                                                                            \
    \                                                                            \
    \                 planet2 = table.sort({\n                                   \
    \                                                                            \
    \                                                                     planet1\
    \ = table.sort({\n", "    local function distance(p1, p2)\n        local function\
    \ distance(p1, p2)\n            local function distance(p1, p2)\n            \
    \    local function distance(p1, p2)\n                    local function distance(p1,\
    \ p2)\n                        local function distance(p1, p2)\n             \
    \               local function distance(p1, p2)\n                            \
    \    local function distance(p1, p2)\n                                    local\
    \ function distance(p1, p2)\n                                        local function\
    \ distance(p1, p2)\n                                            local function\
    \ distance(p1, p2)\n                                                local function\
    \ distance(p1, p2)\n                                                    local\
    \ function distance(p1, p2)\n                                                \
    \        local function distance(p1, p2)\n                                   \
    \                         local function distance(p1, p2)\n                  \
    \                                              local function distance(p1, p2)\n\
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \               local function distance(p1, p2)\n                            \
    \                                                local function distance(p1, p2)\n\
    \                                                                            \
    \    local function distance(p1, p2)\n                                       \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \            local function distance(p1, p2)\n                               \
    \                                                             local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function dist(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    return dist(planet1,\
    \ planet2)\nend\nprint(bf(\"Mercury\", \"Venus\")) -- prints (\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\nprint(bf(\"Mercury\", \"Earth\")) -- prints (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nprint(bf(\"Mercury\"\
    , \"Mars\")) -- prints (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\nprint(bf(\"Mercury\", \"Jupiter\")) --\
    \ prints (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\nprint(bf(\"Mercury\", \"Saturn\")) -- prints (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\nprint(bf(\"Mercury\", \"Uranus\")) -- prints (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nprint(bf(\"Mercury\"\
    , \"Neptune\")) -- prints (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\nprint(bf(\"Venus\", \"Earth\")) -- prints\
    \ (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\nprint(bf(\"Venus\", \"Mars\")) -- prints (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nprint(bf(\"\
    Venus\", \"Jupiter\")) -- prints (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nprint(bf(\"Venus\", \"Saturn\"\
    )) -- prints (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\nprint(bf(\"Venus\", \"Uranus\")) -- prints (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter", "    local planets = {\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    }\n    local function distance(planet1, planet2)\n        local distance\
    \ = math.sqrt((math.pow(planet1.x - planet2.x, 2) + math.pow(planet1.y - planet2.y,\
    \ 2)) * math.cos(math.atan2(planet1.y - planet2.y, planet1.x - planet2.x)))\n\
    \        return distance\n    end\n    local function sortByDistance(planet1,\
    \ planet2)\n        return distance(planet1, planet2)\n    end\n    local function\
    \ sortByDistance2(planet1, planet2)\n        return distance(planet2, planet1)\n\
    \    end\n    local function sortByDistance3(planet1, planet2)\n        return\
    \ distance(planet1, planet2)\n    end\n    local function sortByDistance4(planet1,\
    \ planet2)\n        return distance(planet2, planet1)\n    end\n    local function\
    \ sortByDistance5(planet1, planet2)\n        return distance(planet1, planet2)\n\
    \    end\n    local function sortByDistance6(planet1, planet2)\n        return\
    \ distance(planet2, planet1)\n    end\n    local function sortByDistance7(planet1,\
    \ planet2)\n        return distance(planet1, planet2)\n    end\n    local function\
    \ sortByDistance8(planet1, planet2)\n        return distance(planet2, planet1)\n\
    \    end\n    local function sortByDistance9(planet1, planet2)\n        return\
    \ distance(planet1, planet2)\n    end\n    local function sortByDistance10(planet1,\
    \ planet2)\n        return distance(planet2, planet1)\n    end\n    local function\
    \ sortByDistance11(planet1, planet2)\n        return distance(planet1, planet2)\n\
    \    end\n    local function sortByDistance12(planet1, planet2)\n        return\
    \ distance(planet2, planet1)\n    end\n    local function sortByDistance13(planet1,\
    \ planet2)\n        return distance(planet1, planet2)\n    end\n    local function\
    \ sortByDistance14(planet1, planet2)\n        return distance(planet2, planet1)\n\
    \    end\n    local function sortByDistance15(planet1, planet2)\n        return\
    \ distance(planet1, planet2)\n    end\n    local function sortByDistance16(planet1,\
    \ planet", "    local function distance(p1, p2)\n        -- The distance between\
    \ two planets is given by the distance between \n        -- the orbit of planet1\
    \ and the orbit of planet2. \n        -- The distance is given by the distance\
    \ between the orbit of planet1 \n        -- and the orbit of planet2, divided\
    \ by the distance between the \n        -- orbit of planet1 and the orbit of planet2.\n\
    \        local function distance(p1, p2)\n            -- The distance between\
    \ two planets is given by the distance between \n            -- the orbit of planet1\
    \ and the orbit of planet2. \n            -- The distance is given by the distance\
    \ between the orbit of planet1 \n            -- and the orbit of planet2, divided\
    \ by the distance between the \n            -- orbit of planet1 and the orbit\
    \ of planet2.\n            local function distance(p1, p2)\n                --\
    \ The distance between two planets is given by the distance between \n       \
    \         -- the orbit of planet1 and the orbit of planet2. \n               \
    \ -- The distance is given by the distance between the orbit of planet1 \n   \
    \             -- and the orbit of planet2, divided by the distance between the\
    \ \n                -- orbit of planet1 and the orbit of planet2.\n          \
    \      local function distance(p1, p2)\n                    -- The distance between\
    \ two planets is given by the distance between \n                    -- the orbit\
    \ of planet1 and the orbit of planet2. \n                    -- The distance is\
    \ given by the distance between the orbit of planet1 \n                    --\
    \ and the orbit of planet2, divided by the distance between the \n           \
    \         -- orbit of planet1 and the orbit of planet2.\n                    local\
    \ function distance(p1, p2)\n                        -- The distance between two\
    \ planets is given by the distance between \n                        -- the orbit\
    \ of planet1 and the orbit of planet2. \n                        -- The distance\
    \ is given by the distance between the orbit of planet1 \n                   \
    \     -- and the orbit of planet2, divided by the distance between the \n    \
    \                    -- orbit of planet1 and the orbit of planet2.\n         \
    \               local function distance(p1, p2)\n                            --\
    \ The distance between two planets is given by the distance between \n       \
    \                     -- the orbit of planet1 and the orbit of planet2. \n   \
    \                         -- The distance is given by the distance between the\
    \ orbit of planet1 \n                            -- and the orbit of planet2,\
    \ divided by the distance between the \n                            -- orbit of\
    \ planet1 and the orbit of planet2.\n                            local function\
    \ distance(p1, p2)\n                                -- The distance ", "    local\
    \ function dist(planet1, planet2)\n        local function dist2(planet1, planet2)\n\
    \            local function dist3(planet1, planet2)\n                local function\
    \ dist4(planet1, planet2)\n                    local function dist5(planet1, planet2)\n\
    \                        local function dist6(planet1, planet2)\n            \
    \                local function dist7(planet1, planet2)\n                    \
    \            local function dist8(planet1, planet2)\n                        \
    \            return 0\n                                end\n                 \
    \               return dist8\n                            end\n              \
    \              return dist6\n                        end\n                   \
    \     return dist5\n                    end\n                    return dist4\n\
    \                end\n                return dist3\n            end\n        \
    \    return dist2\n        end\n        return dist1\n    end\n    return dist(planet1,\
    \ planet2)\nend", "    local function distance(a,b)\n        return math.sqrt(math.pow(a.x-b.x,2)+math.pow(a.y-b.y,2)+math.pow(a.z-b.z,2))\n\
    \    end\n    local function compare(a,b)\n        return distance(a,b) \n   \
    \ end\n    local function sortByProximity(a,b)\n        return compare(a,b) \n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\
    \ \n    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\
    \ \n    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\
    \ \n    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\
    \ \n    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\
    \ \n    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\
    \ \n    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\
    \ \n    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByName(a,b)\n        return a.name < b.name\
    \ \n    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.",
  "    local function dist(planet1, planet2)\n        local function dist2(planet1,\
    \ planet2)\n            local function dist3(planet1, planet2)\n             \
    \   local function dist4(planet1, planet2)\n                    local function\
    \ dist5(planet1, planet2)\n                        local function dist6(planet1,\
    \ planet2)\n                            local function dist7(planet1, planet2)\n\
    \                                local function dist8(planet1, planet2)\n    \
    \                                return 0\n                                end\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n    end\nend",
  "    local function distance(x, y)\n        return math.sqrt(math.pow((x - y), 2))\n\
    \    end\n    local function sortByDistance(planet1, planet2)\n        local distances\
    \ = {}\n        for i = 1, #planets do\n            distances[i] = distance(planets[i],\
    \ planet2)\n        end\n        table.sort(distances)\n        local sortedPlanets\
    \ = {}\n        for i = 1, #distances do\n            sortedPlanets[i] = planets[i]\n\
    \        end\n        return sortedPlanets\n    end\n    local planets = sortByDistance(planet1,\
    \ planet2)\n    return planets\nend", "    local planets = {\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    }\n   \
    \ local function distance(x, y)\n        return math.sqrt(math.pow((x - y), 2)\
    \ + math.pow((y - x), 2))\n    end\n    local function compare(x, y)\n       \
    \ return distance(x, y) < distance(y, x)\n    end\n    local function findOrbit(planet1,\
    \ planet2)\n        local orbit = {}\n        for i = 1, #planets do\n       \
    \     local distance = distance(planets[i - 1], planets[i])\n            if distance\
    \ < 1 then\n                table.insert(orbit, planets[i])\n            end\n\
    \        end\n        table.sort(orbit, compare)\n        return orbit\n    end\n\
    \    local orbit = findOrbit(planet1, planet2)\n    local results = {}\n    for\
    \ i = 1, #orbit do\n        if orbit[i] ~= planet1 then\n            table.insert(results,\
    \ orbit[i])\n        end\n    end\n    return results\nend\nprint(bf(\"Mercury\"\
    , \"Earth\")) -- prints {\"Mercury\", \"Earth\"}\nprint(bf(\"Mercury\", \"Venus\"\
    )) -- prints {\"Mercury\", \"Venus\"}\nprint(bf(\"Mercury\", \"Mars\")) -- prints\
    \ {\"Mercury\", \"Mars\"}\nprint(bf(\"Mercury\", \"Jupiter\")) -- prints {\"Mercury\"\
    , \"Jupiter\"}\nprint(bf(\"Mercury\", \"Saturn\")) -- prints {\"Mercury\", \"\
    Saturn\"}\nprint(bf(\"Mercury\", \"Uranus\")) -- prints {\"Mercury\", \"Uranus\"\
    }\nprint(bf(\"Mercury\", \"Neptune\")) -- prints {\"Mercury\", \"Neptune\"}\n\
    print(bf(\"Venus\", \"Earth\")) -- prints {\"Venus\", \"Earth\"}\nprint(bf(\"\
    Venus\", \"Mars\")) -- prints {\"Venus\", \"Mars\"}\nprint(bf(\"Venus\", \"Jupiter\"\
    )) -- prints {\"Venus\", \"Jupiter\"}\nprint(bf(\"Venus\", \"Saturn\")) -- prints\
    \ {\"Venus\", \"Saturn\"}\nprint(bf(\"Venus\", \"Uranus\")) -- prints {\"Venus\"\
    , \"Uranus\"}\nprint(bf(\"Venus\", \"Neptune\")) -- prints {\"Venus\", \"Neptune\"\
    }\nprint(bf(\"Earth\", \"Mars\")) -- prints ", "    local planets = {}\n    local\
    \ sun = orbit_sun(planet1, planet2)\n    local sun_distance = orbit_distance(planet1,\
    \ planet2)\n    local sun_radius = orbit_radius(planet1, planet2)\n    local planet1_orbit\
    \ = orbit_planet(planet1)\n    local planet2_orbit = orbit_planet(planet2)\n \
    \   local planet1_distance = orbit_distance(planet1, planet1_orbit)\n    local\
    \ planet2_distance = orbit_distance(planet2, planet2_orbit)\n    local planet1_radius\
    \ = orbit_radius(planet1, planet1_orbit)\n    local planet2_radius = orbit_radius(planet2,\
    \ planet2_orbit)\n    local planet1_planet_name = orbit_planet_name(planet1)\n\
    \    local planet2_planet_name = orbit_planet_name(planet2)\n    local planet1_planet_orbit\
    \ = orbit_planet_orbit(planet1)\n    local planet2_planet_orbit = orbit_planet_orbit(planet2)\n\
    \    local planet1_planet_distance = orbit_distance(planet1, planet1_planet_orbit)\n\
    \    local planet2_planet_distance = orbit_distance(planet2, planet2_planet_orbit)\n\
    \    local planet1_planet_radius = orbit_radius(planet1, planet1_planet_orbit)\n\
    \    local planet2_planet_radius = orbit_radius(planet2, planet2_planet_orbit)\n\
    \    local planet1_planet_planet_name = orbit_planet_planet_name(planet1)\n  \
    \  local planet2_planet_planet_name = orbit_planet_planet_name(planet2)\n    local\
    \ planet1_planet_planet_orbit = orbit_planet_planet_orbit(planet1)\n    local\
    \ planet2_planet_planet_orbit = orbit_planet_planet_orbit(planet2)\n    local\
    \ planet1_planet_planet_distance = orbit_distance(planet1, planet1_planet_planet_orbit)\n\
    \    local planet2_planet_planet_distance = orbit_distance(planet2, planet2_planet_planet_orbit)\n\
    \    local planet1_planet_planet_radius = orbit_radius(planet1, planet1_planet_planet_orbit)\n\
    \    local planet2_planet_planet_radius = orbit_radius(planet2, planet2_planet_planet_orbit",
  "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function orbit(a,b)\n        return distance(a,b) <= math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function orbits(planet)\n        local orbits = {}\n     \
    \   for i=1,8 do\n            if orbit(planet,planets[string.sub(i,1,1)]) then\n\
    \                table.insert(orbits,planet)\n            end\n        end\n \
    \       table.sort(orbits,function(a,b)\n            return distance(a,b) \n \
    \       end)\n        return orbits\n    end\n    return orbits(planet1)..orbits(planet2)\n\
    end\nprint(bf(\"Mercury\",\"Venus\"))\nprint(bf(\"Mercury\",\"Earth\"))\nprint(bf(\"\
    Mercury\",\"Mars\"))\nprint(bf(\"Mercury\",\"Jupiter\"))\nprint(bf(\"Mercury\"\
    ,\"Saturn\"))\nprint(bf(\"Mercury\",\"Uranus\"))\nprint(bf(\"Mercury\",\"Neptune\"\
    ))\nprint(bf(\"Venus\",\"Earth\"))\nprint(bf(\"Venus\",\"Mars\"))\nprint(bf(\"\
    Venus\",\"Jupiter\"))\nprint(bf(\"Venus\",\"Saturn\"))\nprint(bf(\"Venus\",\"\
    Uranus\"))\nprint(bf(\"Venus\",\"Neptune\"))\nprint(bf(\"Earth\",\"Mars\"))\n\
    print(bf(\"Earth\",\"Jupiter\"))\nprint(bf(\"Earth\",\"Saturn\"))\nprint(bf(\"\
    Earth\",\"Uranus\"))\nprint(bf(\"Earth\",\"Neptune\"))\nprint(bf(\"Mars\",\"Jupiter\"\
    ))\nprint(bf(\"Mars\",\"Saturn\"))\nprint(bf(\"Mars\",\"Uranus\"))\nprint(bf(\"\
    Mars\",\"Neptune\"))\nprint(bf(\"Jupiter\",\"Saturn\"))\nprint(bf(\"Jupiter\"\
    ,\"Uranus\"))\nprint(bf(\"Jupiter\",\"Neptune\"))\nprint(bf(\"Saturn\",\"Uranus\"\
    ))\nprint(bf(\"Saturn\",\"Neptune\"))\nprint(bf(\"Uranus\",\"Neptune\"))", " \
    \   local function distance(a,b)\n        return math.sqrt(math.pow(a.x - b.x,\
    \ 2) + math.pow(a.y - b.y, 2))\n    end\n    local function sortByDistance(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance2(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance3(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance4(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance5(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance6(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance7(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance8(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance9(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance10(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance11(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance12(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance13(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance14(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance15(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance16(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance17(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance18(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance19(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance20(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance21(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance22(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance23(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance24(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance25(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance26(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance27(a,b)\n\
    \        return distance(a,b) \n    end\n    ", "    local function distance(p1,\
    \ p2)\n        local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                local function distance(p1, p2)\n                    local\
    \ function distance(p1, p2)\n                        local function distance(p1,\
    \ p2)\n                            local function distance(p1, p2)\n         \
    \                       local function distance(p1, p2)\n                    \
    \                local function distance(p1, p2)\n                           \
    \             local function distance(p1, p2)\n                              \
    \              local function distance(p1, p2)\n                             \
    \                   local function distance(p1, p2)\n                        \
    \                            local function distance(p1, p2)\n               \
    \                                         local function distance(p1, p2)\n  \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance2(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2)\n\
    \    end\n    local function distance3(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance4(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance5(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance6(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance7(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance8(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance9(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance10(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance11(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance12(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance13(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance14(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance15(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance16(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance17(a,b)", "    local function distance(p1,\
    \ p2)\n        local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                local function distance(p1, p2)\n                    local\
    \ function distance(p1, p2)\n                        local function distance(p1,\
    \ p2)\n                            local function distance(p1, p2)\n         \
    \                       local function distance(p1, p2)\n                    \
    \                local function distance(p1, p2)\n                           \
    \             local function distance(p1, p2)\n                              \
    \              local function distance(p1, p2)\n                             \
    \                   local function distance(p1, p2)\n                        \
    \                            local function distance(p1, p2)\n               \
    \                                         local function distance(p1, p2)\n  \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local function distance(planet1, planet2)\n        -- Your code\
    \ here\n    end\n    local function sort_by_distance(planet1, planet2)\n     \
    \   -- Your code here\n    end\n    local function sort_by_proximity(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance(planet1,\
    \ planet2)\n        -- Your code here\n    end\n    local function sort_by_proximity_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets_and_distance_and_planets(planet",
  "    local function dist(planet1, planet2)\n        -- your code here\n    end\n\
    \    return dist(planet1, planet2)\nend", "    local planets = {\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    }\n   \
    \ local function distance(planet1, planet2)\n        local distance = math.sqrt((math.pow(planet1.x\
    \ - planet2.x, 2) + math.pow(planet1.y - planet2.y, 2)) * math.cos(math.atan2(planet1.y\
    \ - planet2.y, planet1.x - planet2.x)))\n        return distance\n    end\n  \
    \  local function compare(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        if distance < 1 then\n            return 1\n        elseif\
    \ distance > 1 then\n            return -1\n        else\n            return 0\n\
    \        end\n    end\n    local function compare_by_proximity(planet1, planet2)\n\
    \        local distance = distance(planet1, planet2)\n        if distance < 1\
    \ then\n            return 1\n        elseif distance > 1 then\n            return\
    \ -1\n        else\n            return 0\n        end\n    end\n    local function\
    \ sort_by_proximity(planet1, planet2)\n        local distance = distance(planet1,\
    \ planet2)\n        if distance < 1 then\n            return 1\n        elseif\
    \ distance > 1 then\n            return -1\n        else\n            return 0\n\
    \        end\n    end\n    local function sort_by_proximity_and_distance(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        if distance\
    \ < 1 then\n            return 1\n        elseif distance > 1 then\n         \
    \   return -1\n        else\n            return 0\n        end\n    end\n    local\
    \ function sort_by_proximity_and_distance_and_planets(planet1, planet2)\n    \
    \    local distance = distance(planet1, planet2)\n        if distance < 1 then\n\
    \            return 1\n        elseif distance > 1 then\n            return -1\n\
    \        else\n            return 0\n        end\n    end\n    local function\
    \ sort_by_proximity_and_distance_and_planets_and_planets(planet1, planet2)\n \
    \       local distance = distance(planet1, planet2)\n        if distance < 1 then\n\
    \            return 1\n        elseif distance > 1 then\n            return -1\n\
    \        else\n            return 0\n        end\n    end\n    local function\
    \ sort_by_proximity_and_distance_and_planets_and_planets_and_planets(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        if distance\
    \ < 1 then\n            return 1\n        elseif distance > 1 then\n         \
    \   return -1\n        else\n            return 0\n        end\n    end\n    local\
    \ function ", "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y,\
    \ 2))\n    end\n    local function sortByDistance(planet1, planet2)\n        local\
    \ distance1 = distance(planet1.orbit.x, planet1.orbit.y, planet2.orbit.x, planet2.orbit.y)\n\
    \        local distance2 = distance(planet2.orbit.x, planet2.orbit.y, planet1.orbit.x,\
    \ planet1.orbit.y)\n        return distance1, distance2\n    end\n    local function\
    \ sortByProximity(planet1, planet2)\n        local distance1, distance2 = sortByDistance(planet1,\
    \ planet2)\n        return distance1, distance2, distance1 < distance2\n    end\n\
    \    local planet1, planet2 = unpack(sortByProximity(planet1, planet2))\n    return\
    \ planet1, planet2\nend", "    local function distance(planet1, planet2)\n   \
    \     -- TODO: Write a function that calculates the distance between two planets\n\
    \        -- given their names. \n        -- The function should return a number\
    \ representing the distance between\n        -- planet1 and planet2, in AU.\n\
    \    end\n    local function orbit(planet1, planet2)\n        -- TODO: Write a\
    \ function that calculates the orbit between two planets\n        -- given their\
    \ names. \n        -- The function should return a tuple containing the orbital\
    \ period \n        -- (the distance between the planets' centers) and \n     \
    \   -- the distance between the planets' centers.\n    end\n    local function\
    \ planets(planet1, planet2)\n        -- TODO: Write a function that calculates\
    \ the planets whose orbits \n        -- are located between the orbit of planet1\
    \ and the orbit of planet2.\n        -- The function should return a tuple containing\
    \ two strings: \n        -- the planets' names and a boolean indicating whether\
    \ the planets are \n        -- located on the equator.\n    end\n    local function\
    \ planets_near(planet1, planet2)\n        -- TODO: Write a function that calculates\
    \ the planets whose orbits \n        -- are located between the orbit of planet1\
    \ and the orbit of planet2.\n        -- The function should return a tuple containing\
    \ two strings: \n        -- the planets' names and a boolean indicating whether\
    \ the planets are \n        -- located on the equator.\n    end\n    local function\
    \ planets_near(planet1, planet2)\n        -- TODO: Write a function that calculates\
    \ the planets whose orbits \n        -- are located between the orbit of planet1\
    \ and the orbit of planet2.\n        -- The function should return a tuple containing\
    \ two strings: \n        -- the planets' names and a boolean indicating whether\
    \ the planets are \n        -- located on the equator.\n    end\n    local function\
    \ planets_near(planet1, planet2)\n        -- TODO: Write a function that calculates\
    \ the planets whose orbits \n        -- are located between the orbit of planet1\
    \ and the orbit of planet2.\n        -- The function should return a tuple containing\
    \ two strings: \n        -- the planets' names and a boolean indicating whether\
    \ the planets are \n        -- located on the equator.\n    end\n    local function\
    \ planets_near(planet1, planet2)\n        -- TODO: Write a function that calculates\
    \ the planets whose orbits \n        -- are located between the orbit of planet1\
    \ and the orbit of planet2.", "    local function distance(p1, p2)\n        local\
    \ function distance(p1, p2)\n            local function distance(p1, p2)\n   \
    \             local function distance(p1, p2)\n                    local function\
    \ distance(p1, p2)\n                        local function distance(p1, p2)\n\
    \                            local function distance(p1, p2)\n               \
    \                 local function distance(p1, p2)\n                          \
    \          local function distance(p1, p2)\n                                 \
    \       local function distance(p1, p2)\n                                    \
    \        local function distance(p1, p2)\n                                   \
    \             local function distance(p1, p2)\n                              \
    \                      local function distance(p1, p2)\n                     \
    \                                   local function distance(p1, p2)\n        \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local function distance(a,b) \n        return math.abs(a.x-b.x)\
    \ + math.abs(a.y-b.y) + math.abs(a.z-b.z) \n    end \n    local function sortByDistance(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceDesc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceAsc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceAscDesc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceDescAsc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceAscDescDesc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceAscAsc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceAscDescAsc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceDescDescDesc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceDescAscDesc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceAscAsc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceAscAsc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceAscDescAsc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceAscDescDescAsc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceDescAscAsc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceDescAscAsc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceDescAscDescAsc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceDescDescDescAsc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceDescDescAscDesc(a,b)\
    \ \n        return distance(a,b) \n    end \n    local function sortByDistanceDescDescDescAsc(a,b)\
    \ \n        return distance(b,a) \n    end \n    local function sortByDistanceDescDescA",
  "    local function distance(p1, p2)\n        -- Your code here\n    end\n    local\
    \ function sortByDistance(p1, p2)\n        -- Your code here\n    end\n    return\
    \ sortByDistance(distance(planet1, planet2), distance(planet2, planet1))\nend",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local function distance(planet1, planet2)\n\
    \        local distance = nil\n        for i=1,#planets do\n            local\
    \ distance = math.abs(planets[planet1] - planets[planet2])\n            if distance\
    \ < 1 then\n                return distance\n            end\n        end\n  \
    \      return distance\n    end\n    local function sortByDistance(planet1, planet2)\n\
    \        local distance = distance(planet1, planet2)\n        return distance\n\
    \    end\n    local function sortByProximity(planet1, planet2)\n        local\
    \ distance = sortByDistance(planet1, planet2)\n        return distance\n    end\n\
    \    local function sortByProximityAndDistance(planet1, planet2)\n        local\
    \ distance = sortByProximity(planet1, planet2)\n        return distance\n    end\n\
    \    local function sortByProximityAndDistanceAndPlanets(planet1, planet2)\n \
    \       local distance = sortByProximityAndDistance(planet1, planet2)\n      \
    \  local planets = sortByProximityAndDistance(planet1, planet2)\n        return\
    \ distance, planets\n    end\n    local function sortByProximityAndDistanceAndPlanetsAndPlanets(planet1,\
    \ planet2)\n        local distance = sortByProximityAndDistance(planet1, planet2)\n\
    \        local planets = sortByProximityAndDistance(planet1, planet2)\n      \
    \  local planets2 = sortByProximityAndDistance(planet2, planet1)\n        return\
    \ distance, planets, planets2\n    end\n    local function sortByProximityAndDistanceAndPlanetsAndPlanets2(planet1,\
    \ planet2)\n        local distance = sortByProximityAndDistance(planet1, planet2)\n\
    \        local planets = sortByProximityAndDistance(planet1, planet2)\n      \
    \  local planets2 = sortByProximityAndDistance(planet2, planet1)\n        local\
    \ planets3 = sortByProximityAndDistance(planet1, planet2)\n        return distance,\
    \ planets, planets2, planets3\n    end\n    local function sortByProximityAndDistanceAndPlanetsAndPlanets",
  "    local function distance(p1, p2)\n        -- TODO: Write a function that calculates\
    \ the distance between two \n        -- planets.\n        -- The function should\
    \ take two planet names as strings as input \n        -- and return a single number\
    \ as output. \n        -- The function should return 0 if the two planets are\
    \ the same.\n        -- The function should return negative if the planets are\
    \ located \n        -- further away from the Sun.\n        -- The function should\
    \ return positive if the planets are located \n        -- closer to the Sun.\n\
    \        -- The function should return NaN if one of the planets is not \n   \
    \     -- a planet in the solar system.\n        -- The function should return\
    \ nil if one of the planets is \n        -- not in the solar system.\n       \
    \ -- The function should return nil if one of the planets is \n        -- not\
    \ in the solar system.\n        -- The function should return nil if one of the\
    \ planets is \n        -- not in the solar system.\n        -- The function should\
    \ return nil if one of the planets is \n        -- not in the solar system.\n\
    \        -- The function should return nil if one of the planets is \n       \
    \ -- not in the solar system.\n        -- The function should return nil if one\
    \ of the planets is \n        -- not in the solar system.\n        -- The function\
    \ should return nil if one of the planets is \n        -- not in the solar system.\n\
    \        -- The function should return nil if one of the planets is \n       \
    \ -- not in the solar system.\n        -- The function should return nil if one\
    \ of the planets is \n        -- not in the solar system.\n        -- The function\
    \ should return nil if one of the planets is \n        -- not in the solar system.\n\
    \        -- The function should return nil if one of the planets is \n       \
    \ -- not in the solar system.\n        -- The function should return nil if one\
    \ of the planets is \n        -- not in the solar system.\n        -- The function\
    \ should return nil if one of the planets is \n        -- not in the solar system.\n\
    \        -- The function should return nil if one of the planets is \n       \
    \ -- not in the solar system.\n        -- The function should return nil if one\
    \ of the planets is \n        -- not in the solar system.\n        -- The function\
    \ should return nil if one of the planets is \n        -- not in the solar system.\n\
    \        -- The function should return nil if one of the planets is \n       \
    \ -- not in the solar system.\n        -- The function should return nil if one\
    \ of the planets is \n        -- not in the solar system.\n        -- The function\
    \ should ", "    local planets = {Mercury, Venus, Earth, Mars, Jupiter, Saturn,\
    \ Uranus, Neptune}\n    local planet1 = planets[planet1]\n    local planet2 =\
    \ planets[planet2]\n    local sun = sun()\n    local orbit1 = sun:position(planet1)\n\
    \    local orbit2 = sun:position(planet2)\n    local distances = {}\n    for i=1,8\
    \ do\n        local distance = math.abs(orbit1[i]-orbit2[i])\n        distances[i]\
    \ = distance\n    end\n    distances = table.sort(distances)\n    return distances\n\
    end", "    local planets = {\n        Mercury = {\n            Venus = {\n   \
    \             Earth = {\n                    Mars = {\n                      \
    \  Jupiter = {\n                            Saturn = {\n                     \
    \           Uranus = {\n                                    Neptune = {}\n   \
    \                             }\n                            }\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return planets[planet1][planet2]\nend", "    local function\
    \ dist(planet1, planet2)\n        -- TODO: Implement the distance function \n\
    \        return 0 \n    end\n    local function compare(planet1, planet2)\n  \
    \      -- TODO: Implement the compare function \n        return 0 \n    end\n\
    \    local function sort(planet1, planet2)\n        -- TODO: Implement the sort\
    \ function \n        return 0 \n    end\n    local function orbit(planet1, planet2)\n\
    \        -- TODO: Implement the orbit function \n        return 0 \n    end\n\
    \    local function orbits(planet1, planet2)\n        -- TODO: Implement the orbits()\
    \ function \n        return 0 \n    end\n    local function planets(planet1, planet2)\n\
    \        -- TODO: Implement the planets() function \n        return 0 \n    end\n\
    \    local function planetsBetween(planet1, planet2)\n        -- TODO: Implement\
    \ the planetsBetween() function \n        return 0 \n    end\n    local function\
    \ planetsBetweenOrbits(planet1, planet2)\n        -- TODO: Implement the planetsBetweenOrbits()\
    \ function \n        return 0 \n    end\n    local function planetsBetweenOrbitsSorted(planet1,\
    \ planet2)\n        -- TODO: Implement the planetsBetweenOrbitsSorted() function\
    \ \n        return 0 \n    end\n    local function planetsBetweenOrbitsSortedByProximity(planet1,\
    \ planet2)\n        -- TODO: Implement the planetsBetweenOrbitsSortedByProximity()\
    \ function\n        return 0 \n    end\n    local function planetsBetweenOrbitsSortedByProximitySorted(planet1,\
    \ planet2)\n        -- TODO: Implement the planetsBetweenOrbitsSortedByProximitySorted()\
    \ function\n        return 0 \n    end\n    local function planetsBetweenOrbitsSortedByProximitySortedByProximity(planet1,\
    \ planet2)\n        -- TODO: Implement the planetsBetweenOrbitsSortedByProximitySortedByProximity()\
    \ function\n        return 0 \n    end\n    local function planetsBetweenOrbitsSortedByProximitySortedByProximitySorted(planet1,\
    \ planet2)\n        -- TODO: Implement the planetsBetweenOrbitsSortedByProximitySortedByProximitySorted()\
    \ function\n        return 0 \n    end\n    local function planetsBetweenOrbitsSortedByProximitySortedByProximitySortedByProximity(planet1,\
    \ planet2)\n        -- TODO: Implement the planetsBetweenOr", "    local planets\
    \ = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\",\n    }\n    local function distance(p1, p2)\n        local x1,\
    \ y1, z1 = p1:getPos()\n        local x2, y2, z2 = p2:getPos()\n        return\
    \ math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2) + math.pow(z1 - z2, 2))\n\
    \    end\n    local function sortByDistance(planet1, planet2)\n        local distances\
    \ = {}\n        for _, planet in ipairs(planets) do\n            distances[planet]\
    \ = distance(planet1, planet)\n        end\n        table.sort(distances, function(a,\
    \ b) return distances[a] < distances[b] end)\n        return distances\n    end\n\
    \    local distances = sortByDistance(planet1, planet2)\n    local planetsBetween\
    \ = {}\n    for _, planet in ipairs(planets) do\n        if distances[planet]\
    \ ~= distances[planet1] then\n            table.insert(planetsBetween, planet)\n\
    \        end\n    end\n    return planetsBetween\nend", "    local function distance(p1,\
    \ p2)\n        -- The distance between two planets is calculated as the \n   \
    \     -- distance between the orbit of planet1 and the orbit of planet2.\n   \
    \     local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                -- The distance between two planets is calculated as the\
    \ \n                -- distance between the orbit of planet1 and the orbit of\
    \ planet2.\n                local function distance(p1, p2)\n                \
    \    -- The distance between two planets is calculated as the \n             \
    \       -- distance between the orbit of planet1 and the orbit of planet2.\n \
    \                   local function distance(p1, p2)\n                        --\
    \ The distance between two planets is calculated as the \n                   \
    \     -- distance between the orbit of planet1 and the orbit of planet2.\n   \
    \                     local function distance(p1, p2)\n                      \
    \      -- The distance between two planets is calculated as the \n           \
    \                 -- distance between the orbit of planet1 and the orbit of planet2.\n\
    \                            local function distance(p1, p2)\n               \
    \                 -- The distance between two planets is calculated as the \n\
    \                                -- distance between the orbit of planet1 and\
    \ the orbit of planet2.\n                                local function distance(p1,\
    \ p2)\n                                    -- The distance between two planets\
    \ is calculated as the \n                                    -- distance between\
    \ the orbit of planet1 and the orbit of planet2.\n                           \
    \         local function distance(p1, p2)\n                                  \
    \      -- The distance between two planets is calculated as the \n           \
    \                             -- distance between the orbit of planet1 and the\
    \ orbit of planet2.\n                                        local function distance(p1,\
    \ p2)\n                                            -- The distance between two\
    \ planets is calculated as the \n                                            --\
    \ distance between the orbit of planet1 and the orbit of planet2.\n          \
    \                                  local function distance(p1, p2)\n         \
    \                                       -- The distance between two planets is\
    \ calculated as the \n                                                -- distance\
    \ between the orbit of planet1 and the orbit of planet2.\n                   \
    \                             local function distance(p1, p2)\n              \
    \                                      -- The distance between two planets is\
    \ calculated as the \n                                                    -- distance\
    \ between the orbit of planet1 and the orbit of planet2.\n                   \
    \                                 local function distance(p1, p2)\n          \
    \                                              -- The distance between two planets\
    \ is calculated as the \n                                                    \
    \    -- distance between the orbit of planet1 and the orbit of planet2.\n    \
    \                                                    local function distance(p1,\
    \ p2)\n                                                            -- The distance\
    \ between two planets is calculated as the \n                                \
    \                            -- distance between the orbit of planet1 and the\
    \ orbit of planet2.\n                                                        \
    \    local function distance(p1, p2)\n                                       \
    \                         -- The distance between two planets is calculated as\
    \ the \n                                                                -- distance\
    \ between the ", "    local planets = {\n        \"Mercury\",\n        \"Venus\"\
    ,\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\",\n    }\n    local planet1 = planets[planet1]\n\
    \    local planet2 = planets[planet2]\n    local sun = math.rad(math.pi/2)\n \
    \   local sun_distance = math.sqrt((math.pow(planet1.x,2)+math.pow(planet1.y,2))^2+(math.pow(planet1.z,2)+math.pow(planet1.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet2.x,2)+math.pow(planet2.y,2))^2+(math.pow(planet2.z,2)+math.pow(planet2.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet1.x,2)+math.pow(planet1.y,2))^2+(math.pow(planet1.z,2)+math.pow(planet1.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet2.x,2)+math.pow(planet2.y,2))^2+(math.pow(planet2.z,2)+math.pow(planet2.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet1.x,2)+math.pow(planet1.y,2))^2+(math.pow(planet1.z,2)+math.pow(planet1.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet2.x,2)+math.pow(planet2.y,2))^2+(math.pow(planet2.z,2)+math.pow(planet2.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet1.x,2)+math.pow(planet1.y,2))^2+(math.pow(planet1.z,2)+math.pow(planet1.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet2.x,2)+math.pow(planet2.y,2))^2+(math.pow(planet2.z,2)+math.pow(planet2.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet1.x,2)+math.pow(planet1.y,2))^2+(math.pow(planet1.z,2)+math.pow(planet1.w,2))^2)\n\
    \    local sun_distance = math.sqrt((math.pow(planet2.x,2)+math.pow(planet2.y,2))^2+(math.pow(planet2.z,2)+math.pow(planet2.w,2))",
  "    local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function sortByDistance(planet1, planet2)\n        local distances\
    \ = {}\n        for i=1,8 do\n            distances[i] = distance(planet1, planet2[i])\n\
    \        end\n        table.sort(distances)\n        return distances\n    end\n\
    \    local distances = sortByDistance(planet1, planet2)\n    if distances[1] ==\
    \ distances[2] then\n        return distances[1]\n    else\n        return distances[1]\n\
    \    end\nend\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"\
    ))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"\
    Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\"\
    , \"Neptune\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"\
    Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Earth\",\
    \ \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"\
    ))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"\
    Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\n\
    print(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))", "    local function distance(p1, p2)\n        -- TODO:\
    \ Write a function that calculates the distance between two planets\n        --\
    \ given their names as strings. \n        -- The function should return a number\
    \ representing the distance between\n        -- two planets. \n        -- The\
    \ function should return nil if either of the planets are not correct\n      \
    \  -- planet names. \n        -- The function should return nil if either of the\
    \ planets has no orbits.\n        -- The function should return nil if either\
    \ of the planets has no \n        -- known distance. \n        -- The function\
    \ should return nil if either of the planets has no known \n        -- distance.\
    \ \n        -- The function should return nil if either of the planets has no\
    \ known \n        -- distance. \n        -- The function should return nil if\
    \ either of the planets has no known \n        -- distance. \n        -- The function\
    \ should return nil if either of the planets has no known \n        -- distance.\
    \ \n        -- The function should return nil if either of the planets has no\
    \ known \n        -- distance. \n        -- The function should return nil if\
    \ either of the planets has no known \n        -- distance. \n        -- The function\
    \ should return nil if either of the planets has no known \n        -- distance.\
    \ \n        -- The function should return nil if either of the planets has no\
    \ known \n        -- distance. \n        -- The function should return nil if\
    \ either of the planets has no known \n        -- distance. \n        -- The function\
    \ should return nil if either of the planets has no known \n        -- distance.\
    \ \n        -- The function should return nil if either of the planets has no\
    \ known \n        -- distance. \n        -- The function should return nil if\
    \ either of the planets has no known \n        -- distance. \n        -- The function\
    \ should return nil if either of the planets has no known \n        -- distance.\
    \ \n        -- The function should return nil if either of the planets has no\
    \ known \n        -- distance. \n        -- The function should return nil if\
    \ either of the planets has no known \n        -- distance. \n        -- The function\
    \ should return nil if either of the planets has no known \n        -- distance.\
    \ \n        -- The function should return nil if either of the planets has no\
    \ known \n        -- distance. \n        -- The function should return nil if\
    \ either of the planets has no known \n        -- distance. \n        -- The function\
    \ should return nil if either of the planets has no known \n        -- distance.\
    \ \n        -- The function ", "    local function distance(a,b)\n        return\
    \ math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local function\
    \ sortByDistance(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance2(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance3(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance4(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance5(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance6(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance7(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance8(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance9(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance10(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance11(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance12(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance13(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance14(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance15(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance16(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance17(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance18(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance19(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance20(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance21(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance22(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance23(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance24(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance25(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance26(a,b)\n        return distance(a,b) \n    end\n    local function\
    \ sortByDistance27(a,b)\n        return distance(a,b", "    local function distance(x,\
    \ y)\n        return math.sqrt(math.pow(x-y, 2))\n    end\n    local function\
    \ compare(x, y)\n        return distance(x, y) < distance(y, x)\n    end\n   \
    \ local function sortByProximity(planet1, planet2)\n        local planet1Orbit,\
    \ planet2Orbit = orbit(planet1), orbit(planet2)\n        local planet1Sun, planet2Sun\
    \ = sun(planet1), sun(planet2)\n        local planet1Proximity, planet2Proximity\
    \ = distance(planet1Sun, planet1Orbit), distance(planet2Sun, planet2Orbit)\n \
    \       local planet1ProximityOrbit, planet2ProximityOrbit = orbit(planet1Proximity),\
    \ orbit(planet2Proximity)\n        local planet1ProximitySun, planet2ProximitySun\
    \ = sun(planet1Proximity), sun(planet2Proximity)\n        local planet1ProximityProximity,\
    \ planet2ProximityProximity = distance(planet1ProximitySun, planet1ProximityOrbit),\
    \ distance(planet2ProximitySun, planet2ProximityOrbit)\n        local planet1ProximityProximityOrbit,\
    \ planet2ProximityProximityOrbit = orbit(planet1ProximityProximity), orbit(planet2ProximityProximity)\n\
    \        local planet1ProximityProximitySun, planet2ProximityProximitySun = sun(planet1ProximityProximity),\
    \ sun(planet2ProximityProximity)\n        local planet1ProximityProximityProximity,\
    \ planet2ProximityProximityProximity = distance(planet1ProximityProximitySun,\
    \ planet1ProximityProximityOrbit), distance(planet2ProximityProximitySun, planet2ProximityProximityOrbit)\n\
    \        local planet1ProximityProximityProximityOrbit, planet2ProximityProximityProximityOrbit\
    \ = orbit(planet1ProximityProximityProximity), orbit(planet2ProximityProximityProximity",
  "    local function distance(a,b)\n        return math.sqrt((a.x - b.x)^2 + (a.y\
    \ - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance2(a,b)\n    \
    \    return math.sqrt((a.x - b.x)^2 + (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n\
    \    local function distance3(a,b)\n        return math.sqrt((a.x - b.x)^2 + (a.y\
    \ - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance4(a,b)\n    \
    \    return math.sqrt((a.x - b.x)^2 + (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n\
    \    local function distance5(a,b)\n        return math.sqrt((a.x - b.x)^2 + (a.y\
    \ - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance6(a,b)\n    \
    \    return math.sqrt((a.x - b.x)^2 + (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n\
    \    local function distance7(a,b)\n        return math.sqrt((a.x - b.x)^2 + (a.y\
    \ - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance8(a,b)\n    \
    \    return math.sqrt((a.x - b.x)^2 + (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n\
    \    local function distance9(a,b)\n        return math.sqrt((a.x - b.x)^2 + (a.y\
    \ - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance10(a,b)\n   \
    \     return math.sqrt((a.x - b.x)^2 + (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n\
    \    local function distance11(a,b)\n        return math.sqrt((a.x - b.x)^2 +\
    \ (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance12(a,b)\n\
    \        return math.sqrt((a.x - b.x)^2 + (a.y - b.y)^2 + (a.z - b.z)^2)\n   \
    \ end\n    local function distance13(a,b)\n        return math.sqrt((a.x - b.x)^2\
    \ + (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance14(a,b)\n\
    \        return math.sqrt((a.x - b.x)^2 + (a.y - b.y)^2 + (a.z - b.z)^2)\n   \
    \ end\n    local function distance15(a,b)\n        return math.sqrt((a.x - b.x)^2\
    \ + (a.y - b.y)^2 + (a.z - b.z)^2)\n    end\n    local function distance16(a,b)\n\
    \        return math.sqrt((a.x - b.x)^2 + (a.", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function sortByDistance(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance2(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance3(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance4(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance5(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance6(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance7(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance8(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance9(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByDistance10(a,b)\n        return distance(a,b) \n    end\n   \
    \ local function sortByDistance11(a,b)\n        return distance(a,b) \n    end\n\
    \    local function sortByDistance12(a,b)\n        return distance(a,b) \n   \
    \ end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n        return distance(a,b",
  "    local planets = {\n        Mercury = \"Mercury\",\n        Venus = \"Venus\"\
    ,\n        Earth = \"Earth\",\n        Mars = \"Mars\",\n        Jupiter = \"\
    Jupiter\",\n        Saturn = \"Saturn\",\n        Uranus = \"Uranus\",\n     \
    \   Neptune = \"Neptune\",\n    }\n    local function distance(planet1, planet2)\n\
    \        local distance = math.sqrt((planet1.x - planet2.x)^2 + (planet1.y - planet2.y)^2)\n\
    \        return distance\n    end\n    local function orbit(planet1, planet2)\n\
    \        local distance = distance(planet1, planet2)\n        local x = math.cos(math.pi/2\
    \ - planet1.orbit.angle)\n        local y = math.sin(math.pi/2 - planet1.orbit.angle)\n\
    \        local z = -math.sin(math.pi/2 - planet2.orbit.angle)\n        local orbit\
    \ = { x = x*distance, y = y*distance, z = z*distance }\n        return orbit\n\
    \    end\n    local function orbits(planet1, planet2)\n        local orbit1 =\
    \ orbit(planet1, planet2)\n        local orbit2 = orbit(planet2, planet1)\n  \
    \      local orbits = { orbit1, orbit2 }\n        return orbits\n    end\n   \
    \ local function proximity(planet1, planet2)\n        local orbits = orbits(planet1,\
    \ planet2)\n        local distances = { orbits[1].x, orbits[1].y, orbits[1].z\
    \ }\n        local distances_2 = { orbits[2].x, orbits[2].y, orbits[2].z }\n \
    \       local distances_3 = { orbits[1].x, orbits[1].y, orbits[1].z }\n      \
    \  local distances_4 = { orbits[2].x, orbits[2].y, orbits[2].z }\n        local\
    \ distances_5 = { orbits[1].x, orbits[1].y, orbits[1].z }\n        local distances_6\
    \ = { orbits[2].x, orbits[2].y, orbits[2].z }\n        local distances_7 = { orbits[1].x,\
    \ orbits[1].y, orbits[1].z }\n        local distances_8 = { orbits[2].x, orbits[2].y,\
    \ orbits[2].z }\n        local distances_9 = { orbits[1].x, orbits[1].y, orbits[1].z\
    \ }\n        local distances_10 = { orbits[2].x, orbits[2].y, orbits[2].z }\n\
    \        local distances_11 = { orbits[1].x, orbits[1].y, orbits[1].z }\n    \
    \    local distances_12 = { orbits[2].x, orbits[2].y, orbits[2].z }\n        local\
    \ distances_13 = { orbits[1].x, orbits[1].y, orbits[1].z }\n        ", "    local\
    \ function distance(a,b)\n        return math.sqrt((a.x-b.x)^2 + (a.y-b.y)^2 +\
    \ (a.z-b.z)^2)\n    end\n    local function sortByDistance(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance2(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance3(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance4(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance5(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance6(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance7(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance8(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance9(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance10(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance11(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance12(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance13(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance14(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance15(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance16(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance17(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance18(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance19(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance20(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance21(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance22(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance23(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance24(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance25(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance26(a,b)\n        return\
    \ distance(a,b) \n    end\n    local function sortByDistance27(a,b)\n        return\
    \ distance(a,b", "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance2(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2)\n\
    \    end\n    local function distance3(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance4(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance5(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance6(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance7(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance8(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance9(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance10(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance11(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance12(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance13(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance14(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance15(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance16(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function distance17(a,b)", "    local function distance(a,b)\n\
    \        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n    end\n    local\
    \ function sortByDistance(a,b)\n        return distance(a,b) \n    end\n    local\
    \ function sortByProximity(a,b)\n        return distance(a,b) - distance(b,a)\n\
    \    end\n    local function sortByName(a,b)\n        return a.name < b.name\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function sortByOrbit(a,b)\n        return a.orbit < b.orbit\n\
    \    end\n    local function ", "    local function distance(p1, p2)\n       \
    \ local function distance(p1, p2)\n            local function distance(p1, p2)\n\
    \                local function distance(p1, p2)\n                    local function\
    \ distance(p1, p2)\n                        local function distance(p1, p2)\n\
    \                            local function distance(p1, p2)\n               \
    \                 local function distance(p1, p2)\n                          \
    \          local function distance(p1, p2)\n                                 \
    \       local function distance(p1, p2)\n                                    \
    \        local function distance(p1, p2)\n                                   \
    \             local function distance(p1, p2)\n                              \
    \                      local function distance(p1, p2)\n                     \
    \                                   local function distance(p1, p2)\n        \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n\
    \        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local planet1, planet2\
    \ = string.lower(planet1), string.lower(planet2)\n    local planet1, planet2 =\
    \ planets[planet1], planets[planet2]\n    local sun = math.rad(math.pi/2)\n  \
    \  local orbit1, orbit2 = math.rad(math.pi/2), math.rad(math.pi/2)\n    local\
    \ distance = 0\n    local orbit1x, orbit1y = 0, math.sin(-sun)\n    local orbit2x,\
    \ orbit2y = math.sin(sun), math.cos(sun)\n    local orbit1z, orbit1r = 0, math.cos(-sun)\n\
    \    local orbit2z, orbit2r = math.sin(sun), math.cos(sun)\n    local orbit1a,\
    \ orbit1b, orbit1c, orbit1d, orbit1e = 0, 0, 0, 0, 0\n    local orbit2a, orbit2b,\
    \ orbit2c, orbit2d, orbit2e = 0, 0, 0, 0, 0\n    local orbit1x, orbit1y = orbit1x,\
    \ orbit1y\n    local orbit2x, orbit2y = orbit2x, orbit2y\n    local orbit1z, orbit1r\
    \ = orbit1z, orbit1r\n    local orbit2z, orbit2r = orbit2z, orbit2r\n    local\
    \ orbit1a, orbit1b, orbit1c, orbit1d, orbit1e = orbit1a, orbit1b, orbit1c, orbit1d,\
    \ orbit1e\n    local orbit2a, orbit2b, orbit2c, orbit2d, orbit2e = orbit2a, orbit2b,\
    \ orbit2c, orbit2d, orbit2e\n    local orbit1x, orbit1y = orbit1x, orbit1y\n \
    \   local orbit2x, orbit2y = orbit2x, orbit2y\n    local orbit1z, orbit1r = orbit1z,\
    \ orbit1r\n    local orbit2z, orbit2r = orbit2z, orbit2r\n    local orbit1a, orbit1b,\
    \ orbit1c, orbit1d, orbit1e = orbit1a, orbit1b, orbit1c, orbit1d, orbit1e\n  \
    \  local orbit2a, orbit2b, orbit2c, orbit2d, orbit2e = orbit2a, orbit2b, orbit2c,\
    \ orbit2d, orbit2e\n    local orbit1x, orbit1y = orbit1x, orbit1y\n    local orbit2x,\
    \ orbit2y = orbit2x, orbit2y\n    local orbit1z, orbit1r = orbit1z, orbit1", " \
    \   local function distance(p1, p2)\n        local function distance(p1, p2)\n\
    \            local function distance(p1, p2)\n                local function distance(p1,\
    \ p2)\n                    local function distance(p1, p2)\n                 \
    \       local function distance(p1, p2)\n                            local function\
    \ distance(p1, p2)\n                                local function distance(p1,\
    \ p2)\n                                    local function distance(p1, p2)\n \
    \                                       local function distance(p1, p2)\n    \
    \                                        local function distance(p1, p2)\n   \
    \                                             local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                              ", "    local function distance(planet1,\
    \ planet2)\n        -- TODO: Write the function here\n    end\n    return distance\n\
    end", "    local function distance(planet1, planet2)\n        local function distance(planet1,\
    \ planet2)\n            local function distance(planet1, planet2)\n          \
    \      local function distance(planet1, planet2)\n                    local function\
    \ distance(planet1, planet2)\n                        local function distance(planet1,\
    \ planet2)\n                            local function distance(planet1, planet2)\n\
    \                                local function distance(planet1, planet2)\n \
    \                                   local function distance(planet1, planet2)\n\
    \                                        local function distance(planet1, planet2)\n\
    \                                            local function distance(planet1,\
    \ planet2)\n                                                local function distance(planet1,\
    \ planet2)\n                                                    local function\
    \ distance(planet1, planet2)\n                                               \
    \         local function distance(planet1, planet2)\n                        \
    \                                    local function distance(planet1, planet2)\n\
    \                                                                local function\
    \ distance(planet1, planet2)\n                                               \
    \                     local function distance(planet1, planet2)\n            \
    \                                                            local function distance(planet1,\
    \ planet2)\n                                                                 \
    \           local function distance(planet1, planet2)\n                      \
    \                                                          local function distance(planet1,\
    \ planet2)\n                                                                 \
    \                   local function distance(planet1, planet2)\n              \
    \                                                                          local\
    \ function distance(planet1, planet2)\n                                      \
    \                                                      local function distance(planet1,\
    \ planet2)\n                                                                 \
    \                               local function distance(planet1, planet2)\n  \
    \                                                                            \
    \                      local function distance(planet1, planet2)\n           \
    \                                                                            \
    \                 local function distance(planet1, planet2)\n                \
    \                                                                            \
    \                local function distance(planet1, planet2)\n                 \
    \                                                                            \
    \                   local function distance(planet1, planet2)\n              \
    \                                                                            \
    \                          local function distance(planet1, planet2)\n       \
    \                                                                            \
    \                                     local function distance(planet1, planet2)\n\
    \                                                                            \
    \                                                local function distance(planet1,\
    \ planet2)\n                                                                 \
    \                                                               local function\
    \ distance(planet1, planet2)\n                                               \
    \                                                                            \
    \         local function distance(planet1, planet2)\n                        \
    \                                                                            \
    \                                    local function distance(planet1, planet2)\n\
    \                                                                            \
    \                                                                local function\
    \ distance(planet1, planet2)\n                                               \
    \                                                                            \
    \                     local function distance(planet1, planet2)\n            \
    \                                                                            \
    \                                                            local function distance(planet1,\
    \ planet2)\n                                                                 \
    \                                                                            \
    \           local function distance(planet1, planet2)\n                      \
    \                                                                            \
    \                                                          local function distance(planet1,\
    \ planet2)\n                                                                 \
    \                                                                            \
    \                   local function distance(planet1, planet2)\n              \
    \                                                                            \
    \                                                                          local\
    \ function distance(planet1, planet2)\n                                      \
    \                                                                            \
    \                                                      local function distance(planet1,\
    \ planet2)\n                                                                 \
    \                                                                            \
    \                               local function distance(planet1, planet2)\n  \
    \                                                              ", "    local planets\
    \ = {\n        Mercury = {\n            Venus = {\n                Earth = {\n\
    \                    Mars = {\n                        Jupiter = {\n         \
    \                   Saturn = {\n                                Uranus = {\n \
    \                                   Neptune = {}\n                           \
    \     }\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n    }\n    \n    local\
    \ function distance(p1, p2)\n        local x1, y1, z1 = p1[1], p1[2], p1[3]\n\
    \        local x2, y2, z2 = p2[1], p2[2], p2[3]\n        return math.sqrt((x1\
    \ - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)\n    end\n    \n    local function sortByDistance(planet1,\
    \ planet2)\n        local distance1 = distance(planets[planet1], sun)\n      \
    \  local distance2 = distance(planets[planet2], sun)\n        return distance1\
    \ - distance2\n    end\n    \n    local function sortByDistance2(planet1, planet2)\n\
    \        local distance1 = distance(planets[planet1], sun)\n        local distance2\
    \ = distance(planets[planet2], sun)\n        return distance1 < distance2\n  \
    \  end\n    \n    local function sortByDistance3(planet1, planet2)\n        local\
    \ distance1 = distance(planets[planet1], sun)\n        local distance2 = distance(planets[planet2],\
    \ sun)\n        return distance1 <= distance2\n    end\n    \n    local function\
    \ sortByDistance4(planet1, planet2)\n        local distance1 = distance(planets[planet1],\
    \ sun)\n        local distance2 = distance(planets[planet2], sun)\n        return\
    \ distance1 >= distance2\n    end\n    \n    local function sortByDistance5(planet1,\
    \ planet2)\n        local distance1 = distance(planets[planet1], sun)\n      \
    \  local distance2 = distance(planets[planet2], sun)\n        return distance1\
    \ > distance2\n    end\n    \n    local function sortByDistance6(planet1, planet2)\n\
    \        local distance1 = distance(planets[planet1], sun)\n        local distance2\
    \ = distance(planets[planet2], sun)\n        return distance1 < distance2\n  \
    \  end\n    \n    local function sortByDistance7(planet1, planet2)\n        local\
    \ distance1 = distance(planets[planet1], sun)\n        local distance2 = distance(planets[planet2],\
    \ sun)\n        return distance1 <= distance2\n    end\n    \n    local function\
    \ sortByDistance8(planet1, planet2)\n        local distance1 = ", "    local function\
    \ distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance2(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance3(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance4(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance5(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance6(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance7(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance8(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance9(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance10(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n        return distance(a,b",
  "    local planets = {\n        Mercury = {\n            Orbit = { \n          \
    \      Longitude = 150.294, \n                Latitude = -0.002, \n          \
    \      Distance = 1.49 \n            }, \n            Orbit = { \n           \
    \     Longitude = 150.294, \n                Latitude = -0.002, \n           \
    \     Distance = 1.49 \n            }, \n            Orbit = { \n            \
    \    Longitude = 150.294, \n                Latitude = -0.002, \n            \
    \    Distance = 1.49 \n            }, \n            Orbit = { \n             \
    \   Longitude = 150.294, \n                Latitude = -0.002, \n             \
    \   Distance = 1.49 \n            }, \n            Orbit = { \n              \
    \  Longitude = 150.294, \n                Latitude = -0.002, \n              \
    \  Distance = 1.49 \n            }, \n            Orbit = { \n               \
    \ Longitude = 150.294, \n                Latitude = -0.002, \n               \
    \ Distance = 1.49 \n            }, \n            Orbit = { \n                Longitude\
    \ = 150.294, \n                Latitude = -0.002, \n                Distance =\
    \ 1.49 \n            }, \n            Orbit = { \n                Longitude =\
    \ 150.294, \n                Latitude = -0.002, \n                Distance = 1.49\
    \ \n            }, \n            Orbit = { \n                Longitude = 150.294,\
    \ \n                Latitude = -0.002, \n                Distance = 1.49 \n  \
    \          }, \n            Orbit = { \n                Longitude = 150.294, \n\
    \                Latitude = -0.002, \n                Distance = 1.49 \n     \
    \       }, \n            Orbit = { \n                Longitude = 150.294, \n \
    \               Latitude = -0.002, \n                Distance = 1.49 \n      \
    \      }, \n            Orbit = { \n                Longitude = 150.294, \n  \
    \              Latitude = -0.002, \n                Distance = 1.49 \n       \
    \     }, \n            Orbit = { \n                Longitude = 150.294, \n   \
    \             Latitude = -0.002, \n                Distance = 1.49 \n        \
    \    }, \n            Orbit = { \n                Longitude = 150.294, \n    \
    \            Latitude = -0.002, \n                Distance = 1.49 \n         \
    \   }, \n            Orbit = { \n                Longitude = 150.294, \n     \
    \           Latitude = -0.002, \n                Distance = 1.49 \n          \
    \  }, \n            Orbit = { \n                Longitude = 150.294, \n      \
    \          Latitude = -0.002, \n                Distance = 1.49 \n           \
    \ }, \n            Orbit = ", "    local function dist(planet1, planet2)\n   \
    \     -- Write your code here\n    end\n    local function sortByDist(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist2(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist3(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist4(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist5(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist6(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist7(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist8(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist9(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist10(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist11(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist12(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist13(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist14(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist15(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist16(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist17(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist18(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist19(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist20(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist21(planet1,\
    \ planet2)\n        -- Write your code here\n    end\n    local function sortByDist22(planet1,\
    \ planet2)\n        ", "    local function dist(planet1, planet2)\n        local\
    \ function dist2(planet1, planet2)\n            local function dist3(planet1,\
    \ planet2)\n                local function dist4(planet1, planet2)\n         \
    \           local function dist5(planet1, planet2)\n                        local\
    \ function dist6(planet1, planet2)\n                            local function\
    \ dist7(planet1, planet2)\n                                local function dist8(planet1,\
    \ planet2)\n                                    return math.abs(math.sin(math.rad(planet1))\
    \ * math.sin(math.rad(planet2)) + math.cos(math.rad(planet1)) * math.cos(math.rad(planet2))\
    \ * math.cos(math.rad(planet1) + math.rad(planet2)))\n                       \
    \         end\n                                return dist8(planet1, planet2)\n\
    \                            end\n                            return dist7(planet1,\
    \ planet2)\n                        end\n                        return dist6(planet1,\
    \ planet2)\n                    end\n                    return dist5(planet1,\
    \ planet2)\n                end\n                return dist4(planet1, planet2)\n\
    \            end\n            return dist3(planet1, planet2)\n        end\n  \
    \      return dist2(planet1, planet2)\n    end\n    return dist(planet1, planet2)\n\
    end", "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2\
    \ + (a.y-b.y)^2 + (a.z-b.z)^2)\n    end\n    local function sortByDistance(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance2(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance3(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance4(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance5(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance6(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance7(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance8(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance9(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance10(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance11(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance12(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance13(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance14(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance15(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance16(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance17(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance18(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance19(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance20(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance21(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance22(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance23(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance24(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance25(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance26(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByDistance27(a,b)\n\
    \        return distance(a,b", "    local function distance(planet1, planet2)\n\
    \        -- TODO: Implement the distance function here\n    end\n    \n    local\
    \ function get_orbits(planet1, planet2)\n        -- TODO: Implement the get_orbits\
    \ function here\n    end\n    \n    local function sort_by_distance(planet1, planet2)\n\
    \        -- TODO: Implement the sort_by_distance function here\n    end\n    \n\
    \    return get_orbits(planet1, planet2), sort_by_distance(planet1, planet2)\n\
    end", "    local planets = {}\n    local sun = sun(planet1, planet2)\n    local\
    \ planet1 = planet1 or \"Mercury\"\n    local planet2 = planet2 or \"Venus\"\n\
    \    local sun = sun(planet1, planet2)\n    local sun_planet = sun_planet(planet1,\
    \ planet2)\n    local sun_planet_distance = sun_planet_distance(planet1, planet2)\n\
    \    local sun_planet_orbit = sun_planet_orbit(planet1, planet2)\n    local sun_planet_orbit2\
    \ = sun_planet_orbit2(planet1, planet2)\n    local sun_planet_orbit3 = sun_planet_orbit3(planet1,\
    \ planet2)\n    local sun_planet_orbit4 = sun_planet_orbit4(planet1, planet2)\n\
    \    local sun_planet_orbit5 = sun_planet_orbit5(planet1, planet2)\n    local\
    \ sun_planet_orbit6 = sun_planet_orbit6(planet1, planet2)\n    local sun_planet_orbit7\
    \ = sun_planet_orbit7(planet1, planet2)\n    local sun_planet_orbit8 = sun_planet_orbit8(planet1,\
    \ planet2)\n    local sun_planet_orbit9 = sun_planet_orbit9(planet1, planet2)\n\
    \    local sun_planet_orbit10 = sun_planet_orbit10(planet1, planet2)\n    local\
    \ sun_planet_orbit11 = sun_planet_orbit11(planet1, planet2)\n    local sun_planet_orbit12\
    \ = sun_planet_orbit12(planet1, planet2)\n    local sun_planet_orbit13 = sun_planet_orbit13(planet1,\
    \ planet2)\n    local sun_planet_orbit14 = sun_planet_orbit14(planet1, planet2)\n\
    \    local sun_planet_orbit15 = sun_planet_orbit15(planet1, planet2)\n    local\
    \ sun_planet_orbit16 = sun_planet_orbit16(planet1, planet2)\n    local sun_planet_orbit17\
    \ = sun_planet_orbit17(planet1, planet2)\n    local sun_planet_orbit18 = sun_planet_orbit18(planet1,\
    \ planet2)\n    local sun_planet_orbit19 = sun_planet_orbit19(planet1, planet",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\",\n    }\n    local planet1, planet2 = string.lower(planet1),\
    \ string.lower(planet2)\n    local planet1, planet2 = planets[planet1], planets[planet2]\n\
    \    local sun = math.rad(math.pi/2)\n    local orbit1, orbit2 = math.rad(math.pi/2),\
    \ math.rad(math.pi/2)\n    local distance = {}\n    for i = 1, 8 do\n        local\
    \ distance = math.abs(math.acos(math.sin(orbit1)*math.sin(orbit2) + \n       \
    \     math.cos(orbit1)*math.cos(orbit2)*math.cos(planet2-planet1)))\n        table.insert(distance,\
    \ distance)\n    end\n    table.sort(distance)\n    local results = {}\n    for\
    \ i = 1, 8 do\n        if distance[i] <= sun then\n            table.insert(results,\
    \ i)\n        end\n    end\n    return results\nend", "    local function distance(p1,\
    \ p2)\n        local function distance(p1, p2)\n            local function distance(p1,\
    \ p2)\n                local function distance(p1, p2)\n                    local\
    \ function distance(p1, p2)\n                        local function distance(p1,\
    \ p2)\n                            local function distance(p1, p2)\n         \
    \                       local function distance(p1, p2)\n                    \
    \                local function distance(p1, p2)\n                           \
    \             local function distance(p1, p2)\n                              \
    \              local function distance(p1, p2)\n                             \
    \                   local function distance(p1, p2)\n                        \
    \                            local function distance(p1, p2)\n               \
    \                                         local function distance(p1, p2)\n  \
    \                                                          local function distance(p1,\
    \ p2)\n                                                                local function\
    \ distance(p1, p2)\n                                                         \
    \           local function distance(p1, p2)\n                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                local function distance(p1, p2)\n           \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                local function distance(p1, p2)\n           \
    \                                                                            \
    \                                                                         local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                  local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                           local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                            local function distance(p1, p2)\n               \
    \                                                                            \
    \                                                                            \
    \                 local function distance(p1, p2)\n                          \
    \                                                                            \
    \                                                                            \
    \          local function distance(p1, p2)\n                                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                            \
    \        local function distance(p1, p2)\n                                   \
    \                                                                            \
    \                                                                            \
    \             local function distance(p1, p2)\n                              \
    \                                                                            \
    \                                                                            \
    \                      local function distance(p1, p2)\n                     \
    \                                                                            \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                                      local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \           local function distance(p1, p2)\n                                \
    \                                                                            \
    \                                                                            \
    \        ", "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2\
    \ + (a.y-b.y)^2 + (a.z-b.z)^2)\n    end\n    local function sortByDistance(a,b)\n\
    \        return distance(a,b) \n    end\n    local function sortByProximity(a,b)\n\
    \        return distance(a,b) - distance(b,a)\n    end\n    local function sortByName(a,b)\n\
    \        return a.name < b.name\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function sortByOrbit(a,b)\n\
    \        return a.orbit < b.orbit\n    end\n    local function ", "    local function\
    \ distance(a,b) return math.abs(a-b) end\n    local function planets(planet1,\
    \ planet2) return \n        table.sort(\n            table.filter(\n         \
    \       table.sort(\n                    table.filter(\n                     \
    \   table.sort(\n                            table.filter(\n                 \
    \               table.sort(\n                                    table.filter(\n\
    \                                        table.sort(\n                       \
    \                     table.filter(\n                                        \
    \        table.sort(\n                                                    table.filter(\n\
    \                                                        table.sort(\n       \
    \                                                     table.filter(\n        \
    \                                                        table.sort(\n       \
    \                                                             table.filter(\n\
    \                                                                        table.sort(\n\
    \                                                                            table.filter(\n\
    \                                                                            \
    \    table.sort(\n                                                           \
    \                         table.filter(\n                                    \
    \                                                    table.sort(\n           \
    \                                                                            \
    \     table.filter(\n                                                        \
    \                                        table.sort(\n                       \
    \                                                                            \
    \ table.sort(\n                                                              \
    \                                          table.filter(\n                   \
    \                                                                            \
    \             table.sort(\n                                                  \
    \                                                              table.filter(\n\
    \                                                                            \
    \                                        table.sort(\n                       \
    \                                                                            \
    \                     table.filter(\n                                        \
    \                                                                            \
    \        table.sort(\n                                                       \
    \                                                                         {planet1,\
    \ planet2},\n                                                                \
    \                                                                distance\n  \
    \                                                                            \
    \                                              )\n                           \
    \                                                                            \
    \                 )\n                                                        \
    \                                                        )\n                 \
    \                                                                            \
    \   )\n                                                                      \
    \                      )\n                                                   \
    \                                     )\n                                    \
    \                                                )\n                         \
    \                                                       )\n                  \
    \                                                          )\n               \
    \                                                         )\n                \
    \                                                    )\n                     \
    \                                           )\n                              \
    \                              )\n                                           \
    \             )\n                                                    )\n     \
    \                                           )\n                              \
    \              )\n                                        )\n                \
    \                    )\n                                )\n                  \
    \          )\n                        )\n                    )\n             \
    \   )\n            )\n        )\n    end\n    return planets(planet1, planet2)\n\
    end", "    local function distance(planet1, planet2)\n        -- TODO: Implement\
    \ this function\n    end\n    local function sort(planet1, planet2)\n        --\
    \ TODO: Implement this function\n    end\n    return sort(planet1, planet2)\n\
    end", "    local function distance(p1, p2)\n        local function distance(p1,\
    \ p2)\n            local function distance(p1, p2)\n                local function\
    \ distance(p1, p2)\n                    local function distance(p1, p2)\n    \
    \                    local function distance(p1, p2)\n                       \
    \     local function distance(p1, p2)\n                                local function\
    \ distance(p1, p2)\n                                    local function distance(p1,\
    \ p2)\n                                        local function distance(p1, p2)\n\
    \                                            local function distance(p1, p2)\n\
    \                                                local function distance(p1, p2)\n\
    \                                                    local function distance(p1,\
    \ p2)\n                                                        local function\
    \ distance(p1, p2)\n                                                         \
    \   local function distance(p1, p2)\n                                        \
    \                        local function distance(p1, p2)\n                   \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \  local function distance(p1, p2)\n                                         \
    \                                   local function distance(p1, p2)\n        \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \  local function distance(p1, p2)\n                                         \
    \                                                                            \
    \                                   local function distance(p1, p2)\n        \
    \                                                                            \
    \                                                                        local\
    \ function distance(p1, p2)\n                                                \
    \                                                                            \
    \                                    local function distance(p1, p2)\n       \
    \                                                                            \
    \                                                                            \
    \     local function distance(p1, p2)\n                                      \
    \                                                                            \
    \                                                      local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                          local function distance(p1, p2)\n                 \
    \                                                                            \
    \                                                                            \
    \       local function distance(p1, p2)\n                                    \
    \                                                                            \
    \                                                                    local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                   local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                          local function distance(p1, p2)\n \
    \                                                                            \
    \                                                                            \
    \                                       local function distance(p1, p2)\n    \
    \                                                                            \
    \                                                                            \
    \                                        local function distance(p1, p2)\n   \
    \                                                                            \
    \                                                                            \
    \                                             local function distance(p1, p2)\n\
    \                                                                            \
    \                                                                            \
    \                                                    local function distance(p1,\
    \ p2)\n                                                                      \
    \                                                                            \
    \                                                              local function\
    \ distance(p1, p2)\n                                                         \
    \                                                                            \
    \                                                                            \
    \   local function distance(p1, p2)\n                                        \
    \                                                                            \
    \                                                                            \
    \                        local function distance(p1, p2)\n                   \
    \                                                                            \
    \                                                                            \
    \                                                 local function distance(p1,\
    \ p2)\n                                                                ", "  \
    \  local function distance(x, y)\n        return math.sqrt(math.pow(x-y, 2))\n\
    \    end\n    local function sortByProximity(planet1, planet2)\n        local\
    \ function sortByDistance(planet1, planet2)\n            local distance1 = distance(planet1.orbit.x,\
    \ planet1.orbit.y, planet2.orbit.x, planet2.orbit.y)\n            local distance2\
    \ = distance(planet2.orbit.x, planet2.orbit.y, planet1.orbit.x, planet1.orbit.y)\n\
    \            if distance1 < distance2 then\n                return 1\n       \
    \     elseif distance1 > distance2 then\n                return -1\n         \
    \   else\n                return 0\n            end\n        end\n        return\
    \ sortByDistance(planet1, planet2)\n    end\n    local function sortByDistance(planet1,\
    \ planet2)\n        local distance1 = distance(planet1.orbit.x, planet1.orbit.y,\
    \ planet2.orbit.x, planet2.orbit.y)\n        local distance2 = distance(planet2.orbit.x,\
    \ planet2.orbit.y, planet1.orbit.x, planet1.orbit.y)\n        return distance1\
    \ < distance2 ? 1 : distance1 > distance2 ? -1 : 0\n    end\n    local function\
    \ sortByDistance(planet1, planet2)\n        local distance1 = distance(planet1.orbit.x,\
    \ planet1.orbit.y, planet2.orbit.x, planet2.orbit.y)\n        local distance2\
    \ = distance(planet2.orbit.x, planet2.orbit.y, planet1.orbit.x, planet1.orbit.y)\n\
    \        return distance1 < distance2 ? 1 : distance1 > distance2 ? -1 : 0\n \
    \   end\n    local function sortByDistance(planet1, planet2)\n        local distance1\
    \ = distance(planet1.orbit.x, planet1.orbit.y, planet2.orbit.x, planet2.orbit.y)\n\
    \        local distance2 = distance(planet2.orbit.x, planet2.orbit.y, planet1.orbit.x,\
    \ planet1.orbit.y)\n        return distance1 < distance2 ? 1 : distance1 > distance2\
    \ ? -1 : 0\n    end\n    local function sortByDistance(planet1, planet2)\n   \
    \     local distance1 = distance(planet1.orbit.x, planet1.orbit.y, planet2.orbit.x,\
    \ planet2.orbit.y)\n        local distance2 = distance(planet2.orbit.x, planet2.orbit.y,\
    \ planet1.orbit.x, planet1.orbit.y)\n        return distance1 < distance2 ? 1\
    \ : distance1 > distance2 ", "    local function distance(planet1, planet2)\n\
    \        -- Write your code here\n    end\n    return distance(planet1, planet2)\n\
    end", "    local function distance(a,b)\n        return math.sqrt((a.x-b.x)^2+(a.y-b.y)^2+(a.z-b.z)^2)\n\
    \    end\n    local function sortByDistance(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance2(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance3(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance4(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance5(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance6(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance7(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance8(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance9(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance10(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance11(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance12(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance13(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance14(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance15(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance16(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance17(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance18(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance19(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance20(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance21(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance22(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance23(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance24(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance25(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance26(a,b)\n        return distance(a,b)\
    \ \n    end\n    local function sortByDistance27(a,b)\n        return distance(a,b",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\",\n    }\n    local function distance(planet1, planet2)\n\
    \        local distance = nil\n        local sun = nil\n        local sun_distance\
    \ = nil\n        local sun_radius = nil\n        local sun_angle = nil\n     \
    \   local sun_phase = nil\n        local sun_distance = nil\n        local sun_radius\
    \ = nil\n        local sun_angle = nil\n        local sun_phase = nil\n      \
    \  local sun_distance = nil\n        local sun_radius = nil\n        local sun_angle\
    \ = nil\n        local sun_phase = nil\n        local sun_distance = nil\n   \
    \     local sun_radius = nil\n        local sun_angle = nil\n        local sun_phase\
    \ = nil\n        local sun_distance = nil\n        local sun_radius = nil\n  \
    \      local sun_angle = nil\n        local sun_phase = nil\n        local sun_distance\
    \ = nil\n        local sun_radius = nil\n        local sun_angle = nil\n     \
    \   local sun_phase = nil\n        local sun_distance = nil\n        local sun_radius\
    \ = nil\n        local sun_angle = nil\n        local sun_phase = nil\n      \
    \  local sun_distance = nil\n        local sun_radius = nil\n        local sun_angle\
    \ = nil\n        local sun_phase = nil\n        local sun_distance = nil\n   \
    \     local sun_radius = nil\n        local sun_angle = nil\n        local sun_phase\
    \ = nil\n        local sun_distance = nil\n        local sun_radius = nil\n  \
    \      local sun_angle = nil\n        local sun_phase = nil\n        local sun_distance\
    \ = nil\n        local sun_radius = nil\n        local sun_angle = nil\n     \
    \   local sun_phase = nil\n        local sun_distance = nil\n        local sun_radius\
    \ = nil\n        local sun_angle = nil\n        local sun_phase = nil\n      \
    \  local sun_distance = nil\n        local sun_radius = nil\n        local sun_angle\
    \ = nil\n        local sun_phase = nil\n        local sun_distance = nil\n   \
    \     local sun_radius = nil\n        local sun_angle = nil\n        local sun_phase\
    \ = nil\n        local sun_distance = nil\n        local sun_radius = nil\n  \
    \      local sun_angle = nil\n        local sun_phase = nil\n        local sun_distance\
    \ = ", "    local function distance(p1, p2)\n        -- Write your code here\n\
    \    end\n    \n    local function sortByDistance(planet1, planet2)\n        --\
    \ Write your code here\n    end\n    \n    return sortByDistance(planet1, planet2)\n\
    end", "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n     \
    \   \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n\
    \        \"Uranus\",\n        \"Neptune\"\n    }\n    local function distance(planet1,\
    \ planet2)\n        local distance = math.sqrt((math.pow(planet1.x - planet2.x,\
    \ 2) + math.pow(planet1.y - planet2.y, 2)) + math.pow(planet1.z - planet2.z, 2))\n\
    \        return distance\n    end\n    local function sortByDistance(planet1,\
    \ planet2)\n        local distance = distance(planet1, planet2)\n        local\
    \ planet = planets[math.floor(distance / 2)]\n        return distance\n    end\n\
    \    local function sortByProximity(planet1, planet2)\n        local distance\
    \ = sortByDistance(planet1, planet2)\n        local planet = planets[math.floor(distance\
    \ / 2)]\n        return distance\n    end\n    local function sortByProximityAndDistance(planet1,\
    \ planet2)\n        local distance = sortByDistance(planet1, planet2)\n      \
    \  local planet = planets[math.floor(distance / 2)]\n        return distance,\
    \ planet\n    end\n    local function sortByProximityAndDistanceAndPlanet(planet1,\
    \ planet2)\n        local distance = sortByDistance(planet1, planet2)\n      \
    \  local planet = planets[math.floor(distance / 2)]\n        return distance,\
    \ planet\n    end\n    local function sortByProximityAndDistanceAndPlanetAndPlanet(planet1,\
    \ planet2)\n        local distance = sortByDistance(planet1, planet2)\n      \
    \  local planet = planets[math.floor(distance / 2)]\n        return distance,\
    \ planet\n    end\n    local function sortByProximityAndDistanceAndPlanetAndPlanetAndPlanet(planet1,\
    \ planet2)\n        local distance = sortByDistance(planet1, planet2)\n      \
    \  local planet = planets[math.floor(distance / 2)]\n        return distance,\
    \ planet\n    end\n    local function sortByProximityAndDistanceAndPlanetAndPlanetAndPlanetAndPlanet(planet1,\
    \ planet2)\n        local distance = sortByDistance(planet1, planet2)\n      \
    \  local planet = planets[math.floor(distance / 2)]\n        return distance,\
    \ planet\n    end\n    local function sortByProximityAndDistanceAndPlanetAndPlanetAnd"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
