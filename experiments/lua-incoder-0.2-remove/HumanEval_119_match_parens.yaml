name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a list of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return false\n  end\n\
    \  return true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open == close then\n   \
    \ return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' then\n        open = open + 1\n      elseif s[i] == ')' then\n      \
    \  close = close + 1\n      elseif s[i] == '[' then\n        close = close + 1\n\
    \      elseif s[i] == ']' then\n        open = open - 1\n      end\n    end\n\
    \    return open == close and open > 0 and close > 0\n  end\n  local function\
    \ is_good(s)\n    local good = true\n    local open = 0\n    local close = 0\n\
    \    for i = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n  \
    \    elseif s[i] == ')' then\n        close = close + 1\n      elseif s[i] ==\
    \ '[' then\n        close = close + 1\n      elseif s[i] == ']' then\n       \
    \ open = open - 1\n      end\n      if open > close then\n        good = false\n\
    \      end\n    end\n    return good\n  end\n  local function is_good2(s)\n  \
    \  local good = true\n    local open = 0\n    local close = 0\n    for i = 1,\
    \ #s do\n      if s[i] == '(' then\n        open = open + 1\n      elseif s[i]\
    \ == ')' then\n        close = close + 1\n      elseif s[i] == '[' then\n    \
    \    close = close + 1\n      elseif s[i] == ']' then\n        open = open - 1\n\
    \      end\n      if open > close then\n        good = false\n      end\n    \
    \  if open < close then\n        good = false\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good3(s)\n    local good = true\n    local\
    \ open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n\
    \        open = open + 1\n      elseif s[i] == ')' then\n        close = close\
    \ + 1\n      elseif s[i] == '[' then\n        close = close + 1\n      elseif\
    \ s[i] == ']' then\n        open = open - 1\n      end\n      if open < close\
    \ then\n        good = false\n      end\n      if open > close then\n        good\
    \ = false\n      end\n    end\n    return good\n  end\n  local function is_good4(s)\n\
    \    local good = true\n    local open = 0\n    local close = 0\n    for i = 1,\
    \ #s do\n      if s[i] == '(' then\n        open = open + 1\n      elseif s[i]\
    \ == ')' then\n        close = close + 1\n", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close\
    \ + 1\n    elseif lst[i] == '(' and open ~= close then\n      return 'No'\n  \
    \  end\n  end\n  return 'Yes'\nend", "  local function is_balanced(s)\n    local\
    \ open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n\
    \        open = open + 1\n      elseif s[i] == ')' then\n        close = close\
    \ + 1\n      elseif s[i] == '[' then\n        close = close + 1\n      elseif\
    \ s[i] == ']' then\n        open = open - 1\n      end\n    end\n    return open\
    \ == close and open > 0 and close > 0\n  end\n  local function is_good(s)\n  \
    \  local good = true\n    for i = 1, #s do\n      if s[i] == '(' then\n      \
    \  good = good and not is_balanced(s)\n      elseif s[i] == ')' then\n       \
    \ good = good and is_balanced(s)\n      elseif s[i] == '[' then\n        good\
    \ = good and is_balanced(s)\n      elseif s[i] == ']' then\n        good = good\
    \ and is_balanced(s)\n      end\n    end\n    return good\n  end\n  local function\
    \ make_good(s)\n    local good = true\n    for i = 1, #s do\n      if s[i] ==\
    \ '(' then\n        good = good and is_good(s:sub(1, i - 1))\n      elseif s[i]\
    \ == ')' then\n        good = good and is_good(s:sub(1, i - 1))\n      elseif\
    \ s[i] == '[' then\n        good = good and is_good(s:sub(1, i - 1))\n      elseif\
    \ s[i] == ']' then\n        good = good and is_good(s:sub(1, i - 1))\n      end\n\
    \    end\n    return good\n  end\n  local function make_good2(s)\n    local good\
    \ = true\n    for i = 1, #s do\n      if s[i] == '(' then\n        good = good\
    \ and is_good2(s:sub(1, i - 1))\n      elseif s[i] == ')' then\n        good =\
    \ good and is_good2(s:sub(1, i - 1))\n      elseif s[i] == '[' then\n        good\
    \ = good and is_good2(s:sub(1, i - 1))\n      elseif s[i] == ']' then\n      \
    \  good = good and is_good2(s:sub(1, i - 1))\n      end\n    end\n    return good\n\
    \  end\n  local function make_good3(s)\n    local good = true\n    for i = 1,\
    \ #s do\n      if s[i] == '(' then\n        good = good and is_good3(s:sub(1,\
    \ i - 1))\n      elseif s[i] == ')' then\n        good = good and is_good3(s:sub(1,\
    \ i - 1))\n      elseif s[i] == '[' then\n        ", "  local stack = {}\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  return #stack == 0\nend", "  local open\
    \ = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and\
    \ close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open\
    \ ~= close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n  if open >\
    \ close then\n    return 'No'\n  end\n  return match_parens(lst)\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '.' then\n      if open ~= close\
    \ then\n        good = false\n        break\n      end\n    end\n  end\n  return\
    \ good\nend", "  local function is_balanced(s)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open\
    \ + 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif\
    \ s[i] == '[' then\n        close = close + 1\n      elseif s[i] == ']' then\n\
    \        open = open - 1\n      end\n    end\n    return open == close and open\
    \ > 0\n  end\n  local function is_good(s)\n    local open = 0\n    local close\
    \ = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open +\
    \ 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif s[i]\
    \ == '[' then\n        close = close + 1\n      elseif s[i] == ']' then\n    \
    \    open = open - 1\n      end\n    end\n    return open == close and open >\
    \ 0\n  end\n  local function is_good_string(s)\n    local good = false\n    for\
    \ i = 1, #s do\n      if s[i] == '(' then\n        good = good or is_good(s[i+1:])\n\
    \      elseif s[i] == ')' then\n        good = good or is_good(s[i+1:])\n    \
    \  elseif s[i] == '[' then\n        good = good or is_good(s[i+1:])\n      elseif\
    \ s[i] == ']' then\n        good = good or is_good(s[i+1:])\n      end\n    end\n\
    \    return good\n  end\n  local function is_good_list(lst)\n    local good =\
    \ false\n    for i = 1, #lst do\n      if lst[i] == '(' then\n        good = good\
    \ or is_good(lst[i+1:])\n      elseif lst[i] == ')' then\n        good = good\
    \ or is_good(lst[i+1:])\n      elseif lst[i] == '[' then\n        good = good\
    \ or is_good(lst[i+1:])\n      elseif lst[i] == ']' then\n        good = good\
    \ or is_good(lst[i+1:])\n      end\n    end\n    return good\n  end\n  local function\
    \ is_good_parens(lst)\n    local good = false\n    for i = 1, #lst do\n      if\
    \ lst[i] == '(' then\n        good = good or is_balanced(lst[i+1:])\n      elseif\
    \ lst[i] == ')' then\n        good = good or is_balanced(lst[i+1:])\n      elseif\
    \ lst[i] == '[' then\n        good = good or is_balanced(lst[i+", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       return false\n      end\n      open = open - 1\n    end\n  end\n  return\
    \ true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "   \
    \ local stack = {}\n    local open = 0\n    local close = 0\n    for i = 1, #lst\
    \ do\n        if lst[i] == '(' then\n            stack[#stack + 1] = i\n     \
    \       open = open + 1\n        elseif lst[i] == ')' then\n            close\
    \ = close + 1\n            if open == close then\n                local start\
    \ = stack[#stack + 1]\n                local end = i\n                local str\
    \ = table.concat(lst:sub(1, start), '')\n                local str2 = table.concat(lst:sub(end),\
    \ '')\n                if str == str2 then\n                    return 'Yes'\n\
    \                else\n                    return 'No'\n                end\n\
    \            end\n        end\n    end\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      good = good and (open > close)\n \
    \   elseif lst[i] == ')' then\n      good = good and (open < close)\n    end\n\
    \  end\n  if good then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return false\n  end\n  return true\n\
    end", "  local function is_balanced(s)\n    local open = 0\n    local close =\
    \ 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n\
    \      elseif s[i] == ')' then\n        close = close + 1\n      elseif s[i] ==\
    \ '[' then\n        close = close + 1\n      elseif s[i] == ']' then\n       \
    \ open = open - 1\n      end\n    end\n    return open == close\n  end\n  local\
    \ function is_good(s)\n    local good = true\n    for i = 1, #s do\n      if s[i]\
    \ == '(' then\n        good = not good\n      elseif s[i] == ')' then\n      \
    \  good = not good\n      elseif s[i] == '[' then\n        good = not good\n \
    \     elseif s[i] == ']' then\n        good = not good\n      end\n    end\n \
    \   return good\n  end\n  local function is_good_parens(s)\n    local good = true\n\
    \    for i = 1, #s do\n      if s[i] == '(' then\n        good = not good\n  \
    \    elseif s[i] == ')' then\n        good = not good\n      elseif s[i] == '['\
    \ then\n        good = not good\n      elseif s[i] == ']' then\n        good =\
    \ not good\n      end\n    end\n    return good\n  end\n  local function is_good_brackets(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] == '[' then\n    \
    \    good = not good\n      elseif s[i] == ']' then\n        good = not good\n\
    \      end\n    end\n    return good\n  end\n  local function is_good_brackets_parens(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] == '(' then\n    \
    \    good = not good\n      elseif s[i] == ')' then\n        good = not good\n\
    \      elseif s[i] == '[' then\n        good = not good\n      elseif s[i] ==\
    \ ']' then\n        good = not good\n      end\n    end\n    return good\n  end\n\
    \  local function is_good_brackets_brackets(s)\n    local good = true\n    for\
    \ i = 1, #s do\n      if s[i] == '[' then\n        good = not good\n      elseif\
    \ s[i] == ']' then\n        good = not good\n      end\n    end\n    return good\n\
    \  end\n  local function is_good_brackets_brackets_parens(s)\n    local good =\
    \ true\n    for i = 1, #s do\n      if s[i] == '(' then\n        good = ", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  return open >= close and open ~= 0\nend", "  local open\
    \ = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '.' then\n      if open ~= close then\n  \
    \      good = false\n        break\n      end\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n      if\
    \ open ~= close then\n        good = false\n      end\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  return open == close and open ~= 0\n\
    end", "  local function is_balanced(s)\n    local open = 0\n    local close =\
    \ 0\n    for i = 1, #s do\n      if s[i] == '(' and open > 0 then\n        open\
    \ = open - 1\n      elseif s[i] == ')' and close > 0 then\n        close = close\
    \ - 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif\
    \ s[i] == '(' and open > 0 then\n        open = open + 1\n      end\n    end\n\
    \    return open == close and open > 0\n  end\n  local function is_good(s)\n \
    \   local good = true\n    for i = 1, #s do\n      if s[i] == '(' and is_balanced(s)\
    \ then\n        good = false\n      end\n    end\n    return good\n  end\n  local\
    \ function good(s)\n    local good = true\n    for i = 1, #s do\n      if s[i]\
    \ == '(' and is_balanced(s) then\n        good = false\n      end\n    end\n \
    \   return good\n  end\n  local function good2(s)\n    local good = true\n   \
    \ for i = 1, #s do\n      if s[i] == '(' and is_balanced(s) then\n        good\
    \ = false\n      end\n    end\n    return good\n  end\n  local function good3(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] == '(' and is_balanced(s)\
    \ then\n        good = false\n      end\n    end\n    return good\n  end\n  local\
    \ function good4(s)\n    local good = true\n    for i = 1, #s do\n      if s[i]\
    \ == '(' and is_balanced(s) then\n        good = false\n      end\n    end\n \
    \   return good\n  end\n  local function good5(s)\n    local good = true\n   \
    \ for i = 1, #s do\n      if s[i] == '(' and is_balanced(s) then\n        good\
    \ = false\n      end\n    end\n    return good\n  end\n  local function good6(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] == '(' and is_balanced(s)\
    \ then\n        good = false\n      end\n    end\n    return good\n  end\n  local\
    \ function good7(s)\n    local good = true\n    for i = 1, #s do\n      if s[i]\
    \ == '(' and is_balanced(s) then\n        good = false\n      end\n    end\n \
    \   return good\n  end\n  local function good8(s)\n    local good = true\n   \
    \ for i = 1, #s do\n      if s[i] == '(' and is_balanced(s) then\n        good\
    \ = false\n      end\n    end\n    return good\n  end\n  local function good9(s)\n\
    \    local good", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '' and open\
    \ == close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '.' and open ~= close then\n  \
    \    good = false\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '.' then\n      if open ~= close then\n        good = false\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n      open\
    \ = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      close = close\
    \ - 1\n    elseif lst[i] == '(' and open > close then\n      return false\n  \
    \  elseif lst[i] == ')' and close > open then\n      return false\n    end\n \
    \ end\n  return true\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '(' and close > open then\n      good = false\n    end\n  end\n  return good\n\
    end", "  local function is_balanced(lst)\n    local stack = {}\n    for i = 1,\
    \ #lst do\n      if lst[i] == '(' or lst[i] == ')' then\n        table.insert(stack,\
    \ lst[i])\n      elseif stack[#stack] == nil then\n        return false\n    \
    \  else\n        stack[#stack] = nil\n      end\n    end\n    return #stack ==\
    \ 0\n  end\n  local function make_good(lst)\n    local stack = {}\n    for i =\
    \ 1, #lst do\n      if lst[i] == '(' or lst[i] == ')' then\n        table.insert(stack,\
    \ lst[i])\n      elseif stack[#stack] == nil then\n        return false\n    \
    \  else\n        stack[#stack] = nil\n      end\n    end\n    return #stack ==\
    \ 0\n  end\n  local function make_good2(lst)\n    local stack = {}\n    for i\
    \ = 1, #lst do\n      if lst[i] == '(' or lst[i] == ')' then\n        table.insert(stack,\
    \ lst[i])\n      elseif stack[#stack] == nil then\n        return false\n    \
    \  else\n        stack[#stack] = nil\n      end\n    end\n    return #stack ==\
    \ 0\n  end\n  local function make_good3(lst)\n    local stack = {}\n    for i\
    \ = 1, #lst do\n      if lst[i] == '(' or lst[i] == ')' then\n        table.insert(stack,\
    \ lst[i])\n      elseif stack[#stack] == nil then\n        return false\n    \
    \  else\n        stack[#stack] = nil\n      end\n    end\n    return #stack ==\
    \ 0\n  end\n  local function make_good4(lst)\n    local stack = {}\n    for i\
    \ = 1, #lst do\n      if lst[i] == '(' or lst[i] == ')' then\n        table.insert(stack,\
    \ lst[i])\n      elseif stack[#stack] == nil then\n        return false\n    \
    \  else\n        stack[#stack] = nil\n      end\n    end\n    return #stack ==\
    \ 0\n  end\n  local function make_good5(lst)\n    local stack = {}\n    for i\
    \ = 1, #lst do\n      if lst[i] == '(' or lst[i] == ')' then\n        table.insert(stack,\
    \ lst[i])\n      elseif stack[#stack] == nil then\n        return false\n    \
    \  else\n        stack[#stack] = nil\n      end\n    end\n    return #stack ==\
    \ 0\n  end\n  local function make_good6(lst)\n    local stack = {}\n    for i\
    \ = 1, #lst do\n      if lst[i] == '(' or lst[i] == ')' then\n        table.insert(",
  "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '('\
    \ and open ~= close then\n      good = false\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open == close\
    \ then\n      good = false\n    end\n  end\n  return good\nend", "  local function\
    \ is_balanced(s)\n    local stack = {}\n    local open = 0\n    for c in s:gmatch(\"\
    [()]+\") do\n      if c == '(' and stack[#stack] == nil then\n        open = open\
    \ + 1\n      elseif c == ')' and stack[#stack] == open then\n        open = open\
    \ - 1\n      elseif c == '(' and stack[#stack] ~= nil then\n        stack[#stack]\
    \ = open\n      elseif c == ')' and stack[#stack] ~= nil then\n        stack[#stack]\
    \ = nil\n      end\n    end\n    return open == 0 and stack[#stack] == nil\n \
    \ end\n  local function good(s)\n    local stack = {}\n    local open = 0\n  \
    \  for c in s:gmatch(\"[()]+\") do\n      if c == '(' and stack[#stack] == nil\
    \ then\n        open = open + 1\n      elseif c == ')' and stack[#stack] == open\
    \ then\n        open = open - 1\n      elseif c == '(' and stack[#stack] ~= nil\
    \ then\n        stack[#stack] = open\n      elseif c == ')' and stack[#stack]\
    \ ~= nil then\n        stack[#stack] = nil\n      end\n    end\n    return open\
    \ == 0\n  end\n  local function good2(s)\n    local stack = {}\n    local open\
    \ = 0\n    for c in s:gmatch(\"[()]+\") do\n      if c == '(' and stack[#stack]\
    \ == nil then\n        open = open + 1\n      elseif c == ')' and stack[#stack]\
    \ == open then\n        open = open - 1\n      elseif c == '(' and stack[#stack]\
    \ ~= nil then\n        stack[#stack] = open\n      elseif c == ')' and stack[#stack]\
    \ ~= nil then\n        stack[#stack] = nil\n      end\n    end\n    return open\
    \ == 0\n  end\n  local function good3(s)\n    local stack = {}\n    local open\
    \ = 0\n    for c in s:gmatch(\"[()]+\") do\n      if c == '(' and stack[#stack]\
    \ == nil then\n        open = open + 1\n      elseif c == ')' and stack[#stack]\
    \ == open then\n        open = open - 1\n      elseif c == '(' and stack[#stack]\
    \ ~= nil then\n        stack[#stack] = open\n      elseif c == ')' and stack[#stack]\
    \ ~= nil then\n", "  local stack = {}\n  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n     \
    \ stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        return false\n      end\n      open\
    \ = open - 1\n    end\n  end\n  return #stack == 0\nend", "  local open = 0\n\
    \  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '.' then\n      if open ~= close then\n  \
    \      good = false\n        break\n      end\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local stack = {}\n  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open ~= close then\n        good = false\n\
    \        break\n      end\n      open = open - 1\n    end\n  end\n  return good\n\
    end", "  local function is_balanced(s)\n    local open = 0\n    local close =\
    \ 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n\
    \      elseif s[i] == ')' then\n        close = close + 1\n      elseif s[i] ==\
    \ ')' and open == close then\n        return false\n      end\n    end\n    return\
    \ open == close\n  end\n  local function good(s)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open\
    \ + 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif\
    \ s[i] == ')' and open == close then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function good1(s)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open\
    \ + 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif\
    \ s[i] == ')' and open == close then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function good2(s)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open\
    \ + 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif\
    \ s[i] == ')' and open == close then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function good3(s)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open\
    \ + 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif\
    \ s[i] == ')' and open == close then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function good4(s)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open\
    \ + 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif\
    \ s[i] == ')' and open == close then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function good5(s)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n        open = open\
    \ + 1\n      elseif s[i] == ')' then\n        close = close + 1\n      elseif ",
  "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '.' then\n      if open ~= close\
    \ then\n        good = false\n      end\n    end\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  return open >= close and open ~= 0\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n  if open >\
    \ close then\n    return 'No'\n  end\n  return match_parens(lst)\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  return open == close and open ~= 0\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_b", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  return open >= close and open ~= 0\nend", "  local stack =\
    \ {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n      stack[#stack + 1] =\
    \ i\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n \
    \     if open ~= close then\n        return false\n      end\n      open = open\
    \ - 1\n    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n  \
    \    stack[#stack + 1] = i\n    elseif lst[i] == ')' and close ~= 0 then\n   \
    \   close = close + 1\n      if open ~= close then\n        return false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ function is_balanced(s)\n    local open = 0\n    local close = 0\n    for i\
    \ = 1, #s do\n      if s[i] == '(' and open > 0 then\n        open = open - 1\n\
    \      elseif s[i] == ')' and close > 0 then\n        close = close - 1\n    \
    \  elseif s[i] == '(' and close == 0 then\n        open = open + 1\n      elseif\
    \ s[i] == ')' and open == 0 then\n        close = close + 1\n      else\n    \
    \    return false\n      end\n    end\n    return open == 0 and close == 0\n \
    \ end\n  local function is_good(s)\n    local good = true\n    for i = 1, #s do\n\
    \      if s[i] == '(' and is_balanced(s) and is_good(s:sub(1, i - 1)) then\n \
    \       good = false\n      end\n      if s[i] == ')' and is_balanced(s) and is_good(s:sub(i\
    \ + 1, #s)) then\n        good = false\n      end\n    end\n    return good\n\
    \  end\n  local function match(s)\n    local good = true\n    for i = 1, #s do\n\
    \      if s[i] == '(' and is_balanced(s) and match(s:sub(1, i - 1)) then\n   \
    \     good = false\n      end\n      if s[i] == ')' and is_balanced(s) and match(s:sub(i\
    \ + 1, #s)) then\n        good = false\n      end\n    end\n    return good\n\
    \  end\n  local function good(s)\n    local good = true\n    for i = 1, #s do\n\
    \      if s[i] == '(' and is_balanced(s) and good(s:sub(1, i - 1)) then\n    \
    \    good = false\n      end\n      if s[i] == ')' and is_balanced(s) and good(s:sub(i\
    \ + 1, #s)) then\n        good = false\n      end\n    end\n    return good\n\
    \  end\n  local function good1(s)\n    local good = true\n    for i = 1, #s do\n\
    \      if s[i] == '(' and is_balanced(s) and good1(s:sub(1, i - 1)) then\n   \
    \     good = false\n      end\n      if s[i] == ')' and is_balanced(s) and good1(s:sub(i\
    \ + 1, #s)) then\n        good = false\n      end\n    end\n    return good\n\
    \  end\n  local function good2(s)\n    local good = true\n    for i = 1, #s do\n\
    \      if s[i] == '(' and is_balanced(s) and good2(s:sub(1, i - 1)) then\n   \
    \     good = false\n      end\n      if s[i] == ')' and is_balanced(s) and good2(s:sub(i\
    \ + 1, #s)) then\n        good = false\n      end\n    end\n    return good\n\
    \  end\n  local function good3(s)\n    ", "  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == '.' then\n      if open ~= close then\n        good = false\n    \
    \  end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \    end\n  end\n  return good\nend", "  local stack = {}\n  local open = 0\n\
    \  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        good\
    \ = false\n      end\n      open = open - 1\n      stack[#stack] = i\n    end\n\
    \  end\n  return good\nend", "  local function is_balanced(s)\n    local stack\
    \ = {}\n    for i = 1, #s do\n      if s[i] == '(' or s[i] == ')' then\n     \
    \   table.insert(stack, s[i])\n      elseif s[i] == '[' or s[i] == ']' then\n\
    \        stack[#stack + 1] = s[i]\n      elseif s[i] == '{' or s[i] == '}' then\n\
    \        local open = stack[#stack + 1]\n        local close = s[i]\n        if\
    \ open ~= close then\n          return false\n        end\n        table.insert(stack,\
    \ open)\n      else\n        return false\n      end\n    end\n    return #stack\
    \ == 0\n  end\n  local function is_good(s)\n    local stack = {}\n    for i =\
    \ 1, #s do\n      if s[i] == '(' or s[i] == ')' then\n        table.insert(stack,\
    \ s[i])\n      elseif s[i] == '[' or s[i] == ']' then\n        stack[#stack +\
    \ 1] = s[i]\n      elseif s[i] == '{' or s[i] == '}' then\n        local open\
    \ = stack[#stack + 1]\n        local close = s[i]\n        if open ~= close then\n\
    \          return false\n        end\n        table.insert(stack, open)\n    \
    \  else\n        return false\n      end\n    end\n    return #stack == 0\n  end\n\
    \  local function is_good_string(s)\n    local stack = {}\n    for i = 1, #s do\n\
    \      if s[i] == '(' or s[i] == ')' then\n        table.insert(stack, s[i])\n\
    \      elseif s[i] == '[' or s[i] == ']' then\n        stack[#stack + 1] = s[i]\n\
    \      elseif s[i] == '{' or s[i] == '}' then\n        local open = stack[#stack\
    \ + 1]\n        local close = s[i]\n        if open ~= close then\n          return\
    \ false\n        end\n        table.insert(stack, open)\n      else\n        return\
    \ false\n      end\n    end\n    return #stack == 0\n  end\n  local function is_good_string2(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] == '(' or s[i] == ')'\
    \ then\n        table.insert(stack, s[i])\n      elseif s[i] == '[' or s[i] ==\
    \ ']' then\n        stack[#stack + 1] = s[i]\n      elseif s[i] == '{' or s[i]\
    \ == '}' then\n        local open = stack[#stack + 1]\n        local close = s[i]\n\
    \        if open ~= close then\n          return false\n        end\n        table.insert(stack,\
    \ open)\n      else\n        return false\n      end\n    end\n    return #stack\
    \ == 0\n  end\n  local function is_good_string3(s)\n    local stack = {}\n   \
    \ for i = ", "  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' and (open\
    \ == close or open > close) then\n      good = true\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' and open ~= 0 then\n      open = open - 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close - 1\n    elseif lst[i] == '('\
    \ and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close = close + 1\n    end\n  end\n  return open ~= 0 and close\
    \ ~= 0\nend", "  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n\
    \      good = not good\n    elseif lst[i] == ',' then\n      good = not good\n\
    \    elseif lst[i] == '(' then\n      open = open - 1\n    elseif lst[i] == ')'\
    \ then\n      close = close - 1\n    end\n  end\n  return open >= close and good\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return false\n  end\n  return true\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' and open\
    \ ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      close = close + 1\n    elseif lst[i] == '(' and open ~= close then\n  \
    \    good = false\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '.' then\n      if open ~= close then\n        good = false\n\
    \        break\n      end\n    end\n  end\n  return good\nend", "    local open\
    \ = 0\n    local close = 0\n    for i = 1, #lst do\n        if lst[i] == '(' and\
    \ open ~= 0 then\n            open = open + 1\n        elseif lst[i] == ')' and\
    \ close ~= 0 then\n            close = close + 1\n        elseif lst[i] == '('\
    \ and open ~= close then\n            return 'No'\n        elseif lst[i] == ')'\
    \ and close ~= open then\n            return 'No'\n        elseif lst[i] == '('\
    \ and open ~= close then\n            open = open + 1\n        elseif lst[i] ==\
    \ ')' and open ~= open then\n            close = close + 1\n        end\n    end\n\
    \    return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local good =\
    \ true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] ==\
    \ '.' then\n      if open ~= close then\n        good = false\n        break\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local open_balance = 0\n  local close_balance = 0\n  local open_balance_stack\
    \ = {}\n  local close_balance_stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open_balance += 1\n      open_balance_stack[#open_balance_stack\
    \ + 1] = open\n      open_balance_stack[#open_balance_stack + 1] = close\n   \
    \   open = open + 1\n    elseif lst[i] == ')' then\n      close_balance += 1\n\
    \      close_balance_stack[#close_balance_stack + 1] = close\n      close = close\
    \ + 1\n      if open_balance ~= close_balance then\n        open_balance -= 1\n\
    \        close_balance -= 1\n      end\n    else\n      open = open + 1\n    \
    \  close = close + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance_stack_size = #open_balance_stack\n\
    \  local close_balance_stack_size = #close_balance_stack\n  local open_balance_stack_index\
    \ = 1\n  local close_balance_stack_index = 1\n  local open_balance_stack_value\
    \ = 1\n  local close_balance_stack_value = 1\n  while open_balance_stack_size\
    \ > 0 do\n    if open_balance_stack[open_balance_stack_index] == open_balance_stack_value\
    \ then\n      open_balance_stack_size = open_balance_stack_size - 1\n      open_balance_stack_index\
    \ = open_balance_stack_index + 1\n      open_balance_stack_value = open_balance_stack_value\
    \ + 1\n    elseif close_balance_stack[close_balance_stack_index] == close_balance_stack_value\
    \ then\n      close_balance_stack_size = close_balance_stack_size - 1\n      close_balance_stack_index\
    \ = close_balance_stack_index + 1\n      close_balance_stack_value = close_balance_stack_value\
    \ + 1\n    else\n      return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local\
    \ function is_balanced(s)\n    local open = 0\n    local close = 0\n    for c\
    \ in s:gmatch('%[()]+') do\n      if c == '(' and open > 0 then\n        open\
    \ = open - 1\n      elseif c == ')' and close > 0 then\n        close = close\
    \ - 1\n      elseif c == '(' and open == close then\n        return false\n  \
    \    elseif c == ')' and open == close then\n        return true\n      else\n\
    \        open = open + 1\n        close = close + 1\n      end\n    end\n    return\
    \ open == close\n  end\n  local function is_good(s)\n    local good = true\n \
    \   for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        good\
    \ = false\n        break\n      end\n    end\n    return good\n  end\n  local\
    \ function is_good_string(s)\n    local good = true\n    for i = 1, #s do\n  \
    \    if s[i] ~= '(' and s[i] ~= ')' then\n        good = false\n        break\n\
    \      end\n    end\n    return good\n  end\n  local function is_good_parens(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        good = false\n        break\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good_parens_string(s)\n    local good = true\n\
    \    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        good\
    \ = false\n        break\n      end\n    end\n    return good\n  end\n  local\
    \ function is_good_parens_string(s)\n    local good = true\n    for i = 1, #s\
    \ do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        good = false\n      \
    \  break\n      end\n    end\n    return good\n  end\n  local function is_good_parens_string(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        good = false\n        break\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good_parens_string(s)\n    local good = true\n\
    \    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        good\
    \ = false\n        break\n      end\n    end\n    return good\n  end\n  local\
    \ function is_good_parens_string(s)\n    local good = true\n    for i = 1, #s\
    \ do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        good = false\n      \
    \  break\n", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n \
    \     close = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n\
    \  end\n  if open > close then\n    return 'No'\n  end\n  return match_parens(lst)\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return false\n  end\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '.' then\n      if open ~= close then\n        good = false\n        break\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  return open == close\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  return open == close and open ~= 0\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '.' then\n      if open ~= close then\n        good = false\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n      open\
    \ = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      close = close\
    \ - 1\n    elseif lst[i] == '(' and open > close then\n      return false\n  \
    \  elseif lst[i] == ')' and close > open then\n      return false\n    end\n \
    \ end\n  return true\nend", "  local function is_balanced(s)\n    local stack\
    \ = {}\n    for i = 1, #s do\n      if s[i] == '(' then\n        table.insert(stack,\
    \ s[i])\n      elseif s[i] == ')' then\n        if #stack == 0 then\n        \
    \  return false\n        elseif stack[#stack] == s[i] then\n          table.remove(stack,\
    \ 1)\n        else\n          return false\n        end\n      elseif s[i] ==\
    \ '[' then\n        table.insert(stack, s[i])\n      elseif s[i] == ']' then\n\
    \        if #stack == 0 then\n          return false\n        elseif stack[#stack]\
    \ == s[i] then\n          table.remove(stack, 1)\n        else\n          return\
    \ false\n        end\n      elseif s[i] == '{' then\n        table.insert(stack,\
    \ s[i])\n      elseif s[i] == '}' then\n        if #stack == 0 then\n        \
    \  return false\n        elseif stack[#stack] == s[i] then\n          table.remove(stack,\
    \ 1)\n        else\n          return false\n        end\n      else\n        return\
    \ false\n      end\n    end\n    return #stack == 0\n  end\n  local function is_good(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] == '(' then\n     \
    \   table.insert(stack, s[i])\n      elseif s[i] == ')' then\n        if #stack\
    \ == 0 then\n          return false\n        elseif stack[#stack] == s[i] then\n\
    \          table.remove(stack, 1)\n        else\n          return false\n    \
    \    end\n      elseif s[i] == '[' then\n        table.insert(stack, s[i])\n \
    \     elseif s[i] == ']' then\n        if #stack == 0 then\n          return false\n\
    \        elseif stack[#stack] == s[i] then\n          table.remove(stack, 1)\n\
    \        else\n          return false\n        end\n      elseif s[i] == '{' then\n\
    \        table.insert(stack, s[i])\n      elseif s[i] == '}' then\n        if\
    \ #stack == 0 then\n          return false\n        elseif stack[#stack] == s[i]\
    \ then\n          table.remove(stack, 1)\n        else\n          return false\n\
    \        end\n      else\n        return false\n      end\n    end\n    return\
    \ #stack == 0\n  end\n  local function is_good_string(s)\n    local stack = {}\n\
    \    for i = 1, #s do\n      if s[i] == '(' then\n        table.insert(stack,\
    \ s[i])\n      elseif s[i] == ')' then\n        if #stack == 0 then\n        \
    \  return false\n        elseif stack[#stack] == s[i] then\n          table.remove(stack,\
    \ 1)\n        else\n          return false\n        end\n      elseif s[i] ==\
    \ '[' then\n        table.insert(stack, s[i])\n      elseif s[i] == ']' then\n\
    \        if #stack == 0 ", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '.' then\n      if open ~= close then\n        good = false\n      end\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0\
    \ then\n      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n \
    \     close = close - 1\n    elseif lst[i] == '(' and close == 0 then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' and open == 0 then\n      close = close\
    \ + 1\n    elseif lst[i] == '(' and open > 0 and close == 0 then\n      good =\
    \ true\n    end\n  end\n  return good\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        return true\n \
    \     end\n      stack[#stack + 1] = i\n    end\n  end\n  return false\nend",
  "  local function is_balanced(s)\n    local open = 0\n    local close = 0\n    for\
    \ i = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n      elseif\
    \ s[i] == ')' then\n        close = close + 1\n      elseif s[i] == '[' then\n\
    \        close = close + 1\n      elseif s[i] == ']' then\n        open = open\
    \ - 1\n      elseif s[i] == '{' then\n        close = close + 1\n      elseif\
    \ s[i] == '}' then\n        open = open - 1\n      end\n    end\n    return open\
    \ == close and open > 0\n  end\n  local function is_good(s)\n    local good =\
    \ true\n    for i = 1, #s do\n      if s[i] == '(' then\n        good = not good\n\
    \      elseif s[i] == ')' then\n        good = not good\n      elseif s[i] ==\
    \ '[' then\n        good = not good\n      elseif s[i] == ']' then\n        good\
    \ = not good\n      elseif s[i] == '{' then\n        good = not good\n      elseif\
    \ s[i] == '}' then\n        good = not good\n      end\n    end\n    return good\n\
    \  end\n  local function is_good_string(s)\n    local good = true\n    for i =\
    \ 1, #s do\n      if s[i] == '(' then\n        good = not good\n      elseif s[i]\
    \ == ')' then\n        good = not good\n      elseif s[i] == '[' then\n      \
    \  good = not good\n      elseif s[i] == ']' then\n        good = not good\n \
    \     elseif s[i] == '{' then\n        good = not good\n      elseif s[i] == '}'\
    \ then\n        good = not good\n      end\n    end\n    return good\n  end\n\
    \  local function is_good_list(lst)\n    local good = true\n    for i = 1, #lst\
    \ do\n      local s = lst[i]\n      if s == '(' then\n        good = not good\n\
    \      elseif s == ')' then\n        good = not good\n      elseif s == '[' then\n\
    \        good = not good\n      elseif s == ']' then\n        good = not good\n\
    \      elseif s == '{' then\n        good = not good\n      elseif s == '}' then\n\
    \        good = not good\n      end\n    end\n    return good\n  end\n  local\
    \ function is_good_pair(pair)\n    local good = true\n    for i = 1, #pair do\n\
    \      local s = pair[i]\n      if s == '(' then\n        good = not ", "    local\
    \ open = 0\n    local close = 0\n    local good = true\n    for i = 1, #lst do\n\
    \        if lst[i] == '(' and open ~= 0 then\n            open = open + 1\n  \
    \      elseif lst[i] == ')' and close ~= 0 then\n            close = close + 1\n\
    \        elseif lst[i] == '(' and open ~= close then\n            good = false\n\
    \        end\n    end\n    return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '.' then\n      good = false -- We can't concatenate two\
    \ strings if one of them is '.'\n    elseif open ~= close then\n      good = false\
    \ -- We can't concatenate two strings if they have different number of '(' and\
    \ ')'\n    end\n  end\n  return good\nend", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' then\n        open = open + 1\n      elseif s[i] == ')' then\n      \
    \  close = close + 1\n      elseif s[i] == '[' then\n        close = close + 1\n\
    \      elseif s[i] == ']' then\n        open = open - 1\n      elseif s[i] ==\
    \ '{' then\n        close = close + 1\n      elseif s[i] == '}' then\n       \
    \ open = open - 1\n      end\n    end\n    return open == close and open > 0\n\
    \  end\n  local function is_good(s)\n    local good = true\n    for i = 1, #s\
    \ do\n      if s[i] == '(' then\n        good = good and is_balanced(s)\n    \
    \  elseif s[i] == ')' then\n        good = good and is_balanced(s)\n      elseif\
    \ s[i] == '[' then\n        good = good and is_balanced(s)\n      elseif s[i]\
    \ == ']' then\n        good = good and is_balanced(s)\n      elseif s[i] == '{'\
    \ then\n        good = good and is_balanced(s)\n      elseif s[i] == '}' then\n\
    \        good = good and is_balanced(s)\n      end\n    end\n    return good\n\
    \  end\n  local function match_parens_helper(lst)\n    local good = false\n  \
    \  for i = 1, #lst do\n      if lst[i] == '(' then\n        local s = lst:sub(1,\
    \ i - 1)\n        local good = good and is_good(s)\n        lst = lst:sub(i +\
    \ 1)\n      elseif lst[i] == ')' then\n        local s = lst:sub(1, i - 1)\n \
    \       local good = good and is_good(s)\n        lst = lst:sub(i + 1)\n     \
    \ elseif lst[i] == '[' then\n        local s = lst:sub(1, i - 1)\n        local\
    \ good = good and is_good(s)\n        lst = lst:sub(i + 1)\n      elseif lst[i]\
    \ == ']' then\n        local s = lst:sub(1, i - 1)\n        local good = good\
    \ and is_good(s)\n        lst = lst:sub(i + 1)\n      elseif lst[i] == '{' then\n\
    \        local s = lst:sub(1, i - 1)\n        local good = good and is_good(s)\n\
    \        lst = lst:sub(i + 1)\n      elseif lst[i] == '}' then\n        local\
    \ s = lst:sub(1, i - 1)\n        local good = good and is_good(s)\n        lst\
    \ = lst", "  local open = 0\n  local close = 0\n  local good = false\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n      if\
    \ open ~= close then\n        good = false\n        break\n      end\n    end\n\
    \  end\n  if open ~= close then\n    good = false\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '.' and open ~= close then\n  \
    \    good = false\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open == close then\n        local start\
    \ = stack[#stack]\n        local end = i\n        local good = true\n        for\
    \ j = #stack + 1, 1, -1 do\n          local start = stack[j]\n          local\
    \ end = stack[j - 1]\n          local good = good and\n            (lst[start\
    \ + 1] == '(' or lst[end - 1] == ')')\n        end\n        if good then\n   \
    \       return true\n        end\n      end\n    end\n  end\n  return false\n\
    end", "  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     table.insert(stack, lst[i])\n    elseif lst[i] == ')' then\n      if #stack\
    \ == 0 then\n        return 'No'\n      else\n        local top = stack[#stack]\n\
    \        stack[#stack] = nil\n        if top == '(' then\n          table.insert(stack,\
    \ lst[i])\n        elseif top == ')' then\n          stack[#stack] = nil\n   \
    \     else\n          return 'No'\n        end\n      end\n    end\n  end\n  return\
    \ 'Yes'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ false\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \  end\n  if open_balance ~= close_balance then\n    return false\n  end\n  return\
    \ true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' and open > 0 then\n        open = open - 1\n      elseif s[i] == ')'\
    \ and close > 0 then\n        close = close - 1\n      elseif s[i] == ')' and\
    \ open == 0 then\n        return false\n      elseif s[i] == '(' and close ==\
    \ 0 then\n        open = open + 1\n      end\n    end\n    return open == 0 and\
    \ close == 0\n  end\n  local function is_good(s)\n    local good = true\n    local\
    \ open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i] == '(' and\
    \ open > 0 then\n        open = open - 1\n      elseif s[i] == ')' and close >\
    \ 0 then\n        close = close - 1\n      elseif s[i] == ')' and open == 0 then\n\
    \        good = false\n      elseif s[i] == '(' and close == 0 then\n        open\
    \ = open + 1\n      end\n    end\n    return good\n  end\n  local function make_good(s)\n\
    \    local good = true\n    local open = 0\n    local close = 0\n    for i = 1,\
    \ #s do\n      if s[i] == '(' and open > 0 then\n        open = open - 1\n   \
    \   elseif s[i] == ')' and close > 0 then\n        close = close - 1\n      elseif\
    \ s[i] == ')' and open == 0 then\n        good = false\n      elseif s[i] == '('\
    \ and close == 0 then\n        open = open + 1\n      end\n    end\n    if good\
    \ then\n      return s\n    end\n    local good = false\n    local open = 0\n\
    \    local close = 0\n    for i = 1, #s do\n      if s[i] == '(' and open > 0\
    \ then\n        open = open - 1\n      elseif s[i] == ')' and close > 0 then\n\
    \        close = close - 1\n      elseif s[i] == ')' and open == 0 then\n    \
    \    good = false\n      elseif s[i] == '(' and close == 0 then\n        open\
    \ = open + 1\n      end\n    end\n    if good then\n      return s\n    end\n\
    \    return nil\n  end\n  local function make_good2(s)\n    local good = true\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' and open > 0 then\n        open = open - 1\n      elseif s[i] == ')'\
    \ and close > 0 then\n        close = close - 1\n      elseif s[i] == ')' and\
    \ open == 0 then\n        good", "  local open = 0\n  local close = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return false\n  end\n  return true\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '.' then\n      good = false -- don't care about '.'\n \
    \   end\n  end\n  if open ~= close then\n    good = false\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        good\
    \ = false\n      end\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        good = false\n        break\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '.' then\n      if open ~= close then\n        good = false\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open > 0 then\n      open = open - 1\n    elseif lst[i]\
    \ == ')' and close > 0 then\n      close = close - 1\n    elseif lst[i] == '('\
    \ and open == 0 and close == 0 then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local good = true\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \    end\n  end\n  return good\nend", "  local function is_balanced(s)\n    local\
    \ open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n\
    \        open = open + 1\n      elseif s[i] == ')' then\n        close = close\
    \ + 1\n      elseif s[i] == '[' then\n        close = close + 1\n      elseif\
    \ s[i] == ']' then\n        open = open - 1\n      elseif s[i] == '{' then\n \
    \       close = close + 1\n      elseif s[i] == '}' then\n        open = open\
    \ - 1\n      end\n    end\n    return open == close and open > 0\n  end\n  local\
    \ function is_good(lst)\n    local good = true\n    for i = 1, #lst do\n     \
    \ if not is_balanced(lst[i]) then\n        good = false\n        break\n     \
    \ end\n    end\n    return good\n  end\n  local function is_good_parens(lst)\n\
    \    local good = true\n    for i = 1, #lst do\n      if lst[i] == '(' then\n\
    \        good = is_good(lst:sub(1, i - 1))\n      elseif lst[i] == ')' then\n\
    \        good = is_good(lst:sub(i + 1, #lst))\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good_brackets(lst)\n    local good = true\n\
    \    for i = 1, #lst do\n      if lst[i] == '[' then\n        good = is_good(lst:sub(1,\
    \ i - 1))\n      elseif lst[i] == ']' then\n        good = is_good(lst:sub(i +\
    \ 1, #lst))\n      end\n    end\n    return good\n  end\n  local function is_good_braces(lst)\n\
    \    local good = true\n    for i = 1, #lst do\n      if lst[i] == '{' then\n\
    \        good = is_good(lst:sub(1, i - 1))\n      elseif lst[i] == '}' then\n\
    \        good = is_good(lst:sub(i + 1, #lst))\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good_brackets_braces(lst)\n    local good =\
    \ true\n    for i = 1, #lst do\n      if lst[i] == '[' then\n        good = is_good_brackets(lst:sub(1,\
    \ i - 1))\n      elseif lst[i] == ']' then\n        good = is_good_brackets(lst:sub(i\
    \ + 1, #lst))\n      elseif lst[i] == '{' then\n        good = is_good_braces(lst:sub(1,\
    \ i - 1))\n      elseif lst[i] == '}' then\n", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' then\n        open = open + 1\n      elseif s[i] == ')' then\n      \
    \  close = close + 1\n      elseif s[i] == '[' then\n        close = close + 1\n\
    \      elseif s[i] == ']' then\n        open = open - 1\n      elseif s[i] ==\
    \ '{' then\n        close = close + 1\n      elseif s[i] == '}' then\n       \
    \ open = open - 1\n      end\n    end\n    return open == close and open > 0\n\
    \  end\n  local function is_good(s)\n    local good = true\n    for i = 1, #s\
    \ do\n      if s[i] == '(' then\n        good = good and not is_balanced(s)\n\
    \      elseif s[i] == ')' then\n        good = good and is_balanced(s)\n     \
    \ elseif s[i] == '[' then\n        good = good and is_balanced(s)\n      elseif\
    \ s[i] == ']' then\n        good = good and is_balanced(s)\n      elseif s[i]\
    \ == '{' then\n        good = good and is_balanced(s)\n      elseif s[i] == '}'\
    \ then\n        good = good and is_balanced(s)\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good1(s)\n    local good = true\n    for i\
    \ = 1, #s do\n      if s[i] == '(' then\n        good = good and not is_balanced(s)\n\
    \      elseif s[i] == ')' then\n        good = good and is_balanced(s)\n     \
    \ elseif s[i] == '[' then\n        good = good and is_balanced(s)\n      elseif\
    \ s[i] == ']' then\n        good = good and is_balanced(s)\n      elseif s[i]\
    \ == '{' then\n        good = good and is_balanced(s)\n      elseif s[i] == '}'\
    \ then\n        good = good and is_balanced(s)\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good2(s)\n    local good = true\n    for i\
    \ = 1, #s do\n      if s[i] == '(' then\n        good = good and not is_balanced(s)\n\
    \      elseif s[i] == ')' then\n        good = good and is_balanced(s)\n     \
    \ elseif s[i] == '[' then\n        good = good and is_balanced(s)\n      elseif\
    \ s[i] == ']' then\n        good = good and is_balanced(s)\n      elseif s[i]\
    \ == '{' then\n        good = good and ", "  local open = 0\n  local close = 0\n\
    \  local open_balance = 0\n  local close_balance = 0\n  local open_balance_count\
    \ = 0\n  local close_balance_count = 0\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open_balance += 1\n      open_balance_count = open_balance_count\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance += 1\n      close_balance_count\
    \ = close_balance_count + 1\n    elseif lst[i] == '(' and open_balance > close_balance\
    \ then\n      open_balance -= 1\n      open_balance_count = open_balance_count\
    \ - 1\n    elseif lst[i] == ')' and open_balance < close_balance then\n      close_balance\
    \ += 1\n      close_balance_count = close_balance_count + 1\n    end\n  end\n\
    \  if open_balance_count ~= close_balance_count then\n    return 'No'\n  end\n\
    \  if open_balance ~= close then\n    return 'No'\n  end\n  if open ~= close then\n\
    \    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close\
    \ + 1\n    elseif lst[i] == '(' and open ~= close then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local open = 0\n  local close = 0\n  local\
    \ good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '.' then\n      good = false -- Don't allow '.' to be a part of string\n\
    \    elseif lst[i] == ',' then\n      good = false -- Don't allow ',' to be a\
    \ part of string\n    elseif lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    good = false\n  end\n  return good\nend", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' then\n        open = open + 1\n      elseif s[i] == ')' then\n      \
    \  close = close + 1\n      elseif s[i] == '[' then\n        close = close + 1\n\
    \      elseif s[i] == ']' then\n        open = open - 1\n      end\n    end\n\
    \    return open == close and open > 0 and close > 0\n  end\n  local function\
    \ is_good(s)\n    local good = true\n    for i = 1, #s do\n      if s[i] == '('\
    \ then\n        good = good and not is_balanced(s)\n      elseif s[i] == ')' then\n\
    \        good = good and is_balanced(s)\n      elseif s[i] == '[' then\n     \
    \   good = good and is_good(s:sub(1, i - 1))\n      elseif s[i] == ']' then\n\
    \        good = good and is_good(s:sub(i + 1))\n      end\n    end\n    return\
    \ good\n  end\n  local function match(s)\n    local good = is_good(s)\n    if\
    \ good then\n      local open = 0\n      local close = 0\n      for i = 1, #s\
    \ do\n        if s[i] == '(' then\n          open = open + 1\n        elseif s[i]\
    \ == ')' then\n          close = close + 1\n        elseif s[i] == '[' then\n\
    \          close = close + 1\n        elseif s[i] == ']' then\n          open\
    \ = open - 1\n        end\n      end\n      if open == close then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  return match(lst)\nend",
  "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        good = false\n\
    \        break\n      end\n    end\n  end\n  return good\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open ~= 0 then\n      stack[#stack + 1] =\
    \ open\n      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      open = stack[#stack]\n      close = close + 1\n    elseif lst[i] == '('\
    \ and close ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and open\
    \ ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= 0 and\
    \ close ~= 0 then\n      good = false\n    end\n  end\n  return good\nend", " \
    \ local function is_balanced(s)\n    local open = 0\n    local close = 0\n   \
    \ for i = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n     \
    \ elseif s[i] == ')' then\n        close = close + 1\n      elseif s[i] == '['\
    \ then\n        close = close + 1\n      elseif s[i] == ']' then\n        open\
    \ = open - 1\n      elseif s[i] == ',' then\n        close = close + 1\n     \
    \ elseif s[i] == ';' then\n        close = close + 1\n      end\n    end\n   \
    \ return open >= close and open % 2 == 0\n  end\n  local function is_good(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] == '(' then\n    \
    \    good = good and not is_balanced(s)\n      elseif s[i] == ')' then\n     \
    \   good = good and is_balanced(s)\n      elseif s[i] == '[' then\n        good\
    \ = good and is_balanced(s)\n      elseif s[i] == ']' then\n        good = good\
    \ and is_balanced(s)\n      elseif s[i] == ',' then\n        good = good and is_balanced(s)\n\
    \      elseif s[i] == ';' then\n        good = good and is_balanced(s)\n     \
    \ end\n    end\n    return good\n  end\n  local function is_good_string(s)\n \
    \   local good = true\n    for i = 1, #s do\n      if s[i] == '(' then\n     \
    \   good = good and not is_balanced(s)\n      elseif s[i] == ')' then\n      \
    \  good = good and is_balanced(s)\n      elseif s[i] == '[' then\n        good\
    \ = good and is_balanced(s)\n      elseif s[i] == ']' then\n        good = good\
    \ and is_balanced(s)\n      elseif s[i] == ',' then\n        good = good and is_balanced(s)\n\
    \      elseif s[i] == ';' then\n        good = good and is_balanced(s)\n     \
    \ end\n    end\n    return good\n  end\n  local function is_good_string(s)\n \
    \   local good = true\n    for i = 1, #s do\n      if s[i] == '(' then\n     \
    \   good = good and not is_balanced(s)\n      elseif s[i] == ')' then\n      \
    \  good = good and is_balanced(s)\n      elseif s[i] == '[' then\n        good\
    \ = good and is_balanced(s)\n      elseif s[i] == ']' then\n        good = good\
    \ and is_balanced(s)\n      elseif s[i] == ',' then\n", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  return open == close\nend", "  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return false\n  end\n  return true\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = true\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '' and open == close then\n      good = false\n    end\n  end\n  return good\n\
    end", "    local stack = {}\n    local open = 0\n    local close = 0\n    for\
    \ i = 1, #lst do\n        if lst[i] == '(' then\n            open = open + 1\n\
    \            stack[#stack + 1] = i\n        elseif lst[i] == ')' then\n      \
    \      close = close + 1\n            if open > close then\n                return\
    \ true\n            end\n            open = open - 1\n        end\n    end\n \
    \   return false\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open == close then\n   \
    \ return 'Yes'\n  end\n  if open > close then\n    return 'No'\n  end\n  return\
    \ match_parens(lst)\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ==\
    \ close then\n        good = true\n      end\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  return open == close and open ~= 0\nend", " \
    \ local function is_balanced(s)\n    local open = 0\n    local close = 0\n   \
    \ for c in s:gmatch(\"[()]+\") do\n      if c == '(' and open > 0 then\n     \
    \   open = open - 1\n      elseif c == ')' and close > 0 then\n        close =\
    \ close - 1\n      elseif c == '(' and open == 0 then\n        open = open + 1\n\
    \      elseif c == ')' and close == 0 then\n        close = close + 1\n      end\n\
    \    end\n    return open == close + 1\n  end\n  local function is_good(s)\n \
    \   local good = true\n    for i = 1, #lst do\n      local a = lst[i]\n      local\
    \ b = lst[i + 1]\n      if a ~= b and a ~= \"\" and b ~= \"\" and a ~= b and is_balanced(a)\
    \ and is_balanced(b) then\n        good = false\n        break\n      end\n  \
    \  end\n    return good\n  end\n  local function is_good_string(s)\n    local\
    \ good = true\n    for i = 1, #lst do\n      local a = lst[i]\n      local b =\
    \ lst[i + 1]\n      if a ~= b and a ~= \"\" and b ~= \"\" and a ~= b and is_balanced(a)\
    \ and is_balanced(b) then\n        good = false\n        break\n      end\n  \
    \  end\n    return good\n  end\n  local function is_good_list(lst)\n    local\
    \ good = true\n    for i = 1, #lst do\n      local a = lst[i]\n      local b =\
    \ lst[i + 1]\n      if a ~= b and a ~= \"\" and b ~= \"\" and a ~= b and is_balanced(a)\
    \ and is_balanced(b) then\n        good = false\n        break\n      end\n  \
    \  end\n    return good\n  end\n  local function is_good_pair(lst)\n    local\
    \ good = true\n    for i = 1, #lst do\n      local a = lst[i]\n      local b =\
    \ lst[i + 1]\n      if a ~= b and a ~= \"\" and b ~= \"\" and a ~= b and is_balanced(a)\
    \ and is_balanced(b) then\n        good = false\n        break\n      end\n  \
    \  end\n    return good\n  end\n  local function is_good_table(lst)\n    local\
    \ good = true\n    for i = 1, #lst do\n      local a = lst[i]\n      local b =\
    \ lst[i + 1]\n      if a ~= b and a ~= \"\" and b ~= \"\" and a ~= b and is_balanced(a)\
    \ and is_balanced(b) then\n        good = false\n", "  local open = 0\n  local\
    \ close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    elseif lst[i] == ')' and open == close then\n      good = true\n  \
    \  end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance_count = 0\n  local close_balance_count = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open_balance_count = open_balance_count\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance_count = close_balance_count\
    \ + 1\n    end\n  end\n  if open_balance_count ~= close_balance_count then\n \
    \   return 'No'\n  end\n  local open_balance_sum = 0\n  local close_balance_sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_sum\
    \ = open_balance_sum + 1\n    elseif lst[i] == ')' then\n      close_balance_sum\
    \ = close_balance_sum + 1\n    end\n  end\n  if open_balance_sum ~= close_balance_sum\
    \ then\n    return 'No'\n  end\n  local open_balance_sum = 0\n  local close_balance_sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_sum\
    \ = open_balance_sum + 1\n    elseif lst[i] == ')' then\n      close_balance_sum\
    \ = close_balance_sum + 1\n    end\n  end\n  if open_balance_sum ~= close_balance_sum\
    \ then\n    return 'No'\n  end\n  local open_balance_sum = 0\n  local close_balance_sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_sum\
    \ = open_balance_sum + 1\n    elseif lst[i] == ')' then\n      close_balance_sum\
    \ = close_balance_sum + 1\n    end\n  end\n  if open_balance_sum ~= close_balance_sum\
    \ then\n    return 'No'\n  end\n  local ", "  local open = 0\n  local close =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      good = good and match_parens(lst:sub(1,\
    \ i - 1))\n    elseif lst[i] == ')' then\n      good = good and not match_parens(lst:sub(1,\
    \ i - 1))\n    end\n  end\n  return 'Yes' if good else 'No'\nend", "  local open\
    \ = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance = 0\n\
    \  local i = 0\n  local j = 1\n  local n = #lst\n  while i < n do\n    if lst[i]\
    \ == '(' then\n      open_balance = open_balance + 1\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    \
    \  close = close + 1\n    elseif lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    elseif open_balance ~= close_balance then\n      return false\n    end\n\
    \    i = i + 1\n  end\n  if open == close then\n    return true\n  else\n    return\
    \ false\n  end\nend", "  local function is_balanced(s)\n    local open = 0\n \
    \   local close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n       \
    \ open = open + 1\n      elseif s[i] == ')' then\n        close = close + 1\n\
    \      elseif s[i] == '[' then\n        close = close + 1\n      elseif s[i] ==\
    \ ']' then\n        open = open - 1\n      elseif s[i] == '{' then\n        close\
    \ = close + 1\n      elseif s[i] == '}' then\n        open = open - 1\n      elseif\
    \ s[i] == '.' then\n        close = close + 1\n      elseif s[i] == ',' then\n\
    \        open = open - 1\n      end\n    end\n    return open == close and open\
    \ > 0\n  end\n  local function is_good(s)\n    local good = true\n    for i =\
    \ 1, #s do\n      if s[i] == '(' then\n        good = good and not is_balanced(s)\n\
    \      elseif s[i] == ')' then\n        good = good and is_balanced(s)\n     \
    \ elseif s[i] == '[' then\n        good = good and is_balanced(s)\n      elseif\
    \ s[i] == ']' then\n        good = good and is_balanced(s)\n      elseif s[i]\
    \ == '{' then\n        good = good and is_balanced(s)\n      elseif s[i] == '}'\
    \ then\n        good = good and is_balanced(s)\n      elseif s[i] == '.' then\n\
    \        good = good and is_balanced(s)\n      elseif s[i] == ',' then\n     \
    \   good = good and is_balanced(s)\n      end\n    end\n    return good\n  end\n\
    \  local function is_good_string(s)\n    local good = true\n    for i = 1, #s\
    \ do\n      if s[i] == '(' then\n        good = good and is_good_string(s)\n \
    \     elseif s[i] == ')' then\n        good = good and is_good_string(s)\n   \
    \   elseif s[i] == '[' then\n        good = good and is_good_string(s)\n     \
    \ elseif s[i] == ']' then\n        good = good and is_good_string(s)\n      elseif\
    \ s[i] == '{' then\n        good = good and is_good_string(s)\n      elseif s[i]\
    \ == '}' then\n        good = good and is_good_string(s)\n      elseif s[i] ==\
    \ '.' then\n        good = good and is_good_string(s)\n      elseif s[i] == ','\
    \ then\n        good = good and is_good_string(s)\n      end\n    end\n    return\
    \ good\n  end\n  ", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n\
    \    elseif lst[i] == '(' and open ~= close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local stack = {}\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        open = open - 1\n      else\n    \
    \    stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack == 0\n\
    end", "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' and open > 0 then\n      stack[#stack + 1] = lst[i]\n\
    \      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      open\
    \ = open + 1\n      close = close - 1\n    elseif lst[i] == '(' and close > 0\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' and open > 0 then\n  \
    \    close = close + 1\n    end\n  end\n  if open ~= close then\n    return false\n\
    \  end\n  local stack_size = #stack\n  local i = 0\n  while i < stack_size do\n\
    \    if stack[i] ~= '(' and stack[i] ~= ')' then\n      return false\n    end\n\
    \    i = i + 1\n  end\n  return true\nend", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' then\n        open = open + 1\n      elseif s[i] == ')' then\n      \
    \  close = close + 1\n      elseif s[i] == '[' then\n        close = close + 1\n\
    \      elseif s[i] == ']' then\n        open = open - 1\n      elseif s[i] ==\
    \ '{' then\n        close = close + 1\n      elseif s[i] == '}' then\n       \
    \ open = open - 1\n      end\n    end\n    return open == close and open > 0\n\
    \  end\n  local function is_good(s)\n    local good = true\n    local open = 0\n\
    \    local close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n      \
    \  open = open + 1\n      elseif s[i] == ')' then\n        close = close + 1\n\
    \      elseif s[i] == '[' then\n        close = close + 1\n      elseif s[i] ==\
    \ ']' then\n        open = open - 1\n      elseif s[i] == '{' then\n        close\
    \ = close + 1\n      elseif s[i] == '}' then\n        open = open - 1\n      end\n\
    \      if open > close then\n        good = false\n      end\n    end\n    return\
    \ good\n  end\n  local function is_good_string(s)\n    local good = true\n   \
    \ local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i] ==\
    \ '(' then\n        open = open + 1\n      elseif s[i] == ')' then\n        close\
    \ = close + 1\n      elseif s[i] == '[' then\n        close = close + 1\n    \
    \  elseif s[i] == ']' then\n        open = open - 1\n      elseif s[i] == '{'\
    \ then\n        close = close + 1\n      elseif s[i] == '}' then\n        open\
    \ = open - 1\n      end\n      if open > close then\n        good = false\n  \
    \    end\n      if s[i] == ')' then\n        good = good and not is_balanced(s)\n\
    \      end\n      if s[i] == '}' then\n        good = good and not is_balanced(s)\n\
    \      end\n      if s[i] == '[' then\n        good = good and not is_balanced(s)\n\
    \      end\n    end\n    return good\n  end\n  local function is_good_string(s)\n\
    \    local good = true\n    local open = 0\n    local close = 0\n    for i = 1,\
    \ #s do\n      if s[i] == '(' then\n        open = open + 1\n      elseif s[i]\
    \ == ')' then", "    local stack = {}\n    local open = 0\n    local close = 0\n\
    \    for i = 1, #lst do\n        if lst[i] == '(' then\n            open = open\
    \ + 1\n            stack[#stack + 1] = i\n        elseif lst[i] == ')' then\n\
    \            close = close + 1\n            if open > close then\n           \
    \     return true\n            end\n            open = open - 1\n            stack[#stack\
    \ + 1] = i\n        end\n    end\n    return false\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open == close then\n    return 'Yes'\n  end\n  if open > close then\n\
    \    return 'No'\n  end\n  return match_parens(lst)\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n \
    \ end\nend", "  local function is_balanced(lst)\n    local open = 0\n    local\
    \ close = 0\n    for i = 1, #lst do\n      if lst[i] == '(' and open > 0 then\n\
    \        open = open - 1\n      elseif lst[i] == ')' and close > 0 then\n    \
    \    close = close - 1\n      elseif lst[i] == '(' and open > close then\n   \
    \     open = open + 1\n      elseif lst[i] == ')' and close > open then\n    \
    \    close = close + 1\n      else\n        return false\n      end\n    end\n\
    \    return open == close\n  end\n  local function is_good(lst)\n    local good\
    \ = true\n    for i = 1, #lst do\n      if lst[i] ~= '(' and lst[i] ~= ')' then\n\
    \        good = false\n      end\n    end\n    return good\n  end\n  local function\
    \ match(lst)\n    local good = is_good(lst)\n    if good then\n      local open\
    \ = 0\n      local close = 0\n      for i = 1, #lst do\n        if lst[i] == '('\
    \ and open > 0 then\n          open = open - 1\n        elseif lst[i] == ')' and\
    \ close > 0 then\n          close = close - 1\n        elseif lst[i] == '(' and\
    \ open > close then\n          open = open + 1\n        elseif lst[i] == ')' and\
    \ close > open then\n          close = close + 1\n        else\n          return\
    \ false\n        end\n      end\n      return open == close\n    end\n    return\
    \ false\n  end\n  local function match(lst)\n    local good = is_good(lst)\n \
    \   if good then\n      local open = 0\n      local close = 0\n      for i = 1,\
    \ #lst do\n        if lst[i] == '(' and open > 0 then\n          open = open -\
    \ 1\n        elseif lst[i] == ')' and close > 0 then\n          close = close\
    \ - 1\n        elseif lst[i] == '(' and open > close then\n          open = open\
    \ + 1\n        elseif lst[i] == ')' and close > open then\n          close = close\
    \ + 1\n        else\n          return false\n        end\n      end\n      return\
    \ open == close\n    end\n    return false\n  end\n  local function match(lst)\n\
    \    local good = is_good(lst)\n    if good then\n      local open = 0\n     \
    \ local close = 0\n      for i = 1, #lst do\n        if lst[i] == '(' and open\
    \ > 0 then\n          open = open - 1\n        elseif lst[i] == ')' and close\
    \ > 0 then\n          close = close - 1\n        elseif lst[i] == '(' and open\
    \ > close then", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ false\n  end\n  local open_balanced = 0\n  local close_balanced = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open_balanced = open_balanced\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balanced = close_balanced +\
    \ 1\n    end\n  end\n  if open_balanced ~= close then\n    return false\n  end\n\
    \  return true\nend", "    local open = 0\n    local close = 0\n    for i = 1,\
    \ #lst do\n        if lst[i] == '(' then\n            open = open + 1\n      \
    \  elseif lst[i] == ')' then\n            close = close + 1\n        elseif lst[i]\
    \ == '.' then\n            if open ~= close then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "  local function\
    \ is_balanced(s)\n    local stack = {}\n    for i = 1, #s do\n      if s[i] ~=\
    \ '(' and s[i] ~= ')' then\n        return false\n      end\n      table.insert(stack,\
    \ s[i])\n    end\n    return #stack == 0\n  end\n  local function is_good(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_string(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_parens(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_brackets(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_brackets_string(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_brackets_parens(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_brackets_brackets(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_brackets_brackets_string(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_brackets_brackets_parens(s)\n",
  "  local function is_balanced(s)\n    local open = 0\n    local close = 0\n    for\
    \ i = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n      elseif\
    \ s[i] == ')' then\n        close = close + 1\n      elseif s[i] == '[' then\n\
    \        close = close + 1\n      elseif s[i] == ']' then\n        open = open\
    \ - 1\n      elseif s[i] == '{' then\n        close = close + 1\n      elseif\
    \ s[i] == '}' then\n        open = open - 1\n      end\n    end\n    return open\
    \ == close and open > 0\n  end\n  local function is_good(lst)\n    local good\
    \ = true\n    for i = 1, #lst do\n      if not is_balanced(lst[i]) then\n    \
    \    good = false\n        break\n      end\n    end\n    return good\n  end\n\
    \  local function match(lst)\n    local good = is_good(lst)\n    if good then\n\
    \      local lst2 = {}\n      for i = 1, #lst do\n        lst2[#lst2 + 1] = lst[i]\n\
    \      end\n      local lst3 = {}\n      for i = 1, #lst2 do\n        lst3[#lst3\
    \ + 1] = lst2[i]\n      end\n      local lst4 = lst3\n      for i = 1, #lst3 do\n\
    \        lst4[#lst4 + 1] = lst3[i]\n      end\n      local lst5 = lst4\n     \
    \ for i = 1, #lst4 do\n        lst5[#lst5 + 1] = lst4[i]\n      end\n      local\
    \ lst6 = {}\n      for i = 1, #lst5 do\n        lst6[#lst6 + 1] = lst5[i]\n  \
    \    end\n      local lst7 = lst6\n      for i = 1, #lst6 do\n        lst7[#lst7\
    \ + 1] = lst6[i]\n      end\n      local lst8 = lst7\n      for i = 1, #lst7 do\n\
    \        lst8[#lst8 + 1] = lst7[i]\n      end\n      local lst9 = lst8\n     \
    \ for i = 1, #lst8 do\n        lst9[#lst9 + 1] = lst8[i]\n      end\n      local\
    \ lst10 = lst9\n      for i = 1, #lst9 do\n        lst10[#lst10 + 1] = lst9[i]\n\
    \      end\n      local lst11 = lst10\n      for i = 1, #lst10 do\n        lst11[#lst11\
    \ + 1] = lst10[i]\n      end\n      local lst12 = lst11\n      for i = 1, #lst11\
    \ do\n", "  local open = 0\n  local close = 0\n  local good = false\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n      if\
    \ open ~= close then\n        good = false\n      end\n    end\n  end\n  if open\
    \ ~= close then\n    good = false\n  end\n  return good\nend", "  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n \
    \   end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local function is_balanced(s)\n    local stack = {}\n\
    \    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return\
    \ false\n      end\n      table.insert(stack, s[i])\n    end\n    return #stack\
    \ == 0\n  end\n  local function is_good(s)\n    local stack = {}\n    for i =\
    \ 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return false\n\
    \      end\n      table.insert(stack, s[i])\n    end\n    return #stack == 0\n\
    \  end\n  local function is_good_string(s)\n    local stack = {}\n    for i =\
    \ 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return false\n\
    \      end\n      table.insert(stack, s[i])\n    end\n    return #stack == 0\n\
    \  end\n  local function is_good_parens(s)\n    local stack = {}\n    for i =\
    \ 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return false\n\
    \      end\n      table.insert(stack, s[i])\n    end\n    return #stack == 0\n\
    \  end\n  local function is_good_brackets(s)\n    local stack = {}\n    for i\
    \ = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return false\n\
    \      end\n      table.insert(stack, s[i])\n    end\n    return #stack == 0\n\
    \  end\n  local function is_good_brackets_string(s)\n    local stack = {}\n  \
    \  for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return\
    \ false\n      end\n      table.insert(stack, s[i])\n    end\n    return #stack\
    \ == 0\n  end\n  local function is_good_brackets_parens(s)\n    local stack =\
    \ {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n      \
    \  return false\n      end\n      table.insert(stack, s[i])\n    end\n    return\
    \ #stack == 0\n  end\n  local function is_good_brackets_brackets(s)\n    local\
    \ stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n\
    \        return false\n      end\n      table.insert(stack, s[i])\n    end\n \
    \   return #stack == 0\n  end\n  local function is_good_brackets_brackets_string(s)\n\
    \    local stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~=\
    \ ')' then\n        return false\n      end\n      table.insert(stack, s[i])\n\
    \    end\n    return #stack == 0\n  end\n  local function is_good_brackets_brackets_parens(s)\n",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open == close\
    \ then\n        if #stack == 0 then\n          return true\n        else\n   \
    \       local top = stack[#stack]\n          local left = lst[top + 1]\n     \
    \     local right = lst[top + 2]\n          if left ~= ')' or right ~= '(' then\n\
    \            return false\n          end\n          stack[#stack] = nil\n    \
    \    end\n      end\n    end\n  end\n  return false\nend", "  local open = 0\n\
    \  local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open == close then\n        good = true\n      end\n \
    \   end\n  end\n  return good\nend", "  local stack = {}\n  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        return false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      close = close + 1\n    elseif lst[i] == '(' and open ~= close then\n  \
    \    good = false\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local good = true\n  for i\
    \ = 1, #lst do\n    if lst[i] ~= '(' then\n      good = false\n    end\n  end\n\
    \  if good then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open =\
    \ 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '.' then\n      good = false -- We can't concatenate\
    \ this string\n    end\n  end\n  if open ~= close then\n    good = false\n  end\n\
    \  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  return open >= close and open\
    \ % 2 == 0\nend", "  local open = 0\n  local close = 0\n  local good = false\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n\
    \      if open ~= close then\n        good = false\n      end\n    end\n  end\n\
    \  if open ~= close then\n    good = false\n  end\n  return good\nend", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  local good = true\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \      open = open - 1\n    end\n  end\n  return good\nend", "  local function\
    \ is_balanced(s)\n    local open = 0\n    local close = 0\n    for c in s:gmatch('%[()%]')\
    \ do\n      if c == '(' and open > 0 then\n        open = open - 1\n      elseif\
    \ c == ')' and close > 0 then\n        close = close - 1\n      elseif c == '('\
    \ and open == close then\n        return false\n      elseif c == ')' and open\
    \ == close then\n        return true\n      elseif c == '(' and open > close then\n\
    \        open = open + 1\n      elseif c == ')' and open > close then\n      \
    \  close = close + 1\n      end\n    end\n    return open == close\n  end\n  local\
    \ function is_good(s)\n    local good = true\n    for _, c in ipairs(s) do\n \
    \     if c ~= '(' and c ~= ')' then\n        good = false\n        break\n   \
    \   end\n    end\n    return good\n  end\n  local function can_make_good(lst)\n\
    \    local good = false\n    for _, s in ipairs(lst) do\n      if is_good(s) then\n\
    \        good = true\n        break\n      end\n    end\n    return good\n  end\n\
    \  local function make_good(lst)\n    local good = false\n    for _, s in ipairs(lst)\
    \ do\n      if is_balanced(s) then\n        good = true\n        break\n     \
    \ end\n    end\n    return good\n  end\n  local function make_good2(lst)\n   \
    \ local good = false\n    for _, s in ipairs(lst) do\n      if is_balanced(s)\
    \ then\n        good = true\n        break\n      end\n    end\n    return good\n\
    \  end\n  local function make_good3(lst)\n    local good = false\n    for _, s\
    \ in ipairs(lst) do\n      if is_balanced(s) then\n        good = true\n     \
    \   break\n      end\n    end\n    return good\n  end\n  local function make_good4(lst)\n\
    \    local good = false\n    for _, s in ipairs(lst) do\n      if is_balanced(s)\
    \ then\n        good = true\n        break\n      end\n    end\n    return good\n\
    \  end\n  local function make_good5(lst)\n    local good = false\n    for _, s\
    \ in ipairs(lst) do\n      if is_balanced(s) then\n        good = true\n     \
    \   break\n      end\n    end\n    return good\n  end\n  local function make_good6(lst)\n\
    \    local good = false\n    for _, s in ipairs(lst) do\n      if is_balanced(s)\
    \ then\n        good = true\n        break\n      ", "  local open = 0\n  local\
    \ close = 0\n  local open_balance = 0\n  local close_balance = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      close_balance = close_balance + 1\n    elseif\
    \ lst[i] == '(' and open_balance > close_balance then\n      open_balance = open_balance\
    \ - 1\n    elseif lst[i] == ')' and close_balance > open_balance then\n      close_balance\
    \ = close_balance - 1\n    end\n    if open_balance == 0 and close_balance ==\
    \ 0 then\n      good = true\n    end\n  end\n  return good\nend", "  local open\
    \ = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      good = false\n\
    \    end\n  end\n  return good\nend", "  local stack = {}\n  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        return false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return true\nend", "    local\
    \ open = 0\n    local close = 0\n    local open_balance = 0\n    local close_balance\
    \ = 0\n    local good = true\n    for i = 1, #lst do\n        if lst[i] == '('\
    \ then\n            open = open + 1\n            open_balance = open_balance +\
    \ 1\n        elseif lst[i] == ')' then\n            close = close + 1\n      \
    \      close_balance = close_balance + 1\n        elseif lst[i] == '(' then\n\
    \            open = open + 1\n            open_balance = open_balance + 1\n  \
    \      elseif lst[i] == ')' then\n            close = close + 1\n            close_balance\
    \ = close_balance + 1\n        elseif lst[i] == '[' then\n            close =\
    \ close + 1\n        elseif lst[i] == ']' then\n            open = open + 1\n\
    \        elseif lst[i] == '{' then\n            close = close + 1\n        elseif\
    \ lst[i] == '}' then\n            open = open + 1\n        elseif lst[i] == '('\
    \ then\n            open = open + 1\n        elseif lst[i] == ')' then\n     \
    \       close = close + 1\n        elseif lst[i] == '[' then\n            close\
    \ = close + 1\n        elseif lst[i] == ']' then\n            open = open + 1\n\
    \        elseif lst[i] == '{' then\n            close = close + 1\n        elseif\
    \ lst[i] == '}' then\n            open = open + 1\n        elseif lst[i] == '.'\
    \ then\n            good = false\n        else\n            good = false\n   \
    \     end\n    end\n    if open_balance == close then\n        good = true\n \
    \   end\n    return good\nend", "  local open = 0\n  local close = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return false\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n    if open_balance ~= close_balance then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      good = good and (open > close)\n    elseif lst[i] == ')'\
    \ then\n      good = good and (open < close)\n    end\n  end\n  if good then\n\
    \    return 'Yes'\n  end\n  return 'No'\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       good = false\n      end\n      open = open - 1\n    end\n  end\n  return\
    \ good\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ ~= close then\n        open = open - 1\n      end\n      stack[#stack + 1] =\
    \ i\n    end\n  end\n  return open ~= close\nend", "    local open = 0\n    local\
    \ close = 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n         \
    \   open = open + 1\n        elseif lst[i] == ')' then\n            close = close\
    \ + 1\n        elseif lst[i] == ')' and open == close then\n            return\
    \ 'Yes'\n        end\n    end\n    return 'No'\nend", "    local stack = {}\n\
    \    local open = 0\n    local close = 0\n    local good = true\n    for i = 1,\
    \ #lst do\n        if lst[i] == '(' then\n            open = open + 1\n      \
    \      stack[#stack + 1] = i\n        elseif lst[i] == ')' then\n            close\
    \ = close + 1\n            if open ~= close then\n                good = false\n\
    \                break\n            end\n            open = open - 1\n       \
    \ end\n    end\n    return good\nend", "  local function is_balanced(s)\n    local\
    \ open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n\
    \        open = open + 1\n      elseif s[i] == ')' then\n        close = close\
    \ + 1\n      elseif s[i] == '.' then\n        return false\n      end\n    end\n\
    \    return open <= close\n  end\n  local function is_good(s)\n    local good\
    \ = true\n    for i = 1, #s do\n      if s[i] == '(' then\n        good = good\
    \ and is_balanced(s)\n      elseif s[i] == ')' then\n        good = good and not\
    \ is_balanced(s)\n      elseif s[i] == '.' then\n        return false\n      end\n\
    \    end\n    return good\n  end\n  local function good(lst)\n    local good =\
    \ true\n    for i = 1, #lst do\n      good = good and is_good(lst[i])\n    end\n\
    \    return good\n  end\n  local function match(s)\n    local good = good(s)\n\
    \    if good then\n      local good = good(lst)\n      if good then\n        local\
    \ good = good(lst)\n        if good then\n          local good = good(lst)\n \
    \       end\n      end\n    end\n    return good\n  end\n  return match(s)\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      stack[#stack + 1] = open\n   \
    \   open = open + 1\n    elseif lst[i] == ')' and open ~= 0 then\n      open =\
    \ open - 1\n      if open ~= 0 then\n        close = close + 1\n      end\n  \
    \  elseif lst[i] == '(' and close ~= 0 then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local stack_size =\
    \ #stack\n  if stack_size == 0 then\n    return 'Yes'\n  end\n  local stack_string\
    \ = stack[1]\n  for i = 2, stack_size do\n    stack_string = stack_string .. stack[i]\n\
    \  end\n  local stack_string = stack_string:sub(1, stack_string:len())\n  local\
    \ stack_string = stack_string:gsub(')', '')\n  local stack_string = stack_string:gsub('(',\
    \ '')\n  local stack_string = stack_string:gsub(')', '')\n  local stack_string\
    \ = stack_string:gsub('(', '')\n  local stack_string = stack_string:gsub(')',\
    \ '')\n  local stack_string = stack_string:gsub(')', '')\n  local stack_string\
    \ = stack_string:gsub(')', '')\n  local stack_string = stack_string:gsub(')',\
    \ '')\n  local stack_string = stack_string:gsub(')', '')\n  local stack_string\
    \ = stack_string:gsub(')', '')\n  local stack_string = stack_string:gsub(')',\
    \ '')\n  local stack_string = stack_string:gsub(')', '')\n  local stack_string\
    \ = stack_string:gsub(')', '')\n  local stack_string = stack_string:gsub(')',\
    \ '')\n  local stack_string = stack_string:gsub(')', '')\n  local stack_string\
    \ = stack_string:gsub(')', '')\n  local stack_string = stack_string:gsub(')',\
    \ '')\n  local stack_string = stack_string:gsub(')', '')\n  local stack_string\
    \ = stack_string:gsub(')', '')\n  local stack_string = stack_string:gsub(')',\
    \ '')\n  local stack_string = stack_string:gsub(')', '')\n  local stack_string\
    \ = stack_string:gsub(')', '')\n  local stack_string = stack_string:gsub(')',\
    \ '')\n  local stack_string = stack_string:", "  local open = 0\n  local close\
    \ = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '' and open == close then\n      good = true\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  return open >= close\
    \ and open ~= 0\nend", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open\
    \ == close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '.' and (open == close or open\
    \ > close) then\n      good = true\n    end\n  end\n  return good\nend", "  local\
    \ function is_balanced(s)\n    local open = 0\n    local close = 0\n    for i\
    \ = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n      elseif\
    \ s[i] == ')' then\n        close = close + 1\n      elseif s[i] == '[' then\n\
    \        close = close + 1\n      elseif s[i] == ']' then\n        open = open\
    \ - 1\n      elseif s[i] == '{' then\n        close = close + 1\n      elseif\
    \ s[i] == '}' then\n        open = open - 1\n      elseif s[i] == '.' then\n \
    \       close = close + 1\n      elseif s[i] == '!' then\n        close = close\
    \ + 1\n      elseif s[i] == '?' then\n        close = close + 1\n      elseif\
    \ s[i] == '*' then\n        close = close + 1\n      elseif s[i] == '+' then\n\
    \        close = close + 1\n      elseif s[i] == '-' then\n        close = close\
    \ + 1\n      elseif s[i] == '/' then\n        close = close + 1\n      elseif\
    \ s[i] == '=' then\n        close = close + 1\n      elseif s[i] == '<' then\n\
    \        close = close + 1\n      elseif s[i] == '>' then\n        close = close\
    \ + 1\n      elseif s[i] == '&' then\n        close = close + 1\n      elseif\
    \ s[i] == '|' then\n        close = close + 1\n      elseif s[i] == '^' then\n\
    \        close = close + 1\n      elseif s[i] == '%' then\n        close = close\
    \ + 1\n      elseif s[i] == '+' then\n        close = close + 1\n      elseif\
    \ s[i] == '-' then\n        close = close + 1\n      elseif s[i] == '*' then\n\
    \        close = close + 1\n      elseif s[i] == '/' then\n        close = close\
    \ + 1\n      elseif s[i] == '|' then\n        close = close + 1\n      elseif\
    \ s[i] == '+' then\n        close = close + 1\n      elseif s[i] == '-' then\n\
    \        close = close + 1\n      elseif s[i] == '=' then\n        close = close\
    \ + 1\n      elseif s[i] == '<' then\n        close = close + 1\n      elseif\
    \ s[i] == '>' then\n        close = close + 1\n      elseif s[i] == '&' then\n\
    \        close = close + 1\n      elseif s[i] == '|' then\n        close = close\
    \ + 1\n      elseif s[i] == '^' then\n        close = close ", "  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n \
    \   end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  return open >= close and open ~= 0\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  return open >= close and open ~= 0\nend", " \
    \ local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        return false\n      end\n      open = open - 1\n    end\n  end\n\
    \  return true\nend", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == '(' and close > open then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  return open == close and open ~= 0\n\
    end", "  local stack = {}\n  local open = 0\n  local close = 0\n  local good =\
    \ true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack +\
    \ 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        good = false\n        break\n\
    \      end\n      open = open - 1\n    end\n  end\n  return good\nend", "  local\
    \ function is_balanced(s)\n    local open = 0\n    local close = 0\n    for i\
    \ = 1, #s do\n      if s[i] == '(' then\n        open = open + 1\n      elseif\
    \ s[i] == ')' then\n        close = close + 1\n      elseif s[i] == '[' then\n\
    \        close = close + 1\n      elseif s[i] == ']' then\n        open = open\
    \ - 1\n      elseif s[i] == '{' then\n        close = close + 1\n      elseif\
    \ s[i] == '}' then\n        open = open - 1\n      end\n    end\n    return open\
    \ == close and open > 0\n  end\n  local function is_good(s)\n    local good =\
    \ true\n    for i = 1, #s do\n      if s[i] == '(' then\n        good = good and\
    \ is_balanced(s)\n      elseif s[i] == ')' then\n        good = good and not is_balanced(s)\n\
    \      elseif s[i] == '[' then\n        good = good and not is_balanced(s)\n \
    \     elseif s[i] == ']' then\n        good = good and not is_balanced(s)\n  \
    \    elseif s[i] == '{' then\n        good = good and not is_balanced(s)\n   \
    \   elseif s[i] == '}' then\n        good = good and not is_balanced(s)\n    \
    \  end\n    end\n    return good\n  end\n  local function match(s)\n    local\
    \ good = true\n    for i = 1, #s do\n      if s[i] == '(' then\n        good =\
    \ good and is_good(s:sub(1, i))\n      elseif s[i] == ')' then\n        good =\
    \ good and not is_good(s:sub(1, i))\n      elseif s[i] == '[' then\n        good\
    \ = good and not is_good(s:sub(1, i))\n      elseif s[i] == ']' then\n       \
    \ good = good and not is_good(s:sub(1, i))\n      elseif s[i] == '{' then\n  \
    \      good = good and not is_good(s:sub(1, i))\n      elseif s[i] == '}' then\n\
    \        good = good and not is_good(s:sub(1, i))\n      end\n    end\n    return\
    \ good\n  end\n  return match(lst)\nend", "  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      if\
    \ open ~= close then\n        good = false\n      end\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \    if open_balance ~= close_balance then\n      return 'No'\n    end\n  end\n\
    \  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      good = false\n    end\n  end\n \
    \ return good\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  if open == 0 and close == 0 then\n    return 'Yes'\n  end\n  if open > close\
    \ then\n    return 'No'\n  end\n  return match_parens(lst)\nend", "    local stack\
    \ = {}\n    local open = 0\n    local close = 0\n    for i = 1, #lst do\n    \
    \    if lst[i] == '(' and open ~= 0 then\n            open = open + 1\n      \
    \      stack[#stack + 1] = i\n        elseif lst[i] == ')' and close ~= 0 then\n\
    \            close = close + 1\n            if open ~= close then\n          \
    \      return false\n            end\n            open = open - 1\n        elseif\
    \ lst[i] == '(' and open ~= 0 then\n            open = open + 1\n            stack[#stack\
    \ + 1] = i\n        elseif lst[i] == ')' and close ~= 0 then\n            close\
    \ = close + 1\n            if open ~= close then\n                return false\n\
    \            end\n            open = open - 1\n        end\n    end\n    return\
    \ true\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ ~= close then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend", "  local open = 0\n  local close = 0\n  local good = false\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open == close then\n \
    \       good = true\n      end\n    end\n  end\n  return good\nend", "    local\
    \ stack = {}\n    local open = 0\n    local close = 0\n    for i = 1, #lst do\n\
    \        if lst[i] == '(' then\n            stack[#stack + 1] = i\n          \
    \  open = open + 1\n        elseif lst[i] == ')' then\n            close = close\
    \ + 1\n            if open == close then\n                local start = stack[#stack\
    \ + 1]\n                local end = i\n                local str = table.concat(lst:sub(1,\
    \ start), '')\n                local str2 = table.concat(lst:sub(end + 1), '')\n\
    \                if str == str2 then\n                    return 'Yes'\n     \
    \           else\n                    return 'No'\n                end\n     \
    \       end\n        end\n    end\n    return 'No'\nend", "  local open = 0\n\
    \  local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open > close then\n        good = true\n      end\n  \
    \  end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local\
    \ good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '.' then\n      if open ~= close then\n        good = false\n      end\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == '.' then\n      if open ~= close then\n        good = false\n    \
    \  end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '.' then\n      if open ~= close then\n        good = false\n      end\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  end\n  if open > close then\n    return 'No'\n  end\n\
    \  return match_parens(lst)\nend", "  local open = 0\n  local close = 0\n  local\
    \ open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance =\
    \ close_balance + 1\n    elseif lst[i] == '[' then\n      close = close + 1\n\
    \      close_balance = close_balance + 1\n    elseif lst[i] == ']' then\n    \
    \  open = open - 1\n      open_balance = open_balance - 1\n    end\n  end\n  if\
    \ open_balance ~= close then\n    return 'No'\n  end\n  if open == 0 then\n  \
    \  return 'Yes'\n  end\n  return match_parens(lst)\nend", "  local open = 0\n\
    \  local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        good = false\n        break\n\
    \      end\n    end\n  end\n  return good\nend", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for i = 1, #s do\n      if s[i]\
    \ == '(' and open ~= 0 then\n        open = open - 1\n      elseif s[i] == ')'\
    \ and close ~= 0 then\n        close = close - 1\n      elseif s[i] == ')' and\
    \ open == 0 then\n        return false\n      elseif s[i] == '(' and open == 0\
    \ then\n        open = open + 1\n      end\n    end\n    return close == 0\n \
    \ end\n  local function is_good(s)\n    local good = true\n    for i = 1, #s do\n\
    \      if s[i] == '(' and is_balanced(s) then\n        good = false\n      end\n\
    \      if s[i] == ')' and is_balanced(s) then\n        good = false\n      end\n\
    \    end\n    return good\n  end\n  local function is_good2(s)\n    local good\
    \ = true\n    local open = 0\n    local close = 0\n    for i = 1, #s do\n    \
    \  if s[i] == '(' and open ~= 0 then\n        open = open - 1\n      elseif s[i]\
    \ == ')' and close ~= 0 then\n        close = close - 1\n      elseif s[i] ==\
    \ ')' and open == 0 then\n        good = false\n      elseif s[i] == '(' and open\
    \ == 0 then\n        open = open + 1\n      end\n    end\n    return good\n  end\n\
    \  local function is_good3(s)\n    local good = true\n    local open = 0\n   \
    \ local close = 0\n    for i = 1, #s do\n      if s[i] == '(' and open ~= 0 then\n\
    \        open = open - 1\n      elseif s[i] == ')' and close ~= 0 then\n     \
    \   close = close - 1\n      elseif s[i] == ')' and open == 0 then\n        good\
    \ = false\n      elseif s[i] == '(' and open == 0 then\n        open = open +\
    \ 1\n      end\n    end\n    return good\n  end\n  local function is_good4(s)\n\
    \    local good = true\n    local open = 0\n    local close = 0\n    for i = 1,\
    \ #s do\n      if s[i] == '(' and open ~= 0 then\n        open = open - 1\n  \
    \    elseif s[i] == ')' and close ~= 0 then\n        close = close - 1\n     \
    \ elseif s[i] == ')' and open == 0 then\n        good = false\n      elseif s[i]\
    \ == '(' and open == 0 then\n        open = open + 1\n      end\n    end\n   \
    \ return good\n  end\n  local function is_good5(s)\n    local good = true\n  \
    \  ", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open > 0 then\n      open = open - 1\n   \
    \ elseif lst[i] == ')' and close > 0 then\n      close = close - 1\n    elseif\
    \ lst[i] == '(' and close == 0 then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and open == 0 then\n      close = close + 1\n    elseif lst[i] == '('\
    \ and open > 0 and close == 0 then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local open_balance = 0\n\
    \  local close_balance = 0\n  local good = false\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close then\n    good\
    \ = true\n  end\n  return good\nend", "  local function is_balanced(s)\n    local\
    \ stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n\
    \        return false\n      end\n      table.insert(stack, s[i])\n    end\n \
    \   return #stack == 0\n  end\n  local function is_good(s)\n    local stack =\
    \ {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n      \
    \  return false\n      end\n      table.insert(stack, s[i])\n    end\n    return\
    \ #stack == 0\n  end\n  local function make_good(s)\n    local stack = {}\n  \
    \  for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return\
    \ false\n      end\n      table.insert(stack, s[i])\n    end\n    local good =\
    \ true\n    for i = 1, #stack do\n      if stack[i] ~= '(' and stack[i] ~= ')'\
    \ then\n        good = false\n        break\n      end\n    end\n    return good\n\
    \  end\n  local function make_good2(s)\n    local stack = {}\n    for i = 1, #s\
    \ do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return false\n      end\n\
    \      table.insert(stack, s[i])\n    end\n    local good = true\n    for i =\
    \ 1, #stack do\n      if stack[i] ~= '(' and stack[i] ~= ')' then\n        good\
    \ = false\n        break\n      end\n    end\n    return good\n  end\n  local\
    \ function make_good3(s)\n    local stack = {}\n    for i = 1, #s do\n      if\
    \ s[i] ~= '(' and s[i] ~= ')' then\n        return false\n      end\n      table.insert(stack,\
    \ s[i])\n    end\n    local good = true\n    for i = 1, #stack do\n      if stack[i]\
    \ ~= '(' and stack[i] ~= ')' then\n        good = false\n        break\n     \
    \ end\n    end\n    return good\n  end\n  local function make_good4(s)\n    local\
    \ stack = {}\n    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n\
    \        return false\n      end\n      table.insert(stack, s[i])\n    end\n \
    \   local good = true\n    for i = 1, #stack do\n      if stack[i] ~= '(' and\
    \ stack[i] ~= ')' then\n        good = false\n        break\n      end\n    end\n\
    \    return good\n  end\n  local function make_good5(s)\n    local stack = {}\n\
    \    for i = 1, #s do\n      if s[i] ~= '(' and s[i] ~= ')' then\n        return\
    \ false\n      end\n      table.insert(stack, s[i])\n    end", "  local open =\
    \ 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '.' then\n      if open ~= close then\n  \
    \      good = false\n      end\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        good = true\n \
    \     end\n    end\n  end\n  return good\nend", "  local function is_balanced(s)\n\
    \    local open = 0\n    local close = 0\n    for c in s:gmatch(\"[()]+\") do\n\
    \      if c == '(' and open > 0 then\n        open = open - 1\n      elseif c\
    \ == ')' and close > 0 then\n        close = close - 1\n      elseif c == '('\
    \ and open == 0 and close == 0 then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function is_good(s)\n    local good = true\n\
    \    for _, c in ipairs(s) do\n      if c ~= '(' and c ~= ')' then\n        good\
    \ = false\n        break\n      end\n    end\n    return good\n  end\n  local\
    \ function make_good(s)\n    local good = true\n    for _, c in ipairs(s) do\n\
    \      if c ~= '(' and c ~= ')' then\n        good = false\n        break\n  \
    \    end\n    end\n    return good\n  end\n  local function make_good2(s)\n  \
    \  local good = true\n    for _, c in ipairs(s) do\n      if c ~= '(' and c ~=\
    \ ')' then\n        good = false\n        break\n      end\n    end\n    return\
    \ good\n  end\n  local function make_good3(s)\n    local good = true\n    for\
    \ _, c in ipairs(s) do\n      if c ~= '(' and c ~= ')' then\n        good = false\n\
    \        break\n      end\n    end\n    return good\n  end\n  local function make_good4(s)\n\
    \    local good = true\n    for _, c in ipairs(s) do\n      if c ~= '(' and c\
    \ ~= ')' then\n        good = false\n        break\n      end\n    end\n    return\
    \ good\n  end\n  local function make_good5(s)\n    local good = true\n    for\
    \ _, c in ipairs(s) do\n      if c ~= '(' and c ~= ')' then\n        good = false\n\
    \        break\n      end\n    end\n    return good\n  end\n  local function make_good6(s)\n\
    \    local good = true\n    for _, c in ipairs(s) do\n      if c ~= '(' and c\
    \ ~= ')' then\n        good = false\n        break\n      end\n    end\n    return\
    \ good\n  end\n  local function make_good7(s)\n    local good = true\n    for\
    \ _, c in ipairs(s) do\n      if c ~= '(' and c ~= ')' then\n        good = false\n\
    \        break\n      end\n    end\n    return good\n  end\n  local function make_good8(s)\n\
    \    local good = true\n    for _, ", "    local open = 0\n    local close = 0\n\
    \    for i = 1, #lst do\n        if lst[i] == '(' then\n            open = open\
    \ + 1\n        elseif lst[i] == ')' then\n            close = close + 1\n    \
    \    elseif lst[i] == ')' and open == close then\n            return true\n  \
    \      end\n    end\n    return false\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '.' then\n      if open ~= close\
    \ then\n        good = false\n      end\n    end\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        good = false\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '.' then\n      if open ~= close then\n        good = false\n\
    \        break\n      end\n    end\n  end\n  return good\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local good = false\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '.' then\n\
    \      if open ~= close then\n        good = false\n      end\n    end\n  end\n\
    \  if open ~= close then\n    good = false\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        good = false\n\
    \        break\n      end\n    end\n  end\n  return good\nend", "  local function\
    \ is_balanced(s)\n    local open = 0\n    local close = 0\n    for i = 1, #s do\n\
    \      if s[i] == '(' then\n        open = open + 1\n      elseif s[i] == ')'\
    \ then\n        close = close + 1\n      elseif s[i] == '[' then\n        close\
    \ = close + 1\n      elseif s[i] == ']' then\n        open = open - 1\n      end\n\
    \    end\n    return open == close and open > 0\n  end\n  local function is_good(s)\n\
    \    local good = true\n    for i = 1, #s do\n      if s[i] == '(' then\n    \
    \    good = good and not is_balanced(s)\n      elseif s[i] == ')' then\n     \
    \   good = good and is_balanced(s)\n      elseif s[i] == '[' then\n        good\
    \ = good and is_good(s:sub(i))\n      elseif s[i] == ']' then\n        good =\
    \ good and is_good(s:sub(i))\n      end\n    end\n    return good\n  end\n  return\
    \ is_good(lst)\nend", "  local function is_balanced(s)\n    local open = 0\n \
    \   local close = 0\n    for i = 1, #s do\n      if s[i] == '(' then\n       \
    \ open = open + 1\n      elseif s[i] == ')' then\n        close = close + 1\n\
    \      elseif s[i] == '[' then\n        close = close + 1\n      elseif s[i] ==\
    \ ']' then\n        open = open - 1\n      end\n    end\n    return open == close\
    \ and open > 0\n  end\n  local function is_good(s)\n    local good = true\n  \
    \  for i = 1, #s do\n      if s[i] == '(' then\n        good = good and not is_balanced(s[i+1:])\n\
    \      elseif s[i] == ')' then\n        good = good and is_balanced(s[i+1:])\n\
    \      elseif s[i] == '[' then\n        good = good and is_balanced(s[i+1:])\n\
    \      elseif s[i] == ']' then\n        good = good and is_balanced(s[i+1:])\n\
    \      end\n    end\n    return good\n  end\n  local function match(s)\n    local\
    \ good = false\n    for i = 1, #s do\n      if s[i] == '(' then\n        good\
    \ = good or match(s[i+1:])\n      elseif s[i] == ')' then\n        good = good\
    \ and match(s[i+1:])\n      elseif s[i] == '[' then\n        good = good and match(s[i+1:])\n\
    \      elseif s[i] == ']' then\n        good = good and match(s[i+1:])\n     \
    \ end\n    end\n    return good\n  end\n  return match(lst)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
