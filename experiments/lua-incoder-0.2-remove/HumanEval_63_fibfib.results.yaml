language: lua
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n < 3 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3oa54y4.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx3oa54y4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    end\n    if n == 1 then\n        return 1\n    end\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixoqst29.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\
    \t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in\
    \ function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.300 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n < 0 then\n        return\
    \ nil\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n\
    \        return 1\n    end\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhzfxbx8.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpvhzfxbx8.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpvhzfxbx8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnqlynmm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplnqlynmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then return 0 end\n\
    \  if n == 1 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q1k0wre.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\
    \t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in\
    \ function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    end\n    if n == 1 then\n        return 1\n    end\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixoqst29.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\
    \t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in\
    \ function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.300 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    end\n    if n == 1 then\n        return 1\n    end\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixoqst29.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\
    \t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in\
    \ function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.300 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return n end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkujy2c_b.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkujy2c_b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return n end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkujy2c_b.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkujy2c_b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk11dmlor.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk11dmlor.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  elseif\
    \ n == 3 then\n    return 2\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18jtsj9u.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp18jtsj9u.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return n end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkujy2c_b.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkujy2c_b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnqlynmm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplnqlynmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnqlynmm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplnqlynmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnqlynmm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplnqlynmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n < 3 then\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt31qmuv.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxt31qmuv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n < 3 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3oa54y4.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx3oa54y4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk11dmlor.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk11dmlor.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return n end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkujy2c_b.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkujy2c_b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then return 0 end\n\
    \  if n == 1 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q1k0wre.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\
    \t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in\
    \ function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then return 0 end\n\
    \  if n == 1 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q1k0wre.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\
    \t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in\
    \ function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnqlynmm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplnqlynmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    end\n    if n == 1 then\n        return 1\n    end\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixoqst29.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\
    \t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in\
    \ function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14:\
    \ in function 'fibfib'\n\t/tmp/tmpixoqst29.lua:14: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.300 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n < 3 then\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt31qmuv.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxt31qmuv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk11dmlor.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk11dmlor.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n < 3 then\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt31qmuv.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxt31qmuv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w25x6jv.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\
    \t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in\
    \ function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13:\
    \ in function 'fibfib'\n\t/tmp/tmp_w25x6jv.lua:13: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659750520
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnqlynmm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplnqlynmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then return 0 end\n\
    \  if n == 1 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q1k0wre.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\
    \t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in\
    \ function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n < 1 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo56eaxca.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpo56eaxca.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n    if n == 0 then\n        return\
    \ 0\n    elseif n == 1 then\n        return 1\n    elseif n == 2 then\n      \
    \  return 1\n    else\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnqlynmm.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplnqlynmm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00e8dlw9.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp00e8dlw9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n \
    \ if n < 3 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk11dmlor.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk11dmlor.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n\
    \  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9nc7u3w.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpf9nc7u3w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n < 3 then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3oa54y4.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx3oa54y4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n\
    \  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ri40q9.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpy6ri40q9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then return nil end\n\
    \  if n == 0 then return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdx4pyb30.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdx4pyb30.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpdx4pyb30.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n == 0 then return 0 end\n\
    \  if n == 1 then return 1 end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q1k0wre.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\
    \t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in\
    \ function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10:\
    \ in function 'fibfib'\n\t/tmp/tmp7q1k0wre.lua:10: in function 'fibfib'\n\t...\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n\
    \  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7lyjg1l.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc7lyjg1l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750519
