name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element =\
    \ numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] < rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  for\
    \ i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end", "  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      rolling_max_i = rolling_max_i or numbers[j]\n\
    \      if rolling_max_i > numbers[j] then\n        rolling_max_i = numbers[j]\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ or rolling_max_i\n    else\n      rolling_max = rolling_max_i\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_time = nil\n  for\
    \ i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value ==\
    \ nil then\n      rolling_max_value = value\n      rolling_max_index = i\n   \
    \   rolling_max_time = i\n    else\n      if rolling_max_value < value then\n\
    \        rolling_max_value = value\n        rolling_max_index = i\n        rolling_max_time\
    \ = i\n      end\n    end\n  end\n  return rolling_max_index, rolling_max_value,\
    \ rolling_max_time\nend", "  local rolling_max = {}\n  for i = 1, #numbers do\n\
    \    local rolling_max_element = numbers[i]\n    for j = 1, #numbers do\n    \
    \  if numbers[j] < rolling_max_element then\n        rolling_max_element = numbers[j]\n\
    \      end\n    end\n    table.insert(rolling_max, rolling_max_element)\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n        rolling_max_value = nil\n  \
    \    else\n        rolling_max = rolling_max\n      end\n    end\n    if rolling_max_index\
    \ ~= nil then\n      rolling_max = rolling_max\n    else\n      rolling_max_index\
    \ = i\n      rolling_max_value = numbers[i]\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value\nend", "  local rolling_max = nil\n  for\
    \ i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for j =\
    \ i + 1, #numbers do\n      if numbers[j] > rolling_max_element then\n       \
    \ rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max = rolling_max\
    \ or rolling_max_element\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_index ~= nil then\n        rolling_max = rolling_max\
    \ and rolling_max > numbers[i] and numbers[i]\n        rolling_max_index = rolling_max_index\
    \ and rolling_max_index > i\n      else\n        rolling_max = numbers[i]\n  \
    \      rolling_max_index = i\n      end\n    else\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end", "  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  for\
    \ i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max ~= nil\
    \ then\n      if value > rolling_max_value then\n        rolling_max_value = value\n\
    \        rolling_max_index = i\n      end\n    else\n      rolling_max = value\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max_index, rolling_max_value\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] > rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    rolling_max_value = numbers[#numbers]\n    rolling_max_index\
    \ = #numbers\n  end\n  return rolling_max_index, rolling_max_value\nend", "  local\
    \ rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  table.insert(rolling_max,\
    \ numbers[rolling_max_index])\n  return rolling_max\nend", "  local rolling_max\
    \ = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n    for j\
    \ = i - 1, -1, -1 do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  ",
  "  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max ~= nil then\n  \
    \    rolling_max = rolling_max > numbers[rolling_max_index] and rolling_max or\
    \ numbers[rolling_max_index]\n    else\n      rolling_max = numbers[rolling_max_index]\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n  local\
    \ rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] > rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  table.insert(rolling_max,\
    \ rolling_max_value)\n  table.insert(rolling_max, rolling_max_index)\n  return\
    \ rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers do\n   \
    \ local max_value = numbers[i]\n    for j = 1, i do\n      if numbers[j] > max_value\
    \ then\n        max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n \
    \ local rolling_max_index = 0\n  local rolling_max_value = 0\n  for i = 1, #numbers\
    \ do\n    if numbers[i] <= rolling_max_value then\n      rolling_max[rolling_max_index]\
    \ = numbers[i]\n      rolling_max_index = rolling_max_index + 1\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max_value = rolling_max_value\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_index\
    \ == i then\n        rolling_max = numbers[i]\n      else\n        rolling_max\
    \ = numbers[i] and rolling_max or numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n    end\n    rolling_max_index = i\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ ~= nil then\n    rolling_max = rolling_max_value\n    rolling_max_index = rolling_max_index\n\
    \  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max =\
    \ nil\n  for i = 1, #numbers do\n    local rolling_max = numbers[i]\n    for j\
    \ = i + 1, #numbers do\n      rolling_max = math.max(rolling_max, numbers[j])\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for\
    \ i = 1, #numbers do\n    local max_value = numbers[i]\n    for j = 1, i do\n\
    \      local current_value = numbers[j]\n      if current_value > max_value then\n\
    \        max_value = current_value\n      end\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n \
    \ local rolling_max_index = 1\n  local rolling_max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      rolling_max_index = i - 1\n      rolling_max = numbers[rolling_max_index]\n\
    \    else\n      rolling_max = numbers[i]\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = numbers[i]\n      rolling_max_index =\
    \ i\n    else\n      if rolling_max_value > numbers[i] then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    end\n  end\n  if\
    \ rolling_max_value == nil then\n    return nil\n  end\n  local rolling_max_index\
    \ = rolling_max_index + 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local roll", "  local rolling_max = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      end\n    end\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max = nil\n\
    \        rolling_max_index = nil\n        rolling_max_value = nil\n      end\n\
    \    end\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      end\n    end\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max = nil\n\
    \        rolling_max_index = nil\n        rolling_max_value = nil\n      end\n\
    \    end\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      end\n    end\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max = nil\n\
    \        rolling_max_index = nil\n        rolling_max_value = nil\n      end\n\
    \    end\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      end\n    end\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        ", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local max_value = numbers[i]\n    for j = i + 1, #numbers do\n     \
    \ if numbers[j] > max_value then\n        max_value = numbers[j]\n      end\n\
    \    end\n    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_time < numbers[i] then\n        rolling_max_time\
    \ = numbers[i]\n        rolling_max_index = i\n        rolling_max_value = rolling_max\n\
    \      elseif rolling_max_time == numbers[i] then\n        rolling_max_value =\
    \ rolling_max_value or rolling_max\n      else\n        rolling_max = rolling_max_value\
    \ or rolling_max\n        rolling_max_time = numbers[i]\n        rolling_max_index\
    \ = i\n      end\n    else\n      rolling_max = numbers[i]\n      rolling_max_time\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = rolling_max\n\
    \    end\n  end\n  return rolling_max_index, rolling_max_value, rolling_max_time\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index == 0 then\n    rolling_max = rolling_max_value\n\
    \  else\n    rolling_max = numbers[rolling_max_index]\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index = nil\n\
    \  local rolling_max_value = nil\n  for i = 1, #numbers do\n    local value =\
    \ numbers[i]\n    if rolling_max ~= nil then\n      if rolling_max_value ~= nil\
    \ then\n        if value > rolling_max_value then\n          rolling_max = nil\n\
    \          rolling_max_index = nil\n          rolling_max_value = nil\n      \
    \  else\n          rolling_max = rolling_max\n          rolling_max_index = i\n\
    \          rolling_max_value = value\n        end\n      else\n        rolling_max\
    \ = value\n        rolling_max_index = i\n        rolling_max_value = value\n\
    \      end\n    else\n      rolling_max = value\n      rolling_max_index = i\n\
    \      rolling_max_value = value\n    end\n  end\n  return rolling_max, rolling_max_index,\
    \ rolling_max_value\nend", "  local rolling_max = nil\n  for i = 1, #numbers do\n\
    \    local rolling_max_element = numbers[i]\n    for j = i - 1, -1, -1 do\n  \
    \    if numbers[j] > rolling_max_element then\n        rolling_max_element = numbers[j]\n\
    \      end\n    end\n    rolling_max = rolling_max or rolling_max_element\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max = numbers[i]\n    for j = 1, i do\n      rolling_max\
    \ = math.max(rolling_max, numbers[j])\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value\
    \ = numbers[i]\n    for j = 1, i do\n      max_value = math.max(max_value, numbers[j])\n\
    \    end\n    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] < rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ ~= nil then\n    rolling_max = rolling_max_index\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil", "  local rolling_max = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      else\n        rolling_max = rolling_max > numbers[i] and rolling_max\
    \ or numbers[i]\n        rolling_max_index = i\n        rolling_max_value = numbers[i]\n\
    \      end\n    else\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = numbers[i]\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value\nend", "  local rolling_max = nil\n  for\
    \ i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for j =\
    \ i + 1, #numbers do\n      local rolling_max_element_other = numbers[j]\n   \
    \   if rolling_max_element > rolling_max_element_other then\n        rolling_max\
    \ = rolling_max_element\n      else\n        rolling_max = rolling_max_element_other\n\
    \      end\n    end\n  end\n  return rolling_max\nend", "  local rolling_max =\
    \ nil\n  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      local rolling_max_element_2 = numbers[j]\n\
    \      if rolling_max_element < rolling_max_element_2 then\n        rolling_max_element\
    \ = rolling_max_element_2\n      end\n    end\n    rolling_max = rolling_max or\
    \ rolling_max_element\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  for\
    \ i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value ==\
    \ nil then\n      rolling_max_value = value\n      rolling_max_index = i\n   \
    \ else\n      if value > rolling_max_value then\n        rolling_max_value = value\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend", "  local rolling_max = nil\n  for i = 1, #numbers do\n\
    \    local rolling_max_i = nil\n    for j = 1, #numbers do\n      if numbers[j]\
    \ < numbers[i] then\n        rolling_max_i = numbers[j]\n      end\n    end\n\
    \    if rolling_max ~= nil then\n      rolling_max = rolling_max > rolling_max_i\
    \ ? rolling_max : rolling_max_i\n    else\n      rolling_max = rolling_max_i\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for\
    \ i = 1, #numbers do\n    local max_element = numbers[i]\n    for j = i + 1, #numbers\
    \ do\n      if numbers[j] > max_element then\n        max_element = numbers[j]\n\
    \      end\n    end\n    table.insert(rolling_max, max_element)\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = {}\n  local rolling_max_index = 0\n\
    \  local rolling_max_value = 0\n  for i = 1, #numbers do\n    if numbers[i] >\
    \ rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  local rolling_max_time = nil\n\
    \  local rolling_max_time = nil\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_time\
    \ = i\n    end\n  end\n  if rolling_max_time ~= nil then\n    rolling_max = numbers[rolling_max_time]\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_index\
    \ ~= nil then\n        rolling_max = rolling_max and rolling_max > numbers[rolling_max_index]\n\
    \      else\n        rolling_max = numbers[rolling_max_index]\n      end\n   \
    \ end\n    rolling_max_index = i\n    rolling_max = numbers[rolling_max_index]\
    \ and rolling_max or numbers[rolling_max_index - 1]\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1,\
    \ #numbers do\n    if rolling_max ~= nil then\n      rolling_max_index = i - 1\n\
    \      rolling_max = numbers[rolling_max_index]\n    else\n      rolling_max =\
    \ numbers[i]\n    end\n  end\n  return rolling_max, rolling_max_index\nend", " \
    \ local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i =\
    \ nil\n    for j = 1, i do\n      local rolling_max_j = numbers[j]:max()\n   \
    \   if rolling_max_j > rolling_max_i then\n        rolling_max_i = rolling_max_j\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ > rolling_max_i ? rolling_max : rolling_max_i\n    else\n      rolling_max =\
    \ rolling_max_i\n    end\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    local\
    \ rolling_max_index = i\n    if rolling_max ~= nil then\n      if rolling_max_index\
    \ > rolling_max_index then\n        rolling_max = numbers[rolling_max_index]\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ > numbers[i] and rolling_max or numbers[i]\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max_value = rolling_max_value + numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > rolling_max_element then\n\
    \        rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      rolling_max\
    \ = rolling_max > numbers[i] and rolling_max or numbers[i]\n      rolling_max_index\
    \ = i\n    else\n      rolling_max = numbers[i]\n      rolling_max_index = i\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_time = nil", "  local rolling_max = nil\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = numbers[i]\n      rolling_max_index =\
    \ i\n    else\n      if rolling_max_value < numbers[i] then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    end\n  end\n  if\
    \ rolling_max_value ~= nil then\n    rolling_max = rolling_max_value\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = {}\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  ",
  "  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  return\
    \ rolling_max_index, rolling_max_value\nend", "  local rolling_max = nil\n  for\
    \ i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for j =\
    \ 1, i do\n      rolling_max_element = rolling_max_element > numbers[j] and rolling_max_element\
    \ or numbers[j]\n    end\n    rolling_max = rolling_max and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max = numbers[i]\n    for j = 1, #numbers do\n      if\
    \ numbers[j] < rolling_max then\n        rolling_max = numbers[j]\n      end\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local\
    \ rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  local rolling_max_time\
    \ = nil\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n\
    \      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_time = nil\n    else\n      rolling_max_time\
    \ = math.max(rolling_max_time, numbers[i])\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value, rolling_max_time\nend", "  local rolling_max\
    \ = nil\n  local max_number = nil\n  local max_index = nil\n  local max_value\
    \ = nil\n  for i = 1, #numbers do\n    if max_number == nil then\n      max_number\
    \ = numbers[i]\n      max_index = i\n      max_value = numbers[i]\n    else\n\
    \      if numbers[i] > max_number then\n        max_number = numbers[i]\n    \
    \    max_index = i\n        max_value = numbers[i]\n      else\n        max_number\
    \ = max_number * max_index + numbers[i]\n      end\n    end\n  end\n  if max_number\
    \ ~= nil then\n    rolling_max = max_number\n  end\n  return rolling_max\nend",
  "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max_time\
    \ == nil then\n      rolling_max_time = numbers[i]\n      rolling_max_index =\
    \ i\n      rolling_max_value = numbers[i]\n    else\n      if numbers[i] < rolling_max_value\
    \ then\n        rolling_max_time = numbers[i]\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      else\n        rolling_max_time\
    \ = rolling_max_time + numbers[i]\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_time, rolling_max_value\nend", "  local rolling_max = nil\n  for\
    \ i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for j =\
    \ i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element then\n        rolling_max_element\
    \ = numbers[j]\n      end\n    end\n    rolling_max = rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = numbers[i]\n      rolling_max_index =\
    \ i\n    else\n      if numbers[i] > rolling_max_value then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    end\n  end\n  if\
    \ rolling_max_index ~= nil then\n    rolling_max = table.concat(numbers, rolling_max_index)\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local max_number\
    \ = nil\n  local max_index = nil\n  for i = 1, #numbers do\n    if max_number\
    \ == nil then\n      max_number = numbers[i]\n      max_index = i\n    else\n\
    \      if numbers[i] > max_number then\n        max_number = numbers[i]\n    \
    \    max_index = i\n      end\n    end\n  end\n  if max_number ~= nil then\n \
    \   rolling_max = max_number\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n\
    \    for j = i - 1, i - 1, -1 do\n      if numbers[j] > rolling_max_element then\n\
    \        rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = nil", "  local rolling_max = nil\n  local max_value\
    \ = nil\n  for i = 1, #numbers do\n    if max_value == nil then\n      max_value\
    \ = numbers[i]\n      rolling_max = numbers[i]\n    else\n      if numbers[i]\
    \ > max_value then\n        max_value = numbers[i]\n        rolling_max = numbers[i]\n\
    \      else\n        rolling_max = rolling_max .. \", \" .. numbers[i]\n     \
    \ end\n    end\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = nil\n  local rolling_max_value = nil\n  for i = 1,\
    \ #numbers do\n    local value = numbers[i]\n    if rolling_max ~= nil then\n\
    \      if value > rolling_max_value then\n        rolling_max = rolling_max_value\n\
    \        rolling_max_index = rolling_max_index + 1\n      else\n        rolling_max\
    \ = value\n        rolling_max_index = i + 1\n      end\n    else\n      rolling_max\
    \ = value\n      rolling_max_index = i + 1\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      rolling_max\
    \ = math.max(rolling_max, numbers[i])\n      rolling_max_index = i\n    else\n\
    \      rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n  end\n\
    \  return rolling_max, rolling_max_index\nend", "  local rolling_max = nil\n \
    \ local rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_time\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_time\
    \ == nil then\n      rolling_max_time = value\n      rolling_max_index = i\n \
    \     rolling_max_value = value\n    else\n      if value > rolling_max_value\
    \ then\n        rolling_max_time = value\n        rolling_max_index = i\n    \
    \    rolling_max_value = value\n      else\n        rolling_max_time = rolling_max_time\
    \ + value\n      end\n    end\n  end\n  return rolling_max_index, rolling_max_time,\
    \ rolling_max_value\nend", "  local rolling_max = nil\n  local max_value = nil\n\
    \  for i = 1, #numbers do\n    if max_value == nil then\n      max_value = numbers[i]\n\
    \      rolling_max = numbers[i]\n    else\n      if numbers[i] > max_value then\n\
    \        max_value = numbers[i]\n        rolling_max = numbers[i]\n      else\n\
    \        rolling_max = rolling_max .. \", \" .. numbers[i]\n      end\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      rolling_max\
    \ = math.max(rolling_max, numbers[i])\n      rolling_max_index = i\n    else\n\
    \      rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n  end\n\
    \  return rolling_max, rolling_max_index\nend", "  local rolling_max = nil\n \
    \ local rolling_max_index = 0\n  local rolling_max_value = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max_value == nil then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    else\n      if numbers[i] > rolling_max_value\
    \ then\n        rolling_max_value = numbers[i]\n        rolling_max_index = i\n\
    \      end\n    end\n  end\n  if rolling_max_value == nil then\n    rolling_max_value\
    \ = numbers[#numbers]\n    rolling_max_index = #numbers\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend", "  local rolling_max = nil\n  for i = 1, #numbers do\n\
    \    local rolling_max_element = numbers[i]\n    for j = 1, i do\n      rolling_max_element\
    \ = rolling_max_element > numbers[j] and rolling_max_element or numbers[j]\n \
    \   end\n    rolling_max = rolling_max and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_index = i - 1\n    if\
    \ rolling_max ~= nil then\n      if rolling_max_index > rolling_max_index then\n\
    \        rolling_max = numbers[rolling_max_index]\n      else\n        rolling_max\
    \ = numbers[i]\n      end\n    else\n      rolling_max = numbers[i]\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_i = numbers[i]\n    for j = 1, i do\n      rolling_max_i\
    \ = rolling_max_i or numbers[j]\n    end\n    rolling_max = rolling_max or rolling_max_i\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_element = numbers[i]\n    for j = 1, i do\n      rolling_max_element\
    \ = rolling_max_element > numbers[j] and rolling_max_element or numbers[j]\n \
    \   end\n    rolling_max = rolling_max and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] < rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_time\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \      rolling_max_time = i\n    else\n      if rolling_max_value < value then\n\
    \        rolling_max_value = value\n        rolling_max_index = i\n        rolling_max_time\
    \ = i\n      end\n    end\n  end\n  return rolling_max_index, rolling_max_value,\
    \ rolling_max_time\nend", "  local rolling_max = nil\n  for i = 1, #numbers do\n\
    \    local rolling_max_element = numbers[i]\n    for j = 1, i do\n      rolling_max_element\
    \ = rolling_max_element > numbers[j] and rolling_max_element or numbers[j]\n \
    \   end\n    rolling_max = rolling_max and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n        rolling_max_value = nil\n  \
    \    end\n    end\n    if rolling_max ~= nil then\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n      rolling_max_value = numbers[i]\n    else\n\
    \      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end", "  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  table.insert(rolling_max,\
    \ rolling_max_index)\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    else\n      rolling_max_value = rolling_max_value .. \", \" .. numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max = numbers[i]\n    for\
    \ j = 1, #numbers do\n      if numbers[j] >= rolling_max then\n        rolling_max\
    \ = numbers[j]\n      end\n    end\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers do\n  \
    \  local rolling_max_element = numbers[i]\n    for j = i - 1, i - 1, -1 do\n \
    \     local rolling_max_element = rolling_max_element > numbers[j] and rolling_max_element\
    \ or numbers[j]\n    end\n    rolling_max = rolling_max and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local rolling_max_element = numbers[i]\n    for j = 1, #numbers do\n\
    \      if numbers[j] < rolling_max_element then\n        rolling_max_element =\
    \ numbers[j]\n      end\n    end\n    table.insert(rolling_max, rolling_max_element)\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  local rolling_max_index\
    \ = 1\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] < rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  table.insert(rolling_max, rolling_max_value)\n\
    \  table.insert(rolling_max, rolling_max_index)\n  return rolling_max\nend", " \
    \ local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      local rolling_max_j = numbers[j]\n    \
    \  if rolling_max_i > rolling_max_j then\n        rolling_max = rolling_max_i\n\
    \      else\n        rolling_max = rolling_max_j\n      end\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    local\
    \ value = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_index = i\n    else\n      if value > rolling_max_value\
    \ then\n        rolling_max_value = value\n        rolling_max_index = i\n   \
    \   end\n    end\n  end\n  return rolling_max_index, rolling_max_value\nend",
  "  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, #numbers do\n      if j > i then\n        local\
    \ rolling_max_element = rolling_max_element > numbers[j] and\n          rolling_max_element\
    \ or numbers[j]\n      end\n    end\n    rolling_max = rolling_max and rolling_max\
    \ or rolling_max_element\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      rolling_max_index = i - 1\n      rolling_max = numbers[rolling_max_index]\n\
    \    else\n      rolling_max = numbers[i]\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_time = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_time\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_time = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n\
    \    if rolling_max ~= nil then\n      if rolling_max_time < value then\n    \
    \    rolling_max_time = value\n        rolling_max_index = i\n      end\n    \
    \  if rolling_max_time == value then\n        rolling_max_value = rolling_max\n\
    \        rolling_max_index = i\n      end\n    else\n      rolling_max = value\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max_index, rolling_max_value\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  return\
    \ rolling_max_index, rolling_max_value\nend", "  local rolling_max = nil\n  for\
    \ i = 1, #numbers do\n    local rolling_max_i = nil\n    for j = 1, i do\n   \
    \   local rolling_max_j = numbers[j]:max()\n      if rolling_max_j == nil then\n\
    \        rolling_max_j = numbers[j]:min()\n      end\n      if rolling_max_i ==\
    \ nil then\n        rolling_max_i = rolling_max_j\n      else\n        if rolling_max_i\
    \ > rolling_max_j then\n          rolling_max_i = rolling_max_j\n        end\n\
    \      end\n    end\n    if rolling_max == nil then\n      rolling_max = rolling_max_i\n\
    \    else\n      if rolling_max > rolling_max_i then\n        rolling_max = rolling_max_i\n\
    \      end\n    end\n  end\n  return rolling_max\nend", "  local rolling_max =\
    \ nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_time = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n\
    \    if rolling_max_value == nil then\n      rolling_max_value = value\n     \
    \ rolling_max_time = i\n      rolling_max_index = i\n    else\n      if value\
    \ > rolling_max_value then\n        rolling_max_value = value\n        rolling_max_time\
    \ = i\n        rolling_max_index = i\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value, rolling_max_time\nend", "  local rolling_max = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers\
    \ do\n    local value = numbers[i]\n    if rolling_max ~= nil then\n      if value\
    \ > rolling_max_value then\n        rolling_max = rolling_max_value\n        rolling_max_index\
    \ = rolling_max_index + 1\n      else\n        rolling_max = rolling_max\n   \
    \     rolling_max_index = rolling_max_index\n      end\n    else\n      rolling_max\
    \ = value\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_time = nil", " \
    \ local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = 0\n  local rolling_max_count = 0\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_count = i + 1\n    end\n  end\n  rolling_max[rolling_max_count]\
    \ = rolling_max_value\n  for i = 1, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \    rolling_max_count = i + 1\n    end\n  end\n  return rolling_max\nend", " \
    \ local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_element)\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] > rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = {}\n\
    \  local rolling_max_index = 0\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    if rolling_max_index == 0 then\n      rolling_max[1] = rolling_max_element\n\
    \    else\n      rolling_max[rolling_max_index] = rolling_max_element\n    end\n\
    \    rolling_max_index = rolling_max_index + 1\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      if numbers[j] > max_value\
    \ then\n        max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for\
    \ j = 1, i do\n      rolling_max_element = rolling_max_element > numbers[j] and\
    \ rolling_max_element or numbers[j]\n    end\n    rolling_max = rolling_max and\
    \ rolling_max > rolling_max_element and rolling_max or rolling_max_element\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_element = numbers[i]\n    for j = 1, i do\n      rolling_max_element\
    \ = rolling_max_element > numbers[j] and rolling_max_element or numbers[j]\n \
    \   end\n    rolling_max = rolling_max and rolling_max > rolling_max_element and\
    \ rolling_max or rolling_max_element\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element =\
    \ numbers[i]\n    for j = 1, i do\n      rolling_max_element = math.max(rolling_max_element,\
    \ numbers[j])\n    end\n    if rolling_max ~= nil then\n      rolling_max = math.max(rolling_max,\
    \ rolling_max_element)\n    else\n      rolling_max = rolling_max_element\n  \
    \  end\n  end\n  return rolling_max\nend", "  local rolling_max = {}\n  local\
    \ rolling_max_index = 1\n  local rolling_max_value = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] < rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = {}\n\
    \  for i = 1, #numbers do\n    local max_value = numbers[i]\n    for j = 1, i\
    \ do\n      max_value = math.max(max_value, numbers[j])\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = nil\n  local rolling_max_time\
    \ = nil\n  for i = 1, #numbers do\n    if numbers[i] ~= rolling_max_value then\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_index = i\n      rolling_max_time\
    \ = i\n    end\n  end\n  while rolling_max_time < #numbers do\n    rolling_max_time\
    \ = rolling_max_time + 1\n    rolling_max_value = numbers[rolling_max_time]\n\
    \    for i = rolling_max_time + 1, #numbers do\n      if numbers[i] ~= rolling_max_value\
    \ then\n        rolling_max_value = numbers[i]\n        rolling_max_index = i\n\
    \        rolling_max_time = i\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend", "  local rolling_max = nil\n  local max_element = nil\n\
    \  local max_element_index = nil\n  for i = 1, #numbers do\n    if max_element\
    \ == nil then\n      max_element = numbers[i]\n      max_element_index = i\n \
    \   else\n      if numbers[i] > max_element then\n        max_element = numbers[i]\n\
    \        max_element_index = i\n      end\n    end\n  end\n  if max_element ~=\
    \ nil then\n    rolling_max = max_element\n  end\n  return rolling_max, max_element_index\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1,\
    \ #numbers do\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ > numbers[i] and rolling_max or numbers[i]\n      rolling_max_index = i\n  \
    \  else\n      rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max =\
    \ nil\n  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n\
    \    for j = 1, i do\n      rolling_max_element = rolling_max_element > numbers[j]\
    \ and rolling_max_element or numbers[j]\n    end\n    rolling_max = rolling_max\
    \ and rolling_max or rolling_max_element\n  end\n  return rolling_max\nend", " \
    \ local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = numbers[i]\n      rolling_max_index =\
    \ i\n    else\n      if rolling_max_value < numbers[i] then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    end\n  end\n  if\
    \ rolling_max_value ~= nil then\n    rolling_max = rolling_max_value\n    rolling_max_index\
    \ = rolling_max_index\n  end\n  return rolling_max, rolling_max_index\nend", " \
    \ local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    rolling_max_value = numbers[#numbers]\n    rolling_max_index\
    \ = #numbers\n  end\n  return rolling_max_index, rolling_max_value\nend", "  local\
    \ rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max\
    \ ~= nil then\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    else\n      rolling_max\
    \ = value\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = {}\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] < rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  for i = 1, #numbers do\n    local rolling_max_i = nil\n    for j = 1, i do\n\
    \      rolling_max_i = rolling_max_i or numbers[j]\n      if rolling_max_i > numbers[j]\
    \ then\n        rolling_max_i = numbers[j]\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_i\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i -\
    \ 1\n        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max_index\
    \ = i - 1\n      rolling_max_value = numbers[i]\n    end\n    if rolling_max ~=\
    \ nil then\n      rolling_max = rolling_max > rolling_max_value ? rolling_max\
    \ : rolling_max_value\n    else\n      rolling_max = rolling_max_value\n    end\n\
    \  end\n  return rolling_max, rolling_max_index, rolling_max_value\nend", "  local\
    \ rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      local rolling_max_j = numbers[j]\n    \
    \  if rolling_max_i > rolling_max_j then\n        rolling_max = rolling_max_i\n\
    \      else\n        rolling_max = rolling_max_j\n      end\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max = numbers[rolling_max_index]\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_i = nil\n    for j = 1, #numbers do\n      if j ==\
    \ i then\n        rolling_max_i = numbers[j]\n      else\n        rolling_max_i\
    \ = rolling_max_i or numbers[j]\n      end\n    end\n    rolling_max = rolling_max\
    \ or rolling_max_i\n  end\n  return rolling_max\nend", "  local rolling_max =\
    \ {}\n  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] >= rolling_max_value then\n     \
    \ rolling_max[rolling_max_index] = numbers[i]\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    else\n      rolling_max_value = rolling_max_value\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_index = i - 1\n    local\
    \ rolling_max_value = numbers[rolling_max_index]\n    if rolling_max ~= nil then\n\
    \      if rolling_max_value > rolling_max then\n        rolling_max = rolling_max_value\n\
    \        rolling_max_index = rolling_max_index\n      end\n    else\n      rolling_max\
    \ = rolling_max_value\n      rolling_max_index = rolling_max_index\n    end\n\
    \  end\n  return rolling_max_index\nend", "  local rolling_max = nil\n  local\
    \ rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_index == i then\n        rolling_max = numbers[i]\n\
    \      else\n        rolling_max = rolling_max > numbers[i] and rolling_max or\
    \ numbers[i]\n      end\n    else\n      rolling_max = numbers[i]\n    end\n \
    \   rolling_max_index = i\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = {}\n  local rolling_max_index = 0\n  local rolling_max_value = 0\n  for i\
    \ = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value < value\
    \ then\n      rolling_max_value = value\n      rolling_max_index = i\n    end\n\
    \  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1,\
    \ #numbers do\n    local rolling_max_index = i - 1\n    if rolling_max_index ==\
    \ 0 then\n      rolling_max = numbers[i]\n    else\n      rolling_max = math.max(rolling_max,\
    \ numbers[i])\n    end\n  end\n  return rolling_max, rolling_max_index\nend",
  "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] > rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_time = nil", " \
    \ local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index > 0 then\n    rolling_max = table.concat(numbers,\
    \ rolling_max_index)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  if rolling_max_index\
    \ > 0 then\n    rolling_max = table.concat(numbers, rolling_max_index)\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local max_value = nil\n\
    \  local max_index = nil\n  for i = 1, #numbers do\n    if max_value == nil then\n\
    \      max_value = numbers[i]\n      max_index = i\n    else\n      if numbers[i]\
    \ > max_value then\n        max_value = numbers[i]\n        max_index = i\n  \
    \    end\n    end\n  end\n  if max_value ~= nil then\n    rolling_max = max_index\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= nil then\n        if rolling_max_value\
    \ <= numbers[i] then\n          rolling_max = nil\n          rolling_max_index\
    \ = nil\n          rolling_max_value = nil\n        else\n          rolling_max_value\
    \ = rolling_max_value\n        end\n      else\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    else\n      rolling_max_value =\
    \ numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value\nend", "  local rolling_max = nil\n  for\
    \ i = 1, #numbers do\n    local rolling_max_i = numbers[i]\n    for j = i + 1,\
    \ #numbers do\n      local rolling_max_j = numbers[j]\n      if rolling_max_i\
    \ > rolling_max_j then\n        rolling_max = rolling_max_i\n      else\n    \
    \    rolling_max = rolling_max_j\n      end\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = 0\n  for i = 1,\
    \ #numbers do\n    if rolling_max ~= nil then\n      if numbers[i] > rolling_max\
    \ then\n        rolling_max = numbers[i]\n        rolling_max_index = i\n    \
    \  end\n    else\n      rolling_max = numbers[i]\n      rolling_max_index = i\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  if rolling_max_index\
    \ > 0 then\n    rolling_max = table.concat(numbers, rolling_max_index)\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max = numbers[i]\n    for j = i + 1, #numbers do\n   \
    \   rolling_max = math.max(rolling_max, numbers[j])\n    end\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index = nil\n\
    \  for i = 1, #numbers do\n    local rolling_max_index = i\n    if rolling_max\
    \ ~= nil then\n      if rolling_max[1] < numbers[i] then\n        rolling_max\
    \ = numbers, rolling_max_index\n      end\n    else\n      rolling_max = numbers,\
    \ rolling_max_index\n    end\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    local\
    \ rolling_max_index = i - 1\n    local rolling_max_value = numbers[rolling_max_index]\n\
    \    if rolling_max ~= nil then\n      if rolling_max_value > rolling_max then\n\
    \        rolling_max = rolling_max_value\n        rolling_max_index = rolling_max_index\n\
    \      end\n    else\n      rolling_max = rolling_max_value\n      rolling_max_index\
    \ = rolling_max_index\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_time > numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n        rolling_max_value = nil\n  \
    \      rolling_max_time = nil\n      else\n        rolling_max_time = numbers[i]\n\
    \      end\n    end\n    if rolling_max_time == nil then\n      rolling_max_time\
    \ = numbers[i]\n    end\n    if rolling_max ~= nil then\n      if rolling_max_time\
    \ < numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n        rolling_max_time = nil\n      else\n\
    \        rolling_max_value = numbers[i]\n        rolling_max_index = i\n     \
    \ end\n    end\n    if rolling_max_time == numbers[i] then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value\nend", "  local rolling_max = nil\n  for\
    \ i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for j =\
    \ i + 1, #numbers do\n      if numbers[j] > rolling_max_element then\n       \
    \ rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max ~=\
    \ nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  ",
  "  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] < rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = {}\n  local rolling_max_index = 1\n  local rolling_max_value = numbers[1]\n\
    \  local rolling_max_time = numbers[1]", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_index = i - 1\n    if\
    \ rolling_max_index == 0 then\n      rolling_max = numbers[i]\n    else\n    \
    \  rolling_max = math.max(rolling_max, numbers[i])\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      rolling_max\
    \ = rolling_max > numbers[i] and rolling_max or numbers[i]\n      rolling_max_index\
    \ = i\n    else\n      rolling_max = numbers[i]\n      rolling_max_index = i\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max\
    \ = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n    for\
    \ j = 1, i do\n      if numbers[j] > max_element then\n        max_element = numbers[j]\n\
    \      end\n    end\n    table.insert(rolling_max, max_element)\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index = nil\n\
    \  local rolling_max_value = nil\n  local rolling_max_time = nil\n  for i = 1,\
    \ #numbers do\n    local value = numbers[i]\n    if rolling_max_value == nil then\n\
    \      rolling_max_value = value\n      rolling_max_index = i\n      rolling_max_time\
    \ = i\n    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n        rolling_max_time = i\n     \
    \ end\n    end\n  end\n  return rolling_max_index, rolling_max_value, rolling_max_time\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1,\
    \ #numbers do\n    local rolling_max_index = i - 1\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_index > rolling_max_index then\n        rolling_max\
    \ = numbers[rolling_max_index]\n      else\n        rolling_max = numbers[i]\n\
    \      end\n    else\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index = nil\n\
    \  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n        rolling_max_value = nil\n  \
    \    end\n    end\n    if rolling_max ~= nil then\n      rolling_max_index = i\n\
    \      rolling_max_value = numbers[i]\n    end\n    if rolling_max ~= nil then\n\
    \      rolling_max = numbers[i]\n    end\n  end\n  return rolling_max_index, rolling_max_value\n\
    end", "  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_i = nil\n    for j =\
    \ 1, i do\n      local rolling_max_j = numbers[j]:max()\n      if rolling_max_j\
    \ > rolling_max_i then\n        rolling_max_i = rolling_max_j\n      end\n   \
    \ end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max .. \",\
    \ \" .. rolling_max_i\n    else\n      rolling_max = rolling_max_i\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_index = i - 1\n    if\
    \ rolling_max_index == 0 then\n      rolling_max = numbers[i]\n    else\n    \
    \  rolling_max = math.max(rolling_max, numbers[i])\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  for\
    \ i = 1, #numbers do\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    else\n      if numbers[i] > rolling_max_value\
    \ then\n        rolling_max_value = numbers[i]\n        rolling_max_index = i\n\
    \      end\n    end\n  end\n  if rolling_max_index == nil then\n    return nil\n\
    \  end\n  rolling_max = rolling_max_value\n  rolling_max_index = rolling_max_index\n\
    \  local rolling_max_index = nil\n  local rolling_max_value = nil\n  for i = 1,\
    \ #numbers do\n    if rolling_max_index == nil then\n      rolling_max_index =\
    \ i\n      rolling_max_value = numbers[i]\n    else\n      if numbers[i] < rolling_max_value\
    \ then\n        rolling_max_index = i\n        rolling_max_value = numbers[i]\n\
    \      end\n    end\n  end\n  return rolling_max, rolling_max_index\nend", " \
    \ local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    rolling_max_value = numbers[#numbers]\n    rolling_max_index\
    \ = #numbers\n  end\n  return rolling_max_index, rolling_max_value\nend", "  local\
    \ rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max_value = rolling_max_value + numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  for\
    \ i = 1, #numbers do\n    if rolling_max ~= nil then\n      rolling_max_index\
    \ = i - 1\n      rolling_max_value = numbers[rolling_max_index]\n    end\n   \
    \ if numbers[i] > rolling_max_value then\n      rolling_max = numbers[i]\n   \
    \   rolling_max_index = i\n    end\n  end\n  return rolling_max_index, rolling_max\n\
    end", "  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      if numbers[j] > max_value\
    \ then\n        max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]", "  local\
    \ rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element =\
    \ numbers[i]\n    for j = 1, i do\n      if numbers[j] > rolling_max_element then\n\
    \        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n    for j\
    \ = 1, i do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \      end\n    end\n    table.insert(rolling_max, max_value)\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index = nil\n\
    \  local rolling_max_value = nil\n  for i = 1, #numbers do\n    local value =\
    \ numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value =\
    \ value\n      rolling_max_index = i\n    else\n      if rolling_max_value > value\
    \ then\n        rolling_max_value = value\n        rolling_max_index = i\n   \
    \   end\n    end\n  end\n  return rolling_max_index, rolling_max_value\nend",
  "  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = math.max(rolling_max_element,\
    \ numbers[j])\n    end\n    table.insert(rolling_max, rolling_max_element)\n \
    \ end\n  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_value = numbers[i]\n    for j = i - 1, -1, -1 do\n\
    \      rolling_max_value = math.max(rolling_max_value, numbers[j])\n    end\n\
    \    if rolling_max ~= nil then\n      rolling_max = math.max(rolling_max, rolling_max_value)\n\
    \    else\n      rolling_max = rolling_max_value\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_time > numbers[i] then\n        rolling_max_time\
    \ = numbers[i]\n        rolling_max_index = i\n        rolling_max_value = rolling_max\n\
    \      else\n        rolling_max = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max_index, rolling_max_value,\
    \ rolling_max_time\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_index = i - 1\n    local\
    \ rolling_max_value = numbers[i]\n    for j = i - 1, i - 2, -1 do\n      local\
    \ rolling_max_value = numbers[j] and rolling_max_value and rolling_max_value >\
    \ numbers[j] or numbers[j]\n      rolling_max_index = j\n    end\n    if rolling_max\
    \ then\n      rolling_max = rolling_max > rolling_max_value and rolling_max or\
    \ rolling_max_value\n    else\n      rolling_max = rolling_max_value\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_index = i - 1\n    if\
    \ rolling_max_index > 0 then\n      rolling_max = numbers[rolling_max_index]\n\
    \    end\n    if rolling_max_index > 0 and numbers[rolling_max_index] > rolling_max\
    \ then\n      rolling_max = numbers[rolling_max_index]\n    end\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index = nil\n\
    \  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_index\
    \ ~= nil then\n        rolling_max = rolling_max\n      else\n        rolling_max\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  ",
  "  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_i = nil\n    for j =\
    \ 1, i do\n      rolling_max_i = rolling_max_i or numbers[j]\n      if rolling_max_i\
    \ > numbers[i] then\n        rolling_max_i = numbers[i]\n      end\n    end\n\
    \    if rolling_max ~= nil then\n      rolling_max = rolling_max or rolling_max_i\n\
    \    else\n      rolling_max = rolling_max_i\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  ", "  local rolling_max = nil\n  local\
    \ rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil\
    \ then\n      rolling_max_index = i - 1\n      rolling_max = numbers[rolling_max_index]\n\
    \    else\n      rolling_max = numbers[i]\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend", "  local rolling_max = nil\n  for i = 1, #numbers do\n\
    \    local rolling_max_element = numbers[i]\n    for j = 1, i do\n      rolling_max_element\
    \ = rolling_max_element > numbers[j] and rolling_max_element or numbers[j]\n \
    \   end\n    rolling_max = rolling_max and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]", "  local rolling_max = nil\n \
    \ local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > numbers[i] and rolling_max or\
    \ numbers[i]\n      rolling_max_index = i\n    else\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end", "  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max = numbers[rolling_max_index]\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index = 0\n\
    \  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ >= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  if rolling_max_index > 0 then\n    rolling_max = table.concat(numbers,\
    \ rolling_max_index)\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n\
    \    for j = i - 1, i - 1, -1 do\n      if numbers[j] > rolling_max_element then\n\
    \        rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max = numbers[i]\n     \
    \ rolling_max_index = i\n      rolling_max_value = numbers[i]\n    else\n    \
    \  rolling_max_value = rolling_max_value + numbers[i]\n    end\n  end\n  return\
    \ rolling_max, rolling_max_index\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    local rolling_max_index = i\n    local\
    \ rolling_max_value = numbers[i]\n    for j = i + 1, #numbers do\n      if numbers[j]\
    \ > rolling_max_value then\n        rolling_max_index = j\n        rolling_max_value\
    \ = numbers[j]\n      end\n    end\n    if rolling_max ~= nil then\n      rolling_max\
    \ = rolling_max .. \", \" .. rolling_max_value\n    else\n      rolling_max =\
    \ rolling_max_value\n    end\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  ", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    else\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend", "  local rolling_max = {}\n  local rolling_max_index\
    \ = 0\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max[rolling_max_index] = numbers[i]\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      rolling_max\
    \ = math.max(rolling_max, numbers[i])\n      rolling_max_index = i\n    else\n\
    \      rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n  end\n\
    \  return rolling_max, rolling_max_index\nend", "  local rolling_max = nil\n \
    \ for i = 1, #numbers do\n    local rolling_max_i = rolling_max or numbers[i]\n\
    \    if rolling_max_i < numbers[i] then\n      rolling_max = numbers[i]\n    end\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_element = numbers[i]\n    for j = 1, i do\n      rolling_max_element\
    \ = math.max(rolling_max_element, numbers[j])\n    end\n    rolling_max = rolling_max_element\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local max_value = numbers[i]\n    for j = 1, i do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  for i = 1, #numbers do\n    local rolling_max_i = nil\n    for j = 1, i do\n\
    \      rolling_max_i = rolling_max_i or numbers[j]\n      if rolling_max_i > numbers[j]\
    \ then\n        rolling_max_i = numbers[j]\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_i\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max = numbers[i]\n\
    \    for j = 1, i do\n      rolling_max = math.max(rolling_max, numbers[j])\n\
    \    end\n  end\n  return rolling_max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
