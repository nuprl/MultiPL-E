language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwszrann.lua:14:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpzwszrann.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] < rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5y85ly3.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpm5y85ly3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5iw9cwz.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpp5iw9cwz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5iw9cwz.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpp5iw9cwz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      rolling_max_i = rolling_max_i or numbers[j]\n\
    \      if rolling_max_i > numbers[j] then\n        rolling_max_i = numbers[j]\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ or rolling_max_i\n    else\n      rolling_max = rolling_max_i\n    end\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8vfup6z.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpd8vfup6z.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_index = i\n      rolling_max_time = i\n    else\n\
    \      if rolling_max_value < value then\n        rolling_max_value = value\n\
    \        rolling_max_index = i\n        rolling_max_time = i\n      end\n    end\n\
    \  end\n  return rolling_max_index, rolling_max_value, rolling_max_time\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gt_hf_h.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2gt_hf_h.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] < rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5y85ly3.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpm5y85ly3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max = rolling_max\n\
    \      end\n    end\n    if rolling_max_index ~= nil then\n      rolling_max =\
    \ rolling_max\n    else\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwha6486.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpqwha6486.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_element\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcv_uffa.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmptcv_uffa.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwszrann.lua:14:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpzwszrann.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_index ~= nil then\n\
    \        rolling_max = rolling_max and rolling_max > numbers[i] and numbers[i]\n\
    \        rolling_max_index = rolling_max_index and rolling_max_index > i\n   \
    \   else\n        rolling_max = numbers[i]\n        rolling_max_index = i\n  \
    \    end\n    else\n      rolling_max = numbers[i]\n      rolling_max_index =\
    \ i\n    end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd66lrskk.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpd66lrskk.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0a53_muq.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0a53_muq.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp0a53_muq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max\
    \ ~= nil then\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    else\n      rolling_max\
    \ = value\n      rolling_max_index = i\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1drkrhwx.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1drkrhwx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] > rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    rolling_max_value = numbers[#numbers]\n    rolling_max_index\
    \ = #numbers\n  end\n  return rolling_max_index, rolling_max_value\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgfde2n_.lua:28:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmptgfde2n_.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  table.insert(rolling_max,\
    \ numbers[rolling_max_index])\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb2joafe.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpfb2joafe.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = i - 1, -1, -1 do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4b_gf7cq.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4b_gf7cq.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp4b_gf7cq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppj3sm1u9.lua:79: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max ~= nil then\n  \
    \    rolling_max = rolling_max > numbers[rolling_max_index] and rolling_max or\
    \ numbers[rolling_max_index]\n    else\n      rolling_max = numbers[rolling_max_index]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ym3leld.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp7ym3leld.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  table.insert(rolling_max,\
    \ rolling_max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3eqgckde.lua:21:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmp3eqgckde.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = 0\n  for i = 1, #numbers do\n    if numbers[i] <= rolling_max_value then\n\
    \      rolling_max[rolling_max_index] = numbers[i]\n      rolling_max_index =\
    \ rolling_max_index + 1\n      rolling_max_value = numbers[i]\n    else\n    \
    \  rolling_max_value = rolling_max_value\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1c3iridx.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp1c3iridx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_index == i then\n \
    \       rolling_max = numbers[i]\n      else\n        rolling_max = numbers[i]\
    \ and rolling_max or numbers[i]\n      end\n    else\n      rolling_max = numbers[i]\n\
    \    end\n    rolling_max_index = i\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50n8kf8c.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp50n8kf8c.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ ~= nil then\n    rolling_max = rolling_max_value\n    rolling_max_index = rolling_max_index\n\
    \  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1frtg0m.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpu1frtg0m.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max =\
    \ numbers[i]\n    for j = i + 1, #numbers do\n      rolling_max = math.max(rolling_max,\
    \ numbers[j])\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfexipim.lua:17:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkfexipim.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      local current_value = numbers[j]\n      if current_value\
    \ > max_value then\n        max_value = current_value\n      end\n    end\n  \
    \  table.insert(rolling_max, max_value)\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y2oa3p5.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmp2y2oa3p5.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max_index = i - 1\n      rolling_max\
    \ = numbers[rolling_max_index]\n    else\n      rolling_max = numbers[i]\n   \
    \ end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplujukpp7.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmplujukpp7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value > numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    return nil\n  end\n  local rolling_max_index = rolling_max_index\
    \ + 1\n  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local rolling_max_value = rolling_max_value - 1\n  local rolling_max_value\
    \ = rolling_max_value - 1\n  local rolling_max_value = rolling_max_value - 1\n\
    \  local roll\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx8y15_5i.lua:66: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max = nil\n\
    \        rolling_max_index = nil\n        rolling_max_value = nil\n      end\n\
    \    end\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      end\n    end\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max = nil\n\
    \        rolling_max_index = nil\n        rolling_max_value = nil\n      end\n\
    \    end\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      end\n    end\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max = nil\n\
    \        rolling_max_index = nil\n        rolling_max_value = nil\n      end\n\
    \    end\n    if rolling_max ~= nil then\n      if rolling_max_value ~= numbers[i]\
    \ then\n        rolling_max = nil\n        rolling_max_index = nil\n        rolling_max_value\
    \ = nil\n      end\n    end\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_value ~= numbers[i] then\n        \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwxobpdl0.lua:91: ''end'' expected (to close ''if'' at line
    79) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqrnt9g9.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpwqrnt9g9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_time < numbers[i] then\n        rolling_max_time\
    \ = numbers[i]\n        rolling_max_index = i\n        rolling_max_value = rolling_max\n\
    \      elseif rolling_max_time == numbers[i] then\n        rolling_max_value =\
    \ rolling_max_value or rolling_max\n      else\n        rolling_max = rolling_max_value\
    \ or rolling_max\n        rolling_max_time = numbers[i]\n        rolling_max_index\
    \ = i\n      end\n    else\n      rolling_max = numbers[i]\n      rolling_max_time\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = rolling_max\n\
    \    end\n  end\n  return rolling_max_index, rolling_max_value, rolling_max_time\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_hk8yv9.lua:34:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1_hk8yv9.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index == 0 then\n    rolling_max = rolling_max_value\n\
    \  else\n    rolling_max = numbers[rolling_max_index]\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33uwtx51.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp33uwtx51.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1f0ubbw.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmp_1f0ubbw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= nil then\n        if value > rolling_max_value\
    \ then\n          rolling_max = nil\n          rolling_max_index = nil\n     \
    \     rolling_max_value = nil\n        else\n          rolling_max = rolling_max\n\
    \          rolling_max_index = i\n          rolling_max_value = value\n      \
    \  end\n      else\n        rolling_max = value\n        rolling_max_index = i\n\
    \        rolling_max_value = value\n      end\n    else\n      rolling_max = value\n\
    \      rolling_max_index = i\n      rolling_max_value = value\n    end\n  end\n\
    \  return rolling_max, rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74up49_.lua:37:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpn74up49_.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_element\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkc550z3o.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkc550z3o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max =\
    \ numbers[i]\n    for j = 1, i do\n      rolling_max = math.max(rolling_max, numbers[j])\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjm2hvyi.lua:17:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpbjm2hvyi.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      max_value = math.max(max_value, numbers[j])\n    end\n\
    \    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] < rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ ~= nil then\n    rolling_max = rolling_max_index\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e8yjp5w.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5e8yjp5w.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxx9jpvgk.lua:18: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max = rolling_max\
    \ > numbers[i] and rolling_max or numbers[i]\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl44olb3.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpsl44olb3.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      local rolling_max_element_other\
    \ = numbers[j]\n      if rolling_max_element > rolling_max_element_other then\n\
    \        rolling_max = rolling_max_element\n      else\n        rolling_max =\
    \ rolling_max_element_other\n      end\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__9mvsjb.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp__9mvsjb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      local rolling_max_element_2\
    \ = numbers[j]\n      if rolling_max_element < rolling_max_element_2 then\n  \
    \      rolling_max_element = rolling_max_element_2\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_element\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_c9t63c.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmps_c9t63c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  return\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w60wwpl.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2w60wwpl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, #numbers do\n      if numbers[j] < numbers[i] then\n \
    \       rolling_max_i = numbers[j]\n      end\n    end\n    if rolling_max ~=\
    \ nil then\n      rolling_max = rolling_max > rolling_max_i ? rolling_max : rolling_max_i\n\
    \    else\n      rolling_max = rolling_max_i\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmivx7ilj.lua:13: unexpected symbol near ''?''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_element then\n    \
    \    max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ez0jjqr.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmp0ez0jjqr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = 0\n  for i = 1, #numbers do\n    if numbers[i] > rolling_max_value then\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2_ph1_t.lua:20:\
    \ expected: {}\nactual: {0=0}\nstack traceback:\n\t/tmp/tmpl2_ph1_t.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = nil\n  local rolling_max_time = nil\n\
    \  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n     \
    \ rolling_max_value = numbers[i]\n      rolling_max_time = i\n    end\n  end\n\
    \  if rolling_max_time ~= nil then\n    rolling_max = numbers[rolling_max_time]\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2eqkpqi.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpn2eqkpqi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_index ~= nil then\n\
    \        rolling_max = rolling_max and rolling_max > numbers[rolling_max_index]\n\
    \      else\n        rolling_max = numbers[rolling_max_index]\n      end\n   \
    \ end\n    rolling_max_index = i\n    rolling_max = numbers[rolling_max_index]\
    \ and rolling_max or numbers[rolling_max_index - 1]\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfuxqr4e.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprfuxqr4e.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max_index = i - 1\n      rolling_max\
    \ = numbers[rolling_max_index]\n    else\n      rolling_max = numbers[i]\n   \
    \ end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplujukpp7.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmplujukpp7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      local rolling_max_j = numbers[j]:max()\n \
    \     if rolling_max_j > rolling_max_i then\n        rolling_max_i = rolling_max_j\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ > rolling_max_i ? rolling_max : rolling_max_i\n    else\n      rolling_max =\
    \ rolling_max_i\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplbmn7s8m.lua:14: unexpected symbol near ''?''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i\n    if rolling_max ~= nil then\n      if\
    \ rolling_max_index > rolling_max_index then\n        rolling_max = numbers[rolling_max_index]\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ > numbers[i] and rolling_max or numbers[i]\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7seonvf0.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp7seonvf0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max_value = rolling_max_value + numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitidirj2.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpitidirj2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp132g3wno.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp132g3wno.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max = rolling_max > numbers[i]\
    \ and rolling_max or numbers[i]\n      rolling_max_index = i\n    else\n     \
    \ rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return\
    \ rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1efy9imu.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1efy9imu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxx9jpvgk.lua:18: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ ~= nil then\n    rolling_max = rolling_max_value\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpvb8x4l.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpfpvb8x4l.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if numbers[i] ~= rolling_max_value then\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvjestuv.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmphvjestuv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppj3sm1u9.lua:79: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  return\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m119qc2.lua:25:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp2m119qc2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max =\
    \ numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] < rolling_max then\n\
    \        rolling_max = numbers[j]\n      end\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcemzud8h.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpcemzud8h.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = nil\n  for i = 2, #numbers do\n   \
    \ if numbers[i] ~= rolling_max_value then\n      rolling_max = numbers[i]\n  \
    \    rolling_max_index = i\n      rolling_max_value = numbers[i]\n      rolling_max_time\
    \ = nil\n    else\n      rolling_max_time = math.max(rolling_max_time, numbers[i])\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value, rolling_max_time\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf329a0pp.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpf329a0pp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_number = nil\n  local max_index = nil\n\
    \  local max_value = nil\n  for i = 1, #numbers do\n    if max_number == nil then\n\
    \      max_number = numbers[i]\n      max_index = i\n      max_value = numbers[i]\n\
    \    else\n      if numbers[i] > max_number then\n        max_number = numbers[i]\n\
    \        max_index = i\n        max_value = numbers[i]\n      else\n        max_number\
    \ = max_number * max_index + numbers[i]\n      end\n    end\n  end\n  if max_number\
    \ ~= nil then\n    rolling_max = max_number\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjq3gorrv.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjq3gorrv.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max_time\
    \ == nil then\n      rolling_max_time = numbers[i]\n      rolling_max_index =\
    \ i\n      rolling_max_value = numbers[i]\n    else\n      if numbers[i] < rolling_max_value\
    \ then\n        rolling_max_time = numbers[i]\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      else\n        rolling_max_time\
    \ = rolling_max_time + numbers[i]\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_time, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox4jgjsa.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpox4jgjsa.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_element\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkc550z3o.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkc550z3o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] > rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_index\
    \ ~= nil then\n    rolling_max = table.concat(numbers, rolling_max_index)\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm6h7do0.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpbm6h7do0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_number = nil\n  local max_index = nil\n\
    \  for i = 1, #numbers do\n    if max_number == nil then\n      max_number = numbers[i]\n\
    \      max_index = i\n    else\n      if numbers[i] > max_number then\n      \
    \  max_number = numbers[i]\n        max_index = i\n      end\n    end\n  end\n\
    \  if max_number ~= nil then\n    rolling_max = max_number\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7jw7pxk.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_7jw7pxk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg10_c0fa.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpg10_c0fa.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjqg7v0c9.lua:17: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  for i = 1, #numbers do\n\
    \    if max_value == nil then\n      max_value = numbers[i]\n      rolling_max\
    \ = numbers[i]\n    else\n      if numbers[i] > max_value then\n        max_value\
    \ = numbers[i]\n        rolling_max = numbers[i]\n      else\n        rolling_max\
    \ = rolling_max .. \", \" .. numbers[i]\n      end\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd_fmswi.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdd_fmswi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max\
    \ ~= nil then\n      if value > rolling_max_value then\n        rolling_max =\
    \ rolling_max_value\n        rolling_max_index = rolling_max_index + 1\n     \
    \ else\n        rolling_max = value\n        rolling_max_index = i + 1\n     \
    \ end\n    else\n      rolling_max = value\n      rolling_max_index = i + 1\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj28efk7x.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpj28efk7x.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max = math.max(rolling_max,\
    \ numbers[i])\n      rolling_max_index = i\n    else\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yi1druv.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5yi1druv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if rolling_max_time == nil then\n      rolling_max_time =\
    \ value\n      rolling_max_index = i\n      rolling_max_value = value\n    else\n\
    \      if value > rolling_max_value then\n        rolling_max_time = value\n \
    \       rolling_max_index = i\n        rolling_max_value = value\n      else\n\
    \        rolling_max_time = rolling_max_time + value\n      end\n    end\n  end\n\
    \  return rolling_max_index, rolling_max_time, rolling_max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt86ihy5.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmppt86ihy5.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  for i = 1, #numbers do\n\
    \    if max_value == nil then\n      max_value = numbers[i]\n      rolling_max\
    \ = numbers[i]\n    else\n      if numbers[i] > max_value then\n        max_value\
    \ = numbers[i]\n        rolling_max = numbers[i]\n      else\n        rolling_max\
    \ = rolling_max .. \", \" .. numbers[i]\n      end\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd_fmswi.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdd_fmswi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max = math.max(rolling_max,\
    \ numbers[i])\n      rolling_max_index = i\n    else\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yi1druv.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5yi1druv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] > rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    rolling_max_value = numbers[#numbers]\n    rolling_max_index\
    \ = #numbers\n  end\n  return rolling_max_index, rolling_max_value\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozbfsusu.lua:28:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpozbfsusu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max ~= nil then\n  \
    \    if rolling_max_index > rolling_max_index then\n        rolling_max = numbers[rolling_max_index]\n\
    \      else\n        rolling_max = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdabbw5bv.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdabbw5bv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_i = rolling_max_i or numbers[j]\n\
    \    end\n    rolling_max = rolling_max or rolling_max_i\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pp0bsax.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1pp0bsax.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lu9nbjs.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmp_lu9nbjs.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_index = i\n      rolling_max_time = i\n    else\n\
    \      if rolling_max_value < value then\n        rolling_max_value = value\n\
    \        rolling_max_index = i\n        rolling_max_time = i\n      end\n    end\n\
    \  end\n  return rolling_max_index, rolling_max_value, rolling_max_time\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gt_hf_h.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2gt_hf_h.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = numbers[i]\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis40kpzv.lua:31:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpis40kpzv.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  table.insert(rolling_max,\
    \ rolling_max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfp5_9hc.lua:21:\
    \ expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmppfp5_9hc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max_value = rolling_max_value .. \", \"\
    \ .. numbers[i]\n    end\n  end\n  return rolling_max, rolling_max_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxdxj_47.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmptxdxj_47.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max =\
    \ numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] >= rolling_max then\n\
    \        rolling_max = numbers[j]\n      end\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbfprsyb.lua:19:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmplbfprsyb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1uuri9j.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmpl1uuri9j.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      local rolling_max_element\
    \ = rolling_max_element > numbers[j] and rolling_max_element or numbers[j]\n \
    \   end\n    rolling_max = rolling_max and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n543an_.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp8n543an_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] < rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5y85ly3.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpm5y85ly3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  table.insert(rolling_max,\
    \ rolling_max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyrvno3d.lua:21:\
    \ expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmpdyrvno3d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwszrann.lua:14:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpzwszrann.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      local rolling_max_j = numbers[j]\n\
    \      if rolling_max_i > rolling_max_j then\n        rolling_max = rolling_max_i\n\
    \      else\n        rolling_max = rolling_max_j\n      end\n    end\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm069tpr.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnm069tpr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  return\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w60wwpl.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2w60wwpl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, #numbers do\n      if j > i then\n        local\
    \ rolling_max_element = rolling_max_element > numbers[j] and\n          rolling_max_element\
    \ or numbers[j]\n      end\n    end\n    rolling_max = rolling_max and rolling_max\
    \ or rolling_max_element\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lan23nt.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp0lan23nt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max_index = i - 1\n      rolling_max\
    \ = numbers[rolling_max_index]\n    else\n      rolling_max = numbers[i]\n   \
    \ end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplujukpp7.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmplujukpp7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_time = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_time = nil\n  for\
    \ i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max ~= nil\
    \ then\n      if rolling_max_time < value then\n        rolling_max_time = value\n\
    \        rolling_max_index = i\n      end\n      if rolling_max_time == value\
    \ then\n        rolling_max_value = rolling_max\n        rolling_max_index = i\n\
    \      end\n    else\n      rolling_max = value\n      rolling_max_index = i\n\
    \    end\n  end\n  return rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwltibm2e.lua:36:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwltibm2e.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  return\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w60wwpl.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2w60wwpl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      local rolling_max_j = numbers[j]:max()\n \
    \     if rolling_max_j == nil then\n        rolling_max_j = numbers[j]:min()\n\
    \      end\n      if rolling_max_i == nil then\n        rolling_max_i = rolling_max_j\n\
    \      else\n        if rolling_max_i > rolling_max_j then\n          rolling_max_i\
    \ = rolling_max_j\n        end\n      end\n    end\n    if rolling_max == nil\
    \ then\n      rolling_max = rolling_max_i\n    else\n      if rolling_max > rolling_max_i\
    \ then\n        rolling_max = rolling_max_i\n      end\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7ooi8s_.lua:34:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpi7ooi8s_.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_time = i\n      rolling_max_index = i\n    else\n\
    \      if value > rolling_max_value then\n        rolling_max_value = value\n\
    \        rolling_max_time = i\n        rolling_max_index = i\n      end\n    end\n\
    \  end\n  return rolling_max_index, rolling_max_value, rolling_max_time\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf43cma_.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpcf43cma_.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max\
    \ ~= nil then\n      if value > rolling_max_value then\n        rolling_max =\
    \ rolling_max_value\n        rolling_max_index = rolling_max_index + 1\n     \
    \ else\n        rolling_max = rolling_max\n        rolling_max_index = rolling_max_index\n\
    \      end\n    else\n      rolling_max = value\n      rolling_max_index = i\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e7xynm1.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5e7xynm1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxx9jpvgk.lua:18: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = 0\n  local rolling_max_count = 0\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_count = i + 1\n    end\n  end\n  rolling_max[rolling_max_count]\
    \ = rolling_max_value\n  for i = 1, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \    rolling_max_count = i + 1\n    end\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ocy_k6i.lua:29:\
    \ expected: {}\nactual: {0=0}\nstack traceback:\n\t/tmp/tmp8ocy_k6i.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_element)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1f0ubbw.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmp_1f0ubbw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  for i = 1, #numbers\
    \ do\n    local rolling_max_element = numbers[i]\n    if rolling_max_index ==\
    \ 0 then\n      rolling_max[1] = rolling_max_element\n    else\n      rolling_max[rolling_max_index]\
    \ = rolling_max_element\n    end\n    rolling_max_index = rolling_max_index +\
    \ 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcc43s75.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmpkcc43s75.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqrnt9g9.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpwqrnt9g9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max > rolling_max_element and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7jdz_9a.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpl7jdz_9a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max > rolling_max_element and rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7jdz_9a.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpl7jdz_9a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = math.max(rolling_max_element,\
    \ numbers[j])\n    end\n    if rolling_max ~= nil then\n      rolling_max = math.max(rolling_max,\
    \ rolling_max_element)\n    else\n      rolling_max = rolling_max_element\n  \
    \  end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_fk9z_0.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp4_fk9z_0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfu4obcl9.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1}\nstack traceback:\n\t/tmp/tmpfu4obcl9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      max_value = math.max(max_value, numbers[j])\n    end\n\
    \    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_time = i\n    end\n  end\n  while rolling_max_time <\
    \ #numbers do\n    rolling_max_time = rolling_max_time + 1\n    rolling_max_value\
    \ = numbers[rolling_max_time]\n    for i = rolling_max_time + 1, #numbers do\n\
    \      if numbers[i] ~= rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n        rolling_max_time = i\n      end\n    end\n\
    \  end\n  return rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzlfyj0j2.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzlfyj0j2.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpzlfyj0j2.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_element = nil\n  local max_element_index\
    \ = nil\n  for i = 1, #numbers do\n    if max_element == nil then\n      max_element\
    \ = numbers[i]\n      max_element_index = i\n    else\n      if numbers[i] > max_element\
    \ then\n        max_element = numbers[i]\n        max_element_index = i\n    \
    \  end\n    end\n  end\n  if max_element ~= nil then\n    rolling_max = max_element\n\
    \  end\n  return rolling_max, max_element_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaq25g8p.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwaq25g8p.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max = rolling_max > numbers[i]\
    \ and rolling_max or numbers[i]\n      rolling_max_index = i\n    else\n     \
    \ rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return\
    \ rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1efy9imu.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1efy9imu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = numbers[i]\n      rolling_max_index =\
    \ i\n    else\n      if rolling_max_value < numbers[i] then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    end\n  end\n  if\
    \ rolling_max_value ~= nil then\n    rolling_max = rolling_max_value\n    rolling_max_index\
    \ = rolling_max_index\n  end\n  return rolling_max, rolling_max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vdss4dc.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp7vdss4dc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    rolling_max_value = numbers[#numbers]\n    rolling_max_index\
    \ = #numbers\n  end\n  return rolling_max_index, rolling_max_value\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwdcxm_r.lua:28:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpwwdcxm_r.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max\
    \ ~= nil then\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    else\n      rolling_max\
    \ = value\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0z91qlt5.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp0z91qlt5.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lu9nbjs.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmp_lu9nbjs.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      rolling_max_i = rolling_max_i or numbers[j]\n\
    \      if rolling_max_i > numbers[j] then\n        rolling_max_i = numbers[j]\n\
    \      end\n    end\n    rolling_max = rolling_max or rolling_max_i\n  end\n \
    \ return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbraw6uu.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvbraw6uu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i -\
    \ 1\n        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max_index\
    \ = i - 1\n      rolling_max_value = numbers[i]\n    end\n    if rolling_max ~=\
    \ nil then\n      rolling_max = rolling_max > rolling_max_value ? rolling_max\
    \ : rolling_max_value\n    else\n      rolling_max = rolling_max_value\n    end\n\
    \  end\n  return rolling_max, rolling_max_index, rolling_max_value\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2vleofcl.lua:22: unexpected symbol near ''?''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      local rolling_max_j = numbers[j]\n\
    \      if rolling_max_i > rolling_max_j then\n        rolling_max = rolling_max_i\n\
    \      else\n        rolling_max = rolling_max_j\n      end\n    end\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm069tpr.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnm069tpr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max = numbers[rolling_max_index]\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_svd705f.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_svd705f.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, #numbers do\n      if j == i then\n        rolling_max_i\
    \ = numbers[j]\n      else\n        rolling_max_i = rolling_max_i or numbers[j]\n\
    \      end\n    end\n    rolling_max = rolling_max or rolling_max_i\n  end\n \
    \ return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqamrz1a2.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpqamrz1a2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = numbers[i]\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    else\n      rolling_max_value\
    \ = rolling_max_value\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnqnic2l.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {0=2, 2=3, 3=4}\nstack traceback:\n\t/tmp/tmpgnqnic2l.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwszrann.lua:14:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpzwszrann.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    local rolling_max_value = numbers[rolling_max_index]\n\
    \    if rolling_max ~= nil then\n      if rolling_max_value > rolling_max then\n\
    \        rolling_max = rolling_max_value\n        rolling_max_index = rolling_max_index\n\
    \      end\n    else\n      rolling_max = rolling_max_value\n      rolling_max_index\
    \ = rolling_max_index\n    end\n  end\n  return rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktoaoiw3.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpktoaoiw3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_index == i then\n \
    \       rolling_max = numbers[i]\n      else\n        rolling_max = rolling_max\
    \ > numbers[i] and rolling_max or numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n    end\n    rolling_max_index = i\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6ekd763.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpx6ekd763.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = 0\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ < value then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp887tsjf4.lua:21:\
    \ expected: {}\nactual: {0=0}\nstack traceback:\n\t/tmp/tmp887tsjf4.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max_index == 0 then\n\
    \      rolling_max = numbers[i]\n    else\n      rolling_max = math.max(rolling_max,\
    \ numbers[i])\n    end\n  end\n  return rolling_max, rolling_max_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r56gc7y.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5r56gc7y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if numbers[i] > rolling_max_value then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgrhtnvf.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkgrhtnvf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxx9jpvgk.lua:18: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      else\n        rolling_max_index = i\n\
    \        rolling_max_value = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5iw9cwz.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpp5iw9cwz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index > 0 then\n    rolling_max = table.concat(numbers,\
    \ rolling_max_index)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb31o3lf.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpsb31o3lf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index > 0 then\n    rolling_max = table.concat(numbers,\
    \ rolling_max_index)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pol24a4.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp0pol24a4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  local max_index = nil\n\
    \  for i = 1, #numbers do\n    if max_value == nil then\n      max_value = numbers[i]\n\
    \      max_index = i\n    else\n      if numbers[i] > max_value then\n       \
    \ max_value = numbers[i]\n        max_index = i\n      end\n    end\n  end\n \
    \ if max_value ~= nil then\n    rolling_max = max_index\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tb9kgc6.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1tb9kgc6.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= nil then\n        if rolling_max_value <= numbers[i] then\n          rolling_max\
    \ = nil\n          rolling_max_index = nil\n          rolling_max_value = nil\n\
    \        else\n          rolling_max_value = rolling_max_value\n        end\n\
    \      else\n        rolling_max_value = numbers[i]\n        rolling_max_index\
    \ = i\n      end\n    else\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  return rolling_max, rolling_max_index, rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakl2w4u7.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpakl2w4u7.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      local rolling_max_j = numbers[j]\n\
    \      if rolling_max_i > rolling_max_j then\n        rolling_max = rolling_max_i\n\
    \      else\n        rolling_max = rolling_max_j\n      end\n    end\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm069tpr.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnm069tpr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if numbers[i] > rolling_max then\n\
    \        rolling_max = numbers[i]\n        rolling_max_index = i\n      end\n\
    \    else\n      rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gwok0hz.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp9gwok0hz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index > 0 then\n    rolling_max = table.concat(numbers,\
    \ rolling_max_index)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb31o3lf.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpsb31o3lf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max =\
    \ numbers[i]\n    for j = i + 1, #numbers do\n      rolling_max = math.max(rolling_max,\
    \ numbers[j])\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfexipim.lua:17:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkfexipim.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i\n    if rolling_max ~= nil then\n      if\
    \ rolling_max[1] < numbers[i] then\n        rolling_max = numbers, rolling_max_index\n\
    \      end\n    else\n      rolling_max = numbers, rolling_max_index\n    end\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq61s61p.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpgq61s61p.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    local rolling_max_value = numbers[rolling_max_index]\n\
    \    if rolling_max ~= nil then\n      if rolling_max_value > rolling_max then\n\
    \        rolling_max = rolling_max_value\n        rolling_max_index = rolling_max_index\n\
    \      end\n    else\n      rolling_max = rolling_max_value\n      rolling_max_index\
    \ = rolling_max_index\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r24mrxs.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_r24mrxs.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_time > numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n        rolling_max_value = nil\n  \
    \      rolling_max_time = nil\n      else\n        rolling_max_time = numbers[i]\n\
    \      end\n    end\n    if rolling_max_time == nil then\n      rolling_max_time\
    \ = numbers[i]\n    end\n    if rolling_max ~= nil then\n      if rolling_max_time\
    \ < numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n        rolling_max_time = nil\n      else\n\
    \        rolling_max_value = numbers[i]\n        rolling_max_index = i\n     \
    \ end\n    end\n    if rolling_max_time == numbers[i] then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbzpkw9v.lua:44:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmplbzpkw9v.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i + 1, #numbers do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp132g3wno.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp132g3wno.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppj3sm1u9.lua:79: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, #numbers do\n      if numbers[j] < rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5y85ly3.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpm5y85ly3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = numbers[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpudbrx5o8.lua:18: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max_index == 0 then\n\
    \      rolling_max = numbers[i]\n    else\n      rolling_max = math.max(rolling_max,\
    \ numbers[i])\n    end\n  end\n  return rolling_max, rolling_max_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r56gc7y.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5r56gc7y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max = rolling_max > numbers[i]\
    \ and rolling_max or numbers[i]\n      rolling_max_index = i\n    else\n     \
    \ rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return\
    \ rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1efy9imu.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1efy9imu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_element then\n        max_element\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_element)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_index = i\n      rolling_max_time = i\n    else\n\
    \      if value > rolling_max_value then\n        rolling_max_value = value\n\
    \        rolling_max_index = i\n        rolling_max_time = i\n      end\n    end\n\
    \  end\n  return rolling_max_index, rolling_max_value, rolling_max_time\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaihwwsid.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpaihwwsid.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max ~= nil then\n  \
    \    if rolling_max_index > rolling_max_index then\n        rolling_max = numbers[rolling_max_index]\n\
    \      else\n        rolling_max = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdabbw5bv.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdabbw5bv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max = nil\n        rolling_max_index = nil\n\
    \        rolling_max_value = nil\n      end\n    end\n    if rolling_max ~= nil\
    \ then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n  \
    \  end\n    if rolling_max ~= nil then\n      rolling_max = numbers[i]\n    end\n\
    \  end\n  return rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xacfedn.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp0xacfedn.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0a53_muq.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0a53_muq.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp0a53_muq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      local rolling_max_j = numbers[j]:max()\n \
    \     if rolling_max_j > rolling_max_i then\n        rolling_max_i = rolling_max_j\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ .. \", \" .. rolling_max_i\n    else\n      rolling_max = rolling_max_i\n  \
    \  end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7my8iil9.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp7my8iil9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max_index == 0 then\n\
    \      rolling_max = numbers[i]\n    else\n      rolling_max = math.max(rolling_max,\
    \ numbers[i])\n    end\n  end\n  return rolling_max, rolling_max_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r56gc7y.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5r56gc7y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = numbers[i]\n      rolling_max_index =\
    \ i\n    else\n      if numbers[i] > rolling_max_value then\n        rolling_max_value\
    \ = numbers[i]\n        rolling_max_index = i\n      end\n    end\n  end\n  if\
    \ rolling_max_index == nil then\n    return nil\n  end\n  rolling_max = rolling_max_value\n\
    \  rolling_max_index = rolling_max_index\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  for i = 1, #numbers do\n    if rolling_max_index\
    \ == nil then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    else\n      if numbers[i] < rolling_max_value then\n        rolling_max_index\
    \ = i\n        rolling_max_value = numbers[i]\n      end\n    end\n  end\n  return\
    \ rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8o7viwb.lua:43:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmph8o7viwb.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ == nil then\n    rolling_max_value = numbers[#numbers]\n    rolling_max_index\
    \ = #numbers\n  end\n  return rolling_max_index, rolling_max_value\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaogsui98.lua:28:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpaogsui98.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max_value = rolling_max_value + numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitidirj2.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpitidirj2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      rolling_max_index\
    \ = i - 1\n      rolling_max_value = numbers[rolling_max_index]\n    end\n   \
    \ if numbers[i] > rolling_max_value then\n      rolling_max = numbers[i]\n   \
    \   rolling_max_index = i\n    end\n  end\n  return rolling_max_index, rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp984rna2z.lua:23:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp984rna2z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqrnt9g9.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpwqrnt9g9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsu1qzl5k.lua:17: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if rolling_max_value > value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  return\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfp1hr65l.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpfp1hr65l.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = math.max(rolling_max_element,\
    \ numbers[j])\n    end\n    table.insert(rolling_max, rolling_max_element)\n \
    \ end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_value\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      rolling_max_value = math.max(rolling_max_value,\
    \ numbers[j])\n    end\n    if rolling_max ~= nil then\n      rolling_max = math.max(rolling_max,\
    \ rolling_max_value)\n    else\n      rolling_max = rolling_max_value\n    end\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxraf9d1n.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpxraf9d1n.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_time > numbers[i] then\n        rolling_max_time\
    \ = numbers[i]\n        rolling_max_index = i\n        rolling_max_value = rolling_max\n\
    \      else\n        rolling_max = numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max_index, rolling_max_value,\
    \ rolling_max_time\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo5h8pk9.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpeo5h8pk9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    local rolling_max_value = numbers[i]\n\
    \    for j = i - 1, i - 2, -1 do\n      local rolling_max_value = numbers[j] and\
    \ rolling_max_value and rolling_max_value > numbers[j] or numbers[j]\n      rolling_max_index\
    \ = j\n    end\n    if rolling_max then\n      rolling_max = rolling_max > rolling_max_value\
    \ and rolling_max or rolling_max_value\n    else\n      rolling_max = rolling_max_value\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg5w4i96.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpeg5w4i96.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max_value = numbers[i]\n        rolling_max_index\
    \ = i\n      end\n    else\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  return rolling_max_index, rolling_max_value\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweg5m63c.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpweg5m63c.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i - 1\n    if rolling_max_index > 0 then\n\
    \      rolling_max = numbers[rolling_max_index]\n    end\n    if rolling_max_index\
    \ > 0 and numbers[rolling_max_index] > rolling_max then\n      rolling_max = numbers[rolling_max_index]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc6opczg.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprc6opczg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_index ~= nil then\n\
    \        rolling_max = rolling_max\n      else\n        rolling_max = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    else\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2ewqkf9.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmps2ewqkf9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppj3sm1u9.lua:79: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ rolling_max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0a53_muq.lua:8:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0a53_muq.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp0a53_muq.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      rolling_max_i = rolling_max_i or numbers[j]\n\
    \      if rolling_max_i > numbers[i] then\n        rolling_max_i = numbers[i]\n\
    \      end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ or rolling_max_i\n    else\n      rolling_max = rolling_max_i\n    end\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnbbbty4.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvnbbbty4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9bv1fieg.lua:79: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max_index = i - 1\n      rolling_max\
    \ = numbers[rolling_max_index]\n    else\n      rolling_max = numbers[i]\n   \
    \ end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplujukpp7.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmplujukpp7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsu1qzl5k.lua:17: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max = rolling_max > numbers[i]\
    \ and rolling_max or numbers[i]\n      rolling_max_index = i\n    else\n     \
    \ rolling_max = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return\
    \ rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1efy9imu.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1efy9imu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5uiboyu.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy5uiboyu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max = numbers[rolling_max_index]\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjf2dfsj.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvjf2dfsj.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lu9nbjs.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmp_lu9nbjs.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] >= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index > 0 then\n    rolling_max = table.concat(numbers,\
    \ rolling_max_index)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihdn5lj5.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpihdn5lj5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max = rolling_max > rolling_max_element and rolling_max_element\
    \ or rolling_max\n    else\n      rolling_max = rolling_max_element\n    end\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg10_c0fa.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpg10_c0fa.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max = numbers[i]\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    else\n      rolling_max_value = rolling_max_value + numbers[i]\n\
    \    end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitidirj2.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpitidirj2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i\n    local rolling_max_value = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > rolling_max_value then\n\
    \        rolling_max_index = j\n        rolling_max_value = numbers[j]\n     \
    \ end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ .. \", \" .. rolling_max_value\n    else\n      rolling_max = rolling_max_value\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gp4_egp.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_gp4_egp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppj3sm1u9.lua:79: ''end'' expected (to close ''function'' at
    line 3) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= numbers[i] then\n        rolling_max_value = numbers[i]\n        rolling_max_index\
    \ = i\n      end\n    else\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  return rolling_max_index, rolling_max_value\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9k9f010.lua:24:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpn9k9f010.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if numbers[i] ~= rolling_max_value then\n\
    \      rolling_max[rolling_max_index] = numbers[i]\n      rolling_max_value =\
    \ numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6d3tbmu1.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp6d3tbmu1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      rolling_max = math.max(rolling_max,\
    \ numbers[i])\n      rolling_max_index = i\n    else\n      rolling_max = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yi1druv.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5yi1druv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = rolling_max or numbers[i]\n    if rolling_max_i < numbers[i] then\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i633e4d.lua:17:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_i633e4d.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = math.max(rolling_max_element,\
    \ numbers[j])\n    end\n    rolling_max = rolling_max_element\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpku2wg30i.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpku2wg30i.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_i\
    \ = nil\n    for j = 1, i do\n      rolling_max_i = rolling_max_i or numbers[j]\n\
    \      if rolling_max_i > numbers[j] then\n        rolling_max_i = numbers[j]\n\
    \      end\n    end\n    rolling_max = rolling_max or rolling_max_i\n  end\n \
    \ return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbraw6uu.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvbraw6uu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max =\
    \ numbers[i]\n    for j = 1, i do\n      rolling_max = math.max(rolling_max, numbers[j])\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjm2hvyi.lua:17:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpbjm2hvyi.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
