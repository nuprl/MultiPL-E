language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\tif balanced and sum == max_weight then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi96sthb.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxi96sthb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tlocal i = 1\n\t\
    while i <= #q do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced\
    \ = false\n\t\tend\n\t\ti = i + 1\n\tend\n\tif balanced and sum == max_weight\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwjy7oq2.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfwjy7oq2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum < w then\n        return false\n    elseif sum > w then\n        return\
    \ true\n    else\n        return will_it_fly(q, w) or will_it_fly(reverse(q, w),\
    \ w)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps91m4sju.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps91m4sju.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Base case: if the list is balanced, then it must fly.\n\tif is_balanced(q) then\n\
    \t\treturn true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4cnvo09g.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\
    \tif sum > max_weight then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9yvbbxz.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd9yvbbxz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if #q == 0 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzmzo925j.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Write your code here.\n\tlocal bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\
    \treturn bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nx5drm6.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3nx5drm6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in ipairs(q) do sum = sum + v end\n  return sum <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lm1a907.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2lm1a907.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in pairs(q) do sum = sum + v end\n  return sum <= w and\
    \ is_balanced(q) and is_palindromic(q)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9e_2kcr.lua:13:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpl9e_2kcr.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpl9e_2kcr.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if q == true then return true end\n  if q\
    \ == false then return false end\n  if q == nil then return false end\n  if q\
    \ == true then return true end\n  if q == false then return false end\n  if q\
    \ == nil then return false end\n  if q == true then return true end\n  if q ==\
    \ false then return false end\n  if q == nil then return false end\n  if q ==\
    \ true then return true end\n  if q == false then return false end\n  if q ==\
    \ nil then return false end\n  if q == true then return true end\n  if q == false\
    \ then return false end\n  if q == nil then return false end\n  if q == true then\
    \ return true end\n  if q == false then return false end\n  if q == nil then return\
    \ false end\n  if q == true then return true end\n  if q == false then return\
    \ false end\n  if q == nil then return false end\n  if q == true then return true\
    \ end\n  if q == false then return false end\n  if q == nil then return false\
    \ end\n  if q == true then return true end\n  if q == false then return false\
    \ end\n  if q == nil then return false end\n  if q == true then return true end\n\
    \  if q == false then return false end\n  if q == nil then return false end\n\
    \  if q == true then return true end\n  if q == false then return false end\n\
    \  if q == nil then return false end\n  if q == true then return true end\n  if\
    \ q == false then return false end\n  if q == nil then return false end\n  if\
    \ q == true then return true end\n  if q == false then return false end\n  if\
    \ q == nil then return false end\n  if q == true then return true end\n  if q\
    \ == false then return false end\n  if q == nil then return false end\n  if q\
    \ == true then return true end\n  if q == false then return false end\n  if q\
    \ == nil then return false end\n  if q == true then return true end\n  if q ==\
    \ false then return false end\n  if q == nil then return false end\n  if q ==\
    \ true then return true end\n  if q == false then return false end\n  if q ==\
    \ nil then return false end\n  if q == true then return true end\n  if q == false\
    \ then return false end\n  if q == nil then return false \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdy8r7p0l.lua:66: ''end'' expected (to close ''if'' at line
    65) near ''lu''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Base case: if the list is balanced, return True.\n\tif is_balanced(q) then\n\
    \t\treturn true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwmv_y5r_.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ base case\n\tif q == nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpks4hdx23.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  local max_sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return balanced\
    \ and max_sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jc68ei_.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0jc68ei_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Base case\n  if q == nil then return false end\n  -- Base case\n  if w == 0\
    \ then return false end\n  -- Base case\n  if #q == 1 then return true end\n \
    \ -- Base case\n  if #q == 2 then return q[1] == q[2] end\n  -- Base case\n  if\
    \ #q > 2 then return false end\n  -- Base case\n  if #q > 3 then return false\
    \ end\n  -- Base case\n  if #q > 4 then return false end\n  -- Base case\n  if\
    \ #q > 5 then return false end\n  -- Base case\n  if #q > 6 then return false\
    \ end\n  -- Base case\n  if #q > 7 then return false end\n  -- Base case\n  if\
    \ #q > 8 then return false end\n  -- Base case\n  if #q > 9 then return false\
    \ end\n  -- Base case\n  if #q > 10 then return false end\n  -- Base case\n  if\
    \ #q > 11 then return false end\n  -- Base case\n  if #q > 12 then return false\
    \ end\n  -- Base case\n  if #q > 13 then return false end\n  -- Base case\n  if\
    \ #q > 14 then return false end\n  -- Base case\n  if #q > 15 then return false\
    \ end\n  -- Base case\n  if #q > 16 then return false end\n  -- Base case\n  if\
    \ #q > 17 then return false end\n  -- Base case\n  if #q > 18 then return false\
    \ end\n  -- Base case\n  if #q > 19 then return false end\n  -- Base case\n  if\
    \ #q > 20 then return false end\n  -- Base case\n  if #q > 21 then return false\
    \ end\n  -- Base case\n  if #q > 22 then return false end\n  -- Base case\n  if\
    \ #q > 23 then return false end\n  -- Base case\n  if #q > 24 then return false\
    \ end\n  -- Base case\n  if #q > 25 then return false end\n  -- Base case\n  if\
    \ #q > 26 then return false end\n  -- Base case\n  if #q > 27 then return false\
    \ end\n  -- Base case\n  if #q > 28 then return false end\n  -- Base case\n  if\
    \ #q > 29 then return false end\n  -- Base case\n  if #q > 30 then return false\
    \ end\n  -- Base case\n  if #q > 31 then return false end\n  -- \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy3eq2fe5.lua:92: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpturr_yfb.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpturr_yfb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tlocal max = 0\n\tfor i = 1, #q do\n\t\tsum = sum\
    \ + q[i]\n\t\tif sum > max then\n\t\t\tmax = sum\n\t\tend\n\t\tif sum == max then\n\
    \t\t\tbal = bal + 1\n\t\tend\n\tend\n\tif bal > 0 and max <= w then\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpprdhu6.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqpprdhu6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\treturn false\n\t\tend\n\t\tif sum == w then\n\t\t\tbal = bal\
    \ + 1\n\t\tend\n\tend\n\tif bal > 1 then\n\t\treturn false\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vr8dm6l.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3vr8dm6l.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbkqagn5.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdbkqagn5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbkqagn5.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdbkqagn5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\t\tif sum > w then\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\
    \treturn balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_hfr4vy.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps_hfr4vy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in ipairs(q) do sum = sum + v end\n\tif sum < w then return\
    \ false end\n\tlocal max = 0\n\tfor _, v in ipairs(q) do max = math.max(max, v)\
    \ end\n\tif max <= w then return true end\n\treturn will_it_fly(q, w)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynedhwi9.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpynedhwi9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < w\
    \ then\n\t\treturn false\n\tend\n\tlocal max = 0\n\tfor _, v in ipairs(q) do\n\
    \t\tif max < v then\n\t\t\tmax = v\n\t\tend\n\tend\n\tif max < w then\n\t\treturn\
    \ false\n\tend\n\tlocal reverse = reverse(q)\n\tlocal sum = 0\n\tfor _, v in ipairs(reverse)\
    \ do\n\t\tsum = sum + v\n\tend\n\tif sum < w then\n\t\treturn false\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_arpsfp.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7_arpsfp.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Base case\n  if #q == 0 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0u_7qes.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ max_weight = w\n    local balanced = true\n    local sum = 0\n    for _, v in\
    \ pairs(q) do\n        sum = sum + v\n        if sum > max_weight then\n     \
    \       balanced = false\n        end\n    end\n    return balanced and sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpve74ravi.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpve74ravi.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if q == nil then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvuzwxqr4.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal sum = 0\n\tlocal is_balanced = true\n\tfor i = 1, #q\
    \ do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tis_balanced =\
    \ false\n\t\tend\n\tend\n\treturn is_balanced and sum <= max_weight\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcidayty.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqcidayty.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ max_weight = w\n    local balanced = true\n    local sum = 0\n    for i = 1,\
    \ #q do\n        sum = sum + q[i]\n        if sum > max_weight then\n        \
    \    balanced = false\n        end\n    end\n    return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms7mg2pu.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpms7mg2pu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal >=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf6jfcz6.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvf6jfcz6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ max_weight = w\n    local balanced = true\n    local sum = 0\n    for _, v in\
    \ pairs(q) do\n        sum = sum + v\n        if sum > max_weight then\n     \
    \       balanced = false\n        end\n    end\n    return balanced and sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpve74ravi.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpve74ravi.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum == w then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa23i0rbv.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa23i0rbv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntg_os1u.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpntg_os1u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tlocal i = 1\n\t\
    while i <= #q do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced\
    \ = false\n\t\tend\n\t\ti = i + 1\n\tend\n\tif balanced and sum == max_weight\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwjy7oq2.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfwjy7oq2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > max_weight then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalm5dptw.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpalm5dptw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor _, v in pairs(q)\
    \ do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\
    \t\tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jf75nk8.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4jf75nk8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum +\
    \ v\n    if sum > max_weight then max_weight = sum end\n  end\n  return max_weight\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m3h23rg.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7m3h23rg.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  return sum <= w\
    \ and #q == #reverse(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc96m6jc0.lua:15:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpc96m6jc0.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpc96m6jc0.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Base case\n\tif q == nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ru1s2sy.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbkqagn5.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdbkqagn5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpturr_yfb.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpturr_yfb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ balanced = true\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n        if sum > w then\n            balanced = false\n            break\n\
    \        end\n    end\n    return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0nn1aj9.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt0nn1aj9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntg_os1u.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpntg_os1u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal >\
    \ 0 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv4n3s_i.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbv4n3s_i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if #q == 0 then\n    return true\n  end\n  -- base case\n  if #q\
    \ == 1 then\n    return q[1] == w\n  end\n  -- recursive case\n  local max_weight\
    \ = w\n  local max_sum = 0\n  for i = 1, #q do\n    local s = q[i] + q[i - 1]\n\
    \    if s > max_sum then\n      max_sum = s\n    end\n    if s == max_weight then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8835_7c.lua:23:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpz8835_7c.lua:23: in function 'candidate'\n\t/tmp/tmpz8835_7c.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if q == true then return true end\n  if q\
    \ == false then return false end\n  if q == nil then return false end\n  if q\
    \ == true then return true end\n  if q == false then return false end\n  if q\
    \ == nil then return false end\n  if q == true then return true end\n  if q ==\
    \ false then return false end\n  if q == nil then return false end\n  if q ==\
    \ true then return true end\n  if q == false then return false end\n  if q ==\
    \ nil then return false end\n  if q == true then return true end\n  if q == false\
    \ then return false end\n  if q == nil then return false end\n  if q == true then\
    \ return true end\n  if q == false then return false end\n  if q == nil then return\
    \ false end\n  if q == true then return true end\n  if q == false then return\
    \ false end\n  if q == nil then return false end\n  if q == true then return true\
    \ end\n  if q == false then return false end\n  if q == nil then return false\
    \ end\n  if q == true then return true end\n  if q == false then return false\
    \ end\n  if q == nil then return false end\n  if q == true then return true end\n\
    \  if q == false then return false end\n  if q == nil then return false end\n\
    \  if q == true then return true end\n  if q == false then return false end\n\
    \  if q == nil then return false end\n  if q == true then return true end\n  if\
    \ q == false then return false end\n  if q == nil then return false end\n  if\
    \ q == true then return true end\n  if q == false then return false end\n  if\
    \ q == nil then return false end\n  if q == true then return true end\n  if q\
    \ == false then return false end\n  if q == nil then return false end\n  if q\
    \ == true then return true end\n  if q == false then return false end\n  if q\
    \ == nil then return false end\n  if q == true then return true end\n  if q ==\
    \ false then return false end\n  if q == nil then return false end\n  if q ==\
    \ true then return true end\n  if q == false then return false end\n  if q ==\
    \ nil then return false end\n  if q == true then return true end\n  if q == false\
    \ then return false end\n  if q == nil then return false \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdy8r7p0l.lua:66: ''end'' expected (to close ''if'' at line
    65) near ''lu''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal >\
    \ 0 and sum < w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt37uign5.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt37uign5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if #q == 0 then return true end\n  if #q ==\
    \ 1 then return will_it_fly(q[1], w) end\n  local max_weight = w\n  local max_weight_index\
    \ = #q\n  local max_weight_element = q[1]\n  for i = 2, #q do\n    if q[i] > max_weight\
    \ then\n      max_weight = q[i]\n      max_weight_index = i\n      max_weight_element\
    \ = q[i]\n    end\n  end\n  if max_weight <= w then\n    return true\n  end\n\
    \  if max_weight_index == 1 then\n    return will_it_fly(q[max_weight_index],\
    \ w)\n  end\n  return will_it_fly(q[max_weight_index], w) and will_it_fly(q[max_weight_index\
    \ - 1], w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplaxf4l4i.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplaxf4l4i.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then\n    return true\n  elseif #q == 1 then\n    return q[1] == w\n\
    \  else\n    local max_weight = w\n    for i = 2, #q do\n      max_weight = max_weight\
    \ - q[i]\n      if max_weight < 0 then\n        return false\n      end\n    end\n\
    \    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0g7dlhj.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy0g7dlhj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ max_weight = w\n    local balanced = true\n    local sum = 0\n    for i = 1,\
    \ #q do\n        sum = sum + q[i]\n        if sum > max_weight then\n        \
    \    balanced = false\n            break\n        end\n    end\n    return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr41pk2a.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfr41pk2a.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Base case\n\tif q == nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ru1s2sy.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Write your solution here\n  local balanced = true\n  local sum = 0\n  for i\
    \ = 1, #q do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5yyfqgn.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn5yyfqgn.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  return sum\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkguikc5n.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkguikc5n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in pairs(q) do sum = sum + v end\n\tif sum < w then\n\t\t\
    return false\n\telse\n\t\tlocal max = 0\n\t\tfor _, v in pairs(q) do max = math.max(max,\
    \ v) end\n\t\treturn sum == max\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfroxo7tn.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfroxo7tn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if w == nil then return false end\n  if #q\
    \ == 0 then return true end\n  if #q == 1 then return will_it_fly(q[1], w) end\n\
    \  if #q == 2 then return will_it_fly(q[1], w) and will_it_fly(q[2], w) end\n\
    \  if #q == 3 then return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3],\
    \ w) end\n  if #q == 4 then return will_it_fly(q[1], w) and will_it_fly(q[2],\
    \ w) and will_it_fly(q[3], w) and will_it_fly(q[4], w) end\n  if #q == 5 then\
    \ return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3], w)\
    \ and will_it_fly(q[4], w) and will_it_fly(q[5], w) end\n  if #q == 6 then return\
    \ will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3], w) and will_it_fly(q[4],\
    \ w) and will_it_fly(q[5], w) and will_it_fly(q[6], w) end\n  if #q == 7 then\
    \ return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3], w)\
    \ and will_it_fly(q[4], w) and will_it_fly(q[5], w) and will_it_fly(q[6], w) and\
    \ will_it_fly(q[7], w) end\n  if #q == 8 then return will_it_fly(q[1], w) and\
    \ will_it_fly(q[2], w) and will_it_fly(q[3], w) and will_it_fly(q[4], w) and will_it_fly(q[5],\
    \ w) and will_it_fly(q[6], w) and will_it_fly(q[7], w) and will_it_fly(q[8], w)\
    \ end\n  if #q == 9 or w == nil then return false end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyhyotg1j.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t/tmp/tmpyhyotg1j.lua:13:\
    \ in function 'will_it_fly'\n\t/tmp/tmpyhyotg1j.lua:16: in function 'candidate'\n\
    \t/tmp/tmpyhyotg1j.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum < w then\n\
    \t\treturn false\n\telseif sum > w then\n\t\treturn true\n\telse\n\t\treturn will_it_fly(q,\
    \ w - sum)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplymhhbtw.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplymhhbtw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in pairs(q) do sum = sum + v end\n\treturn sum <= w and\
    \ is_balanced(q) and is_palindromic(q)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi10vv6g3.lua:13:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpi10vv6g3.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpi10vv6g3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then return true end\n  if #q == 1 then return q[1] == w end\n  local\
    \ max_weight = w\n  local max_sum = 0\n  for i = 1, #q do\n    local sum = 0\n\
    \    for j = 1, #q[i] do\n      sum = sum + q[i][j]\n    end\n    if sum > max_sum\
    \ then\n      max_sum = sum\n      max_weight = q[i]\n    end\n  end\n  return\
    \ max_sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7x42sgb.lua:17:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpv7x42sgb.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpv7x42sgb.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if #q == 0 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzmzo925j.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if #q == 0 then\n    return true\n  end\n  -- base case\n  if #q\
    \ == 1 then\n    return q[1] == w\n  end\n  -- recursive case\n  local max_weight\
    \ = w\n  local max_sum = 0\n  for i = 1, #q do\n    -- recursive case\n    local\
    \ sum = 0\n    for j = 1, #q do\n      -- recursive case\n      sum = sum + q[j]\
    \ \n    end\n    -- recursive case\n    if sum > max_sum then\n      max_sum =\
    \ sum\n      max_weight = w\n    end\n  end\n  return max_sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9iasvi4.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph9iasvi4.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ balanced = true\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n        if sum > w then\n            balanced = false\n            break\n\
    \        end\n    end\n    return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0nn1aj9.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt0nn1aj9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n  end\n  return sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgat4uw1f.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgat4uw1f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if q == nil or w == nil then\n    return false\n  end\n  -- base\
    \ case\n  if #q == 0 then\n    return true\n  end\n  -- base case\n  if #q ==\
    \ 1 then\n    return q[1] == w\n  end\n  -- base case\n  if #q > 1 then\n    local\
    \ max_weight = w\n    -- base case\n    if #q > w then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\n    -- base case\n    if #q > max_weight then\n      max_weight = #q\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8yfwy798.lua:126: ''end'' expected (to close ''if'' at line
    24) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\treturn false\n\t\tend\n\t\tbal = bal + 1\n\tend\n\tif bal ~=\
    \ #q then\n\t\treturn false\n\tend\n\tlocal max = 0\n\tfor i = 1, #q do\n\t\t\
    if max < q[i] then\n\t\t\tmax = q[i]\n\t\tend\n\tend\n\treturn max <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf7utxb0.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaf7utxb0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if #q == 0 then return true end\n  if #q ==\
    \ 1 then return will_it_fly(q[1], w) end\n  if #q == 2 then return will_it_fly(q[1],\
    \ w) and will_it_fly(q[2], w) end\n  if #q == 3 then return will_it_fly(q[1],\
    \ w) and will_it_fly(q[2], w) and will_it_fly(q[3], w) end\n  if #q == 4 then\
    \ return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3], w)\
    \ and will_it_fly(q[4], w) end\n  if #q == 5 then return will_it_fly(q[1], w)\
    \ and will_it_fly(q[2], w) and will_it_fly(q[3], w) and will_it_fly(q[4], w) and\
    \ will_it_fly(q[5], w) end\n  if #q == 6 then return will_it_fly(q[1], w) and\
    \ will_it_fly(q[2], w) and will_it_fly(q[3], w) and will_it_fly(q[4], w) and will_it_fly(q[5],\
    \ w) and will_it_fly(q[6], w) end\n  if #q == 7 then return will_it_fly(q[1],\
    \ w) and will_it_fly(q[2], w) and will_it_fly(q[3], w) and will_it_fly(q[4], w)\
    \ and will_it_fly(q[5], w) and will_it_fly(q[6], w) and will_it_fly(q[7], w) end\n\
    \  if #q == 8 then return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3],\
    \ w) and will_it_fly(q[4], w) and will_it_fly(q[5], w) and will_it_fly(q[6], w)\
    \ and will_it_fly(q[7], w) and will_it_fly(q[8], w) end\n  if #q == 9 then return\
    \ will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3], w) and will_it_fly(q[4],\
    \ w) and will_it_fly(q[5], w) and will_it_fly(q[6], w) and will_it_fly(q[7], w)\
    \ and will_it_fly(q[8], w) and will_it_fly(\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpun5qkdk0.lua:22: '')'' expected (to close ''('' at line 21)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\
    \tif sum > max_weight then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9yvbbxz.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd9yvbbxz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntg_os1u.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpntg_os1u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ base case\n\tif q == nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpks4hdx23.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum == w then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa23i0rbv.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa23i0rbv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal > 0 and sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplkizde0.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpplkizde0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then\n    return true\n  end\n  if #q == 1 then\n    return q[1] ==\
    \ w\n  end\n  local max_weight = w\n  local max_sum = q[1]\n  for i = 2, #q do\n\
    \    local cur_sum = q[i]\n    if cur_sum > max_sum then\n      max_sum = cur_sum\n\
    \      max_weight = w\n    elseif cur_sum == max_sum then\n      max_weight =\
    \ max_weight + 1\n    end\n  end\n  return max_sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6caerlu.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_6caerlu.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  local max_weight = w\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vhwtgb8.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3vhwtgb8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if q == nil then return false end\n  -- base case\n  if w == 0\
    \ then return false end\n  -- base case\n  if q == w then return true end\n  --\
    \ base case\n  if q[1] == w then return will_it_fly(q[2], w) end\n  -- base case\n\
    \  if q[2] == w then return will_it_fly(q[1], w) end\n  -- base case\n  if q[1]\
    \ == q[2] then return will_it_fly(q[1], w) end\n  -- base case\n  if q[1] < w\
    \ then return false end\n  -- base case\n  if q[2] < w then return false end\n\
    \  -- base case\n  if q[1] > w then return false end\n  -- base case\n  if q[2]\
    \ > w then return false end\n  -- base case\n  if q[1] == q[2] and q[1] < w then\
    \ return false end\n  -- base case\n  if q[1] < q[2] and q[1] < w then return\
    \ false end\n  -- base case\n  if q[1] < q[2] and q[2] < w then return false end\n\
    \  -- base case\n  if q[1] < q[2] and q[1] > w then return false end\n  -- base\
    \ case\n  if q[2] < q[1] and q[2] < w then return false end\n  -- base case\n\
    \  if q[2] < q[1] and q[1] > w then return false end\n  -- base case\n  if q[2]\
    \ < q[1] and q[1] < w then return false end\n  -- base case\n  if q[1] < q[2]\
    \ and q[2] > w then return false end\n  -- base case\n  if q[1] < q[2] and q[1]\
    \ > w then return false end\n  -- base case\n  if q[1] > q[2] and q[1] > w then\
    \ return false end\n  -- base case\n  if q[1] > q[2] and q[2] > w then return\
    \ false end\n  -- base case\n  if q[1] > q[2] and q[1] < w then return false end\n\
    \  -- base case\n  if q[2] > q[1] and q[2] > w then return false end\n  -- base\
    \ case\n  if q[2] > q[1] and q[1] < w then return false end\n  -- base case\n\
    \  if q[2] > q[1] and q[1] > w then return false end\n  -- base case\n  if q[1]\
    \ < q[2] and q[2] < w then return false end\n  -- base case\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp25m1d98q.lua:65: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal sum = 0\n\tlocal is_balanced = true\n\tfor i = 1, #q\
    \ do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tis_balanced =\
    \ false\n\t\tend\n\tend\n\treturn is_balanced and sum <= max_weight\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcidayty.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqcidayty.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor _, v in pairs(q)\
    \ do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\
    \t\tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jf75nk8.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4jf75nk8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum < w then\n\
    \t\treturn false\n\telse\n\t\treturn true\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdkffujr.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbdkffujr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then\n    return true\n  end\n  local max_weight = w\n  local balanced\
    \ = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > max_weight then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ylv2kao.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ylv2kao.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\tif balanced and sum == max_weight then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi96sthb.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxi96sthb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Write your code here.\n  local sum = 0\n  for i = 1, #q do\n    sum = sum +\
    \ q[i]\n  end\n  if sum < w then\n    return false\n  else\n    local max = 0\n\
    \    for i = 1, #q do\n      if max < w then\n        max = w + q[i]\n      else\n\
    \        if q[i] > max then\n          max = q[i]\n        end\n      end\n  \
    \  end\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjpxci16.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphjpxci16.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1u0nz0k.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb1u0nz0k.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\treturn false\n\t\tend\n\t\tif sum == w then\n\t\t\tbal = bal\
    \ + 1\n\t\tend\n\tend\n\tif bal > 1 then\n\t\treturn false\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vr8dm6l.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3vr8dm6l.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\treturn false\n\t\tend\n\t\tbal = bal + 1\n\tend\n\tif bal >\
    \ 1 then\n\t\treturn false\n\tend\n\tlocal max = 0\n\tfor i = 1, #q do\n\t\tif\
    \ max < q[i] then\n\t\t\tmax = q[i]\n\t\tend\n\tend\n\tif max <= w then\n\t\t\
    return true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wva0x7a.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2wva0x7a.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if #q == 0 then return true end\n  if w ==\
    \ 0 then return false end\n  if #q == 1 then return q[1] == w end\n  if #q ==\
    \ 2 then return q[1] == w and q[2] == w end\n  if #q == 3 then return q[1] ==\
    \ w and q[2] == w and q[3] == w end\n  if #q == 4 then return q[1] == w and q[2]\
    \ == w and q[3] == w and q[4] == w end\n  if #q == 5 then return q[1] == w and\
    \ q[2] == w and q[3] == w and q[4] == w and q[5] == w end\n  if #q == 6 then return\
    \ q[1] == w and q[2] == w and q[3] == w and q[4] == w and q[5] == w and q[6] ==\
    \ w end\n  if #q == 7 then return q[1] == w and q[2] == w and q[3] == w and q[4]\
    \ == w and q[5] == w and q[6] == w and q[7] == w end\n  if #q == 8 then return\
    \ q[1] == w and q[2] == w and q[3] == w and q[4] == w and q[5] == w and q[6] ==\
    \ w and q[7] == w and q[8] == w end\n  if #q == 9 or #q == 10 then return false\
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5oh74r6.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph5oh74r6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Write your code here.\n\tlocal max_weight = w\n\tlocal sum = 0\n\tfor i = 1,\
    \ #q do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tmax_weight\
    \ = sum\n\t\tend\n\tend\n\treturn max_weight <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffiuhvmv.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpffiuhvmv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Base case\n\tif q == nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ru1s2sy.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum < w then\n\
    \t\treturn false\n\telse\n\t\tlocal max = 0\n\t\tfor i = 1, #q do\n\t\t\tif max\
    \ < q[i] then\n\t\t\t\tmax = q[i]\n\t\t\tend\n\t\tend\n\t\tif max < w then\n\t\
    \t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1bnndhv.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy1bnndhv.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Write your code here.\n\tlocal max_weight = w\n\tlocal is_balanced = true\n\t\
    local sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight\
    \ then\n\t\t\tis_balanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zhuzs6e.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zhuzs6e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ max_weight = w\n    local balanced = true\n    local sum = 0\n    for _, v in\
    \ ipairs(q) do\n        sum = sum + v\n        if sum > max_weight then\n    \
    \        balanced = false\n            break\n        end\n    end\n    return\
    \ balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hqhrl3d.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8hqhrl3d.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1u0nz0k.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb1u0nz0k.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum < w then\n\
    \t\treturn false\n\telseif sum > w then\n\t\treturn true\n\telse\n\t\treturn will_it_fly(q,\
    \ w-sum)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6lp6_di.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc6lp6_di.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntg_os1u.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpntg_os1u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > max_weight then \n      max_weight = sum\n    end\n  end\n  return\
    \ max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeny2s85j.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeny2s85j.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\tif balanced and sum == max_weight then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi96sthb.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxi96sthb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < w\
    \ then\n\t\treturn false\n\tend\n\tlocal max = 0\n\tfor _, v in ipairs(q) do\n\
    \t\tif v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\tif max <= w then\n\t\treturn\
    \ true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ah21a8l.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ah21a8l.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Base case\n\tif q == nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ru1s2sy.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  return sum\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkguikc5n.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkguikc5n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpturr_yfb.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpturr_yfb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Write your code here.\n  local sum = 0\n  for i = 1, #q do\n    sum = sum +\
    \ q[i]\n  end\n  if sum < w then\n    return false\n  else\n    local max = 0\n\
    \    for i = 1, #q do\n      if max < q[i] then\n        max = q[i]\n      end\n\
    \    end\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_ilzrlc.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx_ilzrlc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Base case\n  if q == nil or w == nil then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi0s06pvi.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then\n    return true\n  elseif #q == 1 then\n    return q[1] == w\n\
    \  else\n    return will_it_fly(q[1:], w) and will_it_fly(q[#q], w)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqkh8_8v_.lua:16: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if q == false then return false end\n  if\
    \ q == true then return true end\n  if #q == 1 then return true end\n  if #q ==\
    \ 2 then return true end\n  if #q == 3 then return true end\n  if #q > 3 then\
    \ return false end\n  local max_weight = w\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then max_weight = sum end\n  end\n\
    \  return max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g8fw9dn.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3g8fw9dn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < w\
    \ then\n\t\treturn false\n\tend\n\tlocal max = 0\n\tfor _, v in ipairs(q) do\n\
    \t\tif max < v then\n\t\t\tmax = v\n\t\tend\n\tend\n\tif max <= w then\n\t\treturn\
    \ true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp197thtnz.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp197thtnz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if #q == 0 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzmzo925j.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n    end\n  end\n  return bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetmswqb0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetmswqb0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ bal = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum\
    \ > w then\n\t\t\tbal = bal + 1\n\t\tend\n\tend\n\treturn bal <= 1 and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fet86qr.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fet86qr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor _, v in pairs(q)\
    \ do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\
    \t\tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jf75nk8.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4jf75nk8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ q == nil then return false end\n  if w == nil then return false end\n  if #q\
    \ == 0 then return true end\n  if #q == 1 then return q[1] == w end\n  if #q ==\
    \ 2 then return q[1]+q[2] == w end\n  if #q == 3 then return q[1]+q[2]+q[3] ==\
    \ w end\n  if #q == 4 then return q[1]+q[2]+q[3]+q[4] == w end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09ma7l96.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp09ma7l96.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ bal = 0\n    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n\
    \        if sum > w then\n            bal = bal + 1\n        end\n    end\n  \
    \  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7zi6zq_.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr7zi6zq_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ base case\n\tif q == nil then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpks4hdx23.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tlocal i = 1\n\t\
    while i <= #q do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced\
    \ = false\n\t\tend\n\t\ti = i + 1\n\tend\n\tif balanced and sum == max_weight\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwjy7oq2.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfwjy7oq2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then return true end\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then max_weight\
    \ = sum end\n  end\n  return max_weight <= w\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9atqyxsa.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9atqyxsa.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = 0\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\
    \tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tmax_weight = sum\n\t\t\
    end\n\t\tif sum == max_weight then\n\t\t\tbalanced = balanced + 1\n\t\tend\n\t\
    end\n\treturn balanced <= 1 and max_weight <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8rxrlzn.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf8rxrlzn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ bal = 0\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > w then\n      bal = bal + 1\n      sum = 0\n    end\n  end\n  return bal <=\
    \ 1 and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1xie9o0.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1xie9o0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then\n    return true\n  end\n  local max_weight = w\n  local balanced\
    \ = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum\
    \ > max_weight then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ylv2kao.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ylv2kao.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > w then\n      balanced = false\n    end\n  end\n  return balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposi410e0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmposi410e0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor _, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\
    \t\tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkunvjyd.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfkunvjyd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1u0nz0k.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb1u0nz0k.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\
    \t\tsum = sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\
    \tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpturr_yfb.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpturr_yfb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ balanced = true\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n        if sum > w then\n            balanced = false\n            break\n\
    \        end\n    end\n    return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0nn1aj9.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt0nn1aj9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ base case\n  if q == nil then return false end\n  -- base case\n  if w == 0\
    \ then return true end\n  -- base case\n  if w == 1 then return false end\n  --\
    \ base case\n  if w == 2 then return true end\n  -- base case\n  if w == 3 then\
    \ return false end\n  -- base case\n  if w == 4 then return true end\n  -- base\
    \ case\n  if w == 5 then return false end\n  -- base case\n  if w == 6 then return\
    \ true end\n  -- base case\n  if w == 7 then return false end\n  -- base case\n\
    \  if w == 8 then return true end\n  -- base case\n  if w == 9 then return false\
    \ end\n  -- base case\n  if w == 10 then return true end\n  -- base case\n  if\
    \ w == 11 then return false end\n  -- base case\n  if w == 12 then return true\
    \ end\n  -- base case\n  if w == 13 then return false end\n  -- base case\n  if\
    \ w == 14 then return true end\n  -- base case\n  if w == 15 then return false\
    \ end\n  -- base case\n  if w == 16 then return true end\n  -- base case\n  if\
    \ w == 17 then return false end\n  -- base case\n  if w == 18 then return true\
    \ end\n  -- base case\n  if w == 19 then return false end\n  -- base case\n  if\
    \ w == 20 then return true end\n  -- base case\n  if w == 21 then return false\
    \ end\n  -- base case\n  if w == 22 then return true end\n  -- base case\n  if\
    \ w == 23 then return false end\n  -- base case\n  if w == 24 then return true\
    \ end\n  -- base case\n  if w == 25 then return false end\n  -- base case\n  if\
    \ w == 26 then return true end\n  -- base case\n  if w == 27 then return false\
    \ end\n  -- base case\n  if w == 28 then return true end\n  -- base case\n  if\
    \ w == 29 then return false end\n  -- base case\n  if w == 30 then return true\
    \ end\n  -- base case\n  if w == 31 then return false end\n  -- base case\n  if\
    \ w == 32 then return true end\n  -- base case\n  if w == 33 then return false\
    \ end\n  -- base case\n  if w == 34 then return true end\n  -- base case\n  if\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ip_42z2.lua:85: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy2p_pk.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfiy2p_pk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < w\
    \ then\n\t\treturn false\n\tend\n\tlocal max = 0\n\tfor _, v in ipairs(q) do\n\
    \t\tif v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\tif max <= w then\n\t\treturn\
    \ true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ah21a8l.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ah21a8l.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ max_weight = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor _, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\
    \t\tend\n\tend\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkunvjyd.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfkunvjyd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ base case\n\tif q == nil or w == nil then\n\t\treturn false\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9k6ndfd3.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayfb65ts.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayfb65ts.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \t\tif sum > w then\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntg_os1u.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpntg_os1u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Base case\n  if #q == 0 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0u_7qes.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \      balanced = false\n    end\n  end\n  return balanced and max_weight <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ewt1d_.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ewt1d_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750538
