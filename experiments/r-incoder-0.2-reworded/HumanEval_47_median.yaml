name: HumanEval_47_median
language: r
prompt: "# Return median of elements in the list l.\n# >>> median(c(3, 1, 2, 4, 5))\n\
  # 3\n# >>> median(c(-10, 4, 6, 1000, 10, 20))\n# 15.0\nmedian <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- median\n    if(!identical(candidate(c(3,\
  \ 1, 2, 4, 5)), 3)){quit('no', 1)}\n    if(!identical(candidate(c(-10, 4, 6, 1000,\
  \ 10, 20)), 8.0)){quit('no', 1)}\n    if(!identical(candidate(c(5)), 5)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(6, 5)), 5.5)){quit('no', 1)}\n    if(!identical(candidate(c(8,\
  \ 1, 3, 9, 9, 2, 7)), 7)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  l <- sort(l)\n  return(l[length(l)/2])\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to find the median of\
    \ a vector, not the mean of a vector.\n<|/ c |>\n<| c |>\nI believe this does\
    \ answer the question. OP wants to find the median of a vector, not the mean of\
    \ a vector. `median` returns the median of a vector, `mean` returns the mean of\
    \ a vector. `median` returns the median of a vector, `mean` returns the mean of\
    \ a vector. `median` returns the median of a vector, `mean` returns the mean of\
    \ a vector. `median` returns the median of a vector, `mean` returns the mean of\
    \ a vector. `median` returns the median of a vector, `mean` returns the mean of\
    \ a vector. `median` returns the median of a vector, `mean` returns the mean of\
    \ a vector.\n<|/ c |>\n<| c |>\nThe question asks for the median of a vector,\
    \ not the mean of a vector. `median` returns the median of a vector, `mean` returns\
    \ the mean of a vector. `median` returns the median of a vector, `mean` returns\
    \ the mean of a vector. `median` returns the median of a vector, `mean` returns\
    \ the mean of a vector. `median` returns the median of a vector, `mean` returns\
    \ the mean of a vector. `median` returns the median of a vector, `mean` returns\
    \ the mean of a vector. `median` returns the median of a vector, `mean` returns\
    \ the mean of a vector. `median` returns the median of a vector, `mean` returns\
    \ the mean of a vector.\n<|/ c |>\n<| c |>\nThe question asks for the median of\
    \ a vector, not the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector. `median` returns the median of a vector,\
    \ `mean` returns the mean of a vector.\n<|/ c |>\n<| c |>\nThe question asks for\
    \ the median of a vector, not the mean of a vector. `median` returns the median\
    \ of a vector, `mean` returns the mean of a vector. `median` returns the median\
    \ of a ", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,median |>\nHere's\
    \ a solution that doesn't require any packages:\n<code>\nmedian.list <- function(x)\
    \ {\n  n <- length(x)\n  if(n < 1) return(NA)\n  m <- floor(n/2)\n  return(x[m])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wrote a function that calculates the\
    \ median of a list of numbers. \n<code>\nmedian.list <- function(x) {\n  n <-\
    \ length(x)\n  if(n < 1) return(NA)\n  m <- floor(n/2)\n  return(x[m])\n}\n</code>\n\
    <|/ a dscore=2 tags=r,median |>\n<| a tags=r,median |>\nI wrote a function that\
    \ calculates the median of a list of numbers. \n<code>\nmedian.list <- function(x)\
    \ {\n  n <- length(x)\n  if(n < 1) return(NA)\n  m <- floor(n/2)\n  return(x[m])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,median |>\nI wrote a function that\
    \ calculates the median of a list of numbers. \n<code>\nmedian.list <- function(x)\
    \ {\n  n <- length(x)\n  if(n < 1) return(NA)\n  m <- floor(n/2)\n  return(x[m])\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian.list <- function(x)\
    \ {\n  n <- length(x)\n  if(n < 1) return(NA)\n  m <- floor(n/2)\n  return(x[m])\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian.list\
    \ <- function(x) {\n  n <- length(x)\n  if(n < 1) return(NA)\n  m <- floor(n/2)\n\
    \  return(x[m])\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\n\
    median.list <- function(x) {\n  n <- length(x)\n  if(n < 1) return(NA)\n  m <-\
    \ floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nmedian.list <- function(x) {\n  n <- length", "\n  n <- length(l)\n  if\
    \ (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r,sorting |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to make it more\
    \ efficient. For example, `median(c(NA,NA,NA,NA,NA,NA,NA,NA))` returns `NA` but\
    \ `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))` returns `NA`. Is there a way\
    \ to fix this?\n<|/ c |>\n<| c |>\nYes, you can fix it by adding `na.rm = TRUE`\
    \ to the `sort` call.\n<|/ c |>\n<| c |>\nI added `na.rm = TRUE` to the `sort`\
    \ call, but I still get the same result. `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` but `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))` returns\
    \ `NA`. Is there a way to fix this?\n<|/ c |>\n<| c |>\nI added `na.rm = TRUE`\
    \ to the `sort` call, but I still get the same result. `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` but `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))` returns\
    \ `NA`. Is there a way to fix this?\n<|/ c |>\n<| c |>\nI added `na.rm = TRUE`\
    \ to the `sort` call, but I still get the same result. `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` but `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))` returns\
    \ `NA`. Is there a way to fix this?\n<|/ c |>\n<| a dscore=4 |>\nThe median of\
    \ a vector is the middle value.  So you can just find the middle value and subtract\
    \ it from the vector to get the median.\n<code>\nmedian(", "\n  n <- length(l)\n\
    \  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nI like your use of median for finding the median. I've been using it for\
    \ years but never thought of using it for finding the median.\n<|/ c |>\n<| c\
    \ |>\nI like your use of median for finding the median. I've been using it for\
    \ years but never thought of using it for finding the median.\n<|/ c |>\n<| a\
    \ dscore=5 tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ provide an answer to the question. `median` returns the median of a numeric\
    \ vector. `1:10` creates a numeric vector with 10 elements. `median` returns the\
    \ median of the numeric vector.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post.\n<|/ c |>\n<| c |>\nThis does provide an answer\
    \ to the question. `median` returns the median of a numeric vector. `1:10` creates\
    \ a numeric vector with 10 elements. `median` returns the median of the numeric\
    \ vector.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| a tags=r |>\nThe median is defined as the middle value in\
    \ a sorted list. \n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ provide an answer to the question. `median` returns the median of a numeric\
    \ vector. `1:10` creates a numeric vector with 10 elements. `median` returns the\
    \ median of the numeric vector.\n<|/ c |>\n<| a tags=r |>\nThe median is defined\
    \ as the middle value in a sorted list. \n<code>\nmedian(1:10)\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or ", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like the idea of using median() but I don't think it works\
    \ with negative numbers. I got this error when trying to run median(c(-10, 4,\
    \ 6, 1000, 10, 20)):\nError in median(c(-10, 4, 6, 1000, 10, 20)) : \n  non-numeric\
    \ argument to binary operator\n<|/ c |>\n<| c |>\nYes, it does work. Try it yourself\
    \ with `median(c(-10, 4, 6, 1000, 10, 20))`. You might want to read `?median`\
    \ for more info.\n<|/ c |>\n<| c |>\nI did try it and it worked. Maybe I misunderstood\
    \ your comment. Sorry.\n<|/ c |>\n<| c |>\nI see what you mean. My comment was\
    \ in response to the OP's comment about negative numbers. I guess I misunderstood\
    \ your comment then.\n<|/ c |>\n<| c |>\nI guess I misunderstood your comment\
    \ then. Sorry.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r,median |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| c |>\nI disagree. While it does answer the question, it\
    \ is also a very inefficient solution. Sorting is a very expensive operation.\
    \ Sorting can be done in O(nlogn) time, but this solution requires O(n^2) time.\
    \ Sorting can be done in O(n) time, but this solution requires O(n^2) time. Sorting\
    \ can be done in O(n) time, but this solution requires O(n^2) time. Sorting can\
    \ be done in O(n) time, but this solution requires O(n^2) time. Sorting can be\
    \ done in O(n) time, but this solution requires O(n^2) time. Sorting can be done\
    \ in O(n) time, but this solution requires O(n^2) time. Sorting can be done in\
    \ O(n) time, but this solution requires O(n^2) time. Sorting can be done in O(n)\
    \ time, but this solution requires O(n^2) time. Sorting can be done in O(n) time,\
    \ but this solution requires O(n^2) time. Sorting can be done in O(n) time, but ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer but I think it would\
    \ be better to use the median function from the `stats` package instead of writing\
    \ your own.\n<|/ c |>\n<| c |>\nI agree, `median` from the `stats` package is\
    \ much more elegant. I'll update my answer.\n<|/ c |>\n<| c |>\nI agree that `median`\
    \ from the `stats` package is much more elegant. I'll update my answer.\n<|/ c\
    \ |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=1 tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<|\
    \ a tags=r dscore=1 |>", "\n  l <- sort(l)\n  return(median(l))\n}\n", "\n  l\
    \ <- sort(l)\n  n <- length(l)\n  if (n == 1) return(l)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n\
    <|/ a dscore=1 tags=r |>\n<| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n\
    <|/ a tags=r dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "\n  n <- length(l)\n \
    \ if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\n`median` already does this for you. `median(c(NA,NA,NA,NA))` returns `NA`.\n\
    <|/ c |>\n<| c |>\n`median(c(NA,NA,NA,NA))` returns `NA` because `median` does\
    \ not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA))` returns `NA`\
    \ because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))`\
    \ returns `NA` because `median` does not consider `NA` to be a value.  `median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA",
  "\n  l <- sort(l)\n  length(l) %/% 2\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer. I am not familiar with R, but I do know that it is possible\
    \ to do what I want with Python. I am looking for a way to do this in R. I am\
    \ not asking for a solution in Python.\n<|/ c |>\n<| c |>\nI added a solution\
    \ in R. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not familiar\
    \ with R, but I do know that it is possible to do what I want with Python. I am\
    \ looking for a way to do this in R. I am not asking for a solution in Python.\n\
    <|/ c |>\n<| c |>\nI added a solution in R. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I am not familiar with R, but I do know that it is possible\
    \ to do what I want with Python. I am looking for a way to do this in R. I am\
    \ not asking for a solution in Python.\n<|/ c |>\n<| a tags=python,r |>\nHere's\
    \ a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \ndf <- data.frame(\n  x = c(1,2,3,4,5,6,7,8,9,10),\n  y = c(1,2,3,4,5,6,7,8,9,10),\n\
    \  z = c(1,2,3,4,5,6,7,8,9,10)\n)\n\ndf %>%\n  mutate(\n    median = map_dbl(y,\
    \ ~median(sort(.x))),\n    median = map_dbl(z, ~median(sort(.x))),\n    median\
    \ = map_dbl(y, ~median(sort(.x))),\n    median = map_dbl(z, ~median(sort(.x))),\n\
    \    median = map_dbl(y, ~median(sort(.x))),\n    median = map_dbl(z, ~median(sort(.x))),\n\
    \    median = map_dbl(y, ~median(sort(.x))),\n    median = map_dbl(z, ~median(sort(.x))),\n\
    \    median = map_dbl(y, ~median(sort(.x))),\n    median = map_dbl(z, ~median(sort(.x))),\n\
    \    median = map_dbl(y, ~median(sort(.x))),\n    median = map_dbl(z, ~median(sort(.x))),\n\
    \    median = map_dbl(y, ~median(sort(.x))),\n    median = ", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if(n < 2) return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| c |>\nThis doesn't seem to work when there are NAs in the vector.\
    \ For example: `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n<| c |>\nI added\
    \ a fix for NAs\n<|/ c |>\n<| c |>\nThis doesn't seem to work when there are NAs\
    \ in the vector. For example: `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n\
    <| c |>\nI added a fix for NAs\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work when there are\
    \ NAs in the vector. For example: `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work when there are NAs in the vector. For example:\
    \ `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to\
    \ work when there are NAs in the vector. For example: `median(c(NA,1,2,3))` returns\
    \ `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work when there are NAs in the\
    \ vector. For example: `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work when there are NAs in the vector. For example: `median(c(NA,1,2,3))`\
    \ returns `NA`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't seem to work when there are NAs in the\
    \ vector. For example: `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work when there are NAs in the vector. For example: `median(c(NA,1,2,3))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work when there are NAs\
    \ in the vector. For example: `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work when there are NAs in the vector. For example:\
    \ `median(c(NA,1,2,3))` returns `NA`.\n<|/ c |>\n<| c ", "\n  l <- sort(l)\n \
    \ n <- length(l)\n  if (n < 1) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a tags=r,statistics |>\n<| c |>\nThe median of a set of numbers is defined as\
    \ the middle number of the set. Your function returns the middle number of the\
    \ sorted list, not the median.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted\
    \ to give a quick solution to the OP's problem and let him decide what to do with\
    \ it.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to give a quick solution\
    \ to the OP's problem and let him decide what to do with it.\n<|/ c |>\n<| c |>\n\
    I agree with you. I just wanted to give a quick solution to the OP's problem and\
    \ let him decide what to do with it.\n<|/ c |>\n<| c |>\nI agree with you. I just\
    \ wanted to give a quick solution to the OP's problem and let him decide what\
    \ to do with it.\n<|/ c |>\n<| a tags=r,statistics |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. No need\
    \ to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| a tags=r,statistics\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| a tags=r,statistics\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,statistics |>\n<|", "\n \
    \ l <- sort(l)\n  length(l) %/% 2\n}\n</code>\n<|/ a tags=r,list,median |>\n<|\
    \ c |>\nI like your `median` function but I think it would be better to return\
    \ `NA` rather than `Inf` when `length(l)` is odd.\n<|/ c |>\n<| c |>\nThanks,\
    \ I added a line to return `NA` when `length(l)` is odd.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n</code>\n<|/\
    \ a tags=r,list,median |>\n<| c |>\nThis doesn't work if your list contains factors.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median dscore=1 |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(names(sort(unlist(your_list))))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nmedian(as.numeric(names(sort(unlist(your_list))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>", "\n\
    \  l <- sort(l)\n  length(l)/2\n}\n", "\n  l <- sort(l)\n  length(l) %% 2 == 0\
    \ & length(l) > 1 & !is.na(l) & !is.nan(l) & !is.infinite(l)\n  median(l)\n}\n\
    </cell>\n<text>\nThe median of a vector is the value that would appear if we ordered\
    \ the vector from lowest to highest and divided the result by two. For example,\
    \ if the vector were:\n\n\n</text>\n<cell>\nc(-10, 4, 6, 1000, 10, 20)\n</cell>\n\
    <text>\nThe median is 10.\n\n\n</text>\n<text>\nThe median of a vector is defined\
    \ as the value that would appear if we ordered the vector from lowest to highest\
    \ and divided the result by two. For example, if the vector were:\n\n\n</text>\n\
    <cell>\nc(-10, 4, 6, 1000, 10, 20)\n</cell>\n<text>\nThe median is 10.\n\n\n</text>\n\
    <text>\nThe median of a vector is the value that would appear if we ordered the\
    \ vector from lowest to highest and divided the result by two. For example, if\
    \ the vector were:\n\n\n</text>\n<cell>\nc(-10, 4, 6, 1000, 10, 20)\n</cell>\n\
    <text>\nThe median is 10.\n\n\n</text>\n<text>\nThe median of a vector is the\
    \ value that would appear if we ordered the vector from lowest to highest and\
    \ divided the result by two. For example, if the vector were:\n\n\n</text>\n<cell>\n\
    c(-10, 4, 6, 1000, 10, 20)\n</cell>\n<text>\nThe median is 10.\n\n\n</text>\n\
    <text>\nThe median of a vector is the value that would appear if we ordered the\
    \ vector from lowest to highest and divided the result by two. For example, if\
    \ the vector were:\n\n\n</text>\n<cell>\nc(-10, 4, 6, 1000, 10, 20)\n</cell>\n\
    <text>\nThe median is 10.\n\n\n</text>\n<text>\nThe median of a vector is the\
    \ value that would appear if we ordered the vector from lowest to highest and\
    \ divided the result by two. For example, if the vector were:\n\n\n</text>\n<cell>\n\
    c(-10, 4, 6, 1000, 10, 20)\n</cell>\n<text>\nThe median is 10.\n\n\n</text>\n\
    <text>\nThe median of a vector is the value that would appear if we ordered the\
    \ vector from lowest to highest and divided the result by two. For example, if\
    \ the vector were:\n\n\n</text>\n<cell>\nc(-10, 4, 6, 1000, 10, 20)\n</cell>\n\
    <text>\nThe median is 10.\n\n\n</text>\n<text>\nThe median of a vector is the\
    \ value that would appear if we ordered the vector from lowest to highest and\
    \ divided the result by two. For example, if the vector were:\n\n\n</text>\n",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n == 0) return(NA)\n  return(l[n/2])\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| c |>\nThanks, this works well. I'm still\
    \ trying to understand how it works. I understand that `median` sorts the list\
    \ and then returns the middle element, but how does it know to return the middle\
    \ element of the sorted list? I thought it had to sort the list first to know\
    \ which element is the middle element. How does it know to sort it first?\n<|/\
    \ c |>\n<| c |>\nThe median of a list is defined as the middle number of the list\
    \ divided by the number of elements in the list. Since `median` sorts the list,\
    \ it knows to return the middle element of the sorted list. Since `median` sorts\
    \ the list, it knows to return the middle element of the sorted list. Since `median`\
    \ sorts the list, it knows to return the middle element of the sorted list. Since\
    \ `median` sorts the list, it knows to return the middle element of the sorted\
    \ list. Since `median` sorts the list, it knows to return the middle element of\
    \ the sorted list. Since `median` sorts the list, it knows to return the middle\
    \ element of the sorted list. Since `median` sorts the list, it knows to return\
    \ the middle element of the sorted list. Since `median` sorts the list, it knows\
    \ to return the middle element of the sorted list. Since `median` sorts the list,\
    \ it knows to return the middle element of the sorted list. Since `median` sorts\
    \ the list, it knows to return the middle element of the sorted list. Since `median`\
    \ sorts the list, it knows to return the middle element of the sorted list. Since\
    \ `median` sorts the list, it knows to return the middle element of the sorted\
    \ list. Since `median` sorts the list, it knows to return the middle element of\
    \ the sorted list. Since `median` sorts the list, it knows to return the middle\
    \ element of the sorted list. Since `median` sorts the list, it knows to return\
    \ the middle element of the sorted list. Since `median` sorts the list, it knows\
    \ to return the middle element of the sorted list. Since `median` sorts the list,\
    \ it knows to return the middle element of the sorted list. Since `median` sorts\
    \ the list, it knows to return the middle element of the sorted list. Since `median`\
    \ sorts the list, it knows to return the middle element of the sorted list. Since\
    \ `median` sorts the list, it knows to return the middle element of the sorted\
    \ list. Since `median` sorts the list, it knows to return the middle element of\
    \ the sorted list. Since `median` sorts the list, it knows to return the middle\
    \ element of the sorted list", "\n  l <- sort(l)\n  n <- length(l)\n  if (n <\
    \ 1) return(NA)\n  return(l[n/2])\n}\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector v and returns the mean of the absolute values of the elements\
    \ of v. For example, mean(abs(c(3, 1, 2, 4, 5))) = 2.5.\n\n\n</text>\n<cell>",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor((n +\
    \ 1) / 2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ work for me. `median(c(1,2,3,4,5))` returns `NA`.\n<|/ c |>\n<| c |>\n, that's\
    \ because `median` doesn't work on vectors of length less than 2. Try `median(c(1,2,3))`.\n\
    <|/ c |>\n<| c |>\n, `median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| c |>\n, `median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| c |>\n, `median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 tags=r |>\n\
    <| c |>\nThis doesn't work for me. `median(c(1,2,3,4,5))` returns `NA`.\n<|/ c\
    \ |>\n<| c |>\n, `median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| c |>\n, `median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| c |>\n, `median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| c |>\n, `median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't work for me. `median(c(1,2,3,4,5))` returns `NA`.\n<|/ c\
    \ |>\n<| c |>\n`median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| c |>\n`median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))`.\n\
    <|/ c |>\n<| c |>\n`median` works on vectors of length greater than 2. Try `median(c(1,2,3,4,5))",
  "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # median\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the\
    \ question, which is about how to get the median, not how to get the median.\n\
    <|/ c |>\n<| c |>\nThe question was about how to get the median, not how to get\
    \ the median.\n<|/ c |>\n<| c |>\nThe question was about how to get the median,\
    \ not how to get the median.\n<|/ c |>\n<| c |>\nThe question was about how to\
    \ get the median, not how to get the median.\n<|/ c |>\n<| c |>\nThe question\
    \ was about how to get the median, not how to get the median.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't answer the question, which is about how to get the median,\
    \ not how to get the median.\n<|/ c |>\n<| c |>\nThe question was about how to\
    \ get the median, not how to get the median.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    median(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to get the median, not how to get the\
    \ median.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't answer the question, which is about how\
    \ to get the median, not how to get the median.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to get the median, not how to get the\
    \ median.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't answer the question, which is about how\
    \ to get the median, not how to get the median.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    median(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to get the median, not how to get the\
    \ median.\n<|/ c |>\n<| a dscore=1 |>", "\n  l <- sort(l)\n  length(l) / 2 # median\n\
    }\n", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like your use of median() here, but I think it would be more\
    \ accurate to say \"the median of the list\", rather than \"the median of the\
    \ list elements\".\n<|/ c |>\n<| c |>\nI agree with you. I've edited the answer\
    \ to reflect this.\n<|/ c |>\n<| c |>\nI like this solution, but I find it a little\
    \ too complicated for my tastes. I like it because it doesn't require any packages.\
    \ I like it because it's easy to understand.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. I've edited the answer to reflect this.\n<|/ c |>\n<| c |>\nI like this\
    \ solution, but I find it a little too complicated for my tastes. I like it because\
    \ it doesn't require any packages. I like it because it's easy to understand.\n\
    <|/ c |>\n<| a tags=list,r |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if your list contains factors.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if your list contains factors.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if your list contains factors.\n<|/ c |>\n<| c |>\n\
    This doesn't work if your list contains factors.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if your list contains factors.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=list,r |>\n<| c |>\nThis doesn't work if your list contains\
    \ factors.\n<|/ c |>\n<| c |>\nThis doesn't work if your list contains factors.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if your list contains factors.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if your list contains factors.\n<|/ c |>\n<| c |>\n\
    This doesn't work if your list contains factors.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a tags=list,r |>\n\
    <| c |>\nThis doesn't work if ", "\n  l <- sort(l)\n  length(l)%%2 == 0 & length(l)\
    \ > 1 & !is.na(l) & !is.na(median(l[seq(1, length(l), 2)]))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis doesn't seem to work when there are two numbers in\
    \ the list that are equal.  For example, median(c(1,2,2,3,4))\n<|/ c |>\n<| c\
    \ |>\nI added a version that works with equal numbers. I didn't test it thoroughly\
    \ though.\n<|/ c |>\n<| c |>\nI added a version that works with equal numbers.\
    \ I didn't test it thoroughly though.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution\
    \ that works with unequal numbers:\n<code>\nmedian2 <- function(x) {\n  x <- sort(x)\n\
    \  n <- length(x)\n  if(n %% 2 == 0) n <- n + 1\n  if(n < 2) return(x)\n  if(n\
    \ > 2) return(median(x[seq(1, n/2, 2)]))\n  return(median(x[seq(1, n, 2)]))\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| a dscore=2 |>\nHere's a solution that works\
    \ with unequal numbers:\n<code>\nmedian3 <- function(x) {\n  x <- sort(x)\n  n\
    \ <- length(x)\n  if(n %% 2 == 0) n <- n + 1\n  if(n < 2) return(x)\n  if(n >\
    \ 2) return(median(x[seq(1, n/2, 2)]))\n  return(median(x[seq(1, n, 2)]))\n}\n\
    </code>\n<|/ a tags=median,r |>\n<| a dscore=1 |>\nI wrote a function that returns\
    \ the median of a vector or list. It also works with unequal numbers. \n<code>\n\
    median.list <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if(n %% 2 ==\
    \ 0) n <- n + 1\n  if(n < 2) return(x)\n  if(n > 2) return(median(x[seq(1, n/2,\
    \ 2)]))\n  return(median(x[seq(1, n, 2)]))\n}\n</code>\n<|/ a tags=median,r |>\n\
    <| a tags=median,r |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n\
    \  n <- length(x)\n  if(n %% 2 == 0) n <- n + 1\n  if(n < 2) return(x)\n  if(n\
    \ > 2) return(median(x[seq(1, n/2, 2)]))\n", "\n  l <- sort(l)\n  length(l) /\
    \ 2 \n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work if there are NAs\
    \ in the list. `median(c(NA,1,2,3,4,5))` returns `NA` instead of `3`.\n<|/ c |>\n\
    <| c |>\nI added a version that handles NAs.\n<|/ c |>\n<| c |>\nI added a version\
    \ that handles NAs.\n<|/ c |>\n<| a dscore=5 |>\nThe median function from the\
    \ stats package is very efficient and can handle NAs very well.\n<code>\nmedian(c(NA,1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns `NA`\
    \ instead of `3`.\n<|/ c |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns `NA` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns `NA` instead of\
    \ `3`.\n<|/ c |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns `NA` instead of `3`.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe median function from the stats package is very\
    \ efficient and can handle NAs very well. \n<code>\nmedian(c(NA,1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns `NA`\
    \ instead of `3`.\n<|/ c |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns `NA` instead\
    \ of `3`.\n<|/ c |>\n<| a tags=r |>\nThe median function from the stats package\
    \ is very efficient and can handle NAs very well.\n<code>\nmedian(c(NA,1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a dscore=5 |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns\
    \ `NA` instead of `3`.\n<|/ c |>\n<| c |>\n`median(c(NA,1,2,3,4,5))` returns `NA`\
    \ instead of `3`.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(c(NA,1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a dscore=5 |>\n<|", "\n  l <- sort(l)\n  length(l) / 2 - floor((length(l)\
    \ + 1) / 2)\n}\n</code>\n<|/ a tags=r,statistics |>\n<| c |>\nThank you very much\
    \ for your answer! I really appreciate it! I did some testing and it seems that\
    \ your function works better than my median function. I will post my results soon!\n\
    <|/ c |>\n<| c |>\nI posted my results. I hope you find it useful!\n<|/ c |>\n\
    <| c |>\nI posted my results. I hope you find it useful!\n<|/ c |>\n<| a tags=r,statistics\
    \ |>\nI did some testing and it seems that your function works better than my\
    \ median function. I will post my results soon!\n<code>", "\n  l <- sort(l)\n\
    \  length(l) / 2 \n}\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the mode of a list of numbers. Write a test that checks that the function returns\
    \ the correct mode for several different inputs.\n\n\n</text>\n<cell>", "\n  l\
    \ <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n}\n",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\n`median` doesn't work if there are\
    \ negative numbers in the list. `median(c(-10, 4, 6, 1000, 10, 20))` returns `15.0`\
    \ instead of `10.0`.\n<|/ c |>\n<| c |>\nI added a version that handles negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n`median` doesn't\
    \ work if there are negative numbers in the list. `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that handles negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| a\
    \ tags=r,sorting |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the list. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| c |>\n\
    `median` doesn't work if there are negative numbers in the list. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| c |>\n\
    `median` doesn't work if there are negative numbers in the list. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| c |>\n\
    `median` doesn't work if there are negative numbers in the list. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| c |>\n\
    `median` doesn't work if there are negative numbers in the list. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| a tags=r,sorting\
    \ |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't work if there are negative numbers in the list. `median(c(-10, 4,\
    \ 6, 1000, 10, 20))` returns `15.0` instead of `10.0`.\n<|/ c |>\n<| c |>\n`median`\
    \ doesn't work if there are negative numbers in the list. `median(c(-", "\n  n\
    \ <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median` can be implemented\
    \ with just `sort` as shown in other answers.\n<|/ c |>\n<| c |>\nI agree, this\
    \ is much more elegant than my solution. Thanks!\n<|/ c |>\n<| c |>\nI agree with\
    \ you, this is much more elegant than my solution. Thanks!\n<|/ c |>\n<| c |>\n\
    I agree with you, this is much more elegant than my solution. Thanks!\n<|/ c |>\n\
    <| c |>\nI agree with you, this is much more elegant than my solution. Thanks!\n\
    <|/ c |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. `median` can be implemented\
    \ with just `sort` as shown in other answers.\n<|/ c |>\n<| c |>\nI agree, this\
    \ is much more elegant than my solution. Thanks!\n<|/ c |>\n<| c |>\nI agree,\
    \ this is much more elegant than my solution. Thanks!\n<|/ c |>\n<| c |>\nI agree,\
    \ this is much more elegant than my solution. Thanks!\n<|/ c |>\n<| c |>\nI agree,\
    \ this is much more elegant than my solution. Thanks!\n<|/ c |>\n<| a tags=r,sorting\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` can be implemented with just `sort` as shown\
    \ in other answers.\n<|/ c |>\n<| c |>\nI agree, this is much more elegant than\
    \ my solution. Thanks!\n<|/ c |>\n<| c |>\nI agree, this is much more elegant\
    \ than my solution. Thanks!\n<|/ c |>\n<| c |>\nI agree, this is much more elegant\
    \ than my solution. Thanks!\n<|/ c |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\n", "\n  n <- length(l)\n  if (n == 0) return(NA)\n\
    \  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n  length(l) %/% 2\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a vector with more than\
    \ two elements. For example, median(c(1,2,3,4,5,6,7,8,9,10)) returns 5.\n<|/ c\
    \ |>\n<| c |>\n, thanks for pointing that out. I've updated the answer accordingly.\n\
    <|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if you have a vector with more than two elements.\
    \ For example, median(c(1,2,3,4,5,6,7,8,9,10)) returns 5.\n<|/ c |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if you have a vector with more than two elements. For example, median(c(1,2,3,4,5,6,7,8,9,10))\
    \ returns 5.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a tags=median,r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a tags=median,r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a tags=median,r |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a tags=median,r |>", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a list with\
    \ negative numbers. Try median(c(-10, 4, 6, 1000, 10, 20)).\n<|/ c |>\n<| c |>\n\
    Yes, I agree with you. Thanks for pointing that out. I've updated the answer.\n\
    <|/ c |>\n<| a |>\nI came up with another solution that doesn't require sorting\
    \ the list first. \n<code>\nmedian.list <- function(l) {\n  n <- length(l) / 2\n\
    \  if(length(l) == 0) return(NA)\n  if(length(l) == 1) return(l[1])\n  if(length(l)\
    \ == 2) return(l[1])\n  if(length(l) == 3) return(l[2])\n  if(length(l) == 4)\
    \ return(l[2])\n  if(length(l) == 5) return(l[3])\n  if(length(l) == 6) return(l[3])\n\
    \  if(length(l) == 7) return(l[4])\n  if(length(l) == 8) return(l[4])\n  if(length(l)\
    \ == 9) return(l[5])\n  if(length(l) == 10) return(l[5])\n  if(length(l) == 11)\
    \ return(l[6])\n  if(length(l) == 12) return(l[6])\n  if(length(l) == 13) return(l[7])\n\
    \  if(length(l) == 14) return(l[7])\n  if(length(l) == 15) return(l[8])\n  if(length(l)\
    \ == 16) return(l[8])\n  if(length(l) == 17) return(l[9])\n  if(length(l) == 18)\
    \ return(l[9])\n  if(length(l) == 19) return(l[10])\n  if(length(l) == 20) return(l[10])\n\
    \  if(length(l) == 21) return(l[11])\n  if(length(l) == 22) return(l[11])\n  if(length(l)\
    \ == 23) return(l[12])\n  if(length(l) == 24) return(l[12])\n  if(length(l) ==\
    \ 25) return(l[13])\n  if(length(l) == 26) return(l[13])\n  if(length(l) == 27)\
    \ return(l[14])\n  if(length(l) == 28) return(l[14])\n  if(length(l) == 29) return(l[15])\n\
    \  if(length(l) == 30) return(l[15])\n  if(length(l) == 31) return(l[16])\n  if(length(l)\
    \ == 32) return(l[16])\n", "\n  l <- sort(l)\n  length(l) %% 2 == 0 & length(l)\
    \ > 1 & !is.na(l) & !is.na(l)[1] & !is.na(l)[2] & !is.na(l)[3] & !is.na(l)[4]\
    \ & !is.na(l)[5] & !is.na(l)[6] & !is.na(l)[7] & !is.na(l)[8] & !is.na(l)[9] &\
    \ !is.na(l)[10] & !is.na(l)[11] & !is.na(l)[12] & !is.na(l)[13] & !is.na(l)[14]\
    \ & !is.na(l)[15] & !is.na(l)[16] & !is.na(l)[17] & !is.na(l)[18] & !is.na(l)[19]\
    \ & !is.na(l)[20] & !is.na(l)[21]\n  median(l)\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r |>\nI wrote a function that will return the median of a list of numbers.\
    \ \n<code>\nmedian.list <- function(x){\n  if(length(x) == 0){\n    return(NA)\n\
    \  }\n  if(length(x) == 1){\n    return(x[1])\n  }\n  if(length(x) == 2){\n  \
    \  return(x[1])\n  }\n  if(length(x) == 3){\n    return(x[2])\n  }\n  if(length(x)\
    \ == 4){\n    return(x[2])\n  }\n  if(length(x) == 5){\n    return(x[2])\n  }\n\
    \  if(length(x) == 6){\n    return(x[3])\n  }\n  if(length(x) == 7){\n    return(x[3])\n\
    \  }\n  if(length(x) == 8){\n    return(x[3])\n  }\n  if(length(x) == 9){\n  \
    \  return(x[4])\n  }\n  if(length(x) == 10){\n    return(x[4])\n  }\n  if(length(x)\
    \ == 11){\n    return(x[4])\n  }\n  if(length(x) == 12){\n    return(x[5])\n \
    \ }\n  if(length(x) == 13){\n    return(x[5])\n  }\n  if(length(x) == 14){\n \
    \   return(x[5])\n  }\n  if(length(x) == 15){\n    return(x[5])\n  }\n  if(length(x)\
    \ == 16){\n    return(x[6])\n  }\n  if(length(x) == 17){\n    return(x[6])\n \
    \ }\n  if(length(x) == 18){\n", "\n  l <- sort(l)\n  length(l) / 2 - floor((length(l)\
    \ + 1) / 2)\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your `median` function\
    \ - it works well for me. Thanks!\n<|/ c |>\n<| a |>\nI wrote a function that\
    \ does this for me:\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  n\
    \ <- length(x)\n  if(n%%2 == 1) return(x[n/2])\n  return(x[(n+1)/2])\n}\n</code>\n\
    <|/ a dscore=4 tags=r |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to make it more efficient. Maybe by avoiding sorting and just returning\
    \ the middle element when n is even?\n<|/ c |>\n<| c |>\nI doubt that this is\
    \ more efficient, but you could try `median.list <- function(x) {\n  n <- length(x)\n\
    \  if(n%%2 == 1) return(x[n/2])\n  return(x[(n+1)/2])\n}`\n<|/ c |>\n<| c |>\n\
    I added this as a separate answer, because I thought it would be helpful to see\
    \ a solution without sorting and without using if-statements.\n<|/ c |>\n<| a\
    \ dscore=4 |>\nI like using median() from base R:\n<code>\nmedian(c(1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| a dscore=4 |>\nI like using median() from\
    \ base R:\n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a\
    \ |>\nI like using median() from base R:\n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n\
    </code>\n<|/ a tags=r dscore=4 |>\n<| a tags=r |>\nI like using median() from\
    \ base R:\n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a |>\nI like using median() from base R:\n<code>\nmedian(c(1,2,3,4,5))\n[1]\
    \ 3\n</code>\n<|/ a dscore=4 tags=r |>\n<| a dscore=4 |>\nI like using median()\
    \ from base R:\n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\nI like using median() from base ", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # median\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. I'm still\
    \ a bit confused though. How would I go about using median to find the median\
    \ of a list of numbers?\n<|/ c |>\n<| c |>\nI added an example to my answer.\n\
    <|/ c |>\n<| c |>\nThanks for the example. I'm still a bit confused though. How\
    \ would I go about using median to find the median of a list of numbers?\n<|/\
    \ c |>\n<| c |>\nThe median of a list of numbers is just the middle number of\
    \ the list. `median(c(3, 1, 2, 4, 5))` returns `3`.\n<|/ c |>\n<| c |>\nI added\
    \ an example to my answer.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer. I'm still a bit confused\
    \ though. How would I go about using median to find the median of a list of numbers?\n\
    <|/ c |>\n<| c |>\nThe median of a list of numbers is just the middle number of\
    \ the list. `median(c(3, 1, 2, 4, 5))` returns `3`.\n<|/ c |>\n<| c |>\nI added\
    \ an example to my answer.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a list of\
    \ numbers is just the middle number of the list. median(c(3, 1, 2, 4, 5)) returns\
    \ 3.\n<code>\nmedian(c(3, 1, 2, 4, 5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a\
    \ tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<|\
    \ a tags=r |>\n<code>\nmedian(sort(x))\n", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your answer but\
    \ I don't think it works with negative numbers. Try median(c(-10, 4, 6, 1000,\
    \ 10, 20)) and you'll get NA.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n\
    <| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=5 tags=r |>\n\
    <| c |>\nThis doesn't work for negative numbers. Try median(c(-10, 4, 6, 1000,\
    \ 10, 20)) and you'll get NA.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. Try median(c(-10, 4, 6, 1000, 10, 20)) and you'll get NA.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. Try median(c(-10, 4, 6, 1000,\
    \ 10, 20)) and you'll get NA.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for negative numbers. Try\
    \ median(c(-10, 4, 6, 1000, 10, 20)) and you'll get NA.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try median(c(-10, 4, 6, 1000, 10, 20)) and\
    \ you'll get NA.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(c(3,1,2,4,5))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for negative numbers. Try median(c(-10,\
    \ 4, 6, 1000, 10, 20)) and you'll get NA.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. Try median(c(-10, 4, 6, 1000, 10, 20)) and you'll get\
    \ NA.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try median(c(-10,\
    \ 4, 6, 1000, 10, 20)) and you'll get NA.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    median(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. Try median(c(-10, 4, 6, 1000, 10, 20)) and you'll get\
    \ NA.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. ", "\n  n <-\
    \ length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ seem to work if you have a vector of length 0\n<|/ c |>\n<| c |>\nIt works with\
    \ `median(c(NA,NA,NA,NA))` which returns `NA`\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you have a vector of length 0\n<|/ c |>\n<| c |>\nIt works with `median(c(NA,NA,NA,NA))`\
    \ which returns `NA`\n<|/ c |>\n<| c |>\nIt doesn't work if you have a vector\
    \ of length 0\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if you have a vector of length\
    \ 0\n<|/ c |>\n<| c |>\nIt works with `median(c(NA,NA,NA,NA))` which returns `NA`\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you have a vector of length 0\n<|/ c |>\n\
    <| c |>\nIt works with `median(c(NA,NA,NA,NA))` which returns `NA`\n<|/ c |>\n\
    <| c |>\nIt doesn't work if you have a vector of length 0\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ seem to work if you have a vector of length 0\n<|/ c |>\n<| c |>\nIt works with\
    \ `median(c(NA,NA,NA,NA))` which returns `NA`\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you have a vector of length 0\n<|/ c |>\n<| c |>\nIt works with `median(c(NA,NA,NA,NA))`\
    \ which returns `NA`\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't seem to work if you have a vector of length\
    \ 0\n<|/ c |>\n<| c |>\nIt works with `median(c(NA,NA,NA,NA))` which returns `NA`\n\
    <|/ c |>\n<| c |>\nIt ", "\n  l <- sort(l)\n  length(l) %% 2 == 0 & length(l)\
    \ > 1 & !is.na(l) & !is.na(l)[1] & !is.na(l)[2] & !is.na(l)[3] & !is.na(l)[4]\
    \ & !is.na(l)[5] & !is.na(l)[6] & !is.na(l)[7] & !is.na(l)[8] & !is.na(l)[9] &\
    \ !is.na(l)[10] & !is.na(l)[11] & !is.na(l)[12] & !is.na(l)[13] & !is.na(l)[14]\
    \ & !is.na(l)[15] & !is.na(l)[16] & !is.na(l)[17] & !is.na(l)[18] & !is.na(l)[19]\
    \ & !is.na(l)[20] & !is.na(l)[21] & !is.na(l)[22] & !is.na(l)[23] & !is.na(l)[24]\
    \ & !is.na(l)[25] & !is.na(l)[26] & !is.na(l)[27] & !is.na(l)[28] & !is.na(l)[29]\
    \ & !is.na(l)[30] & !is.na(l)[31] & !is.na(l)[32] & !is.na(l)[33] & !is.na(l)[34]\
    \ & !is.na(l)[35] & !is.na(l)[36] & !is.na(l)[37] & !is.na(l)[38] & !is.na(l)[39]\
    \ & !is.na(l)[40] & !is.na(l)[41] & !is.na(l)[42] & !is.na(l)[43] & !is.na(l)[44]\
    \ & !is.na(l)[45] & !is.na(l)[46] & !is.na(l)[47] & !is.na(l)[48] & !is.na(l)[49]\
    \ & !is.na(l)[50] & !is.na(l)[51] & !is.na(l)[52] & !is.na(l)[53] & !is.na(l)[54]\
    \ & !is.na(l)[55] & !is.na(l)[56] & !", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution,\
    \ although I prefer `median(sort(l))` because it's more efficient.\n<|/ c |>\n\
    <| c |>\nI agree, `median(sort(l))` is more efficient.\n<|/ c |>\n<| c |>\nI like\
    \ this solution as well, although I prefer `median(sort(l))` because it's more\
    \ efficient.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a vector is defined as\
    \ the middle value of a sorted vector.  So the median of a vector is simply the\
    \ middle value of a sorted vector.  So the median of a vector is simply the middle\
    \ value of a sorted vector.  So the median of a vector is simply the middle value\
    \ of a sorted vector.  So the median of a vector is simply the middle value of\
    \ a sorted vector.  So the median of a vector is simply the middle value of a\
    \ sorted vector.  So the median of a vector is simply the middle value of a sorted\
    \ vector.  So the median of a vector is simply the middle value of a sorted vector.\
    \  So the median of a vector is simply the middle value of a sorted vector.  So\
    \ the median of a vector is simply the middle value of a sorted vector.  So the\
    \ median of a vector is simply the middle value of a sorted vector.  So the median\
    \ of a vector is simply the middle value of a sorted vector.  So the median of\
    \ a vector is simply the middle value of a sorted vector.  So the median of a\
    \ vector is simply the middle value of a sorted vector.  So the median of a vector\
    \ is simply the middle value of a sorted vector.  So the median of a vector is\
    \ simply the middle value of a sorted vector.  So the median of a vector is simply\
    \ the middle value of a sorted vector.  So the median of a vector is simply the\
    \ middle value of a sorted vector.  So the median of a vector is simply the middle\
    \ value of a sorted vector.  So the median of a vector is simply the middle value\
    \ of a sorted vector.  So the median of a vector is simply the middle value of\
    \ a sorted vector.  So the median of a vector is simply the middle value of a\
    \ sorted vector.  So the median of a vector is simply the middle value of a sorted\
    \ vector.  So the median of a vector is simply the middle value of a sorted vector.\
    \  So the median of a vector is simply the middle value of a sorted vector.  So\
    \ the median of a vector is simply the middle value of a sorted vector.  So the\
    \ median of a vector is simply the middle value of a sorted vector.  So the median\
    \ of a ", "\n  l <- sort(l)\n  return(median(l))\n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the mean of a list of numbers.\n\n\n</text>\n\
    <cell>", "\n  l <- sort(l)\n  length(l)%%2 == 0 & length(l)%%2 == 1 & length(l)%%2\
    \ == 2 & length(l)%%2 == 3 & length(l)%%2 == 4 & length(l)%%2 == 5 & length(l)%%2\
    \ == 6 & length(l)%%2 == 7 & length(l)%%2 == 8 & length(l)%%2 == 9 & length(l)%%2\
    \ == 10 & length(l)%%2 == 11 & length(l)%%2 == 12 & length(l)%%2 == 13 & length(l)%%2\
    \ == 14 & length(l)%%2 == 15 & length(l)%%2 == 16 & length(l)%%2 == 17 & length(l)%%2\
    \ == 18 & length(l)%%2 == 19 & length(l)%%2 == 20 & length(l)%%2 == 21 & length(l)%%2\
    \ == 22 & length(l)%%2 == 23 & length(l)%%2 == 24 & length(l)%%2 == 25 & length(l)%%2\
    \ == 26 & length(l)%%2 == 27 & length(l)%%2 == 28 & length(l)%%2 == 29 & length(l)%%2\
    \ == 30 & length(l)%%2 == 31 & length(l)%%2 == 32 & length(l)%%2 == 33 & length(l)%%2\
    \ == 34 & length(l)%%2 == 35 & length(l)%%2 == 36 & length(l)%%2 == 37 & length(l)%%2\
    \ == 38 & length(l)%%2 == 39 & length(l)%%2 == 40 & length(l)%%2 == 41 & length(l)%%2\
    \ == 42 & length(l)%%2 == 43 & length(l)%%2 == 44 & length(l)%%2 == 45 & length(l)%%2\
    \ == 46 & length(l)%%2 == 47 & length(l)%%2 == 48 & length(l)%%2 == 49 & length(l)%%2\
    \ == 50 & length(l)%%2 == 51 & length(l)%%2 == 52 & length(l)%%2 == 53 & length(l)%%2\
    \ == 54 & length(l)%%2 == 55 & length(l)%%2 == 56 & length(l)%%2 == 57 & length(l)%%2\
    \ == 58 & length(l)%%2 == 59 & length(l)%%2 == 60 & length(l)%%2 == 61 & length(l)%%2\
    \ == 62 & length(l)%%2 == 63 & length(l)%%2 == 64 & length(l)%%2 == 65 & length(l)%%2\
    \ == 66 & length(l)%%2 == 67 & length(l)%%2 == 68 & length(l)%%2 == 69 & length(l)%%2\
    \ == 70 & length(l)%%2 == 71 & length(l)%%2 == 72 & length(l)%%2 == 73 & length(l)%%2\
    \ == 74 & length(l)%%2 == 75 & length(l)%%2 == 76 & length(l)%%2 == 77 & length(l)",
  "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns\
    \ `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ negative numbers. I tested it on R 3.2.2 and it works.\n<|/ c |>\n<| c |>\n\
    I added a version that works with negative numbers. I tested it on R 3.2.2 and\
    \ it works.\n<|/ c |>\n<| c |>\nI added a version that works with negative numbers.\
    \ I tested it on R 3.2.2 and it works.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work.\
    \ `median(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't seem to work. `median(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns `3`\
    \ instead of `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work.\
    \ `median(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't seem to work. `median(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns `3`\
    \ instead of `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(",
  "\n  sort(l)[length(l)%%2 == 0][length(l)%%2 == 1]\n}\n</code>\n<|/ a tags=median,r,list\
    \ |>\n<| c |>\nI like this solution, although it does require a little more typing\
    \ than my solution. Thanks!\n<|/ c |>\n<| c |>\nI like your solution too, but\
    \ I prefer `median(l)` over `median(sort(l))` because `median(l)` will give the\
    \ median of the entire vector `l`, whereas `median(sort(l))` will give the median\
    \ of the sorted vector `l`.\n<|/ c |>\n<| c |>\nI agree, `median(l)` is more intuitive.\
    \ Thanks for the suggestion.\n<|/ c |>\n<| a tags=median,r,list |>\nHere's a solution\
    \ using sapply and median:\n<code>\nmedian(sapply(mylist, median))\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(lapply(mylist,\
    \ function(x) as.numeric(x))))\n</code>\n<|/ a tags=median,r,list |>\n<| a tags=median,r,list\
    \ |>\n<code>\nmedian(as.numeric(lapply(mylist, function(x) as.numeric(x))))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=median,r,list |>\n<code>\nmedian(as.numeric(lapply(mylist,\
    \ function(x) as.numeric(x))))\n</code>\n<|/ a dscore=3 |>\n<| a tags=median,r,list\
    \ |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=median,r,list |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=median,r,list |>\n<| a tags=median,r,list |>\n<code>\nmedian(as.numeric(as.vector(mylist)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(as.vector(mylist)))\n\
    </code>\n<|/ a tags=median,r,list |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(as.vector(mylist)))\n\
    </code>\n<|/ a tags=median,r,list |>\n<| a tag", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks for the answer. I'm a beginner at R and I didn't know about `median`\
    \ until now. I'm going to try this out and see how it works.\n<|/ c |>\n<| c |>\n\
    I added a more efficient version that doesn't sort the list twice.\n<|/ c |>\n\
    <| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=2 tags=r |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=0 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=0 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis answer was flagged\
    \ as low-quality because of its length and content. While it may answer the question,\
    \ please consider adding some explanation to your code. Code-only answers do very\
    \ little to educate future SO readers and are often not very useful in the long\
    \ run.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,", "\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # median\n}\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ a measure of central tendency. For example, a median is a number that is the\
    \ middle value of a set of numbers. A median is often used to find the value that\
    \ most frequently occurs in a set of numbers. A median is often used to find the\
    \ value that occurs the most in a set of numbers. A median is often used to find\
    \ the value that occurs the least in a set of numbers. A median is often used\
    \ to find the value that occurs the most in a set of numbers. A median is often\
    \ used to find the value that occurs the least in a set of numbers. A median is\
    \ often used to find the value that occurs the most in a set of numbers. A median\
    \ is often used to find the value that occurs the least in a set of numbers.\n\
    \nThe median of a finite set of numbers is called a measure of central tendency.\
    \ For example, a median is a number that is the middle value of a set of numbers.\
    \ A median is often used to find the value that most frequently occurs in a set\
    \ of numbers. A median is often used to find the value that occurs the most in\
    \ a set of numbers. A median is often used to find the value that occurs the least\
    \ in a set of numbers. A median is often used to find the value that occurs the\
    \ most in a set of numbers. A median is often used to find the value that occurs\
    \ the least in a set of numbers. A median is often used to find the value that\
    \ occurs the most in a set of numbers. A median is often used to find the value\
    \ that occurs the least in a set of numbers.\n\nThe median of a finite set of\
    \ numbers is called a measure of central tendency. For example, a median is a\
    \ number that is the middle value of a set of numbers. A median is often used\
    \ to find the value that most frequently occurs in a set of numbers. A median\
    \ is often used to find the value that occurs the most in a set of numbers. A\
    \ median is often used to find the value that occurs the least in a set of numbers.\
    \ A median is often used to find the value that occurs the most in a set of numbers.\
    \ A median is often used to find the value that occurs the least in a set of numbers.\
    \ A median is often used to find the value that occurs the most in a set of numbers.\
    \ A median is often used to find the value that occurs the least in a set of numbers.\n\
    \nThe median of a finite set of numbers is called a measure of central tendency.\
    \ For example, a median is a number that is the middle value of a set of numbers.\
    \ A median is often used to find the value that most frequently occurs in a set\
    \ of numbers. A median is often used to find the value that occurs the most in\
    \ a set of numbers. A median is often used to find the value that occurs the least\
    \ in a set of numbers. A median is often used to find the value that occur", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n == 1) return(l[1])\n  return(l[n /\
    \ 2])\n}\n", "\n  l <- sort(l)\n  length(l)%%2 == 0L && return(l[length(l)]) \n\
    \  return(l[ceiling(length(l)/2)])\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI\
    \ like this solution, but I wonder why you use `ceiling` instead of `floor`?\n\
    <|/ c |>\n<| c |>\n`ceiling` rounds up to the next integer. `floor` rounds down\
    \ to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. `floor` rounds\
    \ down to the next integer. `ceiling` rounds up to the next integer. ", "\n  n\
    \ <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 1) return(NA)\n  return(l[n/2])\n}\n", "\n  n <-\
    \ length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your\
    \ `median` function.  I added a version that returns the median as a `list` of\
    \ values.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your `median` function because it is very\
    \ flexible.  I like your `median` function because it is very flexible.  I like\
    \ your `median` function because it is very flexible.  I like your `median` function\
    \ because it is very flexible.  I like your ", "\n  n <- length(l)\n  if (n <\
    \ 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. `median` works perfectly on `list`s and `data.frame`s.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `median` works perfectly\
    \ on `list`s and `data.frame`s.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `median` works perfectly on `list`s and `data.frame`s.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. `median` works perfectly on `list`s\
    \ and `data.frame`s.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ works perfectly on `list`s and `data.frame`s.\n<|/ c |>\n<| a dscore=5 |>\n\
    The median function from the dplyr package works well on lists and data.frames.\n\
    <code>\nlibrary(dplyr)\nmedian(c(3, 1, 2, 4, 5))\n[1] 3\nmedian(c(-10, 4, 6, 1000,\
    \ 10, 20))\n[1] 15\n</code>\n<|/ a tags=list,r,median |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` works perfectly on `list`s and `data.frame`s.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `median` works perfectly\
    \ on `list`s and `data.frame`s.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `median` works perfectly on `list`s and `data.frame`s.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. `median` works perfectly on `list`s\
    \ and `data.frame`s.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ works perfectly on `list`s and `data.frame`s.\n<|/ c |>\n<| a tags=list,r,median\
    \ |>\nThe median function from the stats package works well on lists and data.frames.\n\
    <code>\nlibrary(stats)\nmedian(c(3, 1, 2, 4, 5))\n[1] 3\nmedian(c(-10, 4, 6, 1000,\
    \ 10, 20))\n[1] 15\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be ", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  return(median(l))\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to avoid the sorting step by using a different function than\
    \ `median`?\n<|/ c |>\n<| c |>\nI guess you could use `median` but then you'd\
    \ have to write your own function to find the median of a vector. `median` doesn't\
    \ have that functionality built in. `median` just finds the median of a vector\
    \ and that's it.\n<|/ c |>\n<| c |>\nI guess you could use `median` but then you'd\
    \ have to write your own function to find the median of a vector. `median` doesn't\
    \ have that functionality built in. `median` just finds the median of a vector\
    \ and that's it.\n<|/ c |>\n<| c |>\nI guess you could use `median` but then you'd\
    \ have to write your own function to find the median of a vector. `median` doesn't\
    \ have that functionality built in. `median` just finds the median of a vector\
    \ and that's it.\n<|/ c |>\n<| c |>\nI guess you could use `median` but then you'd\
    \ have to write your own function to find the median of a vector. `median` doesn't\
    \ have that functionality built in. `median` just finds the median of a vector\
    \ and that's it.\n<|/ c |>\n<| a tags=median,r |>\nThe median of a vector is defined\
    \ as the value that occurs more than n/2 times in the vector. \n<code>\nmedian(1:10)",
  "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns\
    \ `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nIt does work. Try it again with `median(c(1,2,3,4,5,6,7,8,9,10))`\n\
    <|/ c |>\n<| c |>\nAh, I see what you mean. Yes, it does work. My mistake.\n<|/\
    \ c |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n%%2==0){\n    return(x[n/2])\n  }else{\n    return(x[n/2]+(x[n/2]-1)/2)\n\
    \  }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nIt does work. Try it again\
    \ with `median(c(1,2,3,4,5,6,7,8,9,10))`\n<|/ c |>\n<| c |>\nYes, it does work.\
    \ My mistake.\n<|/ c |>\n<| a |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n\
    \  n<-length(x)\n  if(n%%2==0){\n    return(x[n/2])\n  }else{\n    return(x[n/2]+(x[n/2]-1)/2)\n\
    \  }\n}\n</code>\n<|/ a tags=median,r dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    median<-function(x){\n  x<-sort(x)\n  n<-length(x)\n  if(n%%2==0){\n    return(x[n/2])\n\
    \  }else{\n    return(x[n/2]+(x[n/2]-1)/2)\n  }\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns `3` instead\
    \ of `2.5`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n\
    \  n<-length(x)\n  if(n%%2==0){", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks so much! This was very helpful.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks so much! This was very helpful.\n\
    <|/ c |>\n<| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n[1] 3\n</code>\n<|/ a tags=r\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n[1] 3\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n[1] 3\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a dscore=1 tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    [1] 3\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nmedian(", "\n  l <-\
    \ sort(l)\n  length(l) %% 2 == 0 & length(l) > 0 & !is.na(l) & !is.na(l)[1]\n\
    \  if(length(l) > 1) median(l[seq(1, length(l), 2)])\n  else NA\n}\n</code>\n\
    <|/ a tags=r,statistics |>\n<| a dscore=2 |>\nI wrote a package that does this\
    \ for you:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n", "\n  n <- length(l)\n \
    \ if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  n <- length(l)\n  if (n\
    \ == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to avoid the sorting step.\
    \ I mean, sorting is O(n log n), but this can be done in O(n) by using a binary\
    \ search to find the median.\n<|/ c |>\n<| c |>\nYes, I agree that binary search\
    \ is better than sorting, but I wanted to show that median can be calculated without\
    \ sorting.\n<|/ c |>\n<| c |>\nI agree that binary search is better than sorting,\
    \ but I wanted to show that median can be calculated without sorting.\n<|/ c |>\n\
    <| c |>\nI agree that binary search is better than sorting, but I wanted to show\
    \ that median can be calculated without sorting.\n<|/ c |>\n<| c |>\nI agree that\
    \ binary search is better than sorting, but I wanted to show that median can be\
    \ calculated without sorting.\n<|/ c |>\n<| a dscore=3 |>\nThe median of a vector\
    \ is defined as the value that occurs in the middle of the vector divided by two.\
    \ \n<code>\nmedian(1:10)\n[1] 5.5\n</code>\n<|/ a tags=median,r |>\n<| c |>\n\
    This is not the median of the vector, it's the median of the vector.\n<|/ c |>\n\
    <| c |>\nThe median of a vector is defined as the value that occurs in the middle\
    \ of the vector divided by two. `median(1:10)` returns 5.5.\n<|/ c |>\n<| c |>\n\
    The median of a vector is defined as the value that occurs in the middle of the\
    \ vector divided by two. `median(1:10)` returns 5.5.\n<|/ c |>\n<| c |>\nThe median\
    \ of a vector is defined as the value that occurs in the middle of the vector\
    \ divided by two. `median(1:10)` returns 5.5.\n<|/ c |>\n<| c |>\nThe median of\
    \ a vector is defined as the value that occurs in the middle of the vector divided\
    \ by two. `median(1:10)` returns 5.5.\n<|/ c |>\n<| a tags=median,r |>\nThe median\
    \ of a vector is defined as the value that occurs in the middle of the vector\
    \ divided by two. \n<code>\nmedian(1:10)\n[1] 5.5\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThe median of a vector is defined as the value that occurs in the middle\
    \ of the ", "\n  l <- sort(l)\n  length(l) %/% 2\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=r |>\nThe median of a vector is defined as the value that occurs in\
    \ the middle of the vector. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't answer the question. OP wants to find the\
    \ median of a list of numbers, not a single number.\n<|/ c |>\n<| c |>\nThe median\
    \ of a list of numbers is the middle number of the list. OP wants to find the\
    \ median of a list of numbers, not a single number.\n<|/ c |>\n<| c |>\nThe median\
    \ of a list of numbers is the middle number of the list. OP wants to find the\
    \ median of a list of numbers, not a single number.\n<|/ c |>\n<| c |>\nThe median\
    \ of a list of numbers is the middle number of the list. OP wants to find the\
    \ median of a list of numbers, not a single number.\n<|/ c |>\n<| c |>\nThe median\
    \ of a list of numbers is the middle number of the list. OP wants to find the\
    \ median of a list of numbers, not a single number.\n<|/ c |>\n<| a tags=r |>\n\
    The median of a vector is the value that occurs in the middle of the vector. \n\
    <code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThe median of a vector is the value that occurs in the middle of the vector.\
    \ \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a |>\nThe\
    \ median of a vector is the value that occurs in the middle of the vector. \n\
    <code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a dscore=2 tags=r |>\n<| a dscore=1\
    \ |>\nThe median of a vector is the value that occurs in the middle of the vector.\n\
    <code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n\
    The median of a vector is the value that occurs in the middle of the vector.\n\
    <code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n\
    The median of a vector is the value that occurs in the middle of the vector.\n\
    <code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    The median of a vector is the value that ", "\n  l <- sort(l)\n  return(median(l))\n\
    }\n", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n\
    <|/ a tags=r,sorting |>\n<| c |>\nI like your `median` function.  I wonder why\
    \ you didn't include it as an answer to the question [here](http://stackoverflow.com/questions/13773770/how-to-find-median-of-a-vector-in-r)\n\
    <|/ c |>\n<| c |>\nI didn't include it because I didn't want to reinvent the wheel.\
    \ `median` already does this and more. `median` also has `mean` and `sd` functions.\
    \ I didn't want to reinvent the wheel either.\n<|/ c |>\n<| c |>\nI didn't reinvent\
    \ the wheel either, but your `median` function does it all in one line.  I like\
    \ it.  I wonder why you didn't include it as an answer to the question [here](http://stackoverflow.com/questions/13773770/how-to-find-median-of-a-vector-in-r)\n\
    <|/ c |>\n<| c |>\nI didn't include it because I didn't want to reinvent the wheel.\
    \ `median` already does this and more. `median` also has `mean` and `sd` functions.\
    \ I didn't want to reinvent the wheel either.\n<|/ c |>\n<| c |>\nI didn't reinvent\
    \ the wheel either, but your `median` function does it all in one line.  I like\
    \ it.  I wonder why you didn't include it as an answer to the question [here](http://stackoverflow.com/questions/13773770/how-to-find-median-of-a-vector-in-r)\n\
    <|/ c |>\n<| a dscore=5 |>\nThe median is defined as the middle value of a sorted\
    \ list. \n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\n\
    This answer should be the accepted one. `median` already does this and more. `median`\
    \ also has `mean` and `sd` functions. I didn't want to reinvent the wheel either.\n\
    <|/ c |>\n<| c |>\nI didn't reinvent the wheel either, but your `median` function\
    \ does it all in one line.  I like it.  I wonder why you didn't include it as\
    \ an answer to the question [here](http://stackoverflow.com/questions/13773770/how-to-find-median-of-a-vector-in-r)\n\
    <|/ c |>\n<| c |>\nI didn't reinvent ", "\n  n <- length(l)\n  if (n == 0) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=median,r |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if x is\
    \ a vector, since sort sorts vectors in place. Try it with `x <- c(1,2,3); median(sort(x))`\n\
    <|/ c |>\n<| c |>\nThis doesn't work if x is a vector, since sort sorts vectors\
    \ in place. Try it with `x <- c(1,2,3); median(sort(x))`\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis\
    \ doesn't work if x is a vector, since sort sorts vectors in place. Try it with\
    \ `x <- c(1,2,3); median(sort(x))`\n<|/ c |>\n<| a tags=median,r |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if x is\
    \ a vector, since sort sorts vectors in place. Try it with `x <- c(1,2,3); median(sort(x))`\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if x is a vector, since sort sorts vectors in\
    \ place. Try it with `x <- c(1,2,3); median(sort(x))`\n<|/ c |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if x is a vector, since sort sorts vectors in place. Try it with `x <-\
    \ c(1,2,3); median(sort(x))`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=median,r |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/\
    \ a dscore=2 tags=median,r |>\n<| c |>\nThis doesn't work if x is a vector, since\
    \ sort sorts vectors in place. Try it ", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns `NA`.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works fine. Are you sure you copied the code\
    \ correctly? It works for me.\n<|/ c |>\n<| c |>\nI copied the code exactly as\
    \ you wrote it. Maybe I missed something somewhere. I'll try it again and see\
    \ what happens.\n<|/ c |>\n<| c |>\nI tested it again and it works fine. Are you\
    \ sure you copied the code correctly? It works for me.\n<|/ c |>\n<| c |>\nI copied\
    \ it exactly as you wrote it. Maybe I missed something somewhere. I'll try it\
    \ again and see what happens.\n<|/ c |>\n<| a tags=r |>\nA simple solution would\
    \ be to sort your vector and then use median:\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns\
    \ `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `NA`.\n<|/ c |>", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2)\
    \ return(NA)\n  return(l[n/2])\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like\
    \ this solution, but I wonder if it would be more efficient to sort the list first\
    \ (`sort(l)`), then find the middle element (`median(l)`), then remove it (`l[-n]`).\
    \ That way you only have to sort once.\n<|/ c |>\n<| c |>\nYes, that would be\
    \ more efficient. I'll add that to the answer.\n<|/ c |>\n<| c |>\nI added a version\
    \ that sorts first, and finds the median in one pass.\n<|/ c |>\n<| c |>\nI added\
    \ a version that finds the median in one pass.\n<|/ c |>\n<| c |>\nI added a version\
    \ that finds the median in one pass.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n\
    \  x<-sort(x)\n  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n\
    \  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n\
    \  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n\
    \  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n\
    <|/ a tags=r |>\n<| a |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a tags=r dscore=2\
    \ |>\n<|", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a function that will return\
    \ the median of a vector, assuming that the vector is non-empty:\n<code>\nmedian.vec\
    \ <- function(x) {\n  n <- length(x)\n  if(n <= 1) return(NA)\n  sort(x)[(n+1)/2]\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| a tags=median,r |>\nA simple and fast solution:\n\
    <code>\nmedian.vec <- function(x) {\n  n <- length(x)\n  if(n <= 1) return(NA)\n\
    \  sort(x)[(n+1)/2]\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=median,r |>\nHere's\
    \ a function that will return the median of a vector, assuming that the vector\
    \ is non-empty:\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n  if(n\
    \ <= 1) return(NA)\n  sort(x)[(n+1)/2]\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=median,r\
    \ |>\nHere's a function that will return the median of a vector, assuming that\
    \ the vector is non-empty:\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n\
    \  if(n <= 1) return(NA)\n  sort(x)[(n+1)/2]\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nHere's a function that will return the median of a vector, assuming\
    \ that the vector is non-empty:\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n\
    \  if(n <= 1) return(NA)\n  sort(x)[(n+1)/2]\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n\
    \  if(n <= 1) return(NA)\n  sort(x)[(n+1)/2]\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n\
    \  if(n <= 1) return(NA)\n  sort(x)[(n+1)/2]\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nPlease add some explanation to ", "\n  l <- sort(l)\n  return(median(l))\n\
    }\n", "\n  sort(l)[length(l)%%2 == 0][floor(length(l)/2)]\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nThis doesn't work if there are more than two elements in the list.\
    \ For example, median(c(1,2,3,4,5,6,7,8,9,10)) returns 5.\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It returns 5.\n<|/ c |>\n<| c |>\nOh, I see what\
    \ you mean. Yes, it does work. Sorry, I misunderstood your question. My apologies.\n\
    <|/ c |>\n<| c |>\nNo problem. Thanks for your help.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nThis doesn't work if there are more than two elements in the list.\
    \ For example, median(c(1,2,3,4,5,6,7,8,9,10)) returns 5.\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It returns 5.\n<|/ c |>\n<| c |>\nOh, I see what\
    \ you mean. Yes, it does work. Sorry, I misunderstood your question. My apologies.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are more than two elements in the\
    \ list. For example, median(c(1,2,3,4,5,6,7,8,9,10)) returns 5.\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it yourself. It returns 5.\n<|/ c |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't work if there are more than two elements in the list.\
    \ For example, median(c(1,2,3,4,5,6,7,8,9,10)) returns 5.\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It returns 5.\n<|/ c |>\n<| c |>\nOh, I see what\
    \ you mean. Yes, it does work. Sorry, I misunderstood your question. My apologies.\n\
    <|/ c |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if there are more than\
    \ two elements in the ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n == 1) return(l)\n\
    \  return(l[n / 2])\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't seem\
    \ to work when there are multiple elements in the list that are equal.  For example,\
    \ if `l` is `c(1,1,2,2)`, then `median(l)` returns `1` instead of `2`.\n<|/ c\
    \ |>\n<| c |>\n: It does work, try it out. `median(c(1,1,2,2))` returns `2`.\n\
    <|/ c |>\n<| c |>\n: It does work, try it out. `median(c(1,1,2,2))` returns `2`.\n\
    <|/ c |>\n<| c |>\n: It does work, try it out. `median(c(1,1,2,2))` returns `2`.\n\
    <|/ c |>\n<| c |>\n: It does work, try it out. `median(c(1,1,2,2))` returns `2`.\n\
    <|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't seem to work when there are multiple elements in the\
    \ list that are equal.  For example, if `x` is `c(1,1,2,2)`, then `median(sort(x))`\
    \ returns `1` instead of `2`.\n<|/ c |>\n<| c |>\n: It does work, try it out.\
    \ `median(c(1,1,2,2))` returns `2`.\n<|/ c |>\n<| c |>\n: It does work, try it\
    \ out. `median(c(1,1,2,2))` returns `2`.\n<|/ c |>\n<| c |>\n: It does work, try\
    \ it out. `median(c(1,1,2,2))` returns `2`.\n<|/ c |>\n<| c |>\n: It does work,\
    \ try it out. `median(c(1,1,2,2))` returns `2`.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't\
    \ seem to work when there are multiple elements in the list that are equal.  For\
    \ example, if `x` is `c(1,1,2,2)`, then `median(sort(x))` returns `1` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\n: It does work, try it out. `median", "\n  sort(l)[length(l)%%2\
    \ == 0][length(l)%%2 == 1]\n}\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements in the list l.\n\n\n</text>\n<cell>", "\n  n\
    \ <- length(l);\n  if (n == 0) return(NA);\n  sort(l);\n  return(l[n/2]);\n}\n",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r,list,median |>\n<| c |>\nI like this solution, but I\
    \ wonder if there is a way to do this without having to sort the list first. Maybe\
    \ with some sort of `median` function?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require sorting.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do this without having to sort the list first.\
    \ Maybe with some sort of `median` function?\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require sorting.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do this without having to sort the list first.\
    \ Maybe with some sort of `median` function?\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    median(as.numeric(names(sort(unlist(mylist))))\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nThis doesn't work if your list has non-numeric names. `median(as.numeric(names(sort(unlist(mylist))))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work if your list has non-numeric\
    \ names. `median(as.numeric(names(sort(unlist(mylist))))` returns `NA`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if your list has non-numeric names. `median(as.numeric(names(sort(unlist(mylist))))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work if your list has non-numeric\
    \ names. `median(as.numeric(names(sort(unlist(mylist))))` returns `NA`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if your list has non-numeric names. `median(as.numeric(names(sort(unlist(mylist))))`\
    \ returns `NA`.\n<|/ c |>\n<| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(mylist))))\n\
    </code>\n<|/ a tags=r,list,median dscore=5 |>\n<| c |>\nThis doesn't work if your\
    \ list has non-numeric names. `median(as.numeric(names(sort(unlist(mylist))))`\
    \ returns `", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n \
    \ m <- floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks,\
    \ I didn't know about `median` function. I think `median` function should return\
    \ `NA` when `l` is empty.\n<|/ c |>\n<| c |>\nYes, it should. But it doesn't,\
    \ so I added a check for that in the function.\n<|/ c |>\n<| c |>\nThanks, I didn't\
    \ know about `median` function. I think `median` function should return `NA` when\
    \ `l` is empty.\n<|/ c |>\n<| c |>\nI added a check for that in the function.\n\
    <|/ c |>\n<| c |>\nThanks, I didn't know about `median` function. I think `median`\
    \ function should return `NA` when `l` is empty.\n<|/ c |>\n<| a tags=r,function\
    \ |>\n<code>\nmedian.default <- function(x){\n  if(length(x) == 0){\n    return(NA)\n\
    \  }\n  return(median(x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nmedian.default\
    \ <- function(x){\n  if(length(x) == 0){\n    return(NA)\n  }\n  return(median(x))\n\
    }\n</code>\n<|/ a dscore=1 tags=r,function |>\n<| c |>\nPlease add some explanation\
    \ to your answer.\n<|/ c |>\n<| a |>\n<code>\nmedian.default <- function(x){\n\
    \  if(length(x) == 0){\n    return(NA)\n  }\n  return(median(x))\n}\n</code>\n\
    <|/ a tags=r,function dscore=1 |>\n<| a tags=r,function |>\n<code>\nmedian.default\
    \ <- function(x){\n  if(length(x) == 0){\n    return(NA)\n  }\n  return(median(x))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function |>\n<code>\nmedian.default\
    \ <- function(x){\n  if(length(x) == 0){\n    return(NA)\n  }\n  return(median(x))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function |>\n<code>\nmedian.default\
    \ <- function(x){\n  if(length(x) == 0){\n    return(NA)\n  }\n  return", "\n\
    \  l <- sort(l)\n  length(l) / 2 - floor((length(l) + 1) / 2)\n}\n</code>\n<|/\
    \ a tags=r,sorting |>\n<| c |>\nThis doesn't work for me. `median(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nIt works for me in R 3.2.3\
    \ on OS X. Are you sure you copied the code correctly? `median(c(1,2,3,4,5))`\
    \ returns `2.5`.\n<|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm using\
    \ R 3.2.3 on OS X 10.9.5.\n<|/ c |>\n<| c |>\nI added a version that works in\
    \ R 3.2.3 on OS X 10.9.5.\n<|/ c |>\n<| c |>\nThanks for your help. I appreciate\
    \ it.\n<|/ c |>\n<| a dscore=3 |>\nHere's a function that will return the median\
    \ of a vector:\n<code>\nmedian.vec <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n\
    \  if(n%%2 == 1) {\n    median(x[n/2])\n  } else {\n    median(x[(n+1)/2])\n \
    \ }\n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nThis doesn't work for me. `median.vec(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `median.vec(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me. `median.vec(c(1,2,3,4,5))` returns `3` instead of `2.5`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median.vec(c(1,2,3,4,5))` returns\
    \ `3` instead of `2.5`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `median.vec(c(1,2,3,4,5))`\
    \ returns `3` instead of `2.5`.\n<|/ c |>\n<| a tags=r,sorting |>\n<code>\nmedian.vec\
    \ <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if(n%%2 == 1) {\n    median(x[n/2])\n\
    \  } else {\n    median(x[(n+1)/2])\n  }\n}\n</code>\n<|/ a dscore=3 |>\n<| c\
    \ |>\nThis doesn't work for me", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 2) return(NA)\n  return(l[n / 2])\n}\n", "\n  sort(l)[length(sort(l))/2]\n\
    }\n</code>\n<|/ a tags=r,median |>\n<| a |>\nThe median of a vector is defined\
    \ as the middle value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n\
    <|/ a dscore=5 tags=r,median |>\n<| a dscore=5 |>\nThe median of a vector is defined\
    \ as the middle value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n\
    <|/ a tags=r,median |>\n<| a |>\nThe median of a vector is defined as the middle\
    \ value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a dscore=5\
    \ tags=r,median |>\n<| a tags=r,median |>\nThe median of a vector is defined as\
    \ the middle value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n\
    <|/ a dscore=5 |>\n<| a dscore=5 |>\nThe median of a vector is defined as the\
    \ middle value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/\
    \ a tags=r,median |>\n<| a tags=r,median |>\nThe median of a vector is defined\
    \ as the middle value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n\
    <|/ a dscore=5 |>\n<| a |>\nThe median of a vector is defined as the middle value\
    \ of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r,median\
    \ dscore=5 |>\n<| a dscore=5 |>\nThe median of a vector is defined as the middle\
    \ value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a dscore=5 |>\nThe median of a vector is defined as the middle value\
    \ of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a dscore=5 tags=r,median |>\nThe median of a vector is defined as the\
    \ middle value of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/\
    \ a |>\n<| a dscore=4 |>\nThe median of a vector is defined as the middle value\
    \ of a sorted vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a dscore=4 |>\nThe median of a vector is defined as the middle value\
    \ of a sorted vector. \n<code>\nmedian(", "\n  l <- sort(l)\n  return(l[length(l)/2])\n\
    }\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector l and returns\
    \ a vector of the same length with all negative numbers replaced by zero. Test\
    \ your function on a few examples. What happens if you pass a vector with negative\
    \ numbers?\n\n\n</text>\n<cell>", "\n  l <- sort(l)\n  n <- length(l)\n  if (n\
    \ < 1) return(NA)\n  i <- floor((n + 1) / 2)\n  return(l[i])\n}\n</code>\n<|/\
    \ a tags=r,median |>\n<| c |>\nThis doesn't work if you have negative numbers\
    \ in the list. For example, median(c(-10, 4, 6, 1000, 10, 20)) returns 15.0\n\
    <|/ c |>\n<| c |>\n: I added a version that handles negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\n: I added a version that handles negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ handles negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n: I\
    \ added a version that handles negative numbers. I tested it and it works.\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe median of a vector is defined as the value that\
    \ occurs the most frequently in the vector. \n<code>\nmedian(1:10)", "\n  l <-\
    \ sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a vector with negative\
    \ numbers. Try `median(c(-10, 4, 6, 1000, 10, 20))`\n<|/ c |>\n<| c |>\nI added\
    \ a version that works with negative numbers. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nI added a version that works with negative numbers. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=4 |>\nThe median of a vector is\
    \ just the middle value.  So you can just do:\n<code>\nmedian(myvector)\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=4 |>\nThe median of a vector is just the middle value.\
    \ So you can just do:\n<code>\nmedian(myvector)\n</code>\n<|/ a tags=r |>\n<|\
    \ a tags=r |>\n<code>\nmedian(myvector)\n</code>\n<|/ a dscore=4 |>\n<| a tags=r\
    \ |>\nThe median of a vector is just the middle value. So you can just do:\n<code>\n\
    median(myvector)\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(myvector)\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\nThe median of a vector is just the middle\
    \ value. So you can just do:\n<code>\nmedian(myvector)\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=r |>\n<code>\nmedian(myvector)\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\nThe median of a vector is just the middle value. So you can just\
    \ do:\n<code>\nmedian(myvector)\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nThe\
    \ median of a vector is just the middle value. So you can just do:\n<code>\nmedian(myvector)\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=r |>\nThe median of a vector is just the\
    \ middle value. So you can just do:\n<code>\nmedian(myvector)\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a tags=r |>\nThe median of a vector is just the middle value.\
    \ So you can just do:\n<code>\nmedian(myvector)\n</code>\n<|/ a dscore", "\n \
    \ l <- sort(l)\n  n <- length(l)\n  if(n < 2) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  i <- floor(n/2)\n  return(l[i])\n}\n</code>\n<|/ a tags=median,r |>\n<| a dscore=4\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis\
    \ doesn't work if x is of length 1. `median(sort(c(1, 2)))` returns `1` instead\
    \ of `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work if x is of length 1. `median(sort(c(1,\
    \ 2)))` returns `1` instead of `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ x is of length 1. `median(sort(c(1, 2)))` returns `1` instead of `NA`.\n<|/\
    \ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't work if x is of length 1. `median(sort(c(1, 2)))`\
    \ returns `1` instead of `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work if x is of\
    \ length 1. `median(sort(c(1, 2)))` returns `1` instead of `NA`.\n<|/ c |>\n<|\
    \ a dscore=4 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=median,r |>\n<|\
    \ c |>\nThis doesn't work if x is of length 1. `median(sort(c(1, 2)))` returns\
    \ `1` instead of `NA`.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if x is of length 1. `median(sort(c(1,\
    \ 2)))` returns `1` instead of `NA`.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't work if x is of length\
    \ 1. `median(sort(c(1, 2)))` returns `1` instead of `NA`.\n<|/ c |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work if x is of length 1. `median(sort(c(1, 2)))` ", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # median\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your `median` function\
    \ - it works well for me. Thanks!\n<|/ c |>\n<| c |>\nI like your `median` function\
    \ - it works well for me. Thanks!\n<|/ c |>\n<| c |>\nI like your `median` function\
    \ - it works well for me. Thanks!\n<|/ c |>\n<| c |>\nI like your `median` function\
    \ - it works well for me. Thanks!\n<|/ c |>\n<| c |>\nI like your `median` function\
    \ - it works well for me. Thanks!\n<|/ c |>\n<| a tags=r,statistics |>\nThe median\
    \ of a vector is defined as the value that occurs the most frequently in the vector.\
    \ \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe median of a data frame is defined\
    \ as the value that occurs the most frequently in the data frame. \n<code>\nmedian(mtcars$mpg)\n\
    [1] 20.09062\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe median of a data frame\
    \ is defined as the value that occurs the most frequently in the data frame. `median(mtcars$mpg)`\
    \ returns 20.09062.\n<|/ c |>\n<| c |>\nThe median of a data frame is defined\
    \ as the value that occurs the most frequently in the data frame. `median(mtcars$mpg)`\
    \ returns 20.09062.\n<|/ c |>\n<| c |>\nThe median of a data frame is defined\
    \ as the value that occurs the most frequently in the data frame. `median(mtcars$mpg)`\
    \ returns 20.09062.\n<|/ c |>\n<| c |>\nThe median of a data frame is defined\
    \ as the value that occurs the most frequently in the data frame. `median(mtcars$mpg)`\
    \ returns 20.09062.\n<|/ c |>\n<| c |>\nThe median of a data frame is defined\
    \ as the value that occurs the most frequently in the data frame. `median(mtcars$mpg)`\
    \ returns 20.09062.\n<|/ c |>\n<| a tags=r,statistics |>\nThe median of a vector\
    \ is defined as the value that occurs the most frequently in the vector. \n<code>\n\
    median(1:10)\n[1] 5\n</code>\n", "\n  n <- length(l);\n  if (n == 0) return(NA);\n\
    \  sort(l);\n  return(l[n/2]);\n}\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers. If the list is empty, the function\
    \ should return NA.\n\n\n</text>\n<cell>", "\n  l <- sort(l)\n  length(l)/2\n\
    }\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a list\
    \ of numbers.\n\n\n</text>\n<cell>", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n`median` doesn't work\
    \ well with negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))` returns `15.0`\
    \ instead of `-10`.\n<|/ c |>\n<| c |>\n: Yes, I realized that after I posted\
    \ my answer. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThe `median` function\
    \ doesn't work well with negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))`\
    \ returns `15.0` instead of `-10`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that\
    \ out. I fixed my answer.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ why you chose to write your own median function instead of using the one in\
    \ `base`?\n<|/ c |>\n<| a tags=r |>\nI like using na.rm from base R to remove\
    \ NA's from the vector:\n<code>\nmedian(c(NA,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,16",
  "\n  l <- sort(l)\n  length(l) / 2 \n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\n\
    This doesn't answer the question, which is about how to find the median of a list\
    \ of numbers, not how to find the median of a list of numbers.\n<|/ c |>\n<| c\
    \ |>\nThe median of a list of numbers is the middle number of the list. `median(c(1,2,3,4,5))`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nThe median of a list of numbers is the middle\
    \ number of the list. `median(c(1,2,3,4,5))` returns `3`.\n<|/ c |>\n<| c |>\n\
    The median of a list of numbers is the middle number of the list. `median(c(1,2,3,4,5))`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nThe median of a list of numbers is the middle\
    \ number of the list. `median(c(1,2,3,4,5))` returns `3`.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe median of a list of numbers can be found using the quantile function\
    \ from the Hmisc package:\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| c |>\n`median(mylist)` does not work if `mylist` is of class `list`.\
    \ `median(as.numeric(mylist))` does.\n<|/ c |>\n<| c |>\n`median(mylist)` works\
    \ with `list` class objects. `median(as.numeric(mylist))` does not work if `mylist`\
    \ is of class `list`.\n<|/ c |>\n<| c |>\n`median(mylist)` works with `list` class\
    \ objects. `median(as.numeric(mylist))` does not work if `mylist` is of class\
    \ `list`.\n<|/ c |>\n<| c |>\n`median(mylist)` works with `list` class objects.\
    \ `median(as.numeric(mylist))` does not work if `mylist` is of class `list`.\n\
    <|/ c |>\n<| c |>\n`median(mylist)` works with `list` class objects. `median(as.numeric(mylist))`\
    \ does not work if `mylist` is of class `list`.\n<|/ c |>\n<| a tags=r,sorting\
    \ |>\nThe median of a list of numbers can be found using the quantile function\
    \ from the Hmisc package:\n<code>\nmedian(mylist)\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\n`median(", "\n  l <- sort(l)\n  length(l) %% 2 == 0L ? median(l[1L])\
    \ : median(l[1L + 1L])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution.\
    \ Thanks!\n<|/ c |>\n<| a dscore=2 |>\nI like using dplyr for these types of problems.\
    \ Here is a solution using dplyr and purrr.\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r,list,median |>\n<| c |>\nI like this solution, but I\
    \ wonder if it can be modified to handle negative numbers?\n<|/ c |>\n<| c |>\n\
    , yes, it can. Just replace `return(l[n / 2])` with `return(l[n / 2 - 1] + l[n\
    \ / 2])`.\n<|/ c |>\n<| c |>\nI like the idea of using median to find the median,\
    \ but I wonder if it can be modified to handle negative numbers?\n<|/ c |>\n<|\
    \ c |>\n, yes, it can. Just replace `return(l[n / 2])` with `return(l[n / 2 -\
    \ 1] + l[n / 2])`.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if it\
    \ can be modified to handle negative numbers?\n<|/ c |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(unlist(mylist))))\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nThis answer is the only one that worked for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `median` expects a numeric\
    \ vector, not a list.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` expects a numeric vector, not a list.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. `median` expects a numeric vector, not a list.\n<|/\
    \ c |>\n<| a |>\n<code>\nmedian(as.numeric(as.character(unlist(mylist))))\n</code>\n\
    <|/ a tags=r,list,median dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` expects a numeric vector, not a list.\n<|/ c |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(unlist(mylist))))\n</code>\n<|/ a\
    \ dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median` expects a\
    \ numeric vector, not a list.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(as.character(unlist(mylist))))\n\
    </code>\n<|/ a tags=r,list,median |>", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your solution,\
    \ but I believe that `median` should return `NA` when `n < 1`. `median(c(NA,NA))`\
    \ returns `NA` instead of `NA_real_`.\n<|/ c |>\n<| c |>\nI agree with you. I've\
    \ edited my answer to include your suggestion.\n<|/ c |>\n<| a dscore=2 |>\nHere's\
    \ a solution using dplyr and purrr.\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your answer. I'm still trying\
    \ to understand your code. Could you please explain what `median` does and why\
    \ you chose `median` over `mean`?\n<|/ c |>\n<| c |>\n`median` returns the median\
    \ of a set of numbers. `mean` returns the mean of a set of numbers. `median` returns\
    \ the median of a set of numbers. `mean` returns the mean of a set of numbers.\
    \ `median` returns the median of a set of numbers. `mean` returns the mean of\
    \ a set of numbers. `median` returns the median of a set of numbers. `mean` returns\
    \ the mean of a set of numbers. `median` returns the median of a set of numbers.\
    \ `mean` returns the mean of a set of numbers. `median` returns the median of\
    \ a set of numbers. `mean` returns the mean of a set of numbers. `median` returns\
    \ the median of a set of numbers. `mean` returns the mean of a set of numbers.\
    \ `median` returns the median of a set of numbers. `mean` returns the mean of\
    \ a set of numbers. `median` returns the median of a set of numbers. `mean` returns\
    \ the mean of a set of numbers. `median` returns the median of a set of numbers.\
    \ `mean` returns the mean of a set of numbers. `median` returns the median of\
    \ a set of numbers. `mean` returns the mean of a set of numbers. `median` returns\
    \ the median of a set of numbers. `mean` returns the mean of a set of numbers.\
    \ `median` returns the median of a set of numbers. `mean` returns the mean of\
    \ a set of numbers. `median` returns the median of a set of numbers. `mean` returns\
    \ the mean of a set of numbers. `median` returns the median of a set of numbers.\
    \ `mean` returns the mean of a set of numbers. `median` returns the median of\
    \ a set of numbers. `mean` returns the mean of a set of numbers. `median` returns\
    \ the median of a set of numbers. `mean` returns the mean of a set of numbers.\
    \ `median` returns the median of a set of numbers. `mean` returns the mean of\
    \ a set of numbers. `median` returns the median of a set of numbers. `mean` returns\
    \ the mean of a set of numbers. `median` returns the median of a set of numbers.\
    \ `mean` returns the mean of a set of numbers. `median` returns the median of\
    \ a set of numbers. `mean` returns the mean of a set of numbers. `median` returns\
    \ the median of a set of numbers. `mean` returns the mean of a set of numbers.\
    \ `median` returns the median of a set of numbers. `mean` returns the mean of\
    \ a set of numbers. `median` returns the median of a set of ", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your answer. I was wondering\
    \ if there is a way to do this without using the median function?\n<|/ c |>\n\
    <| c |>\nI added a solution without median function.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I was wondering if there is a way to do this without using\
    \ the median function?\n<|/ c |>\n<| c |>\nI added a solution without median function.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThanks for your answer. I was wondering if there is a way to do this\
    \ without using the median function?\n<|/ c |>\n<| c |>\nI added a solution without\
    \ median function.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThanks for your answer. I was wondering if there is\
    \ a way to do this without using the median function?\n<|/ c |>\n<| c |>\nI added\
    \ a solution without median function.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThanks for your answer. I was wondering if there is\
    \ a way to do this without using the median function?\n<|/ c |>\n<| c |>\nI added\
    \ a solution without median function.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=2 tags=r |>\n<| a dscore=2\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=", "\n  l <- sort(l)\n  n <-\
    \ length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n",
  "\n  l <- sort(l)\n  length(l)/2\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a\
    \ dscore=2 tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=1 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=0 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=0 tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(as.character(list)))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| a dscore=0 |>\n<code>\nmedian(as.numeric(as.character(list)))\n</code>\n\
    <|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</cell>\n<text>\nThe median of\
    \ a list of length n is defined as the value at which the number of values less\
    \ than or equal to that value divided by n equals 0.5.\n\nThe median is often\
    \ used to determine the value at which the number of data points in a sample is\
    \ 50% or more extreme. For example, the median of a set of data points is the\
    \ value that results from rounding down half of the data points to the nearest\
    \ whole number.\n\n\n</text>\n<text>\nThe median of a list of length n is defined\
    \ as the value at which the number of values less than or equal to that value\
    \ divided by n equals 0.5.\n\nThe median is often used to determine the value\
    \ at which the number of data points in a sample is 50% or more extreme. For example,\
    \ the median of a set of data points is the value that results from rounding down\
    \ half of the data points to the nearest whole number.\n\n\n</text>\n<cell>\n\
    median(c(3, 1, 2, 4, 5))\nmedian(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\n\
    The median of a list of length n is defined as the value at which the number of\
    \ values less than or equal to that value divided by n equals 0.5.\n\nThe median\
    \ is often used to determine the value at which the number of data points in a\
    \ sample is 50% or more extreme. For example, the median of a set of data points\
    \ is the value that results from rounding down half of the data points to the\
    \ nearest whole number.\n\n\n</text>\n<text>\nThe median of a list of length n\
    \ is defined as the value at which the number of values less than or equal to\
    \ that value divided by n equals 0.5.\n\nThe median is often used to determine\
    \ the value at which the number of data points in a sample is 50% or more extreme.\
    \ For example, the median of a set of data points is the value that results from\
    \ rounding down half of the data points to the nearest whole number.\n\n\n</text>\n\
    <text>\nThe median of a list of length n is defined as the value at which the\
    \ number of values less than or equal to that value divided by n equals 0.5.\n\
    \nThe median is often used to determine the value at which the number of data\
    \ points in a sample is 50% or more extreme. For example, the median of a set\
    \ of data points is the value that results from rounding down half of the data\
    \ points to the nearest whole number.\n\n\n</text>\n<text>\nThe median of a list\
    \ of length n is defined as the value at which the number of values less than\
    \ or equal to that value divided by n equals 0.5.\n\nThe median is often used\
    \ to determine the value at which the number of data points in a sample is 50%\
    \ or more extreme. For example, the median of a set of data points is the value\
    \ that results from rounding down half of the data points to the nearest whole\
    \ number.\n\n\n</text>\n<text>\nThe median of a list of length n", "\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nThanks for your answer. Your code works perfectly for my example, but\
    \ when I try it on my real data, it returns `NA` for all values. I checked the\
    \ types of the variables and they all seem to be numeric. Do you know what could\
    \ be the problem?\n<|/ c |>\n<| c |>\nI added a small example to my question to\
    \ show how my data looks like.\n<|/ c |>\n<| c |>\nI added a small example to\
    \ my question to show how my data looks like.\n<|/ c |>\n<| c |>\nI added a small\
    \ example to my question to show how my data looks like.\n<|/ c |>\n<| c |>\n\
    I added a small example to my question to show how my data looks like.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that is the closest to its mean. \nThe mean of a set\
    \ of numbers is defined as the sum of the numbers in the set divided by the number\
    \ of numbers in the set. \nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that is the closest to its mean. \nThe mean of a set\
    \ of numbers is defined as the sum of the numbers in the set divided by the number\
    \ of numbers in the set. \nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that is the closest to its mean. \nThe mean of a set\
    \ of numbers is defined as the sum of the numbers in the set divided by the number\
    \ of numbers in the set. \nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that is the closest to its mean. \nThe mean of a set\
    \ of numbers is defined as the sum of the numbers in the set divided by the number\
    \ of numbers in the set. \nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that is the closest to its mean. \nThe mean of a set\
    \ of numbers is defined as the sum of the numbers in the set divided by the number\
    \ of numbers in the set. \nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that is the closest to its mean. \nThe mean of a set\
    \ of numbers is defined as the sum of the numbers in the set divided by the number\
    \ of numbers in the set. \nThe median of a set of numbers is defined as the number\
    \ in the middle of the set that is the closest to its mean. \nThe mean of a set\
    \ of numbers is defined as the sum of the numbers in the set divided by the number\
    \ of numbers in the set. \nThe median of a set of numbers is defined as the ",
  "\n  l <- sort(l)\n  length(l) / 2 - floor((length(l) + 1) / 2)\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI like the idea of using median to find the median, but I believe\
    \ that median is supposed to return the median, not the index. For example, median(c(1,2,3,4,5))\
    \ should return 2, not 3.\n<|/ c |>\n<| c |>\n: You are correct. I've updated\
    \ the answer to reflect this.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ that doesn't require sorting.\n<|/ c |>\n<| c |>\n: I added a more efficient\
    \ solution that doesn't require sorting.\n<|/ c |>\n<| c |>\n: I added a more\
    \ efficient solution that doesn't require sorting.\n<|/ c |>\n<| a dscore=5 |>\n\
    The median of a vector is simply the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a tags=r,median,statistics |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants the median, not the median.\n<|/ c |>\n<| c |>\nThe median\
    \ of a vector is simply the middle element. `median(c(1,2,3,4,5))` returns `3`.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants the median, not\
    \ the median.\n<|/ c |>\n<| c |>\nThe median of a vector is simply the middle\
    \ element. `median(c(1,2,3,4,5))` returns `3`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants the median, not the median.\n<|/ c |>\n<| a tags=r,median,statistics\
    \ |>\nThe median of a vector is simply the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants the median, not the median.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants the median, not the median.\n<|/ c |>\n<| a tags=r,median,statistics\
    \ |>\nThe median of a vector is simply the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants the median, not ", "\n  l <- sort(l)\n  length(l) / 2 \n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,statistics |>\nThe median of a vector is defined\
    \ as the value that occurs the most frequently in the vector. \n<code>\nmedian(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,",
  "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without sorting the list. Sorting takes O(n log n) time. Is there\
    \ a way to do this in O(n)?\n<|/ c |>\n<| c |>\nI added a solution without sorting.\n\
    <|/ c |>\n<| a tags=median,r |>\n<code>\nmedian.median <- function(x) {\n  n <-\
    \ length(x)\n  if(n < 2) return(x)\n  if(n > 2) return(median(x[c(TRUE, FALSE)]))\n\
    \  return(x[which.max(x)])\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\nmedian.median <- function(x) {\n  n <- length(x)\n  if(n < 2) return(x)\n\
    \  if(n > 2) return(median(x[c(TRUE, FALSE)]))\n  return(x[which.max(x)])\n}\n\
    </code>\n<|/ a tags=median,r |>\n<| a dscore=1 |>\n<code>\nmedian.median <- function(x)\
    \ {\n  n <- length(x)\n  if(n < 2) return(x)\n  if(n > 2) return(median(x[c(TRUE,\
    \ FALSE)]))\n  return(x[which.max(x)])\n}\n</code>\n<|/ a tags=median,r |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian.median <- function(x) {\n  n <- length(x)\n  if(n\
    \ < 2) return(x)\n  if(n > 2) return(median(x[c(TRUE, FALSE)]))\n  return(x[which.max(x)])\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| a dscore=1 |>\n<code>\nmedian.median <-\
    \ function(x) {\n  n <- length(x)\n  if(n < 2) return(x)\n  if(n > 2) return(median(x[c(TRUE,\
    \ FALSE)]))\n  return(x[which.max(x)])\n}\n</code>\n<|/ a tags=median,r |>\n<|\
    \ a tags=median,r |>\n<code>\nmedian.median <- function(x) {\n  n <- length(x)\n\
    \  if(n < 2) return(x)\n  if(n > 2) return(median(x[c(TRUE, FALSE)]))\n  return(x[which.max(x)])\n\
    }\n</code>\n<|/ a ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  return(l[n / 2])\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for\
    \ this. I really appreciate it. I will definitely be using this in my future projects.\
    \ Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nI wrote a package that does this\
    \ in R. \n<code>\nlibrary(dplyr)\nlibrary(purrr)\n", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # integer division\n}\n", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  return(l[n / 2])\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n  if (n == 1)\
    \ return(l[1])\n  return((n - 1) * (l[n] + l[n / 2]) / 2)\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nI like your answer, but I think it would be more helpful if you\
    \ explained how it works.\n<|/ c |>\n<| c |>\nI added some comments. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI like your answer, but I think it would be more helpful if\
    \ you explained how it works.\n<|/ c |>\n<| c |>\nI added some comments. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=r,list,median |>\nHere's a solution using sapply\
    \ and median:\n<code>\nmedian(sapply(myList, median))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ packages. However, I wonder why `median` doesn't accept a list as input? `median(myList)`\
    \ works just fine.\n<|/ c |>\n<| c |>\nI guess it just doesn't work that way.\
    \ `median` expects a vector as input. `sapply` returns a list. `median` expects\
    \ a vector as input. `sapply` returns a list. `median` expects a vector as input.\
    \ `sapply` returns a list. `median` expects a vector as input. `sapply` returns\
    \ a list. `median` expects a vector as input. `sapply` returns a list. `median`\
    \ expects a vector as input. `sapply` returns a list. `median` expects a vector\
    \ as input. `sapply` returns a list. `median` expects a vector as input. `sapply`\
    \ returns a list. `median` expects a vector as input. `sapply` returns a list.\
    \ `median` expects a vector as input. `sapply` returns a list. `median` expects\
    \ a vector as input. `sapply` returns a list. `median` expects a vector as input.\
    \ `sapply` returns a list. `median` expects a vector as input. `sapply` returns\
    \ a list. `median` expects a vector as input. `sapply` returns a list. `median`\
    \ expects a vector as input. `sapply` returns a list. `median` expects a vector\
    \ as input. `sapply` returns a list. `median` expects a vector ", "\n  l <- sort(l)\n\
    \  length(l) %% 2 == 0 & length(l) > 1 & !is.na(l) & !is.na(median(l))\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to make it more efficient. For example, `median(c(NA,NA,NA,NA,NA))` returns\
    \ `NA`, but `median(c(NA,NA,NA,NA))` returns `NA`. Is there a way to fix that?\n\
    <|/ c |>\n<| c |>\nI added a check for `NA` in the `median` function.\n<|/ c |>\n\
    <| c |>\nI added a check for `NA` in the `median` function.\n<|/ c |>\n<| c |>\n\
    I added a check for `NA` in the `median` function.\n<|/ c |>\n<| c |>\nI added\
    \ a check for `NA` in the `median` function.\n<|/ c |>\n<| a dscore=4 |>\nHere's\
    \ a solution that doesn't require any packages:\n<code>\nmedian.list <- function(x)\
    \ {\n  x <- sort(x)\n  n <- length(x)\n  i <- n / 2\n  if (n %% 2 == 0) {\n  \
    \  return(x[i])\n  } else {\n    return(x[i - 1])\n  }\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to make it\
    \ more efficient. For example, `median(c(NA,NA,NA,NA,NA))` returns `NA`, but `median(c(NA,NA,NA,NA))`\
    \ returns `NA`. Is there a way to fix that?\n<|/ c |>\n<| c |>\nI added a check\
    \ for `NA` in the `median` function.\n<|/ c |>\n<| c |>\nI added a check for `NA`\
    \ in the `median` function.\n<|/ c |>\n<| c |>\nI added a check for `NA` in the\
    \ `median` function.\n<|/ c |>\n<| c |>\nI added a check for `NA` in the `median`\
    \ function.\n<|/ c |>\n<| a tags=r,list,median |>\nHere's a solution using dplyr\
    \ and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\nmedian.list <-\
    \ function(x) {\n  x <- sort(x)\n  n <- length(x)\n  i <- n / 2\n  if (n %% 2\
    \ == 0) {\n    return", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n\
    \ / 2]\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to make it more efficient. For example, `median(c(NA,NA,NA,NA,NA))`\
    \ returns `NA`, but `median(c(NA,NA,NA,NA))` returns `NA`. Is there a way to fix\
    \ that?\n<|/ c |>\n<| c |>\nI added a fix for that case.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! I tested it and it works. However, I wonder if there is\
    \ a way to make it more efficient. For example, `median(c(NA,NA,NA,NA,NA))` returns\
    \ `NA`, but `median(c(NA,NA,NA,NA))` returns `NA`. Is there a way to fix that?\n\
    <|/ c |>\n<| c |>\nI added a fix for that case.\n<|/ c |>\n<| a dscore=2 |>\n\
    Here's a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \ndf <- data.frame(\n  x = c(1,2,3,4,5,6,7,8,9,10),\n  y = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)\n\
    )\n\ndf %>%\n  mutate(\n    median = map_dbl(y, ~median(c(...)))\n  )\n</code>\n\
    <|/ a tags=r,median,na |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to make it more efficient. For example, `median(c(NA,NA,NA,NA,NA))`\
    \ returns `NA`, but `median(c(NA,NA,NA,NA))` returns `NA`. Is there a way to fix\
    \ that?\n<|/ c |>\n<| c |>\nI added a fix for that case.\n<|/ c |>\n<| a tags=r,median,na\
    \ |>\nWe can use na.rm\n<code>\nlibrary(zoo)\nmedian(c(NA,NA,NA,NA,NA))", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder why you didn't\
    \ use `median` from `stats` package?\n<|/ c |>\n<| c |>\nI didn't know about `median`\
    \ from `stats` package. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder why you didn't use `median` from `stats` package?\n\
    <|/ c |>\n<| c |>\nI didn't know about `median` from `stats` package. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder why\
    \ you didn't use `median` from `stats` package?\n<|/ c |>\n<| a dscore=5 tags=r,statistics\
    \ |>\nThe median of a vector is defined as the value that appears more than n/2\
    \ times in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a |>\n<| c\
    \ |>\nI like your solution, but I wonder why you didn't use `median` from `stats`\
    \ package?\n<|/ c |>\n<| c |>\nI didn't know about `median` from `stats` package.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI like your solution, but I\
    \ wonder why you didn't use `median` from `stats` package?\n<|/ c |>\n<| c |>\n\
    I didn't know about `median` from `stats` package. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wonder why you didn't use `median`\
    \ from `stats` package?\n<|/ c |>\n<| a dscore=5 |>\nThe median of a vector is\
    \ defined as the value that appears more than n/2 times in the vector. \n<code>\n\
    median(1:10)\n[1] 5\n</code>\n<|/ a tags=r,statistics |>\n<| a dscore=5 |>\nThe\
    \ median of a vector is defined as the value that appears more than n/2 times\
    \ in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| a tags=r,statistics |>\nThe median of a vector is defined as the value\
    \ that appears more than n/2 times in the vector. \n<code>\nmedian(1:10)\n[1]\
    \ 5\n</code>", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns\
    \ `1` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| c |>\nI see what you mean. My mistake. Thanks!\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))` returns `1`\
    \ instead of `3`.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| a dscore=5 |>\nThe median of a vector is the\
    \ value that appears more than half the times in the vector. \n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `1` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| a dscore=5 |>\nThe median of a vector is the\
    \ value that appears more than half the times in the vector.\n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `median(c(1,2,3,4,5))`\
    \ returns `1` instead of `3`.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| c |>\nIt does work. Try `median(c(1,2,3,4,5))`\
    \ on your machine.\n<|/ c |>\n<| a tags=r |>", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n", "\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThanks for your answer. I've tried your solution and it works fine. However\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nI added an explanation to the\
    \ answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. I've tried your solution\
    \ and it works fine. However I still don't understand why my code doesn't work.\
    \ Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added\
    \ an explanation to the answer.\n<|/ c |>\n<| a dscore=1 |>\nThe problem is that\
    \ the median function does not return the median of the entire vector, but rather\
    \ the median of the sorted vector. \n<code>\nmedian(c(3, 1, 2, 4, 5))", "\n  l\
    \ <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ already does what OP wants, it just doesn't do what OP expects. `median` returns\
    \ `NA` when `l` is empty. `median` returns `Inf` when `l` is empty.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I wanted to point out that `median` returns `Inf`\
    \ when `l` is empty. `median` returns `NA` when `l` is empty.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, but I wanted to point out that `median` returns `Inf`\
    \ when `l` is empty. `median` returns `NA` when `l` is empty.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, but I wanted to point out that `median` returns `Inf`\
    \ when `l` is empty. `median` returns `NA` when `l` is empty.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, but I wanted to point out that `median` returns `Inf`\
    \ when `l` is empty. `median` returns `NA` when `l` is empty.\n<|/ c |>\n<| a\
    \ dscore=5 |>\nThe median function from the base R package is probably the most\
    \ straightforward way to do this in R. \n<code>\nmedian(1:10)\n[1] 5.5\n</code>\n\
    <|/ a tags=median,r |>\n<| c |>\n`median` returns `Inf` when `l` is empty.\n<|/\
    \ c |>\n<| c |>\n`median` returns `Inf` when `l` is empty.\n<|/ c |>\n<| c |>\n\
    `median` returns `Inf` when `l` is empty.\n<|/ c |>\n<| c |>\n`median` returns\
    \ `Inf` when `l` is empty.\n<|/ c |>\n<| c |>\n`median` returns `Inf` when `l`\
    \ is empty.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(1:10)\n[1] 5.5\n</code>\n\
    <|/ a tags=median,r |>\n<| c |>\n`median` returns `Inf` when `l` is empty.\n<|/\
    \ c |>\n<| c |>", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  return(l[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post - you can always comment on your own posts, and once you have sufficient\
    \ [reputation](http://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question, albeit in a very\
    \ roundabout way. `median` returns the median of a vector, which is what was asked\
    \ for. `mylist` was the name of the list object containing the data that should\
    \ be analyzed.\n<|/ c |>\n<| c |>\nThe question was \"how do I find the median\
    \ of a list\", not \"how do I find the median of a vector\". The answer is the\
    \ same, though.\n<|/ c |>\n<| c |>\nThe question was \"how do I find the median\
    \ of a list\", not \"how do I find the median of a vector\". The answer is the\
    \ same, though.\n<|/ c |>\n<| c |>\nThe question was \"how do I find the median\
    \ of a list\", not \"how do I find the median of a vector\". The answer is the\
    \ same, though.\n<|/ c |>\n<| a |>\n<code>\nmedian(mylist)\n</code>\n<|/ a tags=r\
    \ dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post -\
    \ you can always comment on your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question, albeit in a very\
    \ roundabout way. `median` returns the median of a vector, which is what was asked\
    \ for. `mylist` was the name of the list object containing the data that should\
    \ be analyzed.\n<|/ c |>\n<| c |>\nThe question was \"how do I find the median\
    \ of a list\", not \"how do I find the median of a vector\". The answer is the\
    \ same, though.", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/\
    \ a tags=r,sorting |>\n<| c |>\nThis doesn't answer the question. The question\
    \ asks how to find the median of a vector, not how to sort a vector.\n<|/ c |>\n\
    <| c |>\nThe question asks how to find the median of a vector, not how to sort\
    \ a vector. `median` does exactly that. `sort` does exactly that. `median` also\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. `sort`\
    \ does exactly that. `sort` does exactly that. `sort` does exactly that. ", "\n\
    \  l <- sort(l)\n  length(l)/2\n}\n</cell>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n\
    median(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"middle\" of the set. For example, the median of the\
    \ set {1, 2, 3, 4} is (2 + 3 + 4)/3 = 2.5.\n\nThe median is often used to find\
    \ the value that results in the smallest variance, i.e. the value that minimizes\
    \ the sum of squared deviations from that value.\n\nThe median is also used to\
    \ find the value that results in the largest expected change in some function\
    \ of its input variables. For example, in the case of a stock price prediction,\
    \ the median is used to find the value that results in the highest expected change\
    \ in the stock price over the next 10 days.\n\nThe median is useful for finding\
    \ the value that results in the lowest expected change in some function of its\
    \ input variables. For example, in the case of a stock price prediction, the median\
    \ is used to find the value that results in the lowest expected change in the\
    \ stock price over the next 10 days.\n\n\n</text>\n<text>\nThe mean of a set of\
    \ numbers is called the \"average\" of the set. For example, the mean of the set\
    \ {1, 2, 3, 4} is (1 + 2 + 3 + 4)/4 = 2.5.\n\nThe mean is often used to find the\
    \ value that results in the largest expected change in some function of its input\
    \ variables. For example, in the case of a stock price prediction, the mean is\
    \ used to find the value that results in the highest expected change in the stock\
    \ price over the next 10 days.\n\nThe mean is useful for finding the value that\
    \ results in the lowest expected change in some function of its input variables.\
    \ For example, in the case of a stock price prediction, the mean is used to find\
    \ the value that results in the lowest expected change in the stock price over\
    \ the next 10 days.\n\n\n</text>\n<text>\nThe median and mean are two of the most\
    \ common statistical functions. There are many other statistical functions that\
    \ can be calculated using the mean and median.\n\n\n</text>\n<text>\nThe variance\
    \ of a set of numbers is called the \"spread\" of the set. For example, the variance\
    \ of the set {1, 2, 3, 4} is (1 - ((3 - 2)/4)^2) = 1.5.\n\nThe variance is often\
    \ used to find the value that results in the smallest variance, i.e. the value\
    \ that minimizes the sum of squared deviations from that value.\n\nThe variance\
    \ is useful for finding the value that results in the largest expected change\
    \ in some function of its input variables. For example, in the case of a stock\
    \ price prediction, the variance is used to find the value that results in the\
    \ highest expected change in the stock price over the next 10 days.\n\nThe variance\
    \ is useful for finding the value that results in the lowest expected change in\
    \ some ", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</cell>\n<text>\nThe\
    \ median of a list of numbers is defined as the value that occurs in the middle\
    \ of the list. For example, the median of a list of numbers [3, 1, 2, 4, 5] would\
    \ be the value 3.\n\nWrite a function that returns the mode of a list of numbers.\
    \ If the list has more than one mode, the function should return the value that\
    \ occurs the most frequently in the list.\n\nHint: You may want to use the table\
    \ function.\n\n\n</text>\n<cell>", "\n  l <- sort(l)\n  length(l) %% 2 == 0 ?\
    \ (l[length(l)/2] + l[(length(l)/2)-1])/2 : l[length(l)/2]\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nI like your `median` function.  I added a version that\
    \ returns `NA` if `l` is empty.\n<|/ c |>\n<| c |>\nI like your `median` function.\
    \ I added a version that returns `NA` if `l` is empty. `median(c(NA,NA,NA))` returns\
    \ `NA`\n<|/ c |>\n<| c |>\nI like your `median` function. I added a version that\
    \ returns `NA` if `l` is empty. `median(c(NA,NA,NA))` returns `NA`\n<|/ c |>\n\
    <| c |>\nI like your `median` function. I added a version that returns `NA` if\
    \ `l` is empty. `median(c(NA,NA,NA))` returns `NA`\n<|/ c |>\n<| c |>\nI like\
    \ your `median` function. I added a version that returns `NA` if `l` is empty.\
    \ `median(c(NA,NA,NA))` returns `NA`\n<|/ c |>\n<| a tags=r,median |>\nA simple\
    \ and fast solution is to use the median function from the stats package:\n<code>\n\
    median(c(1,2,3,4,5))\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n\
    <| a dscore=4 |>\nThe median function from the stats package is very fast and\
    \ efficient. \n<code>\nmedian(c(1,2,3,4,5))\n</code>\n<|/ a tags=r,median |>\n\
    <| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(c(1,2,3,4,5))\n</code>\n<|/ a\
    \ dscore=4 |>\n<| a tags=r,median |>\n<code>\nmedian(c(1,2,3,4,5))\n</code>\n\
    <|/ a dscore=4 |>\n<|", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n", "\n\
    \  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like your answer, but I think it would\
    \ be more useful if you explained what your code does, and why it works.\n<|/\
    \ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI like your answer,\
    \ but I think it would be more useful if you explained what your code does, and\
    \ why it works.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| a\
    \ dscore=3 |>\nI like answers above but they don't work for me because my data\
    \ are in a list. Here's a solution which works for me:\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=median,r |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=median,r |>\n<| a tags=median,r |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=median,r |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=median,r |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=median,r |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=median,r |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=median,r |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=median,r |>\n<| a tags=median,r |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(unlist(mylist)))\n\
    </code>\n<|/ a tags=median,r |>\n<| a d", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nThanks for your\
    \ answer. I'm still not clear on why my code doesn't work. Could you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nI added an explanation to the\
    \ answer\n<|/ c |>\n<| a tags=r,sorting |>\nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined as the middle number of the set. \nThe median of a set of numbers is\
    \ defined ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n\
    \ / 2])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to avoid the if-else statement. Something like `median(l)`\
    \ where `l` is a list of numbers. I guess this would require some sort of `apply`\
    \ function, but I haven't been able to figure it out.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that avoids the if-else statement. Hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThanks. I like your solution, but I wonder if there is a way to avoid the\
    \ if-else statement. Something like `median(l)` where `l` is a list of numbers.\
    \ I guess this would require some sort of `apply` function, but I haven't been\
    \ able to figure it out.\n<|/ c |>\n<| c |>\nI added a solution that avoids the\
    \ if-else statement. Hope it helps.\n<|/ c |>\n<| a tags=r |>\nHere is a solution\
    \ using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  l <- sort(l)\n  length(l)%%2 == 0 & length(l) > 1 & l[length(l)%%2+1] == median(l[length(l)%%2+1:2])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer, but I think it would\
    \ be more efficient to just use `median` instead of `median2`\n<|/ c |>\n<| c\
    \ |>\nYes, I agree. I just wanted to show that `median2` can be implemented with\
    \ just `median`.\n<|/ c |>\n<| c |>\nI like your answer, but I think it would\
    \ be more efficient to just use `median` instead of `median2`\n<|/ c |>\n<| c\
    \ |>\nI like your answer, but I think it would be more efficient to just use `median`\
    \ instead of `median2`\n<|/ c |>\n<| c |>\nI like your answer, but I think it\
    \ would be more efficient to just use `median` instead of `median2`\n<|/ c |>\n\
    <| a dscore=1 |>\nI like your answer, but I think it would be more efficient to\
    \ just use median instead of median2\n<code>\nmedian2 <- function(x) {\n  x <-\
    \ sort(x)\n  n <- length(x)\n  if(n%%2 == 0) x[n/2] else median(x[(n+1)/2])\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| c |>\nI like your answer, but I think it\
    \ would be more efficient to just use `median` instead of `median2`\n<|/ c |>\n\
    <| a dscore=1 |>\nI like your answer, but I think it would be more efficient to\
    \ just use median instead of median2\n<code>\nmedian2 <- function(x) {\n  x <-\
    \ sort(x)\n  n <- length(x)\n  if(n%%2 == 0) x[n/2] else median(x[(n+1)/2])\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| c |>\nI like your answer, but I think it\
    \ would be more efficient to just use `median` instead of `median2`\n<|/ c |>\n\
    <| a tags=median,r |>\nI like your answer, but I think it would be more efficient\
    \ to just use median instead of median2\n<code>\nmedian2 <- function(x) {\n  x\
    \ <- sort(x)\n  n <- length(x)\n  if(n%%2 == 0) x[n/2] else median(x[(n+1)/2])\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tag", "\n  l <- sort(l)\n  length(l) / 2 #\
    \ median\n}\n</code>\n<|/ a |>\n<| c |>\n`median` does not return the median of\
    \ its argument. It returns the median of the *sorted* argument. `median(c(3, 1,\
    \ 2, 4, 5))` returns `3`, not `1.5`.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe median of a vector is defined as the value that\
    \ occurs in the middle of the vector. \n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| a tags=r,statistics |>\nThe median of a vector is defined as the value\
    \ that occurs in the middle of the vector.\n<code>\nmedian(1:10)\n</code>\n<|/\
    \ a dscore=5 |>\n<| a dscore=5 |>\nThe median of a vector is defined as the value\
    \ that occurs in the middle of the vector.\n<code>\nmedian(1:10)\n</code>\n<|/\
    \ a tags=r,statistics |>\n<| a tags=r,statistics |>\nThe median of a vector is\
    \ defined as the value that occurs in the middle of the vector.\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a dscore=4 |>\n<| a |>\nThe median of a vector is defined as the\
    \ value that occurs in the middle of the vector.\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a dscore=4 tags=r,statistics |>\n<| a dscore=4 |>\nThe median of a vector\
    \ is defined as the value that occurs in the middle of the vector.\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r,statistics |>\n<| a dscore=3 |>\nThe median of a vector\
    \ is defined as the value that occurs in the middle of the vector.\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r,statistics |>\n<| a dscore=3 |>\nThe median of a vector\
    \ is defined as the value that occurs in the middle of the vector.\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r,statistics |>\n<| a tags=r,statistics |>\nThe median of\
    \ a vector is defined as the value that occurs in the middle of the vector.\n\
    <code>\nmedian(1:10)\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,statistics |>\n\
    The median of a vector is defined as the value that occurs in the middle of the\
    \ vector.\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    The median of a vector is defined as the value that ", "\n  sort(l)[length(l)%%2\
    \ == 0][length(l)%%2 == 1]\n}\n</cell>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\nmedian(c(-10,\
    \ 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median of a list of numbers can be\
    \ calculated by finding the middle number in the list. For example, if the list\
    \ has five elements, then it can be calculated as the average of the middle two\
    \ numbers in the list. Or if the list has six elements, then it can be calculated\
    \ as the average of the middle three numbers in the list.\n\n\n</text>\n<cell>",
  "\n  l <- sort(l)\n  length(l) %% 2 == 0 & length(l) > 1 & !is.na(l) & !is.na(l)[ceiling(length(l)/2)]\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a tags=r,median |>\n<| a tags=r,median |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,median |>\n<code>\nmedian(", "\n  l <-\
    \ sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  i <- floor(n/2)\n  return(l[i])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nI like the idea of using median to find\
    \ the median, but this doesn't seem to work if you have a vector of negative numbers.\
    \ For example, median(c(-10, 4, 6, 1000, 10, 20)) returns 15, but median(c(-10,\
    \ 4, 6, 1000, 10, 20, -20, -10, -4, -6, -1000, -10, -20, -20)) returns -15.\n\
    <|/ c |>\n<| c |>\nI thought that might be the case, but I wasn't sure if that\
    \ was the desired behavior. I'll edit my answer to account for that possibility.\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't require sorting.\n<|/ c |>\n\
    <| a dscore=3 |>\nThe median of a vector is the value that occurs the most frequently\
    \ in the vector. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis doesn't seem to work if you have a vector of negative numbers.\
    \ For example, median(c(-10, 4, 6, 1000, 10, 20)) returns 15, but median(c(-10,\
    \ 4, 6, 1000, 10, 20, -20, -10, -4, -6, -1000, -10, -20, -20)) returns -15.\n\
    <|/ c |>\n<| c |>\nI thought that might be the case, but I wasn't sure if that\
    \ was the desired behavior. I'll edit my answer to account for that possibility.\n\
    <|/ c |>\n<| a tags=r |>\nThe median of a vector is the value that occurs the\
    \ most frequently in the vector. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\nThe median of a vector is the value that occurs\
    \ the most frequently in the vector. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=2 |>\nThe median of a vector is the value that occurs\
    \ the most frequently in the vector. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n\
    <|/ a tags=r ", "\n  l <- sort(l)\n  n <- length(l)\n  if(n < 2) return(NA)\n\
    \  if(n %% 2 == 0) return(l[n/2])\n  return((l[n/2] + l[n/2 - 1])/2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=r,median,list |>\n<code>\nmedian(as.numeric(lapply(mylist,\
    \ function(x) as.numeric(x))))\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis answer\
    \ worked for me in RStudio Version 1.0.143 on macOS Sierra.\n<|/ c |>\n<| a dscore=3\
    \ |>\nA more general solution that will work with any type of list including vectors,\
    \ matrices, lists, etc.\n<code>\nmedian(as.numeric(lapply(mylist, function(x)\
    \ as.numeric(x))))\n</code>\n<|/ a tags=r,median,list |>\n<| a dscore=3 |>\n<code>\n\
    median(as.numeric(lapply(mylist, function(x) as.numeric(x))))\n</code>\n<|/ a\
    \ tags=r,median,list |>\n<| a tags=r,median,list |>\n<code>\nmedian(as.numeric(lapply(mylist,\
    \ function(x) as.numeric(x))))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,median,list\
    \ |>\n<code>\nmedian(as.numeric(lapply(mylist, function(x) as.numeric(x))))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,median,list |>\n<code>\nmedian(as.numeric(lapply(mylist,\
    \ function(x) as.numeric(x))))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nmedian(as.numeric(lapply(mylist, function(x) as.numeric(x))))\n</code>\n\
    <|/ a tags=r,median,list |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(lapply(mylist,\
    \ function(x) as.numeric(x))))\n</code>\n<|/ a tags=r,median,list |>\n<| a tags=r,median,list\
    \ |>\n<code>\nmedian(as.numeric(lapply(mylist, function(x) as.numeric(x))))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,median,list |>\n<code>\nmedian(as.numeric(lapply(mylist,\
    \ function(x) as.numeric(x))))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,median,list\
    \ |>\n<code>\nmedian(as.numeric(lapply(mylist, ", "\n  n <- length(l)\n  if (n\
    \ < 1) return(NA)\n  sort(l)[n / 2]\n}\n", "\n  n <- length(l)\n  if (n == 0)\
    \ return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=median,r |>\n<| c |>\n\
    This doesn't answer the question. `median` should return the median of the entire\
    \ vector, not the median of the middle elements.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that does that.\n<|/ c |>\n<| c |>\nThe median of the entire vector\
    \ is `median(l)` not `median(sort(l))`\n<|/ c |>\n<| c |>\nI added a solution\
    \ that does that.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a tags=median,r |>\n<| c |>\nThis doesn't answer the question. `median` should\
    \ return the median of the entire vector, not the median of the middle elements.\n\
    <|/ c |>\n<| c |>\nThis does answer the question. `median` returns the median\
    \ of the entire vector, which is what the OP asked for. `median` returns the median\
    \ of the middle elements if `x` is of length less than or equal to 2.\n<|/ c |>\n\
    <| c |>\nThis does answer the question. `median` returns the median of the entire\
    \ vector, which is what the OP asked for. `median` returns the median of the middle\
    \ elements if `x` is of length less than or equal to 2.\n<|/ c |>\n<| c |>\nThis\
    \ does answer the question. `median` returns the median of the entire vector,\
    \ which is what the OP asked for. `median` returns the median of the middle elements\
    \ if `x` is of length less than or equal to 2.\n<|/ c |>\n<| c |>\nThis does answer\
    \ the question. `median` returns the median of the entire vector, which is what\
    \ the OP asked for. `median` returns the median of the middle elements if `x`\
    \ is of length less than or equal to 2.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't answer\
    \ the question. `median` should return the median of the entire vector, not the\
    \ median of the middle elements.\n<|/ c |>\n<| c |>\nThis does answer the question.\
    \ `median` returns the median of the entire vector, which is what the OP asked\
    \ for. `median` returns the median of the middle elements if `x` is of length\
    \ less than or equal to 2.\n<|/ c |>\n<| a tags=median,r ", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 1) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a tags=r,list,median |>\n<| c |>\nThis doesn't work if you have NA's in the\
    \ list\n<|/ c |>\n<| c |>\nIt does work if you have NA's in the list. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does work. Try it yourself. `median(c(NA,1,2,NA,NA))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nI didn't say it wouldn't, I said it didn't\
    \ work. Try it yourself. `median(c(NA,1,2,NA,NA))` returns `NA`.\n<|/ c |>\n<|\
    \ c |>\nI didn't say it wouldn't, I said it didn't work. Try it yourself. `median(c(NA,1,2,NA,NA))`\
    \ returns `NA`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(unlist(yourlist)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to convert list to numeric, median can handle it.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to convert list to numeric, median\
    \ can handle it.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need\
    \ to convert list to numeric, median can handle it.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to convert list to numeric, median can handle\
    \ it.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to convert\
    \ list to numeric, median can handle it.\n<|/ c |>\n<| a |>\n<code>\nmedian(as.numeric(unlist(yourlist)))\n\
    </code>\n<|/ a tags=r,list,median dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to convert list to numeric, median can handle it.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. No need to convert list to numeric,\
    \ median can handle it.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to convert list to numeric, median can handle it.\n<|/ c |>", "\n  l\
    \ <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThanks for the answer! I like your approach of using median to find the\
    \ median. I'm still trying to figure out how to implement it though. Could you\
    \ please elaborate on how you would use median to find the median of a list?\n\
    <|/ c |>\n<| c |>\nI added an example to my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for the example! I understand how median works. I'm still trying to figure out\
    \ how to use median to find the median of a list. Could you please elaborate on\
    \ how you would use median to find the median of a list?\n<|/ c |>\n<| c |>\n\
    I added an example to my answer.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ returns the median of a vector, while `sort` sorts the vector and returns the\
    \ sorted vector.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ returns the median of a vector, while `sort` sorts the vector and returns the\
    \ sorted vector.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ returns the median of a vector, while `sort` sorts the vector and returns the\
    \ sorted vector.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ returns the median of a vector, while `sort` sorts the vector and returns the\
    \ sorted vector.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median` returns\
    \ the median of a vector, while `sort` sorts the vector and returns the sorted\
    \ vector.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a\
    \ tags=r |>\n<| a tags=r |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. `median` returns the median\
    \ of a vector, while `sort` sorts the vector and returns the sorted vector.\n\
    <|/ c |>\n<| a |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 tags=r |>\n\
    <| a dscore=", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  return(l[n / 2])\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but\
    \ I believe that `median` should return `NA` if the list is empty. `median(c(NA))`\
    \ returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI agree with you. I added\
    \ a version that returns `NA` if the list is empty.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I believe that `median` should return `NA` if the list is\
    \ empty. `median(c(NA))` returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI\
    \ added a version that returns `NA` if the list is empty.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I believe that `median` should return `NA` if the list\
    \ is empty. `median(c(NA))` returns `NA` instead of `Inf`.\n<|/ c |>\n<| a tags=r,median\
    \ |>\nA simple and fast solution is to use median.default from base R:\n<code>\n\
    median(c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n/2])\n\
    }\n</code>\n<|/ a dscore=5 tags=r,list,median |>\n<| c |>\n`median` doesn't work\
    \ well with negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA`.\n\
    <|/ c |>\n<| c |>\n`median` works with negative numbers, just not in the way you\
    \ might expect. `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA` because `-10`\
    \ is less than `4`.\n<|/ c |>\n<| c |>\nI see that now. Thanks.\n<|/ c |>\n<|\
    \ c |>\n`median` works with negative numbers, just not in the way you might expect.\
    \ `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA` because `-10` is less than\
    \ `4`.\n<|/ c |>\n<| c |>\n`median` works with negative numbers, just not in the\
    \ way you might expect. `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA` because\
    \ `-10` is less than `4`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` doesn't work with negative numbers. `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `NA`.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` doesn't work with negative numbers. `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `NA`.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` doesn't work with negative numbers. `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `NA`.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` doesn't work with negative numbers. `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `NA`.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `median` doesn't work with negative numbers. `median(c(-10, 4, 6, 1000, 10,\
    \ 20))` returns `NA`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(as.character(list)))\n\
    </code>\n<|/ a tag", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  return(l[n / 2])\n}\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers. If the list is empty, return NA.\n\n\n</text>\n\
    <cell>", "\n  l <- sort(l)\n  length(l) %/% 2\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ c |>\nThis doesn't seem to work when `l` is a `list` of length `1`\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `l <- list(1)`\n<|/ c |>\n<| c |>\nAh, I see\
    \ what you mean. `median` doesn't work on a list with length `1`. I was thinking\
    \ of `median` as a function that can work on vectors, not lists.\n<|/ c |>\n<|\
    \ c |>\nYes, I see what you mean. `median` doesn't work on a list with length\
    \ `1`. I was thinking of `median` as a function that can work on vectors, not\
    \ lists.\n<|/ c |>\n<| a tags=r |>\nThe median of a vector is just the middle\
    \ element. \n<code>\nmedian(1:10)", "\n  n <- length(l)\n  if (n < 1) return(NA)\n\
    \  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r,median,list |>\n<| c |>\nI like the\
    \ `median` function but this doesn't seem to work when the list has negative numbers.\
    \ `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA`\n<|/ c |>\n<| c |>\nI added\
    \ a version that handles negative numbers. I didn't want to change your original\
    \ code too much just to handle negative numbers. I hope this helps.\n<|/ c |>\n\
    <| c |>\nI added a version that handles negative numbers. I didn't want to change\
    \ your original code too much just to handle negative numbers. I hope this helps.\n\
    <|/ c |>\n<| c |>\nI added a version that handles negative numbers. I didn't want\
    \ to change your original code too much just to handle negative numbers. I hope\
    \ this helps.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(as.numeric(unlist(list)))\n\
    </code>\n<|/ a tags=r,median,list |>\n<| c |>\nThis doesn't work if your list\
    \ contains NAs.\n<|/ c |>\n<| c |>\nThis doesn't work if your list contains NAs.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if your list contains NAs.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if your list contains NAs.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if your list contains NAs.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    median(as.numeric(unlist(list)))\n</code>\n<|/ a tags=r,median,list |>\n<| c |>\n\
    This doesn't work if your list contains NAs.\n<|/ c |>\n<| a tags=r,median,list\
    \ |>\n<code>\nmedian(as.numeric(unlist(list)))\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nThis doesn't work if your list contains NAs.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\nmedian(as.numeric(unlist(list)))\n</code>\n<|/ a tags=r,median,list\
    \ |>\n<| c |>\nThis doesn't work if your list contains NAs.\n<|/ c |>\n<| a tags=r,median,list\
    \ |>\n<code>\nmedian(as.numeric(unlist(list)))\n</code>\n<|/ a dscore=", "\n \
    \ l <- sort(l)\n  length(l) %% 2 == 0 & length(l) > 1 & !is.na(l) & !is.na(l)[1]\
    \ & !is.na(l)[2] & !is.na(l)[length(l)] & !is.na(l)[length(l)-1] & !is.na(l)[length(l)-2]\n\
    }\n", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer! I like your solution because it doesn't\
    \ require any packages. However, I do have one question: why do you use `return(NA)`\
    \ instead of `NA`?\n<|/ c |>\n<| c |>\n`return(NA)` returns `NA` from the function\
    \ and `NA` from the global environment. `NA` from the global environment is usually\
    \ preferred, but sometimes `return(NA)` is necessary (e.g., when you want to return\
    \ `NA` from a function and have it be `NA` from the global environment).\n<|/\
    \ c |>\n<| c |>\nI see. Thanks for your explanation!\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder why you use `return(NA)` instead of just `NA`?\n\
    <|/ c |>\n<| c |>\nI use `return(NA)` because I find it more readable. `NA` can\
    \ be confused with the `NA` value from the global environment. `return(NA)` makes\
    \ it clear that you are returning `NA` from the function.\n<|/ c |>\n<| a dscore=5\
    \ |>\nI like using na.locf from the zoo package:\n<code>\nlibrary(zoo)\nna.locf(1:10)",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</cell>\n<text>\nThe median of a finite set of numbers is called a measure\
    \ of central tendency. For example, the median of the set {1, 2, 3, 4} is (2 +\
    \ 3 + 4) / 3 = 2.\n\n\n</text>\n<cell>\nmedian(c(1, 2, 3, 4))\n</cell>\n<text>\n\
    The median of a finite set of numbers is called a measure of central tendency.\
    \ For example, the median of the set {1, 2, 3, 4} is (2 + 3 + 4) / 3 = 2.\n\n\n\
    </text>\n<cell>\nmedian(c(1, 2, 3, 4))\n</cell>\n<text>\nThe median of a finite\
    \ set of numbers is called a measure of central tendency. For example, the median\
    \ of the set {1, 2, 3, 4} is (2 + 3 + 4) / 3 = 2.\n\n\n</text>\n<cell>\nmedian(c(1,\
    \ 2, 3, 4))\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ a measure of central tendency. For example, the median of the set {1, 2, 3,\
    \ 4} is (2 + 3 + 4) / 3 = 2.\n\n\n</text>\n<cell>\nmedian(c(1, 2, 3, 4))\n</cell>\n\
    <text>\nThe median of a finite set of numbers is called a measure of central tendency.\
    \ For example, the median of the set {1, 2, 3, 4} is (2 + 3 + 4) / 3 = 2.\n\n\n\
    </text>\n<cell>\nmedian(c(1, 2, 3, 4))\n</cell>\n<text>\nThe median of a finite\
    \ set of numbers is called a measure of central tendency. For example, the median\
    \ of the set {1, 2, 3, 4} is (2 + 3 + 4) / 3 = 2.\n\n\n</text>\n<cell>\nmedian(c(1,\
    \ 2, 3, 4))\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ a measure of central tendency. For example, the median of the set {1, 2, 3,\
    \ 4} is (2 + 3 + 4) / 3 = 2.\n\n\n</text>\n<cell>\nmedian(c(1, 2, 3, 4))\n</cell>\n\
    <text>\nThe median of a finite set of numbers is called a measure of central tendency.\
    \ For example, the median of the set {1, 2, 3, 4} is (2 + 3 + 4) / 3 = 2.\n\n\n\
    </text>\n<cell>\nmedian(c(1, 2, 3, 4))\n</cell>\n<text>\nThe median of a finite\
    \ set of numbers is called a measure of central tendency. For example, the median\
    \ of the set {1, 2, 3, 4} is (2 + 3 + 4) / 3 = 2.\n\n\n</text>\n<cell>\nmedian(c(1,\
    \ 2, 3, 4))\n</cell>\n<text>\nThe median of a finite set of numbers is ", "\n\
    \  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nI like your answer but I don't think it works for the\
    \ OP's example. `median(c(3,1,2,4,5))` returns `3` but should be `1.5`.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I just wanted to show that `median` can be implemented\
    \ as a function and that `median` can be applied to vectors.\n<|/ c |>\n<| c |>\n\
    I see what you mean. My bad.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian<-function(x){\n\
    \  if(length(x)==0){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like your answer but I don't think it\
    \ works for the OP's example. `median(c(3,1,2,4,5))` returns `3` but should be\
    \ `1.5`.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show that `median`\
    \ can be implemented as a function and that `median` can be applied to vectors.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nmedian<-function(x){\n  if(length(x)==0){\n\
    \    return(NA)\n  }\n  x<-sort(x)\n  return(x[length(x)/2])\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nI like your answer but I don't think it works for the\
    \ OP's example. `median(c(3,1,2,4,5))` returns `3` but should be `1.5`.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I just wanted to show that `median` can be implemented\
    \ as a function and that `median` can be applied to vectors.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nmedian<-function(x){\n  if(length(x)==0){\n    return(NA)\n  }\n\
    \  x<-sort(x)\n  return(x[length(x)/2])\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I like your answer but I don't think it works for the OP's example. `median(c(3,1,2,4,5))`\
    \ returns `3` but should be `1.5`.\n<|/ c |>", "\n  n <- length(l)\n  if (n <\
    \ 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ your `median` function.  I added an answer that uses `median` from base R. \
    \ I hope you don't mind that I added your `median` function to the answer.\n<|/\
    \ c |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r,statistics\
    \ |>\n<| a tags=r,statistics |>\n<code>\nmedian(1:10)", "\n  l <- sort(l)\n  length(l)\
    \ %% 2 == 0 ? (l[length(l)/2] + l[(length(l)/2)-1])/2 : l[length(l)/2]\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nHere's a solution that doesn't require any packages.\
    \ \n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n \
    \ if(n%%2 == 0) x[n/2] else x[n/2] + x[n/2]/2\n}\n</code>\n<|/ a tags=r,list dscore=2\
    \ |>\n<| a |>\nA simple solution that doesn't require any packages:\n<code>\n\
    median.list <- function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if(n%%2 == 0)\
    \ x[n/2] else x[n/2] + x[n/2]/2\n}\n</code>\n<|/ a dscore=2 tags=r,list |>\n<|\
    \ a tags=r,list |>\n<code>\nmedian.list <- function(x) {\n  x <- sort(x)\n  n\
    \ <- length(x)\n  if(n%%2 == 0) x[n/2] else x[n/2] + x[n/2]/2\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,list |>\n<code>\nmedian.list <- function(x) {\n \
    \ x <- sort(x)\n  n <- length(x)\n  if(n%%2 == 0) x[n/2] else x[n/2] + x[n/2]/2\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nmedian.list <- function(x)\
    \ {\n  x <- sort(x)\n  n <- length(x)\n  if(n%%2 == 0) x[n/2] else x[n/2] + x[n/2]/2\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nmedian.list <- function(x)\
    \ {\n  x <- sort(x)\n  n <- length(x)\n  if(n%%2 == 0) x[n/2] else x[n/2] + x[n/2]/2\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nmedian.list <-\
    \ function(x) {\n  x <- sort(x)\n  n <- length(x)\n  if(n%%2 == 0) x[n/2] else\
    \ x[n/2] + x[n/2]/2\n}\n</code>\n<|/ a dscore=1 |>\n<|", "\n  l <- sort(l)\n \
    \ length(l)/2\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to work\
    \ when there are negative numbers in the list. For example, median(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10))\n\
    <|/ c |>\n<| c |>\nIt does work, try it out. `median(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10))`\
    \ returns `-3.5`\n<|/ c |>\n<| c |>\nYes, it does work. Try it out yourself. `median(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10))`\
    \ returns `-3.5`\n<|/ c |>\n<| c |>\nI see what you mean. My bad. I was thinking\
    \ about it differently and didn't realize that median was defined for negative\
    \ numbers. I edited my answer to reflect this.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't seem to\
    \ work when there are negative numbers in the list. For example, median(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10))\n\
    <|/ c |>\n<| c |>\nIt does work, try it out. `median(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10))`\
    \ returns `-3.5`\n<|/ c |>\n<| c |>\nI see what you mean. My bad. I was thinking\
    \ about it differently and didn't realize that median was defined for negative\
    \ numbers. I edited my answer to reflect this.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    median(sort(x))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThis doesn't seem to\
    \ work when there are negative numbers in the list. For example, median(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10))\n\
    <|/ c |>\n<| c |>\nIt does work, try it out. `median(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10))`\
    \ returns `-3.5`\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian(sort(x))\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\n", "\n  l <- sort(l)\n  length(l)/2\n}\n</cell>\n\
    <cell>\nmedian(c(3, 1, 2, 4, 5))\n</cell>\n<cell>\nmedian(c(-10, 4, 6, 1000, 10,\
    \ 20))\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    middle\" of the set. For example, the median of the set {1, 2, 3, 4} is (2 + 3\
    \ + 4)/3 = 2.5.\n\nThe median is sometimes called the \"typical\" of the set.\
    \ For example, the typical of the set {1, 2, 3, 4} is (1 + 2 + 3 + 4)/4 = 2.\n\
    \n\n</text>\n<text>\nThe mean of a set of numbers is called the \"average\" of\
    \ the set. For example, the mean of the set {1, 2, 3, 4} is (1 + 2 + 3 + 4)/4\
    \ = 2.5.\n\n\n</text>\n<text>\nThe median and mean are related by the following\
    \ identity:\n\n$$\n\\text{median} = \\overline{x} \\text{ such that } \\overline{x}\
    \ \\leq \\text{mean}\n$$\n\nThe median is the value separating the higher half\
    \ of a sample from the lower half. For example, if the sample is [3, 7, 1, 8,\
    \ 2, 9, 4, 6, 5], then the median is 7.\n\nThe mean is the average of the numbers\
    \ in the sample. For example, if the sample is [3, 7, 1, 8, 2, 9, 4, 6, 5], then\
    \ the mean is 5.5.\n\n\n</text>\n<text>\nThe median and mean are related by the\
    \ following identity:\n\n$$\n\\text{mean} = \\overline{x} \\text{ such that }\
    \ \\overline{x} \\leq \\text{median}\n$$\n\nThe mean is the average of the numbers\
    \ in the sample. For example, if the sample is [3, 7, 1, 8, 2, 9, 4, 6, 5], then\
    \ the mean is 5.5.\n\n\n</text>\n<text>\nThe median and mean are related by the\
    \ following identity:\n\n$$\n\\text{median} = \\overline{x} \\text{ such that\
    \ } \\overline{x} \\leq \\text{mean}\n$$\n\nThe median is the value separating\
    \ the higher half of a sample from the lower half. For example, if the sample\
    \ is [3, 7, 1, 8, 2, 9, 4, 6, 5], then the median is 7.\n\nThe mean is the average\
    \ of the numbers in the sample. For example, if the sample is [3, 7, 1, 8, 2,\
    \ 9, 4, 6, 5], then the mean is 5.5.\n\n\n</text>\n<text>\nThe median and mean\
    \ are related by the following identity:\n\n$$\n\\text{mean} = \\overline{x} \\\
    text{ such that } \\overline{x} \\leq \\text{median}\n$$\n\nThe mean is the average\
    \ of the numbers in the sample. For example, if the sample is [3, 7, 1, 8, 2,\
    \ 9, ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n\
    \ / 2])\n}\n</code>\n<|/ a tags=median,r |>\n<| c |>\nThanks for the answer. I'm\
    \ a beginner at R and I didn't know about median. I'll try it out and see if it\
    \ works.\n<|/ c |>\n<| c |>\nI used median and it worked perfectly. Thanks again.\n\
    <|/ c |>\n<| a tags=median,r |>\nI wrote a function that returns the median of\
    \ a vector. \n<code>\nmedian.vec <- function(vec){\n  vec <- sort(vec)\n  n <-\
    \ length(vec)\n  if(n < 2) return(NA)\n  return(vec[n/2])\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nmedian.vec <- function(vec){\n  vec <- sort(vec)\n\
    \  n <- length(vec)\n  if(n < 2) return(NA)\n  return(vec[n/2])\n}\n</code>\n\
    <|/ a tags=median,r |>\n<| a |>\n<code>\nmedian.vec <- function(vec){\n  vec <-\
    \ sort(vec)\n  n <- length(vec)\n  if(n < 2) return(NA)\n  return(vec[n/2])\n\
    }\n</code>\n<|/ a tags=median,r dscore=1 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding how and/or why it solves\
    \ the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian.vec <- function(vec){\n  vec <- sort(vec)\n  n <- length(vec)\n\
    \  if(n < 2) return(NA)\n  return(vec[n/2])\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\nmedian.vec <- function(vec){\n  vec <- sort(vec)\n  n <- length(vec)\n\
    \  if(n < 2) return(NA)\n  return(vec[n/2])\n}\n</code>\n<|/ a tags=median,r dscore=1\
    \ |>\n<| a tags=median,r dscore=1 |>\n<code>\nmedian.vec <- function(vec){\n \
    \ vec <- sort(vec)\n  n <- length(vec)\n  if(n < ", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # median\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nmedian(sort(c(1,2,3,4,5)))\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/11121550)\n<|/ c |>\n<| c |>\n\
    This does provide an answer to the question. `median` returns the median of a\
    \ set of numbers. `sort` sorts a set of numbers and returns the sorted set. `median`\
    \ returns the median of the sorted set. `sort` sorts a set of numbers and returns\
    \ the sorted set. `median` returns the median of the sorted set. `sort` sorts\
    \ a set of numbers and returns the sorted set. `median` returns the median of\
    \ the sorted set.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/11121550)\n<|/ c |>\n<| c |>\n\
    This does provide an answer to the question. `median` returns the median of a\
    \ set of numbers. `sort` sorts a set of numbers and returns the sorted set. `median`\
    \ returns the median of the sorted set. `sort` sorts a set of numbers and returns\
    \ the sorted set. `median` returns the median of the sorted set. `sort` sorts\
    \ a set of numbers and returns the sorted set. `median` returns the median of\
    \ the sorted set.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/11121550)\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nmedian(sort(c(1,2,3,4,5)))\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11121550)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. `median` returns\
    \ the median of a set of numbers. `sort` sort", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ c |>\nI like the idea of using median to find the median, but I don't think\
    \ it works in all cases. For example, `median(c(NA,NA,NA,NA,NA))` returns `NA`,\
    \ but `median(c(NA,NA,NA,NA,NA,NA,NA,NA))` returns `NA`. So I think it would be\
    \ better to use the `mean` function as suggested by in the comments.\n<|/ c |>\n\
    <| c |>\nI agree with you. I was just trying to show that median is more robust\
    \ than mean.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to show that\
    \ median is more robust than mean.\n<|/ c |>\n<| c |>\nI agree with you. I was\
    \ just trying to show that median is more robust than mean.\n<|/ c |>\n<| a tags=r\
    \ |>\nI wrote a function that will return the median of a vector. \n<code>\nmedian.vec\
    \ <- function(x){\n  if(length(x) == 0){\n    return(NA)\n  }\n  x <- sort(x)\n\
    \  return(x[length(x)/2])\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like this\
    \ one because it doesn't require the user to sort first. Thanks!\n<|/ c |>\n<|\
    \ c |>\nI like this one because it doesn't require the user to sort first. Thanks!\n\
    <|/ c |>\n<| a dscore=4 |>\nHere's a function that will return the median of a\
    \ vector:\n<code>\nmedian.vec <- function(x){\n  if(length(x) == 0){\n    return(NA)\n\
    \  }\n  x <- sort(x)\n  return(x[length(x)/2])\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nI like this one because it doesn't require the user to sort first. Thanks!\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian.vec <- function(x){\n  if(length(x) ==\
    \ 0){\n    return(NA)\n  }\n  x <- sort(x)\n  return(x[length(x)/2])\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=r |>\n<code>\nmedian.vec <- function(x)", "\n  n\
    \ <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nThis doesn't work if you have a list with only one element. Try\
    \ `median(c(1))` which returns `NA`.\n<|/ c |>\n<| c |>\nI added a check for that\
    \ case. Thanks.\n<|/ c |>\n<| c |>\nI added a check for that case. Thanks.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have a list with only one element. Try\
    \ `median(c(1))` which returns `NA`.\n<|/ c |>\n<| c |>\nI added a check for that\
    \ case. Thanks.\n<|/ c |>\n<| a |>\nHere's a solution using sapply and median:\n\
    <code>\nsapply(mylist, median)\n</code>\n<|/ a tags=r,list,median dscore=5 |>\n\
    <| c |>\nThis doesn't work if you have a list with only one element. Try `median(c(1))`\
    \ which returns `NA`.\n<|/ c |>\n<| c |>\nI added a check for that case. Thanks.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list with only one element.\
    \ Try `median(c(1))` which returns `NA`.\n<|/ c |>\n<| c |>\nI added a check for\
    \ that case. Thanks.\n<|/ c |>\n<| a tags=r,list,median |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a list with\
    \ only one element. Try `median(c(1))` which returns `NA`.\n<|/ c |>\n<| c |>\n\
    I added a check for that case. Thanks.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(mylist)\n\
    </code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis doesn't work if you have a\
    \ list with only one element. Try `median(c(1))` which returns `NA`.\n<|/ c |>\n\
    <| c |>\nI added a check for that case. Thanks.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\nmedian(mylist)\n</code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis doesn't\
    \ work if you have a list with only one element. ", "\n  l <- sort(l)\n  n <-\
    \ length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r,median\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `median(c(-10, 4, 6, 1000,\
    \ 10, 20))` returns `NA`.\n<|/ c |>\n<| c |>\nI added a version that works for\
    \ negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n`median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA` because `median` uses `sort`, which sorts\
    \ numbers in ascending order. `median(c(-10, 4, 6, 1000, 10, 20), decreasing =\
    \ TRUE)` returns `NA` because `sort` sorts in descending order. `median(c(-10,\
    \ 4, 6, 1000, 10, 20), decreasing = FALSE)` returns `NA` because `sort` sorts\
    \ in ascending order.\n<|/ c |>\n<| c |>\nI added a version that works for negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n`median(c(-10, 4,\
    \ 6, 1000, 10, 20))` returns `NA` because `sort` sorts numbers in ascending order.\
    \ `median(c(-10, 4, 6, 1000, 10, 20), decreasing = TRUE)` returns `NA` because\
    \ `sort` sorts in descending order. `median(c(-10, 4, 6, 1000, 10, 20), decreasing\
    \ = FALSE)` returns `NA` because `sort` sorts in ascending order.\n<|/ c |>\n\
    <| a tags=r,median |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<2) return(NA)\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't work for negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))` returns\
    \ `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `median(c(-10,\
    \ 4, 6, 1000, 10, 20))` returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `median(c(-10, 4, 6, 1000, 10, 20))` returns `NA`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `median(c(-10, 4, 6, 1000,\
    \ 10, 20))` returns `NA`.\n<|/ c ", "\n  l <- sort(l)\n  length(l) / 2 - floor((length(l)\
    \ + 1) / 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your answer but I\
    \ think it can be simplified a bit. `median` already sorts the list so you don't\
    \ need to do that again. `median(sort(c(3, 1, 2, 4, 5)))` returns `3`.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I've edited my answer to reflect your suggestion.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `median(c(1,2,3,4,5))` returns `2.5`,\
    \ not `3`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `median(c(1,2,3,4,5))`\
    \ returns `2.5`, not `3`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either.\
    \ `median(c(1,2,3,4,5))` returns `2.5`, not `3`.\n<|/ c |>\n<| a dscore=5 |>\n\
    The median is defined as the middle value in a sorted list. \n<code>\nmedian(c(1,2,3,4,5))\n\
    </code>\nreturns 2.5\n<|/ a tags=r |>\n<| c |>\nThis doesn't work for me either.\
    \ `median(c(1,2,3,4,5))` returns `2.5`, not `3`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me either. `median(c(1,2,3,4,5))` returns `2.5`, not `3`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me either. `median(c(1,2,3,4,5))` returns `2.5`,\
    \ not `3`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `median(c(1,2,3,4,5))`\
    \ returns `2.5`, not `3`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either.\
    \ `median(c(1,2,3,4,5))` returns `2.5`, not `3`.\n<|/ c |>\n<| a tags=r |>\nThe\
    \ median is defined as the middle value in a sorted list. \n<code>\nmedian(c(1,2,3,4,5))\n\
    </code>\nreturns 2.5\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me either.\
    \ `median(c(1,2,3,4,5))` returns `2.5`, not `3`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me either. `median(c(1,2,3,4,5))` returns `", "\n  l <- sort(l)\n \
    \ length(l)/2\n}\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a list of numbers. If the list has two or more modes, return any one\
    \ of them.\n\n\n</text>\n<cell>", "\n  sort(l)[length(sort(l))/2]\n}\n", "\n \
    \ l <- sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this one because it's easy to understand and doesn't require any\
    \ additional packages. However, I noticed that `median` returns `NA` if the list\
    \ is empty. `mean` returns `NA` if the list is empty. Is there a way to get `mean`\
    \ to return `NA` if the list is empty?\n<|/ c |>\n<| c |>\n`mean` returns `NA`\
    \ if the list is empty. `median` returns `NA` if the list is empty. `mean` and\
    \ `median` return `NA` if the list is empty. `mean` and `median` return `NA` if\
    \ the list is empty. `mean` and `median` return `NA` if the list is empty. `mean`\
    \ and `median` return `NA` if the list is empty. `mean` and `median` return `NA`\
    \ if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean` and `median` return `NA` if the list is empty. `mean` and `median` return\
    \ `NA` if the list is empty. `mean` and `median` return `NA` if the list is empty.\
    \ `mean", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  m <-\
    \ floor(n/2)\n  return(l[m])\n}\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the mode of a list of numbers. If the list has more than one mode,\
    \ it should return the smallest one.\n\n\n</text>\n<cell>", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question. `median` doesn't return the median, it returns the *index* of\
    \ the median.\n<|/ c |>\n<| c |>\nI believe this does answer the question. `median`\
    \ returns the median of the list, not the index. `median` returns the median of\
    \ the list, not the index. `median` returns the median of the list, not the index.\
    \ `median` returns the median of the list, not the index. `median` returns the\
    \ median of the list, not the index. `median` returns the median of the list,\
    \ not the index. `median` returns the median of the list, not the index. `median`\
    \ returns the median of the list, not the index. `median` returns the median of\
    \ the list, not the index. `median` returns the median of the list, not the index.\
    \ `median` returns the median of the list, not the index. `median` returns the\
    \ median of the list, not the index. `median` returns the median of the list,\
    \ not the index. `median` returns the median of the list, not the index. `median`\
    \ returns the median of the list, not the index. `median` returns the median of\
    \ the list, not the index. `median` returns the median of the list, not the index.\
    \ `median` returns the median of the list, not the index. `median` returns the\
    \ median of the list, not the index. `median` returns the median of the list,\
    \ not the index. `median` returns the median of the list, not the index. `median`\
    \ returns the median of the list, not the index. `median` returns the median of\
    \ the list, not the index. `median` returns the median of the list, not the index.\
    \ `median` returns the median of the list, not the index. `median` returns the\
    \ median of the list, not the index. `median` returns the median of the list,\
    \ not the index. `median` returns the median of the list, not the index. `median`\
    \ returns the median of the list, not the index. `median` returns the median of\
    \ the list, not the index. `median` returns the median of the list, not the index.\
    \ `median` returns the median of the list, not the index. `median` returns the\
    \ median of the list, not the index. `median` returns the median of the list,\
    \ not the index. `median` returns the median of the list, not the index. `median`\
    \ returns the median of the list, not the index. `median` returns the median of\
    \ the list, not the index. `median` returns the median of the list, not the index.\
    \ `median` returns the median of the list, not the index. `median` returns the\
    \ median of the list, not the index. `median` returns the median of the list,\
    \ not the index. `median` returns the median of the list, not the index. `median`\
    \ returns the median of the list, not the index. `median` returns the median of\
    \ the list, not the index. `median` returns the median ", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n", "\n  l <- sort(l)\n  length(l) %/% 2\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\nmedian(sort(c(3, 1, 2, 4, 5)))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't answer the question. OP wants to find the\
    \ median of any set of numbers, not just the median of a single number.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to find the median of\
    \ any set of numbers, not just the median of a single number.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nmedian(sort(c(3, 1, 2, 4, 5)))\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to find the median of any\
    \ set of numbers, not just the median of a single number.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nmedian(sort(c(3, 1, 2, 4, 5)))\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This doesn't answer the question. OP wants to find the median of any set of numbers,\
    \ not just the median of a single number.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    median(sort(c(3, 1, 2, 4, 5)))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to find the median of any set of numbers, not\
    \ just the median of a single number.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nmedian(sort(c(3,\
    \ 1, 2, 4, 5)))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to find the median of any set of numbers, not just the median of a\
    \ single number.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nmedian(sort(c(3, 1, 2, 4,\
    \ 5)))\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to find the median of any set of numbers, not just the median of a single\
    \ number.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nmedian(sort(c(3, 1, 2, 4, 5)))\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to find the median of any set of numbers, not just the median of a single number.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nmedian(sort(", "\n  l <- sort(l)\n  return(median(l))\n\
    }\n", "\n  l <- sort(l)\n  length(l) / 2 # median\n}\n", "\n  n <- length(l)\n\
    \  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks for your answer. I am not familiar with R and I do not know how\
    \ to use your code. Could you please explain how to use your code? Thanks.\n<|/\
    \ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your help. I got an error when I ran your code. Could you\
    \ please check my updated question? Thanks.\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your help. I got\
    \ an error when I ran your code. Could you please check my updated question? Thanks.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a solution using data.table:\n<code>\nlibrary(data.table)\n\
    dt <- data.table(a = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis doesn't work if you have\
    \ a list with only two elements. `median(c(1,2,3))` returns `NA` instead of `1`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list with only two elements.\
    \ `median(c(1,2,3))` returns `NA` instead of `1`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list with only two elements. `median(c(1,2,3))` returns `NA`\
    \ instead of `1`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(names(sort(unlist(yourlist))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis doesn't work if you have a\
    \ list with only two elements. `median(c(1,2,3))` returns `NA` instead of `1`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list with only two elements.\
    \ `median(c(1,2,3))` returns `NA` instead of `1`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list with only two elements. `median(c(1,2,3))` returns `NA`\
    \ instead of `1`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a list with\
    \ only two elements. `median(c(1,2,3))` returns `NA` instead of `1`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have a list with only two elements. `median(c(1,2,3))`\
    \ returns `NA` instead of `1`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(as.numeric(names(sort(unlist(yourlist))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| c |>\nThis doesn't work if you have a\
    \ list with only two elements. `median(c(1,2,3))` returns `NA` instead of `1`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list with only two elements.\
    \ `median(c(1,2,3))` returns `NA` instead of `1`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list with only two elements. `median(c", "\n  l <- sort(l)\n\
    \  length(l) / 2 # median\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your\
    \ answer, but I don't think it works in all cases. For example, `median(c(1,2,3))`\
    \ returns `1` instead of `3`.\n<|/ c |>\n<| c |>\n: Yes, I agree. I've added a\
    \ note to the answer.\n<|/ c |>\n<| c |>\n: I added a note to the answer. Thanks.\n\
    <|/ c |>\n<| c |>\nI like the `median` function but I don't think it works in\
    \ all cases. For example, `median(c(1,2,3))` returns `1` instead of `3`.\n<|/\
    \ c |>\n<| c |>\n: I added a note to the answer. Thanks.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe median of a vector is defined as the value that occurs the most frequently\
    \ in the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe median of a vector\
    \ is defined as the value that occurs the least frequently in the vector. \n<code>\n\
    median(1:10)\n[1] 1\n</code>\nThe median of a vector is defined as the value that\
    \ occurs the middle of the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe\
    \ median of a vector is defined as the value that occurs the middle of the vector.\
    \ \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe median of a vector is defined as\
    \ the value that occurs the middle of the vector. \n<code>\nmedian(1:10)\n[1]\
    \ 5\n</code>\nThe median of a vector is defined as the value that occurs the middle\
    \ of the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe median of a vector\
    \ is defined as the value that occurs the middle of the vector. \n<code>\nmedian(1:10)\n\
    [1] 5\n</code>\nThe median of a vector is defined as the value that occurs the\
    \ middle of the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe median of\
    \ a vector is defined as the value that occurs the middle of the vector. \n<code>\n\
    median(1:10)\n[1] 5\n</code>\nThe median of a vector is defined as the value that\
    \ occurs the middle of the vector. \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe\
    \ median of a vector is defined as the value that occurs the middle of the vector.\
    \ \n<code>\nmedian(1:10)\n[1] 5\n</code>\nThe median of a vector is defined as\
    \ the value that occurs the middle of the vector. \n<code>", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nI like your solution, but I wonder why you use `median`\
    \ instead of `mean`?\n<|/ c |>\n<| c |>\nBecause `mean` would give the wrong result\
    \ for vectors with length less than 2.\n<|/ c |>\n<| c |>\nI see. Thanks for your\
    \ answer!\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't answer the question. `median` gives the median, not\
    \ the mean of the vector.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ `median` gives the median, not the mean of the vector.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't answer\
    \ the question. `median` gives the median, not the mean of the vector.\n<|/ c\
    \ |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't answer the question. `median` gives the median, not the mean of the\
    \ vector.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmean(1:10)\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis doesn't answer the question. `mean` gives the mean, not the\
    \ median of the vector.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question. `median` gives the\
    \ median, not the mean of the vector.\n<|/ c |>\n<| a |>\n<code>\nmean(1:10)\n\
    </code>\n<|/ a dscore=5 tags=r |>\n<| c |>\nThis doesn't answer the question.\
    \ `mean` gives the mean, not the median of the vector.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ answer the question. `median` gives the median, not the mean of the vector.\n\
    <|/ c |>\n<| c |>\nThis doesn't answ", "\n  l <- sort(l)\n  n <- length(l)\n \
    \ if (n < 2) return(NA)\n  m <- floor(n/2)\n  return(l[m])\n}\n</cell>\n<cell>\n\
    median(c(3, 1, 2, 4, 5))\nmedian(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers.\n\n\n</text>\n<cell>", "\n  l <- sort(l)\n  n\
    \ <- length(l)\n  if (n < 2) return(NA)\n  i <- floor(n/2)\n  return(l[i])\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks, this works perfectly! I didn't know\
    \ about `median` before. Do you know why `median` doesn't work with the `data.table`\
    \ package? It seems to work fine with other packages.\n<|/ c |>\n<| c |>\nI believe\
    \ `median` works with `data.table` because `data.table` implements `median` as\
    \ well.\n<|/ c |>\n<| c |>\nAh, I see. Thanks!\n<|/ c |>\n<| a dscore=0 |>\nHere\
    \ is a solution using dplyr and tidyr. \n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n\
    \ndf <- data.frame(\n  x = c(1, 2, 3, 4),\n  y = c(1, 2, 3, 4),\n  z = c(1, 2,\
    \ 3, 4)\n)\n\ndf %>%\n  gather(key, value, -x, -y) %>%\n  group_by(key) %>%\n\
    \  summarise(median = median(value))\n</code>\n<|/ a tags=r |>\n<| a dscore=0\
    \ |>\nHere's a solution using data.table:\n<code>\nlibrary(data.table)\ndt <-\
    \ data.table(x = c(1, 2, 3, 4), y = c(1, 2, 3, 4), z = c(1, 2, 3, 4))\ndt[, median(as.numeric(as.character(x))),\
    \ by = .(y,z)]\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nHere is a solution using\
    \ dplyr and tidyr. \n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n\ndf <- data.frame(\n\
    \  x = c(1, 2, 3, 4),\n  y = c(1, 2, 3, 4),\n  z = c(1, 2, 3, 4)\n)\n\ndf %>%\n\
    \  gather(key, value, -x, -y) %>%\n  group_by(key) %>%\n  summarise(median = median(value))\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=r |>\nHere is a solution using data.table:\n\
    <code>\nlibrary(data.table)\ndt <- data.table(x = c(1, 2, 3, 4), y = c(1, 2, 3,\
    \ 4), z = c(1, 2, 3, 4))\ndt[, median(as.numeric(as.character(x))), by = .(y,z)]\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=r |>\nHere is a solution using dplyr and ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  i <- floor((n +\
    \ 1) / 2)\n  return(l[i])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ answer the question. `median` doesn't return the median of the list, it returns\
    \ the median of the elements in the list. `median(c(1,2,3,4,5))` returns `3`,\
    \ not `1.5`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nThe median of a vector is just the middle element.\
    \ `median(c(1,2,3,4,5))` returns `3`, not `1.5`.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated the answer accordingly.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated the answer accordingly.\n<|/ c |>\n<| a dscore=4 |>\n\
    The median of a vector is just the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nThe median of a vector is just\
    \ the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=3 |>\nThe median of a vector is just the middle element. \n\
    <code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    The median of a vector is just the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n\
    [1] 3\n</code>\n<|/ a dscore=3 |>\n<| a tags=r |>\nThe median of a vector is just\
    \ the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=r |>\nThe median of a vector is just the middle element. \n<code>\n\
    median(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a dscore=3 |>\n<| a tags=r |>\nThe median\
    \ of a vector is just the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n[1]\
    \ 3\n</code>\n<|/ a dscore=3 |>\n<| a tags=r |>\nThe median of a vector is just\
    \ the middle element. \n<code>\nmedian(c(1,2,3,4,5))\n[1] 3\n</code>\n<|/ a dscore=3\
    \ |>\n<| a ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n == 1) return(l[1])\n\
    \  m <- floor((n + 1) / 2)\n  return(l[m])\n}\n</code>\n<|/ a dscore=4 |>\n<|\
    \ c |>\nI like this answer because it uses base R and is easy to understand. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this answer because it uses base R and is easy to understand.\
    \ Thanks!\n<|/ c |>\n<| a dscore=4 |>\nHere's a function that will return the\
    \ median of a vector:\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n\
    \  m <- floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a tags=median,r |>\n<| c |>\n\
    This doesn't work if there are an even number of elements in the vector. For example,\
    \ median.vec(c(1,2,3)) returns 2, not 1.5\n<|/ c |>\n<| c |>\nIt does work if\
    \ there are an even number of elements in the vector. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\nIt does work if there are an even number of elements in the vector.\
    \ Try it yourself. `median.vec(c(1,2,3))` returns `1.5`.\n<|/ c |>\n<| c |>\n\
    It does work if there are an even number of elements in the vector. Try it yourself.\
    \ `median.vec(c(1,2,3))` returns `1.5`.\n<|/ c |>\n<| c |>\nIt does work if there\
    \ are an even number of elements in the vector. Try it yourself. `median.vec(c(1,2,3))`\
    \ returns `1.5`.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian.vec <- function(x)\
    \ {\n  n <- length(x)\n  m <- floor(n/2)\n  return(x[m])\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't work if there are an even number of elements in the\
    \ vector. For example, median.vec(c(1,2,3)) returns 2, not 1.5\n<|/ c |>\n<| c\
    \ |>\nIt does work if there are an even number of elements in the vector. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are an even number of\
    \ elements in the vector. Try it yourself. `median.vec(c(1,2,3))` returns `1.5`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nmedian.vec ", "\n  l <- sort(l)\n  length(l)\
    \ %/% 2\n}\n", "\n  l <- sort(l)\n  length(l) / 2 \n}\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=2 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=2 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=2 tags=r |>\n\
    <| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=2 tags=r |>\n\
    <| a |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a ", "\n  n\
    \ <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a tags=r,median\
    \ |>\n<| c |>\n`median` already does this for you. `median(c(NA,NA,NA,NA,NA))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that\
    \ out. I've edited my answer to reflect this.\n<|/ c |>\n<| c |>\n`median` already\
    \ does this for you. `median(c(NA,NA,NA,NA,NA))` returns `NA`.\n<|/ c |>\n<| c\
    \ |>\n`median` does this for you. `median(c(NA,NA,NA,NA,NA))` returns `NA`.\n\
    <|/ c |>\n<| c |>\n`median` does this for you. `median(c(NA,NA,NA,NA,NA))` returns\
    \ `NA`.\n<|/ c |>\n<| a tags=r,median |>\n<code>\nmedian(as.numeric(NA))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `median(as.numeric(NA))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\n`median(as.numeric(NA))` returns `NA` because\
    \ `NA` is actually a special value in R. `median(NA)` returns `NA` because `NA`\
    \ is actually a special value in R. `median(NA)` returns `NA` because `NA` is\
    \ actually a special value in R. `median(NA)` returns `NA` because `NA` is actually\
    \ a special value in R. `median(NA)` returns `NA` because `NA` is actually a special\
    \ value in R. `median(NA)` returns `NA` because `NA` is actually a special value\
    \ in R. `median(NA)` returns `NA` because `NA` is actually a special value in\
    \ R. `median(NA)` returns `NA` because `NA` is actually a special value in R.\
    \ `median(NA)` returns `NA` because `NA` is actually a special value in R. `median(NA)`\
    \ returns `NA` because `NA` is actually a special value in R. `median(NA)` returns\
    \ `NA` because `NA` is actually a special value in R. `median(NA)` returns ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  return(l[n / 2])\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your solution, but I wonder why you\
    \ chose to sort `l` before taking the median. Wouldn't it be more efficient to\
    \ just take the median of the sorted list?\n<|/ c |>\n<| c |>\nI chose to sort\
    \ `l` before taking the median because I thought that sorting is more expensive\
    \ than taking the median. Of course, sorting is more expensive than taking the\
    \ median, but I thought that sorting is more expensive than taking the median.\n\
    <|/ c |>\n<| c |>\nI agree that sorting is more expensive, but I thought that\
    \ sorting is more expensive than taking the median. Of course, sorting is more\
    \ expensive than taking the median, but I thought that sorting is more expensive\
    \ than taking the median.\n<|/ c |>\n<| c |>\nI agree that sorting is more expensive,\
    \ but I thought that sorting is more expensive than taking the median. Of course,\
    \ sorting is more expensive than taking the median, but I thought that sorting\
    \ is more expensive than taking the median.\n<|/ c |>\n<| c |>\nI agree that sorting\
    \ is more expensive, but I thought that sorting is more expensive than taking\
    \ the median. Of course, sorting is more expensive than taking the median, but\
    \ I thought that sorting is more expensive than taking the median.\n<|/ c |>\n\
    <| a tags=r |>\nI wrote a package that does this in R:\n<code>\nlibrary(dplyr)\n\
    median(1:10)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution. Very\
    \ simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. dplyr is very\
    \ useful.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. dplyr is very\
    \ useful.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. dplyr is very\
    \ useful.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. dplyr is very\
    \ useful.\n<|/ c |>\n<| a tags=r |>\nThe median is defined as the middle value\
    \ of a sorted list. \n<code>\nmedian(", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| c |>\nI like your answer, but I think it can be improved by using `median`\
    \ instead of `mean`.  `median` will return the median of the entire vector, whereas\
    \ `mean` will return the mean of the entire vector.  `median` will return the\
    \ median of the entire vector whereas `mean` will return the mean of the entire\
    \ vector.  `median` will return the median of the entire vector whereas `mean`\
    \ will return the mean of the entire vector.\n<|/ c |>\n<| c |>\nThanks for the\
    \ comment! I updated my answer to include your suggestion.\n<|/ c |>\n<| a tags=median,r\
    \ |>\nThe median of a vector is the value that would lie in the middle of the\
    \ vector if the vector were sorted. \n<code>\nmedian(c(1,2,3,4,5))\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis is true for vectors of length 1, but for vectors\
    \ of length 2, the median is equal to the mean of the two middle values.\n<|/\
    \ c |>\n<| c |>\nFor vectors of length 2, the median is equal to the mean of the\
    \ two middle values.\n<|/ c |>\n<| c |>\nFor vectors of length 2, the median is\
    \ equal to the mean of the two middle values.\n<|/ c |>\n<| a tags=median,r |>\n\
    The median of a vector is the value that would lie in the middle of the vector\
    \ if the vector were sorted. \n<code>\nmedian(c(1,2,3,4,5))\n</code>\n<|/ a dscore=5\
    \ |>\n<| a tags=median,r |>\nThe median of a vector is the value that would lie\
    \ in the middle of the vector if the vector were sorted. \n<code>\nmedian(c(1,2,3,4,5))\n\
    </code>\n<|/ a dscore=5 |>\n<| a tags=median,r |>\nThe median of a vector is the\
    \ value that would lie in the middle of the vector if the vector were sorted.\
    \ \n<code>\nmedian(c(1,2,3,4,5))\n</code>\n<|/ a dscore=4 |>\n<| a |>\nThe median\
    \ of a vector is the value that would lie in the middle of the vector if the vector\
    \ were sorted.\n<code>\nmedian(c(1,2,3,4,5))\n</code>\n<|/ a dscore=4 tags=median,r\
    \ |>\n<| a tags=median,r |>\nThe median of a vector is the value that would lie\
    \ in the middle of the vector if the vector were sorted.\n<code>", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 1) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks, this was very helpful!\n<|/ c |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n  if(n<=1){\n\
    \    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n  if(n<=1){\n\
    \    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a tags=median,r |>\n<|\
    \ a dscore=1 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<=1){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<=1){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<=1){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<=1){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a tags=median,r\
    \ |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n  x<-sort(x)\n  n<-length(x)\n\
    \  if(n<=1){\n    return(NA)\n  }\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=1 ",
  "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nI like your `median` function, but I wonder if there's\
    \ a way to avoid the sort and just return the middle element of the sorted list.\n\
    <|/ c |>\n<| c |>\n: Yes, that's possible. I'll post an answer in a minute.\n\
    <|/ c |>\n<| c |>\n: I added a version that avoids the sort and returns the middle\
    \ element of the sorted list.\n<|/ c |>\n<| c |>\n: I added a version that avoids\
    \ the sort and returns the middle element of the sorted list.\n<|/ c |>\n<| c\
    \ |>\n: I added a version that avoids the sort and returns the middle element\
    \ of the sorted list.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(c(3, 1, 2, 4,\
    \ 5))\n[1] 3\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't answer the question.\
    \ He wants to find the median of *any* list, not just a single vector.\n<|/ c\
    \ |>\n<| c |>\nI believe this answers the question. He wants to find the median\
    \ of *any* list, not just a single vector.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to find the median of *any* list, not just a single vector.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. He wants to find the median\
    \ of *any* list, not just a single vector.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    median(as.numeric(names(sort(c(3, 1, 2, 4, 5)))))\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThis doesn't answer the question. He wants to find the median of *any*\
    \ list, not just a single vector.\n<|/ c |>\n<| c |>\nThis doesn't answer the\
    \ question. He wants to find the median of *any* list, not just a single vector.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian(as.numeric(names(sort(c(3, 1, 2, 4, 5)))))\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=r |>\n<code>\nmedian(as.numeric(names(sort(c(3,\
    \ 1, 2, 4, 5)))))\n</code>\n<|/ a dscore=3 |>\n<| a tags=r |>\n<code>\nmedian(as.",
  "\n  l <- sort(l)\n  length(l) %/% 2\n}\n</code>\n<|/ a tags=r,list |>\n<| c |>\n\
    I like your solution, however I do not understand how it works. Could you please\
    \ explain how it works?\n<|/ c |>\n<| c |>\nI added some comments to the code.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for the explanation. I am still not able to\
    \ understand how it works. Could you please explain how it works?\n<|/ c |>\n\
    <| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n<| a tags=r,list\
    \ |>\n<code>\nmedian.list <- function(x){\n  x <- sort(x)\n  n <- length(x)\n\
    \  if(n%%2==0){\n    median(x[(n+1)/2])\n  }else{\n    median(x[(n-1)/2])\n  }\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian.list <- function(x){\n\
    \  x <- sort(x)\n  n <- length(x)\n  if(n%%2==0){\n    median(x[(n+1)/2])\n  }else{\n\
    \    median(x[(n-1)/2])\n  }\n}\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list\
    \ |>\n<code>\nmedian.list <- function(x){\n  x <- sort(x)\n  n <- length(x)\n\
    \  if(n%%2==0){\n    median(x[(n+1)/2])\n  }else{\n    median(x[(n-1)/2])\n  }\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list |>\n<code>\nmedian.list <- function(x){\n\
    \  x <- sort(x)\n  n <- length(x)\n  if(n%%2==0){\n    median(x[(n+1)/2])\n  }else{\n\
    \    median(x[(n-1)/2])\n  }\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list\
    \ |>\n<code>\nmedian.list <- function(x){\n  x <- sort(x)\n  n <- length(x)\n\
    \  if(n%%2==0){\n    median(x[(n+1)/2])\n  }else{\n    median(x[(n", "\n  l <-\
    \ sort(l)\n  length(l) / 2 # median\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. `median` already does what OP wants, while\
    \ this answer shows how to implement it yourself.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, this is more elegant and more efficient.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. `median` already does what OP wants, while this\
    \ answer shows how to implement it yourself.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. `median` already does what OP wants, while this answer\
    \ shows how to implement it yourself.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `median` already does what OP wants, while this answer shows how to\
    \ implement it yourself.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `median` already\
    \ does what OP wants, while this answer shows how to implement it yourself.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `median` already does what\
    \ OP wants, while this answer shows how to implement it yourself.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. `median` already does what OP wants,\
    \ while this answer shows how to implement it yourself.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nmedian(1:10)\n</code>\n<|/ a tags=r |>\n<| c |>\nThis should be\
    \ the accepted answer. `median` already does what OP wants, while this answer\
    \ shows how to implement it yourself.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmedian(1:10)\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis should be the accepted answer. `median`\
    \ already does what OP wants, while this answer shows how to implement it yourself.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nmedian(1:10)\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis should be the accepted answer. `median` already does what OP wants,\
    \ while this answer shows how to implement it your", "\n  l <- sort(l)\n  length(l)\
    \ / 2 # median\n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nI like your answer\
    \ but I think it would be better to explain why you think it works.\n<|/ c |>\n\
    <| c |>\nI added some explanation.\n<|/ c |>\n<| a tags=r,sorting |>\n<code>\n\
    median(sort(c(3,1,2,4,5)))\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. `median(sort(c(3,1,2,4,5,-1)))` returns `3`\
    \ instead of `-1`.\n<|/ c |>\n<| c |>\n`median(sort(c(3,1,2,4,5,-1)))` returns\
    \ `-1` on my machine.\n<|/ c |>\n<| c |>\n`median(sort(c(3,1,2,4,5,-1)))` returns\
    \ `-1` on my machine.\n<|/ c |>\n<| c |>\n`median(sort(c(3,1,2,4,5,-1)))` returns\
    \ `-1` on my machine.\n<|/ c |>\n<| c |>\n`median(sort(c(3,1,2,4,5,-1)))` returns\
    \ `-1` on my machine.\n<|/ c |>\n<| a tags=r,sorting |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have negative numbers.\
    \ `median(sort(c(3,1,2,4,5,-1)))` returns `3` instead of `-1`.\n<|/ c |>\n<| c\
    \ |>\n`median(sort(c(3,1,2,4,5,-1)))` returns `-1` on my machine.\n<|/ c |>\n\
    <| c |>\n`median(sort(c(3,1,2,4,5,-1)))` returns `-1` on my machine.\n<|/ c |>\n\
    <| c |>\n`median(sort(c(3,1,2,4,5,-1)))` returns `-1` on my machine.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. `median(sort(c(3,1,2,4,5,-1)))`\
    \ returns `3` instead of `-1`.\n<|/ c |>\n<| c |>\n`median(sort(c(3,1,2,4,5,-1)))`\
    \ returns `-1` on my machine", "\n  l <- sort(l)\n  n <- length(l)\n  if (n <\
    \ 2) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/ a tags=r,median |>\n<| c\
    \ |>\nThis doesn't work if the list is empty. `median(numeric(0))` returns `NA`\
    \ instead of `0`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the\
    \ code by adding an `if` statement to check if `l` is empty.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median |>\n<| c |>\nThis\
    \ doesn't work if the list is empty. `median(numeric(0))` returns `NA` instead\
    \ of `0`.\n<|/ c |>\n<| c |>\nThis doesn't work if the list is empty. `median(numeric(0))`\
    \ returns `NA` instead of `0`.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nmedian(sort(x))\n\
    </code>\n<|/ a tags=r,median |>\n<| c |>\nThis doesn't work if the list is empty.\
    \ `median(numeric(0))` returns `NA` instead of `0`.\n<|/ c |>\n<| a tags=r,median\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,median\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,median\
    \ |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work if the list is empty. `median(numeric(0))` returns `NA` instead of `0`.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a dscore=3 |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a tags=r,median\
    \ |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=r,median |>\n<code>\nmedian(sort(x))\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tag", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n / 2]\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your answer, but I'm having trouble\
    \ understanding how it works. Could you explain how it works? Thanks!\n<|/ c |>\n\
    <| c |>\nI added some comments. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    median(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nmedian(sort(c(3,1,2,4,5)))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    median(sort(c(3,1,2,4,5)))\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/", "\n  l <-\
    \ sort(l)\n  length(l)/2\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your\
    \ solution, but I believe it can be improved. For example, `median(c(NA,NA,NA,NA,NA))`\
    \ returns `NA` instead of `Inf`.\n<|/ c |>\n<| c |>\nI agree with you. `Inf` should\
    \ be returned instead of `NA`. I will edit my answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this should be the accepted answer. `median` should return `Inf` instead of\
    \ `NA` when `l` is `NA`.\n<|/ c |>\n<| a dscore=2 |>\nThe median of a vector is\
    \ defined as the value that occurs the most frequently in the vector. \nThe median\
    \ of a vector is defined as the value that occurs the least frequently in the\
    \ vector. \nThe median of a vector is defined as the value that occurs the middle\
    \ value in the vector. \nThe median of a vector is defined as the value that occurs\
    \ the middle value in the vector. \nThe median of a vector is defined as the value\
    \ that occurs the middle value in the vector. \nThe median of a vector is defined\
    \ as the value that occurs the middle value in the vector. \nThe median of a vector\
    \ is defined as the value that occurs the middle value in the vector. \nThe median\
    \ of a vector is defined as the value that occurs the middle value in the vector.\
    \ \nThe median of a vector is defined as the value that occurs the middle value\
    \ in the vector. \nThe median of a vector is defined as the value that occurs\
    \ the middle value in the vector. \nThe median of a vector is defined as the value\
    \ that occurs the middle value in the vector. \nThe median of a vector is defined\
    \ as the value that occurs the middle value in the vector. \nThe median of a vector\
    \ is defined as the value that occurs the middle value in the vector. \nThe median\
    \ of a vector is defined as the value that occurs the middle value in the vector.\
    \ \nThe median of a vector is defined as the value that occurs the middle value\
    \ in the vector. \nThe median of a vector is defined as the value that occurs\
    \ the middle value in the vector. \nThe median of a vector is defined as the value\
    \ that occurs the middle value in the vector. \nThe median of a vector is defined\
    \ as the value that occurs the middle value in the vector. \nThe median of a vector\
    \ is defined as the value that occurs the middle value in the vector. \nThe median\
    \ of a vector is defined as the value that occurs the middle value in the vector.\
    \ \nThe median of a vector is defined as the value that occurs the middle value\
    \ in the vector. \nThe median of a vector is defined as the value that occurs\
    \ the middle value in the vector. \nThe median of a vector is defined as the ",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n == 0) return(NA)\n  i <- floor((n +\
    \ 1) / 2)\n  return(l[i])\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ seem to work when there are negative numbers in the list. `median(c(-10, 4,\
    \ 6, 1000, 10, 20))` returns `NA`.\n<|/ c |>\n<| c |>\nI added a version that\
    \ handles negative numbers. I tested it and it seems to work fine.\n<|/ c |>\n\
    <| c |>\nThanks, this works perfectly. I'm still trying to understand how it works.\
    \ I understand that `median` sorts the list and then finds the middle element,\
    \ but I don't understand how it works. I understand that `median` sorts the list\
    \ and then finds the middle element, but I don't understand how it works. I understand\
    \ that `median` sorts the list and then finds the middle element, but I don't\
    \ understand how it works. I understand that `median` sorts the list and then\
    \ finds the middle element, but I don't understand how it works. I understand\
    \ that `median` sorts the list and then finds the middle element, but I don't\
    \ understand how it works. I understand that `median` sorts the list and then\
    \ finds the middle element, but I don't understand how it works. I understand\
    \ that `median` sorts the list and then finds the middle element, but I don't\
    \ understand how it works. I understand that `median` sorts the list and then\
    \ finds the middle element, but I don't understand how it works. I understand\
    \ that `median` sorts the list and then finds the middle element, but I don't\
    \ understand how it works. I understand that `median` sorts the list and then\
    \ finds the middle element, but I don't understand how it works. I understand\
    \ that `median` sorts the list and then finds the middle element, but I don't\
    \ understand how it works. I understand that `median` sorts the list and then\
    \ finds the middle element, but I don't understand how it works. I understand\
    \ that `median` sorts the list and then finds the middle element, but I don't\
    \ understand how it works. I understand that `median` sorts the list and then\
    \ finds the middle element, but I don't understand how it works.\n<|/ c |>\n<|\
    \ c |>\nI understand that `median` sorts the list and then finds the middle element,\
    \ but I don't understand how it works. I understand that `median` sorts the list\
    \ and then finds the middle element, but I don't understand how it works. I understand\
    \ that `median` sorts the list and then finds the middle element, but I don't\
    \ understand how it works. I understand that `median` sorts the list and then\
    \ find", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n  m <-\
    \ floor(n/2)\n  return(l[m])\n}\n</code>\n<|/ a tags=r,list,median |>\n<| c |>\n\
    Thanks for your answer. I tried your code, but I got this error message: Error\
    \ in median.default(c(3, 4, 2, 5, 6)) : \n  argument \"l\" is missing, with no\
    \ default\n<|/ c |>\n<| c |>\nI used your exact code. Did you copy and paste it\
    \ exactly? I used `median` instead of `median.default` because `median` was a\
    \ base R function.\n<|/ c |>\n<| c |>\nYes, I copied exactly as you said. Do you\
    \ know why I got this error message?\n<|/ c |>\n<| c |>\nI suspect that your version\
    \ of R is too old. Try `median(c(3, 4, 2, 5, 6))` on a new R session and see what\
    \ happens.\n<|/ c |>\n<| c |>\nI got this error message when I tried median(c(3,\
    \ 4, 2, 5, 6)) on a new R session: Error in median.default(c(3, 4, 2, 5, 6)) :\
    \ \n  argument \"l\" is missing, with no default\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nmedian(as.numeric(as.character(unlist(yourlist))))\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(as.character(unlist(yourlist))))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    median(as.numeric(as.character(unlist(yourlist))))\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nmedian(as.numeric(as.character(unlist(yourlist))))\n\
    </code>\n<|/ a tags=r,", "\n  n <- length(l)\n  if (n < 1) return(NA)\n  sort(l)[n\
    \ / 2]\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like your `median` function\
    \ but I don't think it works with negative numbers. Try `median(c(-10, 4, 6, 1000,\
    \ 10, 20))`\n<|/ c |>\n<| c |>\nThanks for the comment. I edited my answer to\
    \ include a version that handles negative numbers.\n<|/ c |>\n<| c |>\nI like\
    \ your `median` function but I don't think it works with negative numbers. Try\
    \ `median(c(-10, 4, 6, 1000, 10, 20))`\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I edited my answer to include a version that handles negative numbers.\n\
    <|/ c |>\n<| c |>\nI like your `median` function but I don't think it works with\
    \ negative numbers. Try `median(c(-10, 4, 6, 1000, 10, 20))`\n<|/ c |>\n<| a tags=median,r\
    \ |>\nI like using median from base R:\n<code>\nmedian(c(1,2,3,4,5))\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nI like your `median` function but I don't think it\
    \ works with negative numbers. Try `median(c(-10, 4, 6, 1000, 10, 20))`\n<|/ c\
    \ |>\n<| a dscore=4 |>\nI like using median from base R:\n<code>\nmedian(c(1,2,3,4,5))\n\
    </code>\n<|/ a tags=median,r |>\n<| c |>\nI like your `median` function but I\
    \ don't think it works with negative numbers. Try `median(c(-10, 4, 6, 1000, 10,\
    \ 20))`\n<|/ c |>\n<| a dscore=4 |>\nI like using median from base R:\n<code>\n\
    median(c(1,2,3,4,5))\n</code>\n<|/ a tags=median,r |>\n<| c |>\nI like your `median`\
    \ function but I don't think it works with negative numbers. Try `median(c(-10,\
    \ 4, 6, 1000, 10, 20))`\n<|/ c |>\n<| c |>\nI like your `median` function but\
    \ I don't think it works with negative numbers. Try `median(c(-10, 4, 6, 1000,\
    \ 10, 20))`\n<|/ c |>\n<| a dscore=3 |>\nI like using median from base R:\n<code>\n\
    median(c(1,2,3,4,5))\n</code>\n<|/ a tags=median,r |>\n", "\n  l <- sort(l)\n\
    \  n <- length(l)\n  if (n < 1) return(NA)\n  return(l[n / 2])\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nI like your solution, however it fails for `median(c
  "\n  n <- length(l);\n  if(n < 1) return(NA);\n  if(n < 2) return(l[1]);\n  q <-\
    \ floor((n + 1) / 2);\n  return(l[q]);\n}\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector l and returns a vector containing the mean of\
    \ each element in the list l.\n\n\n</text>\n<cell>", "\n  n <- length(l)\n  if\
    \ (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for the answer! I added a comment to my question to explain why I didn't\
    \ want to use median.\n<|/ c |>\n<| c |>\nI added a comment to my question to\
    \ explain why I didn't want to use median.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to my question to explain why I didn't want to use median.\n<|/ c |>\n<| c |>\n\
    I added a comment to my question to explain why I didn't want to use median.\n\
    <|/ c |>\n<| c |>\nI added a comment to my question to explain why I didn't want\
    \ to use median.\n<|/ c |>\n<| a tags=r |>\nYou can use the following function\
    \ to find the median of a vector:\n<code>\nmedian.vec <- function(x) {\n  n <-\
    \ length(x)\n  if(n%%2 == 1) return(x[n/2])\n  return(median(x[1:(n/2)]))\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I added a comment\
    \ to my question to explain why I didn't want to use median.\n<|/ c |>\n<| c |>\n\
    I added a comment to my question to explain why I didn't want to use median.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nmedian.vec <- function(x) {\n  n <- length(x)\n\
    \  if(n%%2 == 1) return(x[n/2])\n  return(median(x[1:(n/2)]))\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nThanks for the answer! I added a comment to my question\
    \ to explain why I didn't want to use median.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    median.vec <- function(x) {\n  n <- length(x)\n  if(n%%2 == 1) return(x[n/2])\n\
    \  return(median(x[1:(n/2)]))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n\
    <code>\nmedian.vec <- function(x) {\n  n <- length(x)\n  if(n%%2 == 1) return(x[n/2])\n\
    \  return(median(x[1:(n/2)]))\n}\n</code>\n<|/ a dscore=1 |>\n<| c ", "\n  l <-\
    \ sort(l)\n  length(l) / 2 # median\n}\n", "\n  l <- sort(l)\n  n <- length(l)\n\
    \  if (n < 2) return(NA)\n  return(l[n / 2])\n}\n", "\n  l <- sort(l)\n  n <-\
    \ length(l)\n  if (n < 1) return(NA)\n  return(median(l))\n}\n", "\n  l <- sort(l)\n\
    \  return(l[length(l)/2])\n}\n</cell>\n<text>\nThe median function returns the\
    \ median of a list. Let's see how it works.\n\n\n</text>\n<cell>\nmedian(c(3,\
    \ 1, 2, 4, 5))\n</cell>\n<cell>\nmedian(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n\
    <text>\nThe median function returns the median of a list. Let's see how it works.\n\
    \n\n</text>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n</cell>\n<cell>\nmedian(c(-10,\
    \ 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median function returns the median\
    \ of a list. Let's see how it works.\n\n\n</text>\n<cell>\nmedian(c(3, 1, 2, 4,\
    \ 5))\n</cell>\n<cell>\nmedian(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\n\
    The median function returns the median of a list. Let's see how it works.\n\n\n\
    </text>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n</cell>\n<cell>\nmedian(c(-10, 4, 6,\
    \ 1000, 10, 20))\n</cell>\n<text>\nThe median function returns the median of a\
    \ list. Let's see how it works.\n\n\n</text>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n\
    </cell>\n<cell>\nmedian(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median\
    \ function returns the median of a list. Let's see how it works.\n\n\n</text>\n\
    <cell>\nmedian(c(3, 1, 2, 4, 5))\n</cell>\n<cell>\nmedian(c(-10, 4, 6, 1000, 10,\
    \ 20))\n</cell>\n<text>\nThe median function returns the median of a list. Let's\
    \ see how it works.\n\n\n</text>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n</cell>\n\
    <cell>\nmedian(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median function\
    \ returns the median of a list. Let's see how it works.\n\n\n</text>\n<cell>\n\
    median(c(3, 1, 2, 4, 5))\n</cell>\n<cell>\nmedian(c(-10, 4, 6, 1000, 10, 20))\n\
    </cell>\n<text>\nThe median function returns the median of a list. Let's see how\
    \ it works.\n\n\n</text>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n</cell>\n<cell>\n\
    median(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median function returns\
    \ the median of a list. Let's see how it works.\n\n\n</text>\n<cell>", "\n  l\
    \ <- sort(l)\n  return(median(l))\n}\n</cell>\n<text>\nThe median of a list of\
    \ numbers is the number in the middle of the list. For example, the median of\
    \ the list c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n\
    </cell>\n<text>\nThe median of a list of numbers is the number in the middle of\
    \ the list. For example, the median of the list c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n\
    <cell>\nmedian(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\nThe median of a list\
    \ of numbers is the number in the middle of the list. For example, the median\
    \ of the list c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n<cell>\nmedian(c(100, 200,\
    \ 300, 400, 500))\n</cell>\n<text>\nThe median of a list of numbers is the number\
    \ in the middle of the list. For example, the median of the list c(3, 1, 2, 4,\
    \ 5) is 3.\n\n\n</text>\n<cell>\nmedian(c(100, 200, 300, 400, 500))\n</cell>\n\
    <text>\nThe median of a list of numbers is the number in the middle of the list.\
    \ For example, the median of the list c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n<cell>\n\
    median(c(100, 200, 300, 400, 500))\n</cell>\n<text>\nThe median of a list of numbers\
    \ is the number in the middle of the list. For example, the median of the list\
    \ c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n<cell>\nmedian(c(100, 200, 300, 400, 500))\n\
    </cell>\n<text>\nThe median of a list of numbers is the number in the middle of\
    \ the list. For example, the median of the list c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n\
    <cell>\nmedian(c(100, 200, 300, 400, 500))\n</cell>\n<text>\nThe median of a list\
    \ of numbers is the number in the middle of the list. For example, the median\
    \ of the list c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n<cell>\nmedian(c(100, 200,\
    \ 300, 400, 500))\n</cell>\n<text>\nThe median of a list of numbers is the number\
    \ in the middle of the list. For example, the median of the list c(3, 1, 2, 4,\
    \ 5) is 3.\n\n\n</text>\n<cell>\nmedian(c(100, 200, 300, 400, 500))\n</cell>\n\
    <text>\nThe median of a list of numbers is the number in the middle of the list.\
    \ For example, the median of the list c(3, 1, 2, 4, 5) is 3.\n\n\n</text>\n<cell>\n\
    median(c(100, 200, 300, 400, 500))\n</cell>\n<text>\nThe median of a list of numbers\
    \ is the number in the middle of the list. For example, the median of the list\
    \ c(3, 1, 2, 4, 5) is ", "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 2) return(NA)\n\
    \  return(l[n / 2])\n}\n</code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median\
    \ |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=3 |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a dscore=3 tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\n\
    median(as.numeric(names(sort(unlist(list1)))))\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a dscore=2 |>\n<code>\nmedian(as.numeric(names(sort(unlist(list1)))))\n\
    </code>\n<|/ a tags=r,list,median |>\n<| a tags=r,list,median |>\n<code>\nmedian(as.numeric",
  "\n  l <- sort(l)\n  n <- length(l)\n  if (n < 1) return(NA)\n  m <- floor(n/2)\n\
    \  return(l[m])\n}\n</cell>\n<cell>\nmedian(c(3, 1, 2, 4, 5))\n</cell>\n<cell>\n\
    median(c(-10, 4, 6, 1000, 10, 20))\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the mean of a list of numbers.\n\nThe function should take a\
    \ list of numbers as its only argument.\nThe function should return the mean of\
    \ the numbers in the list.\n\nHint: use the function median.\n\n\n</text>\n<cell>",
  "\n  l <- sort(l)\n  length(l)/2\n}\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a list of numbers. Write a test that checks that your\
    \ function returns the correct mode for several different inputs.\n\n\n</text>\n\
    <cell>", "\n  l <- sort(l)\n  length(l) %/% 2\n}\n", "\n  n <- length(l)\n  if\
    \ (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like your answer but I'm afraid it won't work if you have a list with negative\
    \ numbers. Try `median(c(-10, 4, 6, 1000, 10, 20))`\n<|/ c |>\n<| c |>\nI added\
    \ a version that handles negative numbers. I tested it and it works.\n<|/ c |>\n\
    <| c |>\nI added a version that handles negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nI added a version that handles negative numbers. I tested it\
    \ and it works.\n<|/ c |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n\
    \  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[n/2])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=median,r |>\n<code>\nmedian<-function(x){\n\
    \  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[n/2])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nmedian<-function(x){\n\
    \  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n  x<-sort(x)\n  return(x[n/2])\n\
    }\n</code>\n<|/ a tags=median,r |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a tags=median,r |>\n\
    <code>\nmedian<-function(x){\n  n<-length(x)\n  if(n<2){\n    return(NA)\n  }\n\
    \  x<-sort(x)\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=median,r\
    \ |>\n<code>\nmedian<-function(x){\n  n<-length(x)\n  if(n<2){\n    return(NA)\n\
    \  }\n  x<-sort(x)\n  return(x[n/2])\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>", "\n  n <- length(l)\n  if (n == 0) return(NA)\n  sort(l)[n / 2]\n}\n</code>\n\
    <|/ a dscore=5 tags=r,list,median |>\n<| c |>\n`median` does not work on lists\
    \ containing `NA`s. `median(c(NA,NA,NA))` returns `NA`.\n<|/ c |>\n<| c |>\n`median`\
    \ does work on lists containing `NA`s. `median(c(NA,NA,NA))` returns `NA`.\n<|/\
    \ c |>\n<| c |>\n`median` does work on lists containing `NA`s. `median(c(NA,NA,NA))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\n`median` does work on lists containing `NA`s.\
    \ `median(c(NA,NA,NA))` returns `NA`.\n<|/ c |>\n<| c |>\n`median` does work on\
    \ lists containing `NA`s. `median(c(NA,NA,NA))` returns `NA`.\n<|/ c |>\n<| a\
    \ dscore=5 |>\nThe median function will return the median of a vector, ignoring\
    \ NAs. \n<code>\nmedian(c(1,2,NA,NA,NA))\n[1] NA\n</code>\n<|/ a tags=r,list,median\
    \ |>\n<| c |>\n`median` does work on lists containing `NA`s. `median(c(NA,NA,NA))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\n`median` does work on lists containing `NA`s.\
    \ `median(c(NA,NA,NA))` returns `NA`.\n<|/ c |>\n<| c |>\n`median` does work on\
    \ lists containing `NA`s. `median(c(NA,NA,NA))` returns `NA`.\n<|/ c |>\n<| c\
    \ |>\n`median` does work on lists containing `NA`s. `median(c(NA,NA,NA))` returns\
    \ `NA`.\n<|/ c |>\n<| c |>\n`median` does work on lists containing `NA`s. `median(c(NA,NA,NA))`\
    \ returns `NA`.\n<|/ c |>\n<| a dscore=5 |>\nThe median function will return the\
    \ median of a vector, ignoring NAs. \n<code>\nmedian(c(1,2,NA,NA,NA))\n[1] NA\n\
    </code>\n<|/ a tag", "\n  l <- sort(l)\n  return(l[length(l)/2])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
