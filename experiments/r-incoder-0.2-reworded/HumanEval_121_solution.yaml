name: HumanEval_121_solution
language: r
prompt: "# Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\n# >>> solution(c(5, 8, 7, 1))\n# 12\n\
  # >>> solution(c(3, 3, 3, 3, 3))\n# 9\n# >>> solution(c(30, 13, 24, 321))\n# 0\n\
  solution <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- solution\n    if(!identical(candidate(c(5,\
  \ 8, 7, 1)), 12)){quit('no', 1)}\n    if(!identical(candidate(c(3, 3, 3, 3, 3)),\
  \ 9)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 24, 321)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(5, 9)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(2,\
  \ 4, 8)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(30, 13, 23, 32)), 23)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(3, 13, 2, 9)), 3)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<text>\nProblem 7\nThe Fibonacci sequence is defined\
    \ by the formula:\n\n$Fn = \\begin{cases}\n      1 & n = 0\\\n      1 & n = 1\
    \ \\\n      F{n-1} + F_{n-2} & n > 1\n    \\end{cases}$\n\nwhere $F_n = F{n-1}\
    \ + F_{n-2}$\n\nFor example, the 6th element of the sequence is $F_6 = 1 + 1 =\
    \ 2$. The first three terms of the Fibonacci sequence are 1, 1, and 2, so $F_3\
    \ = 1 + 2 = 3$. The fourth term, $F_4 = 1 + 3 = 4$ and so on. By starting with\
    \ $F_0 = 1$ and $F_1 = 1$, we can compute the sequence $F_7, F_8, F_9, F_10, F_11,\
    \ F_12...$\n\nFind the sum of the even-valued terms.\n\n\n</text>\n<cell>", "\n\
    \  sum(lst[seq_along(lst) %% 2 == 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\
    </cell>\n<cell>", "\n  sum(lst[seq_along(lst) %% 2 == 1])\n}\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the product of all the numbers in a vector. Except the number 1, you\
    \ don't need to calculate the factorial of the number. \nFor example, \nproduct([1,2,3,4])\
    \ = 24\nproduct([1,2,1]) = 4\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for this.\
    \ I appreciate you taking the time to write this up. I'm going to try this out\
    \ and see how it goes.\n<|/ c |>\n<| c |>\nI tested this out and it works perfectly.\
    \ Thank you so much for taking the time to write this up. I'm going to try this\
    \ out and see how it goes.\n<|/ c |>\n<| a |>\nHere's a solution using data.table:\n\
    <code>\nlibrary(data.table)\ndt <- data.table(x = c(5, 8, 7, 1))\ndt[, sum(x %%\
    \ 2 == 1), by = seq_along(x)]\n</code>\n<|/ a tags=r dscore=1 |>\n<| a tags=r\
    \ |>\nHere's a base R solution:\n<code>\nx <- c(5, 8, 7, 1)\nsapply(seq_along(x),\
    \ function(i) sum(x[[i]] %% 2 == 1))", "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2\
    \ != 0)[1]) + 1])\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 tags=r |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=", "\n  sum(lst[seq_along(lst)%%2 == 1]) \n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n\
    <|/ a dscore=1 tags=r |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n\
    <code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a tags=r |>\n<| a\
    \ dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n\
    <code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please add some explanation to ", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n\
    }\n</cell>\n<text>\nProblem 8\nGiven a non-empty vector of digits, return a new\
    \ vector where each element is the sum of the respective digits in original vector.\
    \ Except the digits are rearranged so that they are in descending order.\n\nExample\n\
    For digits = c(2, 7, 11, 4, 1, 8), the output should be\ndescSum(digits) = c(7,\
    \ 6, 4, 11, 2, 8).\n\nThe digits in the original vector are rearranged so that\
    \ they are in descending order.\n\ndigits\n[2,7,11,4,1,8]\n[2,7,4,11,1,8]\n[2,7,4,1,11,8]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n[2,7,4,1,8,11]\n\
    [2,7,4,1,8,11]\n[2,7,4,1,8,11", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2 != 0])\n}\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the number of times the value 1 appears in a given vector.\n\n\n</text>\n\
    <cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2 != 0])\n}\n</cell>\n<cell>", "\n\
    \  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum( lst[ seq_along(\
    \ lst ) %% 2 == 1 ] )\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n\
    <|/ a tags=r dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)] %% 2\
    \ == 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]%%2==1])\n\
    }\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=2 |>\nA simple solution using\
    \ sapply and sum:\n<code>\nsapply(lst,sum)\n</code>\n<|/ a tags=r,sum,list |>\n\
    <| a tags=r,sum,list |>\nWe can use Reduce with +\n<code>\nReduce(`+`, lst)",
  "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in a\
    \ vector. For example, sum_squares(c(5, 8, 7, 1)) == 25. Make sure it works with\
    \ vectors of different lengths.\n\n\n</text>\n<cell>\nsum_squares <- function(lst)\
    \ {\n  sum(lst^2)\n}\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the product of the numbers in a vector. For example, product_of(c(5, 8, 7, 1))\
    \ == 120. Make sure it works with vectors of different lengths.\n\n\n</text>\n\
    <cell>\nproduct_of <- function(lst) {\n  prod(lst)\n}\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that returns the mean of the numbers in a vector. For example,\
    \ mean_of(c(5, 8, 7, 1)) == 5.5.\n\n\n</text>\n<cell>\nmean_of <- function(lst)\
    \ {\n  mean(lst)\n}\n</cell>\n<text>\nExercise 6\nWrite a function that returns\
    \ the median of the numbers in a vector. For example, median_of(c(5, 8, 7, 1))\
    \ == 8.\n\n\n</text>\n<cell>\nmedian_of <- function(lst) {\n  median(lst)\n}\n\
    </cell>\n<text>\nExercise 7\nWrite a function that returns the mode of the numbers\
    \ in a vector. For example, mode_of(c(5, 8, 7, 1)) == c(5, 7).\n\n\n</text>\n\
    <cell>\nmode_of <- function(lst) {\n  mode(lst)\n}\n</cell>\n<text>\nExercise\
    \ 8\nWrite a function that returns the variance of the numbers in a vector. For\
    \ example, variance_of(c(5, 8, 7, 1)) == 5.\n\n\n</text>\n<cell>\nvariance_of\
    \ <- function(lst) {\n  var(lst)\n}\n</cell>\n<text>\nExercise 9\nWrite a function\
    \ that returns the standard deviation of the numbers in a vector. For example,\
    \ std_dev_of(c(5, 8, 7, 1)) == 2.87.\n\n\n</text>\n<cell>\nstd_dev_of <- function(lst)\
    \ {\n  sd(lst)\n}\n</cell>\n<text>\nExercise 10\nWrite a function that returns\
    \ the variance of the numbers in a vector. For example, variance_of(c(5, 8, 7,\
    \ 1)) == 5.\n\n\n</text>\n<cell>\nvariance_of <- function(lst) {\n  var(lst)\n\
    }\n</cell>\n<text>\nExercise 11\nWrite a function that returns the standard deviation\
    \ of the numbers in a vector. For example, std_dev_of(c(5, 8, 7, 1)) == 2.87.\n\
    \n\n</text>\n<cell>\nstd_dev_of ", "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2\
    \ != 0)[1]) + 1])\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a solution\
    \ using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2 != 0)[1]) + 1])\n}\n</code>\n\
    <|/ a tags=r,sum,list |>\n<| c |>\nThis doesn't work if the list has duplicates.\
    \ For example, `c(5,5,5,5,5)` returns `25` instead of `15`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I added a note to the answer.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require duplicates :)\n<|/ c |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x%%2!=0)))\n</code>\n<|/ a tags=r,sum,list dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if the list has duplicates. For example, `c(5,5,5,5,5)` returns `25` instead\
    \ of `15`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require duplicates\
    \ :)\n<|/ c |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x) x%%2!=0)))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x%%2!=0)))\n</code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x%%2!=0)))\n</code>\n<|/ a tags=r,sum,list dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x%%2!=0)))\n</code>\n<|/ a tags=r,sum,list |>\n\
    <| a |>\n<code>\nsum(unlist(lapply(lst,function(x) x%%2!=0)))\n</code>\n<|/ a\
    \ tags=r,sum,list dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x%%2!=0)))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x%%2!=0)))\n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x%%2!=0)))\n</code>\n<|/ a d", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 8\n\
    The Fibonacci sequence is defined by the formula:\n\n$$ F_n = \\begin{cases}\n\
    \      0 & n = 0\\\n      1 & n = 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\\
    end{cases}$$\n\nwhere $F_0 = 0$ and $F_1 = 1$. \nIf $n$ is even, then:\n\n$$ Fn\
    \ = F{n-1} + F_{n-2}$$\n\nFor example, as 1, 3, 5, 7, and so on, five and twenty-one\
    \ $F_5$ terms.\nIf $n$ is odd, then $Fn = F{n-1}$\n\nWrite a function that computes\
    \ the value of the Fibonacci sequence up to $n$. \nYou may assume that $n$ is\
    \ an integer.\n\n\n</text>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=r |>\n<code>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)] %% 2 ==\
    \ 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<text>\nProblem 3\nGiven a vector of ints, return a vector where each\
    \ element is the absolute value of a number in the vector.\nExamples\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7, -5, 3, 2))\nc(-5, 7, 3)\n>>> solution(c(7,\
    \ -5, 3, 2))\nc(-", "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2 !=\
    \ 0)[1]) + 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2 == 1]) \n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if the list is empty. `sum(integer(0))`\
    \ returns `NA`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require the\
    \ list to be non-empty.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using purrr::reduce:\n\
    <code>\nlibrary(purrr)\n\nreduce(1:length(lst), function(x, y) lst[[x]][y], accumulate\
    \ = TRUE)\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\nHere is a base\
    \ R solution:\n<code>\nsum(unlist(lapply(1:length(lst), function(x) lst[[x]][x%%2==1])))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution using purrr::reduce:\n\
    <code>\nlibrary(purrr)\n\nreduce(1:length(lst), function(x, y) lst[[x]][y], accumulate\
    \ = TRUE)\n</code>\n<|/ a tags=r,list |>\n<| a dscore=2 |>\nHere's a solution\
    \ using purrr::reduce:\n<code>\nlibrary(purrr)\n\nreduce(1:length(lst), function(x,\
    \ y) lst[[x]][y], accumulate = TRUE)\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1\
    \ |>\nHere's a solution using purrr::reduce:\n<code>\nlibrary(purrr)\n\nreduce(1:length(lst),\
    \ function(x, y) lst[[x]][y], accumulate = TRUE)\n</code>\n<|/ a tags=r,list |>\n\
    <| a dscore=1 |>\nHere is a solution using purrr::reduce:\n<code>\nlibrary(purrr)\n\
    \nreduce(1:length(lst), function(x, y) lst[[x]][y], accumulate = TRUE)\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=1 |>\nHere is a solution using purrr::reduce:\n\
    <code>\nlibrary(purrr)\n\nreduce(1:length(lst), function(x, y) lst[[x]][y], accumulate\
    \ = TRUE)\n</code>\n<|/ a tags=r,list |>\n<| a dscore=0 |>\nHere is a solution\
    \ using purrr::reduce:\n<code>\nlibrary(purrr)\n\nreduce(1:length(lst), function(x,\
    \ y) lst[[x]][y], accumulate = TRUE)\n</code>\n<|/ a tags=r,list ", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</cell>\n<cell>\nsolution(c(5, 8, 7, 1))\n</cell>\n<cell>\n\
    solution(c(3, 3, 3, 3, 3))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of positive integers\
    \ that do not exceed a given integer n.\n\nFor example, given n = 10, return 3\
    \ because 12 is the only positive integer that does not exceed 10.\n\nThe sum\
    \ of positive integers is never greater than 10.\n\nFor another example, given\
    \ n = 10, return 0 because no such integer exists.\n\n\n</text>\n<cell>", "\n\
    \  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(c(30, 13, 24,\
    \ 321))\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum of\
    \ the numbers in the list below but only including even numbers.\n\n\n</text>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<text>\nLet's test our solution:\n\n\n</text>\n<cell>\nsolution(c(5,8,7,1))\n\
    </cell>\n<cell>\nsolution(c(3,3,3,3))\n</cell>\n<cell>\nsolution(c(30,13,24,321))\n\
    </cell>\n<text>\nThis solution is pretty good, but we can do better. Let's see\
    \ what happens if we try to use our solution to solve the problem of finding the\
    \ maximum element in a list. We'll start by writing a function that finds the\
    \ maximum element in a list:\n\n\n</text>\n<cell>", "\n  sum(lst[seq_along(lst)\
    \ %% 2 == 1]) \n}\n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq_along(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq_along(x)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq_along(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq_along(x)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq_along(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq_along(x)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq_along(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq_along(x)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq_along(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq_along(x)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq_along(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq_along(x)%%2==1])))\n</code>\n<|/", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=1 |>\nWe can use Reduce with +\n<code>\nReduce(`+`, lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the sum of the numbers in the list whose squares\
    \ are all the numbers in the list. For example, given [4, 9, 16, 25], return 25.\n\
    \nThe sum of the squares of the numbers in the list can be calculated using the\
    \ following formula:\n\n$$\n\\begin{align}\n\\sum{i=1}^{n}i^2 &= \\sum{i=1}^{n}i^2\
    \ \\\n&= \\sum{i=1}^{n}\\left( i\\left( n - 1 \\right) \\right)^2 \\\n&= \\sum{i=1}^{n}\\\
    left( i\\left( n - 1 \\right) \\right)^2 \\\n&= \\sum{i=1}^{n}\\left( i\\left(\
    \ n - 1 \\right) \\right)^2 \\\n&= \\sum{i=1}^{n}(i-1)^2 \\\n&= \\sum{i=1}^{n}i^2\
    \ - \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2 - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2\
    \ - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2 - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2\
    \ - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2 - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2\
    \ - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2 - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2\
    \ - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2 - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2\
    \ - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2 - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2\
    \ - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2 - 2 \\sum{i=1}^{n}1 \\\n&= \\sum{i=1}^{n}i^2\
    \ - 2 \\sum{i=1}^{n}1 \\\n", "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2\
    \ != 0)[1]):length(lst)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of positive integers that do not exceed a given integer\
    \ n.\n\nFor example, given n = 10, return 3 because 12 is the only positive integer\
    \ that does not exceed 10.\n\nIf there are several such values, return the smallest\
    \ one.\n\nIf there are no such values, return 0.\n\nIf n is negative or if n is\
    \ greater than 1e6, return 0.\n\nNote: The sum of negative integers is never 0.\n\
    \n</text>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_len(length(lst))\
    \ - seq_len(which(lst%%2 != 0)[1]) + 1])\n}\n</cell>\n<cell>\nsolution(c(30, 13,\
    \ 24, 321))\n</cell>\n<text>\nProblem 8\nGiven a vector of ints, return a vector\
    \ where each element is the absolute value minus the absolute value of the element\
    \ at that index for all elements in the vector. \nFor example, given [-2, -1,\
    \ 0, 1, 2], return [1, 1, 2, 1, 1].\n\n\n</text>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)%%2==1])))\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)%%2==1])))\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)%%2==1])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)%%2==1])))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)%%2==1])))\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)%%2==1])))\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)%%2==1])))\n\
    </code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)%%2==1])))\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)%%2==1])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)%%2==1])))\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum(unlist(lapply(lst,", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nHere's a solution using\
    \ dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\ndf <- data.frame(\n\
    \  x = c(5, 8, 7, 1),\n  y = c(3, 3, 3, 3, 3)\n)\n\ndf %>% \n  mutate(\n    odd_sum\
    \ = map_dbl(\n      x, \n      ~sum(.x[.x %% 2 == 1]), \n      .names = \"odd_sum\"\
    \n    )\n  )\n</code>\n<|/ a tags=r dscore=2 |>\n<| a dscore=1 |>\nHere's a solution\
    \ using base R:\n<code>", "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2\
    \ != 0)[1]) + 1])\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n\
    <|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n\
    <|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=1 tags=r,sum,list |>\n<| a dscore=1 |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1 |>\n", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem\
    \ 8\nGiven a vector of ints, return a vector where each element is the absolute\
    \ value minus the absolute value of the element at that index. \nFor example,\
    \ given [-2, -1, 0, 1, 2], return [1, 1, 2, 1, 1].\n\n\n</text>\n<cell>", "\n\
    \  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2 == 1]) \n}\n</cell>\n<cell>",
  "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)] %% 2 == 1])\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nI like your solution. Could you please explain the `seq_along`\
    \ function? I understand that it is used to get the sequence number of the element,\
    \ but I don't understand how it works in this context. Thanks!\n<|/ c |>\n<| c\
    \ |>\n`seq_along` is used to get the sequence number of the element. `lst[seq_along(lst)]`\
    \ gives you the sequence number of the element. `lst[seq_along(lst)] %% 2 == 1`\
    \ gives you the sequence number of the element that is even.\n<|/ c |>\n<| c |>\n\
    Thanks for the explanation! I understand it now.\n<|/ c |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for the answer! I understand it now.\n<|/ c |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n\
    </code>\n<|/ a tags=r,sum,list dscore=1 |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x){x%%2==1})))\n\
    </code>\n<|/ a tags=r,sum,list dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\n\
    sum(unlist(lapply(", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution does not work for `c(5,\
    \ 8, 7, 1)`\n<|/ c |>\n<| c |>\nI agree, my solution was based on the assumption\
    \ that the list was always sorted and that there were no duplicates. I added a\
    \ solution that works with duplicates.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with duplicates.\n<|/ c |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a dscore=2 tags=r,sum,list |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/ a dscore=1 tags=r,sum,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x){x[x%%2==1]})))\n\
    </code>\n<|/", "\n  sum(lst[seq_along(lst) %% 2 == 1])\n}\n</cell>\n<text>\nProblem\
    \ 8\nWrite a function that returns the product of the elements of two vectors.\n\
    \nThe product of two vectors is a vector that has the same direction as the first\
    \ vector and passes through the second vector. For example, if the first vector\
    \ is (1,2,3) and the second vector is (4,5,6), the product is (4,5,6,12,9).\n\n\
    The product of two vectors is a vector that has the same direction as the first\
    \ vector and passes through the second vector. For example, if the first vector\
    \ is (1,2,3) and the second vector is (4,5,6), the product is (4,5,6,12,9).\n\n\
    If the vectors have different lengths, the product is zero. For example, if the\
    \ first vector is (1,2,3) and the second vector is (4,5,6,7,8,9), the product\
    \ is (0,0,0,0).\n\nIf the vectors are of unequal lengths, the product is zero.\
    \ For example, if the first vector is (1,2,3) and the second vector is (4,5,6),\
    \ the product is (0,0,0,0).\n\nWrite a function that returns the product of the\
    \ elements of two vectors.\n\nThe product of two vectors is a vector that has\
    \ the same direction as the first vector and passes through the second vector.\
    \ For example, if the first vector is (1,2,3) and the second vector is (4,5,6),\
    \ the product is (4,5,6,12,9).\n\nThe product of two vectors is a vector that\
    \ has the same direction as the first vector and passes through the second vector.\
    \ For example, if the first vector is (1,2,3) and the second vector is (4,5,6),\
    \ the product is (4,5,6,12,9).\n\nIf the vectors have different lengths, the product\
    \ is zero. For example, if the first vector is (1,2,3) and the second vector is\
    \ (4,5,6,7,8,9), the product is (0,0,0,0).\n\nIf the vectors are of unequal lengths,\
    \ the product is zero. For example, if the first vector is (1,2,3) and the second\
    \ vector is (4,5,6), the product is (0,0,0,0).\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)])))\
    \ \n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tag", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\n\
    Problem 8\nGiven a vector of ints, return a vector of the squares of all the odd\
    \ numbers in the vector.\n\nExample\nFor lst = c(5, 8, 7, 1) the output should\
    \ be\nsolution(lst) = c(25, 49, 49, 49)\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</code>\n<|/ a tags=r,list,sum |>\n<| a dscore=0 |>\n\
    <code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,list,sum |>\n\
    <| a |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,list,sum\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n\
    <|/ a tags=r,list,sum |>\n<| a tags=r,list,sum |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r,list,sum |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a tags=r,list,sum\
    \ |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,list,sum\
    \ |>\n<| a tags=r,list,sum |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r,list,sum dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    sum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,list,sum |>\n<| a dscore=0\
    \ |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,list,sum\
    \ |>\n<| a tags=r,list,sum |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=r,list,sum |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a dscore", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n\
    <|/ a tags=r,sum,list |>\n<| a dscore=1 |>\n<code>\nsum <- function(x){\n  y <-\
    \ x\n  for(i in 1:length(y)){\n    if(y[i] %% 2 == 1){\n      y[i] <- y[i] + y[i+1]\n\
    \      y[i+1] <- 0\n    }\n  }\n  return(y)\n}\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i\
    \ in 1:length(y)){\n    if(y[i] %% 2 == 1){\n      y[i] <- y[i] + y[i+1]\n   \
    \   y[i+1] <- 0\n    }\n  }\n  return(y)\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i in 1:length(y)){\n\
    \    if(y[i] %% 2 == 1){\n      y[i] <- y[i] + y[i+1]\n      y[i+1] <- 0\n   \
    \ }\n  }\n  return(y)\n}\n</code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\n\
    sum <- function(x){\n  y <- x\n  for(i in 1:length(y)){\n    if(y[i] %% 2 == 1){\n\
    \      y[i] <- y[i] + y[i+1]\n      y[i+1] <- 0\n    }\n  }\n  return(y)\n}\n\
    </code>\n<|/ a tags=r,sum,list dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum <- function(x){\n\
    \  y <- x\n  for(i in 1:length(y)){\n    if(y[i] %% 2 == 1){\n      y[i] <- y[i]\
    \ + y[i+1]\n      y[i+1] <- 0\n    }\n  }\n  return(y)\n}\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i in 1:length(y)){\n\
    \    if(y[i] %% 2 == 1){\n      y[i] <- y[i] + y[i+1]\n      y[i+1] <- 0\n   \
    \ }\n  }\n  return(y)\n}\n</code>\n<|/ a tags=r,sum,list dscore=1 |>\n<| a tags=r,sum,list\
    \ |>\n<code>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n\
    \  sum(lst[seq_along(lst) %% 2 == 1]) \n}\n</cell>\n<cell>\nsolution(c(5, 8, 7,\
    \ 1))\n</cell>\n<cell>\nsolution(c(3, 3, 3, 3, 3))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<text>\nProblem 8\nWrite a function that returns the\
    \ number of elements in a list that are not in the list.\n\n\n</text>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the product of all the numbers in a given list.\nExamples\n>>>\
    \ solution(c(30, 13, 24, 321))\n60\n>>> solution(c(30, 13, 24, 321, 5, 8, 7, 1))\n\
    60\n>>> solution(c(30, 13, 24, 321, 5, 8, 7, 1, 3, 3))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 5, 8, 7, 1, 3, 3, 3, 3))\n60\n>>> solution(c(30, 13, 24, 321, 5,\
    \ 8, 7, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ", "\n  sum(lst[seq_along(lst)%%2\
    \ == 1][seq_along(lst)%%2 == 1])\n}\n</code>\n<|/ a tags=r,sum,list |>\n<| c |>\n\
    This doesn't work if you have a list with multiple elements that are the same.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require the list to be sorted.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require the list to be sorted.\n\
    <|/ c |>\n<| a tags=r,sum,list |>\nHere's a solution that doesn't require the\
    \ list to be sorted:\n<code>\nsum.odd <- function(lst) {\n  sum(lst[seq_along(lst)%%2\
    \ == 1][seq_along(lst)%%2 == 1])\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI added\
    \ a solution that doesn't require the list to be sorted.\n<|/ c |>\n<| a dscore=4\
    \ |>\nHere's a solution using purrr::map and purrr::reduce:\n<code>\nlibrary(purrr)\n\
    library(dplyr)\n\nsum.odd <- function(lst) {\n  map(lst, ~sum(.x[seq_along(.x)%%2\
    \ == 1]))\n}\n\nsum.odd(c(5, 8, 7, 1))", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<text>\n\
    Let's test our solution:\n\n\n</text>\n<cell>\nsolution(c(30, 13, 24, 321))\n\
    </cell>\n<text>\nGreat! Let's see how we did on our own:\n\n\n</text>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<text>\nOkay, now let's try a slightly\
    \ more complicated example:\n\n\n</text>\n<cell>\nsolution(c(30, 13, 24, 321,\
    \ 5, 8, 7, 1))\n</cell>\n<text>\nIt works! But can we do better?\n\nWe could use\
    \ sapply to apply the function only to even positions:\n\n\n</text>\n<cell>\n\
    solution <- function(lst) {\n  sum(sapply(lst, function(x) x[x%%2 == 1]))\n}\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321, 5, 8, 7, 1))\n</cell>\n<text>\nBut\
    \ this only works because our function only returns one number. Let's try something\
    \ more complicated:\n\n\n</text>\n<cell>\nsolution <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x[x%%2 == 1] * x[x%%2 == 2]))\n}\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321, 5, 8, 7, 1))\n</cell>\n<text>\nIt works! But can we do better?\n\
    \nWe could use lapply to apply the function only to even positions:\n\n\n</text>\n\
    <cell>\nsolution <- function(lst) {\n  sum(lapply(lst, function(x) x[x%%2 == 1]\
    \ * x[x%%2 == 2]))\n}\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321, 5, 8, 7, 1))\n\
    </cell>\n<text>\nBut this only works because our function only returns one number.\
    \ Let's try something more complicated:\n\n\n</text>\n<cell>\nsolution <- function(lst)\
    \ {\n  sum(lapply(lst, function(x) x[x%%2 == 1] * x[x%%2 == 2]))\n}\n</cell>\n\
    <cell>\nsolution(c(30, 13, 24, 321, 5, 8, 7, 1))\n</cell>\n<text>\nIt works! But\
    \ can we do better?\n\nWe could use sapply to apply the function only to even\
    \ positions:\n\n\n</text>\n<cell>\nsolution <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x[x%%2 == 1] * x[x%%2 == 2]))\n}\n", "\n  sum(lst[seq_len(length(lst))\
    \ - seq_len(which(lst%%2 != 0)[1]) + 1])\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ solution is very elegant. Thank you!\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution\
    \ using purrr::reduce:\n<code>\nlibrary(purrr)\n", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq_along(lst) %% 2 == 1]) \n}\n</cell>\n<cell>\nsolution(c(30, 13,\
    \ 24, 321))\n</cell>\n<text>\nProblem 3\nThe Fibonacci sequence is defined by\
    \ the formula:\n\n$Fn = \\begin{cases}\n      1 & n = 0\\\n      1 & n = 1 \\\n\
    \      F{n-1} + F_{n-2} & n > 1\n    \\end{cases}$\n\nwhere $F_n$ is the n-th\
    \ number in the Fibonacci sequence. For example, the 6th number in the sequence\
    \ is $F_6 = 8$. The first few terms of the Fibonacci sequence are:\n\n$F_1=1$,\
    \ $F_2=1$, $F_3=2$, $F_4=3$, $F_5=5$, $F_6=8$, $F_7=13$, and $F_8=21$.\n\nWhat\
    \ is the first $n$ in the Fibonacci sequence to satisfy this equation:\n\n$F_n\
    \ = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$?\n\n\n</text>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x){x[seq(x)%%2==1]})))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst, function(x)\
    \ x[seq(x)%%2==1])))\n</code>\n<|/ a tags=r,sum,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,\
    \ function(x) x[seq(x)%%2==1])))\n</code>\n<|/ a tags=r,sum,list dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst, function(x) x[seq(x)%%2==1])))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,\
    \ function(x) x[seq(x)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst, function(x) x[seq(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst, function(x)\
    \ x[seq(x)%%2==1])))\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=2 |>\n<code>\n\
    sum(unlist(lapply(lst, function(x) x[seq(x)%%2==1])))\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst, function(x) x[seq(x)%%2==1])))\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,\
    \ function(x) x[seq(x)%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst, function(x) x[seq(x)%%2==1])))\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst, function(x)\
    \ x[seq(x)%%2==1])))\n</code>\n<|/ a tags=r,", "\n  sum(lst[seq_along(lst) %%\
    \ 2 == 1])\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list dscore=1 |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=1 tags=r,list |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list dscore=1 |>\n<| a tags=r,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n\
    \  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2 != 0)[1]) + 1])\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a solution using data.table:\n<code>\n\
    library(data.table)\nsetDT(df)\ndf[, sum(df$V2[seq_len(.N) - seq_len(which(df$V2\
    \ %% 2 != 0)[1]) + 1]), by = V1]\n</code>\nOutput:\n<code>\n   V1 V2\n1:  1  9\n\
    2:  2 12\n3:  3 13\n4:  4 14\n5:  5 15\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\nHere's a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\n\
    library(purrr)\n\ndf %>%\n  group_by(V1) %>%\n  summarise(V2 = sum(V2[seq_len(.N)\
    \ - seq_len(which(V2 %% 2 != 0)[1]) + 1]))\n", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n\
    <text>\nProblem 8\nThe Fibonacci sequence is defined by the formula:\n\n$$ F_n\
    \ = \\begin{cases}\n      0 & \\text{if } n = 0\\\n      1 & \\text{if } n = 1\
    \ \\\n      F{n-1} + F_{n-2} & \\text{otherwise}\n    \\end{cases}$$\n\nwhere\
    \ $F_1 = 1$ and $F_2 = 1$. \nIf $n$ is even, then:\n\n$$ Fn = F{n-1} + F_{n-2}\
    \ = F{n-1} + 2F_{n-2}$$\n\nand if $n$ is odd, then:\n\n$$ Fn = F{n-1} + F_{n-2}\
    \ + F_{n-3} = 2F_{n-1} + F_{n-2}$$\n\nFor example, with $n = 5$, \n$$ F_5 = 5\
    \ \\times 1 + 4 \\times 1 + 3 \\times 0 + 2 \\times 1 = F_4 + F_3 + F_2 + F_1\
    \ = 10$$\n\nWrite a function that computes the n-th number in the Fibonacci sequence.\
    \ \nFor example, given $n = 4$, your function should return $10$.\n\n\n</text>\n\
    <cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,sum,list |>\n\
    <code>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nHere's a solution using purrr::map_dbl\n<code>\nlibrary(purrr)\n\
    \nx <- c(5, 8, 7, 1)\nmap_dbl(seq_along(x), ~x[seq(.x, length(x), 2)])", "\n \
    \ sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]%%2\
    \ != 0])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq_along(lst)%%2 == 1]) \n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)])))\
    \ \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[seq(1,length(x),2)]))) \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[seq(1,length(x),2)]))) \n</code>\n<|/ a tags=r,",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 8\n\
    Write a function that returns the sum of the squares of the numbers in a vector.\
    \ Except that if the argument is a NULL value, return 0.\n\n\n</text>\n<cell>",
  "\n  sum(lst[seq_along(lst) %% 2 == 1])\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    Here's a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  sum(lst[seq_len(length(lst)%%2)])\n}\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of the even elements in a list.\nExamples\n\
    >>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n\
    21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7, 5, 3, 2))\n21\n>>> solution(c(7,\
    \ 5, 3, 2))\n21\n", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2L])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a tags=r,list,sum\
    \ |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==1])))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==1])))\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==1])))\n</code>\n<|/ a tags=r,list,sum dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[x%%2==1])))\n</code>\n<|/ a tags=r,list,sum\
    \ |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==1])))\n\
    </code>\n<|/ a tags=r,list,sum |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==1])))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==1])))\n</code>\n<|/ a tags=r,list,sum |>\n<| a dscore=1 |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x%%2==1])))\n</code>\n<|/ a tags=r,list,sum\
    \ |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==1])))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==1])))\n</code>\n<|/ a tags=r,list,sum |>\n<| a |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x%%2==1])))\n</code>\n<|/ a dscore=1 tags=r,list,sum |>\n<| a dscore=1 |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[x%%2==1])))\n</code>\n<|/ a tags=r,list,sum\
    \ |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==1])))\n\
    </code>\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2\
    \ == 1][seq_along(lst)%%2 == 2])\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum,function\
    \ |>\n<code>\nsum.odd <- function(x){\n  sum(x[x %% 2 == 1])\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nsum.odd <- function(x){\n  sum(x[x\
    \ %% 2 == 1])\n}\n</code>\n<|/ a tags=r,list,sum,function |>\n<| a tags=r,list,sum,function\
    \ |>\n<code>\nsum.odd <- function(x){\n  sum(x[x %% 2 == 1])\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum.odd <- function(x){\n  sum(x[x\
    \ %% 2 == 1])\n}\n</code>\n<|/ a tags=r,list,sum,function |>\n<| a tags=r,list,sum,function\
    \ |>\n<code>\nsum.odd <- function(x){\n  sum(x[x %% 2 == 1])\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum.odd <- function(x){\n  sum(x[x\
    \ %% 2 == 1])\n}\n</code>\n<|/ a tags=r,list,sum,function |>\n<| a tags=r,list,sum,function\
    \ |>\n<code>\nsum.odd <- function(x){\n  sum(x[x %% 2 == 1])\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum.odd <- function(x){\n  sum(x[x\
    \ %% 2 == 1])\n}\n</code>\n<|/ a tags=r,list,sum,function |>\n<| a tags=r,list,sum,function\
    \ |>\n<code>\nsum.odd <- function(x){\n  sum(x[x %% 2 == 1])\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>\nsum.odd <- function(x){\n  sum(x[x %% 2 == 1])\n\
    }\n</code>\n<|/ a tags=r,list,sum,function dscore=0 |>\n<| a tags=r,list,sum,function\
    \ |>\n<code>\nsum.odd <- function(x){\n  sum(x[x %% 2 == 1])\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=r,list,sum,function |>\n<code>\nsum.", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(c(5, 8, 7, 1))\n</cell>\n<cell>\n\
    solution(c(3, 3, 3, 3, 3))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n\
    <text>\nProblem 10\n\n</text>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a tags=r,list dscore=1 |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lst[seq_along(lst)%%2==1]))\n\
    </code>\n<|/ a dscore=", "\n  sum(lst[seq_along(lst)%%2 == 1][seq_along(lst)%%2\
    \ == 2])\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do this without using any packages.\n<|/ c |>\n<| c |>\n\
    I added a solution without packages.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do this without using any packages.\n<|/ c\
    \ |>\n<| c |>\nI added a solution without packages.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a way to do this without using any packages.\n\
    <|/ c |>\n<| a tags=r |>\nHere's a solution using dplyr and purrr packages:\n\
    <code>\nlibrary(dplyr)\nlibrary(purrr)\n\ndf <- data.frame(\n  x = c(5, 8, 7,\
    \ 1),\n  y = c(3, 3, 3, 3, 3)\n)\n\ndf %>% \n  mutate(\n    z = map(x, ~sum(y[x%%2\
    \ == 1])),\n    z = map_dbl(z, ~sum(y[x%%2 == 1])))\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r |>\nHere's a solution using data.table:\n<code>\nlibrary(data.table)\n\
    \ndf <- data.frame(\n  x = c(5, 8, 7, 1),\n  y = c(3, 3, 3, 3, 3)\n)\n\nsetDT(df)\n\
    df[, z := sum(x[x %% 2 == 1]), by = .(x %% 2)]\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like this solution, but I wonder if there is a way to do this without\
    \ using any packages.\n<|/ c |>\n<| c |>\nI added a solution without packages.\n\
    <|/ c |>\n<| a tags=r |>\nHere's a solution using dplyr and purrr packages:\n\
    <code>\nlibrary(dplyr)\nlibrary(purrr)\n\ndf <- data.frame(\n  x = c(5, 8, 7,\
    \ 1),\n  y = c(3, 3, 3, 3, 3)\n)\n\ndf %>% \n  mutate(\n    z = map(x, ~sum(y[x%%2\
    \ == 1])),\n    z = map_dbl(z, ~sum(y[x%%2 == 1])))\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nHere's a solution using base R:\n<code>\ndf <- data.frame(\n\
    \  x = c(5, 8, 7, 1),\n", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)] %% 2 == 1])\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like the `seq_along` idea. I'm still trying to wrap\
    \ my head around `apply` but this looks promising.\n<|/ c |>\n<| c |>\nI added\
    \ a solution using `apply` which might be more intuitive to you.\n<|/ c |>\n<|\
    \ c |>\nI like the `seq_along` idea. I'm still trying to wrap my head around `apply`\
    \ but this looks promising.\n<|/ c |>\n<| c |>\nI added a solution using `apply`\
    \ which might be more intuitive to you.\n<|/ c |>\n<| a dscore=2 |>\nHere's a\
    \ solution using apply and seq_along:\n<code>\nsolution <- function(lst) {\n \
    \ sum(lst[seq_along(lst)][lst[seq_along(lst)] %% 2 == 1])\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a tags=r,function,list |>\nHere's a solution using sapply and %in%:\n\
    <code>\nsolution <- function(lst) {\n  sum(sapply(lst, function(x) x %in% c(1,3,5,7,9)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the `sapply` idea. I'm still trying\
    \ to wrap my head around `apply` but this looks promising.\n<|/ c |>\n<| a tags=r,function,list\
    \ |>\nHere's another solution using lapply and grepl:\n<code>\nsolution <- function(lst)\
    \ {\n  sum(lapply(lst, grepl, pattern = c(1,3,5,7,9)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like the `lapply` idea. I'm still trying to wrap my head around\
    \ `apply` but this looks promising.\n<|/ c |>\n<| a tags=r,function,list |>\n\
    Here's another solution using lapply and grepl:\n<code>\nsolution <- function(lst)\
    \ {\n  sum(lapply(lst, grepl, pattern = c(1,3,5,7,9)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nHere's a solution using purrr::map\n<code>\nlibrary(purrr)\n\
    \nsolution <- function(lst) {\n  sum(", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2\
    \ == 1]) \n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(c(5, 8, 7, 1))\n</cell>\n<cell>\nsolution(c(3, 3, 3, 3, 3))\n\
    </cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the number of positive integers less than or equal to\
    \ n. \nIf there are no such integers, return 0.\nIf there are multiple such integers,\
    \ return the lexicographically smallest integer that is larger than n.\nIf n is\
    \ less than or equal to 0, return 0.\n\nFor example, given n = 10, return 3, because\
    \ there are only three numbers less than or equal to 10: 1, 2, and 3.\n\nWrite\
    \ a function that takes in a vector of integers and returns a vector of counts.\
    \ \nThe function should return a vector of counts, where each element of the vector\
    \ is the number of positive integers less than or equal to that element.\n\nFor\
    \ example, given n = [10, 15, 3, 7], your function should return [1, 1, 2, 0].\
    \ \nThe first element of the vector is the number of positive integers less than\
    \ or equal to 10.\nThe second element of the vector is the number of positive\
    \ integers less than or equal to 15.\nThe third element of the vector is the number\
    \ of positive integers less than or equal to 3.\nThe fourth element of the vector\
    \ is the number of positive integers less than or equal to 7.\n\n</text>\n<cell>",
  "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \ndf <- data.frame(\n  x = c(5, 8, 7, 1),\n  y = c(3, 3, 3, 3, 3)\n)\n\ndf %>%\
    \ \n  mutate(\n    odd_even = map_int(x, ~sum(.x[seq(1, length(.x), 2)]))\n  )\n\
    \n  x y odd_even\n1 5 3       12\n2 8 3        9\n3 7 3        9\n4 1 3      \
    \  9\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\nWe can use map2\n<code>\nlibrary(purrr)\n\
    map2_int(df$x, df$y, `+`, seq(1, length(.x), 2))", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of elements in a list that are not equal to some value\
    \ (e.g., 3).\nExamples\n>>> solution(c(3, 3, 3, 3, 3))\n2\n>>> solution(c(5, 8,\
    \ 7, 1))\n1\n>>> solution(c(30, 13, 24, 321))\n0\n\n</text>\n<cell>\nsolution\
    \ <- function(lst) {\n  sum(lst[!seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(c(3, 3, 3, 3, 3))\n</cell>\n<text>\nProblem 8\nWrite a function that\
    \ returns the number of elements in a list that are not equal to some value (e.g.,\
    \ 3).\nExamples\n>>> solution(c(3, 3, 3, 3, 3))\n2\n>>> solution(c(5, 8, 7, 1))\n\
    1\n>>> solution(c(30, 13, 24, 321))\n0\n\n</text>\n<cell>\nsolution <- function(lst)\
    \ {\n  sum(lst[!seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(c(3, 3,\
    \ 3, 3, 3))\n</cell>\n<text>\nProblem 9\nWrite a function that returns the number\
    \ of elements in a list that are not equal to some value (e.g., 3).\nExamples\n\
    >>> solution(c(3, 3, 3, 3, 3))\n2\n>>> solution(c(5, 8, 7, 1))\n1\n>>> solution(c(30,\
    \ 13, 24, 321))\n0\n\n</text>\n<cell>\nsolution <- function(lst) {\n  sum(lst[!seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(c(3, 3, 3, 3, 3))\n</cell>\n\
    <text>\nProblem 10\nWrite a function that returns the number of elements in a\
    \ list that are not equal to some value (e.g., 3).\nExamples\n>>> solution(c(3,\
    \ 3, 3, 3, 3))\n2\n>>> solution(c(5, 8, 7, 1))\n1\n>>> solution(c(30, 13, 24,\
    \ 321))\n0\n\n</text>\n<cell>\nsolution <- function(lst) {\n  sum(lst[!seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(c(3, 3, 3, 3, 3))\n</cell>\n\
    <text>\nProblem 11\nWrite a function that returns the number of elements in a\
    \ list that are not equal to some value (e.g., 3).\nExamples\n>>> solution(c(3,\
    \ 3, 3, 3, 3))\n2\n>>> solution(c(5, 8, 7, 1))\n1\n>>> solution(c(30, 13, 24,\
    \ 321))\n0\n\n</text>\n<cell>\nsolution <- function(lst) {\n", "\n  sum(lst[seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<text>\nProblem 3\nGiven a non-empty\
    \ vector of digits, return a new vector where each element is the sum of the respective\
    \ digits in the original vector. \nThe digits are stored such that the most significant\
    \ digit is at the head of the vector. \nYou can assume that digits are stored\
    \ such that the most significant digit is at the head of the vector.\nFor example,\
    \ given c(\"1\", \"8\", \"3\", \"4\"), return c(\"6\", \"9\", \"12\", \"15\").\n\
    \n</text>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)] %% 2 == 1])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\nWe can use Reduce with\
    \ +\n<code>\nReduce(`+`, lst)", "\n  sum(lst[seq_len(length(lst)%%2L):(length(lst)%%2L+1L)])\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum <- function(x) {\n\
    \  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum <- function(x) {\n  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum <- function(x) {\n  sum(ifelse(x\
    \ %% 2 == 0, x, 0))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum\
    \ <- function(x) {\n  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum <- function(x) {\n  sum(ifelse(x %% 2 == 0,\
    \ x, 0))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum <- function(x)\
    \ {\n  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum <- function(x) {\n  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nsum <- function(x) {\n  sum(ifelse(x %% 2\
    \ == 0, x, 0))\n}\n</code>\n<|/ a dscore=1 tags=r |>\n<| a dscore=1 |>\n<code>\n\
    sum <- function(x) {\n  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum <- function(x) {\n  sum(ifelse(x %% 2 == 0,\
    \ x, 0))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum <- function(x)\
    \ {\n  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum <- function(x) {\n  sum(ifelse(x %% 2 == 0, x, 0))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>", "\n  sum(lst[seq_along(lst)%%2 == 1])\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n\
    </code>\n<|/ a dscore=1 tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a tags=r |>\n<| a\
    \ tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2 == 1])\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq_along(lst)%%2 == ", "\n \
    \ sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements in the vector.\nExamples\n>>> solution(c(1,2,3))\n\
    6\n>>> solution(c(1,2,-3))\n0\n>>> solution(c(1,2,-3,4))\n9\n>>> solution(c(1,2,-3,-4,5))\n\
    25\n>>> solution(c(1,2,-3,-4,-5,6))\n0\n>>> solution(c(1,2,-3,-4,-5,-6,7))\n25\n\
    >>> solution(c(1,2,-3,-4,-5,-6,-7,8))\n0\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,9))\n\
    25\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,10))\n0\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,11))\n\
    25\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,12))\n0\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13))\n\
    25\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,14))\n0\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15))\n\
    25\n>>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,16))\n0\n>>>\
    \ solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-16,17))\n25\n>>>\
    \ solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-16,-17))\n0\n>>>\
    \ solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-16,-17,-18))\n25\n\
    >>> solution(c(1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,15,-16,-17,-18,-19))\n\
    0\n>>> solution(c(1,2,-3,-4,-5,-", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 != 0])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)][lst[seq_along(lst)",
  "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst)%%2 == 1)])\n}\n</cell>\n\
    <text>\nThe solution is now complete. Let's take a look at how it works.\n\n\n\
    </text>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nThe first line\
    \ of the function definition creates a vector containing the numbers from 0 to\
    \ length(lst) - 1. We then use which on this vector to find the positions of odd\
    \ numbers. We then use seq_len to get the number of elements in the odd positions.\
    \ We then use that to subset the original vector to get the odd elements. We then\
    \ sum these elements.\n\nThe function can be simplified to:\n\n\n</text>\n<cell>\n\
    solution <- function(lst) {\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst)%%2\
    \ == 1)])\n}\n</cell>\n<text>\nLet's test it on a few examples:\n\n\n</text>\n\
    <cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30, 13, 24,\
    \ 321, 1))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321, 2))\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321, 3))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321,\
    \ 4))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321, 5))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321, 6))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321, 7))\n</cell>\n\
    <cell>\nsolution(c(30, 13, 24, 321, 8))\n</cell>\n<cell>\nsolution(c(30, 13, 24,\
    \ 321, 9))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321, 10))\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321, 11))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321,\
    \ 12))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321, 13))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321, 14))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321, 15))\n</cell>\n\
    <cell>\nsolution(c(30, 13, 24, 321, 16))\n</cell>\n<cell>\nsolution(c(30, 13,\
    \ 24, 321, 17))\n</cell", "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2\
    \ != 0)[1]) + 1])\n}\n</cell>\n<text>\nProblem 8\nWrite a function that returns\
    \ the first element of a list that satisfies a given condition. For example,\n\
    \n>>> solution(c(1,2,3,4,5,6,7,8,9,10))\n3\n>>> solution(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))\n\
    10\n>>> solution(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100))\n\
    1\n>>> solution(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100))\n\
    100\n>>> solution(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,7",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_len(length(lst))\
    \ - seq_len(which(lst%%2 != 0)[1]) + 1])\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum((1:length(lst))[lst%%2==1])\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n<|/ a\
    \ tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/\
    \ a tags=r,list |>\n<| c |>\nThis doesn't work if you have a list with more than\
    \ one element that is a multiple of 2. For example, `c(5, 8, 7, 1)` returns `12`,\
    \ but `c(3, 3, 3, 3, 3)` returns `9`.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I'll edit my answer accordingly.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to account for multiple elements that are multiples of 2.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I edited my question to make it more clear.\n\
    <|/ c |>\n<| a tags=r,list |>\nHere's a solution using lapply and sapply (thanks\
    \ to for pointing out that sapply is better than lapply in this case):\n<code>\n\
    sapply(lst, function(x) sum(lst[seq(1, length(x), 2)]))\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\n`sapply` is better than `lapply` in this case. `sapply` will return\
    \ a vector of the same length as `lst`, whereas `lapply` will return a list with\
    \ the same length as `lst`.\n<|/ c |>\n<| c |>\nThanks for your answer! I edited\
    \ my question to make it more clear.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution\
    \ using lapply and sapply:\n<code>\nsapply(lst, function(x) sum(lst[seq(1, length(x),\
    \ 2)]))\n</code>\n<|/ a tags=r,list |>\n<| c |>\nThanks for your answer! I edited\
    \ my question to make it more clear.\n<|/ c |>\n<| a tags=r,list |>\nHere's a\
    \ solution using lapply and sapply:\n<code>\nsapply(lst, function(x) sum(lst[seq(1,\
    \ length(x), 2)]))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a solution\
    \ using purrr::map_dbl\n<code>\nlibrary(purrr)\n\nmap_dbl(lst, function(x) sum(lst[seq(1,\
    \ length(x), 2)]))\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\nHere's a\
    \ solution using purrr::reduce:\n<code>\nlibrary(purrr)\n\nreduce(lst, `+`)\n\
    </code>\n<|/ a tags=r,list |>\n<| a ", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsum.odd <- function(x)\
    \ {\n  sum(unlist(lapply(x, function(y) y%%2==1)))\n}\n\nsum.odd(c(5,8,7,1))",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]\
    \ %% 2 == 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n\
    </cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\nHere is a solution using\
    \ sapply and sum:\n<code>\nsapply(lst,function(x) sum(x[seq_along(x)%%2==1]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a tags=r,list,sum |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a tags=r,list,sum |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,list,sum |>\n<code>\nsum(unlist(lst)[seq_along(unlist(lst))%%2",
  "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,sum |>\n<| a dscore=0\
    \ |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,sum |>\n\
    <| a tags=r,sum |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/\
    \ a tags=r,sum |>\n<| a tags=r,sum |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq(1, length(lst),\
    \ 2)])\n</code>\n<|/ a tags=r,sum |>\n<| a dscore=0 |>\n<code>\nsum(lst[seq(1,\
    \ length(lst), 2)])\n</code>\n<|/ a tags=r,sum |>\n<| a |>\n<code>\nsum(lst[seq(1,\
    \ length(lst), 2)])\n</code>\n<|/ a tags=r,sum dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a tags=r,sum |>\n<code>\nsum(lst[seq(1,\
    \ length(lst), 2)])\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,sum |>\n<code>\n\
    sum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a tags=r,sum |>\n<| a tags=r,sum\
    \ |>\n<code>\nsum(lst[seq(1, length(lst), 2)])\n</code>\n<|/ a dscore=0 ", "\n\
    \  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)\
    \ %% 2 == 1]) \n}\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the product of the numbers in a given\
    \ list. Except the last, which should remain unchanged. \nFor example, \nproduct([2,\
    \ 3, 4]) should return $6$.\nproduct([2, 3, 1, 4]) should return $24$.\nproduct([2,\
    \ 3, 4, 1, 5]) should return $8$.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 8\nWrite a function\
    \ that returns the product of the numbers in a given list.\nExamples\n>>> solution(c(30,\
    \ 13, 24, 321))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(30, 13, 24, 321, 1))\n60\n>>> solution(c(30,\
    \ 13, 24, 321, 1))\n60\n>>> solution(c(", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work if you have a list with more\
    \ than one element that satisfies the condition. For example, `c(5, 8, 7, 1)`\
    \ returns `12`, but `c(3, 3, 3, 3, 3)` returns `9`.\n<|/ c |>\n<| c |>\nGood catch.\
    \ Fixed.\n<|/ c |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n</code>\n\
    <|/ a tags=r dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2==1])\n\
    </code>\n<|/ a dscore", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<text>\nProblem 9\nThe sum of the primes below 10 is 2 + 3 + 5 + 7\
    \ = 17.\nFind the sum of all the primes below two million.\n\n\n</text>\n<cell>",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a tags=r,sum,list |>\n<|\
    \ a dscore=0 |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i in 1:length(y)){\n\
    \    if(y[i]%%2==0){\n      y[i] <- y[i]+y[i-1]\n    }\n  }\n  return(y)\n}\n\
    </code>\n<|/ a tags=r,sum,list |>\n<| a dscore=0 |>\n<code>\nsum <- function(x){\n\
    \  y <- x\n  for(i in 1:length(y)){\n    if(y[i]%%2==0){\n      y[i] <- y[i]+y[i-1]\n\
    \    }\n  }\n  return(y)\n}\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=0\
    \ |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i in 1:length(y)){\n    if(y[i]%%2==0){\n\
    \      y[i] <- y[i]+y[i-1]\n    }\n  }\n  return(y)\n}\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i\
    \ in 1:length(y)){\n    if(y[i]%%2==0){\n      y[i] <- y[i]+y[i-1]\n    }\n  }\n\
    \  return(y)\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum <-\
    \ function(x){\n  y <- x\n  for(i in 1:length(y)){\n    if(y[i]%%2==0){\n    \
    \  y[i] <- y[i]+y[i-1]\n    }\n  }\n  return(y)\n}\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a tags=r,sum,list\
    \ |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i in 1:length(y)){\n    if(y[i]%%2==0){\n\
    \      y[i] <- y[i]+y[i-1]\n    }\n  }\n  return(y)\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nsum <- function(x){\n  y <- x\n  for(i in 1:length(y",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq_along(lst) %% 2 == 1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(c(5, 8, 7, 1))\n</cell>\n<cell>\nsolution(c(3, 3,\
    \ 3, 3, 3))\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\n\
    Problem 9\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\nFind the sum\
    \ of all the primes below two million.\n\n\n</text>\n<cell>", "\n  sum(lst[seq_along(lst)%%2\
    \ == 1]) \n}\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.\n\n\n</text>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2\
    \ == 1]) \n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(lst[seq_along(lst)%%2\
    \ == 1])", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321, 5, 8, 7, 1))\n</cell>\n<text>\nProblem 8\nWrite a function that\
    \ returns the number of positive integers that do not exceed a given integer n.\n\
    \nFor example, given n = 10, return 3 because 12 is the only positive integer\
    \ that does not exceed 10.\n\nThe sum of positive integers is never greater than\
    \ 10.\n\nThe function should return the number of positive integers within the\
    \ specified range.\n\nThe function should work for any value of n.\n\nIf the given\
    \ integer is negative, return 0.\n\nIf n is greater than or equal to 0, return\
    \ 0.\n\nIf n is less than 0, return 0.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>\nsolution(c(5,8,7,1))\n</cell>\n<cell>\nsolution(c(3,3,3,3))\n\
    </cell>\n<cell>\nsolution(c(30,13,24,321))\n</cell>\n<text>\nProblem 7\nThe Fibonacci\
    \ sequence is defined by the formula:\n\n$$ Fn = \\begin{cases}\n      0 & \\\
    text{if } n = 0\\\n      1 & \\text{if } n = 1 \\\n      F{n-1} + F_{n-2} & \\\
    text{otherwise}\n    \\end{cases}$$\n\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite\
    \ a function that computes the n-th term of the Fibonacci sequence. \nFor example,\
    \ \n$$ F_7 = \\begin{cases}\n      0 & \\text{if } n = 7\\\n      1 & \\text{if\
    \ } n = 6 \\\n      2 & \\text{if } n = 5 \\\n      3 & \\text{if } n = 4 \\\n\
    \      5 & \\text{if } n = 3 \\\n      8 & \\text{if } n = 2 \\\n      13 & \\\
    text{if } n = 1 \\\n      \\end{cases}$$ \nAssume that $n$ is a 32-bit integer.\
    \ \nWhat is the value of the first term in the Fibonacci sequence when $n$ is\
    \ 7?\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<text>\nProblem 10\n\
    Given a vector of ints, return a vector where each element is the absolute value\
    \ of a number in the vector.\nFor example, given [-2, -1, 0, 1, 2], return [2,\
    \ 1, 1, 2, 2]. \nIf there are no such elements, return an empty vector.\nThe input\
    \ vector does not contain any duplicate elements.\n\n</text>\n<cell>", "\n  sum(lst[seq_len(length(lst))\
    \ - seq_len(which(lst%%2 != 0)[1]) + 1])\n}\n</cell>\n<cell>\nsolution(c(30, 13,\
    \ 24, 321))\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</code>\n<|/ a\
    \ tags=r,list |>\n<| c |>\nThis solution does not work if you have a list with\
    \ two or more elements that are the same.\n<|/ c |>\n<| c |>\n, thanks for pointing\
    \ that out. I fixed the code by adding a `unique` call to the `lst` argument.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,list |>\n<| c |>\nThis solution does not work if you have\
    \ a list with two or more elements that are the same.\n<|/ c |>\n<| c |>\n, thanks\
    \ for pointing that out. I fixed the code by adding a `unique` call to the `lst`\
    \ argument.\n<|/ c |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lapply(lst, function(x)\
    \ x[x%%2==0])))\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nsum(unlist(lapply(lst,\
    \ function(x) x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n\
    <code>\nsum(unlist(lapply(lst, function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nsum(unlist(lapply(lst, function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum(unlist(lapply(lst,\
    \ function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,list |>\n\
    <code>\nsum(unlist(lapply(lst, function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nsum(unlist(lapply(lst, function(x) x[x%%2==0])))\n\
    </code>\n<|/ a tags=r,list |>\n<| a dscore=3 |>\n<code>\nsum(unlist(lapply(lst,\
    \ function(x) x[x%%2==0])))\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n\
    <code>\nsum(unlist(lapply(lst, function(x) x[x%%2==0])))\n</code>\n<|/ a dscore=3\
    \ |>\n<|", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n\
    }\n</code>\n<|/ a |>\n<| a tags=r,function,list |>\n<code>\nsum.odd <- function(x)\
    \ {\n  sum(unlist(lapply(x, function(i) i[seq(1, length(i), 2)]))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,function,list |>\n<code>\nsum.odd <- function(x)\
    \ {\n  sum(unlist(lapply(x, function(i) i[seq(1, length(i), 2)]))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum.odd <- function(x) {\n  sum(unlist(lapply(x,\
    \ function(i) i[seq(1, length(i), 2)]))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a dscore=1 |>\n<code>\nsum.odd <- function(x) {\n  sum(unlist(lapply(x,\
    \ function(i) i[seq(1, length(i), 2)]))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a tags=r,function,list |>\n<code>\nsum.odd <- function(x) {\n  sum(unlist(lapply(x,\
    \ function(i) i[seq(1, length(i), 2)]))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum.odd <- function(x) {\n  sum(unlist(lapply(x, function(i) i[seq(1,\
    \ length(i), 2)]))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum.odd <- function(x) {\n  sum(unlist(lapply(x, function(i) i[seq(1, length(i),\
    \ 2)]))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1 |>\n<code>\n\
    sum.odd <- function(x) {\n  sum(unlist(lapply(x, function(i) i[seq(1, length(i),\
    \ 2)]))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1 |>\n<code>\n\
    sum.odd <- function(x) {\n  sum(unlist(lapply(x, function(i) i[seq(1, length(i),\
    \ 2)]))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum.odd <- function(x) {\n  sum(unlist(lapply(x, function(i) i[seq(1,\
    \ length(i), 2)]))\n}\n</code>", "\n  sum(lst[seq_along(lst) %% 2 == 1]) \n}\n\
    </cell>\n<cell>", "\n  sum(lst[seq_along(lst)%%2==1])\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a tags=r,function,list |>\nHere's a solution that uses purrr::map and\
    \ purrr::reduce:\n<code>\nlibrary(purrr)\n", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq(1,\
    \ length(lst), 2)])\n}\n</cell>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of times the value\
    \ 1 occurs in a given vector.\n\n\n</text>\n<cell>", "\n  sum(lst[seq(1, length(lst),\
    \ 2)])\n}\n</cell>\n<text>\nThe sum of the odd numbers in even positions is 12.\
    \ Notice that this function only works for lists of integers. Try it out with\
    \ other lists.\n\n\n</text>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\n\
    The sum of the odd numbers in even positions is 0. Try it out with other lists.\n\
    \n\n</text>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nPart Two\n\
    The sum of the odd numbers in even positions is 12. Notice that this function\
    \ only works for lists of integers. Try it out with other lists.\n\n\n</text>\n\
    <cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nThe sum of the odd numbers\
    \ in even positions is 0. Try it out with other lists.\n\n\n</text>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<text>\nPart Three\nThe sum of the odd\
    \ numbers in even positions is 12. Notice that this function only works for lists\
    \ of integers. Try it out with other lists.\n\n\n</text>\n<cell>\nsolution(c(30,\
    \ 13, 24, 321))\n</cell>\n<text>\nThe sum of the odd numbers in even positions\
    \ is 0. Try it out with other lists.\n\n\n</text>\n<cell>\nsolution(c(30, 13,\
    \ 24, 321))\n</cell>\n<text>\nPart Four\nThe sum of the odd numbers in even positions\
    \ is 12. Notice that this function only works for lists of integers. Try it out\
    \ with other lists.\n\n\n</text>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n\
    <text>\nThe sum of the odd numbers in even positions is 0. Try it out with other\
    \ lists.\n\n\n</text>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\n\
    Part Five\nThe sum of the odd numbers in even positions is 12. Notice that this\
    \ function only works for lists of integers. Try it out with other lists.\n\n\n\
    </text>\n<cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nThe sum of the\
    \ odd numbers in even positions is 0. Try it out with other lists.\n\n\n</text>\n\
    <cell>\nsolution(c(30, 13, 24, 321))\n</cell>\n<text>\nPart Six\nThe sum of the\
    \ odd numbers in even positions is 12. Notice that this function only works for\
    \ lists of integers. Try it out ", "\n  sum(lst[seq_along(lst)%%2 == 1][seq_along(lst)%%2\
    \ == 2])\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere is a solution\
    \ using data.table:\n<code>\nlibrary(data.table)\ndt <- data.table(a = c(5, 8,\
    \ 7, 1))\ndt[, sum(a[a %% 2 == 1]), by = .(a %% 2)]\n</code>\n<|/ a tags=r,sum,list\
    \ |>\n<| a tags=r,sum,list |>\nUsing base R:\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x %% 2 == 1])))\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sum,list |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x %% 2 == 1])))\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x %% 2 ==\
    \ 1])))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x %% 2 == 1])))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\n\
    sum(unlist(lapply(lst,function(x) x[x %% 2 == 1])))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x %% 2 ==\
    \ 1])))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x %% 2 == 1])))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x %% 2 == 1])))\n</code>\n<|/ a tags=r,sum,list |>\n<| a tags=r,sum,list |>\n\
    <code>\nsum(unlist(lapply(lst,function(x) x[x %% 2 == 1])))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x) x[x %%\
    \ 2 == 1])))\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sum,list |>\n<code>\nsum(unlist(lapply(lst,function(x)\
    \ x[x %% 2 == 1])))", "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>",
  "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst%%2 != 0)[1]) + 1])\n}\n</cell>\n\
    <cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n</cell>\n<cell>\n\
    solution(c(30, 13, 24, 321))\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of positive integers that do not exceed a user-specified\
    \ maximum. Your function should take in two parameters: an integer maxVal and\
    \ a vector of integers nums.\n\nYour function should return 0 if there are no\
    \ positive integers that do not exceed maxVal, or return the number of positive\
    \ integers that do not exceed maxVal.\n\nIf there are multiple solutions, return\
    \ any of them.\n\nIf there are no positive integers that do not exceed maxVal,\
    \ return -1.\n\n\n</text>\n<cell>", "\n  sum(lst[seq_len(length(lst)) - seq_len(which(lst)%%2L\
    \ + 1L)])\n}\n</code>\n<|/ a tags=r,sum,list |>\n<| a dscore=0 |>\n<code>\nsum\
    \ <- function(x) {\n  sum <- 0\n  for(i in 1:length(x)) {\n    sum <- sum + x[i]\n\
    \  }\n  return(sum)\n}\n</code>\n<|/ a tags=r,sum,list |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11376157)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ sum a list. He didn't ask for a code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided\
    \ a solution. He didn't ask for code review. He asked how to do it, and I provided ",
  "\n  sum(lst[seq(1, length(lst), 2)])\n}\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][lst[seq_along(lst)]%%2==1])\n\
    }\n</cell>\n<cell>", "\n  sum(lst[seq_along(lst)][seq_along(lst)%%2==1])\n}\n\
    </cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
