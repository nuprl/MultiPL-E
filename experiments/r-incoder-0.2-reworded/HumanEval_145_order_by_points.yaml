name: HumanEval_145_order_by_points
language: r
prompt: "# Write a function which sorts the given list of integers\n# in ascending\
  \ order according to the sum of their digits.\n# Note: if there are several items\
  \ with similar sum of their digits,\n# order them based on their index in original\
  \ list.\n# For example:\n# >>> order_by_points(c(1, 11, -1, -11, -12))\n# c(-1,\
  \ -11, 1, -12, 11)\n# >>> order_by_points(c())\n# c()\norder_by_points <- function(nums)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- order_by_points\n    if(!identical(candidate(c(1,\
  \ 11, -1, -11, -12)), c(-1, -11, 1, -12, 11))){quit('no', 1)}\n    if(!identical(candidate(c(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)), c(0, 2, 3, 6, 53,\
  \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457))){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate(c(1, -11, -32, 43, 54, -98,\
  \ 2, -3)), c(-3, -32, -98, -11, 1, 2, 43, 54))){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), c(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0, 6, 6, -76, -21, 23, 4)), c(-76, -21, 0,\
  \ 4, 23, 6, 6))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  nums <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n}\n",
  "\n  nums <- nums[order(sum(nums), decreasing = TRUE)]\n  nums[order(match(nums,\
    \ sort(nums)), decreasing = TRUE)]\n}\n", "\n  nums <- nums[order(sum(nums), nums)]\n\
    \  nums\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n\
    }\n</cell>\n<cell>", "\n  nums <- nums[order(sum(nums), decreasing = TRUE)]\n\
    \  nums[order(match(nums, names(nums)))]\n}\n</cell>\n<cell>", "\n  nums <- sort(nums)\n\
    \  nums[order(nums, decreasing = TRUE)]\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r\
    \ |>\n<code>", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n\
    }\n", "\n  nums <- nums[order(as.numeric(as.vector(lapply(nums, sum))),\n    \
    \                 decreasing = TRUE)]\n  nums[!duplicated(nums)]\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `order_by_points(c(1, 11,\
    \ -1, -11, -12))` returns `c(-1, -11, 1, -12, 11)` instead of `c(-1, -12, -11,\
    \ 11, 1)`.\n<|/ c |>\n<| c |>\n: I fixed the typo.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that sorts according to sum of digits in descending order.\n<|/ c\
    \ |>\n<| c |>\n: I added a version that sorts according to sum of digits in descending\
    \ order.\n<|/ c |>\n<| a tags=r |>\nHere's a solution using data.table:\n<code>\n\
    library(data.table)\nsetDT(df)\ndf[, sum.digits := sum(as.integer(as.character(nums))),\
    \ by = nums]\ndf[order(sum.digits, decreasing = TRUE), ]\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\nHere's a solution using dplyr and tidyr:\n<code>\nlibrary(dplyr)\n\
    library(tidyr)\n\ndf <- data.frame(nums = c(1, 11, -1, -11, -12))\n\ndf %>% \n\
    \  mutate(nums = as.character(nums)) %>% \n  group_by(nums) %>% \n  summarise(sum.digits\
    \ = sum(as.integer(nums))) %>% \n  arrange(sum.digits) %>% \n  ungroup() %>% \n\
    \  select(-sum.digits)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a\
    \ solution using data.table:\n<code>\nlibrary(data.table)\nsetDT(df)\ndf[, sum.digits\
    \ := sum(as.integer(as.character(nums))), by = nums]\ndf[order(sum.digits, decreasing\
    \ = TRUE), ]\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\nHere's a solution using\
    \ dplyr and tidyr:\n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n\ndf <- data.frame(nums\
    \ = c(1, 11, -1, -11, -12))\n\ndf %>% \n  mutate(nums = as.character(nums)) %>%\
    \ \n  group_by(nums) %>% \n  summarise(sum", "\n  nums <- sort(nums)\n  nums[order(nums,\
    \ decreasing = TRUE)]\n}\n</cell>\n<cell>", "\n  nums <- sort(nums)\n  nums[order(nums,\
    \ decreasing = TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing\
    \ = TRUE)]\n}\n</cell>\n<cell>", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing\
    \ = TRUE)]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n\
    }\n", "\n  nums <- nums[order(as.numeric(as.vector(lapply(nums, sum))),\n    \
    \                 decreasing = TRUE)]\n  nums[!duplicated(nums)]\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, but I wonder if there is a way\
    \ to do it without using any packages. I guess it would be a lot more efficient\
    \ than my solution. Thanks for your help!\n<|/ c |>\n<| c |>\nI added a solution\
    \ without packages.\n<|/ c |>\n<| c |>\nThanks for your help! I appreciate it!\n\
    <|/ c |>\n<| a tags=r |>\nI thought about this problem and came up with a solution\
    \ that uses only base R.  It is not the most elegant solution, but it works. \
    \ It also doesn't require any packages.\n<code>", "\n  nums <- sort(nums)\n  nums[order(nums,\
    \ decreasing = TRUE)]\n}\n", "\n  nums <- nums[order(as.integer(nums), decreasing\
    \ = TRUE)]\n  nums[order(as.integer(nums), decreasing = FALSE)]\n}\n", "\n  nums\
    \ <- sort(nums)\n  nums[order(nums, decreasing = TRUE)]\n}\n", "\n  nums <- sort(nums)\n\
    \  nums[order(nums, decreasing = TRUE)]\n}\n", "\n  nums <- nums[order(sum(nums))]\n\
    \  nums[order(sapply(nums, FUN = sum))]\n}\n", "\n  nums <- sort(nums)\n  nums[order(nums,\
    \ decreasing = TRUE)]\n}\n</cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
