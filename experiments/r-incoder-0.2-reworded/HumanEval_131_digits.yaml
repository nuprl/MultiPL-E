name: HumanEval_131_digits
language: r
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n\
  # 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n  \
  \  if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
  \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer! I actually tried\
    \ this but I was getting a type error so I thought it was wrong. Turns out I was\
    \ just doing it wrong. Thanks again!\n<|/ c |>\n<| c |>\nI added a version that\
    \ doesn't require any packages.\n<|/ c |>\n<| c |>\nThanks for the edit! I didn't\
    \ realize I could do that. I'm still a beginner at R and I appreciate your help!\n\
    <|/ c |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I actually tried\
    \ this but I was getting a type error so I thought it was wrong. Turns out I was\
    \ just doing it wrong. Thanks again!\n<|/ c |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for the answer! I actually tried this but I was getting a type error so I thought\
    \ it was wrong. Turns out I was just doing it wrong. Thanks again!\n<|/ c |>\n\
    <| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I actually tried\
    \ this but I was getting a type error so I thought it was wrong. Turns out I was\
    \ just doing it wrong. Thanks again!\n<|/ c |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a ", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `digits(1)` returns\
    \ `1` but `digits(4)` returns `0`.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ reflect your comment. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to reflect your comment. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=2 |>\nHere's a solution using gmp:\n<code>\nlibrary(gmp)\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(as.bigz(n%%2:(n-1)%%2)))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\nHere's a solution using stringr\
    \ and stringi packages:\n<code>\nlibrary(stringr)\nlibrary(stringi)\n\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(stri_replace_all_regex(as.character(n),\
    \ \"\\\\D\", \"\"))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\nHere's a solution\
    \ using stringr and stringi packages:\n<code>\nlibrary(stringr)\nlibrary(stringi)\n\
    \ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n \
    \ return(stri_replace_all_regex(as.character(n), \"\\\\D\", \"\"))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\nHere's a solution using stringr and stringi packages:\n\
    <code>\nlibrary(stringr)\nlibrary(stringi)\n\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(stri_replace_all_regex(as.character(n),\
    \ \"\\\\D\", \"\"))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\nHere's a solution\
    \ using stringr and stringi packages:\n<code>\nlibrary(stringr)\nlibrary(stringi)\n\
    \ndigits <- function(n) {\n  n <- as.", "\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ %% 2 != 0, 0, n)\n  n <- ifelse(n %% 2 != 0, n * 2, n * 3)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 5, n * 7)\n  n <- ifelse(n %% 2 != 0, n * 11, n * 13)\n  n <-\
    \ ifelse(n %% 2 != 0, n * 17, n * 19)\n  n <- ifelse(n %% 2 != 0, n * 23, n *\
    \ 29)\n  n <- ifelse(n %% 2 != 0, n * 31, n * 37)\n  n <- ifelse(n %% 2 != 0,\
    \ n * 43, n * 47)\n  n <- ifelse(n %% 2 != 0, n * 53, n * 59)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 61, n * 67)\n  n <- ifelse(n %% 2 != 0, n * 71, n * 79)\n  n\
    \ <- ifelse(n %% 2 != 0, n * 81, n * 89)\n  n <- ifelse(n %% 2 != 0, n * 91, n\
    \ * 99)\n  n <- ifelse(n %% 2 != 0, n * 101, n * 103)\n  n <- ifelse(n %% 2 !=\
    \ 0, n * 111, n * 117)\n  n <- ifelse(n %% 2 != 0, n * 121, n * 127)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 131, n * 137)\n  n <- ifelse(n %% 2 != 0, n * 141, n * 147)\n\
    \  n <- ifelse(n %% 2 != 0, n * 151, n * 157)\n  n <- ifelse(n %% 2 != 0, n *\
    \ 161, n * 167)\n  n <- ifelse(n %% 2 != 0, n * 171, n * 177)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 181, n * 187)\n  n <- ifelse(n %% 2 != 0, n * 191, n * 197)\n\
    \  n <- ifelse(n %% 2 != 0, n * 201, n * 207)\n  n <- ifelse(n %% 2 != 0, n *\
    \ 211, n * 217)\n  n <- ifelse(n %% 2 != 0, n * 221, n * 227)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 231, n * 237)\n  n <- ifelse(n %% 2 != 0, n * 241, n * 247)\n\
    \  n <- ifelse(n %% 2 != 0, n * 251, ", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n    n <- as.integer(n)\n\
    \    n <- ifelse(n %% 2 == 0, n, 0)\n    n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n\
    \    n <- ifelse(n %% 3 == 0, n * 3, n * 5)\n    n <- ifelse(n %% 5 == 0, n *\
    \ 5, n * 7)\n    n <- ifelse(n %% 7 == 0, n * 7, n * 9)\n    n <- ifelse(n %%\
    \ 9 == 0, n * 9, n * 11)\n    n <- ifelse(n %% 11 == 0, n * 11, n * 13)\n    n\
    \ <- ifelse(n %% 13 == 0, n * 13, n * 15)\n    n <- ifelse(n %% 15 == 0, n * 15,\
    \ n * 17)\n    n <- ifelse(n %% 17 == 0, n * 17, 0)\n    return(n)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to avoid the ifelse statements. I wonder if there is a way to avoid the ifelse\
    \ statements altogether.\n<|/ c |>\n<| c |>\nI added a solution without ifelse\
    \ statements.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to avoid the ifelse statements. I wonder if there is a way to avoid\
    \ the ifelse statements altogether.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ ifelse statements.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution without ifelse\
    \ statements:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  n <- n\
    \ %% 10\n  n <- n + (n %% 10) * 10\n  n <- n + (n %% 10) * 100\n  n <- n + (n\
    \ %% 10) * 1000\n  n <- n + (n %% 10) * 10000\n  n <- n + (n %% 10) * 100000\n\
    \  n <- n + (n %% 10) * 1000000\n  n <- n + (n %% 10) * 1000000\n  n <- n + (n\
    \ %% 10) * 10000000\n  n <- n + (n %% 10) * 100000000\n  n <- n + (n %% 10) *\
    \ 1000000000\n  n <- n + (n %% 10) * 10000000000\n  n <- n + (n %% 10) * 100000000000\n\
    \  n <- n + (n %% 10) * 1000000000000\n  n <- n + (n %% 10) * 10000000000000\n\
    \  n <- n + (n ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ %% 2 == 0, n, 0)\n  n <- ifelse(n %% 3 == 0, n * 3, n * 3)\n  n <- ifelse(n\
    \ %% 5 == 0, n * 5, n * 5)\n  n <- ifelse(n %% 7 == 0, n * 7, n * 7)\n  n\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution. I'm going to try it\
    \ out and see how it compares to my solution. Thanks!\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses `ifelse` instead of `if` statements.\n<|/ c |>\n<| c |>\n\
    I added a solution that uses `ifelse` instead of `if` statements.\n<|/ c |>\n\
    <| a tags=r,if-statement,for-loop |>\nHere's a solution using ifelse.\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  ifelse(n %% 2 == 0, n, ifelse(n\
    \ %% 3 == 0, n * 3, ifelse(n %% 5 == 0, n * 5, ifelse(n %% 7 == 0, n * 7, 0))))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution. I'm going to try\
    \ it out and see how it compares to my solution. Thanks!\n<|/ c |>\n<| a |>\n\
    Here's a solution using ifelse.\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  ifelse(n %% 2 == 0, n, ifelse(n %% 3 == 0, n * 3, ifelse(n %% 5 == 0, n * 5,\
    \ ifelse(n %% 7 == 0, n * 7, 0))))\n}\n</code>\n<|/ a tags=r,if-statement,for-loop\
    \ dscore=2 |>\n<| a dscore=1 |>\nHere's a solution using ifelse.\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  ifelse(n %% 2 == 0, n, ifelse(n %%\
    \ 3 == 0, n * 3, ifelse(n %% 5 == 0, n * 5, ifelse(n %% 7 == 0, n * 7, 0))))\n\
    }\n</code>\n<|/ a tags=r,if-statement,for-loop |>\n<| a tags=r,if-statement,for-loop\
    \ |>\nHere's a solution using ifelse.\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  ifelse(n %% 2 == ", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%2+1)))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the digits of its argument.\
    \ For example, digits(12345) = 1 + 2 + 3 + 4 + 5 = 10.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the sum of the digits of an integer n. \nFor example, digits(123) =\
    \ 1 + 2 + 3 = 6. \nIf the given number has no digits, return 0.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <", "\n  n <- as.integer(n)\n  return(ifelse(n %% 2 == 0, n %/% 2, 0))\n}\n</cell>\n\
    <cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer.\nThe sum of the digits of the integer n is defined as the sum\
    \ of its individual digits, starting with the most significant digit.\nFor example,\
    \ if the integer is 123, the sum is 0 + 1 + 2 + 3 = 6.\nIf the integer is -123,\
    \ the sum is 0 + 1 + 2 + 3 + 4 + 5 = -10.\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235000)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer.\nFor example, digits(12) should\
    \ return 3.\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10)*10 + as.integer(n%%100))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nHere is a solution that uses only base R functions:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10)*10 + as.integer(n%%100))\n}\n</code>\n<|/ a tags=r,integer,digits\
    \ |>\n<| a dscore=0 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10 + as.integer(n%%100))\n\
    }\n</code>\n<|/ a tags=r,integer,digits |>\n<| a tags=r,integer,digits |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10\
    \ + as.integer(n%%100))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ tags=r,integer,digits |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10 + as.integer(n%%100))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=r,integer,digits\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10)*10 + as.integer(n%%100))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndigits <- function(n) {\n  ", "\n\
    \  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=r |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n\
    \ == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10+9)))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the digits of its input. For example, digits(123) =\
    \ 1 + 2 + 3 = 6.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem\
    \ 7: Factorial\nA factorial is a number multiplied by all numbers before it in\
    \ the same order. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 120.\n\nWrite a function\
    \ that returns the factorial of a number.\n\n\n</text>\n<cell>\nfactorial <- function(n)\
    \ {\n  n <- as.integer(n)\n  return(n * factorial(n-1))\n}\n</cell>\n<cell>\n\
    factorial(5)\n</cell>\n<text>\nProblem 8: Fibonacci\nA fibonacci is a number that\
    \ is the sum of two other numbers. For example, 6! = 6 x 5 x 4 x 3 x 2 x 1 = 120.\n\
    \nWrite a function that returns the fibonacci of a number.\n\n\n</text>\n<cell>\n\
    fibonacci <- function(n) {\n  n <- as.integer(n)\n  return(factorial(n-1) + factorial(n-2))\n\
    }\n</cell>\n<cell>\nfibonacci(5)\n</cell>\n<text>\nProblem 9: Fibonacci Sequence\n\
    A fibonacci sequence is a sequence of numbers where each number is the sum of\
    \ the previous two numbers. For example, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, \u2026\n\nWrite a function that returns the fibonacci sequence of a given\
    \ number.\n\n\n</text>\n<cell>\nfibonacciSequence <- function(n) {\n  n <- as.integer(n)\n\
    \  return(fibonacci(n-1) + fibonacci(n-2))\n}\n</cell>\n<cell>\nfibonacciSequence(5)\n\
    </cell>\n<text>\nProblem 10: Prime Factors\nA prime factor is a number that has\
    \ all prime factors other than 1 removed. For example, 6 is a prime factor.\n\n\
    Write a function that returns the prime factors of a number.\n\n\n</text>\n<cell>\n\
    primeFactors <- function(n) {\n  n <- as.integer(n)\n  return(primeFactors(n-1))\n\
    }\n</cell>\n<cell>\nprimeFactors(6)\n</cell>\n<text>\nProblem 11: Prime Factors\
    \ of Large Numbers\nA prime factor is a number that has all prime ", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it! I did try to use `ifelse` but didn't know how to make\
    \ it work. Your solution works perfectly!\n<|/ c |>\n<| c |>\nNo problem! I added\
    \ a solution using `ifelse` as well. Hope it helps!\n<|/ c |>\n<| a dscore=1 |>\n\
    Here is a solution using ifelse.\n<code>\ndigits <- function(n) {\n  ifelse(n\
    \ %% 2 == 0, prod(n%%%%2:(n%%%%2)%%2), 0)\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a dscore=1 |>\nHere is a solution using ifelse.\n<code>\ndigits <- function(n)\
    \ {\n  ifelse(n %% 2 == 0, prod(n%%%%2:(n%%%%2)%%2), 0)\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a tags=r,function,if-statement |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem 3\nThe sum of\
    \ the primes below 10 is 2 + 3 + 5 + 7 = 17.\nFind the sum of all the primes below\
    \ two million.\n\n\n</text>\n<cell>", "\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\nThe function should take one argument, an integer and return\
    \ the sum of the digits of that integer.\nThe function should return 0 if there\
    \ are no digits. \nFor example, \n>>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n\
    15\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%%%2 - 1)*2)\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the digits of its argument. For\
    \ example:\n>>> digits(12345)\n15\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work for negative numbers. `digits(-10)`\
    \ returns `0`.\n<|/ c |>\n<| c |>\nYes, it does. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. `digits(-10)`\
    \ returns `0`. `digits(-10)` returns `0`. `digits(-10)` returns `0`. ", "\n  n\
    \ <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,algorithm |>\nHere's a solution using\
    \ R's built-in capabilities (no packages needed):\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's a solution using R's built-in\
    \ capabilities (no packages needed):\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,algorithm |>\n<| a tags=r,algorithm |>\nHere's a solution\
    \ using R's built-in capabilities (no packages needed):\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,algorithm |>\n<| a tags=r,algorithm |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,", "\n  n <- as.integer(n)\n  if(n\
    \ == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n\
    \ <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n \
    \ n <- n / 2\n  return(digits(n) * digits(n-1))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,math,algorithm |>\nHere's a solution that uses only\
    \ integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,math,algorithm |>\nHere's a solution using only integer\
    \ arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\nHere's a solution using only integer arithmetic:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,math,algorithm |>\n<| a dscore=1 |>\nHere's a solution\
    \ using only integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a tags=r,math,algorithm |>\n<| a tags=r,math,algorithm |>\nHere's a solution\
    \ using only integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\nHere's a solution using only integer arithmetic:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,math,algorithm |>\n\
    <| a tags=r,math,algorithm |>\nHere's a solution using only integer arithmetic:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10^(n%%2%%2-1)))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n</code>\n<|/ a tags=r,algorithm\
    \ |>\n<| c |>\nThanks for the answer! I didn't know that `prod` existed in R.\
    \ I'm still learning R and I didn't know about `ifelse` until now. Thanks again!\n\
    <|/ c |>\n<| a tags=r,algorithm |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=r,algorithm |>\n<code>\ndigits <- function(n) {\n  n\
    \ <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=1 tags=r,algorithm |>\n<| a dscore=1 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a tags=r,algorithm |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a tags=r,algorithm |>\n<| a tags=r,algorithm |>\n<code>\ndigits\
    \ <- function(n) {\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the sum of the digits of an integer n. \nFor\
    \ example, digits(1234) should return 10.\n\nHint: Look at the modulo operator\
    \ %\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n \
    \ if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235000)\n</cell>\n<cell>\ndigits(235001)\n</cell>\n<cell>\ndigits(235002)\n\
    </cell>\n<cell>\ndigits(235003)\n</cell>\n<cell>\ndigits(235004)\n</cell>\n<cell>\n\
    digits(235005)\n</cell>\n<cell>\ndigits(235006)\n</cell>\n<cell>\ndigits(235007)\n\
    </cell>\n<cell>\ndigits(235008)\n</cell>\n<cell>\ndigits(235009)\n</cell>\n<cell>\n\
    digits(2350010)\n</cell>\n<cell>\ndigits(2350011)\n</cell>\n<cell>\ndigits(2350012)\n\
    </cell>\n<cell>\ndigits(2350013)\n</cell>\n<cell>\ndigits(2350014)\n</cell>\n\
    <cell>\ndigits(2350015)\n</cell>\n<cell>\ndigits(2350016)\n</cell>\n<cell>\ndigits(2350017)\n\
    </cell>\n<cell>\ndigits(2350018)\n</cell>\n<cell>\ndigits(2350019)\n</cell>\n\
    <cell>\ndigits(2350020)\n</cell>\n<cell>\ndigits(2350021)\n</cell>\n<cell>\ndigits(2350022)\n\
    </cell>\n<cell>\ndigits(2350023)\n</cell>\n<cell>\ndigits(2350024)\n</cell>\n\
    <cell>\ndigits(2350025)\n</cell>\n<cell>\ndigits(2350026)\n</cell>\n<cell>\ndigits(2350027)\n\
    </cell>\n<cell>\ndigits(2350028)\n</cell>\n<cell>\ndigits(2350029)\n</cell>\n\
    <cell>\ndigit", "\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n \
    \ return(digits(n-1)*10 + n%%2)\n}\n", "\n  n <- as.integer(n)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- ", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the digits of its argument. For example,\
    \ digits(235) should return 1 + 5 + 3 = 8.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235000)\n</cell>\n<cell>\ndigits(235001)\n</cell>\n<cell>\n\
    digits(235002)\n</cell>\n<cell>\ndigits(235003)\n</cell>\n<cell>\ndigits(235004)\n\
    </cell>\n<cell>\ndigits(235005)\n</cell>\n<cell>\ndigits(235006)\n</cell>\n<cell>\n\
    digits(235007)\n</cell>\n<cell>\ndigits(235008)\n</cell>\n<cell>\ndigits(235009)\n\
    </cell>\n<cell>\ndigits(2350010)\n</cell>\n<cell>\ndigits(2350011)\n</cell>\n\
    <cell>\ndigits(2350012)\n</cell>\n<cell>\ndigits(2350013)\n</cell>\n<cell>\ndigits(2350014)\n\
    </cell>\n<cell>\ndigits(2350015)\n</cell>\n<cell>\ndigits(2350016)\n</cell>\n\
    <cell>\ndigits(2350017)\n</cell>\n<cell>\ndigits(2350018)\n</cell>\n<cell>\ndigits(2350019)\n\
    </cell>\n<cell>\ndigits(2350020)\n</cell>\n<cell>\ndigits(2350021)\n</cell>\n\
    <cell>\ndigits(2350022)\n</cell>\n<cell>\ndigits(2350023)\n</cell>\n<cell>\ndigits(2350024)\n\
    </cell>\n<cell>\ndigits(2350025)\n</cell>\n<cell>\ndigits(2350026)\n</cell>\n\
    <cell>\ndigits(2350027)\n</cell>\n<cell>\ndigits(2350028)\n</cell>\n<cell>\ndigits(2350029)\n\
    </cell>\n<cell>\ndigit", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n%%2+1)))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n%%2+1)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n%%2+1)))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n%%2+1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n%%2+1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n%%2+1)))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n%%2+1)))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n%%2+1)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n%%2+1)))\n\
    }", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\ndigits(4)\ndigits(235)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the sum of the\
    \ even digits. For example:\n>>> even_digits(1)\n0\n>>> even_digits(4)\n2\n>>>\
    \ even_digits(235)\n5\n\n</text>\n<cell>\neven_digits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(sum(n%%%%2:(n%%%%2)%%2))\n\
    }\n</cell>\n<cell>\neven_digits(1)\neven_digits(4)\neven_digits(235)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a positive integer and returns\
    \ the sum of the odd digits. For example:\n>>> odd_digits(1)\n1\n>>> odd_digits(4)\n\
    3\n>>> odd_digits(235)\n7\n\n</text>\n<cell>\nodd_digits <- function(n) {\n  n\
    \ <- as.integer(n)\n  if(n%%2 == 1) return(0)\n  return(sum(n%%%%2:(n%%%%2)%%2))\n\
    }\n</cell>\n<cell>\nodd_digits(1)\nodd_digits(4)\nodd_digits(235)\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that takes a positive integer and returns the sum\
    \ of the even digits plus one if there are an odd number of digits. For example:\n\
    >>> even_plus_one(1)\n0\n>>> even_plus_one(4)\n2\n>>> even_plus_one(235)\n5\n\n\
    </text>\n<cell>\neven_plus_one <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(sum(n%%%%2:(n%%%%2)%%2)+1)\n}\n</cell>\n<cell>\neven_plus_one(1)\n\
    even_plus_one(4)\neven_plus_one(235)\n</cell>\n<text>\nExercise 6\nWrite a function\
    \ that takes a positive integer and returns the sum of the odd digits plus one\
    \ if there are an odd number of digits. For example:\n>>> odd_plus_one(1)\n1\n\
    >>> odd_plus_one(4)\n3\n>>> odd_plus_one(235)\n7\n\n</text>\n<", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere's a solution that uses only base\
    \ R functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n\
    \ == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 tags=r,integer,digits |>\n<| a dscore=1 |>\nHere's\
    \ a solution that uses only base R functions:\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,digits |>\n<| a dscore=1 |>\nHere's a solution\
    \ that uses only base R functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,digits |>\n<| a dscore=1 |>\nHere's a solution\
    \ that uses only base R functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,digits |>\n<| a dscore=0 |>\nHere's a solution\
    \ that uses only base R functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,digits |>\n<| a tags=r,integer,digits |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease add some explanation to ", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%10:(n%%10+9)))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(n)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a\
    \ tags=r,integer,product |>\n<| c |>\nThanks for your answer! I see that your\
    \ code is much more efficient than mine, but I still don't understand why my code\
    \ doesn't work. Could you please explain to me why my code doesn't work?\n<|/\
    \ c |>\n<| c |>\nI added some comments to my answer. Hope that helps.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation! I still don't understand why my code doesn't\
    \ work. Could you please explain to me why my code doesn't work?\n<|/ c |>\n<|\
    \ c |>\nI added some comments to my answer. Hope that helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation! I still don't understand why my code doesn't work.\
    \ Could you please explain to me why my code doesn't work?\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe reason your code doesn't work is that you're trying to use integer division\
    \ when you should be using floating point division.\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(n)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\nThis code will work if you change it to this:\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(n)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\nThe reason this works is because integer division truncates the result\
    \ to the nearest integer. For example, 1/2 returns 0, and 1/3 returns 0, but 1/4\
    \ returns 1.\n<|/ a tags=r,integer,product |>\n<| c |>\nThanks for your answer!\
    \ I see that your code is much more efficient than mine, but I still don't understand\
    \ why my code doesn't work. Could you please explain to me why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope that helps.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe reason your code doesn't work is that you're trying\
    \ to use integer division when you should be using floating point division.\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(n)\n\
    \  return(prod(n%%2:(n-1)", "\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n</cell>\n<cell>\ndigits(1)\n\
    digits(4)\ndigits(235)\ndigits(235)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the digits of an integer.\nThe function should take\
    \ one integer argument, and return a number.\n\n\n</text>\n<cell>", "\n  n <-\
    \ as.integer(n)\n  return(ifelse(n %% 2 == 0, n * digits(n / 2), 0))\n}\n</cell>\n\
    <cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer n. For example:\n>>> digits(123)\n6\n>>> digits(-5)\n0\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  return(ifelse(n %% 2 == 0, n * digits(n / 2),\
    \ 0))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nThe function should take one integer argument,\
    \ and return an integer that is the sum of the digits of that integer.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%%%2:(n%%%%2+1)))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the sum of the digits of its argument, except\
    \ if the argument is an integer.\nFor example, \n>>> digits_sum(1234)\n10\n>>>\
    \ digits_sum(12345)\n15\n\n\n</text>\n<cell>\ndigits_sum <- function(n) {\n  n\
    \ <- as.integer(n)\n  if(n%%1 == 0) return(n)\n  return(sum(as.integer(n%%%%1)))\n\
    }\n</cell>\n<cell>\ndigits_sum(1234)\n</cell>\n<cell>\ndigits_sum(12345)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the sum of the digits of its\
    \ argument, except if the argument is an integer.\nFor example, \n>>> digits_sum(1234)\n\
    10\n>>> digits_sum(12345)\n15\n\n\n</text>\n<cell>\ndigits_sum <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%1 == 0) return(n)\n  return(sum(as.integer(n%%1)))\n\
    }\n</cell>\n<cell>\ndigits_sum(1234)\n</cell>\n<cell>\ndigits_sum(12345)\n</cell>\n\
    <text>\nProblem 5\nWrite a function that returns the sum of the digits of its\
    \ argument, except if the argument is an integer.\nFor example, \n>>> digits_sum(1234)\n\
    10\n>>> digits_sum(12345)\n15\n\n\n</text>\n<cell>\ndigits_sum <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%1 == 0) return(n)\n  return(sum(as.integer(n%%1)))\n\
    }\n</cell>\n<cell>\ndigits_sum(1234)\n</cell>\n<cell>\ndigits_sum(12345)\n</cell>\n\
    <text>\nProblem 6\nWrite a function that returns the sum of the digits of its\
    \ argument, except if the argument is an integer.\nFor example, \n>>> digits_sum(1234)\n\
    10\n>>> digits_sum(12345)\n15\n\n\n</text>\n<cell>\ndigits_sum <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%1 == 0) return(n)\n  return(sum(as.integer(n",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work for negative numbers.\
    \ For example: `digits(-5)` returns `0` instead of `-1`.\n<|/ c |>\n<| c |>\n\
    I fixed the negative number issue. Thanks for pointing that out.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for negative numbers. For example: `digits(-5)` returns\
    \ `0` instead of `-1`.\n<|/ c |>\n<| c |>\nI fixed the negative number issue.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a tags=r,integer,product |>\n<code>\n\
    digits <- function(n){\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ For example: `digits(-5)` returns `0` instead of `-1`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. For example: `digits(-5)` returns `0`\
    \ instead of `-1`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ For example: `digits(-5)` returns `0` instead of `-1`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\ndigits <- function(n){\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,integer,product |>\n\
    <| c |>\nThis doesn't work for negative numbers. For example: `digits(-5)` returns\
    \ `0` instead of `-1`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ For example: `digits(-5)` returns `0` instead of `-1`.\n<|/ c |>\n<| a tags=r,integer,product\
    \ |>\n<code>\ndigits <- function(n){\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,integer,product\
    \ |>\n<code>\ndigits <- function(n){\n  n <- as.integer(n)", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\nHere's a solution using only base R:\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution using only\
    \ base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ a |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=1 tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n", "\n  n <- as.integer(n)\n\
    \  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n\
    \  return(n)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235235)\n</cell>\n<cell>\ndigits(235235235)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of its\
    \ argument. For example:\n>>> digits(235235)\n15\n\n</text>\n<cell>", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%2+1)))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I wonder why you used `if(n%%2 == 0) return(0)` instead of `if(n%%2 != 0)\
    \ return(0)`. Why do you think this makes a difference?\n<|/ c |>\n<| c |>\nI\
    \ guess it makes a difference because `if(n%%2 == 0) return(0)` returns `0` when\
    \ `n` is even, and `if(n%%2 != 0) return(0)` returns `0` when `n` is odd. So the\
    \ function returns `0` when `n` is even, and `prod(n%%2:(n-1)%%2)` when `n` is\
    \ odd.\n<|/ c |>\n<| c |>\nI see. But why do you think `if(n%%2 != 0) return(0)`\
    \ makes a difference? I thought that `if(n%%2 == 0) return(0)` would return `0`\
    \ when `n` is even, and `if(n%%2 != 0) return(0)` would return `0` when `n` is\
    \ odd.\n<|/ c |>\n<| c |>\nI guess I misunderstood your question. I thought you\
    \ wanted to return `0` when `n` is even, and `prod(n%%2:(n-1)%%2)` when `n` is\
    \ odd. But now I see that you want to return `0` when `n` is even, and `prod(n%%2:(n-1)%%2)`\
    \ when `n` is odd. So my solution doesn't work. Sorry about that.\n<|/ c |>\n\
    <| c |>\nNo problem. Thanks for your help!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n}\n</code>\n\
    <|/ a tags=r,digits,product |>\n<| a tags=r,digits,product |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=2 tags=r,digits,product |>\n<| a |>\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=2 tags=r,digits,product |>\n<| a dscore=2 |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,digits,product |>\n<| a dscore=2 |>\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,digits,product |>\n<| a dscore=1 |>\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,digits,product |>\n<| a tags=r,digits,product |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n", "\n  n\
    \ <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| c |>\nThis doesn't seem to work.\
    \ `digits(1)` returns `1`, but `digits(4)` returns `0`.\n<|/ c |>\n<| c |>\nI\
    \ fixed the bug, thanks for pointing it out. Now it works.\n<|/ c |>\n<| c |>\n\
    I guess this doesn't work if n is negative.\n<|/ c |>\n<| c |>\nIt does work if\
    \ n is negative. Try `digits(-4)`.\n<|/ c |>\n<| c |>\nI guess it does work if\
    \ you use `as.integer` instead of `as.numeric`\n<|/ c |>\n<| a tags=r,integer,product\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't seem to work. `digits(1)` returns `1`, but `digits(4)` returns `0`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| c |>\nI guess this doesn't work if n is negative.\n<|/ c |>\n<| a\
    \ dscore=4 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a tags=r,integer,product |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a dscore=3 |>\n<code>\ndigits\
    \ <- function(", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,integer,product |>\n\
    <| c |>\nThanks for your answer. Your solution is very elegant and efficient.\
    \ Unfortunately, I cannot accept it as the correct answer because I cannot accept\
    \ a solution which uses `prod` function. Thanks anyway.\n<|/ c |>\n<| c |>\nI\
    \ added a solution using `prod` which I believe is more elegant and efficient.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I think your solution is more elegant\
    \ and efficient. Unfortunately, I cannot accept it as the correct answer because\
    \ I cannot accept a solution which uses `prod` function. Thanks anyway.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a dscore=2 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a dscore=2 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a dscore=2 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer", "\n  n <- as.integer(n)\n  return(ifelse(n\
    \ %% 2 == 0, n * digits(n / 2), 0))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235235)\n\
    </cell>\n<cell>\ndigits(235235235)\n</cell>\n<cell>\ndigits
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it! I understand your code, but I still don't understand\
    \ how it works. I understand that `if(n%%2 == 0) return(0)` returns 0 if n is\
    \ even, but I don't understand how it works with `prod(n%%10:(n%%10+9))`. Could\
    \ you please explain it to me? Thanks again!\n<|/ c |>\n<| c |>\n`prod(n%%10:(n%%10+9))`\
    \ returns the product of every digit from 0 to 9 (inclusive) multiplied by the\
    \ number `n` modulo 10 (the remainder after dividing `n` by 10).\n<|/ c |>\n<|\
    \ a dscore=1 |>\nHere's a solution using base R:\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| a |>\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement dscore=1 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,if-statement |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,if-statement |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) ", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,integer,product |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=r,integer,product |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,integer,product |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=r,integer,product |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,integer,product |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a dscore=3 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n\
    \ == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a dscore=3 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10^(n%%10-1))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the sum of the digits of an integer\
    \ n. \nThe function should return 0 if n is 0.\nThe function should return 9 if\
    \ n is 9.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n4\n>>> digits(235)\n\
    10\n\n</text>\n<cell>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(sum(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem\
    \ 5\nWrite a function that returns the sum of the digits of an integer n. \nThe\
    \ function should return 0 if n is 0.\nThe function should return 9 if n is 9.\n\
    For example:\n>>> digits(1)\n1\n>>> digits(4)\n4\n>>> digits(235)\n10\n\n</text>\n\
    <cell>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(sum(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem 6\nWrite a function\
    \ that returns the sum of the digits of an integer n. \nThe function should return\
    \ 0 if n is 0.\nThe function should return 9 if n is 9.\nFor example:\n>>> digits(1)\n\
    1\n>>> digits(4)\n4\n>>> digits(235)\n10\n\n</text>\n<cell>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(sum(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the sum", "\n  n <-\
    \ as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n / 10)\n  n <- as.integer(n\
    \ / 10)\n  n <- ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(12) should return 3 + 4 = 6.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)+1))\n}\n", "\n  n <-\
    \ as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer n. For example:\n>>> digits_sum(123)\n6\n>>> digits_sum(1234)\n\
    10\n>>> digits_sum(1234567)\n15\n\n</text>\n<cell>\ndigits_sum <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  return(sum(as.integer(n%%10)))\n\
    }\n</cell>\n<cell>\ndigits_sum(123)\n</cell>\n<cell>\ndigits_sum(1234)\n</cell>\n\
    <cell>\ndigits_sum(1234567)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ returns the sum of the digits of an integer n. For example:\n>>> digits_sum_2(123)\n\
    6\n>>> digits_sum_2(1234)\n10\n>>> digits_sum_2(1234567)\n15\n\n</text>\n<cell>\n\
    digits_sum_2 <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  return(sum(as.integer(n%%10)))\n}\n</cell>\n<cell>\ndigits_sum_2(123)\n</cell>\n\
    <cell>\ndigits_sum_2(1234)\n</cell>\n<cell>\ndigits_sum_2(1234567)\n</cell>\n\
    <text>\nProblem 5\nWrite a function that returns the sum of the digits of an integer\
    \ n. For example:\n>>> digits_sum_3(123)\n6\n>>> digits_sum_3(1234)\n10\n>>> digits_sum_3(1234567)\n\
    15\n\n</text>\n<cell>\ndigits_sum_3 <- function(n) {\n  n <- as.integer(n)\n \
    \ if(n == 0) return(0)\n  return(sum(as.integer(n%%10)))\n}\n</cell>\n<cell>\n\
    digits_sum_3(123)\n</cell>\n<cell>\ndigits_sum_3(1234)\n</cell>\n<cell>\ndigits_sum_3(1234567)\n\
    </cell>\n<text>\nProblem 6\nWrite a ", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n\
    \ == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\ndigits(4)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    </cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer n. \nFor example, digits(12) should return 3 + 2 = 5.\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<text>\nExercise: Write a function that returns the sum of the even\
    \ digits in a given number. Test it on all numbers from 1 to 10,000.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder if there is\
    \ a way to do this without looping through each digit. For example, `prod(n%%2:(n-1)%%2)`\
    \ can be replaced with `prod(n%%2:(n-1)%%2)%%1`\n<|/ c |>\n<| c |>\nYes, but that\
    \ would require a loop. `prod(n%%2:(n-1)%%2)%%1` would give the same result as\
    \ `prod(n%%2:(n-1)%%2)`, but would require a loop to get the correct answer.\n\
    <|/ c |>\n<| c |>\nYes, but that would require a loop. `prod(n%%2:(n-1)%%2)%%1`\
    \ would give the same result as `prod(n%%2:(n-1)%%2)`, but would require a loop\
    \ to get the correct answer.\n<|/ c |>\n<| c |>\nYes, but that would require a\
    \ loop. `prod(n%%2:(n-1)%%2)%%1` would give the same result as `prod(n%%2:(n-1)%%2)`,\
    \ but would require a loop to get the correct answer.\n<|/ c |>\n<| c |>\nYes,\
    \ but that would require a loop. `prod(n%%2:(n-1)%%2)%%1` would give the same\
    \ result as `prod(n%%2:(n-1)%%2)`, but would require a loop to get the correct\
    \ answer.\n<|/ c |>\n<| a tags=r,math |>\nHere's a solution using gmp and Rmpfr:\n\
    <code>\nlibrary(gmp)\nlibrary(Rmpfr)\n\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  x <- mpfr(n,10)\n  return(as.integer(mpfr::mpfr2str(x)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if\
    \ there is a way to do this without looping through each digit. For example, `mpfr(n,10)`\
    \ can be replaced with `mpfr(n,10)%%1`\n<|/ c |>\n<| c |>\nYes, but that would\
    \ require a loop. `mpfr(n,10)%%1` would give the same result as `mpfr(n,10)`,\
    \ but would require a loop to get the correct answer.\n<|/ c |>\n<| ", "\n  n\
    \ <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10 + as.integer(n%%10)/2)\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10+9)))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n == 0)\
    \ return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the sum of the digits\
    \ of an integer n. \nFor example, digits(12) should return 3 + 2 = 5.\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,algorithm |>\nHere's a solution using\
    \ only base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=r,algorithm |>\nHere's a solution using only base R:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nHere's a solution using only\
    \ base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a tags=r,algorithm\
    \ |>\n<| a tags=r,algorithm |>\nHere's a solution using only base R:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,algorithm |>\nHere's a solution using\
    \ only base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=2 |>\nHere's a solution using only base R:\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,algorithm |>\n<| a dscore=2 |>\nHere's a solution using\
    \ only base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n}\n</code>\n\
    <|/ a tags=r,algorithm |>\n<| a tags=r,algorithm |>\nHere's a solution using R's\
    \ built-in capabilities:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,algorithm |>\nHere's a solution using R's built-in\
    \ capabilities:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\nHere's a solution using R's built-in capabilities:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,algorithm |>\n<| a tags=r,algorithm |>\nHere's a solution\
    \ using R's built-in capabilities:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\nHere's a solution using R's built-in capabilities:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a tags=r,algorithm |>\n<|\
    \ a tags=r,algorithm |>\nHere's a solution using R's built-in capabilities:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm\
    \ |>\nHere's a solution using R's built-in capabilities:\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n}\n</cell>\n\
    <cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\nThe function should take one integer as an argument.\nIf the\
    \ integer is negative, return 0.\nIf the integer is 0, return 0.\nIf the integer\
    \ is positive, return the sum of the digits of that integer.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10\
    \ + as.integer(n%%100)/10)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%%%10:n%%10))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 1) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\ndigits(4)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigits(235)\n\
    digits(235)\ndigits(235)\ndigits(235)\ndigits(235)\ndigit", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%2+1)))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,integer,product |>\nThe answer by is\
    \ great, but I thought I'd add my own solution in case anyone else is interested.\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,integer,product |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2))\n}\n</code>\n<|/ a tags=r,integer,product |>\n<| a tags=r,integer,product\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,integer,product |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,integer,product |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:n%%10))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%%%2))\n}\n", "\n  n <- as.integer(n)\n  return(ifelse(n %%\
    \ 2 == 0, n %/% 2, 0))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10) * as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235235)\n</cell>\n<cell>\ndigits(235235235)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the digits of an integer.\n\
    \n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,algorithm |>\nHere's a solution using\
    \ R's built-in capabilities:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,algorithm |>\nHere's a solution using R's built-in\
    \ capabilities:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,algorithm |>\nHere's a solution using R's built-in capabilities:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nHere's a solution using R's built-in capabilities:\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,algorithm |>\n<| a tags=r,algorithm |>\nHere's a solution\
    \ using R's built-in capabilities:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=r,algorithm |>\nHere's a solution using R's built-in\
    \ capabilities:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=r,algorithm |>\nHere's a solution using R's built-in capabilities:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the product of the even digits in a number.\n\n\
    \n</text>\n<cell>", "\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n\
    \  n <- ifelse(n %% 3 == 0, n * 3, n * 3)\n  n <- ifelse(n %% 5 == 0, n * 5, n\
    \ * 5)\n  n <- ifelse(n %% 7 == 0, n * 7, n * 7)\n  n\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer n. \nFor example, digits(12) should return 3 + 1 = 4.\n\nHint:\
    \ You can use the modulo operator to help you with this.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n}\n", "\n  \
    \  n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <-\
    \ as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ %% 2 == 0, n, 0)\n  n <- ifelse(n %% 3 == 0, n, 0)\n  n <- ifelse(n %% 5 ==\
    \ 0, n, 0)\n  n <- ifelse(n %% 7 == 0, n, 0)\n  n <- ifelse(n %% 11 == 0, n, 0)\n\
    \  n <- ifelse(n %% 13 == 0, n, 0)\n  n <- ifelse(n %% 17 == 0, n, 0)\n  n <-\
    \ ifelse(n %% 19 == 0, n, 0)\n  n <- ifelse(n %% 23 == 0, n, 0)\n  n <- ifelse(n\
    \ %% 25 == 0, n, 0)\n  n <- ifelse(n %% 27 == 0, n, 0)\n  n <- ifelse(n %% 29\
    \ == 0, n, 0)\n  n <- ifelse(n %% 31 == 0, n, 0)\n  n <- ifelse(n %% 33 == 0,\
    \ n, 0)\n  n <- ifelse(n %% 35 == 0, n, 0)\n  n <- ifelse(n %% 37 == 0, n, 0)\n\
    \  n <- ifelse(n %% 39 == 0, n, 0)\n  n <- ifelse(n %% 41 == 0, n, 0)\n  n <-\
    \ ifelse(n %% 43 == 0, n, 0)\n  n <- ifelse(n %% 45 == 0, n, 0)\n  n <- ifelse(n\
    \ %% 47 == 0, n, 0)\n  n <- ifelse(n %% 49 == 0, n, 0)\n  n <- ifelse(n %% 51\
    \ == 0, n, 0)\n  n <- ifelse(n %% 53 == 0, n, 0)\n  n <- ifelse(n %% 55 == 0,\
    \ n, 0)\n  n <- ifelse(n %% 57 == 0, n, 0)\n  n <- ifelse(n %% 59 == 0, n, 0)\n\
    \  n <- ifelse(n %% 61 == 0, n, 0)\n  n <- ifelse(n %% 63 == 0, n, 0)\n  n <-\
    \ ifelse(n %% 65 == 0, n, 0)\n  n <- ifelse(n %% 67 == 0, n, 0)\n  n <- ifelse(n\
    \ %% 69 == 0, n, 0)\n  n <- ifelse(n %% 71 == 0, n, 0)\n  n <- ifelse(n %% 73\
    \ == 0, n, 0)\n  n <- ifelse(n %% 75 == 0, n, 0)\n  n <- ifelse(n %% 77 == 0,\
    \ n, 0)\n  ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235000)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of an integer.\nFor example, digits(1245)\
    \ should return 0 + 1 + 5 = 6.\n\nHint: You can use the modulo operator to extract\
    \ the last digit of an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(n)\n  x <- 0\n  for(i in 1:(n%%2)) x <-\
    \ x * 10\n  return(x+n/10)\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `digits(-5)` returns `0`.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that case. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n\
    <| a tags=r,integer,digits dscore=4 |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(n)\n  x <- 0\n  for(i in 1:(n%%2)) x <-\
    \ x * 10\n  return(x+n/10)\n}\n</code>\n<|/ a |>\n<| a dscore=4 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  x <- 0\n\
    \  for(i in 1:(n%%2)) x <- x * 10\n  return(x+n/10)\n}\n</code>\n<|/ a tags=r,integer,digits\
    \ |>\n<| a |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(n)\n  x <- 0\n  for(i in 1:(n%%2)) x <- x * 10\n  return(x+n/10)\n\
    }\n</code>\n<|/ a tags=r,integer,digits dscore=3 |>\n<| a dscore=3 |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  x\
    \ <- 0\n  for(i in 1:(n%%2)) x <- x * 10\n  return(x+n/10)\n}\n</code>\n<|/ a\
    \ tags=r,integer,digits |>\n<| a dscore=3 |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  x <- 0\n  for(i in 1:(n%%2))\
    \ x <- x * 10\n  return(x+n/10)\n}\n</code>\n<|/ a tags=r,integer,digits |>\n\
    <| a dscore=3 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(n)\n  x <- 0\n  for(i in 1:(n%%", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| c |>\nThanks so much! I really appreciate your help.\n<|/ c |>\n<| c\
    \ |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution\
    \ that uses only integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a |>\nHere's a solution that uses\
    \ only integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a tags=r,integer,product dscore=2 |>\n<| a dscore=1 |>\nHere's a solution using\
    \ only integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a tags=r,integer,product |>\n<| a dscore=1 |>\nHere's a solution using only\
    \ integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a tags=r,integer,product |>\n<| a tags=r,integer,product |>\nHere's a solution\
    \ using only integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=r,integer,product |>\nHere's a solution using only\
    \ integer arithmetic:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2)%%2))\n}\n</code>\n<|/\
    \ a ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235235)\n</cell>\n\
    <cell>\ndigits(235235235)\n</cell>\n<cell>\ndigits(235235235235)\n</cell>\n<cell>\n\
    digits(235235235235235)\n</cell>\n<cell>\ndigits(235235235235235235)\n</cell>\n\
    <cell>\ndigits(235235235235235235235)\n</cell>\n<cell>\ndigits(235235235235235235235235)\n\
    </cell>\n<cell>\ndigits(235235235235235235235235)\n</cell>\n<cell>\ndigits(235235235235235235235235235)\n\
    </cell>\n<cell>\ndigits(235235235235235235235235235235)\n</cell>\n<cell>\ndigits(235235235235235235235235235235235)\n\
    </cell>\n<cell>\ndigits(235235235235235235235235235235235235)\n</cell>\n<cell>\n\
    digits(235235235235235235235235235235235235235)\n</cell>\n<cell>\ndigits(235235235235235235235235235235235235235235)\n\
    </cell>\n<cell>\ndigits(235235235235235235235235235235235235235235)\n</cell>\n\
    <cell>\ndigits(235235235235235235235235235235235235235235235)\n</cell>\n<cell>\n\
    digits(235235235235235235235235235235235235235235235)\n</cell>\n<cell>\ndigits(235235235235235235235235235235235235235235235)\n\
    </cell>\n<cell>\ndigits(235235235235235235235235235235235235235235235)\n</cell>\n\
    <cell>\ndigits(235235235235235235235235235235235", "\n  n <- as.integer(n)\n \
    \ n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)", "\n  n <-\
    \ as.integer(n)\n  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r,integer,digits |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n<|/ a tags=r,integer,digits\
    \ |>\n<| a dscore=0 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n<|/ a tags=r,integer,digits\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26839812)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ get the digits of the number `n`. He then posted his own answer which does exactly\
    \ that. He then asked if there is a better way to do it, and I provided an answer\
    \ that does exactly that. He then asked if there was a way to do it without using\
    \ `as.integer()`. He then posted his own answer which does exactly that. He then\
    \ asked if there was a way to do it without using `%%`.\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26839812)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an ", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(12) should return 3 + 4 = 7. Make sure your function works with negative\
    \ numbers.\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10) * digits(n%%10)\n}\n",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| c |>\nThis doesn't seem\
    \ to work. `digits(1)` returns `1` instead of `0`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug in the code. Thanks for pointing it out!\n<|/ c |>\n<| a dscore=1 |>\n\
    The function digits() can be defined as follows:\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n%%%%2+1)))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a dscore=1 |>\nThe function digits() can be defined as follows:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2+1)))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n ==\
    \ 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2+1)))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement dscore=1 |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%%%2+1)))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nPlease don't post only code as answer, but also provide\
    \ an explanation what your code does and how it solves the problem of the question.\
    \ Answers with an explanation are usually more helpful and of better quality,\
    \ and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  ", "\n  n <- as.integer(n)\n  if(n <= 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10 + as.integer(n%%10))\n\
    }\n</code>\n<|/ a tags=r,integer,digits |>\n<| c |>\nThis doesn't seem to work.\
    \ `digits(1)` returns `1`, but `digits(4)` returns `0`.\n<|/ c |>\n<| c |>\nI\
    \ tested it on RStudio and R console. Both returned `1`. Are you sure you copied\
    \ it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running R\
    \ 3.2.2 on Windows 7. Maybe it's an issue with my version of R?\n<|/ c |>\n<|\
    \ c |>\nI tested it on R 3.2.2 on Windows 7 and it returned `1` on both RStudio\
    \ and R console. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nI copied\
    \ it exactly as you wrote it. I just tried it again and it worked. Thanks!\n<|/\
    \ c |>\n<| a dscore=4 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n <= 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10\
    \ + as.integer(n%%10))\n}\n</code>\n<|/ a tags=r,integer,digits |>\n<| c |>\n\
    This doesn't seem to work. `digits(1)` returns `1`, but `digits(4)` returns `0`.\n\
    <|/ c |>\n<| c |>\nI tested it on RStudio and R console. Both returned `1`. Are\
    \ you sure you copied it correctly?\n<|/ c |>\n<| c |>\nI copied it exactly as\
    \ you wrote it. I just tried it again and it worked. Thanks!\n<|/ c |>\n<| a tags=r,integer,digits\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n <= 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10 + as.integer(n%%10))\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n <= 0) return(0)\n  if(n%%", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\ndigits(4)\ndigits(235)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of its argument. For example:\n>>> digits(1)\n\
    1\n>>> digits(4)\n4\n>>> digits(235)\n23\n>>> digits(-5)\n5\n>>> digits(0)\n0\n\
    \n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:n%%10+1))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n}\n\
    </code>\n<|/ a dscore=2 tags=r |>\n<| a tags=r |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:n%%10+1))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer.\nThe function should work for any integer and should return an\
    \ integer.\nFor example, sumDigits(12) should return 1 + 2 + 3 = 6.\nAssume that\
    \ n is a positive integer greater than 0.\n\n\n</text>\n<cell>\nsumDigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  return(sum(n%%10:(n%%10+9)))\n}\n</cell>\n<cell>\n\
    sumDigits(12)\n</cell>\n<cell>\nsumDigits(12)\n</cell>\n<cell>\nsumDigits(12)\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the product of the digits\
    \ of an integer.\nThe function should work for any integer and should return an\
    \ integer.\nFor example, productDigits(12) should return 1 * 2 * 3 = 24.\nAssume\
    \ that n is a positive integer greater than 0.\n\n\n</text>\n<cell>\nproductDigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  return(prod(n%%10:(n%%10+9)))\n}\n\
    </cell>\n<cell>\nproductDigits(12)\n</cell>\n<cell>\nproductDigits(12)\n</cell>\n\
    <cell>\nproductDigits(12)\n</cell>\n<text>\nProblem 5\nWrite a function that returns\
    \ the sum of the squares of the digits of an integer.\nThe function should work\
    \ for any integer and should return an integer.\nFor example, sumOfSquaresDigits(12)\
    \ should return 1 + 4 + 9 = 17.\nAssume that n is a positive integer greater than\
    \ 0.\n\n\n</text>\n<cell>\nsumOfSquaresDigits <- function(n) {\n  n <- as.integer(n)\n\
    \  return(sum(n%%10:(n%%10+9))^2)\n}\n</cell>\n<cell>\nsumOfSquaresDigits(12)\n\
    </cell>\n<cell>\nsumOfSquaresDigits(12)\n</cell>\n<cell>\nsumOfSquaresDigits(12)\n\
    </cell>\n<text>\nProblem 6\nWrite a function that returns the product of the squares\
    \ of the digits of an integer.\nThe function should work for any integer and should\
    \ return an ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  x <- 0\n\
    \  while(n > 1) {\n    x <- x * 10\n    n <- n / 10\n  }\n  return(x)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nHere's a solution using only base R functions:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  x\
    \ <- 0\n  while(n > 1) {\n    x <- x * 10\n    n <- n / 10\n  }\n  return(x)\n\
    }\n</code>\n<|/ a dscore=1 tags=r |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  x <- 0\n  while(n > 1)\
    \ {\n    x <- x * 10\n    n <- n / 10\n  }\n  return(x)\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(n)\n  x <- 0\n  while(n > 1) {\n    x <- x * 10\n    n\
    \ <- n / 10\n  }\n  return(x)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n\
    \  x <- 0\n  while(n > 1) {\n    x <- x * 10\n    n <- n / 10\n  }\n  return(x)\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  x <- 0\n  while(n > 1) {\n\
    \    x <- x * 10\n    n <- n / 10\n  }\n  return(x)\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nWhile this code may provide\
    \ a solution to the question, it's better to add context as to why/", "\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*(3*n+1)/2)\n\
    }\n", "\n    n <- as.integer(n)\n    n <- ifelse(n %% 2 == 0, n, 0)\n    n <-\
    \ ifelse(n %% 2 == 1, n * 2, n)\n    n <- ifelse(n %% 3 == 0, n * 3, n)\n    n\
    \ <- ifelse(n %% 5 == 0, n * 5, n)\n    n <- ifelse(n %% 7 == 0, n * 7, n)\n \
    \   return(n)\n}\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  return(as.integer(n%%10) * as.integer(n%%10)/10)\n}\n", "\n\
    \  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n %% 3\
    \ == 0, n * 3, 0)\n  n <- ifelse(n %% 5 == 0, n * 5, 0)\n  n <- ifelse(n %% 7\
    \ == 0, n * 7, 0)\n  n <- ifelse(n %% 11 == 0, n * 11, 0)\n  n <- ifelse(n %%\
    \ 13 == 0, n * 13, 0)\n  n <- ifelse(n %% 17 == 0, n * 17, 0)\n  n <- ifelse(n\
    \ %% 19 == 0, n * 19, 0)\n  n <- ifelse(n %% 23 == 0, n * 23, 0)\n  n <- ifelse(n\
    \ %% 29 == 0, n * 29, 0)\n  n <- ifelse(n %% 31 == 0, n * 31, 0)\n  n <- ifelse(n\
    \ %% 37 == 0, n * 37, 0)\n  n <- ifelse(n %% 41 == 0, n * 41, 0)\n  n <- ifelse(n\
    \ %% 43 == 0, n * 43, 0)\n  n <- ifelse(n %% 47 == 0, n * 47, 0)\n  n <- ifelse(n\
    \ %% 53 == 0, n * 53, 0)\n  n <- ifelse(n %% 59 == 0, n * 59, 0)\n  n <- ifelse(n\
    \ %% 61 == 0, n * 61, 0)\n  n <- ifelse(n %% 67 == 0, n * 67, 0)\n  n <- ifelse(n\
    \ %% 71 == 0, n * 71, 0)\n  n <- ifelse(n %% 73 == 0, n * 73, 0)\n  n <- ifelse(n\
    \ %% 79 == 0, n * 79, 0)\n  n <- ifelse(n %% 83 == 0, n * 83, 0)\n  n <- ifelse(n\
    \ %% 89 == 0, n * 89, 0)\n  n <- ifelse(n %% 97 == 0, n * 97, 0)\n  n\n}\n</code>\n\
    <|/ a tags=r,integer,digits |>\n<| a dscore=2 |>\nThe answer by is great, but\
    \ I wanted to add that you can also use gmp::as.bigz to convert integers to bigz\
    \ objects, which can then be manipulated as you wish.\n<code>\nlibrary(gmp)\n\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n\
    \  n <- ifelse(n %% 3 == 0, n * 3, 0)\n  n <- ifelse(n %% 5 == 0, n * 5, 0)\n\
    \  ", "\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n\
    \ <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n \
    \ return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the number of digits in its argument. \nFor example, digits(12)\
    \ should return 3.\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(n)\n  x <- floor(n)\n  y <- n - x\n  return(x*y*2)\n}\n", "\n  n <-\
    \ as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 1) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%%%2:(n%%%%2+1)))\n}\n", "\n  n <- as.integer(n)\n  if(n ==\
    \ 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n}\n",
  "\n    n <- as.integer(n)\n    n <- ifelse(n %% 2 == 0, n, 0)\n    n <- ifelse(n\
    \ %% 2 == 1, n * 2, n * 3)\n    n <- ifelse(n %% 3 == 0, n * 3, n * 5)\n    n\
    \ <- ifelse(n %% 5 == 0, n * 5, n * 7)\n    n <- ifelse(n %% 7 == 0, n * 7, n\
    \ * 11)\n    n <- ifelse(n %% 11 == 0, n * 11, n * 13)\n    n <- ifelse(n %% 13\
    \ == 0, n * 13, n * 17)\n    n <- ifelse(n %% 17 == 0, n * 17, 0L)\n    n\n}\n",
  "\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%2+1)))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of its input. For example:\n>>> digits(123)\n6\n>>> digits(-4)\n0\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(n%%2)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10)\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the sum of the digits of an integer n. \nFor example, digits(12) should\
    \ return 3 + 1 = 4.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(n)\n  return(digits(n-1)*(2*n+1)-1)\n}\n</code>\n<|/ a tags=r,recursion,algorithm\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to do this\
    \ without recursion.\n<|/ c |>\n<| c |>\n: I added a non-recursive solution.\n\
    <|/ c |>\n<| c |>\n: I added a non-recursive solution.\n<|/ c |>\n<| c |>\n: I\
    \ added a non-recursive solution.\n<|/ c |>\n<| a dscore=2 |>\nHere's a recursive\
    \ solution:\n<code>\ndigits <- function(n) {\n  if(n <= 1) return(n)\n  if(n %%\
    \ 2 == 0) return(digits(n-1))\n  return(digits(n-1)*(2*n+1)-1)\n}\n</code>\n<|/\
    \ a tags=r,recursion,algorithm |>\n<| a tags=r,recursion,algorithm |>\nHere's\
    \ a non-recursive solution:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(n)\n  return(digits(n-1)*(2*n+1)-1)\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a |>\nHere's a recursive solution:\n<code>\ndigits <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  if(n %% 2 == 0) return(digits(n-1))\n  return(digits(n-1)*(2*n+1)-1)\n\
    }\n</code>\n<|/ a tags=r,recursion,algorithm dscore=2 |>\n<| a tags=r,recursion,algorithm\
    \ |>\nHere's a non-recursive solution:\n<code>\ndigits <- function(n) {\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*(2*n+1)-1)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a recursive solution:\n\
    <code>\ndigits <- function(n) {\n  if(n <= 1) return(n)\n  if(n %% 2 == 0) return(digits(n-1))\n\
    \  return(digits(n-1)*(2*n+1)-1)\n}\n</code>\n<|/ a tags=r,recursion,algorithm\
    \ |>\n<| a |>\nHere's a non-recursive solution:\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*(2*n+1)-1)\n",
  "\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n%%2+1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work. Try `digits(1)`.\n<|/ c |>\n<| c |>\nIt does work. Try `digits(1)`.\n\
    <|/ c |>\n<| c |>\nYes, it does. Try `digits(1)`.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote, but I suspect it's because you didn't explain what it does. I suspect\
    \ it's because you didn't explain what it does. I suspect it's because you didn't\
    \ explain what it does. I suspect it's because you didn't explain what it does.\
    \ I suspect it's because you didn't explain what it does. I suspect it's because\
    \ you didn't explain what it does. I suspect it's because you didn't explain what\
    \ it does. I suspect it's because you didn't explain what it does. I suspect it's\
    \ because you didn't explain what it does. I suspect it's because you didn't explain\
    \ what it does. I suspect it's because you didn't explain what it does. I suspect\
    \ it's because you didn't explain what it does. I suspect it's because you didn't\
    \ explain what it does. I suspect it's because you didn't explain what it does.\
    \ I suspect it's because you didn't explain what it does. I suspect it's because\
    \ you didn't explain what it does. I suspect it's because you didn't explain what\
    \ it does. I suspect it's because you didn't explain what it does. I suspect it's\
    \ because you didn't explain what it does. I suspect it's because you didn't explain\
    \ what it does. I suspect it's because you didn't explain what it does. I suspect\
    \ it's because you didn't explain what it does. I suspect it's because you didn't\
    \ explain what it does. I suspect it's because you didn't explain what it does.\
    \ I suspect it's because you didn't explain what it does. I suspect it's because\
    \ you didn't explain what it does. I suspect ", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a tags=r,function,if-statement |>\nHere's a solution that uses only base\
    \ R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement dscore=2 |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| a dscore=1 |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10) *\
    \ as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n\
    <cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10\
    \ + as.integer(n%%100))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%10:n%%10))\n}\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the digits of its argument. For example:\n>>> digits(123)\n\
    6\n>>> digits(-4)\n0\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(n)\n  else return(digits(n-1) * 3 + digits(n-2))\n}\n\
    </code>\n<|/ a tags=r,recursion,algorithm |>\n<| a dscore=1 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(n)\n  else\
    \ return(digits(n-1) * 3 + digits(n-2))\n}\n</code>\n<|/ a tags=r,recursion,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(n)\n  else return(digits(n-1) * 3 + digits(n-2))\n}\n\
    </code>\n<|/ a tags=r,recursion,algorithm |>\n<| a tags=r,recursion,algorithm\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0)\
    \ return(n)\n  else return(digits(n-1) * 3 + digits(n-2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,recursion,algorithm |>\n<code>\ndigits <- function(n) {\n  n\
    \ <- as.integer(n)\n  if(n %% 2 == 0) return(n)\n  else return(digits(n-1) * 3\
    \ + digits(n-2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(n)\n  else\
    \ return(digits(n-1) * 3 + digits(n-2))\n}\n</code>\n<|/ a tags=r,recursion,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(n)\n  else return(digits(n-1) * 3 + digits(n-2))\n}\n\
    </code>\n<|/ a tags=r,recursion,algorithm |>\n<| a tags=r,recursion,algorithm\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0)\
    \ return(n)\n  else return(digits(n-1) * 3 + digits(n-2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%10:(n%%10)+1))\n}\n</cell>\n<cell>\ndigits(1)\ndigits(4)\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(0)\n  return(n %/% 2)\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n\
    \ %% 2 == 0) return(0)\n  return(n %/% 2)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0)\
    \ return(0)\n  return(n %/% 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(0)\n\
    \  return(n %/% 2)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(0)\n  return(n\
    \ %/% 2)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n %% 2 == 0) return(0)\n  return(n %/% 2)\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(0)\n  return(n %/% 2)\n}\n</code>\n<|/ a tags=r dscore=0\
    \ |>\n<| a tags=r |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(0)\n  return(n %/% 2)\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=r |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n\
    \ %% 2 == 0) return(0)\n  return(n %/% 2)\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n %%\
    \ 2 == 0) return(0)\n  return(n %/% 2)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r ",
  "\n  n <- as.integer(n)\n  return(ifelse(n %% 2 == 0, n * digits(n / 2), 0))\n}\n",
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(n*digits(n-1))\n\
    }\n", "\n  n <- as.integer(n)\n  return(ifelse(n %% 2 != 0, n * digits(n / 2),\
    \ 0))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,algorithm,math |>\n<| c |>\nI like this solution, but\
    \ I wonder if it can be done without using any packages.\n<|/ c |>\n<| c |>\n\
    I added a solution without packages.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if it can be done without using any packages.\n<|/ c |>\n<| c |>\n\
    I added a solution without packages.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if it can be done without using any packages.\n<|/ c |>\n<| a dscore=2\
    \ |>\nHere's a solution without packages:\n<code>\ndigits <- function(n) {\n \
    \ n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,algorithm,math |>\n<| c |>\nI like this solution, but\
    \ I wonder if it can be done without using any packages.\n<|/ c |>\n<| c |>\n\
    I added a solution without packages.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution\
    \ without packages:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n \
    \ if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,algorithm,math\
    \ |>\n<| a tags=r,algorithm,math |>\nHere's a solution without packages:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nHere's a solution without packages:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,algorithm,math dscore=2\
    \ |>\n<| a tags=r,algorithm,math |>\nHere's a solution without packages:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:",
  "\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n %% 3\
    \ == 0, n * 3, 0)\n  n <- ifelse(n %% 5 == 0, n * 5, 0)\n  n <- ifelse(n %% 7\
    \ == 0, n * 7, 0)\n  n\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10 + as.integer(n%%100))\n\
    }\n", "\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n\
    \ %% 2 == 1, n * 2, n * 3)\n  n <- ifelse(n %% 3 == 0, n * 3, n * 5)\n  n <- ifelse(n\
    \ %% 5 == 0, n * 5, n * 7)\n  n <- ifelse(n %% 7 == 0, n * 7, n * 9)\n  n\n}\n",
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,integer,product\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,product |>\n\
    <| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a tags=r,integer,product |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a dscore=1 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product dscore=1 |>\n<| a tags=r,integer,product\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(n)\n  return(digits(n-1)*10 + n%%2)\n}\n", "\n    n <-\
    \ as.integer(n)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n  \
    \  n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n / 10)\n    n <- as.integer(n\
    \ / 10)\n    n <- ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks, this works well. I'm still trying\
    \ to understand how it works. I understand that `%%` means \"mod\", but what does\
    \ `%%2` mean? I understand that `%%` means \"mod\", but what does `%%2` mean?\
    \ I understand that `%%` means \"mod\", but what does `%%2` mean? I understand\
    \ that `%%` means \"mod\", but what does `%%2` mean? I understand that `%%` means\
    \ \"mod\", but what does `%%2` mean? I understand that `%%` means \"mod\", but\
    \ what does `%%2` mean? I understand that `%%` means \"mod\", but what does `%%2`\
    \ mean? I understand that `%%` means \"mod\", but what does `%%2` mean? I understand\
    \ that `%%` means \"mod\", but what does `%%2` mean? I understand that `%%` means\
    \ \"mod\", but what does `%%2` mean? I understand that `%%` means \"mod\", but\
    \ what does `%%2` mean? I understand that `%%` means \"mod\", but what does `%%2`\
    \ mean? I understand that `%%` means \"mod\", but what does `%%2` mean? I understand\
    \ that `%%` means \"mod\", but what does `%%2` mean? I understand that `%%` means\
    \ \"mod\", but what does `%%2` mean? I understand that `%%` means \"mod\", but\
    \ what does `%%2` mean? I understand that `%%` means \"mod\", but what does `%%2`\
    \ mean? I understand that `%%` means \"mod\", but what does `%%2` mean? I understand\
    \ that `%%` means \"mod\", but what does `%%2` mean? I understand that `%%` means\
    \ \"mod\", but what does `%%2` mean? I understand that `%%` means \"mod\", but\
    \ what does `%%2` mean? I understand that `%%` means \"mod\", but what does `%%2`\
    \ mean? I understand that `%%` means \"mod\", but what does `%%2` mean? I understand\
    \ that `%%` means \"mod\", but ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n%%2+1)))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10) * as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(0)\n  return(n %% 10 * digits(n %/% 10))\n}\n</code>\n\
    <|/ a tags=r,recursion,algorithm |>\n<| c |>\nI like your solution, although I\
    \ wonder if there is a way to do this without recursion.\n<|/ c |>\n<| c |>\n\
    I added a non-recursive solution, although I suspect that it will not be as fast\
    \ as your recursive solution. Also, I think your recursive solution will run out\
    \ of stack space eventually.\n<|/ c |>\n<| c |>\nI added a non-recursive solution,\
    \ although I suspect that it will not be as fast as your recursive solution. Also,\
    \ I think your recursive solution will run out of stack space eventually.\n<|/\
    \ c |>\n<| c |>\nI added a non-recursive solution, although I suspect that it\
    \ will not be as fast as your recursive solution. Also, I think your recursive\
    \ solution will run out of stack space eventually.\n<|/ c |>\n<| c |>\nI added\
    \ a non-recursive solution, although I suspect that it will not be as fast as\
    \ your recursive solution. Also, I think your recursive solution will run out\
    \ of stack space eventually.\n<|/ c |>\n<| a tags=r,recursion,algorithm |>\nHere's\
    \ a recursive solution that doesn't use any loops:\n<code>\ndigits <- function(n)\
    \ {\n  if(n <= 0) return(0)\n  if(n %% 10 == 0) return(n)\n  return(digits(n %/%\
    \ 10) * 10 + n %/% 10)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,algorithm\
    \ |>\nHere's a recursive solution that doesn't use any loops:\n<code>\ndigits\
    \ <- function(n) {\n  if(n <= 0) return(0)\n  if(n %% 10 == 0) return(n)\n  return(digits(n\
    \ %/% 10) * 10 + n %/% 10)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    Here's a recursive solution that doesn't use any loops:\n<code>\ndigits <- function(n)\
    \ {\n  if(n <= 0) return(0)\n  if(n %% 10 == 0) return(n)\n  return(digits(n %/%\
    \ 10) * 10 + n %/% 10)\n}\n</code>\n<|/ a tags=r,recursion,algorithm |>\n<| a\
    \ dscore=1 |>\nHere's a recursive solution that doesn't use any loops:\n", "\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,algorithm |>\nHere's a solution using\
    \ only base R functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,algorithm |>\nHere's a solution using only base R\
    \ functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,algorithm |>\nHere's a solution using only base R functions:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,algorithm\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,algorithm |>\n<| a\
    \ dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:", "\n  n <- as.integer(n)\n  if(n == 0)\
    \ return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,math,product\
    \ |>\n<| a dscore=2 |>\nHere's a solution using gmp:\n<code>\nlibrary(gmp)\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,math,product |>\n<| a tags=r,integer,math,product\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,integer,math,product\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,math,product\
    \ |>\n<| a tags=r,integer,math,product |>\n<code>\ndigits <- function(n) {\n \
    \ n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,integer,math,product |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,integer,math,product |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  "]
stop_tokens:
- "\n#"
- "\n```"
