name: HumanEval_99_closest_integer
language: r
prompt: "# Create a function that takes a value (string) representing a number\n#\
  \ and returns the closest integer to it. If the number is equidistant\n# from two\
  \ integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n\
  # 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means\
  \ that if the given number is equidistant\n# from two integers, the one you should\
  \ return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  closest_integer <- function(value) {"
tests: "test_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'),\
  \ 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n\
  \    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'),\
  \ 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\n\
  test_humaneval()"
completions: ["\n  value <- as.numeric(value)\n  closest <- value\n  for(i in 2:(length(value)))\
    \ {\n    if(abs(value[i] - value[i-1]) < abs(value[i] - value[i+1])) {\n     \
    \ closest <- value[i]\n    }\n  }\n  closest\n}\n", "\n  value <- as.numeric(value)\n\
    \  closest <- 0\n  for(i in 1:length(value)) {\n    diff <- abs(value[i] - closest)\n\
    \    if(diff < abs(value[i] - value[i - 1])) {\n      closest <- value[i]\n  \
    \  }\n  }\n  closest\n}\n", "\n  value <- as.numeric(value)\n  return(ifelse(abs(value\
    \ - floor(value)) == abs(value - ceiling(value)),\n                ceiling(value),\n\
    \                floor(value)))\n}\n", "\n  value <- as.numeric(value)\n  closest\
    \ <- value\n  for(i in 1:(length(value) - 1)) {\n    diff <- abs(value[i] - value[i\
    \ + 1])\n    if(diff < closest) {\n      closest <- diff\n    }\n  }\n  closest\n\
    }\n", "\n  value <- as.numeric(value)\n  closest <- value\n  diff <- abs(value\
    \ - closest)\n  while(diff > 1) {\n    closest <- closest + diff\n    diff <-\
    \ abs(value - closest)\n  }\n  closest\n}\n", "\n  value <- as.numeric(value)\n\
    \  closest <- value\n  for(i in 1:(length(value) - 1)) {\n    diff <- abs(value[i]\
    \ - value[i + 1])\n    if(diff < closest) {\n      closest <- diff\n    }\n  }\n\
    \  closest\n}\n", "\n  value <- as.numeric(value)\n  closest <- 0\n  for(i in\
    \ 1:(length(value) - 1)) {\n    if(abs(value[i] - value[i + 1]) < abs(value -\
    \ value[i + 1])) {\n      closest <- value[i]\n    }\n  }\n  closest\n}\n", "\n\
    \  value <- as.numeric(value)\n  closest <- value\n  closest <- ifelse(value ==\
    \ 0, value, closest)\n  closest <- ifelse(value == closest, 0, closest)\n  closest\
    \ <- ifelse(value == closest + 1, closest, closest)\n  closest <- ifelse(value\
    \ == closest - 1, closest, closest)\n  closest\n}\n", "\n  value <- as.numeric(value)\n\
    \  diff <- abs(value - floor(value))\n  return(ifelse(diff == 0, value, floor(value)))\n\
    }\n", "\n  value <- as.numeric(value)\n  closest <- 0\n  closest <- which.min(abs(value\
    \ - closest))\n  closest\n}\n", "\n  value <- as.numeric(value)\n  closest <-\
    \ value\n  for(i in 2:length(value)) {\n    if(abs(value[i] - value[i-1]) < abs(value[i]\
    \ - value[i])) {\n      closest <- value[i]\n    }\n  }\n  closest\n}\n", "\n\
    \  value <- as.numeric(value)\n  return(ifelse(is.na(value), NA, ceiling(value\
    \ + 0.5)))\n}\n", "\n  value <- as.numeric(value)\n  diff <- abs(value - floor(value))\n\
    \  return(ifelse(diff == 0, value, floor(value) + diff))\n}\n", "\n  value <-\
    \ as.numeric(value)\n  closest <- 0\n  diff <- abs(value - closest)\n  while(diff\
    \ > 0) {\n    closest <- value + diff\n    diff <- abs(value - closest)\n  }\n\
    \  closest\n}\n", "\n  value <- as.numeric(value)\n  closest <- value\n  for(i\
    \ in 2:(length(value))) {\n    if(abs(value[i] - value[i-1]) < abs(value[i] -\
    \ value[i+1])) {\n      closest <- value[i]\n    }\n  }\n  closest\n}\n", "\n\
    \  value <- as.numeric(value)\n  closest <- 0\n  closest <- which.min(abs(value\
    \ - closest))\n  closest\n}\n", "\n  value <- as.numeric(value)\n  closest <-\
    \ 0\n  closest <- which.min(abs(value - closest))\n  closest\n}\n", "\n  value\
    \ <- as.numeric(value)\n  diff <- abs(value - floor(value))\n  return(ifelse(diff\
    \ == 0, value, floor(value) + diff))\n}\n", "\n  value <- as.numeric(value)\n\
    \  closest <- 0\n  for(i in 1:length(value)) {\n    diff <- abs(value[i] - closest)\n\
    \    if(diff < abs(value[i] - value[i - 1])) {\n      closest <- value[i]\n  \
    \  }\n  }\n  closest\n}\n", "\n  value <- as.numeric(value)\n  closest <- value\n\
    \  for(i in 1:(length(value) - 1)) {\n    if(abs(value[i] - value[i + 1]) < abs(closest\
    \ - value[i])) {\n      closest <- value[i]\n    }\n  }\n  closest\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
