name: HumanEval_92_any_int
language: r
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n# >>> any_int(3,\
  \ 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6, -2.2, 2)\n\
  # FALSE\nany_int <- function(x, y, z) {"
tests: "test_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
  \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4,\
  \ 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0,\
  \ 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  any(x != y | x != z | y != z)\n}\n", "\n  any(x != y | x != z &\
    \ y != z)\n}\n", "\n  return(all(x %in% c(y, z)) && all(y %in% c(x, z)) && all(z\
    \ %in% c(x, y)))\n}\n", "\n  return(\n    is.integer(x) & is.integer(y) &\n  \
    \  is.integer(z) & is.numeric(x) & is.numeric(y) & is.numeric(z) &\n    x != 0\
    \ & y != 0 & z != 0 &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y\
    \ != -Inf & z != -Inf\n  )\n}\n", "\n  return(\n    is.integer(x) & is.integer(y)\
    \ &\n    is.integer(z) & x == y & x == z & x != y\n  )\n}\n", "\n  return(\n \
    \   is.integer(x) & is.integer(y) &\n    is.integer(z) & x == y & x == z & y ==\
    \ z\n  )\n}\n", "\n  return(\n    all(\n      sapply(\n        c(x, y, z),\n \
    \       function(x) {\n          return(\n            is.integer(x) &&\n     \
    \       x >= 0 &&\n            x <= Inf &&\n            x >= -Inf\n          )\n\
    \        }\n      )\n    )\n  )\n}\n", "\n  return(\n    is.integer(x) & is.integer(y)\
    \ &\n    is.integer(z) & is.numeric(x) & is.numeric(y) & is.numeric(z) &\n   \
    \ x != 0 & y != 0 & z != 0 & x > 0 & y > 0 & z > 0 & x < y & x < z & y < z\n \
    \ )\n}\n", "\n  return(all(sapply(x, is.integer)) && all(sapply(y, is.integer))\
    \ && all(sapply(z, is.integer)) && \n         sum(y) == sum(z) && sum(y) == sum(x)\
    \ && sum(z) == sum(x))\n}\n", "\n  return(\n    is.integer(x) & is.integer(y)\
    \ &\n    is.integer(z) & x == y & x == z & y == z\n  )\n}\n", "\n  any(x != y\
    \ | x != z | y != z)\n}\n</cell>\n<cell>", "\n  return(all(x %in% c(y, z)) &&\
    \ all(y %in% c(x, z)) && all(z %in% c(x, y)))\n}\n", "\n  return(all(x %in% c(y,\
    \ z)) & all(y %in% c(x, z)) & all(z %in% c(x, y)))\n}\n</cell>\n<cell>", "\n \
    \ return(\n    is.numeric(x) & is.numeric(y) & is.numeric(z) & \n    is.integer(x)\
    \ & is.integer(y) & is.integer(z) & \n    x != 0 & y != 0 & z != 0 & \n    x +\
    \ y == z & \n    x != 0 & y != 0 & z != 0 & \n    x + y != z & \n    x != 0 &\
    \ y != 0 & z != 0 & \n    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n   \
    \ x + z != y & \n    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n    x !=\
    \ 0 & y != 0 & z != 0 & \n    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n\
    \    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n    x\
    \ != 0 & y != 0 & z != 0 & \n    x + z != y & \n    x != 0 & y != 0 & z != 0 &\
    \ \n    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n  \
    \  x != 0 & y != 0 & z != 0 & \n    x + z != y & \n    x != 0 & y != 0 & z !=\
    \ 0 & \n    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n\
    \    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n    x != 0 & y != 0 & z !=\
    \ 0 & \n    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n\
    \    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n    x != 0 & y != 0 & z !=\
    \ 0 & \n    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n\
    \    x != 0 & y != 0 & z != 0 & \n    x + z != y & \n    x != 0 & y != 0 & z !=\
    \ 0 & \n    x + z != y & \n    x != 0 & y != 0 & z != 0 & \n    ", "\n  return(\n\
    \    all(\n      sapply(\n        list(x, y, z),\n        function(x) {\n    \
    \      return(\n            is.integer(x) &&\n            is.numeric(x) &&\n \
    \           !is.na(x) &&\n            !is.null(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x) &&\n            !is.na(x) &&\n\
    \            !is.na(x) &&\n            !is.na(x", "\n  any(x == y | x == z | y\
    \ == z)\n}\n", "\n  return(\n    is.integer(x) & is.integer(y) &\n    is.integer(z)\
    \ & x == y & x == z &\n    is.numeric(x) & is.numeric(y) & is.numeric(z) &\n \
    \   all(x != 0) & all(y != 0) & all(z != 0)\n  )\n}\n", "\n  return(\n    is.integer(x)\
    \ & is.integer(y) &\n    is.integer(z) & is.numeric(x) & is.numeric(y) & is.numeric(z)\
    \ &\n    x != 0 & y != 0 & z != 0 &\n    x != Inf & y != Inf & z != Inf &\n  \
    \  x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n\
    \    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n",
  "\n  return(\n    is.integer(x) & is.integer(y) &\n    is.integer(z) & x == y &\
    \ y == z & x != z\n  )\n}\n", "\n  any(x == y + z | x == z + y | y == z + x |\
    \ z == x + y | z == y + x)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
