name: HumanEval_117_select_words
language: r
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary\
  \ had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little lamb',\
  \ 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n# c()\n\
  # >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle sam',\
  \ 3)\n# c('Uncle')\nselect_words <- function(s, n) {"
tests: "test_humaneval <- function() {\ncandidate <- select_words\n    if(!identical(candidate('Mary\
  \ had a little lamb', 4), c('little'))){quit('no', 1)}\n    if(!identical(candidate('Mary\
  \ had a little lamb', 3), c('Mary', 'lamb'))){quit('no', 1)}\n    if(!identical(candidate('simple\
  \ white space', 2), c())){quit('no', 1)}\n    if(!identical(candidate('Hello world',\
  \ 4), c('world'))){quit('no', 1)}\n    if(!identical(candidate('Uncle sam', 3),\
  \ c('Uncle'))){quit('no', 1)}\n    if(!identical(candidate('', 4), c())){quit('no',\
  \ 1)}\n    if(!identical(candidate('a b c d e f', 1), c('b', 'c', 'd', 'f'))){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  \n  if(s == \"\") {\n    return(list())\n  }\n  \n  words <- c()\n\
    \  \n  for(i in 1:(length(s) - n)) {\n    \n    word <- substring(s, i, i + n)\n\
    \    \n    if(grepl(\"[aeiou]\", word)) {\n      \n      words <- c(words, word)\n\
    \    }\n  }\n  \n  return(words)\n}\n</cell>\n<cell>\nselect_words(\"Mary had\
    \ a little lamb\", 4)\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\"\
    , 3)\n</cell>\n<cell>\nselect_words(\"simple white space\", 2)\n</cell>\n<cell>\n\
    select_words(\"Hello world\", 4)\n</cell>\n<cell>\nselect_words(\"Uncle sam\"\
    , 3)\n</cell>\n<text>\nProblem 3\nThe function should return a list of all words\
    \ from string s that contain exactly n vowels, in order these words appear in\
    \ the string s.\nIf the string s is empty then the function should return an empty\
    \ list.\nNote: you may assume the input string contains only letters and spaces.\n\
    Examples:\n>>> select_words('Mary had a little lamb', 4)\nc('little')\n>>> select_words('Mary\
    \ had a little lamb', 3)\nc('Mary', 'lamb')\n>>> select_words('simple white space',\
    \ 2)\nc()\n>>> select_words('Hello world', 4)\nc('world')\n>>> select_words('Uncle\
    \ sam', 3)\nc('Uncle')\nHint: You may use regular expressions to solve this problem.\n\
    \n\n</text>\n<cell>\nselect_words <- function(s, n) {\n  \n  if(s == \"\") {\n\
    \    return(list())\n  }\n  \n  words <- c()\n  \n  for(i in 1:(length(s) - n))\
    \ {\n    \n    word <- substring(s, i, i + n)\n    \n    if(grepl(\"[aeiou]\"\
    , word)) {\n      \n      words <- c(words, word)\n    }\n  }\n  \n  return(words)\n\
    }\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\", 4)\n</cell>\n<cell>\n\
    select_words(\"Mary had a little lamb\", 3)\n</cell>\n<cell>\nselect_words(\"\
    simple white space\", 2)\n</cell>\n<cell>\nselect_words(\"Hello world\", 4)\n\
    </cell>\n<cell>\nselect_words(\"Uncle sam\", 3)\n</cell", "\n  \n  # Your code\
    \ here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>",
  "\n  \n  # Write your code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n\
    \  \n}\n</cell>\n<text>\nTest your code\nRun the cell below to test your code.\n\
    \n\n</text>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  # Your\
    \ code here\n  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  \n  if(length(s) == 0) {\n    return(list())\n  }\n  \n  consonants\
    \ <- c(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \ \n  words <- list()\n  \n  for(i in 1:length(s)) {\n    \n    word <- substr(s,\
    \ i, i)\n    \n    if(length(word) == n) {\n      \n      words[[i]] <- word\n\
    \      \n    }\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  # Your code here\n\
    \  \n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<cell>",
  "\n  \n  # Your code here\n  \n}\n</cell>\n<text>\nTest your code\nRun the cell\
    \ below to test your code.\n\n\n</text>\n<cell>", "\n  \n  if(s == \"\") {\n \
    \   return(list())\n  }\n  \n  words <- c()\n  \n  for(i in 1:n){\n    \n    words\
    \ <- c(words, grep(paste0(\"[[:alpha:]]{\", i, \"}\"), s))\n  }\n  \n  return(words)\n\
    }\n", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  if(s == \"\") {\n    return(list())\n\
    \  }\n  \n  words <- unlist(strsplit(s, \" \"))\n  \n  return(words[grepl(\"^[[:alpha:]]{n}$\"\
    , words)])\n}\n</cell>\n<cell>\nselect_words(\"Mary had a little lamb\", 4)\n\
    </cell>\n<cell>\nselect_words(\"Mary had a little lamb\", 3)\n</cell>\n<cell>\n\
    select_words(\"simple white space\", 2)\n</cell>\n<cell>\nselect_words(\"Hello\
    \ world\", 4)\n</cell>\n<cell>\nselect_words(\"Uncle sam\", 3)\n</cell>\n<text>\n\
    Problem 4\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nIf the string does not contain words, return 0.\nIf the string\
    \ contains only spaces, return 0.\nIf the string contains only numbers, return\
    \ 0.\nIf the string contains only special characters, return 0.\nIf the string\
    \ contains only uppercase and lowercase letters, return 0.\nIf the string contains\
    \ only lowercase letters, return 1.\nIf the string contains only uppercase letters,\
    \ return 2.\nIf the string contains only characters from English alphabet, return\
    \ 3.\nIf the string contains only characters from English alphabet and numbers,\
    \ return 4.\nIf the string contains only characters from English alphabet and\
    \ special characters, return 5.\nIf the string contains only characters from English\
    \ alphabet and uppercase and lowercase letters, return 6.\nIf the string contains\
    \ only characters from English alphabet and numbers and special characters, return\
    \ 7.\nIf the string contains only characters from English alphabet and uppercase\
    \ and lowercase letters and special characters, return 8.\nIf the string contains\
    \ only characters from English alphabet and numbers and special characters and\
    \ uppercase and lowercase letters, return 9.\nIf the string contains only characters\
    \ from English alphabet and uppercase and lowercase letters and special characters\
    \ and uppercase and lowercase letters, return 10.\nIf the string contains only\
    \ characters from English alphabet and numbers and special characters and uppercase\
    \ and lowercase letters and special characters and uppercase and lowercase letters,\
    \ return 11.\nIf the string contains only characters from English alphabet and\
    \ uppercase and lowercase letters and special characters and uppercase and lowercase\
    \ letters and special characters and uppercase and lowercase letters, return 12.\n\
    If the string contains only characters from English alphabet and numbers and special\
    \ characters and uppercase and lowercase letters and special characters and uppercase\
    \ and lowercase ", "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  \n  words <- c()\n\
    \  \n  for(i in 1:n){\n    \n    words <- c(words, grep(paste0(\"\\\\b\", substr(s,\
    \ i, i+n), \"\\\\b\"), s))\n    \n  }\n  \n  return(words)\n}\n", "\n  \n  if(length(s)\
    \ == 0) {\n    return(list())\n  }\n  \n  consonants <- c(\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n  \n  words <- list()\n  \n\
    \  for(i in 1:length(s)) {\n    \n    word <- substr(s, i, i)\n    \n    for(j\
    \ in 1:length(word)) {\n      \n      if(substr(word, j, j) %in% consonants) {\n\
    \        \n        words[[i]] <- word\n        break\n      }\n    }\n  }\n  \n\
    \  return(words)\n}\n</cell>\n<cell>\nselect_words('Mary had a little lamb', 4)\n\
    </cell>\n<cell>\nselect_words('Mary had a little lamb', 3)\n</cell>\n<cell>\n\
    select_words('simple white space', 2)\n</cell>\n<cell>\nselect_words('Hello world',\
    \ 4)\n</cell>\n<cell>\nselect_words('Uncle sam', 3)\n</cell>\n<text>\nProblem\
    \ 3\nThe function should return a list of all words from string s that contain\
    \ exactly n vowels, in order these words appear in the string s.\nIf the string\
    \ s is empty then the function should return an empty list.\nNote: you may assume\
    \ the input string contains only letters and spaces.\nExamples:\n>>> select_words('Mary\
    \ had a little lamb', 4)\nc('little')\n>>> select_words('Mary had a little lamb',\
    \ 3)\nc('Mary', 'lamb')\n>>> select_words('simple white space', 2)\nc()\n>>> select_words('Hello\
    \ world', 4)\nc('world')\n>>> select_words('Uncle sam', 3)\nc('Uncle')\n>>> select_words('Mary\
    \ had a little lamb', 2)\nc('little', 'lamb')\n>>> select_words('Mary had a little\
    \ lamb', 1)\nc('Mary', 'lamb')\n>>> select_words('Mary had a little lamb', 0)\n\
    c()\n</text>\n<cell>\nselect_words <- function(s, n) {\n  \n  if(length(s) ==\
    \ 0) {\n    return(list())\n  }\n  \n  vowels <- c(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n  \n  words <- list()\n  \n  for(i in 1:length(s)) {\n    \n    word\
    \ <- substr(s, i, i)\n    \n    for(j in 1:length(word)) {\n      \n", "\n  \n\
    \  # Your code here\n  \n}\n</cell>\n<cell>", "\n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  "]
stop_tokens:
- "\n#"
- "\n```"
