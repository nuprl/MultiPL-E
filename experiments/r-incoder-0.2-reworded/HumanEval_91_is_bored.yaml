name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n\
  # 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  # 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n", "\n  S <- tolower(S)\n  bored <- grepl(\"^i\", S)\n  return(sum(bored))\n\
    }\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"^I\"\
    , S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S\
    \ <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- gsub(\"[.?!]\",\
    \ \"\", S)\n  return(sum(grepl(\"^I\", S)))\n}\n</cell>\n<text>\nRun the cell\
    \ below to test your function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n\
    </cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nFinally, let's create a function that will tell us how long\
    \ an answer took us to write.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split='[\\.\\?\\!]'))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- grep(\"^I\", S, perl = TRUE)\n  length(boredoms)\n}\n", "\n  boredoms <-\
    \ grep(\"^I\", S, value = TRUE)\n  length(boredoms)\n}\n", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(boredoms > 0)\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms\
    \ > 0)\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms\
    \ > 0)\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    The is_bored function above is called a predicate. Predicates are functions that\
    \ take in a string and return a logical value.\n\nPredicates are often used to\
    \ filter data.\n\nFor example, in the code cell below, we are going to filter\
    \ out all the rows of data that contain the word \"sun\".\n\n\n</text>\n<cell>",
  "\n  S <- tolower(S)\n  bored <- grepl(\"^i\", S)\n  sum(bored)\n}\n", "\n  S <-\
    \ tolower(S)\n  boredoms <- grep(\"^i\", S)\n  length(boredoms)\n}\n", "\n  boredoms\
    \ <- gregexpr(\"[I].*\", S)\n  sum(boredoms[[1]][-1] != boredoms[[1]][-2])\n}\n",
  "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <text>\nRun the cell below to test your solution. Note that the expected value\
    \ computed by your function is not what we got :(\n\n\n</text>\n<cell>", "\n \
    \ S <- unlist(strsplit(S, split=\".\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \" \", S)\n\
    \  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n</cell>\n<cell>",
  "\n  boredoms <- gregexpr(\"[I].*[!.?]\", S)\n  sum(boredoms[[1]][-1] != boredoms[[1]])\n\
    }\n</cell>\n<text>\nRun the cell below to test your solution.\n\n\n</text>\n<cell>",
  "\n  boredoms <- grep(\"^I\", S, perl=TRUE)\n  length(boredoms)\n}\n", "\n  S <-\
    \ unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S\
    \ <- unlist(strsplit(S, split=\"[\\.\\?\\!]\"))\n  sum(grepl(\"^I\", S))\n}\n\
    </cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    is_bored is now a function that takes a string and returns the number of boredoms\
    \ it contains.\n\n\n</text>\n<text>\nQuestion 2.2: Write a function that takes\
    \ a string and returns the number of boredoms it contains.\n\nHint: You'll be\
    \ given a string of words, and your task is to count the number\nof boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\nSentences are delimited\
    \ by '.', '?' or '!'.\nFor example:\n>>> is_bored('Hello world')\n0\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The sun is shining. I love this weather.!?')\n1\n>>> is_bored('The\
    \ sky is blue. The ", "\n  S <- unlist(strsplit(S, split='[.?!]'))\n  sum(grepl('I',\
    \ S))\n}\n", "\n  boredoms <- gregexpr(\"[I].*\", S)\n  sum(boredoms > 0)\n}\n\
    </cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- tolower(S)\n  S <- gsub(\"[.!?]\", \" \", S)\n  S <-\
    \ unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n</cell>\n<text>\nRun\
    \ the cell below to test your function.\n\n\n</text>\n<cell>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I\
    \ love this weather\")\n</cell>\n<text>\nFinally, implement a version of the bored\
    \ function that takes in a list of\nsentences and returns a single numeric value.\
    \ The sentence with the highest\nnumber of boredoms should be returned in the\
    \ output.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\
    \\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below to\
    \ test your function\n\n\n</text>\n<cell>", "\n  boredoms <- gregexpr(\"^I\",\
    \ S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  S <- tolower(S)\n\
    \  S <- gsub(\"[.?!]\", \"\", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"\
    ^i\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"\
    [.?!]\", \"\", S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[?!.]\", \"\", S)\n \
    \ S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n\
    \  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n\
    }\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  S\
    \ <- tolower(S)\n  S <- gsub(\"[.?!]\", \"\", S)\n  S <- unlist(strsplit(S, \"\
    \ \"))\n  sum(grepl(\"^i\", S))\n}\n</cell>\n<text>\nRun the cell below to test\
    \ your function.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nFinally, write a function that takes in a body of text and returns the\
    \ percentage of text that is \"bored\".\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split='.|\\\\?|!'))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- 0\n  \n\
    \  for(i in 1:length(S)) {\n    if(grepl(\"^I\", S[i])) {\n      boredoms <- boredoms\
    \ + 1\n    }\n  }\n  \n  return(boredoms)\n}\n", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
