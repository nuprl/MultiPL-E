name: HumanEval_101_words_string
language: r
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return a vector of the words.\n\
  # For example:\n# >>> words_string('Hi, my name is John')\n# c('Hi', 'my', 'name',\
  \ 'is', 'John')\n# >>> words_string('One, two, three, four, five, six')\n# c('One',\
  \ 'two', 'three', 'four', 'five', 'six')\nwords_string <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- words_string\n    if(!identical(candidate('Hi,\
  \ my name is John'), c('Hi', 'my', 'name', 'is', 'John'))){quit('no', 1)}\n    if(!identical(candidate('One,\
  \ two, three, four, five, six'), c('One', 'two', 'three', 'four', 'five', 'six'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('Hi, my name'), c('Hi', 'my', 'name'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('One,, two, three, four, five, six,'), c('One',\
  \ 'two', 'three', 'four', 'five', 'six'))){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate('ahmed     , gamal'), c('ahmed',\
  \ 'gamal'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>", "\n  strsplit(s, ',|\\\\s+')\n}\n", "\n  strsplit(s,\
    \ ', | ')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the length\
    \ of each word. For example:", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\\
    s')\n}\n", "\n  strsplit(s, \", \")\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ', | ')\n}\n", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s, ' ')[[1]]\n}\n</cell>\n<cell>",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n \
    \ strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\\
    s')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\n\
    words_string('One, two, three, four, five, six')\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name\
    \ is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of words and returns\
    \ a vector where each word has been capitalized.\n\n\n</text>\n<cell>", "\n  strsplit(s,\
    \ ', | ')\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise: Write a function that takes a vector of words\
    \ and returns a vector of the lengths of the words.\n\n\n</text>\n<cell>", "\n\
    \  strsplit(s, ',|\\\\s+')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n\
    \  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s+')\n}\n", "\n  strsplit(s, ',|\\\\s+')\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise: Write a function that takes a vector of words\
    \ and returns a vector of the lengths of each word. For example:", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>\n\
    words_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One, two,\
    \ three, four, five, six')\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of words and returns a vector of the lengths of each word. For example:\n\
    \n>>> words_lengths(c('Hi', 'my', 'name', 'is', 'John'))\nc(1, 2, 3, 4, 5, 6)\n\
    \n</text>\n<cell>\nwords_lengths <- function(w) {\n  lengths(w)\n}\n</cell>\n\
    <cell>\nwords_lengths(words_string('Hi, my name is John'))\n</cell>\n<cell>\n\
    words_lengths(words_string('One, two, three, four, five, six'))\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of words and returns a vector of\
    \ the number of times each word appears in the input vector. For example:\n\n\
    >>> words_counts(c('Hi', 'my', 'name', 'is', 'John'))\nc(1, 1, 2, 3, 4, 5)\n\n\
    </text>\n<cell>\nwords_counts <- function(w) {\n  table(w)\n}\n</cell>\n<cell>\n\
    words_counts(words_string('Hi, my name is John'))\n</cell>\n<cell>\nwords_counts(words_string('One,\
    \ two, three, four, five, six'))\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of words and returns a vector of the number of times each\
    \ word appears in the input vector. For example:\n\n>>> words_counts(c('Hi', 'my',\
    \ 'name', 'is', 'John'))\nc(1, 1, 2, 3, 4, 5)\n\n</text>\n<cell>\nwords_counts\
    \ <- function(w) {\n  table(w)\n}\n</cell>\n<cell>\nwords_counts(words_string('Hi,\
    \ my name is John'))\n</cell>\n<cell>\nwords_counts(words_string('One, two, three,\
    \ four, five, six'))\n</cell>\n<text>\nExercise\nWrite a function that takes a\
    \ vector of words and returns a vector of the number of times each word appears\
    \ in the input vector. For example:\n\n>>> words_counts(c('Hi', 'my', 'name',\
    \ 'is', 'John'))\nc(1, 1, 2, 3, 4, 5)\n\n</text>\n<cell>\nwords_counts <- function(w)\
    \ {\n  table(w)\n}\n</cell>\n<cell>\nwords_counts(words_string('Hi, my name is\
    \ John'))\n</cell>\n<cell>\nwords_counts(words_string('One, two", "\n  strsplit(s,\
    \ ',|\\\\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
