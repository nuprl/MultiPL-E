name: HumanEval_101_words_string
language: r
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return a vector of the words.\n\
  # For example:\n# >>> words_string('Hi, my name is John')\n# c('Hi', 'my', 'name',\
  \ 'is', 'John')\n# >>> words_string('One, two, three, four, five, six')\n# c('One',\
  \ 'two', 'three', 'four', 'five', 'six')\nwords_string <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- words_string\n    if(!identical(candidate('Hi,\
  \ my name is John'), c('Hi', 'my', 'name', 'is', 'John'))){quit('no', 1)}\n    if(!identical(candidate('One,\
  \ two, three, four, five, six'), c('One', 'two', 'three', 'four', 'five', 'six'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('Hi, my name'), c('Hi', 'my', 'name'))){quit('no',\
  \ 1)}\n    if(!identical(candidate('One,, two, three, four, five, six,'), c('One',\
  \ 'two', 'three', 'four', 'five', 'six'))){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ c())){quit('no', 1)}\n    if(!identical(candidate('ahmed     , gamal'), c('ahmed',\
  \ 'gamal'))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>", "\n  strsplit(s, ',|\\\\s+')\n}\n", "\n  strsplit(s,\
    \ ', | ')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the length\
    \ of each word. For example:", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\\
    s')\n}\n", "\n  strsplit(s, \", \")\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ', | ')\n}\n", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s, ' ')[[1]]\n}\n</cell>\n<cell>",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n \
    \ strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\\
    s')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\n\
    words_string('One, two, three, four, five, six')\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name\
    \ is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of words and returns\
    \ a vector where each word has been capitalized.\n\n\n</text>\n<cell>", "\n  strsplit(s,\
    \ ', | ')\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise: Write a function that takes a vector of words\
    \ and returns a vector of the lengths of the words.\n\n\n</text>\n<cell>", "\n\
    \  strsplit(s, ',|\\\\s+')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n\
    \  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s+')\n}\n", "\n  strsplit(s, ',|\\\\s+')\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise: Write a function that takes a vector of words\
    \ and returns a vector of the lengths of each word. For example:", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>\n\
    words_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One, two,\
    \ three, four, five, six')\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of words and returns a vector of the lengths of each word. For example:\n\
    \n>>> words_lengths(c('Hi', 'my', 'name', 'is', 'John'))\nc(1, 2, 3, 4, 5, 6)\n\
    \n</text>\n<cell>\nwords_lengths <- function(w) {\n  lengths(w)\n}\n</cell>\n\
    <cell>\nwords_lengths(words_string('Hi, my name is John'))\n</cell>\n<cell>\n\
    words_lengths(words_string('One, two, three, four, five, six'))\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of words and returns a vector of\
    \ the number of times each word appears in the input vector. For example:\n\n\
    >>> words_counts(c('Hi', 'my', 'name', 'is', 'John'))\nc(1, 1, 2, 3, 4, 5)\n\n\
    </text>\n<cell>\nwords_counts <- function(w) {\n  table(w)\n}\n</cell>\n<cell>\n\
    words_counts(words_string('Hi, my name is John'))\n</cell>\n<cell>\nwords_counts(words_string('One,\
    \ two, three, four, five, six'))\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of words and returns a vector of the number of times each\
    \ word appears in the input vector. For example:\n\n>>> words_counts(c('Hi', 'my',\
    \ 'name', 'is', 'John'))\nc(1, 1, 2, 3, 4, 5)\n\n</text>\n<cell>\nwords_counts\
    \ <- function(w) {\n  table(w)\n}\n</cell>\n<cell>\nwords_counts(words_string('Hi,\
    \ my name is John'))\n</cell>\n<cell>\nwords_counts(words_string('One, two, three,\
    \ four, five, six'))\n</cell>\n<text>\nExercise\nWrite a function that takes a\
    \ vector of words and returns a vector of the number of times each word appears\
    \ in the input vector. For example:\n\n>>> words_counts(c('Hi', 'my', 'name',\
    \ 'is', 'John'))\nc(1, 1, 2, 3, 4, 5)\n\n</text>\n<cell>\nwords_counts <- function(w)\
    \ {\n  table(w)\n}\n</cell>\n<cell>\nwords_counts(words_string('Hi, my name is\
    \ John'))\n</cell>\n<cell>\nwords_counts(words_string('One, two", "\n  strsplit(s,\
    \ ',|\\\\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n\
    </cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of words and returns a vector of the length of each word. For\
    \ example:", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n\
    \  strsplit(s, ',|\\\\s+')\n}\n", "\n  strsplit(s, ', | ')\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ words and returns a vector of the length of each word. For example:", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the length\
    \ of each word in the vector.\n\n</text>\n<cell>", "\n  strsplit(s, ' ')\n}\n",
  "\n  strsplit(s, ' ')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n\
    </cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of words and returns a vector of\
    \ the length of each word. For example:", "\n  strsplit(s, ' ')[[1]]\n}\n</cell>\n\
    <cell>", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n\
    \  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n\
    </cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of words and returns a vector of\
    \ the length of each word. For example:", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n\
    \  strsplit(s, ',\\\\s*')\n}\n", "\n  strsplit(s, \", \")[[1]]\n}\n", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the lengths\
    \ of each word. E.g.\n\nc('Hi', 'my', 'name', 'is', 'John') => c(5, 3, 7, 4, 6,\
    \ 1)\nc('One', 'two', 'three', 'four', 'five', 'six') => c(6, 5, 7, 4, 6, 1)\n\
    c('One', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine') => c(6,\
    \ 5, 7, 4, 6, 1, 7, 8, 6, 1)\nc('One', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine', 'ten') => c(6, 5, 7, 4, 6, 1, 7, 8, 6, 1, 10)\nc('One',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven')\
    \ => c(6, 5, 7, 4, 6, 1, 7, 8, 6, 1, 10, 11)\nc('One', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve') => c(6,\
    \ 5, 7, 4, 6, 1, 7, 8, 6, 1, 10, 11, 12)\nc('One', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen') => c(6,\
    \ 5, 7, 4, 6, 1, 7, 8, 6, 1, 10, 11, 12, 13)\nc('One', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen',\
    \ 'fourteen') => c(6, 5, 7, 4, 6, 1, 7, 8, 6, 1, 10, 11, 12, 13, 14)\nc('One',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven',\
    \ 'twelve', 'thirteen', 'fourteen', 'fifteen') => c(6, 5, 7, 4, 6, 1, 7, 8, 6,\
    \ 1, 10, 11, 12, 13, 14, 15)\nc('One', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen',\
    \ 'fifteen', 'sixteen') => c(6, 5, ", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n\
    <cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of words and returns a vector of the length of each word.\n\n\
    The function should ignore capitalization and punctuation.\n\nThe function should\
    \ ignore empty words.\n\nThe function should ignore words that are only one character\
    \ long.\n\nThe function should ignore words that are longer than one character.\n\
    \nThe function should ignore words that are longer than two characters.\n\nThe\
    \ function should ignore words that are longer than three characters.\n\nThe function\
    \ should ignore words that are longer than four characters.\n\nThe function should\
    \ ignore words that are longer than five characters.\n\nThe function should ignore\
    \ words that are longer than six characters.\n\nThe function should ignore words\
    \ that are longer than seven characters.\n\nThe function should ignore words that\
    \ are longer than eight characters.\n\nThe function should ignore words that are\
    \ longer than nine characters.\n\nThe function should ignore words that are longer\
    \ than ten characters.\n\nThe function should ignore words that are longer than\
    \ eleven characters.\n\nThe function should ignore words that are longer than\
    \ twelve characters.\n\nThe function should ignore words that are longer than\
    \ thirteen characters.\n\nThe function should ignore words that are longer than\
    \ fourteen characters.\n\nThe function should ignore words that are longer than\
    \ fifteen characters.\n\nThe function should ignore words that are longer than\
    \ sixteen characters.\n\nThe function should ignore words that are longer than\
    \ seventeen characters.\n\nThe function should ignore words that are longer than\
    \ eighteen characters.\n\nThe function should ignore words that are longer than\
    \ nineteen characters.\n\nThe function should ignore words that are longer than\
    \ twenty characters.\n\nThe function should ignore words that are longer than\
    \ twenty-one characters.\n\nThe function should ignore words that are longer than\
    \ twenty-two characters.\n\nThe function should ignore words that are longer than\
    \ twenty-three characters.\n\nThe function should ignore words that are longer\
    \ than twenty-four characters.\n\nThe function should ignore words that are longer\
    \ than twenty-five characters.\n\nThe function should ignore words that are longer\
    \ than twenty-six characters.\n\nThe function should ignore words that are longer\
    \ than twenty-seven characters.\n\nThe function should ignore words that are longer\
    \ than twenty-eight characters.\n\nThe function should ignore words that are longer\
    \ than twenty-nine characters.\n\nThe function should ignore words that are longer\
    \ than twenty-ten characters.\n\nThe function should ignore words that are longer\
    \ than twenty-eleven ", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s+')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n\
    \  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s+')\n}\n", "\n\
    \  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the lengths\
    \ of each word. For example:", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ', | ')\n}\n", "\n  strsplit(s, ' ')[[1]]\n\
    }\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n",
  "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ', | ')\n}\n", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\\
    s+')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\n\
    words_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a vector of words and returns a vector of the lengths\
    \ of each word. For example:", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the length\
    \ of each word. For example:", "\n  strsplit(s, ',\\\\s*')\n}\n", "\n  strsplit(s,\
    \ ', | ')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<cell>", "\n\
    \  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n",
  "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, '\
    \ ')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the lengths\
    \ of each word. For example:", "\n  strsplit(s, ', | ')\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of words and returns a vector of the\
    \ lengths of those words.\n\n\n</text>\n<cell>", "\n  strsplit(s, ',\\\\s*')\n\
    }\n", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>\nwords_string('Hi, my name\
    \ is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n\
    </cell>\n<cell>", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\\
    s')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\n\
    words_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of words and returns a vector of the length\
    \ of each word in the vector.\nFor example, words_vector('Hi, my name is John')\
    \ should return a vector c(5, 3, 7, 5, 3, 1)\n\n\n</text>\n<cell>\nwords_vector\
    \ <- function(s) {\n  strsplit(s, ',|\\\\s')[[1]]\n}\n</cell>\n<cell>\nwords_vector('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_vector('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of words\
    \ and returns a vector of the length of each word in the vector.\nFor example,\
    \ words_vector('Hi, my name is John') should return a vector c(5, 3, 7, 5, 3,\
    \ 1)\n\n\n</text>\n<cell>\nwords_vector <- function(s) {\n  strsplit(s, ',|\\\\\
    s')[[1]]\n}\n</cell>\n<cell>\nwords_vector('Hi, my name is John')\n</cell>\n<cell>\n\
    words_vector('One, two, three, four, five, six')\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of words and returns a vector of the length\
    \ of each word in the vector.\nFor example, words_vector('Hi, my name is John')\
    \ should return a vector c(5, 3, 7, 5, 3, 1)\n\n\n</text>\n<cell>\nwords_vector\
    \ <- function(s) {\n  strsplit(s, ',|\\\\s')[[1]]\n}\n</cell>\n<cell>\nwords_vector('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_vector('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of words\
    \ and returns a vector of the length of each word in the vector.\nFor example,\
    \ words_vector('Hi, my name is John') should return a vector c(5, 3, 7, 5, 3,\
    \ 1)\n\n\n</text>\n<cell>\nwords_vector <- function(s) {\n  strsplit(s, ',|\\\\\
    s')[[1]]\n}\n</cell>\n<cell>\nwords_vector('Hi, my name is John')\n</cell>\n<cell>\n\
    words_vector('One, two, three, four, five, six')\n</cell>\n<text>\nExercise",
  "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s+')\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',\\\
    \\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ words and returns a vector of the length of each word. For example:", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n</cell>\n<cell>", "\n\
    \  strsplit(s, ',\\\\s*')\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n\
    <cell>", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n",
  "\n  strsplit(s, ',|\\\\s+')\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n</cell>\n<cell>\n\
    words_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One, two,\
    \ three, four, five, six')\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of words and returns a vector of counts of the number of times each\
    \ word appears in the input vector.\n\n\n</text>\n<cell>", "\n  strsplit(s, ',|\\\
    \\s')\n}\n</cell>\n<cell>", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s,\
    \ \", \")[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the length\
    \ of each word. For example:", "\n  strsplit(s, ',|\\\\s+')\n}\n", "\n  strsplit(s,\
    \ \", | \")\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three,\
    \ four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three,\
    \ four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three,\
    \ four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three,\
    \ four, five, six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',\\\\\
    s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\
    \\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',\\\\\
    s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s+')\n}\n", "\n  strsplit(s, ' ')[[1]]\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n",
  "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n\
    </cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of words and returns a vector of\
    \ the lengths of each word. E.g.\n\nc('Hi', 'my', 'name', 'is', 'John') => c(5,\
    \ 3, 6, 4, 1, 5)\nc('One', 'two', 'three', 'four', 'five', 'six') => c(6, 6, 6,\
    \ 6, 6, 6)\nHint: use lengths.\n\n\n</text>\n<cell>", "\n  strsplit(s, ',\\\\\
    s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')\n}\n", "\n  strsplit(s, ',\\\\\
    s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of words\
    \ and returns a vector of numbers. Each number represents the number of times\
    \ the word appears in the original vector.\n\nFor example, if the input vector\
    \ is c('Hi', 'my', 'name', 'is', 'John'), then the output vector should be c(0,\
    \ 1, 3, 1, 2, 1).\n\nHint: You may want to use the table function.\n\n\n</text>\n\
    <cell>", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n\
    <cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise: Write a function that\
    \ returns a vector of the words in the sentence \"Hi, my name is John\".\n\n\n\
    </text>\n<cell>", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise: Write a function that takes a vector of words\
    \ and returns a vector of the length of each word. For example:\n\nc('Hi', 'my',\
    \ 'name', 'is', 'John') => c(5, 3, 7, 5, 3, 1)\nc('One', 'two', 'three', 'four',\
    \ 'five', 'six') => c(6, 4, 6, 4, 6, 4)\nHint: use length().\n\n\n</text>\n<cell>",
  "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name\
    \ is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five, six')\n\
    </cell>\n<cell>", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n\
    }\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi,\
    \ my name is John')\n</cell>\n<cell>\nwords_string('One, two, three, four, five,\
    \ six')\n</cell>\n<text>\nExercise: Write a function that takes a vector of words\
    \ and returns a vector of the lengths of each word. For example:", "\n  strsplit(s,\
    \ ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\
    \\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s, ',\\\\s*')\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\
    \\s*')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n\
    \  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n\
    <cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of words and returns a vector of the lengths of each word.\
    \ For example:\n>>> word_lengths(c('Hi', 'my', 'name', 'is', 'John'))\nc('Hi'=1,\
    \ 'my'=3, 'name'=3, 'is'=3, 'John'=3)\n>>> word_lengths(c('One', 'two', 'three',\
    \ 'four', 'five', 'six'))\nc('One'=6, 'two'=6, 'three'=6, 'four'=6, 'five'=6,\
    \ 'six'=6)\nHint: use sapply and lengths.\n\n\n</text>\n<cell>\nword_lengths <-\
    \ function(x) {\n  sapply(x, length)\n}\n</cell>\n<cell>\nword_lengths(c('Hi',\
    \ 'my', 'name', 'is', 'John'))\n</cell>\n<cell>\nword_lengths(c('One', 'two',\
    \ 'three', 'four', 'five', 'six'))\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of words and returns a vector of the number of times each\
    \ word appears in the input vector. For example:\n>>> word_counts(c('Hi', 'my',\
    \ 'name', 'is', 'John'))\nc('Hi'=1, 'my'=3, 'name'=3, 'is'=3, 'John'=3)\n>>> word_counts(c('One',\
    \ 'two', 'three', 'four', 'five', 'six'))\nc('One'=1, 'two'=2, 'three'=3, 'four'=4,\
    \ 'five'=5, 'six'=6)\nHint: use table and count.\n\n\n</text>\n<cell>\nword_counts\
    \ <- function(x) {\n  table(x)\n}\n</cell>\n<cell>\nword_counts(c('Hi', 'my',\
    \ 'name', 'is', 'John'))\n</cell>\n<cell>\nword_counts(c('One', 'two', 'three',\
    \ 'four', 'five', 'six'))\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of words and returns a vector of the number of times each word\
    \ appears in the input vector. For example:\n>>> word_counts(c('Hi', 'my', 'name',\
    \ 'is', 'John'))\nc('Hi'=1, 'my'=3, 'name'=3, 'is'=3, 'John'=3)\n>>> word_counts(c('One",
  "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s, ' ')[[1]]\n}\n\
    </cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of words and returns a vector of the lengths of each word. For\
    \ example:\nc('Hi', 'my', 'name', 'is', 'John') => c(5, 3, 6, 1, 5, 3)\n\n</text>\n\
    <cell>", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, \", \")\n}\n</cell>\n\
    <cell>", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s')\n\
    }\n", "\n  strsplit(s, ',|\\\\s+')\n}\n</cell>\n<cell>", "\n  strsplit(s, ',|\\\
    \\s')\n}\n</cell>\n<cell>", "\n  strsplit(s, \", \")[[1]]\n}\n</cell>\n<cell>",
  "\n  strsplit(s, ' ')[[1]]\n}\n", "\n  strsplit(s, ',|\\\\s+')[[1]]\n}\n</cell>\n\
    <cell>\nwords_string('Hi, my name is John')\n</cell>\n<cell>\nwords_string('One,\
    \ two, three, four, five, six')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of words and returns a vector of the lengths of each word. For\
    \ example:", "\n  strsplit(s, ',|\\\\s')\n}\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the length\
    \ of each word. For example:", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n", "\n  strsplit(s,\
    \ ',|\\\\s')\n}\n", "\n  strsplit(s, ',|\\\\s')\n}\n", "\n  strsplit(s, ',\\\\\
    s*')\n}\n", "\n  strsplit(s, ',\\\\s*')[[1]]\n}\n</cell>\n<cell>", "\n  strsplit(s,\
    \ ',\\\\s*')[[1]]\n}\n</cell>\n<cell>\nwords_string('Hi, my name is John')\n</cell>\n\
    <cell>\nwords_string('One, two, three, four, five, six')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of words and returns a vector of the length\
    \ of each word. For example:"]
stop_tokens:
- "\n#"
- "\n```"
