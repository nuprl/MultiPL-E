name: HumanEval_55_fib
language: r
prompt: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n\
  # >>> fib(8)\n# 21\nfib <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- fib\n    if(!identical(candidate(10),\
  \ 55)){quit('no', 1)}\n    if(!identical(candidate(1), 1)){quit('no', 1)}\n    if(!identical(candidate(8),\
  \ 21)){quit('no', 1)}\n    if(!identical(candidate(11), 89)){quit('no', 1)}\n  \
  \  if(!identical(candidate(12), 144)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must be non-negative\"\
    )\n  if (n == 0) 1\n  if (n == 1) 1\n  else fib(n-1) + fib(n-2)\n}\n", "\n  n\
    \ <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n - 1) +\
    \ fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do this without recursion.\n<|/ c |>\n<| c |>\n\
    : I added a non-recursive solution.\n<|/ c |>\n<| a dscore=1 |>\nA recursive solution\
    \ would be:\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n == 2) 1\n\
    \  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) 1\n  else if(n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ 1\n  else if(n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n == 2)\
    \ 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 tags=r,recursion,fibonacci\
    \ |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n\
    \ == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) 1\n  else if(n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ 1\n  else if(n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a dscore=1 |>\n<code>\nfib ", "\n  n <- as.integer(n)\n  if (n <= 1)\
    \ 1\n  else if (n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the nth Fibonacci number using recursion.\n\n\n\
    </text>\n<cell>", "\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must be non-negative\"\
    )\n  else if (n == 0) 1\n  else if (n == 1) 1\n  else fib(n-1) + fib(n-2)\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to avoid the recursion. I'm thinking about a recursive function which\
    \ calls itself until it reaches a base case, then returns the result of the recursive\
    \ call. Does that make sense?\n<|/ c |>\n<| c |>\n: Yes, that makes sense. That's\
    \ what I was thinking about when I wrote the answer. I'll add an answer with that\
    \ approach.\n<|/ c |>\n<| c |>\n: I added an answer with that approach.\n<|/ c\
    \ |>\n<| a tags=r,recursion,fibonacci |>\nHere's a solution using RcppAlgos::fibonacci:\n\
    <code>\nlibrary(RcppAlgos)\n\nfibonacci <- function(n) {\n  stopifnot(n >= 0)\n\
    \  RcppAlgos::fibonacci(n)\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should\
    \ be the accepted answer. RcppAlgos is a very useful package for R. Thanks!\n\
    <|/ c |>\n<| a dscore=4 |>\nHere's a recursive solution that uses memoization:\n\
    <code>\nfib <- function(n) {\n  fib.cache <- vector(mode = \"numeric\", length\
    \ = n)\n  fib.cache[1] <- 1\n  fib.cache[2] <- 1\n  fib.cache <- fib.cache[-n]\n\
    \  return(fib.cache[n])\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| c\
    \ |>\nThis solution is very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ solution is very elegant and simple. Thanks!\n<|/ c |>\n<| c |>\nThis solution\
    \ is very elegant and simple. Thanks!\n<|/ c |>\n<| a dscore=4 |>\nHere's a recursive\
    \ solution that uses memoization:\n<code>\nfib <- function(n) {\n  fib.cache <-\
    \ vector(mode = \"numeric\", length = n)\n  fib.cache[1] <- 1\n  fib.cache[2]\
    \ <- 1\n  fib.cache <- fib.cache[-n]\n  return(fib.cache", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<text>\nThe fibonacci function above is\
    \ recursive. Recursive functions are a powerful tool in programming, and are often\
    \ the most efficient way to solve a problem. Recursive functions can often be\
    \ written more concisely than iterative functions. Let's see how we can write\
    \ the same function iteratively.\n\n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the first n Fibonacci numbers. Use recursion.\n\
    \n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 1) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n\
    \  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis is not the most efficient solution, since it requires two\
    \ recursive calls per iteration. An iterative solution would require only a single\
    \ recursive call.\n<|/ c |>\n<| c |>\nI agree, but I thought the OP was interested\
    \ in an iterative solution. Anyway, I added an iterative solution.\n<|/ c |>\n\
    <| c |>\nI added an iterative solution as well, just in case someone is interested.\n\
    <|/ c |>\n<| c |>\nI added an iterative solution as well, just in case someone\
    \ is interested.\n<|/ c |>\n<| a dscore=3 |>\nHere is a recursive solution:\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</code>\n<|/ a tags=recursion,r |>\n<| c |>\nThis is not the\
    \ most efficient solution, since it requires two recursive calls per iteration.\
    \ An iterative solution would require only a single recursive call.\n<|/ c |>\n\
    <| c |>\nI agree, but I thought the OP was interested in an iterative solution.\
    \ Anyway, I added an iterative solution.\n<|/ c |>\n<| a tags=recursion,r |>\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=3 tags=recursion,r |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a\
    \ tags=recursion,r dscore=3 |>\n<| a tags=recursion,r |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/", "\n  n <- as.integer(n)\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n\
    </cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n\
    <cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n  n <-\
    \ as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</cell>\n<cell>", "\n  if (n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n\
    <cell>", "\n  n <- n + 1\n  if (n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n  n <- n + 1\n  if\
    \ (n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| c |>\nThis doesn't seem to work. `fib(10)` returns `55` instead of `5500`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I guess you didn't copy the code\
    \ correctly. Try `fib(10)` again.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for your\
    \ help!\n<|/ c |>\n<| c |>\nThis doesn't work for me. `fib(10)` returns `55` instead\
    \ of `5500`.\n<|/ c |>\n<| c |>\nI tested it again and it works. I guess you didn't\
    \ copy the code correctly. Try `fib(10)` again.\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work. `fib(10)`\
    \ returns `55` instead of `5500`.\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `fib(10)` returns `55` instead of `5500`.\n<|/ c |>\n<| a |>\n<code>\nfib <-\
    \ function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=5 tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't seem to work.\
    \ `fib(10)` returns `55` instead of `5500`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `fib(10)` returns `55` instead of `5500`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `fib(10)` returns `55` instead of `5500`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't\
    \ seem to work. `fib(10)` returns `55", "\n  if(n <= 1) return(n)\n  fib(n - 1)\
    \ + fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(8)\n</cell>\n\
    <text>\nThe function fib is recursive, meaning it calls itself over and over again.\
    \ Let's see how it works:\n\n\n</text>\n<cell>\nfib(10)\n</cell>\n<text>\nThe\
    \ function calls itself twice (fib(10) and fib(8)), which means it calls itself\
    \ over and over again, until it reaches the base case (when n <= 1). At that point,\
    \ it stops recursing and returns the value it calculated (55).\n\nThe base case\
    \ is when the function calls itself with n <= 1. In this case, the function returns\
    \ n (the argument) instead of calling itself again. Let's see how that works:\n\
    \n\n</text>\n<cell>\nfib(8)\n</cell>\n<text>\nThe function calls itself twice\
    \ (fib(8) and fib(2)), which means it calls itself over and over again, until\
    \ it reaches the base case (when n <= 1). At that point, it stops recursing and\
    \ returns the value it calculated (21). Again, the base case is when n <= 1.\n\
    \nThe base case is when n <= 1. In this case, the function returns n (the argument)\
    \ instead of calling itself again. Let's see how that works:\n\n\n</text>\n<cell>\n\
    fib(2)\n</cell>\n<text>\nThe function calls itself twice (fib(2) and fib(1)),\
    \ which means it calls itself over and over again, until it reaches the base case\
    \ (when n <= 1). At that point, it stops recursing and returns the value it calculated\
    \ (1).\n\nThe base case is when n <= 1. In this case, the function returns n (the\
    \ argument) instead of calling itself again. Let's see how that works:\n\n\n</text>\n\
    <cell>\nfib(1)\n</cell>\n<text>\nThe function calls itself twice (fib(1) and fib(0)),\
    \ which means it calls itself over and over again, until it reaches the base case\
    \ (when n <= 1). At that point, it stops recursing and returns the value it calculated\
    \ (0).\n\nThe base case is when n <= 1. In this case, the function returns n (the\
    \ argument) instead of calling itself again. Let's see how that works:\n\n\n</text>\n\
    <cell>\nfib(0)\n</cell>\n<text>\nThe function calls itself twice (fib(0) and fib(-1)),\
    \ which means it ", "\n  if(n <= 1) return(1)\n  else return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<text>\nThe fibonacci sequence is defined by the recurrence relation:\n\
    \n$$ Fn = F{n-1} + F_{n-2} $$\n\nwhere $F_0=1$ and $F_1=2$.\n\nWrite a function\
    \ that computes the n-th number in the Fibonacci sequence. The function should\
    \ take in a number n and return the nth number in the Fibonacci sequence. Test\
    \ your function with several inputs to make sure it returns the correct sequence.\n\
    \n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if (n == 0 || n == 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    The `return` statement is redundant and can be omitted. Also, `fib` can be defined\
    \ as `fib <- function(n) if (n == 0 || n == 1) n else fib(n-1) + fib(n-2)`.\n\
    <|/ c |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/ c\
    \ |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/ c |>\n\
    <| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/ c |>\n<| a\
    \ tags=recursion,r,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=recursion,r,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=recursion,r,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  else return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a\
    \ tags=recursion,r,fibonacci dscore=3 |>\n<| a tags=recursion,r,fibonacci |>\n\
    <code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  else return(fib(n-1) +\
    \ fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=recursion,r,fibonacci |>\n\
    <code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  else return(fib(n", "\n\
    \  n <- as.integer(n)\n  if (n <= 0) stop(\"n must be positive\")\n  if (n <=\
    \ 1) 1\n  else fib(n-1) + fib(n-2)\n}\n", "\n  n <- as.integer(n)\n  if (n <=\
    \ 1) 1\n  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThis was the fastest solution for me. Thanks!\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis was\
    \ the fastest solution for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the fastest\
    \ solution for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the fastest solution for\
    \ me. Thanks!\n<|/ c |>\n<| c |>\nThis was the fastest solution for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis was the fastest solution for me. Thanks!\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <=\
    \ 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThis was the fastest solution for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This was the fastest solution for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the\
    \ fastest solution for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the fastest solution\
    \ for me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n){\n \
    \ if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis was the fastest\
    \ solution for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the fastest solution for\
    \ me. Thanks!\n<|/", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n ==\
    \ 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nA recursive solution:\n<code>\nfib <- function(n){\n  if(n == 1) return(1)\n\
    \  if(n == 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=recursion,r\
    \ |>\n<| a dscore=2 |>\nA recursive solution:\n<code>\nfib <- function(n){\n \
    \ if(n == 1) return(1)\n  if(n == 2) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a tags=recursion,r |>\n<| a tags=recursion,r |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=recursion,r |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <-\
    \ function(n){\n  if(n == 1) return(1)\n  if(n == 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=recursion,r |>\n<| a dscore=2 |>\n<code>\n\
    fib <- function(n){\n  if(n == 1) return(1)\n  if(n == 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=recursion,r |>\n<| a dscore=2 |>\n<code>\n\
    fib <- function(n){\n  if(n == 1) return(1)\n  if(n == 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=recursion,r |>\n<| a tags=recursion,r |>\n\
    <code>\nfib <- function(n){\n  if(n == 1) return(1)\n  if(n == 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a d", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to know why his code doesn't work, not how to fix it.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the question was \"why doesn't this work?\"\
    \ and the answer is \"because you didn't implement it correctly\". I think my\
    \ answer is an answer to that question. Maybe I should rephrase my answer.\n<|/\
    \ c |>\n<| c |>\nI agree with you that your answer answers the question, but I\
    \ think it would be better if you explained why you think it works. You haven't\
    \ explained why you think it works.\n<|/ c |>\n<| c |>\nI agree with you that\
    \ your answer answers the question, but I think it would be better if you explained\
    \ why you think it works. You haven't explained why you think it works.\n<|/ c\
    \ |>\n<| c |>\nI agree with you that your answer answers the question, but I think\
    \ it would be better if you explained why you think it works. You haven't explained\
    \ why you think it works.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\nThe reason\
    \ your code doesn't work is that you are not returning the result of the recursive\
    \ calls. Try this instead:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  return(fib(n - 1) + fib(n - 2))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to know why his code doesn't work, not\
    \ how to fix it.\n<|/ c |>\n<| c |>\nI agree with you. But the question was \"\
    why doesn't this work?\" and the answer is \"because you didn't implement it correctly\"\
    . I think my answer is an answer to that question. Maybe I should rephrase my\
    \ answer.\n<|/ c |>\n<| c |>\nI agree with you that your answer answers the question,\
    \ but I think it would be better if you explained why you think it works. You\
    \ haven't explained why you think it works.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that your answer answers the question, but I think it would be better if you\
    \ explained why you think it works. You haven't explained why you think it works.\n\
    <|/ c |>\n<| ", "\n  n <- as.integer(n)\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n", "\n  n <- n + 1\n  if (n == 1) return(1)\n  if (n == 2) return(2)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) +\
    \ fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<text>\nThe Fibonacci sequence\
    \ is defined by the recurrence relation:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0\
    \ = 0$ and $F_1 = 1$. More generally:\n\n$Fn = F{n-1} + F_{n-2} + \\cdots + F_{n-k}$\n\
    \nwhere $F_k = F{k-1} + F_{k-2} + \\cdots + F_{k-2k} + \\cdots + F_{k-2k-1} +\
    \ \\cdots + F_{k-1k-2}$\n\nExample:\n\n$F_0 = 0$ and $F_1 = 1$, so $Fn = F_{n-1}\
    \ + F_{n-2}$\n$F_2 = 2$ and $F_3 = 5$, so $Fn = F_{n-1} + F_{n-2} + F_{n-3}$\n\
    $F_4 = 10$ and $F_5 = 15$, so $Fn = F_{n-1} + F_{n-2} + F_{n-3} + F_{n-4}$\n$F_6\
    \ = 25$ and $F_7 = 21$, so $Fn = F_{n-1} + F_{n-2} + F_{n-3} + F_{n-4} + F_{n-5}$\n\
    $F_8 = 55$ and $F_9 = 89$, so $Fn = F_{n-1} + F_{n-2} + F_{n-3} + F_{n-4} + F_{n-5}\
    \ + F_{n-6}$\n$F_10 = 89$ and $F_11 = 120$, so $Fn = F_{n-1} + F_{n-2} + F_{n-3}\
    \ + F_{n-4} + F_{n-5} + F_{n-6} + F_{n-7}$\n$F_12 = 126$ and $F_13 = 144$, so\
    \ $Fn = F_{n-1} + F_{n-2} + F_{n-3} + F_{n-4} + F_{n-5} + F_{n-6} + F_{n-7} +\
    \ F_{n-8}$\n$F_14 = 144$ and $F_15 = Infinity$, so $Fn = F_{n-1} + F_{n-2} + F_{n-3} ",
  "\n  n <- n + 1\n  if (n < 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| c |>\nThanks for your answer. I am not familiar with R and I thought\
    \ that my code was the most efficient way to solve this problem. Do you think\
    \ my code is inefficient and if so, why?\n<|/ c |>\n<| c |>\nThe code you posted\
    \ is inefficient because it uses recursion to calculate Fibonacci numbers. Recursion\
    \ is inefficient because it uses stack space. Your code uses recursion to calculate\
    \ Fibonacci numbers. Recursion is inefficient because it uses stack space. Your\
    \ code uses recursion to calculate Fibonacci numbers. Recursion is inefficient\
    \ because it uses stack space. Your code uses recursion to calculate Fibonacci\
    \ numbers. Recursion is inefficient because it uses stack space. Your code uses\
    \ recursion to calculate Fibonacci numbers. Recursion is inefficient because it\
    \ uses stack space. Your code uses recursion to calculate Fibonacci numbers. Recursion\
    \ is inefficient because it uses stack space. Your code uses recursion to calculate\
    \ Fibonacci numbers. Recursion is inefficient because it uses stack space. Your\
    \ code uses recursion to calculate Fibonacci numbers. Recursion is inefficient\
    \ because it uses stack space. Your code uses recursion to calculate Fibonacci\
    \ numbers. Recursion is inefficient because it uses stack space. Your code uses\
    \ recursion to calculate Fibonacci numbers. Recursion is inefficient because it\
    \ uses stack space. Your code uses recursion to calculate Fibonacci numbers. Recursion\
    \ is inefficient because it uses stack space. Your code uses recursion to calculate\
    \ Fibonacci numbers. Recursion is inefficient because it uses stack space. Your\
    \ code uses recursion to calculate Fibonacci numbers. Recursion is inefficient\
    \ because it uses stack space. Your code uses recursion to calculate Fibonacci\
    \ numbers. Recursion is inefficient because it uses stack space. Your code uses\
    \ recursion to calculate Fibonacci numbers. Recursion is inefficient because it\
    \ uses stack space. Your code uses recursion to calculate Fibonacci numbers. Recursion\
    \ is inefficient because it uses stack space. Your code uses recursion to calculate\
    \ Fibonacci numbers. Recursion is inefficient because it uses stack space. Your\
    \ code uses recursion to calculate Fibonacci numbers. Recursion is inefficient ",
  "\n  if (n == 1) return(1)\n  if (n == 2) return(2)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a tags=r,function,fibonacci,recursion |>\n<| c |>\nThis doesn't seem\
    \ to answer the question. How does this answer the question? It doesn't explain\
    \ why this works.\n<|/ c |>\n<| c |>\nIt explains how to implement the recursive\
    \ function in R. He asked how to implement the Fibonacci function in R. He didn't\
    \ ask how to implement the recursive function in Python.\n<|/ c |>\n<| c |>\n\
    The question was \"How does this work?\" not \"How does this work?\"\n<|/ c |>\n\
    <| c |>\nThe question was \"How does this work?\" not \"How does this work?\"\n\
    <|/ c |>\n<| c |>\nThe question was \"How does this work?\" not \"How does this\
    \ work?\"\n<|/ c |>\n<| a dscore=5 |>\nThe Fibonacci sequence is defined as:\n\
    <code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597\n\
    </code>\nThe first two terms are 0 and 1, and the next two terms are 1 and 2,\
    \ and so on. \nThe Fibonacci sequence is defined by the following recurrence relation:\n\
    <code>\nF(n) = F(n-1) + F(n-2)\n</code>\nThe first two terms are 0 and 1, and\
    \ the next two terms are 1 and 2, and so on. \nThe Fibonacci sequence is defined\
    \ by the following recurrence relation:\n<code>\nF(n) = F(n-1) + F(n-2)\n</code>\n\
    The first two terms are 0 and 1, and the next two terms are 1 and 2, and so on.\
    \ \nThe Fibonacci sequence is defined by the following recurrence relation:\n\
    <code>\nF(n) = F(n-1) + F(n-2)\n</code>\nThe first two terms are 0 and 1, and\
    \ the next two terms are 1 and 2, and so on. \nThe Fibonacci sequence is defined\
    \ by the following recurrence relation:\n<code>\nF(n) = F(n-1) + F(n-2)\n</code>\n\
    The first two terms are 0 and 1, and the next two terms are 1 and 2, and so on.\
    \ \nThe Fibonacci sequence is defined by the following recurrence relation:\n\
    <code>\nF(n) = F(n-1) + F(n-2)\n</code>", "\n  if(n <= 1) return(n)\n  fib(n -\
    \ 1) + fib(n - 2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it seems to me that\
    \ it is more efficient to calculate fib(n - 1) and fib(n - 2) in one go. Also\
    \ the function does not return anything if n is less than or equal to 1.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. Thanks for pointing that out. I've edited\
    \ my answer accordingly.\n<|/ c |>\n<| c |>\nI like your solution, however it\
    \ seems to me that it is more efficient to calculate fib(n - 1) and fib(n - 2)\
    \ in one go. Also the function does not return anything if n is less than or equal\
    \ to 1.\n<|/ c |>\n<| c |>\nI like your solution, however it seems to me that\
    \ it is more efficient to calculate fib(n - 1) and fib(n - 2) in one go. Also\
    \ the function does not return anything if n is less than or equal to 1.\n<|/\
    \ c |>\n<| c |>\nI like your solution, however it seems to me that it is more\
    \ efficient to calculate fib(n - 1) and fib(n - 2) in one go. Also the function\
    \ does not return anything if n is less than or equal to 1.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a tags=recursion,r,fibonacci |>\n<| c |>\nI like your solution,\
    \ however it seems to me that it is more efficient to calculate fib(n - 1) and\
    \ fib(n - 2) in one go. Also the function does not return anything if n is less\
    \ than or equal to 1.\n<|/ c |>\n<| c |>\nI like your solution, however it seems\
    \ to me that it is more efficient to calculate fib(n - 1) and fib(n - 2) in one\
    \ go. Also the function does not return anything if n is less than or equal to\
    \ 1.\n<|/ c |>\n<| c |>\nI like your solution, however it seems to me that it\
    \ is more efficient to calculate fib(n - 1) and fib(n - 2) in one go. Also the\
    \ function does not return anything if n is less than or equal to 1.\n<|/ c |>\n\
    <| c |>\nI like your solution, however it seems to me that it is more efficient\
    \ to calculate fib(n - 1) and fib(n - 2) in one go. Also the function does not\
    \ return anything if ", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n\
    \ <= 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| c\
    \ |>\nThanks for the answer. I'm still a bit confused though. How would I go about\
    \ implementing this in R? I'm very new to R and am trying to learn as I go along.\n\
    <|/ c |>\n<| c |>\nI added a R solution to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for the answer. I'm still a bit confused though. How would I go\
    \ about implementing this in R? I'm very new to R and am trying to learn as I\
    \ go along.\n<|/ c |>\n<| c |>\nI added a R solution to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for the answer. I'm still a bit confused though. How\
    \ would I go about implementing this in R? I'm very new to R and am trying to\
    \ learn as I go along.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  if(n <= 2) return",
  "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThanks\
    \ so much for this! I really appreciate it!\n<|/ c |>\n<| a dscore=1 |>\nI wrote\
    \ a package that does this for you:\n<code>\nlibrary(Rcpp)\ncppFunction('\nint\
    \ fib(int n) {\n  if (n <= 1) return n;\n  if (n <= 2) return 1;\n  return fib(n\
    \ - 1) + fib(n - 2);\n}')\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a\
    \ tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n) {\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n)\
    \ {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfib <-\
    \ function(n) {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n <= 2) 1\n\
    \  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n) {\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n)\
    \ {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfib <-\
    \ function(n) {\n  n <- as.integer(n)\n  if (n <= 1) 1\n", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe `fib`\
    \ function above is very inefficient. Try running it on `n = 100`.\n<|/ c |>\n\
    <| c |>\nI agree with you, it's just an example to show how to implement recursive\
    \ functions in R. Of course, it's better to use a tail recursive function like\
    \ `fib <- function(n) if (n <= 1) n else fib(n - 1) + fib(n - 2)`\n<|/ c |>\n\
    <| c |>\nI agree with you, it's just an example to show how to implement recursive\
    \ functions in R. Of course, it's better to use a tail recursive function like\
    \ `fib <- function(n) if (n <= 1) n else fib(n - 1) + fib(n - 2)`\n<|/ c |>\n\
    <| c |>\nI agree with you, it's just an example to show how to implement recursive\
    \ functions in R. Of course, it's better to use a tail recursive function like\
    \ `fib <- function(n) if (n <= 1) n else fib(n - 1) + fib(n - 2)`\n<|/ c |>\n\
    <| c |>\nI agree with you, it's just an example to show how to implement recursive\
    \ functions in R. Of course, it's better to use a tail recursive function like\
    \ `fib <- function(n) if (n <= 1) n else fib(n - 1) + fib(n - 2)`\n<|/ c |>\n\
    <| a dscore=5 |>\nThe Fibonacci sequence is defined as:\n<code>\n0, 1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465\n</code>\nThe first few numbers are 0, 1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040,\
    \ 1346269, 2178309, 3524578, 5702887, 9227465\nThe next few numbers are 1, 1,\
    \ 2, 3, 5, 8, 13, 21, ", "\n  if (n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</cell>\n<text>\nExercise: Write a function that returns the n-th Fibonacci\
    \ number using recursion.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  if(n <=\
    \ 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis is an excellent answer, but it's worth noting that this approach\
    \ is O(n^2) in the worst case.  (See my answer for an O(n) solution.)\n<|/ c |>\n\
    <| c |>\nThis answer was very helpful to me. Thank you!\n<|/ c |>\n<| c |>\nThis\
    \ is an excellent answer, but it's worth noting that this approach is O(n^2) in\
    \ the worst case.  (See my answer for an O(n) solution.)\n<|/ c |>\n<| c |>\n\
    The O(n) solution is very elegant. Thank you!\n<|/ c |>\n<| c |>\nThis is an excellent\
    \ answer, but it's worth noting that this approach is O(n^2) in the worst case.\
    \  (See my answer for an O(n) solution.)\n<|/ c |>\n<| a dscore=5 |>\nHere's a\
    \ solution using R's memoization:\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  if(is.null(fib)) fib <- rep(NA_real_, n)\n  fib[n]\n}\n</code>\n\
    <|/ a tags=recursion,r,fibonacci |>\n<| c |>\nThis approach is O(n^2) in the worst\
    \ case.  (See my answer for an O(n) solution.)\n<|/ c |>\n<| c |>\nThis approach\
    \ is O(n^2) in the worst case.  (See my answer for an O(n) solution.)\n<|/ c |>\n\
    <| c |>\nThis approach is O(n^2) in the worst case.  (See my answer for an O(n)\
    \ solution.)\n<|/ c |>\n<| c |>\nThis approach is O(n^2) in the worst case.  (See\
    \ my answer for an O(n) solution.)\n<|/ c |>\n<| c |>\nThis approach is O(n^2)\
    \ in the worst case.  (See my answer for an O(n) solution.)\n<|/ c |>\n<| a tags=recursion,r,fibonacci\
    \ |>\nHere's a solution that uses memoization:\n<code>\nfib <- function(n) {\n\
    \  if(n <= 1) return(n)\n  if(is.null(fib)) ", "\n  if(n <= 1) return(1)\n  if(n\
    \ <= 2) return(1)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nI like this one the best. No need to use any packages.\n<|/ c |>\n\
    <| c |>\nI like this one the best. No need to use any packages.\n<|/ c |>\n<|\
    \ c |>\nI like this one the best. No need to use any packages.\n<|/ c |>\n<| c\
    \ |>\nI like this one the best. No need to use any packages.\n<|/ c |>\n<| c |>\n\
    I like this one the best. No need to use any packages.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| c |>\nI like this one the best. No need to use any packages.\n<|/ c |>\n<|\
    \ c |>\nI like this one the best. No need to use any packages.\n<|/ c |>\n<| c\
    \ |>\nI like this one the best. No need to use any packages.\n<|/ c |>\n<| c |>\n\
    I like this one the best. No need to use any packages.\n<|/ c |>\n<| c |>\nI like\
    \ this one the best. No need to use any packages.\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like\
    \ this one the best. No need to use any packages.\n<|/ c |>\n<| c |>\nI like this\
    \ one the best. No need to use any packages.\n<|/ c |>\n<| c |>\nI like this one\
    \ the best. No need to use any packages.\n<|/ c |>\n<| c |>\nI like this one the\
    \ best. No need to use any packages.\n<|/ c |>\n<| c |>\nI like this one the best.\
    \ No need to use any packages.\n<|/", "\n  if(n <= 1) return(n)\n  fib(n - 1)\
    \ + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `fib(1)`\
    \ returns `1` instead of `1`.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for\
    \ pointing out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n -\
    \ 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=1 |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a dscore=1 |>\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a tags=r,recursion,fibonacci |>\n<| a dscore=1 |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a |>\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) ", "\n  n <- n + 1\n  if (n < 2) 1\n\
    \  else fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(8)\n</cell>\n<cell>\nfib(7)\n</cell>\n<cell>\nfib(6)\n</cell>\n<cell>\nfib(5)\n\
    </cell>\n<cell>\nfib(4)\n</cell>\n<cell>\nfib(3)\n</cell>\n<cell>\nfib(2)\n</cell>\n\
    <cell>\nfib(1)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n", "\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11889774)\n\
    <|/ c |>\n<| c |>\nThe question was how to implement the Fibonacci function in\
    \ R. My answer does exactly that. He asked how to implement the Fibonacci function\
    \ in R. He didn't ask for an explanation of how it works. He asked how to implement\
    \ the Fibonacci function in R. He didn't ask for an explanation of how it works.\
    \ He asked how to implement the Fibonacci function in R. He didn't ask for an\
    \ explanation of how it works. He asked how to implement the Fibonacci function\
    \ in R. He didn't ask for an explanation of how it works. He asked how to implement\
    \ the Fibonacci function in R. He didn't ask for an explanation of how it works.\
    \ He asked how to implement the Fibonacci function in R. He didn't ask for an\
    \ explanation of how it works. He asked how to implement the Fibonacci function\
    \ in R. He didn't ask for an explanation of how it works. He asked how to implement\
    \ the Fibonacci function in R. He didn't ask for an explanation of how it works.\
    \ He asked how to implement the Fibonacci function in R. He didn't ask for an\
    \ explanation of how it works.\n<|/ c |>\n<| c |>\nThe question was how to implement\
    \ the Fibonacci function in R. My answer does exactly that. He asked how to implement\
    \ the Fibonacci function in R. He didn't ask for an explanation of how it works.\
    \ He asked how to implement the Fibonacci function in R. He didn't ask for an\
    \ explanation of how it works. He asked how to implement the Fibonacci function\
    \ in R. He didn't ask for an explanation of how it works. He asked how to implement\
    \ the Fibonacci function in R. He didn't ask for an explanation of how it ", "\n\
    \  n <- as.integer(n)\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe that\
    \ `fib` should be `fib2` since it returns the nth fibonacci number.\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r,fibonacci\
    \ |>\n<| a tags=recursion,r,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r,fibonacci |>\n<| a tags=recursion,r,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r,fibonacci\
    \ |>\n<| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r,fibonacci |>\n\
    <| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r,fibonacci |>\n<| a dscore=1\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a tags=recursion,r,fibon", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThis doesn't work for me. `fib` returns `NULL` when I try to use\
    \ it with `lapply`.\n<|/ c |>\n<| c |>\nIt works for me. `lapply` returns a list.\
    \ `lapply(1:10, fib)` returns `[[1]]\n[1] 1\n[[2]]\n[1] 1\n[[3]]\n[1] 2\n[[4]]\n\
    [1] 3\n[[5]]\n[1] 5\n[[6]]\n[1] 8\n[[7]]\n[1] 13\n[[8]]\n[1] 21\n[[9]]\n[1] 34\n\
    [[10]]\n[1] 55`\n<|/ c |>\n<| c |>\nI guess I misunderstood your question. `lapply`\
    \ returns a list with each element being a Fibonacci number. `lapply(1:10, fib)`\
    \ returns `[[1]]\n[1] 1\n[[2]]\n[1] 1\n[[3]]\n[1] 2\n[[4]]\n[1] 3\n[[5]]\n[1]\
    \ 5\n[[6]]\n[1] 8\n[[7]]\n[1] 13\n[[8]]\n[1] 21\n[[9]]\n[1] 34\n[[10]]\n[1] 55`\n\
    <|/ c |>\n<| c |>\nYes, I see that. My comment was directed at OP.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I'm still trying to understand how it works.\
    \ I understand that `fib` returns `NULL` because `fib` doesn't return anything,\
    \ but I don't understand why `lapply` returns a list with each element being a\
    \ Fibonacci number. How does `lapply` know to return `fib` and not `NULL`?\n<|/\
    \ c |>\n<| a dscore=3 |>\nThe other answers here are great, but I thought I'd\
    \ add my own solution. \n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c\
    \ |>\nThis doesn't work for me. `fib` returns `NULL` when I try to use it with\
    \ `lapply`.\n<|/ c |>\n<| c |>\nIt works for me. `lapply", "\n  if (n == 0) return(0)\n\
    \  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<", "\n  if (n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</cell>\n<cell>", "\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</cell>\n\
    <cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/\
    \ a tags=r,recursion,fibonacci |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to know how to implement the recursive function `fib` without using\
    \ recursion.\n<|/ c |>\n<| c |>\nI believe this answers the question. OP wants\
    \ to know how to implement the recursive function `fib` without using recursion.\n\
    <|/ c |>\n<| c |>\nI believe this answers the question. OP wants to know how to\
    \ implement the recursive function `fib` without using recursion.\n<|/ c |>\n\
    <| c |>\nI believe this answers the question. OP wants to know how to implement\
    \ the recursive function `fib` without using recursion.\n<|/ c |>\n<| c |>\nI\
    \ believe this answers the question. OP wants to know how to implement the recursive\
    \ function `fib` without using recursion.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n == 1) return(1)\n  if(n == 2) return(2)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to know how to implement the recursive function\
    \ `fib` without using recursion.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to know how to implement the recursive function `fib` without using\
    \ recursion.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to\
    \ know how to implement the recursive function `fib` without using recursion.\n\
    <|/ c |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ == 1) return(1)\n  if(n == 2) return(2)\n  return(fib(n-1) + fib(n-2))\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to know how to implement the recursive function `fib` without using recursion.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n){\n  if(n == 1) return(1)\n\
    \  if(n == 2) return(2)\n  return(fib(n-1) + fib(n-2))\n}\n</code>", "\n  n <-\
    \ n + 1\n  if (n < 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be made more efficient.\
    \ For example, how would you go about doing this in O(n) time?\n<|/ c |>\n<| c\
    \ |>\n: I believe this can be done in O(n) time by using a recursive function\
    \ and memoization. I'll post an answer in a few minutes.\n<|/ c |>\n<| c |>\n\
    : I believe this can be done in O(n) time by using a recursive function and memoization.\
    \ I'll post an answer in a few minutes.\n<|/ c |>\n<| c |>\n: I believe this can\
    \ be done in O(n) time by using a recursive function and memoization. I'll post\
    \ an answer in a few minutes.\n<|/ c |>\n<| c |>\n: I believe this can be done\
    \ in O(n) time by using a recursive function and memoization. I'll post an answer\
    \ in a few minutes.\n<|/ c |>\n<| a tags=fibonacci,r,recursion |>\n<code>\nfib\
    \ <- function(n){\n  if(n==0) return(0)\n  if(n==1) return(1)\n  return(fib(n-1)+fib(n-2))\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is not tail recursive.\n<|/ c |>\n\
    <| c |>\n: tail recursion doesn't mean that it's tail recursive. Tail recursion\
    \ means it can be turned into a loop. Tail recursion can be turned into a loop\
    \ if it can be turned into a loop. Tail recursion can be turned into a loop if\
    \ it can be turned into a loop. Tail recursion can be turned into a loop if it\
    \ can be turned into a loop. Tail recursion can be turned into a loop if it can\
    \ be turned into a loop. Tail recursion can be turned into a loop if it can be\
    \ turned into a loop. Tail recursion can be turned into a loop if it can be turned\
    \ into a loop. Tail recursion can be turned into a loop if it can be turned into\
    \ a loop. Tail recursion can be turned into a loop if it can be turned into a\
    \ loop. Tail recursion can be turned into a loop if it can be turned into a loop.\
    \ Tail recursion can be turned into a loop if it can be turned into a loop. Tail\
    \ recursion can be turned into a loop if it can be turned into a loop. Tail recursion\
    \ can be turned into a loop if it can be turned into a ", "\n  if(n <= 1) return(1)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this\
    \ answer because it uses recursion to solve the problem. I'm going to give it\
    \ a try and see how it goes. Thanks!\n<|/ c |>\n<| c |>\nI added a recursive version\
    \ to my answer.\n<|/ c |>\n<| c |>\nI added a recursive version to my answer.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a recursive version:\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(1)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| a dscore=2 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a tags=r,recursion,fibonacci |>\n<| a |>\n<code>\nfib <- function(n) {\n \
    \ if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=2\
    \ tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci |>\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n <=\
    \ 1) return(1)\n  return(fib", "\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n -\
    \ 2)\n}\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about recursion.\n<|/ c |>\n<| c |>\nThe question was\
    \ about recursion.\n<|/ c |>\n<| c |>\nThe question was about recursion.\n<|/\
    \ c |>\n<| c |>\nThe question was about recursion.\n<|/ c |>\n<| c |>\nThe question\
    \ was about recursion.\n<|/ c |>\n<| a tags=r,fibonacci,recursion |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question, which is about recursion.\n\
    <|/ c |>\n<| c |>\nThe question was about recursion.\n<|/ c |>\n<| c |>\nThe question\
    \ was about recursion.\n<|/ c |>\n<| c |>\nThe question was about recursion.\n\
    <|/ c |>\n<| c |>\nThe question was about recursion.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about recursion.\n<|/ c |>\n<| c |>\nThe question\
    \ was about recursion.\n<|/ c |>\n<| c |>\nThe question was about recursion.\n\
    <|/ c |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't answer the question, which is about recursion.\n<|/ c |>\n\
    <| c |>\nThe question was about recursion.\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know why his code doesn't work. Your code doesn't\
    \ even work. Try running it.\n<|/ c |>\n<| c |>\nI did try running it. It works.\
    \ I added the output to the answer. Did you try running it?\n<|/ c |>\n<| c |>\n\
    I did try running it. It works. I added the output to the answer. Did you try\
    \ running it?\n<|/ c |>\n<| c |>\nI did try running it. It works. I added the\
    \ output to the answer. Did you try running it?\n<|/ c |>\n<| c |>\nI did try\
    \ running it. It works. I added the output to the answer. Did you try running\
    \ it?\n<|/ c |>\n<| a |>\nThe reason your code doesn't work is because you never\
    \ actually call the function fib. \n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\nThis code only defines a function\
    \ fib, but doesn't call it. You need to call it by adding fib(n) at the end of\
    \ your function.\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n\nfib(10)\n[1] 55\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ dscore=5 |>\n<| c |>\nThis doesn't answer the question. OP wants to know why\
    \ his code doesn't work. Your code doesn't even work. Try running it.\n<|/ c |>\n\
    <| c |>\nI did try running it. It works. I added the output to the answer. Did\
    \ you try running it?\n<|/ c |>\n<| c |>\nI did try running it. It works. I added\
    \ the output to the answer. Did you try running it?\n<|/ c |>\n<| c |>\nI did\
    \ try running it. It works. I added the output to the answer. Did you try running\
    \ it?\n<|/ c |>\n<| c |>\nI did try running it. It works. I added the output to\
    \ the answer. Did you try running it?\n<|/ c |>\n<| a dscore=5 |>\nThe function\
    \ fib is defined but not called. \n<code>\nfib <- function(n) {", "\n  if(n <=\
    \ 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  if(n <= 1)\
    \ return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</cell>\n<cell>", "\n  if\
    \ (n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n", "\n  if (n <= 1) 1\n  else fib(n\
    \ - 1) + fib(n - 2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</cell>\n<cell>", "\n  if (n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n  fib(n - 1)\
    \ + fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the nth Fibonacci number using recursion.\n\n\n</text>\n\
    <cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the n-th Fibonacci number using recursion.\n\
    \n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must be non-negative\"\
    )\n  if (n == 0) 1\n  else if (n == 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n\
    </cell>\n<cell>", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2)\
    \ 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it! But I still don't\
    \ understand why my code doesn't work. Could you please explain it to me? Thanks!\n\
    <|/ c |>\n<| c |>\nThe function `fib` doesn't return anything (it returns `NULL`).\
    \ You have to assign the result of the function to a variable or print it.\n<|/\
    \ c |>\n<| c |>\nOh, I see. Thanks for your help! I really appreciate it!\n<|/\
    \ c |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n<=1){\n\
    \    return(1)\n  }\n  if(n==2){\n    return(1)\n  }\n  return(fib(n-1)+fib(n-2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib\
    \ <- function(n){\n  if(n<=1){\n    return(1)\n  }\n  if(n==2){\n    return(1)\n\
    \  }\n  return(fib(n-1)+fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n<=1){\n    return(1)\n  }\n  if(n==2){\n\
    \    return(1)\n  }\n  return(fib(n-1)+fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n<=1){\n    return(1)\n  }\n\
    \  if(n==2){\n    return(1)\n  }\n  return(fib(n-1)+fib(n-2))\n}\n</code>\n<|/\
    \ a tags=r,fibonacci,recursion |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n\
    \  if(n<=1){\n    return(1)\n  }\n  if(n==2){\n    return(1)\n  }\n  return(fib(n-1)+fib(n-2))\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>", "\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n", "\n  if (n <= 1) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</cell>\n<text>\nNow let's use our new function to calculate\
    \ Fibonacci numbers:\n\n\n</text>\n<cell>\nfib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the n-th Fibonacci number.\n\n\n</text>\n<cell>",
  "\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| a dscore=2 |>\nThe R package RcppAlgos has a function called fibonacci\
    \ that does exactly that:\n<code>\nlibrary(RcppAlgos)\nfibonacci(10)\n</code>\n\
    <|/ a tags=r,fibonacci,recursion |>\n<| a tags=r,fibonacci,recursion |>\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 1) 1\n  else fib(n -\
    \ 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a dscore=1\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n -\
    \ 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n -\
    \ 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 tags=r,fibonacci,recursion\
    \ |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n <= 1) 1\n\
    \  else fib(n - 1) + fib(n - 2)\n}\n</code>", "\n  n <- as.integer(n)\n  if (n\
    \ <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nI like the recursive solution, but I wonder if there is\
    \ a way to avoid the stack overflow error by using a tail recursive function instead?\n\
    <|/ c |>\n<| c |>\n: I doubt that there is any way to avoid the stack overflow\
    \ error without using an iterative solution. Even if you could do that, the iterative\
    \ solution would still be slower than the recursive solution. Tail recursion is\
    \ just syntactic sugar for a recursive function call, so the iterative solution\
    \ would still be slower than the recursive solution.\n<|/ c |>\n<| c |>\n: I added\
    \ a tail-recursive solution to my answer.\n<|/ c |>\n<| c |>\nThanks for the answer!\
    \ I didn't know that R had tail recursion. I'm still learning R and I didn't know\
    \ that R had tail recursion.\n<|/ c |>\n<| c |>\n: R does have tail recursion,\
    \ but it's only available for recursive functions. In your case, the function\
    \ `fib` isn't recursive, so you can't use tail recursion.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\nA simple recursive function would be:\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>", "\n  n <- as.integer(n)\n  if (n < 0) stop(\"\
    n must be >= 0\")\n  a <- 1\n  b <- 1\n  i <- 1\n  while (i <= n) {\n    c <-\
    \ a + b\n    a <- b\n    b <- c\n    i <- i + 1\n  }\n  return(b)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it can be improved\
    \ by using a `while` loop instead of a `for` loop. Also, you could use `return(tail(b,\
    \ 1))` instead of `return(b)` at the end.\n<|/ c |>\n<| c |>\nI agree with your\
    \ improvements. I didn't want to change OP's code too much since I wanted to keep\
    \ it simple. Also, `return(tail(b, 1))` would return `b` and not `b[1]`.\n<|/\
    \ c |>\n<| c |>\nI agree with your improvements. I didn't want to change OP's\
    \ code too much since I wanted to keep it simple. Also, `return(tail(b, 1))` would\
    \ return `b` and not `b[1]`.\n<|/ c |>\n<| c |>\nI agree with your improvements.\
    \ I didn't want to change OP's code too much since I wanted to keep it simple.\
    \ Also, `return(tail(b, 1))` would return `b` and not `b[1]`.\n<|/ c |>\n<| c\
    \ |>\nI agree with your improvements. I didn't want to change OP's code too much\
    \ since I wanted to keep it simple. Also, `return(tail(b, 1))` would return `b`\
    \ and not `b[1]`.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution that uses recursion:\n\
    <code>\nfib <- function(n) {\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must\
    \ be >= 0\")\n  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nI like\
    \ your solution, but I believe it can be improved by using a `while` loop instead\
    \ of a `for` loop. Also, you could use `return(tail(b, 1))` instead of `return(b)`\
    \ at the end.\n<|/ c |>\n<| c |>\nI agree with your improvements. I didn't want\
    \ to change OP's code too much since I wanted to keep it simple. Also, `return(tail(b,\
    \ 1))` would return `", "\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must be\
    \ non-negative\")\n  if (n == 0 || n == 1) return(n)\n  a <- 1\n  b <- 1\n  for\
    \ (i in 2:n) {\n    c <- a + b\n    a <- b\n    b <- c\n  }\n  return(b)\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis code does not work as intended. `fib(0)`\
    \ returns `1` instead of `0`. `fib(1)` returns `1` instead of `1`. `fib(10)` returns\
    \ `55` instead of `55`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ fixed the code now.\n<|/ c |>\n<| c |>\nThanks for fixing it. I was just about\
    \ to post a similar answer but you beat me to it.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer should be the accepted one. While the other answers work, they don't\
    \ explain why they work and this one does.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n<0) stop(\"n must be non-negative\")\n\
    \  if(n==0) return(0)\n  if(n==1) return(1)\n  return(fib(n-1)+fib(n-2))\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis code does not work as intended. `fib(0)`\
    \ returns `1` instead of `0`. `fib(1)` returns `1` instead of `1`. `fib(10)` returns\
    \ `55` instead of `55`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ fixed the code now.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nfib <- function(n){\n\
    \  if(n<0) stop(\"n must be non-negative\")\n  if(n==0) return(0)\n  if(n==1)\
    \ return(1)\n  return(fib(n-1)+fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n<0)\
    \ stop(\"n must be non-negative\")\n  if(n==0) return(0)\n  if(n==1) return(1)\n\
    \  return(", "\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must be non-negative\"\
    )\n  if (n == 0) 1\n  else if (n == 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to do this without recursion.\n<|/ c |>\n<| c |>\n: I added a recursive\
    \ solution. Not sure if that's what you meant.\n<|/ c |>\n<| c |>\nI mean without\
    \ recursion. Thanks for the help!\n<|/ c |>\n<| c |>\n: I added a non-recursive\
    \ solution.\n<|/ c |>\n<| c |>\nThanks for the help! I appreciate it.\n<|/ c |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without recursion.\n<|/ c |>\n<| c |>\n: I added a non-recursive\
    \ solution.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib\
    \ <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a dscore=1 tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a ", "\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis does answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question of how to do this recursively.\n\
    <|/", "\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThe recursive solution is very elegant, but it is also very inefficient.\
    \ Try running it on a large number of iterations, e.g. `fib(1e6)`\n<|/ c |>\n\
    <| c |>\nI agree, this is very inefficient. My solution was to show that it is\
    \ possible to solve this problem without recursion.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, your solution is very elegant, but it is also very inefficient. Try\
    \ running it on a large number of iterations, e.g. `fib(1e6)`\n<|/ c |>\n<| c\
    \ |>\nI agree with you, your solution is very elegant, but it is also very inefficient.\
    \ Try running it on a large number of iterations, e.g. `fib(1e6)`\n<|/ c |>\n\
    <| c |>\nI agree with you, your solution is very elegant, but it is also very\
    \ inefficient. Try running it on a large number of iterations, e.g. `fib(1e6)`\n\
    <|/ c |>\n<| a dscore=5 |>\nHere's a solution using R's lazy evaluation capabilities:\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n\
    </code>\n<|/ a tags=recursion,r |>\n<| c |>\nThis is very inefficient. Try running\
    \ it on a large number of iterations, e.g. `fib(1e6)`\n<|/ c |>\n<| c |>\nI agree\
    \ with you, your solution is very elegant, but it is also very inefficient. Try\
    \ running it on a large number of iterations, e.g. `fib(1e6)`\n<|/ c |>\n<| c\
    \ |>\nI agree with you, your solution is very elegant, but it is also very inefficient.\
    \ Try running it on a large number of iterations, e.g. `fib(1e6)`\n<|/ c |>\n\
    <| c |>\nI agree with you, your solution is very elegant, but it is also very\
    \ inefficient. Try running it on a large number of iterations, e.g. `fib(1e6)`\n\
    <|/ c |>\n<| c |>\nI agree with you, your solution is very elegant, but it is\
    \ also very inefficient. Try running it on a large number of iterations, e.g.\
    \ `fib(1e6)`\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n\
    \  n <- as.integer(n)\n  if (n <= 1) return(n)\n  a <- 0\n  b <- 1\n  i <- 1\n\
    \  while (i <= n) {\n    c <- a + b\n    a <- b\n    b <- c\n    i <- i + 1\n\
    \  }\n  return(b)\n}\n", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n\
    \ <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 0)\
    \ stop(\"n must be positive\")\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| c |>\nThanks for the answer!\
    \ I didn't know about this way of doing it. I was trying to do it with recursion\
    \ and I got stuck. Thanks again!\n<|/ c |>\n<| c |>\nI added a recursive version\
    \ to my answer.\n<|/ c |>\n<| c |>\nThanks for the answer! I didn't know about\
    \ this way of doing it. I was trying to do it with recursion and I got stuck.\
    \ Thanks again!\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\nHere's a recursive\
    \ version using R's memoization feature:\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 0) stop(\"n must be positive\")\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n\nfib2 <- function(n) {\n  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be\
    \ positive\")\n  if(n <= 1) 1\n  else fib2(n-1) + fib2(n-2)\n}\n\nfib3 <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n  if(n <=\
    \ 1) 1\n  else fib3(n-1) + fib3(n-2)\n}\n\nfib4 <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1) 1\n  else fib4(n-1) +\
    \ fib4(n-2)\n}\n\nfib5 <- function(n) {\n  n <- as.integer(n)\n  if(n <= 0) stop(\"\
    n must be positive\")\n  if(n <= 1) 1\n  else fib5(n-1) + fib5(n-2)\n}\n\nfib6\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\"\
    )\n  if(n <= 1) 1\n  else fib6(n-1) + fib6(n-2)\n}\n\nfib7 <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1)\
    \ 1\n  else fib7(n-1) + fib7(n-2)\n}\n\nfib8 <- function(", "\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n", "\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</cell>\n<text>\nLet's test our function\n\n\n</text>\n\
    <cell>\nfib(10)\n</cell>\n<text>\nWe can also use purrr's map function to apply\
    \ our function to each element of a vector\n\n\n</text>\n<cell>\npurrr::map(1:10,\
    \ fib)\n</cell>\n<text>\nWe can also use purrr's reduce function to apply our\
    \ function to each element of a vector\n\n\n</text>\n<cell>\npurrr::reduce(1:10,\
    \ fib)\n</cell>\n<text>\nWe can also use purrr's accumulate function to apply\
    \ our function to each element of a vector\n\n\n</text>\n<cell>\npurrr::accumulate(1:10,\
    \ fib)\n</cell>\n<text>\nWe can also use purrr's accumulate function to apply\
    \ our function to each element of a vector\n\n\n</text>\n<cell>\npurrr::accumulate(1:10,\
    \ fib, .init = 1)\n</cell>\n<text>\nWe can also use purrr's accumulate function\
    \ to apply our function to each element of a vector\n\n\n</text>\n<cell>\npurrr::accumulate(1:10,\
    \ fib, .init = 1, .final = 10)\n</cell>\n<text>\nWe can also use purrr's accumulate\
    \ function to apply our function to each element of a vector\n\n\n</text>\n<cell>\n\
    purrr::accumulate(1:10, fib, .init = 1, .final = 10, .init = 2)\n</cell>\n<text>\n\
    We can also use purrr's accumulate function to apply our function to each element\
    \ of a vector\n\n\n</text>\n<cell>\npurrr::accumulate(1:10, fib, .init = 1, .final\
    \ = 10, .init = 2, .final = 5)\n</cell>\n<text>\nWe can also use purrr's accumulate\
    \ function to apply our function to each element of a vector\n\n\n</text>\n<cell>\n\
    purrr::accumulate(1:10, fib, .init = 1, .final = 10, .init = 2, .final = 5, .init\
    \ = 3)\n</cell>\n<text>\nWe can also use purrr's accumulate function to apply\
    \ our function to each element of a vector\n\n\n</text>\n<cell>\npurrr::accumulate(1:10,\
    \ fib, .init = 1, .final = 10, .init = 2, .final = 5, .init = 3, .final = 7)\n\
    </cell>\n<text>\nWe can also use purrr's accumulate function to apply our function\
    \ to each element of a vector\n\n\n</text>\n<cell>\npurrr::accumulate(1:10, fib,\
    \ .init", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>",
  "\n  if (n <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n", "\n  n <-\
    \ as.integer(n)\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a recursive solution that is more\
    \ efficient than a loop:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a\
    \ tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fi", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n == 1) return(1)\n  fib(n - 1) + fib(n - 2)\n}\n",
  "\n  n <- as.integer(n)\n  if (n <= 0) stop(\"n must be positive\")\n  if (n <=\
    \ 1) 1\n  else {\n    fib(n-1) + fib(n-2)\n  }\n}\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the n-th Fibonacci number using recursion.\n\n\
    \n</text>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the nth Fibonacci number using recursion.\n\n\n</text>\n<cell>", "\n  if(n <=\
    \ 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis is an excellent answer. One thing I noticed is that it uses recursion\
    \ and is thus slower than the other answers. I did some benchmarking and the other\
    \ answers take about a second per call. Your answer takes about 0.3 seconds per\
    \ call. That's a huge difference. Thanks!\n<|/ c |>\n<| c |>\nI agree with you.\
    \ Recursion is slower than the other answers. I did some benchmarking and the\
    \ other answers take about a second per call. Your answer takes about 0.3 seconds\
    \ per call. That's a huge difference. Thanks!\n<|/ c |>\n<| c |>\nI agree with\
    \ you. Recursion is slower than the other answers. I did some benchmarking and\
    \ the other answers take about a second per call. Your answer takes about 0.3\
    \ seconds per call. That's a huge difference. Thanks!\n<|/ c |>\n<| c |>\nI agree\
    \ with you. Recursion is slower than the other answers. I did some benchmarking\
    \ and the other answers take about a second per call. Your answer takes about\
    \ 0.3 seconds per call. That's a huge difference. Thanks!\n<|/ c |>\n<| c |>\n\
    I agree with you. Recursion is slower than the other answers. I did some benchmarking\
    \ and the other answers take about a second per call. Your answer takes about\
    \ 0.3 seconds per call. That's a huge difference. Thanks!\n<|/ c |>\n<| a |>\n\
    <code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n-1) + fib(n-2)\n}\n\
    </code>\n<|/ a tags=recursion,r,function,fibonacci dscore=5 |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. Recursion is slower than the other answers. I did some benchmarking\
    \ and the other answers take about a second per call. Your answer takes about\
    \ 0.3 seconds per call. That's a huge difference. Thanks!\n<|/ c |>\n<| c |>\n\
    I agree with you. Recursion is slower than the other answer", "\n  n <- as.integer(n)\n\
    \  if (n < 0) stop(\"n must be non-negative\")\n  if (n == 0) 1\n  else if (n\
    \ == 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like your solution, but I wonder why you didn't use `fib` instead of `fib2`\
    \ in the `if` statement. Also, why did you use `stop` instead of `return`?\n<|/\
    \ c |>\n<| c |>\n: I used `fib2` because I wanted to show that `fib` can be rewritten\
    \ to return an infinite sequence. `stop` was just to show that `fib` can return\
    \ an infinite sequence. `return` would have worked just as well.\n<|/ c |>\n<|\
    \ c |>\nI see. Thanks for the explanation. :)\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib2 <- function(n){\n  if(n <= 0) stop(\"n must be positive\")\n\
    \  if(n <= 1) 1\n  else fib2(n - 1) + fib2(n - 2)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 0) stop(\"n must\
    \ be positive\")\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/\
    \ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci |>\n<code>\n\
    fib <- function(n){\n  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1) 1\n\
    \  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 0) stop(\"n must be positive\")\n\
    \  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 0) stop(\"\
    n must be positive\")\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nA recursive solution\
    \ is also possible:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r |>\n<| a dscore=2 |>\n\
    The recursive solution is very simple:\n<code>\nfib <- function(n){\n  if(n <=\
    \ 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r\
    \ |>\n<| a tags=recursion,r |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=recursion,r |>\n<| a tags=recursion,r |>\n<code>\nfib <-\
    \ function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r |>\n\
    <| a |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 tags=recursion,r |>\n<| a tags=recursion,r\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=recursion,r |>\n<code>\nfib <-\
    \ function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=recursion,r |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - ", "\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(1)\n</cell>\n<cell>\nfib(8)\n\
    </cell>\n<cell>\nfib(2)\n</cell>\n<cell>\nfib(3)\n</cell>\n<cell>\nfib(4)\n</cell>\n\
    <cell>\nfib(5)\n</cell>\n<cell>\nfib(6)\n</cell>\n<cell>\nfib(7)\n</cell>\n<cell>\n\
    fib(8)\n</cell>\n<cell>\nfib(9)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(11)\n\
    </cell>\n<cell>\nfib(12)\n</cell>\n<cell>\nfib(13)\n</cell>\n<cell>\nfib(14)\n\
    </cell>\n<cell>\nfib(15)\n</cell>\n<cell>\nfib(16)\n</cell>\n<cell>\nfib(17)\n\
    </cell>\n<cell>\nfib(18)\n</cell>\n<cell>\nfib(19)\n</cell>\n<cell>\nfib(20)\n\
    </cell>\n<cell>\nfib(21)\n</cell>\n<cell>\nfib(22)\n</cell>\n<cell>\nfib(23)\n\
    </cell>\n<cell>\nfib(24)\n</cell>\n<cell>\nfib(25)\n</cell>\n<cell>\nfib(26)\n\
    </cell>\n<cell>\nfib(27)\n</cell>\n<cell>\nfib(28)\n</cell>\n<cell>\nfib(29)\n\
    </cell>\n<cell>\nfib(30)\n</cell>\n<cell>\nfib(31)\n</cell>\n<cell>\nfib(32)\n\
    </cell>\n<cell>\nfib(33)\n</cell>\n<cell>\nfib(34)\n</cell>\n<cell>\nfib(35)\n\
    </cell>\n<cell>\nfib(36)\n</cell>\n<cell>\nfib(37)\n</cell>\n<cell>\nfib(38)\n",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n \
    \ if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the n-th Fibonacci number\
    \ using recursion.\n\n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n -\
    \ 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  if (n <= 1) return(n)\n  fib(n -\
    \ 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post.\n<|/ c |>\n\
    <| c |>\nI disagree. While the question was about how to implement a recursive\
    \ function, the answer was about how to implement a recursive function using R's\
    \ `fib` function. I think it's fair to say that this is an answer to the question,\
    \ even though it might not be the most efficient solution to the problem.\n<|/\
    \ c |>\n<| c |>\nI agree with you. I just wanted to point out that your answer\
    \ does not answer the question. Your answer does not explain how to implement\
    \ a recursive function using R's `fib` function. I think it would be better to\
    \ edit your answer to include this information.\n<|/ c |>\n<| c |>\nI agree, my\
    \ answer does not answer the question. I just wanted to point out that your answer\
    \ does not answer the question. Your answer does not explain how to implement\
    \ a recursive function using R's `fib` function. I think it would be better to\
    \ edit your answer to include this information.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. I just wanted to point out that your answer does not answer the question.\
    \ Your answer does not explain how to implement a recursive function using R's\
    \ `fib` function. I think it would be better to edit your answer to include this\
    \ information.\n<|/ c |>\n<| a tags=r,fibonacci |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post.\n<|/\
    \ c |>\n<| c |>\nI disagree. While the question was about how to implement a recursive\
    \ function, the answer was about how to implement a recursive function using R's\
    \ `fib` function. I think it's fair to say that this is an answer to the question,\
    \ even though it might not be the most efficient solution to the problem.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - ", "\n  n <- n + 1\n  if(n <= 1) 1\n  else fib(n-1) +\
    \ fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer. Can\
    \ you please explain how this works? I understand that `fib` returns `1` when\
    \ `n` is `1`, but how does it return `55` when `n` is `10`?\n<|/ c |>\n<| c |>\n\
    The function `fib` returns `55` when `n` is `10` because `55` is the sum of the\
    \ first 10 Fibonacci numbers. `fib(1)` returns `1` because `1` is the sum of the\
    \ first 2 Fibonacci numbers. `fib(8)` returns `21` because `21` is the sum of\
    \ the first 8 Fibonacci numbers. `fib(9)` returns `55` because `55` is the sum\
    \ of the first 9 Fibonacci numbers. `fib(10)` returns `55` because `55` is the\
    \ sum of the first 10 Fibonacci numbers.\n<|/ c |>\n<| c |>\nThanks for the explanation.\
    \ Can you please explain how this works? I understand that `fib` returns `1` when\
    \ `n` is `1`, but how does it return `55` when `n` is `10`?\n<|/ c |>\n<| c |>\n\
    I added some more explanation to my answer.\n<|/ c |>\n<| a dscore=2 |>\nThe Fibonacci\
    \ sequence is defined as:\n<code>\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,\
    \ 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465\n</code>\nThe first few numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657,\
    \ 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578,\
    \ 5702887, 9227465\nThe next few numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987, 159", "\n  if (n <= 1) return(n)\n  else return(fib(n-1)\
    \ + fib(n-2))\n}\n", "\n  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci |>\n<| c |>\nI\
    \ like this solution, but I wonder if there is a way to do it without recursion.\n\
    <|/ c |>\n<| c |>\nI added a non-recursive version to my answer.\n<|/ c |>\n<|\
    \ a |>\n<code>\nfib <- function(n) {\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci dscore=5 |>\n<|\
    \ c |>\nThis doesn't work for n=0 though.\n<|/ c |>\n<| c |>\nIt does for me.\
    \ Try `fib(10)`\n<|/ c |>\n<| c |>\nIt works for me too. Try `fib(10)`\n<|/ c\
    \ |>\n<| c |>\nIt works for me too. Try `fib(10)`\n<|/ c |>\n<| c |>\nIt works\
    \ for me too. Try `fib(10)`\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n){\n\
    \  n <- as.integer(n)\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a tags=r,fibonacci |>\n<| c |>\nThis doesn't work for n=0 though.\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try `fib(10)`\n<|/ c |>\n<| c |>\nIt works\
    \ for me too. Try `fib(10)`\n<|/ c |>\n<| c |>\nIt works for me too. Try `fib(10)`\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try `fib(10)`\n<|/ c |>\n<| a tags=r,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work for n=0 though.\n<|/ c |>\n<| c |>\nIt works for me too. Try `fib(10)`\n\
    <|/", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a\
    \ tags=r,recursion,fibonacci,function |>\n<| a dscore=0 |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci,function\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=r,recursion,fibonacci,function |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=r,recursion,fibonacci,function |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci,function\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=r,recursion,fibonacci,function |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=r,recursion,fibonacci,function |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci,function\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would ", "\n  n <- as.integer(n)\n\
    \  if (n < 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if (n == 0 || n == 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</cell>\n\
    <cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n\
    <cell>\nfib(1)\n</cell>\n<cell>\nfib(8)\n</cell>\n<text>\nThe Fibonacci sequence\
    \ is defined by the recurrence relation:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0\
    \ = 0$ and $F_1 = 1$.\n\n\n</text>\n<text>\nThe Fibonacci sequence is commonly\
    \ used in mathematics and computer science.\n\n\n</text>\n<text>\nThe Fibonacci\
    \ sequence is also used in many disciplines of science, such as physics, engineering,\
    \ mathematics, economics, finance, and many more.\n\n\n</text>\n<text>\nThe Fibonacci\
    \ sequence is defined recursively by the formula:\n\n$Fn = F{n-1} + F_{n-2}$\n\
    \nwhere $F_0 = 0$ and $F_1 = 1$.\n\n\n</text>\n<text>\nThe Fibonacci sequence\
    \ is known as the \"golden ratio\".\n\n\n</text>\n<text>\nThe Fibonacci sequence\
    \ is one of the most important sequences to understand for many reasons:\n\nIt\
    \ is a well-known mathematical sequence.\nIt is also used in many disciplines\
    \ of science, such as physics, engineering, mathematics, economics, finance, and\
    \ many more.\n\n\n</text>\n<text>\nThe Fibonacci sequence is defined recursively\
    \ by the formula:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1 = 1$.\n\
    \n\n</text>\n<text>\nThe Fibonacci sequence is known as the \"golden ratio\".\n\
    \n\n</text>\n<text>\nThe Fibonacci sequence is defined recursively by the formula:\n\
    \n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1 = 1$.\n\n\n</text>\n<text>\n\
    The Fibonacci sequence is known as the \"golden ratio\".\n\n\n</text>\n<text>\n\
    The Fibonacci sequence is defined recursively by the formula:\n\n$Fn = F{n-1}\
    \ + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1 = 1$.\n\n\n</text>\n<text>\nThe Fibonacci\
    \ sequence is known as the \"golden ratio\".\n\n\n</text>\n<text>\nThe ", "\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci,python\
    \ |>\n<| a |>\nHere's a recursive solution in R:\n<code>\nfib <- function(n) {\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2\
    \ tags=r,recursion,fibonacci,python |>\n<| a dscore=2 |>\nIn R:\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a tags=r,recursion,fibonacci,python |>\n<| a dscore=2 |>\nIn Python:\n<code>\n\
    def fib(n):\n    if n<=1:\n        return n\n    else:\n        return fib(n-1)+fib(n-2)\n\
    </code>\n<|/ a tags=r,recursion,fibonacci,python |>\n<| a tags=r,recursion,fibonacci,python\
    \ |>\nIn R:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1)\
    \ + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Python:\n\
    <code>\ndef fib(n):\n    if n<=1:\n        return n\n    else:\n        return\
    \ fib(n-1)+fib(n-2)\n</code>\n<|/ a tags=r,recursion,fibonacci,python |>\n<| a\
    \ dscore=2 |>\nIn R:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n \
    \ fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci,python\
    \ |>\n<| a tags=r,recursion,fibonacci,python |>\nIn Python:\n<code>\ndef fib(n):\n\
    \    if n<=1:\n        return n\n    else:\n        return fib(n-1)+fib(n-2)\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn R:\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci,python\
    \ |>\n<| a dscore=2 |>\nIn Python:\n<code>\ndef fib(n):\n    if n", "\n  n <-\
    \ n + 1\n  if(n == 1) return(1)\n  if(n == 2) return(2)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<text>\nExercise: Write a function that returns the nth Fibonacci\
    \ number.\n\n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n", "\n  if(n <= 1) return(1)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n\
    <cell>", "\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the nth Fibonacci number modulo 1000000007 (the\
    \ remainder after dividing by 1000000007).\n\n\n</text>\n<cell>", "\n  if(n <=\
    \ 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  n <- n +\
    \ 1\n  if (n < 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, but I wonder if it can be made more efficient.\
    \ For example, if you call fib(100) it takes about 30 seconds to complete. Is\
    \ there a way to make it faster?\n<|/ c |>\n<| c |>\n: Yes, you can make it more\
    \ efficient. See the answer by below.\n<|/ c |>\n<| c |>\n: Yes, you can make\
    \ it more efficient. See the answer by below.\n<|/ c |>\n<| c |>\n: Yes, you can\
    \ make it more efficient. See the answer by below.\n<|/ c |>\n<| c |>\n: Yes,\
    \ you can make it more efficient. See the answer by below.\n<|/ c |>\n<| a |>\n\
    Here's a recursive solution that doesn't require any extra packages:\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=5 tags=recursion,r |>\n<| c |>\nThis doesn't work for large numbers.\
    \ For example, fib(100) takes about 30 seconds to complete.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nI did try it and it didn't\
    \ work. Maybe I did something wrong. I'll try again.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. Try it yourself. It takes about 30 seconds to complete for me.\n<|/\
    \ c |>\n<| c |>\n: Yes, it does. Try it yourself. It takes about 30 seconds to\
    \ complete for me.\n<|/ c |>\n<| a tags=recursion,r |>\n<code>\nfib <- function(n){\n\
    \  if(n<=1){\n    return(1)\n  }\n  return(fib(n-1)+fib(n-2))\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't work for large numbers. For example, fib(100)\
    \ takes about 30 seconds to complete.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself. It takes about\
    \ 30 seconds to complete for me.\n<|/ c |>\n<| ", "\n  n <- as.integer(n)\n  if\
    \ (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(", "\n  n <- n + 1\n  if (n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't seem to work. `fib(1)` returns `1` instead of\
    \ `1`.\n<|/ c |>\n<| c |>\nI fixed it by adding `n <- n + 1` to the beginning\
    \ of the function.\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
    \ `n` as a parameter and is also tail recursive.\n<|/ c |>\n<| c |>\nI added a\
    \ version that doesn't require `n` as a parameter and is also tail recursive.\n\
    <|/ c |>\n<| a tags=recursion,r |>\nHere's a tail recursive version:\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work. `fib(1)` returns `1` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\nI fixed it by adding `n <- n + 1` to the beginning\
    \ of the function.\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
    \ `n` as a parameter and is also tail recursive.\n<|/ c |>\n<| a dscore=5 |>\n\
    Here's a tail recursive version:\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n\
    \  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=recursion,r |>\n<| c |>\n\
    This doesn't seem to work. `fib(1)` returns `1` instead of `1`.\n<|/ c |>\n<|\
    \ c |>\nI fixed it by adding `n <- n + 1` to the beginning of the function.\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't require `n` as a parameter and\
    \ is also tail recursive.\n<|/ c |>\n<| a tags=recursion,r |>\nHere's a tail recursive\
    \ version:\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nHere's a tail recursive version:\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)", "\n\
    \  n <- as.integer(n)\n  if (n < 0) stop(\"n must be non-negative\")\n  if (n\
    \ == 0) 1\n  else if (n == 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a\
    \ tags=r,fibonacci,recursion |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a dscore=2 |>\n<code>\nfib\
    \ <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n\
    \ <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <-\
    \ function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfi", "\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Recursion is much more efficient\
    \ than looping.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Recursion\
    \ is much more efficient than looping.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Recursion is much more efficient than looping.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Recursion is much more efficient\
    \ than looping.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Recursion\
    \ is much more efficient than looping.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Recursion is much more efficient than looping.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Recursion is much more efficient than looping.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Recursion is much more efficient\
    \ than looping.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Recursion\
    \ is much more efficient than looping.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Recursion is much more efficient than looping.\n<|/ c |>\n\
    <| a |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) +\
    \ fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. Recursion is much more efficient than looping.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Recursion is much more\
    \ efficient than looping.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Recursion is much more efficient than looping.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Recursion is much more efficient than looping.\n<|/\
    \ c ", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n \
    \ if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n", "\n\
    \  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a\
    \ tags=r,recursion,fibonacci,memoization |>\n<| c |>\nThis doesn't seem to work.\
    \ `fib(1)` returns `1` instead of `1`\n<|/ c |>\n<| c |>\nIt works fine for me.\
    \ Are you sure you copied it correctly? `fib(1)` returns `1` as expected.\n<|/\
    \ c |>\n<| c |>\nYes, I copied it correctly. `fib(1)` returns `1` as expected.\n\
    <|/ c |>\n<| c |>\nI see. I'm on R 3.2.2 on OS X. Maybe it's an OS X issue. I'll\
    \ try it on Linux.\n<|/ c |>\n<| c |>\nI tested it on Linux and it works fine.\
    \ Thanks for your help.\n<|/ c |>\n<| a tags=r,recursion,fibonacci,memoization\
    \ |>\nThe memoization is working fine, it's just that your function doesn't return\
    \ anything for n==1.\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n \
    \ fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work. `fib(1)` returns `1` instead of `1`\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Are you sure you copied it correctly? `fib(1)` returns `1` as expected.\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. `fib(1)` returns `1` as expected.\n\
    <|/ c |>\n<| c |>\nI tested it on Linux and it works fine. Thanks for your help.\n\
    <|/ c |>\n<| a dscore=2 |>\nI like to use memoize from memoize package. \n<code>\n\
    library(memoize)\nfib <- memoize(fib)\n</code>\n<|/ a tags=r,recursion,fibonacci,memoization\
    \ |>\n<| a tags=r,recursion,fibonacci,memoization |>\nI like to use memoize from\
    \ memoize package. \n<code>\nlibrary(memoize)\nfib <- memoize(fib)\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - ", "\n  n <- as.integer(n)\n  if (n == 0 || n == 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n", "\n  if (n <=\
    \ 1) 1\n  else if (n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks for your answer. I'm still a beginner so I didn't know\
    \ about recursion. I'll definitely look into it.\n<|/ c |>\n<| c |>\nI added a\
    \ recursive solution to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I tried it out and it works perfectly. I'm still trying to understand\
    \ recursion and how it works. I appreciate your help.\n<|/ c |>\n<| c |>\nRecursion\
    \ is just a way of thinking about problems recursively. For example, if you have\
    \ a function that calculates the factorial of a number, you can think of it as\
    \ \"calculating the factorial of the number and then returning the result\". It's\
    \ a way of thinking about problems recursively.\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\nThe recursive solution is very simple:\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) 1\n  else if(n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThanks for your answer. I tried it out and it works perfectly.\
    \ I'm still trying to understand recursion and how it works. I appreciate your\
    \ help.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ 1\n  else if(n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThanks for your answer. I tried it out and it works perfectly.\
    \ I'm still trying to understand recursion and how it works. I appreciate your\
    \ help.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ 1\n  else if(n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThanks for your answer. I tried it out and it works perfectly.\
    \ I'm still trying to understand recursion and how it works. I appreciate your\
    \ help.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ 1", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n", "\n  if (n <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not an answer to the question. He\
    \ wants to know why his code is not working, not how to fix it.\n<|/ c |>\n<|\
    \ c |>\nI thought the question was \"why doesn't this work?\" I thought the answer\
    \ was \"because you didn't understand recursion\". I thought the answer was \"\
    because you didn't understand recursion\". I thought the answer was \"because\
    \ you didn't understand recursion\". I thought the answer was \"because you didn't\
    \ understand recursion\". I thought the answer was \"because you didn't understand\
    \ recursion\". I thought the answer was \"because you didn't understand recursion\"\
    . I thought the answer was \"because you didn't understand recursion\". I thought\
    \ the answer was \"because you didn't understand recursion\". I thought the answer\
    \ was \"because you didn't understand recursion\". I thought the answer was \"\
    because you didn't understand recursion\". I thought the answer was \"because\
    \ you didn't understand recursion\". I thought the answer was \"because you didn't\
    \ understand recursion\". I thought the answer was \"because you didn't understand\
    \ recursion\". I thought the answer was \"because you didn't understand recursion\"\
    . I thought the answer was \"because you didn't understand recursion\". I thought\
    \ the answer was \"because you didn't understand recursion\". I thought the answer\
    \ was \"because you didn't understand recursion\". I thought the answer was \"\
    because you didn't understand recursion\". I thought the answer was \"because\
    \ you didn't understand recursion\". I thought the answer was \"because you didn't\
    \ understand recursion\". I thought the answer was \"because you didn't understand\
    \ recursion\". I thought the answer was \"because you didn't understand recursion\"\
    . I thought the answer was \"because you didn't understand recursion\". I thought\
    \ the answer was \"because you didn't understand recursion\". I thought the answer\
    \ was \"because you didn't understand recursion\". I thought the answer was \"\
    because you didn't understand recursion\". I thought the answer was \"because\
    \ you didn't understand recursion\". I thought the answer was \"because you didn't\
    \ understand recursion\". I thought the answer was \"because you didn't understand\
    \ recursion\". I thought the answer was \"because you didn't understand recursion\"\
    . I thought the answer was \"because you didn't understand recursion\". I thought\
    \ the answer was \"because you didn't understand recursion\". I thought the answer\
    \ was \"because you didn't understand recursion\". I thought the answer was \"\
    because you didn't understand recursion\". I thought the answer was \"because\
    \ you didn't understand recursion\". I thought the answer was \"because you didn't\
    \ understand recursion", "\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n",
  "\n  if(n <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n", "\n  if(n <=\
    \ 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=4 |>\n\
    <| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| a dscore=3 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=3\
    \ tags=", "\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution. Very elegant\
    \ and simple.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post.\n<|/\
    \ c |>\n<| c |>\nThis does provide an answer. `fib` returns a number, and `fib`\
    \ itself is recursive.\n<|/ c |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post.\n<|/ c |>\n<| c |>\nThis does provide an answer. `fib` returns\
    \ a number, and `fib` itself is recursive.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- ", "\n  n <- as.integer(n)\n  if (n == 0 || n == 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| a |>\nThe recursive function can be written as\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5\
    \ tags=r,fibonacci,recursion |>\n<| c |>\nThis answer does not provide an explanation\
    \ of how it works. Please add an explanation.\n<|/ c |>\n<| c |>\nThis answer\
    \ does not provide an explanation of how it works. Please add an explanation.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| c |>\nThis answer does not provide an explanation of how it works. Please add\
    \ an explanation.\n<|/ c |>\n<| c |>\nThis answer does not provide an explanation\
    \ of how it works. Please add an explanation.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a tags=r,fibonacci,recursion |>\n<| a dscore=4 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| a dscore=4 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - ", "\n  if(n\
    \ <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis is not the fastest solution, since it requires two recursive calls\
    \ per iteration. Also, `fib` should be `fib`, not `fib2`.\n<|/ c |>\n<| c |>\n\
    I agree, this is definitely not the fastest solution. I'll edit my answer to include\
    \ a faster solution. Thanks for pointing out my mistake.\n<|/ c |>\n<| c |>\n\
    I added a faster solution. Thanks for pointing out my mistake.\n<|/ c |>\n<| a\
    \ tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This is not the fastest solution, since it requires two recursive calls per iteration.\
    \ Also, `fib` should be `fib`, not `fib2`.\n<|/ c |>\n<| c |>\nI agree, this is\
    \ definitely not the fastest solution. I'll edit my answer to include a faster\
    \ solution. Thanks for pointing out my mistake.\n<|/ c |>\n<| c |>\nI added a\
    \ faster solution. Thanks for pointing out my mistake.\n<|/ c |>\n<| c |>\nI added\
    \ a faster solution. Thanks for pointing out my mistake.\n<|/ c |>\n<| c |>\n\
    I added a faster solution. Thanks for pointing out my mistake.\n<|/ c |>\n<| a\
    \ |>\n<code>\nfib <- function(n){\n  if(n == 1) return(1)\n  if(n == 2) return(2)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=5\
    \ |>\n<| c |>\nThis is not the fastest solution, since it requires two recursive\
    \ calls per iteration. Also, `fib` should be `fib`, not `fib2`.\n<|/ c |>\n<|\
    \ c |>\nI agree, this is definitely not the fastest solution. I'll edit my answer\
    \ to include a faster solution. Thanks for pointing out my mistake.\n<|/ c |>\n\
    <| a tags=r,recursion,fibonacci", "\n  if(n <= 1) return(1)\n  else return(fib(n-1)\
    \ + fib(n-2))\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n\
    \  else if (n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThanks for the answer. I'm still trying to understand how this\
    \ works. Can you explain how this works?\n<|/ c |>\n<| c |>\nThe function `fib`\
    \ recursively calls itself twice (once for n=1 and once for n=2), each time returning\
    \ the sum of the two previous calls. So `fib(10)` calls itself twice with `n=10`,\
    \ then returns the sum of the two previous calls. `fib(1)` calls itself twice\
    \ with `n=1`, then returns the sum of the two previous calls. `fib(8)` calls itself\
    \ twice with `n=8`, then returns the sum of the two previous calls. `fib(7)` calls\
    \ itself twice with `n=7`, then returns the sum of the two previous calls. `fib(6)`\
    \ calls itself twice with `n=6`, then returns the sum of the two previous calls.\
    \ `fib(5)` calls itself twice with `n=5`, then returns the sum of the two previous\
    \ calls. `fib(4)` calls itself twice with `n=4`, then returns the sum of the two\
    \ previous calls. `fib(3)` calls itself twice with `n=3`, then returns the sum\
    \ of the two previous calls. `fib(2)` calls itself twice with `n=2`, then returns\
    \ the sum of the two previous calls. `fib(1)` calls itself twice with `n=1`, then\
    \ returns the sum of the two previous calls. `fib(8)` calls itself twice with\
    \ `n=8`, then returns the sum of the two previous calls. `fib(7)` calls itself\
    \ twice with `n=7`, then returns the sum of the two previous calls. `fib(6)` calls\
    \ itself twice with `n=6`, then returns the sum of the two previous calls. `fib(5)`\
    \ calls itself twice with `n=5`, then returns the sum of the two previous calls.\
    \ `fib(4)` calls itself twice with `n=4`, then returns the sum of the two previous\
    \ calls. `fib(3)` calls itself twice with `n=3`, then returns the sum of the two\
    \ previous calls. `fib(2)` calls itself twice with `n=2`, then returns the sum\
    \ of the two previous calls. `fib(1)` calls itself twice with `n=1`, then returns\
    \ the sum of the two previous calls. `fib(8)` calls itself twice with `n=8`, then\
    \ returns the sum of the two previous calls. ", "\n  n <- n + 1\n  if(n == 1)\
    \ return(1)\n  if(n == 2) return(2)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a tags=r,fibonacci |>\n<| a dscore=4 |>\nHere's a recursive solution that\
    \ is easy to understand and to modify.\n<code>\nfib <- function(n) {\n  if(n <=\
    \ 1) return(n)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci\
    \ |>\n<| c |>\nThis doesn't work for large numbers. Try `fib(1e6)`\n<|/ c |>\n\
    <| c |>\nThis doesn't work for large numbers. Try `fib(1e6)`\n<|/ c |>\n<| c |>\n\
    This doesn't work for large numbers. Try `fib(1e6)`\n<|/ c |>\n<| a tags=r,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  return(fib(n-1) +\
    \ fib(n-2))\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work for large\
    \ numbers. Try `fib(1e6)`\n<|/ c |>\n<| c |>\nThis doesn't work for large numbers.\
    \ Try `fib(1e6)`\n<|/ c |>\n<| a dscore=4 |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci\
    \ |>\n<| c |>\nThis doesn't work for large numbers. Try `fib(1e6)`\n<|/ c |>\n\
    <| a |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci dscore=4 |>\n<| c |>\nThis doesn't\
    \ work for large numbers. Try `fib(1e6)`\n<|/ c |>\n<| a tags=r,fibonacci |>\n\
    <code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nfib <- function(n){",
  "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n", "\n  n <- n + 1\n  if (n == 1) return(1)\n  else if (n ==\
    \ 2) return(2)\n  else return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without using recursion. I'm thinking about a recursive solution but I'm wondering\
    \ if there is a way to do it without recursion.\n<|/ c |>\n<| c |>\nI guess you\
    \ could use memoization to speed things up, but that would require a lot of extra\
    \ work and a lot of extra memory to store the memoization table. Also, you would\
    \ have to rewrite your function to use memoization instead of recursion.\n<|/\
    \ c |>\n<| c |>\nI guess you could use memoization to speed things up, but that\
    \ would require a lot of extra work and a lot of extra memory to store the memoization\
    \ table. Also, you would have to rewrite your function to use memoization instead\
    \ of recursion.\n<|/ c |>\n<| c |>\nI guess you could use memoization to speed\
    \ things up, but that would require a lot of extra work and a lot of extra memory\
    \ to store the memoization table. Also, you would have to rewrite your function\
    \ to use memoization instead of recursion.\n<|/ c |>\n<| c |>\nI guess you could\
    \ use memoization to speed things up, but that would require a lot of extra work\
    \ and a lot of extra memory to store the memoization table. Also, you would have\
    \ to rewrite your function to use memoization instead of recursion.\n<|/ c |>\n\
    <| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n==1) return(1)\n\
    \  if(n==2) return(2)\n  return(fib(n-1)+fib(n-2))\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't seem to work for me. `fib(10)` returns `NA`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. `fib(10)` returns `NA`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `fib(10)` returns `NA`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me. `fib(10)` returns `NA`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `fib(10)` returns `NA`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfib ",
  "\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThis doesn't seem to work. `fib(10)` returns `55` but `fib(8)`\
    \ returns `21`.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited my answer\
    \ to include the full code. Maybe you forgot to save the file after you edited\
    \ it.\n<|/ c |>\n<| c |>\nI did save the file after I edited it. I also tried\
    \ it in a fresh R session and it still doesn't work. I'm running R 3.2.2 on Windows\
    \ 7.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 on Windows 7 and it works. I edited\
    \ my answer to include the full code. Maybe you forgot to save the file after\
    \ you edited it.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 on Windows 7 and it\
    \ works. I edited my answer to include the full code. Maybe you forgot to save\
    \ the file after you edited it.\n<|/ c |>\n<| a dscore=4 |>\nHere's a recursive\
    \ solution that is very similar to what was proposed in the other answers, but\
    \ I thought I'd post it anyway since it uses R's built-in vectorization and avoids\
    \ having to use an explicit loop:\n<code>\nfib <- function(n) {\n  if(n == 0)\
    \ return(0)\n  if(n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't seem to work. `fib(10)`\
    \ returns `55` but `fib(8)` returns `21`.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I edited my answer to include the full code. Maybe you forgot to save\
    \ the file after you edited it.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 on\
    \ Windows 7 and it works. I edited my answer to include the full code. Maybe you\
    \ forgot to save the file after you edited it.\n<|/ c |>\n<| c |>\nI tested it\
    \ on R 3.2.2 on Windows 7 and it works. I edited my answer to include the full\
    \ code. Maybe you forgo", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if\
    \ (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<text>\nExercise: Write\
    \ a recursive function called fib_r to compute $n$-th Fibonacci number. Test it\
    \ by calling it with the argument $n=10$ and $n=8$. How many recursive calls do\
    \ you get?\n\n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
