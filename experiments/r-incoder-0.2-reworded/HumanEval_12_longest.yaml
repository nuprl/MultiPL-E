name: HumanEval_12_longest
language: r
prompt: "# Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return NULL in case the input\
  \ list is empty.\n# >>> longest(c())\n# NULL\n# >>> longest(c('a', 'b', 'c'))\n\
  # 'a'\n# >>> longest(c('a', 'bb', 'ccc'))\n# 'ccc'\nlongest <- function(strings)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- longest\n    if(!identical(candidate(c()),\
  \ NULL)){quit('no', 1)}\n    if(!identical(candidate(c('x', 'y', 'z')), 'x')){quit('no',\
  \ 1)}\n    if(!identical(candidate(c('x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc')),\
  \ 'zzzz')){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  strings <- sort(strings)\n  length <- length(strings)\n  if(length\
    \ == 0) return(NULL)\n  if(length == 1) return(strings[1])\n  return(strings[length])\n\
    }\n", "\n  strings <- sort(strings)\n  n <- length(strings)\n  if (n == 0) {\n\
    \    return(NULL)\n  }\n  return(strings[[n-1]])\n}\n", "\n  strings <- sort(strings)\n\
    \  lengths <- lengths(strings)\n  which.max(lengths)\n}\n", "\n  strings <- sort(strings)\n\
    \  n <- length(strings)\n  if (n == 0) return(NULL)\n  return(tail(strings, n))\n\
    }\n", "\n  strings <- sort(strings)\n  if (length(strings) == 0) {\n    return(NULL)\n\
    \  }\n  n <- length(strings)\n  i <- 1\n  while (i <= n) {\n    if (strings[i]\
    \ == strings[i - 1]) {\n      i <- i + 1\n    } else {\n      break\n    }\n \
    \ }\n  return(strings[i - 1])\n}\n", "\n  strings <- sort(strings)\n  lengths\
    \ <- lengths(strings)\n  which.max(lengths)\n}\n", "\n  strings <- sort(strings)\n\
    \  n <- length(strings)\n  if(n > 0) {\n    longest <- strings[n]\n  } else {\n\
    \    longest <- NULL\n  }\n  return(longest)\n}\n", "\n  strings <- sort(strings)\n\
    \  if (length(strings) == 0) {\n    return(NULL)\n  }\n  length <- length(strings)\n\
    \  return(tail(strings, length))\n}\n", "\n  strings <- sort(strings)\n  lengths\
    \ <- lengths(strings)\n  return(names(which.max(lengths)))\n}\n", "\n  strings\
    \ <- strings[!is.na(strings)]\n  lengths <- lengths(strings)\n  which.max(lengths)\n\
    }\n", "\n  strings <- strings[!is.na(strings)]\n  lengths <- sort(lengths(strings),\
    \ decreasing = TRUE)\n  return(names(lengths)[which.max(lengths)])\n}\n", "\n\
    \  strings <- sort(strings)\n  if (length(strings) == 0) {\n    return(NULL)\n\
    \  }\n  max_length <- length(strings)\n  return(strings[max_length])\n}\n", "\n\
    \  strings <- sort(strings)\n  n <- length(strings)\n  if (n == 0) return(NULL)\n\
    \  return(tail(strings, 1))\n}\n", "\n  strings <- sort(strings)\n  n <- length(strings)\n\
    \  if (n == 0) return(NULL)\n  return(strings[n - 1])\n}\n", "\n  strings <- sort(strings)\n\
    \  n <- length(strings)\n  if (n == 0) return(NULL)\n  return(strings[[n-1]])\n\
    }\n", "\n  strings <- strings[!is.na(strings)]\n  if(length(strings) == 0) return(NULL)\n\
    \  if(length(strings) == 1) return(strings)\n  max(strings)\n}\n", "\n  strings\
    \ <- sort(strings)\n  lengths <- sapply(strings, nchar)\n  lengths[lengths ==\
    \ 0] <- NA\n  lengths[is.na(lengths)] <- max(lengths[!is.na(lengths)])\n  strings[which.max(lengths)]\n\
    }\n", "\n  strings <- sort(strings)\n  n <- length(strings)\n  if (n == 0) return(NULL)\n\
    \  return(strings[n - 1])\n}\n", "\n  strings <- sort(strings)\n  if (length(strings)\
    \ == 0) return(NULL)\n  max(strings)\n}\n", "\n  strings <- sort(strings)\n  n\
    \ <- length(strings)\n  if (n == 0) {\n    return(NULL)\n  }\n  return(tail(strings,\
    \ 1))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
