name: HumanEval_98_count_upper
language: r
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper('aBCdEf')\n# 1\n# >>> count_upper('abcdefg')\n\
  # 0\n# >>> count_upper('dBBE')\n# 0\ncount_upper <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- count_upper\n    if(!identical(candidate('aBCdEf'),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate('abcdefg'), 0)){quit('no', 1)}\n\
  \    if(!identical(candidate('dBBE'), 0)){quit('no', 1)}\n    if(!identical(candidate('B'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('U'), 1)){quit('no', 1)}\n   \
  \ if(!identical(candidate(''), 0)){quit('no', 1)}\n    if(!identical(candidate('EEEE'),\
  \ 2)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  n <- nchar(s);\n  sapply(seq_len(n), function(i) sum(s[i:(i + 2)]\
    \ %in% c('a', 'e', 'i', 'o', 'u')))\n}\n</cell>\n<cell>", "\n  n <- nchar(s);\n\
    \  sapply(seq_len(n), function(i) sum(toupper(substr(s, i, i)) %in% c(\"A\", \"\
    E\", \"I\", \"O\", \"U\")));\n}\n", "\n  sum(grepl(\"[aeiou]\", s, perl = TRUE)\
    \ & grepl(\"^[aeiou]\", s, perl = TRUE))\n}\n", "\n  n <- nchar(s);\n  ifelse(n\
    \ %% 2 == 0, sum(toupper(s[seq(1, n, 2)])) - 1, 0)\n}\n</code>\n<|/ a tags=r,string\
    \ |>\n<| c |>\nThanks so much for the answer! I didn't know about `seq` so I learned\
    \ something new. I'm still new to R and this was a great learning experience.\
    \ Thanks again!\n<|/ c |>\n<| a tags=r,string |>\nHere's a solution using stringr::str_count\
    \ and stringr::str_replace (which I find easier to read than gsub):\n<code>\n\
    library(stringr)\ncount_upper <- function(s) {\n  n <- nchar(s);\n  ifelse(n %%\
    \ 2 == 0, str_count(str_replace(s, \"[aeiou]\", \"\"), \"[aeiou]\"), 0)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nHere's a base R solution:\n<code>\ncount_upper <-\
    \ function(s) {\n  n <- nchar(s);\n  ifelse(n %% 2 == 0, sum(toupper(s[seq(1,\
    \ n, 2)])) - 1, 0)\n}\n</code>\n<|/ a tags=r,string dscore=2 |>\n<| a tags=r,string\
    \ |>\nHere's a solution using stringr::str_count and stringr::str_replace (which\
    \ I find easier to read than gsub):\n<code>\nlibrary(stringr)\ncount_upper <-\
    \ function(s) {\n  n <- nchar(s);\n  ifelse(n %% 2 == 0, str_count(str_replace(s,\
    \ \"[aeiou]\", \"\"), \"[aeiou]\"), 0)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string\
    \ |>\nHere's a solution using stringr::str_count and stringr::str_replace (which\
    \ I find easier to read than gsub):\n<code>\nlibrary(stringr)\ncount_upper <-\
    \ function(s) {\n  n <- nchar(s);\n  ifelse(n %% 2 == 0, str_count(str_replace(s,\
    \ \"[aeiou]\", \"\"), \"[aeiou]\"), 0)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\nHere's a solution using stringr::str_count and stringr::str_replace (which\
    \ I find easier to read than gsub):\n<code>\nlibrary(stringr)\ncount_upper <-\
    \ function(s) {\n  n <- nchar(s);\n  ifelse(n %% 2 == 0, str_count(str_replace(s,\
    \ \"[aeiou]\", \"\"), \"[aeiou]\"), ", "\n  n <- 0\n  for(i in seq_along(s)) {\n\
    \    if(substr(s, i, i) == 'A' || substr(s, i, i) == 'a') {\n      n <- n + 1\n\
    \    }\n  }\n  n\n}\n", "\n  n <- nchar(s);\n  sapply(seq_len(n), function(i)\
    \ sum(grepl(\"^[AEIOUaeiou]$\", s[i:(i + n)]) & substr(s[i:(i + n)], i, i + n)\
    \ == upper(s[i:(i + n)])))\n}\n", "\n  s <- tolower(s)\n  sapply(seq_along(s),\
    \ function(i) sum(s[i:(i + 2)] %in% c(\"a\", \"e\", \"i\", \"o\", \"u\")))\n}\n",
  "\n  n <- 0\n  i <- 0\n  while (i < length(s)) {\n    if (substr(s, i, i) %in% c(\"\
    A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\")) {\n     \
    \ n <- n + 1\n    }\n    i <- i + 1\n  }\n  n\n}\n", "\n  n <- 0\n  for(i in seq_along(s))\
    \ {\n    if(substr(s, i, i) %in% c(\"A\", \"E\", \"I\", \"O\", \"U\")) {\n   \
    \   n <- n + 1\n    }\n  }\n  n\n}\n", "\n  n <- 0\n  i <- 0\n  while (i < length(s))\
    \ {\n    if (substr(s, i, i) == 'A' || substr(s, i, i) == 'a') {\n      n <- n\
    \ + 1\n    }\n    i <- i + 1\n  }\n  n\n}\n", "\n  s <- tolower(s)\n  sum(grepl(\"\
    [aeiou]\", s, perl=TRUE) & seq_along(s) == seq_along(s) / 2)\n}\n", "\n  n <-\
    \ 0L\n  i <- 0L\n  while(i < length(s)) {\n    if(substr(s, i, i) == 'A' || substr(s,\
    \ i, i) == 'a') {\n      n <- n + 1L\n    }\n    i <- i + 1L\n  }\n  n\n}\n",
  "\n  sum(grepl(\"^[AEIOUaeiou]\", s, perl = TRUE))\n}\n</cell>\n<cell>", "\n  n\
    \ <- nchar(s);\n  sapply(seq_len(n), function(i) sum(grepl(\"[aeiou]\", s[c(i,\
    \ i+1)], perl = TRUE) & substr(s, i, i+1) %in% c(\"A\", \"E\", \"I\", \"O\", \"\
    U\")));\n}\n", "\n  s <- toupper(s)\n  sum(grepl(\"^[AEIOUaeiou]$\", s))\n}\n",
  "\n  s <- tolower(s)\n  sapply(seq_along(s), function(i) sum(s[i:(i + 2)] %in% c(\"\
    a\", \"e\", \"i\", \"o\", \"u\")))\n}\n", "\n  sum(grepl(\"^[AEIOUaeiou]$\", s,\
    \ perl = TRUE))\n}\n", "\n  n <- nchar(s);\n  sapply(seq_len(n), function(i) sum(grepl(\"\
    ^[AEIOUaeiou]$\", s[i:(i + n)]) & substr(s, i, i + n) %in% c(\"A\", \"E\", \"\
    I\", \"O\", \"U\")));\n}\n", "\n  s <- tolower(s)\n  n <- nchar(s) # number of\
    \ characters\n  nchar(gregexpr(\"[aeiou]\", s)[[1]]) # number of uppercase vowels\n\
    }\n", "\n  s <- tolower(s)\n  n <- 0\n  i <- 0\n  while (i < length(s)) {\n  \
    \  if (substr(s, i, i) == 'a' || substr(s, i, i) == 'e' || substr(s, i, i) ==\
    \ 'i' || substr(s, i, i) == 'o' || substr(s, i, i) == 'u') {\n      n <- n + 1\n\
    \    }\n    i <- i + 1\n  }\n  n\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
