name: HumanEval_82_prime_length
language: r
prompt: "# Write a function that takes a string and returns TRUE if the string\n#\
  \ length is a prime number or FALSE otherwise\n# Examples\n# >>> prime_length('Hello')\n\
  # TRUE\n# >>> prime_length('abcdcba')\n# TRUE\n# >>> prime_length('kittens')\n#\
  \ TRUE\n# >>> prime_length('orange')\n# FALSE\nprime_length <- function(string)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- prime_length\n    if(!identical(candidate('Hello'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('abcdcba'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('kittens'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('orange'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('wow'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('world'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('MadaM'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('Wow'), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate(''), FALSE)){quit('no', 1)}\n    if(!identical(candidate('HI'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('go'), TRUE)){quit('no', 1)}\n\
  \    if(!identical(candidate('gogo'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('aaaaaaaaaaaaaaa'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('Madam'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('M'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('0'),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  return(length(gregexpr(\"[[:digit:]]+\", string)[[1]])==2)\n}\n",
  "\n  return(length(gregexpr(\"[[:digit:]]\", string)[[1]])==2)\n}\n", "\n  string\
    \ <- tolower(string)\n  string <- gsub(\"[^[:alpha:]]\", \"\", string)\n  string\
    \ <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <- gsub(\"[[:alpha:]]+$\"\
    , \"\", string)\n  string <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <-\
    \ gsub(\"[[:alpha:]]+$\", \"\", string)\n  string <- gsub(\"^[[:alpha:]]+\", \"\
    \", string)\n  string <- gsub(\"[[:alpha:]]+$\", \"\", string)\n  string <- gsub(\"\
    ^[[:alpha:]]+\", \"\", string)\n  string <- gsub(\"[[:alpha:]]+$\", \"\", string)\n\
    \  string <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <- gsub(\"[[:alpha:]]+$\"\
    , \"\", string)\n  string <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <-\
    \ gsub(\"[[:alpha:]]+$\", \"\", string)\n  string <- gsub(\"^[[:alpha:]]+\", \"\
    \", string)\n  string <- gsub(\"[[:alpha:]]+$\", \"\", string)\n  string <- gsub(\"\
    ^[[:alpha:]]+\", \"\", string)\n  string <- gsub(\"[[:alpha:]]+$\", \"\", string)\n\
    \  string <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <- gsub(\"[[:alpha:]]+$\"\
    , \"\", string)\n  string <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <-\
    \ gsub(\"[[:alpha:]]+$\", \"\", string)\n  string <- gsub(\"^[[:alpha:]]+\", \"\
    \", string)\n  string <- gsub(\"[[:alpha:]]+$\", \"\", string)\n  string <- gsub(\"\
    ^[[:alpha:]]+\", \"\", string)\n  string <- gsub(\"[[:alpha:]]+$\", \"\", string)\n\
    \  string <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <- gsub(\"[[:alpha:]]+$\"\
    , \"\", string)\n  string <- gsub(\"^[[:alpha:]]+\", \"\", string)\n  string <-\
    \ gsub(\"[[:alpha:]]+$\", \"\", string)\n  string <- gsub(\"^[[:alpha:]]+", "\n\
    \  \n  if(length(string) == 1) {\n    return(FALSE)\n  }\n  \n  if(length(string)\
    \ == 2) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 3) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 4) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 5) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 6) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 7) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 8) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 9) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 10) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 11) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 12) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 13) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 14) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 15) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 16) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 17) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 18) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 19) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 20) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 21) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 22) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 23) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 24) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 25) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 26) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 27) {\n    return(TRUE)\n\
    \  }\n  \n  if(length(string) == 28) {\n    return(TRUE)\n  }\n  \n  if(length(string)\
    \ == 29) {\n    return(TRUE)\n  }\n  \n  if(length(string) == 30) {\n    return(TRUE)\n\
    \  }\n  \n  if(length", "\n  return(length(gregexpr(\"[[:digit:]]+\", string))\
    \ == length(gregexpr(\"[[:alpha:]]+\", string)))\n}\n", "\n  return(length(gregexpr(\"\
    [[:digit:]]\", string)) == length(gregexpr(\"[[:alpha:]]\", string)))\n}\n", "\n\
    \  return(length(string) == 1 & all(string==substr(string,1,1)))\n}\n", "\n  return(length(string)\
    \ %% 2 == 0)\n}\n", "\n  string <- tolower(string)\n  n <- length(string)\n  \n\
    \  if(n <= 1) return(FALSE)\n  \n  for(i in 2:n) {\n    if(string[i] == string[i-1])\
    \ return(FALSE)\n  }\n  \n  return(TRUE)\n}\n", "\n  \n  if(length(string) ==\
    \ 1) {\n    return(FALSE)\n  }\n  \n  if(length(string) == 2) {\n    return(TRUE)\n\
    \  }\n  \n  for(i in 3:(length(string)-1)) {\n    if(string[i] == string[i-1])\
    \ {\n      return(FALSE)\n    }\n  }\n  \n  return(TRUE)\n}\n", "\n  string <-\
    \ tolower(string)\n  string <- gsub(\"[^[:alpha:]]\", \"\", string)\n  string\
    \ <- gsub(\"[[:space:]]\", \"\", string)\n  string <- gsub(\"[[:punct:]]\", \"\
    \", string)\n  string <- gsub(\"[[:digit:]]\", \"\", string)\n  string <- gsub(\"\
    [[:upper:]]\", \"\", string)\n  string <- gsub(\"[[:lower:]]\", \"\", string)\n\
    \  string <- gsub(\"[[:xdigit:]]\", \"\", string)\n  string <- gsub(\"[[:punct:]]\"\
    , \"\", string)\n  string <- gsub(\"[[:cntrl:]]\", \"\", string)\n  string <-\
    \ gsub(\"[[:graph:]]\", \"\", string)\n  string <- gsub(\"[[:blank:]]\", \"\"\
    , string)\n  string <- gsub(\"[[:cntrl:]]\", \"\", string)\n  string <- gsub(\"\
    [[:punct:]]\", \"\", string)\n  string <- gsub(\"[[:space:]]\", \"\", string)\n\
    \  string <- gsub(\"[[:alpha:]]\", \"\", string)\n  string <- gsub(\"[[:digit:]]\"\
    , \"\", string)\n  string <- gsub(\"[[:lower:]]\", \"\", string)\n  string <-\
    \ gsub(\"[[:upper:]]\", \"\", string)\n  string <- gsub(\"[[:xdigit:]]\", \"\"\
    , string)\n  string <- gsub(\"[[:space:]]\", \"\", string)\n  string <- gsub(\"\
    [[:punct:]]\", \"\", string)\n  string <- gsub(\"[[:space:]]\", \"\", string)\n\
    \  string <- gsub(\"[[:alpha:]]\", \"\", string)\n  string <- gsub(\"[[:digit:]]\"\
    , \"\", string)\n  string <- gsub(\"[[:lower:]]\", \"\", string)\n  string <-\
    \ gsub(\"[[:upper:]]\", \"\", string)\n  string <- gsub(\"[[:xdigit:]]\", \"\"\
    , string)\n  string <- gsub(\"[[:space:]]\", \"\", string)\n  string <- gsub(\"\
    [[:punct:]]\", \"\", string)\n  string <- gsub(\"[[:space:]]\", \"\", string)\n\
    \  string <- gsub(\"[[:alpha:]]\", \"\", string)\n  string <- gsub(\"[[:digit:]]\"\
    , \"\", string)\n  string <- gsub(\"[[:lower:]]\", \"\", string)", "\n  return(length(gregexpr(\"\
    [[:digit:]]+\", string)) == length(gregexpr(\"[[:alpha:]]+\", string)))\n}\n",
  "\n  return(length(string) == 1 & all(string%/%2==0) & all(string%%3==0))\n}\n",
  "\n  \n  # Write your code here\n  \n}\n", "\n  \n  # Write your code here\n  \n\
    }\n</cell>\n<cell>", "\n  n <- nchar(string)\n  is_prime <- FALSE\n  for(i in\
    \ 2:(n-1)) {\n    if(string[i] == \"0\") {\n      is_prime <- FALSE\n      break\n\
    \    }\n    if(string[i] == \"1\") {\n      is_prime <- TRUE\n      break\n  \
    \  }\n    if(string[i] == \"2\") {\n      is_prime <- TRUE\n      break\n    }\n\
    \    if(string[i] == \"3\") {\n      is_prime <- TRUE\n      break\n    }\n  \
    \  if(string[i] == \"4\") {\n      is_prime <- TRUE\n      break\n    }\n    if(string[i]\
    \ == \"5\") {\n      is_prime <- TRUE\n      break\n    }\n    if(string[i] ==\
    \ \"6\") {\n      is_prime <- TRUE\n      break\n    }\n    if(string[i] == \"\
    7\") {\n      is_prime <- TRUE\n      break\n    }\n    if(string[i] == \"8\"\
    ) {\n      is_prime <- TRUE\n      break\n    }\n    if(string[i] == \"9\") {\n\
    \      is_prime <- TRUE\n      break\n    }\n  }\n  return(is_prime)\n}\n", "\n\
    \  return(length(gregexpr(\"^[[:digit:]]+$\", string)) > 0)\n}\n", "\n  return(length(gregexpr(\"\
    [[:digit:]]\", string)[[1]])==2)\n}\n", "\n  return(length(gregexpr(\"^[[:digit:]]+$\"\
    , string)) > 0)\n}\n", "\n  \n  # Write your code here\n  \n}\n"]
stop_tokens:
- "\n#"
- "\n```"
