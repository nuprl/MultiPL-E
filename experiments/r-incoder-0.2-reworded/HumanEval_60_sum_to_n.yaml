name: HumanEval_60_sum_to_n
language: r
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- sum_to_n\n    if(!identical(candidate(1),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(6), 21)){quit('no', 1)}\n    if(!identical(candidate(11),\
  \ 66)){quit('no', 1)}\n    if(!identical(candidate(30), 465)){quit('no', 1)}\n \
  \   if(!identical(candidate(100), 5050)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  n <- n\n  n <- sum(n)\n  return(n)\n}\n</cell>\n<text>\nNow we\
    \ can use sum_to_n to find the sum of the first n numbers:\n\n\n</text>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<text>\nThe function sum_to_n returns the correct result,\
    \ but we could have written it like this:\n\n\n</text>\n<cell>\nsum_to_n <- function(n)\
    \ {\n  return(sum(1:n))\n}\n</cell>\n<text>\nThe function sum_to_n returns the\
    \ correct result, but we could have written it like this:\n\n\n</text>\n<cell>\n\
    sum_to_n <- function(n) {\n  return(sum(1:n))\n}\n</cell>\n<text>\nThe function\
    \ sum_to_n returns the correct result, but we could have written it like this:\n\
    \n\n</text>\n<cell>\nsum_to_n <- function(n) {\n  return(sum(1:n))\n}\n</cell>\n\
    <text>\nThe function sum_to_n returns the correct result, but we could have written\
    \ it like this:\n\n\n</text>\n<cell>\nsum_to_n <- function(n) {\n  return(sum(1:n))\n\
    }\n</cell>\n<text>\nThe function sum_to_n returns the correct result, but we could\
    \ have written it like this:\n\n\n</text>\n<cell>\nsum_to_n <- function(n) {\n\
    \  return(sum(1:n))\n}\n</cell>\n<text>\nThe function sum_to_n returns the correct\
    \ result, but we could have written it like this:\n\n\n</text>\n<cell>\nsum_to_n\
    \ <- function(n) {\n  return(sum(1:n))\n}\n</cell>\n<text>\nThe function sum_to_n\
    \ returns the correct result, but we could have written it like this:\n\n\n</text>\n\
    <cell>\nsum_to_n <- function(n) {\n  return(sum(1:n))\n}\n</cell>\n<text>\nThe\
    \ function sum_to_n returns the correct result, but we could have written it like\
    \ this:\n\n\n</text>\n<cell>\nsum_to_n <- function(n) {\n  return(sum(1:n))\n\
    }\n</cell>\n<text>\nThe function sum_to_n returns the correct result, but we could\
    \ have written it like this:\n\n\n</text>\n<cell>\nsum_to_n <- function(n) {\n\
    \  return(sum(1:n))\n}\n</cell>\n<text>\nThe function sum_to_n returns the correct\
    \ result, but we could have written it like this:\n\n\n</text>\n<cell>\nsum_to_n\
    \ <- function(n) {\n  return(sum(1:n))\n}\n</cell>\n<text>\nThe function sum_to_n\
    \ returns the correct result, but we could have written it like this:\n\n\n",
  "\n  return(sum(1:n))\n}\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.\n\n\n</text>\n<cell>", "\n  n <- n +\
    \ 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<text>\nNow let's use sum_to_n\
    \ to find the sum of the first n numbers:\n\n\n</text>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n recursively\n\
    \n\n</text>\n<cell>", "\n  n <- n + 1\n  if(n == 1) return(1)\n  return(sum_to_n(n-1))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  if(n == 2) return(2)\n\
    \  return(sum(1:n) + sum_to_n(n-1))\n}\n</cell>\n<text>\nThe sum_to_n function\
    \ above is recursive, meaning it calls itself to compute the sum of a sequence\
    \ of numbers. For example, sum_to_n(3) would return 6 (1 + 2 + 3).\n\nThe sum_to_n\
    \ function above is also called a tail recursive function, which means that it\
    \ calls itself to compute the sum of a sequence of numbers. For example, sum_to_n(3)\
    \ would return 6 (1 + 2 + 3).\n\nThe sum_to_n function above is also called a\
    \ tail recursive function, which means that it calls itself to compute the sum\
    \ of a sequence of numbers. For example, sum_to_n(3) would return 6 (1 + 2 + 3).\n\
    \nThe sum_to_n function above is also called a tail recursive function, which\
    \ means that it calls itself to compute the sum of a sequence of numbers. For\
    \ example, sum_to_n(3) would return 6 (1 + 2 + 3).\n\nThe sum_to_n function above\
    \ is also called a tail recursive function, which means that it calls itself to\
    \ compute the sum of a sequence of numbers. For example, sum_to_n(3) would return\
    \ 6 (1 + 2 + 3).\n\nThe sum_to_n function above is also called a tail recursive\
    \ function, which means that it calls itself to compute the sum of a sequence\
    \ of numbers. For example, sum_to_n(3) would return 6 (1 + 2 + 3).\n\nThe sum_to_n\
    \ function above is also called a tail recursive function, which means that it\
    \ calls itself to compute the sum of a sequence of numbers. For example, sum_to_n(3)\
    \ would return 6 (1 + 2 + 3).\n\nThe sum_to_n function above is also called a\
    \ tail recursive function, which means that it calls itself to compute the sum\
    \ of a sequence of numbers. For example, sum_to_n(3) would return 6 (1 + 2 + 3).\n\
    \nThe sum_to_n function above is also called a tail recursive function, which\
    \ means that it calls itself to compute the sum of a sequence of numbers. For\
    \ example, sum_to_n(3) would return 6 (1 + 2 + 3).\n\nThe sum_to_n function above\
    \ is also called a tail recursive function, which means that it calls itself to\
    \ compute the sum of a sequence of numbers. For example, sum_to_n(3) would return\
    \ 6 (1 + 2 + 3).\n\nThe sum_to_n function above is also called a tail recursive\
    \ function, which means that it calls itself to compute the sum of a sequence\
    \ of numbers. For example, sum_to_n(3) would return 6 (1 + 2 + 3).\n\nThe sum_to_n\
    \ function above is also called a tail recursive function, which means that it\
    \ calls itself to compute the sum of a sequence of numbers. For example, sum_to_n(3)\
    \ would return 6 (1 + 2 + 3).\n\nThe sum_to_n ", "\n  n <- as.integer(n)\n  if(n\
    \ <= 0) return(0)\n  if(n <= 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000001)\n</cell>\n\
    <cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\nsum_to_n(1000000000003)\n</cell>\n\
    <cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\nsum_to_n(1000000000005)\n</cell>\n\
    <cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\nsum_to_n(1000000000007)\n</cell>\n\
    <cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\nsum_to_n(1000000000009)\n</cell>\n\
    <cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\nsum_to_n(1000000000011)\n</cell>\n\
    <cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\nsum_to_n(1000000000013)\n</cell>\n\
    <cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\nsum_to_n(1000000000015)\n</cell>\n\
    <cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\nsum_to_n(1000000000017)\n</cell>\n\
    <cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\nsum_to_n(1000000000019)\n</cell>\n\
    <cell>\nsum_to_", "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n\
    }\n", "\n  n <- as.integer(n)\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum +\
    \ i\n  }\n  return(sum)\n}\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n \
    \ return(n)\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I\
    \ am not very familiar with R and I do not understand your code. Could you please\
    \ explain it a little bit?\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your explanation. I am still not\
    \ very familiar with R and I do not understand your code. Could you please explain\
    \ it a little bit?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your explanation. I am still not very\
    \ familiar with R and I do not understand your code. Could you please explain\
    \ it a little bit?\n<|/ c |>\n<| a tags=r,algorithm |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer. I am not very familiar with R\
    \ and I do not understand your code. Could you please explain it a little bit?\n\
    <|/ c |>\n<| a tags=r,algorithm |>\n<code>\nsum_to_n <- function(n) {\n  n <-\
    \ n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. I am not very familiar with R and I do not understand\
    \ your code. Could you please explain it a little bit?\n<|/ c |>\n<| c |>\nThis\
    \ code will take input n and will add 1 to n and multiply it by n and divide it\
    \ by 2 then it will return that number\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ I am still not very familiar with R and I do not understand your code. Could\
    \ you please explain it a little bit?\n<|/ c |>\n<| c |>\nThis code will take\
    \ input n and will add 1 to n and multiply it by n and divide it by 2 then it\
    \ will return that number\n<|/ c |>\n<| c |>\nThanks for ", "\n  n <- n + 1\n\
    \  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n</cell>\n<text>\nLet's try it out with\
    \ sum_to_n(30).\n\n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n<text>\nAnd now with\
    \ sum_to_n(100).\n\n\n</text>\n<cell>\nsum_to_n(100)\n</cell>\n<text>\nAnd now\
    \ with sum_to_n(5).\n\n\n</text>\n<cell>\nsum_to_n(5)\n</cell>\n<text>\nAnd now\
    \ with sum_to_n(10).\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nAnd\
    \ now with sum_to_n(1).\n\n\n</text>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the sum of the first n numbers in the Fibonacci\
    \ sequence.\n\nThe Fibonacci sequence is defined by the recurrence relation:\n\
    \n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1 = 1$.\n\nFor example, with\
    \ $F_0 = 1$ and $F_1 = 1$, then:\n\n$Fn = F{n-1} + F_{n-2} = 1 + 1 = 2$\n\n$Fn\
    \ = F{n-1} + F_{n-2} = 3 + 1 = 5$\n\n$Fn = F{n-1} + F_{n-2} = 8 + 1 = 13$\n\n\
    $Fn = F{n-1} + F_{n-2} = 13 + 1 = 20$\n\n$Fn = F{n-1} + F_{n-2} = 20 + 1 = 40$\n\
    \n$Fn = F{n-1} + F_{n-2} = 40 + 1 = 55$\n\n$Fn = F{n-1} + F_{n-2} = 55 + 1 = 89$\n\
    \n$Fn = F{n-1} + F_{n-2} = 89 + 1 = 144$\n\n$Fn = F{n-1} + F_{n-2} = 144 + 1 =\
    \ 233$\n\n$Fn = F{n-1} + F_{n-2} = 233 + 1 = 377$\n\n$Fn = F{n-1} + F_{n-2} =\
    \ 377 + 1 = 635$\n\n$Fn = F{n-1} + F_{n-2} = 635 + 1 = 1094$\n\n$Fn = F{n-1} +\
    \ F_{n-2} = 1094 + 1 = 17711$\n\n$F", "\n  n <- n + 1\n  n <- n * n\n  n <- n\
    \ / 2\n  return(n)\n}\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <- n * n\n  n <- n\
    \ / 2\n  return(n)\n}\n</cell>\n<text>\nThe function sum_to_n takes an integer\
    \ argument and returns the sum of all numbers from 1 to that integer. For example,\
    \ sum_to_n(30) returns 465.\n\nThe function sum_to_n has one parameter, n, which\
    \ must be an integer greater than or equal to 1.\n\nThe function sum_to_n has\
    \ one return statement, return(n), which returns the value of n.\n\nThe function\
    \ sum_to_n has one line for each of the following assignments:\n\nn <- n + 1\n\
    n <- n * n\nn <- n / 2\nreturn(n)\nThe function sum_to_n has one line for each\
    \ of the following assignments:\n\nn <- n + 1\nn <- n * n\nn <- n / 2\nreturn(n)\n\
    The function sum_to_n has one line for each of the following assignments:\n\n\
    n <- n + 1\nn <- n * n\nn <- n / 2\nreturn(n)\nThe function sum_to_n has one line\
    \ for each of the following assignments:\n\nn <- n + 1\nn <- n * n\nn <- n / 2\n\
    return(n)\nThe function sum_to_n has one line for each of the following assignments:\n\
    \nn <- n + 1\nn <- n * n\nn <- n / 2\nreturn(n)\nThe function sum_to_n has one\
    \ line for each of the following assignments:\n\nn <- n + 1\nn <- n * n\nn <-\
    \ n / 2\nreturn(n)\nThe function sum_to_n has one line for each of the following\
    \ assignments:\n\nn <- n + 1\nn <- n * n\nn <- n / 2\nreturn(n)\nThe function\
    \ sum_to_n has one line for each of the following assignments:\n\nn <- n + 1\n\
    n <- n * n\nn <- n / 2\nreturn(n)\nThe function sum_to_n has one line for each\
    \ of the following assignments:\n\nn <- n + 1\nn <- n * n\nn <- n / 2\nreturn(n)\n\
    The function sum_to_n has one line for each of the following assignments:\n\n\
    n <- n + 1\nn <- n * n\nn <- n / 2\nreturn(n)\nThe function sum_to_n has one line\
    \ for each of the following assignments:\n\nn <- n + 1\nn <- n * n\nn <- n / 2\n\
    return(n)\nThe function sum_to_n has one line for each of the following assignments:\n\
    \nn <- n + 1\nn <- n * n\nn <- n / 2\nreturn(n)\nThe function sum_to_n has one\
    \ line for each of the following assignments:\n\nn <- n + 1", "\n  n <- as.integer(n)\n\
    \  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.\n\
    \n\n</text>\n<cell>", "\n  n <- n + 1\n  return(\n    sum(\n      1:n\n    )\n\
    \  )\n}\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<text>\n\
    The function sum_to_n takes an integer argument and returns an integer.\n\n\n\
    </text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nThe function sum_to_n has two\
    \ arguments: n and n. n takes the value of n and adds 1 to it. The result of the\
    \ addition is assigned to n. n takes the value of n and multiplies it by it. The\
    \ result of the multiplication is assigned to n. n takes the value of n and divides\
    \ it by 2. The result of the division is assigned to n. Finally, the value of\
    \ n is returned.\n\n\n</text>\n<text>\nExercise\nWrite a function that takes an\
    \ integer argument and returns an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  n <- ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 1e6,\
    \ stop(\"n must be less than 1e6\"), n)\n  n <- ifelse(n > 1e9, stop(\"n must\
    \ be less than 1e9\"), n)\n  n <- ifelse(n > 1e12, stop(\"n must be less than\
    \ 1e12\"), n)\n  n <- ifelse(n > 1e15, stop(\"n must be less than 1e15\"), n)\n\
    \  n <- ifelse(n > 1e18, stop(\"n must be less than 1e18\"), n)\n  n <- ifelse(n\
    \ > 1e21, stop(\"n must be less than 1e21\"), n)\n  n <- ifelse(n > 1e24, stop(\"\
    n must be less than 1e24\"), n)\n  n <- ifelse(n > 1e27, stop(\"n must be less\
    \ than 1e27\"), n)\n  n <- ifelse(n > 1e30, stop(\"n must be less than 1e30\"\
    ), n)\n  n <- ifelse(n > 1e33, stop(\"n must be less than 1e33\"), n)\n  n <-\
    \ ifelse(n > 1e36, stop(\"n must be less than 1e36\"), n)\n  n <- ifelse(n > 1e39,\
    \ stop(\"n must be less than 1e39\"), n)\n  n <- ifelse(n > 1e42, stop(\"n must\
    \ be less than 1e42\"), n)\n  n <- ifelse(n > 1e45, stop(\"n must be less than\
    \ 1e45\"), n)\n  n <- ifelse(n > 1e48, stop(\"n must be less than 1e48\"), n)\n\
    \  n <- ifelse(n > 1e51, stop(\"n must be less than 1e51\"), n)\n  n <- ifelse(n\
    \ > 1e54, stop(\"n must be less than 1e54\"), n)\n  n <- ifelse(n > 1e57, stop(\"\
    n must be less than 1e57\"), n)\n  n <- ifelse(n > 1e60, stop(\"n must be less\
    \ than 1e60\"), n)\n  n <- ifelse(n > 1e63, stop(\"n must be less than 1e63\"\
    ), n)\n  n <- ifelse(n > 1e66, stop(\"n must be less than 1e66\"), n)\n  n <-\
    \ ifelse(n > 1e69, stop(\"n must be less than 1e69\"), n)\n  n <- ifelse(n > 1e72,\
    \ stop(\"n must be less than 1e72\"), n)\n  n <- ifelse(n > 1e75, stop(\"n must\
    \ be less than 1e75\"), n)\n  n <- ifelse(n > 1e78, stop(\"n must be less than\
    \ 1e78\"), n)\n  n <- ifelse(n > 1e", "\n  n <- n + 1\n  n <- n * n\n  n <- n\
    \ / 2\n  return(n)\n}\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a number.\n\n\n</text>\n<cell>", "\n  n <- n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n ", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000",
  "\n  n <- n\n  n <- ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n\
    \ > 1e+07, stop(\"n must be less than 1e+07\"), n)\n  n <- ifelse(n < 1, stop(\"\
    n must be positive\"), n)\n  n <- ifelse(n > 1e+07, stop(\"n must be less than\
    \ 1e+07\"), n)\n  n <- ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <-\
    \ ifelse(n > 1e+07, stop(\"n must be less than 1e+07\"), n)\n  n <- ifelse(n <\
    \ 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 1e+07, stop(\"n must\
    \ be less than 1e+07\"), n)\n  n <- ifelse(n < 1, stop(\"n must be positive\"\
    ), n)\n  n <- ifelse(n > 1e+07, stop(\"n must be less than 1e+07\"), n)\n  n <-\
    \ ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 1e+07, stop(\"\
    n must be less than 1e+07\"), n)\n  n <- ifelse(n < 1, stop(\"n must be positive\"\
    ), n)\n  n <- ifelse(n > 1e+07, stop(\"n must be less than 1e+07\"), n)\n  n <-\
    \ ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 1e+07, stop(\"\
    n must be less than 1e+07\"), n)\n  n <- ifelse(n < 1, stop(\"n must be positive\"\
    ), n)\n  n <- ifelse(n > 1e+07, stop(\"n must be less than 1e+07\"), n)\n  n <-\
    \ ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 1e+07, stop(\"\
    n must be less than 1e+07\"), n)\n  n <- ifelse(n < 1, stop(\"n must be positive\"\
    ), n)\n  n <- ifelse(n > 1e+07, stop(\"n must be less than 1e+07\"), n)\n  n <-\
    \ ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 1e+07, stop(\"\
    n must be less than 1e+07\"), n)\n  n <- ifelse(n < 1, stop(\"n must be positive\"\
    ), n)\n  n <- ifelse(n > 1e+07, stop(\"n must be less than 1e+07\"), n)\n  n <-\
    \ ifelse(n < 1, stop(\"n must be ", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <-\
    \ n / 2\n  n\n}\n</cell>\n<text>\nThe function sum_to_n takes an integer argument\
    \ and returns the sum of all numbers from 1 to that integer.\n\n\n</text>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<text>\nThe function sum_to_n has two arguments: n and\
    \ n. n takes the value of n and adds 1 to it. The return value is the value of\
    \ n plus 1.\n\nThe function sum_to_n has two arguments: n and n. n takes the value\
    \ of n and adds 1 to it. The return value is the value of n times 3.\n\nThe function\
    \ sum_to_n has two arguments: n and n. n takes the value of n and divides it by\
    \ 2. The return value is the value of n divided by 2.\n\nThe function sum_to_n\
    \ has one argument: n. n takes the value of n and adds 1 to it. The return value\
    \ is the value of n plus 1.\n\nThe function sum_to_n has one argument: n. n takes\
    \ the value of n and adds 1 to it. The return value is the value of n times 3.\n\
    \nThe function sum_to_n has one argument: n. n takes the value of n and divides\
    \ it by 2. The return value is the value of n divided by 2.\n\nThe function sum_to_n\
    \ has one argument: n. n takes the value of n and adds 1 to it. The return value\
    \ is the value of n plus 1.\n\nThe function sum_to_n has one argument: n. n takes\
    \ the value of n and adds 1 to it. The return value is the value of n times 3.\n\
    \nThe function sum_to_n has one argument: n. n takes the value of n and divides\
    \ it by 2. The return value is the value of n divided by 2.\n\nThe function sum_to_n\
    \ has one argument: n. n takes the value of n and adds 1 to it. The return value\
    \ is the value of n plus 1.\n\nThe function sum_to_n has one argument: n. n takes\
    \ the value of n and adds 1 to it. The return value is the value of n times 3.\n\
    \nThe function sum_to_n has one argument: n. n takes the value of n and divides\
    \ it by 2. The return value is the value of n divided by 2.\n\nThe function sum_to_n\
    \ has one argument: n. n takes the value of n and adds 1 to it. The return value\
    \ is the value of n plus 1.\n\nThe function sum_to_n has one argument: n. n takes\
    \ the value of n and adds 1 to it. The return value is the value of n times 3.\n\
    \nThe function sum_to_n has one argument: n. n takes the value of n and divides\
    \ it by 2. The return value ", "\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n</cell>\n\
    <cell>", "\n  n <- n + 1\n  return(n + (n - 1) + (n - 2) + (n - 3))\n}\n</cell>\n\
    <text>\nThe sum_to_n function above is called a generator function, and it generates\
    \ numbers from 1 to n one at a time. Let's see how it works:\n\n\n</text>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<text>\nThe first time we call sum_to_n, it generates 5\
    \ and returns 6. On the second call, it returns 7. On the third call, it returns\
    \ 8, and so on.\n\nWe can also use it to sum all the numbers from 1 to n:\n\n\n\
    </text>\n<cell>\nsum_to_n(100)\n</cell>\n<text>\nThe sum_to_n function above is\
    \ called a generator function, and it generates numbers from 1 to n one at a time.\
    \ Let's see how it works:\n\n\n</text>\n<cell>\nsum_to_n(5)\n</cell>\n<text>\n\
    The first time we call sum_to_n, it generates 5 and returns 6. On the second call,\
    \ it returns 7. On the third call, it returns 8, and so on.\n\nWe can also use\
    \ it to sum all the numbers from 1 to n:\n\n\n</text>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<text>\nThe sum_to_n function above is called a generator function, and\
    \ it generates numbers from 1 to n one at a time. Let's see how it works:\n\n\n\
    </text>\n<cell>\nsum_to_n(5)\n</cell>\n<text>\nThe first time we call sum_to_n,\
    \ it generates 5 and returns 6. On the second call, it returns 7. On the third\
    \ call, it returns 8, and so on.\n\nWe can also use it to sum all the numbers\
    \ from 1 to n:\n\n\n</text>\n<cell>\nsum_to_n(100)\n</cell>\n<text>\nThe sum_to_n\
    \ function above is called a generator function, and it generates numbers from\
    \ 1 to n one at a time. Let's see how it works:\n\n\n</text>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<text>\nThe first time we call sum_to_n, it generates 5 and returns 6.\
    \ On the second call, it returns 7. On the third call, it returns 8, and so on.\n\
    \nWe can also use it to sum all the numbers from 1 to n:\n\n\n</text>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<text>\nThe sum_to_n function above is called a generator\
    \ function, and it generates numbers from 1 to n one at a time. Let's see how\
    \ it works:\n\n\n</text>\n<cell>\nsum_to_n(5)\n</cell", "\n  n <- n + 1\n  n <-\
    \ n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<text>\nNow let's use sum_to_n\
    \ to sum all the numbers from 1 to 100. We'll use a for loop to do this.\n\n\n\
    </text>\n<cell>", "\n  n <- n + 1\n  if(n == 1) return(1)\n  return(sum_to_n(n-1))\n\
    }\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  ", "\n  n <- n + 1\n  n <- n * n\n\
    \  n <- n / 2\n  return(n)\n}\n", "\n  n <- n + 1\n  return(\n    sum(\n     \
    \ 1:n\n    )\n  )\n}\n", "\n  n <- n + 1\n  return(n / n)\n}\n</code>\n<|/ a tags=r,function,loops\
    \ |>\n<| a tags=r,function,loops |>\nHere's a solution using purrr::reduce:\n\
    <code>\nlibrary(purrr)\n\nsum_to_n <- function(n) {\n  n <- n + 1\n  return(n\
    \ / n)\n}\n\nn <- 10\nreduce(1:n, sum_to_n)", "\n  n <- n + 1\n  return(sum(n))\n\
    }\n</cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. Use this function to find the sum of the first 10 positive\
    \ integers.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n < 1) {\n  \
    \  return(1)\n  }\n  if(n > 1) {\n    x <- sum_to_n(n - 1)\n    x <- x + 1\n \
    \   return(x)\n  }\n  return(n)\n}\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nProblem 4\nWrite a function that returns\
    \ the first n prime numbers.\n\nThe function should take one argument, n, which\
    \ should be an integer greater than 0.\n\nThe function should return a list of\
    \ n prime numbers.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  return(n %/% sum_to_n(n))\n\
    }\n", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n", "\n  n <- n\
    \ + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000", "\n  n <- n + 1\n  n <- n * n\n \
    \ n <- n / 2\n  n\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I'm still not clear on how this works. I understand that `sum_to_n` returns\
    \ a number but how does it work? How does it know to multiply by 2 each time?\
    \ How does it know to divide by 2 each time? How does it know to sum up from 1\
    \ to n? I'm still not clear on how this works.\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I'm still not clear on how this works. I understand that `sum_to_n` returns\
    \ a number but how does it work? How does it know to multiply by 2 each time?\
    \ How does it know to divide by 2 each time? How does it know to sum up from 1\
    \ to n? I'm still not clear on how this works.\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope it helps.\n<|/ c |>\n<| a tags=r |>\nThe function\
    \ sum_to_n is defined as:\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n \
    \ n <- n * n\n  n <- n / 2\n  n\n}\n</code>\nThe function takes one argument n.\
    \ n <- n + 1 increments n by 1. n <- n * n multiplies n by 2. n <- n / 2 divides\
    \ n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides\
    \ n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides\
    \ n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides\
    \ n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides\
    \ n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides\
    \ n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides n by 2. n <- n / 2 divides ",
  "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n}\n", "\n \
    \ n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n", "\n  n <- n + 1\n  sum <-\
    \ 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</cell>\n<text>\n\
    The function sum_to_n takes an integer argument and returns the sum of all integers\
    \ from 1 to that integer.\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise: Write a function that takes an integer argument and returns the sum\
    \ of all integers from 1 to that integer multiplied by 2.\n\n\n</text>\n<cell>",
  "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<text>\nThe function\
    \ sum_to_n is now defined. Let's use it to find the sum of the first n numbers.\
    \ We'll start by defining the first n numbers, as we did in the previous notebook.\n\
    \n\n</text>\n<cell>\nn <- 30\n</cell>\n<text>\nNow we can use sum_to_n to find\
    \ the sum of the first n numbers. We'll start by defining the first n numbers,\
    \ as we did in the previous notebook.\n\n\n</text>\n<cell>\nn <- 30\n</cell>\n\
    <text>\nNow we can use sum_to_n to find the sum of the first n numbers. We'll\
    \ start by defining the first n numbers, as we did in the previous notebook.\n\
    \n\n</text>\n<cell>\nn <- 30\n</cell>\n<text>\nNow we can use sum_to_n to find\
    \ the sum of the first n numbers. We'll start by defining the first n numbers,\
    \ as we did in the previous notebook.\n\n\n</text>\n<cell>\nn <- 30\n</cell>\n\
    <text>\nNow we can use sum_to_n to find the sum of the first n numbers. We'll\
    \ start by defining the first n numbers, as we did in the previous notebook.\n\
    \n\n</text>\n<cell>\nn <- 30\n</cell>\n<text>\nNow we can use sum_to_n to find\
    \ the sum of the first n numbers. We'll start by defining the first n numbers,\
    \ as we did in the previous notebook.\n\n\n</text>\n<cell>\nn <- 30\n</cell>\n\
    <text>\nNow we can use sum_to_n to find the sum of the first n numbers. We'll\
    \ start by defining the first n numbers, as we did in the previous notebook.\n\
    \n\n</text>\n<cell>\nn <- 30\n</cell>\n<text>\nNow we can use sum_to_n to find\
    \ the sum of the first n numbers. We'll start by defining the first n numbers,\
    \ as we did in the previous notebook.\n\n\n</text>\n<cell>\nn <- 30\n</cell>\n\
    <text>\nNow we can use sum_to_n to find the sum of the first n numbers. We'll\
    \ start by defining the first n numbers, as we did in the previous notebook.\n\
    \n\n</text>\n<cell>\nn <- 30\n</cell>\n<text>\nNow we can use sum_to_n to find\
    \ the sum of the first n numbers. We'll start by defining the first n numbers,\
    \ as we did in the previous notebook.\n\n\n</text>\n<cell>\nn <- 30\n</cell>\n\
    <text>\nNow we can use sum_to_n ", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n\
    \  return(n)\n}\n</cell>\n<text>\nNow let's try it out on our first number:\n\n\
    \n</text>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nIt works!  But what happens if\
    \ we try it on our second number?\n\n\n</text>\n<cell>\nsum_to_n(2)\n</cell>\n\
    <text>\nIt doesn't work.  Why?  Because we haven't added 1 to our second number.\
    \  We haven't added 2 to our first number.  We haven't added 3 to our first number.\
    \  We haven't added 4 to our first number.  We haven't added 5 to our first number.\
    \  We haven't added 6 to our first number.  We haven't added 7 to our first number.\
    \  We haven't added 8 to our first number.  We haven't added 9 to our first number.\
    \  We haven't added 10 to our first number.  We haven't added 11 to our first\
    \ number.  We haven't added 12 to our first number.  We haven't added 13 to our\
    \ first number.  We haven't added 14 to our first number.  We haven't added 15\
    \ to our first number.  We haven't added 16 to our first number.  We haven't added\
    \ 17 to our first number.  We haven't added 18 to our first number.  We haven't\
    \ added 19 to our first number.  We haven't added 20 to our first number.  We\
    \ haven't added 21 to our first number.  We haven't added 22 to our first number.\
    \  We haven't added 23 to our first number.  We haven't added 24 to our first\
    \ number.  We haven't added 25 to our first number.  We haven't added 26 to our\
    \ first number.  We haven't added 27 to our first number.  We haven't added 28\
    \ to our first number.  We haven't added 29 to our first number.  We haven't added\
    \ 30 to our first number.  We haven't added 31 to our first number.  We haven't\
    \ added 32 to our first number.  We haven't added 33 to our first number.  We\
    \ haven't added 34 to our first number.  We haven't added 35 to our first number.\
    \  We haven't added 36 to our first number.  We haven't added 37 to our first\
    \ number.  We haven't added 38 to our first number.  We haven't added 39 to our\
    \ first number.  We haven't added 40 to our first number.  We haven't added 41\
    \ to our first number.  We haven't added 42 to our first number.  We haven't added\
    \ 43 to our first number.  We haven't added 44 to our first number.  We haven't\
    \ added 45 to our first number.  We haven't added 46 to our ", "\n  n <- n + 1\n\
    \  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</cell>\n\
    <text>\nThe function sum_to_n takes an integer n and returns the sum of the integers\
    \ from 1 to n.\n\n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the integers from 1 to n that are divisible by k.\n\n\n</text>\n<cell>",
  "\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n", "\n  n <- as.integer(n)\n  if(n <= 1)\
    \ 1\n  else n * sum_to_n(n - 1)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\n\
    The sum_to_n function above is recursive. Let's see how it works:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_",
  "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n}\n</code>\n\
    <|/ a tags=r,function,sum |>\n<| c |>\nThanks so much! I appreciate it.\n<|/ c\
    \ |>\n<| c |>\nI added a more efficient version to my answer. Hope it helps.\n\
    <|/ c |>\n<| a tags=r,function,sum |>\nThis can be done in one line using R's\
    \ vectorized functions. \n<code>\nsum_to_n <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 1) return(1)\n  return(sum(1:n))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nAnother option using R's vectorized functions:\n<code>\nsum_to_n\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n\
    }\n</code>\n<|/ a tags=r,function,sum |>\n<| a tags=r,function,sum |>\n<code>\n\
    sum_to_n <- function(n) {\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,function,sum |>\n<code>\nsum_to_n <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n}\n</code>\n\
    <|/ a tags=r,function,sum |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n}\n</code>\n\
    <|/ a tags=r,function,sum |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n}\n</code>\n\
    <|/ a tags=r,function,sum |>\n<| a tags=r,function,sum |>\n<code>\nsum_to_n <-\
    \ function(n) {\n  n <- as.integer(n)", "\n  n <- n + 1\n  if(n == 1) 1\n  else\
    \ n * sum_to_n(n-1)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)",
  "\n  n <- n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n > 1e+07, 1e+07, n)\n  n\
    \ <- ifelse(n > 1e+06, 1e+06, n)\n  n <- ifelse(n > 1e+05, 1e+05, n)\n  n <- ifelse(n\
    \ > 1e+04, 1e+04, n)\n  n <- ifelse(n > 1e+03, 1e+03, n)\n  n <- ifelse(n > 1e+02,\
    \ 1e+02, n)\n  n <- ifelse(n > 1e+01, 1e+01, n)\n  n <- ifelse(n > 1e+00, 1e+00,\
    \ n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n\
    \  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <-\
    \ ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n\
    \ > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00,\
    \ 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00,\
    \ n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n\
    \  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <-\
    \ ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n\
    \ > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00,\
    \ 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n <- ifelse(n > 1e+00, 1e+00,\
    \ n)\n  n <- ifelse(n > 1e+00, 1e+00, n)\n  n ", "\n  n <- n + 1\n  n <- n * n\n\
    \  n <- n / 2\n  return(n)\n}\n</cell>\n<text>\nThe function sum_to_n takes an\
    \ integer argument and returns the sum of all numbers from 1 to that integer.\
    \ For example, sum_to_n(30) returns 465.\n\nThe function sum_to_n is defined in\
    \ the cell below.\n\n\n</text>\n<cell>\nsum_to_n\n</cell>\n<text>\nThe function\
    \ sum_to_n takes one argument, n, which must be an integer greater than or equal\
    \ to 1.\n\nThe function sum_to_n has two parts:\n\nThe first part is n <- n +\
    \ 1, which assigns the value of n to n (n is now equal to n + 1), and returns\
    \ the value of n.\n\nThe second part is n <- n * n, which assigns the value of\
    \ n to n (n is now equal to n * n), returns the value of n.\n\nThe third part\
    \ is n <- n / 2, which assigns the value of n to n (n is now equal to n / 2),\
    \ returns the value of n.\n\nThe fourth part is return(n), which returns the value\
    \ of n.\n\nThe function sum_to_n has one return statement, which returns the value\
    \ of n.\n\nThe function sum_to_n has one part that assigns the value of n to n\
    \ (n is now equal to n + 1), and returns the value of n.\n\nThe function sum_to_n\
    \ has two parts that assigns the value of n to n (n is now equal to n * n), returns\
    \ the value of n.\n\nThe function sum_to_n has one part that assigns the value\
    \ of n to n (n is now equal to n / 2), returns the value of n.\n\nThe function\
    \ sum_to_n has one part that returns the value of n, and one part that returns\
    \ the value of n.\n\nThe function sum_to_n has one part that returns the value\
    \ of n, and one part that returns the value of n.\n\nThe function sum_to_n has\
    \ one part that returns the value of n, and one part that returns the value of\
    \ n.\n\nThe function sum_to_n has one part that returns the value of n, and one\
    \ part that returns the value of n.\n\nThe function sum_to_n has one part that\
    \ returns the value of n, and one part that returns the value of n.\n\nThe function\
    \ sum_to_n has one part that returns the value of n, and one part that returns\
    \ the value of n.\n\nThe function sum_to_n has one part that returns the value\
    \ of n, and one part that returns the value of n.\n\nThe function sum_to_n has\
    \ one part that returns the value of n, and one part that returns the value of\
    \ n.\n\nThe function sum_to_n has one part that returns the value of n, and one\
    \ part that returns the value of n.\n\nThe function sum_to_n has one part that\
    \ returns the value of n, and one part that returns the value of n.\n\nThe function\
    \ sum_to_n ", "\n  n <- n\n  n <- ifelse(n < 1, 0, n)\n  n <- ifelse(n > 0, n,\
    \ 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ < 0, 0, n)\n  n <- ifelse(n > 0, n, 0)\n  n ", "\n  n <- n + 1\n  if(n == 1)\
    \ return(1)\n  return(sum_to_n(n-1))\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(1000000000020)\n</cell>\n<cell",
  "\n  n <- n + 1\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n\
    }\n", "\n  n <- as.integer(n)\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum +\
    \ i\n  }\n  return(sum)\n}\n", "\n  n <- n + 1\n  if(n == 1) return(1)\n  return(sum_to_n(n-1))\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nThe function sum_to_n is recursive,\
    \ meaning it calls itself to compute the sum of a number. Let's see how it works:\n\
    \n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell", "\n  n\
    \ <- n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n > 1e6, 1e6, n)\n  n <- ifelse(n\
    \ > 1e9, 1e9, n)\n  n <- ifelse(n > 1e12, 1e12, n)\n  n <- ifelse(n > 1e15, 1e15,\
    \ n)\n  n <- ifelse(n > 1e18, 1e18, n)\n  n <- ifelse(n > 1e21, 1e21, n)\n  n\
    \ <- ifelse(n > 1e24, 1e24, n)\n  n <- ifelse(n > 1e27, 1e27, n)\n  n <- ifelse(n\
    \ > 1e30, 1e30, n)\n  n <- ifelse(n > 1e33, 1e33, n)\n  n <- ifelse(n > 1e36,\
    \ 1e36, n)\n  n <- ifelse(n > 1e39, 1e39, n)\n  n <- ifelse(n > 1e42, 1e42, n)\n\
    \  n <- ifelse(n > 1e45, 1e45, n)\n  n <- ifelse(n > 1e48, 1e48, n)\n  n <- ifelse(n\
    \ > 1e51, 1e51, n)\n  n <- ifelse(n > 1e54, 1e54, n)\n  n <- ifelse(n > 1e57,\
    \ 1e57, n)\n  n <- ifelse(n > 1e60, 1e60, n)\n  n <- ifelse(n > 1e63, 1e63, n)\n\
    \  n <- ifelse(n > 1e66, 1e66, n)\n  n <- ifelse(n > 1e69, 1e69, n)\n  n <- ifelse(n\
    \ > 1e72, 1e72, n)\n  n <- ifelse(n > 1e75, 1e75, n)\n  n <- ifelse(n > 1e78,\
    \ 1e78, n)\n  n <- ifelse(n > 1e81, 1e81, n)\n  n <- ifelse(n > 1e84, 1e84, n)\n\
    \  n <- ifelse(n > 1e87, 1e87, n)\n  n <- ifelse(n > 1e90, 1e90, n)\n  n <- ifelse(n\
    \ > 1e93, 1e93, n)\n  n <- ifelse(n > 1e96, 1e96, n)\n  n <- ifelse(n > 1e99,\
    \ 1e99, n)\n  n <- ifelse(n > 1e102, 1e102, n)\n  n <- ifelse(n > 1e105, 1e105,\
    \ n)\n  n <- ifelse(n > 1e108, 1e108, n)\n  n <- ifelse(n > 1e", "\n  return(sum(1:n))\n\
    }\n</cell>\n<text>\nNow let's test our sum_to_n function by summing up all numbers\
    \ from 1 to 30.\n\n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n<text>\nGreat! Now\
    \ let's write a function that computes the factorial of a given number.\n\n\n\
    </text>\n<cell>\nfactorial <- function(n) {\n  return(factorial(n-1))\n}\n</cell>\n\
    <text>\nLet's test our factorial function by computing the factorial of 7.\n\n\
    \n</text>\n<cell>\nfactorial(7)\n</cell>\n<text>\nExcellent! But what happens\
    \ when we try to compute the factorial of 0? Try it out!\n\n\n</text>\n<cell>\n\
    factorial(0)\n</cell>\n<text>\nYou'll get an error because 0! is undefined. Can\
    \ you figure out why?\n\nRemember, that in mathematics, factorial of a number\
    \ $n$ is equal to $n!$, where $n$ is an integer greater than or equal to 0.\n\n\
    To fix this, we can use a conditional statement to check if $n$ is equal to 0.\n\
    \n\n</text>\n<cell>\nfactorial <- function(n) {\n  if(n > 0) {\n    return(factorial(n-1))\n\
    \  } else {\n    return(1)\n  }\n}\n</cell>\n<text>\nNow let's test our factorial\
    \ function by computing the factorial of 0.\n\n\n</text>\n<cell>\nfactorial(0)\n\
    </cell>\n<text>\nHmmm... this doesn't look right. Can you figure out why?\n\n\
    Remember, that in mathematics, factorial of a number $n$ is equal to $n!$, where\
    \ $n$ is an integer greater than or equal to 0.\n\nTo fix this, we can use a conditional\
    \ statement to check if $n$ is equal to 0.\n\n\n</text>\n<cell>\nfactorial <-\
    \ function(n) {\n  if(n > 0) {\n    return(factorial(n-1))\n  } else {\n    return(1)\n\
    \  }\n}\n</cell>\n<text>\nNow let's test our factorial function by computing the\
    \ factorial of 0.\n\n\n</text>\n<cell>\nfactorial(0)\n</cell>\n<text>\nHmmm...\
    \ this doesn't look right. Can you figure out why?\n\nRemember, that in mathematics,\
    \ factorial of a number $n$ is equal to $n!$, where $n$ is an integer greater\
    \ than or equal to 0.\n\nTo fix this, we can use a conditional statement to check\
    \ if $n$ is equal to 0.\n\n\n</text>\n<cell>\nfactorial <- function(n) {\n", "\n\
    \  n <- n + 1\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  ", "\n  n <- n + 1\n  sum <- 0\n  i <-\
    \ 1\n  repeat {\n    sum <- sum + i\n    i <- i + 1\n    if (i > n) break\n  }\n\
    \  sum\n}\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n numbers of the Fibonacci sequence.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n\
    \  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns a vector where each element is the\
    \ sum of the squares of the elements in the original vector.\n\n\n</text>\n<cell>",
  "\n  n <- n + 1\n  return(n + (n - 1)/2)\n}\n</cell>\n<text>\nExercise: Write a\
    \ function that returns the sum of the first n numbers of a fibonacci sequence.\
    \ Hint: Use a recursive function.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  return(sum(1:n))\n\
    }\n</cell>\n<text>\nNow let's use our sum_to_n function to sum the first n numbers\
    \ in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can\
    \ also use sum_to_n to find the sum of the first n numbers in our dataset.\n\n\
    \n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can also use sum_to_n to\
    \ find the sum of the first n numbers in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nWe can also use sum_to_n to find the sum of the first n numbers\
    \ in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can\
    \ also use sum_to_n to find the sum of the first n numbers in our dataset.\n\n\
    \n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can also use sum_to_n to\
    \ find the sum of the first n numbers in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nWe can also use sum_to_n to find the sum of the first n numbers\
    \ in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can\
    \ also use sum_to_n to find the sum of the first n numbers in our dataset.\n\n\
    \n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can also use sum_to_n to\
    \ find the sum of the first n numbers in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nWe can also use sum_to_n to find the sum of the first n numbers\
    \ in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can\
    \ also use sum_to_n to find the sum of the first n numbers in our dataset.\n\n\
    \n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can also use sum_to_n to\
    \ find the sum of the first n numbers in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nWe can also use sum_to_n to find the sum of the first n numbers\
    \ in our dataset.\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can\
    \ also use sum_to_n to find the sum of the first n numbers in our dataset.\n\n\
    \n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nWe can also use sum_to_n to\
    \ find the sum of the first n numbers in ", "\n  n <- n + 1\n  return(\n    sum(\n\
    \      c(\n        1,\n        sum_to_n(n - 1)\n      )\n    )\n  )\n}\n", "\n\
    \  n <- n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n, 2)\n  n <- ifelse(n\
    \ < 3, n, 3)\n  n <- ifelse(n < 4, n, 4)\n  n <- ifelse(n < 5, n, 5)\n  n <- ifelse(n\
    \ < 6, n, 6)\n  n <- ifelse(n < 7, n, 7)\n  n <- ifelse(n < 8, n, 8)\n  n <- ifelse(n\
    \ < 9, n, 9)\n  n <- ifelse(n < 10, n, 10)\n  n <- ifelse(n < 11, n, 11)\n  n\
    \ <- ifelse(n < 12, n, 12)\n  n <- ifelse(n < 13, n, 13)\n  n <- ifelse(n < 14,\
    \ n, 14)\n  n <- ifelse(n < 15, n, 15)\n  n <- ifelse(n < 16, n, 16)\n  n <- ifelse(n\
    \ < 17, n, 17)\n  n <- ifelse(n < 18, n, 18)\n  n <- ifelse(n < 19, n, 19)\n \
    \ n <- ifelse(n < 20, n, 20)\n  n <- ifelse(n < 21, n, 21)\n  n <- ifelse(n <\
    \ 22, n, 22)\n  n <- ifelse(n < 23, n, 23)\n  n <- ifelse(n < 24, n, 24)\n  n\
    \ <- ifelse(n < 25, n, 25)\n  n <- ifelse(n < 26, n, 26)\n  n <- ifelse(n < 27,\
    \ n, 27)\n  n <- ifelse(n < 28, n, 28)\n  n <- ifelse(n < 29, n, 29)\n  n <- ifelse(n\
    \ < 30, n, 30)\n  n <- ifelse(n < 31, n, 31)\n  n <- ifelse(n < 32, n, 32)\n \
    \ n <- ifelse(n < 33, n, 33)\n  n <- ifelse(n < 34, n, 34)\n  n <- ifelse(n <\
    \ 35, n, 35)\n  n <- ifelse(n < 36, n, 36)\n  n <- ifelse(n < 37, n, 37)\n  n\
    \ <- ifelse(n < 38, n, 38)\n  n <- ifelse(n < 39, n, 39)\n  n <- ifelse(n < 40,\
    \ n, 40)\n  n <- ifelse(n < 41, n, 41)\n  n <- ifelse(n < 42, n, 42)\n  n <- ifelse(n\
    \ < 43, n, 43)\n  n <- ifelse(n < 44, n, 44)\n  n <- if", "\n  n <- as.integer(n)\n\
    \  n <- ifelse(n < 1, n, 1)\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n\
    \  }\n  return(sum)\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you so much!\
    \ This was very helpful.\n<|/ c |>\n<| a |>\n<code>\nsum_to_n <- function(n) {\n\
    \  n <- as.integer(n)\n  n <- ifelse(n < 1, n, 1)\n  sum <- 0\n  for(i in 1:n)\
    \ {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/ a tags=r dscore=2\
    \ |>\n<| c |>\nThank you so much! This was very helpful.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ < 1, n, 1)\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- as.integer(n)\n  n <- ifelse(n < 1, n, 1)\n  sum <- 0\n  for(i in\
    \ 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/ a tags=r |>\n\
    <| a |>\n<code>\nsum_to_n <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ < 1, n, 1)\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n\
    }\n</code>\n<|/ a tags=r dscore=2 |>\n<| a |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- as.integer(n)\n  n <- ifelse(n < 1, n, 1)\n  sum <- 0\n  for(i in\
    \ 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/ a tags=r dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_to_n <- function(n) {\n  n <- as.integer(n)\n\
    \  n <- ", "\n  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n\
    \  sum(1:n)\n}\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. Test\
    \ your function on $n=10$.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <- n *\
    \ 3 + 1\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that sums numbers\
    \ from 1 to n but stops when the sum is greater than n.\n\n\n</text>\n<cell>",
  "\n  n <- n + 1\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n\
    }\n</cell>\n<cell>", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n",
  "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise: Write a function that takes a number n and returns\
    \ the sum of all numbers from 1 to n squared.\n\n\n</text>\n<cell>", "\n  n <-\
    \ n + 1\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=recursion,r,algorithm |>\n<code>\nsum_to_n <- function(n) {\n\
    \  if(n == 1) 1\n  else n * sum_to_n(n-1)\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nPlease add some explanation to your answer such that others can learn from\
    \ it\n<|/ c |>\n<| c |>\nThis doesn't answer the question as asked.\n<|/ c |>\n\
    <| a tags=recursion,r,algorithm |>\n<code>\nsum_to_n <- function(n){\n  if(n ==\
    \ 1) 1\n  else n * sum_to_n(n-1)\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,r,algorithm\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n}\n</code>\n<|/ a tags=recursion,r,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_to_n <- function(n) {\n  if(n == 1) 1\n  else\
    \ n * sum_to_n(n-1)\n}\n</code>\n<|/ a tags=recursion,r,algorithm |>\n<| a |>\n\
    <code>\nsum_to_n <- function(n) {\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n\
    }\n</code>\n<|/ a tags=recursion,r,algorithm dscore=0 |>\n<| a tags=recursion,r,algorithm\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nsum_to_n <- function(n) {\n  if(n\
    \ == 1) 1\n  else n * sum_to_n(n-1)\n}\n</code>\n<|/ a dscore=0 tags=recursion,r,algorithm\
    \ |>\n<| a tags=recursion,r,algorithm |>\n<code>\nsum_to_n <- function(n) {\n\
    \  if(n == 1) 1\n  else n * sum_to_n(n-1)\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n\
    }\n", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n</cell>\n<text>\n\
    Now let's test our sum_to_n function:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <text>\nWe can also test it on other numbers:\n\n\n</text>\n<cell>\nsum_to_n(20)\n\
    </cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the numbers from 1\
    \ to n squared.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  if(n == 1) return(1)\n\
    \  return(sum_to_n(n-1))\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(1000000000020)\n</cell>\n<cell",
  "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<cell>", "\n\
    \  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <- n + 1\n\
    \  n <- n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <- as.integer(n)\n  if(n\
    \ <= 1) return(n)\n  return(sum(1:n))\n}\n", "\n  n <- n + 1\n  return(n %/% 10\
    \ * 10 + n %% 10)\n}\n</cell>\n<text>\nThe sum_to_n function above is very simple,\
    \ but it is easy to understand how it works. Let's try it out on some examples:\n\
    \n\n</text>\n<cell>\nsum_to_n(1)\nsum_to_n(2)\nsum_to_n(3)\nsum_to_n(4)\nsum_to_n(5)\n\
    sum_to_n(6)\nsum_to_n(7)\nsum_to_n(8)\nsum_to_n(9)\nsum_to_n(10)\nsum_to_n(11)\n\
    sum_to_n(12)\nsum_to_n(13)\nsum_to_n(14)\nsum_to_n(15)\nsum_to_n(16)\nsum_to_n(17)\n\
    sum_to_n(18)\nsum_to_n(19)\nsum_to_n(20)\nsum_to_n(21)\nsum_to_n(22)\nsum_to_n(23)\n\
    sum_to_n(24)\nsum_to_n(25)\nsum_to_n(26)\nsum_to_n(27)\nsum_to_n(28)\nsum_to_n(29)\n\
    sum_to_n(30)\nsum_to_n(31)\nsum_to_n(32)\nsum_to_n(33)\nsum_to_n(34)\nsum_to_n(35)\n\
    sum_to_n(36)\nsum_to_n(37)\nsum_to_n(38)\nsum_to_n(39)\nsum_to_n(40)\nsum_to_n(41)\n\
    sum_to_n(42)\nsum_to_n(43)\nsum_to_n(44)\nsum_to_n(45)\nsum_to_n(46)\nsum_to_n(47)\n\
    sum_to_n(48)\nsum_to_n(49)\nsum_to_n(50)\nsum_to_n(51)\nsum_to_n(52)\nsum_to_n(53)\n\
    sum_to_n(54)\nsum_to_n(55)\nsum_to_n(56)\nsum_to_n(57)\nsum_to_n(58)\nsum_to_n(59)\n\
    sum_to_n(60)\nsum_to_n(61)\nsum_to_n(62)\nsum_to_n(63)\nsum_to_n(64)\nsum_to_n(65)\n\
    sum_to_n(66)\nsum_to_n(67)\nsum_to_n(68)\nsum_to_n(69)\nsum_to_n(70)\nsum_to_n(71)\n\
    sum_to_n(72)\nsum_to_n(73)\nsum_to_n(74)\nsum_to_n(75)\nsum_to_n(76)\nsum_to_n(77)\n\
    sum_to_n(78)\nsum_to_n(79)\nsum_to_n(80)\nsum_to_", "\n  n <- n + 1\n  n <- n\
    \ * 3 + 1\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\n\
    The function sum_to_n takes an integer argument n, and returns the sum of the\
    \ first n numbers: 1, 2, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\n\n</text>\n\
    <text>\nExercise\nWrite a function that returns the sum of the first n numbers:\
    \ 1, 2, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\n\n</text>\n<cell>", "\n  n <-\
    \ n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n * 2, n * 3)\n  n <- ifelse(n\
    \ < 3, n * 5, n * 7)\n  n <- ifelse(n < 5, n * 10, n * 13)\n  n <- ifelse(n <\
    \ 7, n * 15, n * 17)\n  n <- ifelse(n < 10, n * 20, n * 25)\n  n <- ifelse(n <\
    \ 15, n * 30, n * 35)\n  n <- ifelse(n < 20, n * 40, n * 45)\n  n <- ifelse(n\
    \ < 30, n * 50, n * 55)\n  n <- ifelse(n < 40, n * 60, n * 65)\n  n <- ifelse(n\
    \ < 50, n * 70, n * 75)\n  n <- ifelse(n < 60, n * 80, n * 85)\n  n <- ifelse(n\
    \ < 70, n * 90, n * 95)\n  n <- ifelse(n < 80, n * 100, n * 105)\n  n <- ifelse(n\
    \ < 90, n * 110, n * 115)\n  n <- ifelse(n < 100, n * 120, sum_to_n(n - 1))\n\
    \  n\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `sum_to_n(100)`\
    \ returns `5050` but `sum_to_n(100)` should return `100`.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've edited my answer to fix it.\n<|/ c |>\n<| a tags=recursion,r\
    \ |>\nThis can be done with R's recusive functions. \n<code>\nsum_to_n <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\nThe other answers here are great, but I thought\
    \ I'd add my own solution, using R's recusive functions. \n<code>\nsum_to_n <-\
    \ function(n) {\n  if(n <= 1) return(n)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n\
    <|/ a tags=recursion,r |>\n<| a tags=recursion,r |>\n<code>\nsum_to_n <- function(n){\n\
    \  if(n <= 1) return(n)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=recursion,r |>\n<code>\nsum_to_n <- function(n){\n  if(n <= 1)\
    \ return(n)\n  ", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n\
    <text>\nLet's test our sum_to_n function by summing up all the numbers from 1\
    \ to 30.\n\n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n<text>\nExercise: Write\
    \ a function that sums up all the numbers from 1 to n squared.\n\n\n</text>\n\
    <cell>", "\n  n <- n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n ", "\n  n <- as.integer(n)\n  if(n\
    \ < 1) stop(\"n must be positive\")\n  if(n > 100) stop(\"n must be less than\
    \ 100\")\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Your code works well for small numbers,\
    \ but for large numbers it doesn't work. For example, if I input n = 1000000000,\
    \ it returns n = 1000000000, which is wrong.\n<|/ c |>\n<| c |>\nI tested it on\
    \ RStudio and it works fine. Did you try it on R?\n<|/ c |>\n<| c |>\nYes, I tested\
    \ it on RStudio. It works fine, but when I run it on R it returns n = 1000000000,\
    \ which is wrong.\n<|/ c |>\n<| c |>\nI tested it on RStudio and it works fine.\
    \ Did you try it on R?\n<|/ c |>\n<| c |>\nYes, I tested it on RStudio. It works\
    \ fine, but when I run it on R it returns n = 1000000000, which is wrong.\n<|/\
    \ c |>\n<| a tags=r,sum,function |>\nHere's a solution using Rcpp:\n<code>", "\n\
    \  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n\
    \  return(n)\n}\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ factorial of a number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120.\n\
    \nHint: Use a recursive function.\n\n\n</text>\n<cell>\nfactorial <- function(n)\
    \ {\n  if (n == 1) return(1)\n  return(n * factorial(n-1))\n}\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the Fibonacci number. For example, Fibonacci(10)\
    \ = 10, 10, 8.\n\nHint: Use a recursive function.\n\n\n</text>\n<cell>\nfibonacci\
    \ <- function(n) {\n  if (n == 1) return(1)\n  return(fibonacci(n-1) + fibonacci(n-2))\n\
    }\n</cell>\n<text>\nExercise 4\nWrite a function that returns the first n Fibonacci\
    \ numbers. For example, Fibonacci(10) = 10, 10, 8.\n\nHint: Use a recursive function.\n\
    \n\n</text>\n<cell>\nfibonacci <- function(n) {\n  if (n == 1) return(1)\n  return(fibonacci(n-1)\
    \ + fibonacci(n-2))\n}\n</cell>\n<text>\nExercise 5\nWrite a function that returns\
    \ the first n Fibonacci numbers. For example, Fibonacci(10) = 10, 10, 8.\n\nHint:\
    \ Use a recursive function.\n\n\n</text>\n<cell>\nfibonacci <- function(n) {\n\
    \  if (n == 1) return(1)\n  return(fibonacci(n-1) + fibonacci(n-2))\n}\n</cell>\n\
    <text>\nExercise 6\nWrite a function that returns the first n Fibonacci numbers.\
    \ For example, Fibonacci(10) = 10, 10, 8.\n\nHint: Use a recursive function.\n\
    \n\n</text>\n<cell>\nfibonacci <- function(n) {\n  if (n == 1) return(1)\n  return(fibonacci(n-1)\
    \ + fibonacci(n-2))\n}\n</cell>\n<text>\nExercise 7\nWrite a function that returns\
    \ the first n Fibonacci numbers. For example, Fibonacci(10) = 10, 10, 8.\n\nHint:\
    \ Use a recursive function.\n\n\n</text>\n<cell>\nfibonacci <- function(n) {\n\
    \  if (n == 1) return(1)\n  return(fibonacci(n-1) + fibonacci(n-2))\n}\n</cell>\n\
    <text>", "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n\
    }\n", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns a vector where each element is the sum of the previous two elements.\n\
    \n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n\
    c(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\nc(3, 6, 9)\n>>> sum_of_two_elements(c(1,2,3))\n",
  "\n  n <- n + 1\n  return(sum(1:n))\n}\n</cell>\n<cell>", "\n  n <- n + 1\n  n <-\
    \ n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers as an argument and\
    \ returns the sum of the squares of the numbers in the vector.\n\n\n</text>\n\
    <cell>", "\n  return(sum(1:n))\n}\n</cell>\n<text>\nThe function sum_to_n takes\
    \ an integer argument n and returns the sum of the integers from 1 to n.\n\n\n\
    </text>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the integers from 1\
    \ to n that are divisible by 3.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  ", "\n  n <- n + 1\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nRecursion\nA recursive function\
    \ calls itself. When a recursive function is called it passes itself as an argument\
    \ to the function it calls itself. This continues until it reaches the base case\
    \ where it stops calling itself.\n\nThe base case is when there are no more arguments.\
    \ In this case it returns 1.\n\nThe recursive case is when there is one more argument\
    \ to pass to the function it calls itself. In this case it multiplies the argument\
    \ by itself and passes the result to the function it calls itself. This continues\
    \ until it reaches the base case where it stops calling itself.\n\nThe base case\
    \ is when there are no more arguments. In this case it returns 1.\n\nThe recursive\
    \ case is when there is one more argument to pass to the function it calls itself.\
    \ In this case it multiplies the argument by itself and passes the result to the\
    \ function it calls itself. This continues until it reaches the base case where\
    \ it stops calling itself.\n\nThe base case is when there are no more arguments.\
    \ In this case it returns 1.\n\nThe recursive case is when there is one more argument\
    \ to pass to the function it calls itself. In this case it multiplies the argument\
    \ by itself and passes the result to the function it calls itself. This continues\
    \ until it reaches the base case where it stops calling itself.\n\nThe base case\
    \ is when there are no more arguments. In this case it returns 1.\n\nThe recursive\
    \ case is when there is one more argument to pass to the function it calls itself.\
    \ In this case it multiplies the argument by itself and passes the result to the\
    \ function it calls itself. This continues until it reaches the base case where\
    \ it stops calling itself.\n\nThe base case is when there are no more arguments.\
    \ In this case it returns 1.\n\nThe recursive case is when there is one more argument\
    \ to pass to the function it calls itself. In this case it multiplies the argument\
    \ by itself and passes the result to the function it calls itself. This continues\
    \ until it reaches the base case where it stops calling itself.\n\nThe base case\
    \ is when there are no more arguments. In this case it returns 1.\n\nThe recursive\
    \ case is when there is one more argument to pass to the function it calls itself.\
    \ In this case it multiplies the argument by itself and passes the result to the\
    \ function it calls itself. This continues until it reaches the base case where\
    \ it stops calling itself.\n\nThe base case is when there are no more arguments.\
    \ In this case it returns 1.\n\nThe recursive case is when there is one more argument\
    \ to pass to the function it calls ", "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n\
    \  if(n == 2) return(2)\n  if(n == 3) return(3)\n  if(n == 4) return(4)\n  if(n\
    \ == 5) return(5)\n  if(n == 6) return(6)\n  if(n == 7) return(7)\n  if(n == 8)\
    \ return(8)\n  if(n == 9) return(9)\n  if(n == 10) return(10)\n  if(n == 11) return(11)\n\
    \  if(n == 12) return(12)\n  if(n == 13) return(13)\n  if(n == 14) return(14)\n\
    \  if(n == 15) return(15)\n  if(n == 16) return(16)\n  if(n == 17) return(17)\n\
    \  if(n == 18) return(18)\n  if(n == 19) return(19)\n  if(n == 20) return(20)\n\
    \  if(n == 21) return(21)\n  if(n == 22) return(22)\n  if(n == 23) return(23)\n\
    \  if(n == 24) return(24)\n  if(n == 25) return(25)\n  if(n == 26) return(26)\n\
    \  if(n == 27) return(27)\n  if(n == 28) return(28)\n  if(n == 29) return(29)\n\
    \  if(n == 30) return(30)\n  if(n == 31) return(31)\n  if(n == 32) return(32)\n\
    \  if(n == 33) return(33)\n  if(n == 34) return(34)\n  if(n == 35) return(35)\n\
    \  if(n == 36) return(36)\n  if(n == 37) return(37)\n  if(n == 38) return(38)\n\
    \  if(n == 39) return(39)\n  if(n == 40) return(40)\n  if(n == 41) return(41)\n\
    \  if(n == 42) return(42)\n  if(n == 43) return(43)\n  if(n == 44) return(44)\n\
    \  if(n == 45) return(45)\n  if(n == 46) return(46)\n  if(n == 47) return(47)\n\
    \  if(n == 48) return(48)\n  if(n == 49) return(49)\n  if(n == 50) return(50)\n\
    \  if(n == 51) return(5", "\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n</code>\n<|/\
    \ a tags=r,function,loops |>\n<| c |>\nThanks for your answer! I appreciate it.\
    \ I tried your function and it works. However, when I try to apply it to my data\
    \ set it gives me the following error: `Error in FUN(X[[i]], ...) : \n  only defined\
    \ on a data frame with all numeric variables`. Any idea why this is?\n<|/ c |>\n\
    <| c |>\nI figured it out. I had to change `sum_to_n` to `sum_to_n<-function(x){\n\
    \  x <- as.numeric(x)\n  x <- x + 1\n  x <- sum(x)\n  x\n}`\n<|/ c |>\n<| c |>\n\
    Yes, I forgot to add `as.numeric` when converting `x` to a numeric vector. Glad\
    \ you figured it out!\n<|/ c |>\n<| a tags=r,function,loops |>\nHere's a solution\
    \ using R's vectorized functions:\n<code>\nsum_to_n <- function(n) {\n  n <- n\
    \ + 1\n  n <- sum(n)\n  n\n}\n\nsum_to_n(10)", "\n  n <- n + 1\n  n <- n * n\n\
    \  n <- n / n\n  return(n)\n}\n</cell>\n<cell>", "\n  n <- n + 1\n  return(n -\
    \ (n %% 2))\n}\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the first\
    \ n numbers of the Fibonacci sequence. \nThe Fibonacci sequence is defined by\
    \ the recurrence relation:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1\
    \ = 1$. \nThe first few terms of the sequence are:\n\n$F_0 = 0$, $F_1 = 1$, $F_2\
    \ = 1$, $F_3 = 2$, $F_4 = 3$, and $F_5 = 5$.\n\nUsing the definition of the Fibonacci\
    \ sequence, we get the following recursive definition:\n\n$Fn = F{n-1} + F_{n-2}\
    \ + F_{n-3} + F_{n-4} + F_{n-5}$\n\nWrite a function that returns the first n\
    \ numbers of the Fibonacci sequence. \nThe Fibonacci sequence is defined by the\
    \ recurrence relation:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1\
    \ = 1$. \nThe first few terms of the sequence are:\n\n$F_0 = 0$, $F_1 = 1$, $F_2\
    \ = 1$, $F_3 = 2$, $F_4 = 3$, and $F_5 = 5$.\n\nUsing the definition of the Fibonacci\
    \ sequence, we get the following recursive definition:\n\n$Fn = F{n-1} + F_{n-2}\
    \ + F_{n-3} + F_{n-4} + F_{n-5}$\n\nWrite a function that returns the first n\
    \ numbers of the Fibonacci sequence. \nThe Fibonacci sequence is defined by the\
    \ recurrence relation:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1\
    \ = 1$. \nThe first few terms of the sequence are:\n\n$F_0 = 0$, $F_1 = 1$, $F_2\
    \ = 1$, $F_3 = 2$, $F_4 = 3$, and $F_5 = 5$.\n\nUsing the definition of the Fibonacci\
    \ sequence, we get the following recursive definition:\n\n", "\n  n <- as.integer(n)\n\
    \  if(n == 1) return(1)\n  return(sum(1:n))\n}\n</cell>\n<text>\nNow we can use\
    \ sum_to_n to calculate the sum of the first n numbers:\n\n\n</text>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the first n numbers, starting with number k.\n\n\n</text>\n<cell>", "\n \
    \ n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<text>\nThe\
    \ function sum_to_n takes an integer n and returns the sum of the first n natural\
    \ numbers.\n\n\n</text>\n<cell>\nsum_to_n(5)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes an integer n and returns the sum of the first n natural\
    \ numbers, modulo 100. For example, sum_to_n(5) should return 5 + 4 + 3 + 2 +\
    \ 1 = 15.\n\n\n</text>\n<cell>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <-\
    \ n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<text>\nExercise: Write a function\
    \ that takes an integer n and returns the sum of the first n natural numbers,\
    \ modulo 100. For example, sum_to_n(5) should return 5 + 4 + 3 + 2 + 1 = 15.\n\
    \n\n</text>\n<cell>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- n * n\n \
    \ n <- n / 2\n  return(n)\n}\n</cell>\n<text>\nExercise: Write a function that\
    \ takes an integer n and returns the sum of the first n natural numbers, modulo\
    \ 100. For example, sum_to_n(5) should return 5 + 4 + 3 + 2 + 1 = 15.\n\n\n</text>\n\
    <cell>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n\
    \  return(n)\n}\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ n and returns the sum of the first n natural numbers, modulo 100. For example,\
    \ sum_to_n(5) should return 5 + 4 + 3 + 2 + 1 = 15.\n\n\n</text>\n<cell>\nsum_to_n\
    \ <- function(n) {\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n\
    </cell>\n<text>\nExercise: Write a function that takes an integer n and returns\
    \ the sum of the first n natural numbers, modulo 100. For example, sum_to_n(5)\
    \ should return 5 + 4 + 3 + 2 + 1 = 15.\n\n\n</text>\n<cell>\nsum_to_n <- function(n)\
    \ {\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<text>\n\
    Exercise: Write a function that takes an integer n and returns the sum of the\
    \ first n natural numbers, modulo 100. For example, sum_to_n(5) should return\
    \ 5 + 4 + 3 + 2 + ", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n\
    }\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the factorial of a number.\n\n\
    \n</text>\n<cell>\nfactorial <- function(n) {\n  n <- n + 1\n  return(n)\n}\n\
    </cell>\n<cell>\nfactorial(30)\n</cell>\n<cell>\nfactorial(100)\n</cell>\n<cell>\n\
    factorial(5)\n</cell>\n<cell>\nfactorial(10)\n</cell>\n<cell>\nfactorial(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    \n\n</text>\n<cell>\nfactorial <- function(n) {\n  n <- n + 1\n  return(n)\n}\n\
    </cell>\n<cell>\nfactorial(30)\n</cell>\n<cell>\nfactorial(100)\n</cell>\n<cell>\n\
    factorial(5)\n</cell>\n<cell>\nfactorial(10)\n</cell>\n<cell>\nfactorial(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    \n\n</text>\n<cell>\nfactorial <- function(n) {\n  n <- n + 1\n  return(n)\n}\n\
    </cell>\n<cell>\nfactorial(30)\n</cell>\n<cell>\nfactorial(100)\n</cell>\n<cell>\n\
    factorial(5)\n</cell>\n<cell>\nfactorial(10)\n</cell>\n<cell>\nfactorial(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    \n\n</text>\n<cell>\nfactorial <- function(n) {\n  n <- n + 1\n  return(n)\n}\n\
    </cell>\n<cell>\nfactorial(30)\n</cell>\n<cell>\nfactorial(100)\n</cell>\n<cell>\n\
    factorial(5)\n</cell>\n<cell>\nfactorial(10)\n</cell>\n<cell>\nfactorial(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the ", "\n  n <- n +\
    \ 1\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n}\n</cell>\n<text>\nNow let's use\
    \ our sum_to_n function to compute the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nNow let's write a function that computes\
    \ the sum of the first n numbers to any number, including negative numbers:\n\n\
    \n</text>\n<cell>", "\n  n <- n + 1\n  sum <- 0\n  for(i in 1:n) {\n    sum <-\
    \ sum + i\n  }\n  return(sum)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>", "\n  n\
    \ <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<text>\nExercise:\
    \ Write a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. Test it by passing it a list of numbers from 1 to 10. Hint:\
    \ use the sum_to_n function you defined above.\n\n\n</text>\n<cell>", "\n  n <-\
    \ n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using any loops. I thought about using recursion, but I couldn't figure it out.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution. Hope it helps.\n<|/ c |>\n<|\
    \ c |>\nI added a recursive solution. Hope it helps.\n<|/ c |>\n<| a tags=r,recursion,algorithm\
    \ |>\nI like your solution, but I wonder if there is a way to do it without using\
    \ any loops. I thought about using recursion, but I couldn't figure it out.\n\n\
    Here's a recursive solution:\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n\
    \  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n\nsum_to_n(10)", "\n  n <- as.integer(n)\n\
    \  if(n <= 0) stop(\"n must be positive\")\n  if(n %% 2 == 0) stop(\"n must be\
    \ an odd number\")\n  sum <- 0\n  i <- 1\n  while(i <= n) {\n    sum <- sum +\
    \ i\n    i <- i + 1\n  }\n  return(sum)\n}\n", "\n  n <- as.integer(n)\n  sum\
    \ <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n", "\n \
    \ n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <- n + 1\n\
    \  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\n\
    sum_to_n(1000000000002)\n</cell>\n<cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\n\
    sum_to_n(1000000000004)\n</cell>\n<cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\n\
    sum_to_n(1000000000006)\n</cell>\n<cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\n\
    sum_to_n(1000000000008)\n</cell>\n<cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\n\
    sum_to_n(1000000000010)\n</cell>\n<cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\n\
    sum_to_n(1000000000012)\n</cell>\n<cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\n\
    sum_to_n(1000000000014)\n</cell>\n<cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\n\
    sum_to_n(1000000000016)\n</cell>\n<cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\n\
    sum_to_n(1000000000018)\n</cell>\n<cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>",
  "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</code>\n<|/ a tags=r,function,loops\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it! I didn't know that\
    \ you can do that in R. I'm still learning R and I didn't know that you can do\
    \ that in R. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I hope you enjoy learning\
    \ R. There are a lot of great resources out there. One of them is [this book](http://www.amazon.com/R-Language-Definitive-Guide/dp/1449319426/ref=sr_1_1?ie=UTF8&qid=1399479723&sr=8-1&keywords=R+Language+Definitive+Guide)\n\
    <|/ c |>\n<| c |>\nThanks again! I really appreciate it! I didn't know that you\
    \ can do that in R. I'm still learning R and I didn't know that you can do that\
    \ in R. Thanks again!\n<|/ c |>\n<| c |>\nI really appreciate it! I didn't know\
    \ that you can do that in R. I'm still learning R and I didn't know that you can\
    \ do that in R. Thanks again!\n<|/ c |>\n<| c |>\nI really appreciate it! I didn't\
    \ know that you can do that in R. I'm still learning R and I didn't know that\
    \ you can do that in R. Thanks again!\n<|/ c |>\n<| a tags=r,function,loops |>\n\
    The function you wrote is just an infinite loop. \n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</code>\nThe function\
    \ will never stop.\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I really\
    \ appreciate it! I didn't know that you can do that in R. I'm still learning R\
    \ and I didn't know that you can do that in R. Thanks again!\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe function you wrote is just an infinite loop. \n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</code>\nThe function\
    \ will never stop.", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n\
    }\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>", "\n\
    \  n <- n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n, 2)\n  n <- ifelse(n\
    \ < 3, n, 3)\n  n <- ifelse(n < 4, n, 4)\n  n <- ifelse(n < 5, n, 5)\n  n <- ifelse(n\
    \ < 6, n, 6)\n  n <- ifelse(n < 7, n, 7)\n  n <- ifelse(n < 8, n, 8)\n  n <- ifelse(n\
    \ < 9, n, 9)\n  n <- ifelse(n < 10, n, 10)\n  n <- ifelse(n < 11, n, 11)\n  n\
    \ <- ifelse(n < 12, n, 12)\n  n <- ifelse(n < 13, n, 13)\n  n <- ifelse(n < 14,\
    \ n, 14)\n  n <- ifelse(n < 15, n, 15)\n  n <- ifelse(n < 16, n, 16)\n  n <- ifelse(n\
    \ < 17, n, 17)\n  n <- ifelse(n < 18, n, 18)\n  n <- ifelse(n < 19, n, 19)\n \
    \ n <- ifelse(n < 20, n, 20)\n  n <- ifelse(n < 21, n, 21)\n  n <- ifelse(n <\
    \ 22, n, 22)\n  n <- ifelse(n < 23, n, 23)\n  n <- ifelse(n < 24, n, 24)\n  n\
    \ <- ifelse(n < 25, n, 25)\n  n <- ifelse(n < 26, n, 26)\n  n <- ifelse(n < 27,\
    \ n, 27)\n  n <- ifelse(n < 28, n, 28)\n  n <- ifelse(n < 29, n, 29)\n  n <- ifelse(n\
    \ < 30, n, 30)\n  n <- ifelse(n < 31, n, 31)\n  n <- ifelse(n < 32, n, 32)\n \
    \ n <- ifelse(n < 33, n, 33)\n  n <- ifelse(n < 34, n, 34)\n  n <- ifelse(n <\
    \ 35, n, 35)\n  n <- ifelse(n < 36, n, 36)\n  n <- ifelse(n < 37, n, 37)\n  n\
    \ <- ifelse(n < 38, n, 38)\n  n <- ifelse(n < 39, n, 39)\n  n <- ifelse(n < 40,\
    \ n, 40)\n  n <- ifelse(n < 41, n, 41)\n  n <- ifelse(n < 42, n, 42)\n  n <- ifelse(n\
    \ < 43, n, 43)\n  n <- ifelse(n < 44, n, 44)\n  n <- if", "\n  n <- n + 1\n  if(n\
    \ == 1) return(1)\n  return(sum_to_n(n-1))\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n <= 0) return(0)\n  return(sum(1:n))\n}\n", "\n  n <- as.integer(n)\n \
    \ return(sum(1:n))\n}\n", "\n  n <- as.integer(n)\n  if(n <= 0) return(0)\n  if(n\
    \ <= 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n", "\n  n <- n + 1\n  sum\
    \ <- 0\n  i <- 1\n  while (i <= n) {\n    sum <- sum + i\n    i <- i + 1\n  }\n\
    \  sum\n}\n", "\n  n <- n + 1\n  if(n == 1) return(1)\n  return(sum_to_n(n-1))\n\
    }\n</cell>\n<text>\nNow let's use our sum_to_n function to sum the numbers from\
    \ 1 to $n$:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nNow let's write\
    \ a function that sums the numbers from 1 to $n$ using recursion.\n\n\n</text>\n\
    <cell>", "\n  n <- n + 1\n  return(\n    sum(\n      1:n\n    )\n  )\n}\n</cell>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. Use a for\
    \ loop to do this.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  sum <- 0\n\
    \  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</cell>\n<cell>",
  "\n  n <- n + 1\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000001)\n</cell>\n\
    <cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\nsum_to_n(1000000000003)\n</cell>\n\
    <cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\nsum_to_n(1000000000005)\n</cell>\n\
    <cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\nsum_to_n(1000000000007)\n</cell>\n\
    <cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\nsum_to_n(1000000000009)\n</cell>\n\
    <cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\nsum_to_n(1000000000011)\n</cell>\n\
    <cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\nsum_to_n(1000000000013)\n</cell>\n\
    <cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\nsum_to_n(1000000000015)\n</cell>\n\
    <cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\nsum_to_n(1000000000017)\n</cell>\n\
    <cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\nsum_to_n(1000000000019)\n</cell>\n\
    <cell>\nsum", "\n  n <- n\n  n <- ifelse(n < 1, 0, n)\n  n <- ifelse(n < 2, n*(n-1),\
    \ n)\n  n <- ifelse(n < 3, n*(n-1)*(n-2), n)\n  n <- ifelse(n < 4, n*(n-1)*(n-2)*(n-3),\
    \ n)\n  n <- ifelse(n < 5, n*(n-1)*(n-2)*(n-3)*(n-4), n)\n  n <- ifelse(n < 6,\
    \ n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5), n)\n  n <- ifelse(n < 7, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6),\
    \ n)\n  n <- ifelse(n < 8, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7), n)\n \
    \ n <- ifelse(n < 9, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8), n)\n \
    \ n <- ifelse(n < 10, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9),\
    \ n)\n  n <- ifelse(n < 11, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10),\
    \ n)\n  n <- ifelse(n < 12, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11),\
    \ n)\n  n <- ifelse(n < 13, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12),\
    \ n)\n  n <- ifelse(n < 14, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13),\
    \ n)\n  n <- ifelse(n < 15, n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14),\
    \ n)", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise\nWrite a function that returns the sum\
    \ of the first n numbers of the Fibonacci sequence. Test it on n = 10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90, 100.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <-\
    \ n * n\n  n <- n / n\n  return(n)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- n * n\n  n <- n\
    \ / n\n  return(n)\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- n * n\n  n <- n\
    \ / n\n  return(n)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_to_n\
    \ <- function(n) {\n  n <- n + 1\n  n <- n * n\n  n <- n / n\n  return(n)\n}\n\
    </code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_to_n <- function(n) {\n\
    \  n <- n + 1\n  n <- n * n\n  n <- n / n\n  return(n)\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <-\
    \ n * n\n  n <- n / n\n  return(n)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- n * n\n  n <- n / n\n\
    \  return(n)\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- n * n\n  n <- n / n\n\
    \  return(n)\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)",
  "\n  n <- n + 1\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n}\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that returns the first\
    \ n numbers of the Fibonacci sequence. \nThe Fibonacci sequence is defined by\
    \ the recurrence relation:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1\
    \ = 1$.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  return(n %/% sum_to_n(n - 1))\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above\
    \ is recursive. Let's see how it works:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(10)\n</cell", "\n  n <- as.integer(n)\n\
    \  n <- ifelse(n < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 0, n,\
    \ 1)\n  n <- ifelse(n > 1, n * n, 1)\n  n <- ifelse(n > 2, n * n * n, 1)\n  n\
    \ <- ifelse(n > 3, n * n * n * n, 1)\n  n <- ifelse(n > 4, n * n * n * n * n,\
    \ 1)\n  n <- ifelse(n > 5, n * n * n * n * n * n, 1)\n  n <- ifelse(n > 6, n *\
    \ n * n * n * n * n * n, 1)\n  n <- ifelse(n > 7, n * n * n * n * n * n * n *\
    \ n, 1)\n  n <- ifelse(n > 8, n * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n\
    \ > 9, n * n * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 10, n * n\
    \ * n * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 11, n * n * n * n\
    \ * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 12, n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 13, n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 14, n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 15, n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n, 1)\n  n\
    \ <- ifelse(n > 16, n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n, 1)\n  n <- ifelse(n > 17, n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 18, n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n, 1)\n  n\
    \ <- ifelse(n > 19, n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n, 1)\n  n <- ifelse(n > 20, n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n, 1)\n  n <- ifelse(n\
    \ > 21, n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n, 1)\n  n <- ifelse(n > ", "\n  n <- n + 1\n  return(n %/% 10)\n\
    }\n", "\n  n <- n + 1\n  return(\n    sum(\n      1:n\n    )\n  )\n}\n</cell>\n\
    <cell>", "\n  n <- n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n * 2,\
    \ n * 3)\n  n <- ifelse(n < 3, n * 5, n * 7)\n  n <- ifelse(n < 5, n * 10, n *\
    \ 13)\n  n <- ifelse(n < 7, n * 15, n * 17)\n  n <- ifelse(n < 10, n * 20, n *\
    \ 25)\n  n <- ifelse(n < 15, n * 30, n * 35)\n  n <- ifelse(n < 20, n * 40, n\
    \ * 45)\n  n <- ifelse(n < 30, n * 50, n * 55)\n  n <- ifelse(n < 40, n * 60,\
    \ n * 65)\n  n <- ifelse(n < 50, n * 70, n * 75)\n  n <- ifelse(n < 60, n * 80,\
    \ n * 85)\n  n <- ifelse(n < 70, n * 90, n * 95)\n  n <- ifelse(n < 80, n * 100,\
    \ n * 100)\n  n\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very elegant and I like it, but I still don't understand why\
    \ my code doesn't work. Can you please explain why my code doesn't work?\n<|/\
    \ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your explanation. Now I understand why my code doesn't work. Your solution\
    \ is very elegant and I like it, but I still don't understand why my code doesn't\
    \ work. Can you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    I added an explanation to the answer.\n<|/ c |>\n<| a dscore=2 |>\nThe problem\
    \ is that the function you pass to lapply is evaluated only once and only once,\
    \ before the list is created. So the function you pass to lapply is evaluated\
    \ only once and only once, before the list is created. So the function you pass\
    \ to lapply is evaluated only once and only once, before the list is created.\
    \ So the function you pass to lapply is evaluated only once and only once, before\
    \ the list is created. So the function you pass to lapply is evaluated only once\
    \ and only once, before the list is created. So the function you pass to lapply\
    \ is evaluated only once and only once, before the list is created. So the function\
    \ you pass to lapply is evaluated only once and only once, before the list is\
    \ created. So the function you pass to lapply is evaluated only once and ", "\n\
    \  n <- as.integer(n)\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + i\n  }\n\
    \  return(sum)\n}\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ n prime numbers. Use a for loop and a prime number test.\n\n\n</text>\n<cell>",
  "\n  n <- n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n, 2)\n  n <- ifelse(n\
    \ < 3, n, 3)\n  n <- ifelse(n < 4, n, 4)\n  n <- ifelse(n < 5, n, 5)\n  n <- ifelse(n\
    \ < 6, n, 6)\n  n <- ifelse(n < 7, n, 7)\n  n <- ifelse(n < 8, n, 8)\n  n <- ifelse(n\
    \ < 9, n, 9)\n  n <- ifelse(n < 10, n, 10)\n  n <- ifelse(n < 11, n, 11)\n  n\
    \ <- ifelse(n < 12, n, 12)\n  n <- ifelse(n < 13, n, 13)\n  n <- ifelse(n < 14,\
    \ n, 14)\n  n <- ifelse(n < 15, n, 15)\n  n <- ifelse(n < 16, n, 16)\n  n <- ifelse(n\
    \ < 17, n, 17)\n  n <- ifelse(n < 18, n, 18)\n  n <- ifelse(n < 19, n, 19)\n \
    \ n <- ifelse(n < 20, n, 20)\n  n <- ifelse(n < 21, n, 21)\n  n <- ifelse(n <\
    \ 22, n, 22)\n  n <- ifelse(n < 23, n, 23)\n  n <- ifelse(n < 24, n, 24)\n  n\
    \ <- ifelse(n < 25, n, 25)\n  n <- ifelse(n < 26, n, 26)\n  n <- ifelse(n < 27,\
    \ n, 27)\n  n <- ifelse(n < 28, n, 28)\n  n <- ifelse(n < 29, n, 29)\n  n <- ifelse(n\
    \ < 30, n, 30)\n  n <- ifelse(n < 31, n, 31)\n  n <- ifelse(n < 32, n, 32)\n \
    \ n <- ifelse(n < 33, n, 33)\n  n <- ifelse(n < 34, n, 34)\n  n <- ifelse(n <\
    \ 35, n, 35)\n  n <- ifelse(n < 36, n, 36)\n  n <- ifelse(n < 37, n, 37)\n  n\
    \ <- ifelse(n < 38, n, 38)\n  n <- ifelse(n < 39, n, 39)\n  n <- ifelse(n < 40,\
    \ n, 40)\n  n <- ifelse(n < 41, n, 41)\n  n <- ifelse(n < 42, n, 42)\n  n <- ifelse(n\
    \ < 43, n, 43)\n  n <- ifelse(n < 44, n, 44)\n  n <- if", "\n  n <- n + 1\n  n\
    \ <- n * n\n  n <- n / 2\n  n\n}\n", "\n  n <- as.integer(n)\n  if(n <= 0) stop(\"\
    n must be positive\")\n  if(n <= 1) 1\n  else n * sum_to_n(n - 1)\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like this solution, but I wonder if there's a way to do it\
    \ without recursion. I'm thinking about a recursive solution but I'm wondering\
    \ if there's a way to do it without recursion.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution that doesn't use recursion.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution that doesn't use recursion.\n<|/ c |>\n<| a dscore=2 |>\nHere's a recursive\
    \ solution that doesn't use recursion:\n<code>\nsum_to_n <- function(n) {\n  n\
    \ <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1) 1\n\
    \  else n * sum_to_n(n - 1)\n}\n</code>\n<|/ a tags=r,recursion,algorithm |>\n\
    <| c |>\nI like this solution, but I wonder if there's a way to do it without\
    \ recursion. I'm thinking about a recursive solution but I'm wondering if there's\
    \ a way to do it without recursion.\n<|/ c |>\n<| c |>\nI added a recursive solution\
    \ that doesn't use recursion.\n<|/ c |>\n<| a tags=r,recursion,algorithm |>\n\
    Here's a recursive solution that doesn't use recursion:\n<code>\nsum_to_n <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n  if(n <=\
    \ 1) 1\n  else n * sum_to_n(n - 1)\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI\
    \ like this solution, but I wonder if there's a way to do it without recursion.\
    \ I'm thinking about a recursive solution but I'm wondering if there's a way to\
    \ do it without recursion.\n<|/ c |>\n<| a |>\nHere's a recursive solution that\
    \ doesn't use recursion:\n<code>\nsum_to_n <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1) 1\n  else n * sum_to_n(n\
    \ - 1)\n}\n</code>\n<|/ a tags=r,recursion,algorithm dscore=2 |>\n<| a tags=r,recursion,algorithm\
    \ |>\nHere's a recursive solution that doesn't use recursion:\n<code>\nsum_to_n\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n <= 0) stop(\"", "\n  n <- n\n\
    \  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n, 2)\n  n <- ifelse(n < 3,\
    \ n, 3)\n  n <- ifelse(n < 4, n, 4)\n  n <- ifelse(n < 5, n, 5)\n  n <- ifelse(n\
    \ < 6, n, 6)\n  n <- ifelse(n < 7, n, 7)\n  n <- ifelse(n < 8, n, 8)\n  n <- ifelse(n\
    \ < 9, n, 9)\n  n <- ifelse(n < 10, n, 10)\n  n <- ifelse(n < 11, n, 11)\n  n\
    \ <- ifelse(n < 12, n, 12)\n  n <- ifelse(n < 13, n, 13)\n  n <- ifelse(n < 14,\
    \ n, 14)\n  n <- ifelse(n < 15, n, 15)\n  n <- ifelse(n < 16, n, 16)\n  n <- ifelse(n\
    \ < 17, n, 17)\n  n <- ifelse(n < 18, n, 18)\n  n <- ifelse(n < 19, n, 19)\n \
    \ n <- ifelse(n < 20, n, 20)\n  n <- ifelse(n < 21, n, 21)\n  n <- ifelse(n <\
    \ 22, n, 22)\n  n <- ifelse(n < 23, n, 23)\n  n <- ifelse(n < 24, n, 24)\n  n\
    \ <- ifelse(n < 25, n, 25)\n  n <- ifelse(n < 26, n, 26)\n  n <- ifelse(n < 27,\
    \ n, 27)\n  n <- ifelse(n < 28, n, 28)\n  n <- ifelse(n < 29, n, 29)\n  n <- ifelse(n\
    \ < 30, n, 30)\n  n <- ifelse(n < 31, n, 31)\n  n <- ifelse(n < 32, n, 32)\n \
    \ n <- ifelse(n < 33, n, 33)\n  n <- ifelse(n < 34, n, 34)\n  n <- ifelse(n <\
    \ 35, n, 35)\n  n <- ifelse(n < 36, n, 36)\n  n <- ifelse(n < 37, n, 37)\n  n\
    \ <- ifelse(n < 38, n, 38)\n  n <- ifelse(n < 39, n, 39)\n  n <- ifelse(n < 40,\
    \ n, 40)\n  n <- ifelse(n < 41, n, 41)\n  n <- ifelse(n < 42, n, 42)\n  n <- ifelse(n\
    \ < 43, n, 43)\n  n <- ifelse(n < 44, n, 44)\n  n <- if", "\n  n <- as.integer(n)\n\
    \  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n",
  "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n  sum <- 0\n\
    \  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1) 1\n  else n * sum_to_n(n\
    \ - 1)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum", "\n  n <- as.integer(n)\n  return(sum(1:n))\n}\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the number\
    \ of digits in $n$. For example, sum_to_n(100) should return 3.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n\
    \ > 1e6, 1e6, n)\n  n <- ifelse(n > 1e9, 1e9, n)\n  n <- ifelse(n > 1e12, 1e12,\
    \ n)\n  n <- ifelse(n > 1e15, 1e15, n)\n  n <- ifelse(n > 1e18, 1e18, n)\n  n\
    \ <- ifelse(n > 1e21, 1e21, n)\n  n <- ifelse(n > 1e24, 1e24, n)\n  n <- ifelse(n\
    \ > 1e27, 1e27, n)\n  n <- ifelse(n > 1e30, 1e30, n)\n  n <- ifelse(n > 1e33,\
    \ 1e33, n)\n  n <- ifelse(n > 1e36, 1e36, n)\n  n <- ifelse(n > 1e39, 1e39, n)\n\
    \  n <- ifelse(n > 1e42, 1e42, n)\n  n <- ifelse(n > 1e45, 1e45, n)\n  n <- ifelse(n\
    \ > 1e48, 1e48, n)\n  n <- ifelse(n > 1e51, 1e51, n)\n  n <- ifelse(n > 1e54,\
    \ 1e54, n)\n  n <- ifelse(n > 1e57, 1e57, n)\n  n <- ifelse(n > 1e60, 1e60, n)\n\
    \  n <- ifelse(n > 1e63, 1e63, n)\n  n <- ifelse(n > 1e66, 1e66, n)\n  n <- ifelse(n\
    \ > 1e69, 1e69, n)\n  n <- ifelse(n > 1e72, 1e72, n)\n  n <- ifelse(n > 1e75,\
    \ 1e75, n)\n  n <- ifelse(n > 1e78, 1e78, n)\n  n <- ifelse(n > 1e81, 1e81, n)\n\
    \  n <- ifelse(n > 1e84, 1e84, n)\n  n <- ifelse(n > 1e87, 1e87, n)\n  n <- ifelse(n\
    \ > 1e90, 1e90, n)\n  n <- ifelse(n > 1e93, 1e93, n)\n  n <- ifelse(n > 1e95,\
    \ 1e95, n)\n  n <- ifelse(n > 1e98, 1e98, n)\n  n <- ifelse(n > 1e101, 1e101,\
    \ n)\n  n <- ifelse(n > 1e104, 1e104, n)\n  n <- ifelse(n > 1e107, 1e107, n)\n",
  "\n  n <- as.integer(n)\n  if(n <= 0) return(0)\n  if(n <= 1) return(1)\n  return(sum_to_n(n\
    \ - 1) + 1)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  sum <- 0\n  i <-\
    \ 1\n  while (i <= n) {\n    sum <- sum + i\n    i <- i + 1\n  }\n  return(sum)\n\
    }\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n == 1) 1\n  else n * sum_to_n(n\
    \ - 1)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000",
  "\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n  sum <- 0\n  for(i in 1:n) {\n\
    \    sum <- sum + i\n  }\n  return(sum)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,for-loop |>\nThis can be done\
    \ using recursion. \n<code>\nsum_to_n <- function(n) {\n  if(n <= 1) return(n)\n\
    \  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI like\
    \ using functional programming in R. Here's a solution using purrr::accumulate:\n\
    <code>\nsum_to_n <- function(n) {\n  purrr::accumulate(n, ~.x + .y)\n}\n</code>\n\
    <|/ a tags=r,function,for-loop dscore=1 |>\n<| a tags=r,function,for-loop |>\n\
    I like using functional programming in R. Here's a solution using purrr::accumulate:\n\
    <code>\nsum_to_n <- function(n) {\n  purrr::accumulate(n, ~.x + .y)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n){\n  if(n==1)\
    \ return(n)\n  return(sum_to_n(n-1)+n)\n}\n</code>\n<|/ a tags=r,function,for-loop\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n) {\n  if(n==1) return(n)\n\
    \  return(sum_to_n(n-1)+n)\n}\n</code>\n<|/ a tags=r,function,for-loop |>\n<|\
    \ a dscore=1 |>\n<code>\nsum_to_n <- function(n) {\n  if(n==1) return(n)\n  return(sum_to_n(n-1)+n)\n\
    }\n</code>\n<|/ a tags=r,function,for-loop |>\n<| a dscore=1 |>\n<code>\nsum_to_n\
    \ <- function(n) {\n  if(n==1) return(n)\n  return(sum_to_n(n-1)+n)\n}\n</code>\n\
    <|/ a tags=r,function,for-loop |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  if(n==1) return(n)\n  return(sum_to_n(n-1)+n)\n}\n</code>\n<|/ a tags=r,function,for-loop\
    \ |>\n<| a tags=r,function,for-loop |>\n<code>\nsum_to_n <- function(n) {\n  if(n==1)\
    \ return(n)\n  return(", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n\
    }\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <-\
    \ n + 1\n  n <- sum(n)\n  n\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,function,loops\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,function,loops |>\n<code>\nsum_to_n <-\
    \ function(n) {\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <-\
    \ sum(n)\n  n\n}\n</code>\n<|/ a tags=r,function,loops |>\n<| a dscore=1 |>\n\
    <code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n</code>\n\
    <|/ a tags=r,function,loops |>\n<| a tags=r,function,loops |>\n<code>\nsum_to_n\
    \ <- function(n) {\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <-\
    \ sum(n)\n  n\n}\n</code>\n<|/ a tags=r,function,loops |>\n<| a dscore=1 |>\n\
    <code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n</code>\n\
    <|/ a tags=r,function,loops |>\n<| a tags=r,function,loops |>\n<code>\nsum_to_n\
    \ <- function(n) {\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <-\
    \ sum(n)\n  n\n}\n</code>\n<|/ a tags=r,function,loops |>\n<| a tags=r,function,loops\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  n <- n + 1\n  n <- sum(n)\n  n\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,function,loops |>\n<code>\nsum", "\n \
    \ n <- n + 1\n  sum <- 0\n  i <- 1\n  while (i <= n) {\n    sum <- sum + i\n \
    \   i <- i + 1\n  }\n  sum\n}\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the factorial of a number.\n\n\n</text>\n<cell>", "\n  n <- n\n  n <-\
    \ n * n\n  n <- n + n\n  n\n}\n</code>\n<|/ a tags=r,function,loops |>\n<| c |>\n\
    Thanks for your answer! I didn't know that R had a built-in function called `sum`.\
    \ However, I do need to use a loop to solve this problem. I'm just wondering if\
    \ there's a way to do this without using a loop.\n<|/ c |>\n<| c |>\nI added a\
    \ loop to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it! However, I do need to use a loop to solve this problem. I'm\
    \ just wondering if there's a way to do this without using a loop.\n<|/ c |>\n\
    <| c |>\nI added a loop to my answer. Hope it helps.\n<|/ c |>\n<| a tags=r,function,loops\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  n <- n\n  n <- n * n\n  n <- n + n\n\
    \  n\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I didn't\
    \ know that R had a built-in function called `sum`. However, I do need to use\
    \ a loop to solve this problem. I'm just wondering if there's a way to do this\
    \ without using a loop.\n<|/ c |>\n<| a |>\n<code>\nsum_to_n <- function(n) {\n\
    \  n <- n\n  n <- n * n\n  n <- n + n\n  n\n}\n</code>\n<|/ a tags=r,function,loops\
    \ dscore=0 |>\n<| c |>\nThanks for your answer! I didn't know that R had a built-in\
    \ function called `sum`. However, I do need to use a loop to solve this problem.\
    \ I'm just wondering if there's a way to do this without using a loop.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_to_n <- function(n) {\n  n <- n\n  n <- n\
    \ * n\n  n <- n + n\n  n\n}\n</code>\n<|/ a tags=r,function,loops |>\n<| c |>\n\
    Thanks for your answer! I didn't know that R had a built-in function called `sum`.\
    \ However, I do need to use a loop to solve this problem. I'm just wondering if\
    \ there's a way to do this without using a loop.\n<|/ c |>\n<| a tags=r,function,loops\
    \ |>\n<code>\nsum_to_n <- function(n) {\n  n <- n\n  n ", "\n  n <- n + 1\n  n\
    \ <- n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <- as.integer(n)\n  if(n <=\
    \ 0) stop(\"n must be positive\")\n  if(n > 1e6) stop(\"n must be less than 1e6\"\
    )\n  n <- ceiling(n / 1e6)\n  n <- n * 1e6\n  n <- ceiling(n / 1e3)\n  n <- n\
    \ * 1e3\n  n <- ceiling(n / 1e1)\n  n <- n * 1e1\n  n <- ceiling(n / 1e0)\n  n\
    \ <- n * 1e0\n  n <- ceiling(n / 1e-1)\n  n <- n * 1e-1\n  n <- ceiling(n / 1e-2)\n\
    \  n <- n * 1e-2\n  n <- ceiling(n / 1e-3)\n  n <- n * 1e-3\n  n <- ceiling(n\
    \ / 1e-4)\n  n <- n * 1e-4\n  n <- ceiling(n / 1e-5)\n  n <- n * 1e-5\n  n <-\
    \ ceiling(n / 1e-6)\n  n <- n * 1e-6\n  n <- ceiling(n / 1e-7)\n  n <- n * 1e-7\n\
    \  n <- ceiling(n / 1e-8)\n  n <- n * 1e-8\n  n <- ceiling(n / 1e-9)\n  n <- n\
    \ * 1e-9\n  n <- ceiling(n / 1e-10)\n  n <- n * 1e-10\n  n <- ceiling(n / 1e-11)\n\
    \  n <- n * 1e-11\n  n <- ceiling(n / 1e-12)\n  n <- n * 1e-12\n  n <- ceiling(n\
    \ / 1e-13)\n  n <- n * 1e-13\n  n <- ceiling(n / 1e-14)\n  n <- n * 1e-14\n  n\
    \ <- ceiling(n / 1e-15)\n  n <- n * 1e-15\n  n <- ceiling(n / 1e-16)\n  n <- n\
    \ * 1e-16\n  n <- ceiling(n / 1e-17)\n  n <- n * 1e-17\n  n <- ceiling(n / 1e-18)\n\
    \  n <- n * 1e-18\n  n <- ceiling(n / 1e-19)\n  n <- n * 1e-19\n  n <- ceiling(n\
    \ / 1e-20)\n  n <- n * 1e-20\n  n <- ceiling(n / 1e-21)\n  n <- n * 1e-21\n  n\
    \ <- ceiling(n / 1e-22)\n  n <- n * 1e-22\n  n <- ceiling(n / 1e-23)\n  n <- n\
    \ * 1e-23\n  n <- ceiling(n / 1e-24)\n  n <- n * 1e-24", "\n  n <- n + 1\n  return(n\
    \ %/% 10 * 10 + n %% 10)\n}\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the first n numbers of a Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence relation:\n\n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0\
    \ = 0$ and $F_1 = 1$.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  sum <- 0\n  for(i\
    \ in 1:n) {\n    sum <- sum + i\n  }\n  sum\n}\n</cell>\n<cell>", "\n  n <- n\
    \ + 1\n  if(n == 1) 1\n  else n * sum_to_n(n - 1)\n}\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000001)\n</cell>\n\
    <cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\nsum_to_n(1000000000003)\n</cell>\n\
    <cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\nsum_to_n(1000000000005)\n</cell>\n\
    <cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\nsum_to_n(1000000000007)\n</cell>\n\
    <cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\nsum_to_n(1000000000009)\n</cell>\n\
    <cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\nsum_to_n(1000000000011)\n</cell>\n\
    <cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\nsum_to_n(1000000000013)\n</cell>\n\
    <cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\nsum_to_n(1000000000015)\n</cell>\n\
    <cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\nsum_to_n(1000000000017)\n</cell>\n\
    <cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\nsum_to_n(1000000000019)\n</cell>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n < 1) {\n    return(1)\n  } else {\n \
    \   sum <- 0\n    for(i in 1:n) {\n      sum <- sum + i\n    }\n    return(sum)\n\
    \  }\n}\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers.\n\nThe function should work like\
    \ this:\n\nsum_squares <- function(x) {\n  return(sum(x^2))\n}\nFor example, sum_squares(c(1,2,3))\
    \ should return 9. Make sure you use sum, not sum.\n\n\n</text>\n<cell>", "\n\
    \  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1)\
    \ 1\n  else n * sum_to_n(n - 1)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the numbers from 1 to n that\
    \ are divisible by k.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n <=\
    \ 0) stop(\"n must be positive\")\n  if(n <= 1) 1\n  else {\n    x <- 1\n    for(i\
    \ in 2:n) x <- x + i\n    x\n  }\n}\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the first n positive integers. Use sum_to_n to implement\
    \ this function.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ < 1, stop(\"n must be positive\"), n)\n  n <- ifelse(n > 1e+07, stop(\"n must\
    \ be less than 1e+07\"), n)\n  n <- ifelse(n < 1e+07, n, 1e+07)\n  n <- ifelse(n\
    \ > 1e+09, stop(\"n must be less than 1e+09\"), n)\n  n <- ifelse(n < 1e+09, n,\
    \ 1e+09)\n  n <- ifelse(n > 1e+10, stop(\"n must be less than 1e+10\"), n)\n \
    \ n <- ifelse(n < 1e+10, n, 1e+10)\n  n <- ifelse(n > 1e+12, stop(\"n must be\
    \ less than 1e+12\"), n)\n  n <- ifelse(n < 1e+12, n, 1e+12)\n  n <- ifelse(n\
    \ > 1e+15, stop(\"n must be less than 1e+15\"), n)\n  n <- ifelse(n < 1e+15, n,\
    \ 1e+15)\n  n <- ifelse(n > 1e+18, stop(\"n must be less than 1e+18\"), n)\n \
    \ n <- ifelse(n < 1e+18, n, 1e+18)\n  n <- ifelse(n > 1e+21, stop(\"n must be\
    \ less than 1e+21\"), n)\n  n <- ifelse(n < 1e+21, n, 1e+21)\n  n <- ifelse(n\
    \ > 1e+24, stop(\"n must be less than 1e+24\"), n)\n  n <- ifelse(n < 1e+24, n,\
    \ 1e+24)\n  n <- ifelse(n > 1e+27, stop(\"n must be less than 1e+27\"), n)\n \
    \ n <- ifelse(n < 1e+27, n, 1e+27)\n  n <- ifelse(n > 1e+30, stop(\"n must be\
    \ less than 1e+30\"), n)\n  n <- ifelse(n < 1e+30, n, 1e+30)\n  n <- ifelse(n\
    \ > 1e+33, stop(\"n must be less than 1e+33\"), n)\n  n <- ifelse(n < 1e+33, n,\
    \ 1e+33)\n  n <- ifelse(n > 1e+36, stop(\"n must be less than 1e+36\"), n)\n \
    \ n <- ifelse(n < 1e+36, n, 1e+36)\n  n <- ifelse(n > 1e+39, stop(\"n must be\
    \ less than 1e+39\"), n)\n  n <- ifelse(n < 1e+39, n, 1e+39)\n  n <- ifelse(n\
    \ > 1e+", "\n  n <- as.integer(n)\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum\
    \ + i\n  }\n  return(sum)\n}\n</cell>\n<cell>", "\n  n <- n + 1\n  return(sum(1:n))\n\
    }\n</cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n numbers of a Fibonacci sequence. Test it by calling it with the argument n\
    \ = 5.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  if(n == 1) 1\n  else n * sum_to_n(n-1)\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>", "\n  return(sum(1:n))\n}\n",
  "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)", "\n  n <- n + 1\n  n <- n * 3 +\
    \ 1\n  n <- n / 2\n  n\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe function\
    \ you are looking for is cumsum:\n<code>\ncumsum <- function(x) {\n  y <- numeric(length(x))\n\
    \  y[1] <- x[1]\n  for(i in 2:length(x)) {\n    y[i] <- y[i-1] + x[i]\n  }\n \
    \ y\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nA simple for loop will do the\
    \ trick:\n<code>\nsum_to_n <- function(n){\n  sum <- 0\n  for(i in 1:n){\n   \
    \ sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r\
    \ |>\nA simple for loop will do the trick:\n<code>\nsum_to_n <- function(n){\n\
    \  sum <- 0\n  for(i in 1:n){\n    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_to_n <- function(n){\n  sum <-\
    \ 0\n  for(i in 1:n){\n    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_to_n <- function(n){\n  sum <- 0\n\
    \  for(i in 1:n){\n    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_to_n <- function(n){\n  sum <- 0\n  for(i\
    \ in 1:n){\n    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nsum_to_n <- function(n){\n  sum <- 0\n  for(i in 1:n){\n\
    \    sum <- sum + i\n  }\n  return(sum)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r\
    \ |>\n<code>\nsum_to_n <- function(n){\n  sum <- 0\n  for(i in 1:n", "\n  n <-\
    \ n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n", "\n  n <- n + 1\n  n <- n\
    \ * n\n  n <- n / 2\n  n\n}\n</cell>\n<text>\nThe function sum_to_n takes an integer\
    \ argument and returns the sum of the first n numbers. For example, sum_to_n(5)\
    \ returns 15 and sum_to_n(10) returns 55.\n\n\n</text>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the first n numbers, starting\
    \ from 1, up to and including n.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <-\
    \ n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <- n + 1\n  n <- sum_to_n(n)\n\
    \  n\n}\n</cell>\n<text>\nThe sum_to_n function above is recursive, meaning it\
    \ calls itself until it reaches a base case. Let's see how it works:\n\n\n</text>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(2)\n</cell>\n<cell>\nsum_to_n(3)\n\
    </cell>\n<cell>\nsum_to_n(4)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(6)\n</cell>\n<cell>\nsum_to_n(7)\n</cell>\n<cell>\nsum_to_n(8)\n</cell>\n\
    <cell>\nsum_to_n(9)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(11)\n\
    </cell>\n<cell>\nsum_to_n(12)\n</cell>\n<cell>\nsum_to_n(13)\n</cell>\n<cell>\n\
    sum_to_n(14)\n</cell>\n<cell>\nsum_to_n(15)\n</cell>\n<cell>\nsum_to_n(16)\n</cell>\n\
    <cell>\nsum_to_n(17)\n</cell>\n<cell>\nsum_to_n(18)\n</cell>\n<cell>\nsum_to_n(19)\n\
    </cell>\n<cell>\nsum_to_n(20)\n</cell>\n<cell>\nsum_to_n(21)\n</cell>\n<cell>\n\
    sum_to_n(22)\n</cell>\n<cell>\nsum_to_n(23)\n</cell>\n<cell>\nsum_to_n(24)\n</cell>\n\
    <cell>\nsum_to_n(25)\n</cell>\n<cell>\nsum_to_n(26)\n</cell>\n<cell>\nsum_to_n(27)\n\
    </cell>\n<cell>\nsum_to_n(28)\n</cell>\n<cell>\nsum_to_n(29)\n</cell>\n<cell>\n\
    sum_to_n(30)\n</cell>\n<cell>\nsum_to_n(31)\n</cell>\n<cell>\nsum_to_n(32)\n</cell>\n\
    <cell>\nsum_to_n(33)\n</cell>\n<cell>\nsum_to_n(34)\n</cell>\n<cell>\nsum_to_",
  "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n</cell>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that returns the sum of the first n numbers of a Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence relation:\n\n$Fn = F{n-1}\
    \ + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1 = 1$.\n\n\n</text>\n<cell>", "\n  n <-\
    \ n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <- n\n  if(n <=\
    \ 1) 1\n  else n * sum_to_n(n - 1)\n}\n", "\n  n <- n\n  n <- ifelse(n < 1, n,\
    \ 1)\n  n <- ifelse(n < 2, n, 2)\n  n <- ifelse(n < 3, n, 3)\n  n <- ifelse(n\
    \ < 4, n, 4)\n  n <- ifelse(n < 5, n, 5)\n  n <- ifelse(n < 6, n, 6)\n  n <- ifelse(n\
    \ < 7, n, 7)\n  n <- ifelse(n < 8, n, 8)\n  n <- ifelse(n < 9, n, 9)\n  n <- ifelse(n\
    \ < 10, n, 10)\n  n <- ifelse(n < 11, n, 11)\n  n <- ifelse(n < 12, n, 12)\n \
    \ n <- ifelse(n < 13, n, 13)\n  n <- ifelse(n < 14, n, 14)\n  n <- ifelse(n <\
    \ 15, n, 15)\n  n <- ifelse(n < 16, n, 16)\n  n <- ifelse(n < 17, n, 17)\n  n\
    \ <- ifelse(n < 18, n, 18)\n  n <- ifelse(n < 19, n, 19)\n  n <- ifelse(n < 20,\
    \ n, 20)\n  n <- ifelse(n < 21, n, 21)\n  n <- ifelse(n < 22, n, 22)\n  n <- ifelse(n\
    \ < 23, n, 23)\n  n <- ifelse(n < 24, n, 24)\n  n <- ifelse(n < 25, n, 25)\n \
    \ n <- ifelse(n < 26, n, 26)\n  n <- ifelse(n < 27, n, 27)\n  n <- ifelse(n <\
    \ 28, n, 28)\n  n <- ifelse(n < 29, n, 29)\n  n <- ifelse(n < 30, n, 30)\n  n\
    \ <- ifelse(n < 31, n, 31)\n  n <- ifelse(n < 32, n, 32)\n  n <- ifelse(n < 33,\
    \ n, 33)\n  n <- ifelse(n < 34, n, 34)\n  n <- ifelse(n < 35, n, 35)\n  n <- ifelse(n\
    \ < 36, n, 36)\n  n <- ifelse(n < 37, n, 37)\n  n <- ifelse(n < 38, n, 38)\n \
    \ n <- ifelse(n < 39, n, 39)\n  n <- ifelse(n < 40, n, 40)\n  n <- ifelse(n <\
    \ 41, n, 41)\n  n <- ifelse(n < 42, n, 42)\n  n <- ifelse(n < 43, n, 43)\n  n\
    \ <- ifelse(n < 44, n, 44)\n  n <- if", "\n  n <- n + 1\n  return(sum(1:n))\n\
    }\n</cell>\n<text>\nThe function sum_to_n takes an integer argument n and returns\
    \ the sum of the integers from 1 to n.\n\n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the sum of the integers from 1 to n except the numbers that are divisible\
    \ by 3.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <- sum_to_n(n)\n  n\n}\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe function sum_to_n is recursive. Let's\
    \ see how it works:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=1, at which point it returns 1.\n\nLet's try it\
    \ again with n=5:\n\n\n</text>\n<cell>\nsum_to_n(5)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=4, at which point it returns 4.\n\nLet's try it\
    \ again with n=10:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=9, at which point it returns 9.\n\nLet's try it\
    \ again with n=1:\n\n\n</text>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=0, at which point it returns 0.\n\nLet's try it\
    \ again with n=10:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=9, at which point it returns 9.\n\nLet's try it\
    \ again with n=1:\n\n\n</text>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=0, at which point it returns 0.\n\nLet's try it\
    \ again with n=10:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=9, at which point it returns 9.\n\nLet's try it\
    \ again with n=1:\n\n\n</text>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=0, at which point it returns 0.\n\nLet's try it\
    \ again with n=10:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=9, at which point it returns 9.\n\nLet's try it\
    \ again with n=1:\n\n\n</text>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=0, at which point it returns 0.\n\nLet's try it\
    \ again with n=10:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nIt goes\
    \ on and on until it reaches n=9, ", "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n\
    \  return(sum(1:n))\n}\n</cell>\n<text>\nThe function sum_to_n takes an integer\
    \ argument and returns an integer. The function checks if n is equal to 1, and\
    \ if so, returns 1. Otherwise, it returns the sum of the first n natural numbers.\n\
    \n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the first n natural\
    \ numbers, starting from 1, up to and including n.\n\n\n</text>\n<cell>", "\n\
    \  n <- n + 1\n  return(sum(1:n))\n}\n</cell>\n<text>\nThe sum_to_n function above\
    \ is very simple. It just adds 1 to each number from 1 to n, and returns the sum\
    \ of the numbers from 1 to n.\n\nLet's test our sum_to_n function by running it\
    \ a few times:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    The sum_to_n function works as expected for small values of n. Let's try it on\
    \ some larger values:\n\n\n</text>\n<cell>\nsum_to_n(1000)\n</cell>\n<text>\n\
    The sum_to_n function works well for small values of n, but for larger values\
    \ of n it becomes very slow. Let's try it on some larger values:\n\n\n</text>\n\
    <cell>\nsum_to_n(10000)\n</cell>\n<text>\nThe sum_to_n function works well for\
    \ small values of n, but for larger values of n it becomes very slow. Let's try\
    \ it on some larger values:\n\n\n</text>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <text>\nThe sum_to_n function works well for small values of n, but for larger\
    \ values of n it becomes very slow. Let's try it on some larger values:\n\n\n\
    </text>\n<cell>\nsum_to_n(1000000)\n</cell>\n<text>\nThe sum_to_n function works\
    \ well for small values of n, but for larger values of n it becomes very slow.\
    \ Let's try it on some larger values:\n\n\n</text>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<text>\nThe sum_to_n function works well for small values of n, but for\
    \ larger values of n it becomes very slow. Let's try it on some larger values:\n\
    \n\n</text>\n<cell>\nsum_to_n(100000000)\n</cell>\n<text>\nThe sum_to_n function\
    \ works well for small values of n, but for larger values of n it becomes very\
    \ slow. Let's try it on some larger values:\n\n\n</text>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<text>\nThe sum_to_n function works well for small values of n, but for\
    \ larger values of n it becomes very slow. Let's try it on some larger values:\n\
    \n\n</text>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<text>\nThe sum_to_n function\
    \ works well for small values of n, but for larger values of n it becomes very\
    \ slow. Let's try ", "\n  n <- n + 1\n  return(n %/% 10 * 10 + n %% 10)\n}\n</cell>\n\
    <text>\nNow let's test our sum_to_n function.\n\n\n</text>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that returns the sum of the numbers from 1 to n that are divisible\
    \ by 3.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  sum <- 0\n  for(i in 1:n) {\n\
    \    sum <- sum + i\n  }\n  return(sum)\n}\n", "\n  n <- n + 1\n  return(sum(1:n))\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(1000000000020)\n</",
  "\n  n <- n + 1\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  sum\n\
    }\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell", "\n  n <- n\n  n\
    \ <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n, 2)\n  n <- ifelse(n < 3, n,\
    \ 3)\n  n <- ifelse(n < 4, n, 4)\n  n <- ifelse(n < 5, n, 5)\n  n <- ifelse(n\
    \ < 6, n, 6)\n  n <- ifelse(n < 7, n, 7)\n  n <- ifelse(n < 8, n, 8)\n  n <- ifelse(n\
    \ < 9, n, 9)\n  n <- ifelse(n < 10, n, 10)\n  n <- ifelse(n < 11, n, 11)\n  n\
    \ <- ifelse(n < 12, n, 12)\n  n <- ifelse(n < 13, n, 13)\n  n <- ifelse(n < 14,\
    \ n, 14)\n  n <- ifelse(n < 15, n, 15)\n  n <- ifelse(n < 16, n, 16)\n  n <- ifelse(n\
    \ < 17, n, 17)\n  n <- ifelse(n < 18, n, 18)\n  n <- ifelse(n < 19, n, 19)\n \
    \ n <- ifelse(n < 20, n, 20)\n  n <- ifelse(n < 21, n, 21)\n  n <- ifelse(n <\
    \ 22, n, 22)\n  n <- ifelse(n < 23, n, 23)\n  n <- ifelse(n < 24, n, 24)\n  n\
    \ <- ifelse(n < 25, n, 25)\n  n <- ifelse(n < 26, n, 26)\n  n <- ifelse(n < 27,\
    \ n, 27)\n  n <- ifelse(n < 28, n, 28)\n  n <- ifelse(n < 29, n, 29)\n  n <- ifelse(n\
    \ < 30, n, 30)\n  n <- ifelse(n < 31, n, 31)\n  n <- ifelse(n < 32, n, 32)\n \
    \ n <- ifelse(n < 33, n, 33)\n  n <- ifelse(n < 34, n, 34)\n  n <- ifelse(n <\
    \ 35, n, 35)\n  n <- ifelse(n < 36, n, 36)\n  n <- ifelse(n < 37, n, 37)\n  n\
    \ <- ifelse(n < 38, n, 38)\n  n <- ifelse(n < 39, n, 39)\n  n <- ifelse(n < 40,\
    \ n, 40)\n  n <- ifelse(n < 41, n, 41)\n  n <- ifelse(n < 42, n, 42)\n  n <- ifelse(n\
    \ < 43, n, 43)\n  n <- ifelse(n < 44, n, 44)\n  n <- if", "\n  n <- n + 1\n  sum\
    \ <- 0\n  for(i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n</cell>\n\
    <text>\nThe function sum_to_n takes an integer argument n and returns the sum\
    \ of the integers from 1 to n.\n\n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given integer.\n\n\n</text>\n<cell>", "\n  return(sum(1:n))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 1) return(1)\n  return(sum(1:n))\n}\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000",
  "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>", "\n  n <- n + 1\n  sum <- 0\n  for(i in 1:n) {\n    sum <- sum\
    \ + i\n  }\n  return(sum)\n}\n", "\n  n <- as.integer(n)\n  if(n <= 0) return(0)\n\
    \  if(n <= 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_", "\n  n <- as.integer(n)\n\
    \  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0,\
    \ n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n > 0, n, 0)\n  n <- ifelse(n\
    \ > 0, n, 0)\n  n <- ifelse(n > 0, ", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <-\
    \ n / 2\n  n\n}\n</cell>\n<cell>", "\n  n <- n + 1\n  return(sum(1:n))\n}\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\n\n>>> sum_squares_vec <- function(vec)\
    \ {\n...   return(sum(vec^2))\n... }\n>>> sum_squares_vec(1:10)\n55\n>>> sum_squares_vec(1:100)\n\
    5050\n>>> sum_squares_vec(1:5)\n15\n>>> sum_squares_vec(1:10)\n55\n>>> sum_squares_vec(1:1)\n\
    1\nHint: use sum and ^.\n\n\n</text>\n<cell>\nsum_squares_vec <- function(vec)\
    \ {\n  return(sum(vec^2))\n}\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers,\
    \ ignoring any numbers that are less than or equal to zero.\n\n>>> sum_squares_vec_ignore\
    \ <- function(vec) {\n...   return(sum(vec[vec > 0]^2))\n... }\n>>> sum_squares_vec_ignore(1:10)\n\
    55\n>>> sum_squares_vec_ignore(1:100)\n5050\n>>> sum_squares_vec_ignore(1:5)\n\
    15\n>>> sum_squares_vec_ignore(1:10)\n55\n>>> sum_squares_vec_ignore(1:1)\n1\n\
    Hint: use sum and [ and ].\n\n\n</text>\n<cell>\nsum_squares_vec_ignore <- function(vec)\
    \ {\n  return(sum(vec[vec > 0]^2))\n}\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers,\
    \ ignoring any numbers that are less than or equal to zero and ignoring any numbers\
    \ that are greater than or equal to one.\n\n>>> sum_squares_vec_ignore_one <-\
    \ function(vec) {\n...   return(sum(vec[vec > 0 & vec <= 1]^2))\n... }\n>>> sum_squares_vec_ignore_one(1:10)\n\
    55\n>>> sum_squares_vec_ignore_one(1:100)\n5050\n>>> sum_squares_vec_ignore_one(1:5)\n\
    15\n>>> sum_squares_vec_ignore_one(1:10)\n55\n>>> sum_squares_vec_ignore_one(1:1)\n\
    1\nHint: use sum and [ and ].\n\n\n</text>\n<cell>\nsum_squares_vec_ignore_one\
    \ <- function(vec) {\n  return(sum(vec[vec > 0 & vec <= 1]^2))\n}\n</cell>\n<text>\n\
    Exercise 6\nWrite a function that takes a vector of number", "\n  n <- n\n  n\
    \ <- ifelse(n < 1, n, 1)\n  n <- ifelse(n > 1e6, 1e6, n)\n  n <- ifelse(n > 1e9,\
    \ 1e9, n)\n  n <- ifelse(n > 1e12, 1e12, n)\n  n <- ifelse(n > 1e15, 1e15, n)\n\
    \  n <- ifelse(n > 1e18, 1e18, n)\n  n <- ifelse(n > 1e21, 1e21, n)\n  n <- ifelse(n\
    \ > 1e24, 1e24, n)\n  n <- ifelse(n > 1e27, 1e27, n)\n  n <- ifelse(n > 1e30,\
    \ 1e30, n)\n  n <- ifelse(n > 1e33, 1e33, n)\n  n <- ifelse(n > 1e36, 1e36, n)\n\
    \  n <- ifelse(n > 1e39, 1e39, n)\n  n <- ifelse(n > 1e42, 1e42, n)\n  n <- ifelse(n\
    \ > 1e45, 1e45, n)\n  n <- ifelse(n > 1e48, 1e48, n)\n  n <- ifelse(n > 1e51,\
    \ 1e51, n)\n  n <- ifelse(n > 1e54, 1e54, n)\n  n <- ifelse(n > 1e57, 1e57, n)\n\
    \  n <- ifelse(n > 1e60, 1e60, n)\n  n <- ifelse(n > 1e63, 1e63, n)\n  n <- ifelse(n\
    \ > 1e66, 1e66, n)\n  n <- ifelse(n > 1e69, 1e69, n)\n  n <- ifelse(n > 1e72,\
    \ 1e72, n)\n  n <- ifelse(n > 1e75, 1e75, n)\n  n <- ifelse(n > 1e78, 1e78, n)\n\
    \  n <- ifelse(n > 1e81, 1e81, n)\n  n <- ifelse(n > 1e84, 1e84, n)\n  n <- ifelse(n\
    \ > 1e87, 1e87, n)\n  n <- ifelse(n > 1e90, 1e90, n)\n  n <- ifelse(n > 1e93,\
    \ 1e93, n)\n  n <- ifelse(n > 1e96, 1e96, n)\n  n <- ifelse(n > 1e99, 1e99, n)\n\
    \  n <- ifelse(n > 1e102, 1e102, n)\n  n <- ifelse(n > 1e105, 1e105, n)\n  n <-\
    \ ifelse(n > 1e108, 1e108, n)\n  n <- ifelse(", "\n  n <- n + 1\n  n <- n * n\n\
    \  n <- n / 2\n  n\n}\n</cell>\n<text>\nThe function sum_to_n takes an integer\
    \ argument and returns its sum.\n\n\n</text>\n<cell>\nsum_to_n(30)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the sum of the first n numbers of the Fibonacci sequence.\n\n\n</text>\n\
    <cell>", "\n  n <- n + 1\n  return(\n    sum(\n      1:n\n    )\n  )\n}\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>", "\n  n <- n + 1\n  sum <- 0\n  for(i in\
    \ 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}\n", "\n  n <- n + 1\n  return(sum(n))\n\
    }\n</cell>\n<text>\nThe function sum_to_n takes an integer argument and returns\
    \ the sum of all numbers from 1 to that integer.\n\n\n</text>\n<cell>\nsum_to_n(30)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that returns the sum of the first n positive integers. Use a while\
    \ loop to do this.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <- n * n\n  n <-\
    \ n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\nThe function\
    \ sum_to_n is now defined, we can test it by running the cell below.\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the first n numbers of a Fibonacci sequence. Test it by running the\
    \ cell below.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 0) stop(\"\
    n must be positive\")\n  if(n > 100) stop(\"n must be less than 100\")\n  n <-\
    \ ceiling(n / 10)\n  n <- 10 * n + n\n  n <- sum(n:1)\n  n\n}\n", "\n  n <- n\
    \ + 1\n  return(n / 2)\n}\n</cell>\n<cell>", "\n  n <- n + 1\n  if(n == 1) 1\n\
    \  else n * sum_to_n(n-1)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\n\
    The function factorial is defined below. It takes an integer n and returns the\
    \ factorial of n. Factorial is defined as $n! = n  (n-1)  (n-2)  ...  2  1$. For\
    \ example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.\n\n\n</text>\n<cell>\nfactorial\
    \ <- function(n) {\n  factorial_n <- 1\n  for(i in 1:n) {\n    factorial_n <-\
    \ factorial_n * (n-i)\n  }\n  factorial_n\n}\nfactorial(5)\n</cell>\n<text>\n\
    The function fibonacci is defined below. It takes an integer n and returns the\
    \ nth fibonacci number. Fibonacci is defined as $nth fibonacci number = (2n-1)th\
    \ fibonacci number + (1st-2)th fibonacci number$.\n\n\n</text>\n<cell>\nfibonacci\
    \ <- function(n) {\n  fibonacci_n <- 1\n  fibonacci_n_2 <- 1\n  fibonacci_n_1\
    \ <- 1\n  for(i in 1:n) {\n    fibonacci_n <- fibonacci_n + fibonacci_n_2\n  \
    \  fibonacci_n_2 <- fibonacci_n_1 + fibonacci_n_1\n    fibonacci_n_1 <- fibonacci_n\n\
    \  }\n  fibonacci_n\n}\nfibonacci(5)\n</cell>\n<text>\nThe function fibonacci_iter\
    \ is defined below. It takes an integer n and returns the nth fibonacci number\
    \ using an iterative approach.\n\n\n</text>\n<cell>\nfibonacci_iter <- function(n)\
    \ {\n  fibonacci_n_1 <- 1\n  fibonacci_n_2 <- 1\n  for(i in 1:n) {\n    fibonacci_n_1\
    \ <- fibonacci_n_1 + fibonacci_n_2\n    fibonacci_n_2 <- fibonacci_n_1\n  }\n\
    \  fibonacci_n_1\n}\nfibonacci_iter(5)\n</cell>\n<text>\nThe function fibonacci_iter2\
    \ is defined below. It takes an integer n and returns the nth fibonacci number\
    \ using an "]
stop_tokens:
- "\n#"
- "\n```"
