name: HumanEval_33_sort_third
language: r
prompt: "# This function takes a list l and returns a list l' such that\n# l' is identical\
  \ to l in the indicies that are not divisible by three, while its values at the\
  \ indicies that are divisible by three are equal\n# to the values of the corresponding\
  \ indicies of l, but sorted.\n# >>> sort_third(c(1, 2, 3))\n# c(1, 2, 3)\n# >>>\
  \ sort_third(c(5, 6, 3, 4, 8, 9, 2))\n# c(2, 6, 3, 4, 8, 9, 5)\nsort_third <- function(l)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- sort_third\n    if(!identical(candidate(c(5,\
  \ 6, 3, 4, 8, 9, 2)), c(2, 6, 3, 4, 8, 9, 5))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 8, 3, 4, 6, 9, 2)), c(2, 8, 3, 4, 6, 9, 5))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 6, 9, 4, 8, 3, 2)), c(2, 6, 9, 4, 8, 3, 5))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 6, 3, 4, 8, 9, 2, 1)), c(2, 6, 3, 4, 8, 9, 5, 1))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  l[order(l%%3 == 0, l%%3 == 1)]\n}\n", "\n  l[order(l %% 3 == 0)]\n\
    }\n", "\n  l[order(l%%3 == 0)]\n}\n", "\n  l[order(l %% 3 == 0)]\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without having to define `sort_third`?\n<|/ c |>\n<| c |>\nYou could\
    \ define `sort_third` as a function of its own and then use `sort_third` inside\
    \ `sort_third`\n<|/ c |>\n<| c |>\nI added an example to my answer\n<|/ c |>\n\
    <| c |>\nI added an example to my answer\n<|/ c |>\n<| a tags=r |>\nHere's a solution\
    \ using dplyr and tidyr\n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n\ndf %>% \n \
    \ mutate(row = row_number()) %>% \n  gather(key, value, -row) %>% \n  mutate(value\
    \ = ifelse(key == \"value\", value, NA)) %>% \n  filter(!is.na(value)) %>% \n\
    \  arrange(row) %>% \n  select(-row)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nHere's a solution using data.table:\n<code>\nlibrary(data.table)\nsetDT(df)[order(as.integer(gl(length(df$value),\
    \ 3, length(df$value)))) , ]\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\nHere's\
    \ a solution using dplyr and tidyr\n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n\n\
    df %>% \n  mutate(row = row_number()) %>% \n  gather(key, value, -row) %>% \n\
    \  mutate(value = ifelse(key == \"value\", value, NA)) %>% \n  filter(!is.na(value))\
    \ %>% \n  arrange(row) %>% \n  select(-row)\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\nHere is a base R solution:\n<code>\ndf <- data.frame(value = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26),\n\
    \                 key = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26))\n\
    \ndf$key <- factor(df$key, levels = unique(df$key))\n\ndf$key <- as.integer(df$key)\n\
    \ndf$key <- factor(df$key, levels = unique(df", "\n  l[order(l%%3 == 0)]\n}\n",
  "\n  l[order(l %% 3 == 0)]\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    sort_third <- function(l) {\n  l[order(l %% 3 == 0)]\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/10177752)\n<|/ c |>\n<| c |>\nThis does provide\
    \ an answer. He wants to sort a vector by its values which are divisible by three.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10177752)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10177752)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10177752)\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsort_third <- function(l) {\n  l[order(l %% 3 == 0)]\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/10177752)\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10177752)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/", "\n  l[order(l %% 3 == 0, l %% 3 == 1)]\n}\n", "\n\
    \  l[order(l%%3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nI like your\
    \ solution, although I prefer `l[order(l%%3 == 0)]` because it's more readable.\
    \ Also, `l[order(l%%3 == 0, l)]` would work as well.\n<|/ c |>\n<| c |>\nI agree,\
    \ `l[order(l%%3 == 0, l)]` is more readable. I've added it to my answer.\n<|/\
    \ c |>\n<| a tags=r,sorting |>\n<code>\nsort_third <- function(l) {\n  l[order(l%%3\
    \ == 0)]\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsort_third\
    \ <- function(l) {\n  l[order(l%%3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n\
    <| a tags=r,sorting |>\n<code>\nsort_third <- function(l) {\n  l[order(l%%3 ==\
    \ 0)]\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,sorting |>\n<code>\nsort_third\
    \ <- function(l) {\n  l[order(l%%3 == 0)]\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=r,sorting |>\n<code>\nsort_third <- function(l) {\n  l[order(l%%3 == 0)]\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsort_third <- function(l)\
    \ {\n  l[order(l%%3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| a tags=r,sorting\
    \ |>\n<code>\nsort_third <- function(l) {\n  l[order(l%%3 == 0)]\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsort_third <- function(l) {\n  l[order(l%%3\
    \ == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| a |>\n<code>\nsort_third <-\
    \ function(l) {\n  l[order(l%%3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting dscore=1\
    \ |>\n<| a tags=r,sorting |>\n<code>\nsort_third <- function(l) {\n  l[order(l%%3\
    \ == 0)]\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsort_third\
    \ <- function(l) {\n  l[order(l%%3 == 0)]", "\n  l[order(l%%3 != 0, l)]\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `sort_third(c(5, 6, 3, 4,\
    \ 8, 9, 2))` returns `c(2, 6, 3, 4, 8, 9, 5)` instead of `c(2, 6, 3, 4, 8, 9,\
    \ 5)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\nAh, I see what you mean. Yes, this works. Thanks!\n\
    <|/ c |>\n<| c |>\nI added a more general solution that should work for any number\
    \ of elements. I tested it and it works.\n<|/ c |>\n<| a dscore=2 |>\nHere's a\
    \ solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \nsort_third <- function(x) {\n  x %>% \n    split(1:n()) %>% \n    map(~sort(.x,\
    \ decreasing = TRUE)) %>% \n    reduce(inner_join, by = \"x\")\n}\n\nsort_third(c(5,\
    \ 6, 3, 4, 8, 9, 2))", "\n  l[order(c(FALSE, diff(l%%3 != 0)))]\n}\n", "\n  l[order(c(TRUE,\
    \ diff(l%%3 != 0)), decreasing = TRUE)]\n}\n", "\n  l[order(c(TRUE, diff(l)%%3\
    \ != 0), decreasing = TRUE)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nThis\
    \ doesn't work if there are duplicates in the list. For example, `sort_third(c(1,2,2,3,4))`\
    \ returns `c(1,2,3,4)`.\n<|/ c |>\n<| c |>\n, good catch! I fixed it by adding\
    \ `unique` to the `sort` call.\n<|/ c |>\n<| c |>\nThanks for the answer! I added\
    \ a comment to the question to clarify what I'm looking for. I'm looking for the\
    \ list to be sorted so that all values at the indicies that are divisible by three\
    \ are equal, but sorted.\n<|/ c |>\n<| c |>\n, please see my updated answer. I\
    \ think this is what you're looking for.\n<|/ c |>\n<| c |>\n, thanks for the\
    \ update. I'm still not getting what I'm looking for. I'm looking for the list\
    \ to be sorted so that all values at the indicies that are divisible by three\
    \ are equal, but sorted.\n<|/ c |>\n<| a |>\nHere's a solution using dplyr and\
    \ tidyr. \n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n", "\n  l[order(l %% 3 == 0)]\n\
    }\n", "\n  l[order(c(TRUE, diff(l%%3 != 0)), decreasing = TRUE)]\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `sort_third(c(1,2,3))` returns\
    \ `c(1,2,3)` but `sort_third(c(1,2,3,4,5,6,7,8,9,10))` returns `c(1,2,3,4,5,6,7,8,9,10)`\n\
    <|/ c |>\n<| c |>\nYes, I forgot about that case. I've updated my answer to account\
    \ for it.\n<|/ c |>\n<| c |>\nThanks for your answer! It works perfectly for the\
    \ example I gave, but I realized that my example was too simple. I edited my question\
    \ to include a more complex example. Could you please take a look at it again?\n\
    <|/ c |>\n<| c |>\nI updated my answer to account for that case. Let me know if\
    \ that works for you.\n<|/ c |>\n<| c |>\nThanks for your answer! It works perfectly\
    \ for the example I gave, but I realized that my example was too simple. I edited\
    \ my question to include a more complex example. Could you please take a look\
    \ at it again?\n<|/ c |>\n<| a tags=r |>\nHere's a solution using dplyr and purrr\
    \ packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\nsort_third <- function(x)\
    \ {\n  x %>% \n    split(seq_along(x)) %>% \n    map(~sort(.x, decreasing = TRUE))\
    \ %>% \n    reduce(inner_join, by = \"x\")\n}\n\nsort_third(c(1,2,3))", "\n  l[order(l\
    \ %% 3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nI like this solution,\
    \ but I wonder if it can be generalized to work for any number of columns. I tried\
    \ to generalize it by creating a function that would return the indicies of columns\
    \ that should be sorted (which would then be fed to `order`), but that didn't\
    \ work.\n<|/ c |>\n<| c |>\nI added a generalized version to my answer.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nHere's a solution using dplyr and tidyr. \n<code>\nlibrary(dplyr)\n\
    library(tidyr)\n\ndf <- data.frame(a = c(1,2,3,4,5,6,7,8,9), b = c(2,3,4,5,6,7,8,9,10),\
    \ c = c(3,4,5,6,7,8,9,10,11))\n\ndf %>% \n  gather(variable, value, a:c) %>% \n\
    \  arrange(variable %% 3 == 0) %>% \n  select(-variable)\n\n  a  b  c\n1 1  2\
    \  3\n2 2  3  4\n3 3  4  5\n4 4  5  6\n5 5  6  7\n6 6  7  8\n7 7  8  9\n8 8  9\
    \ 10\n9 9 10 11\n</code>\n<|/ a tags=r,sorting |>\n<| a dscore=2 |>\nHere's a\
    \ solution using data.table:\n<code>\nlibrary(data.table)\nsetDT(df)\ndf[, lapply(.SD,\
    \ function(x) order(x %% 3 == 0)), .SDcols = names(df)[1:3]]\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\nHere's a solution using dplyr and tidyr. \n<code>\n\
    library(dplyr)\nlibrary(tidyr)\n\ndf <- data.frame(a = c(1,2,3,4,5,6,7,8,9), b\
    \ = c(2,3,4,5,6,7,8,9,10), c = c(3,4,5,6,7,8,9,10,11))\n\ndf %>% \n  gather(variable,\
    \ value, a:c) %>% \n  arrange(variable %% 3 == 0) %>% \n  select(-variable)\n\n\
    \  a  b  c\n1 1  2  3\n2 2  3  4\n3 3  4  5\n4 4  5  6\n5 5  6  7\n6 6  7  8\n\
    7 7  8  9\n8 8  9 10\n9 9 10 11\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,", "\n\
    \  l[order(l%%3 == 0, l%%3 == 1)]\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `Error in order(l%%3\
    \ == 0, l%%3 == 1) : object 'l' not found`\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a reproducible example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `Error in order(l%%3\
    \ == 0, l%%3 == 1) : object 'l' not found`\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a reproducible example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `Error in order(l%%3\
    \ == 0, l%%3 == 1) : object 'l' not found`\n<|/ c |>\n<| a |>\nI believe this\
    \ does what you want:\n<code>\nsort_third <- function(l) {\n  l[order(l%%3 ==\
    \ 0, l%%3 == 1)]\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. I tried your code, but I got this error `Error in order(l%%3 == 0, l%%3\
    \ == 1) : object 'l' not found`\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a reproducible example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I tried your code, but I got this error `Error in order(l%%3 == 0, l%%3 == 1)\
    \ : object 'l' not found`\n<|/ c |>\n<| c |>\nI edited my answer to include a\
    \ reproducible example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I tried your code, but I got this error `Error in order(l%%3 == 0, l%%3 == 1)\
    \ : object 'l' not found`\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsort_third <- function(l)\
    \ {\n  l[order(l%%3 == 0, l%%3 == 1)]\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    Thanks for your answer. I tried your code, but I got this error `Error in order(l%%3\
    \ == 0, l%%3 == 1) : object 'l' ", "\n  l[order(l %% 3 == 0, l)] <- l[order(l\
    \ %% 3 == 0, l)]\n  return(l)\n}\n", "\n  l[order(l %% 3 == 0)]\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,sorting |>\n<code>\nsort_third <- function(x) {\n\
    \  x[order(x %% 3 == 0)]\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sort_third <- function(x) {\n  x[order(x %% 3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nsort_third <- function(x) {\n  x[order(x\
    \ %% 3 == 0)]\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sorting |>\n<code>\n\
    sort_third <- function(x) {\n  x[order(x %% 3 == 0)]\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,sorting |>\n<code>\nsort_third <- function(x) {\n  x[order(x\
    \ %% 3 == 0)]\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsort_third\
    \ <- function(x) {\n  x[order(x %% 3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\nsort_third <- function(x) {\n  x[order(x %% 3\
    \ == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| a tags=r,sorting |>\n<code>\n\
    sort_third <- function(x) {\n  x[order(x %% 3 == 0)]\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsort_third <- function(x) {\n  x[order(x %% 3\
    \ == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| a dscore=1 |>\n<code>\nsort_third\
    \ <- function(x) {\n  x[order(x %% 3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\nsort_third <- function(x) {\n  x[order(x %% 3\
    \ == 0)]\n}\n</code>\n<|/ a tags=r,sorting |>\n<| a dscore=1 |>\n<code>\nsort_third\
    \ <- function(x) {\n  x[order(x %% 3 == 0)]\n}\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| a tags=r,sorting |>\n<code>\nsort_third <- function(x) {\n  x[order(x\
    \ %% 3 == 0)]\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n", "\n  l[order(l\
    \ %% 3 == 0, l %% 3 == 1)]\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your\
    \ answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\nThe `%%`\
    \ operator is vectorized so `l %% 3 == 0` returns a vector of TRUE/FALSE values\
    \ indicating whether each element of l is divisible by 3. The `order` function\
    \ then orders the elements of `l` by the result of `l %% 3 == 0` and the result\
    \ of `l %% 3 == 1`\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you please\
    \ explain how this works?\n<|/ c |>\n<| c |>\nI added an explanation to the answer\n\
    <|/ c |>\n<| c |>\nThanks for your explanation. Can you please explain how this\
    \ works?\n<|/ c |>\n<| a tags=r |>\nHere's a base R solution:\n<code>\nsort_third\
    \ <- function(l) {\n  l[order(l %% 3 == 0, l %% 3 == 1)]\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsort_third <- function(l) {\n  l[order(l %% 3 == 0, l %% 3 == 1)]\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Can you please\
    \ explain how this works?\n<|/ c |>\n<| c |>\nI added an explanation to the answer\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nsort_third <- function(l) {\n  l[order(l %%\
    \ 3 == 0, l %% 3 == 1)]\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    sort_third <- function(l) {\n  l[order(l %% 3 == 0, l %% 3 == 1)]\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThanks for your answer. Can you please explain how this\
    \ works?\n<|/ c |>\n<| c |>\nI added an explanation to the answer\n<|/ c |>\n\
    <| a tags=r |>\n<code>\nsort_third <- function(l) {\n  l[order(l %% 3 == 0, l\
    \ %% 3 == ", "\n  l[order(l %% 3 == 0)]\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thank you for the answer! I really appreciate it. I will try it out and let you\
    \ know how it goes.\n<|/ c |>\n<| c |>\nI got this error when I tried your code:\
    \ Error in sort(l %% 3 == 0) : object 'l' not found\n<|/ c |>\n<| c |>\nI edited\
    \ the answer to fix the error. Sorry about that!\n<|/ c |>\n<| c |>\nThank you\
    \ for the edit! I really appreciate it. I will try it out and let you know how\
    \ it goes.\n<|/ c |>\n<| c |>\nI got this error when I tried your code: Error\
    \ in sort(l %% 3 == 0) : object 'l' not found\n<|/ c |>\n<| a dscore=1 |>\nHere's\
    \ a solution using data.table:\n<code>\nlibrary(data.table)\ndt <- data.table(a\
    \ = c(1,2,3,4,5,6,7,8,9,10), b = c(2,3,4,5,6,7,8,9,10,11))\ndt[, c := ifelse(a\
    \ %% 3 == 0, b, a)]\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nThank you for\
    \ the answer! I really appreciate it. I will try it out and let you know how it\
    \ goes.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using dplyr and tidyr:\n\
    <code>\nlibrary(dplyr)\nlibrary(tidyr)\n\ndf <- data.frame(a = c(1,2,3,4,5,6,7,8,9,10),\
    \ b = c(2,3,4,5,6,7,8,9,10,11))\n\ndf %>% \n  mutate(c = ifelse(a %% 3 == 0, b,\
    \ a)) %>% \n  select(-c(1,2)) %>% \n  arrange(c)\n</code>\n<|/ a tags=r,sorting\
    \ |>\n<| c |>\nThank you for the answer! I really appreciate it. I will try it\
    \ out and let you know how it goes.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution\
    \ using dplyr and tidyr:\n<code>\nlibrary(dplyr)\nlibrary(tidyr)\n\ndf <- data.frame(a\
    \ = c(1,2,3,4,5,6,7,8,9,10), b = c(2,3,4,5,6,7,8,9,10,11))\n\ndf %>% \n  mutate(c\
    \ = ifelse(a %% 3 == 0, b, a)) %>"]
stop_tokens:
- "\n#"
- "\n```"
