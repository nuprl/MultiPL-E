name: HumanEval_18_how_many_times
language: r
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
  \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\nhow_many_times <- function(string,\
  \ substring) {"
tests: "test_humaneval <- function() {\ncandidate <- how_many_times\n    if(!identical(candidate('',\
  \ 'x'), 0)){quit('no', 1)}\n    if(!identical(candidate('xyxyxyx', 'x'), 4)){quit('no',\
  \ 1)}\n    if(!identical(candidate('cacacacac', 'cac'), 4)){quit('no', 1)}\n   \
  \ if(!identical(candidate('john doe', 'john'), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n\
    }\n", "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n}\n",
  "\n  str_count(string, substring)\n}\n", "\n  count <- 0\n  for(i in 1:(length(substring)\
    \ - 1)) {\n    count <- count + ((substring(i, i + 1) %in% substring) == TRUE)\n\
    \  }\n  return(count)\n}\n", "\n  str_count <- str_count(string, substring)\n\
    \  str_count <- str_count - str_count(substring, string) - str_count(string, substring)\n\
    \  str_count\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string,\
    \ fixed = TRUE)$lengths >= n)\n}\n", "\n  return(sum(gregexpr(substring, string,\
    \ fixed = TRUE)$length))\n}\n", "\n  count <- 0\n  i <- 0\n  while(i < length(string))\
    \ {\n    count <- count + ((substring(string, i, i) == substring) * 1)\n    i\
    \ <- i + 1\n  }\n  return(count)\n}\n", "\n  n <- nchar(string)\n  nchar(gsub(\"\
    [^\" + substring + \"]\", \"\", string))\n}\n", "\n  nchar(gsub(substring, \"\"\
    , string)) \n}\n", "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n\
    }\n", "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n}\n",
  "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n}\n", "\n  n\
    \ <- nchar(substring)\n  sum(grepl(substring, string, ignore.case = TRUE))\n}\n",
  "\n  n <- nchar(substring)\n  str_count <- str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring(string, 1, n))\n  str_count <- str_count\
    \ - str_count(substring(string, n + 1, nchar(string)), substring)\n  str_count\
    \ <- str_count - str_count(substring(string, 1, n), substring(string, n + 1, nchar(string)))\n\
    \  str_count <- str_count - str_count(substring(string, n + 1, nchar(string)),\
    \ substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), substring(string, 1, n))\n  str_count <- str_count - str_count(substring(string,\
    \ 1, n), ", "\n  nchar(gsub(\"[[:punct:]]\", \"\", string)) +\n    nchar(gsub(\"\
    [[:digit:]]\", \"\", string)) +\n    nchar(gsub(\"[[:lower:]]\", \"\", string))\
    \ +\n    nchar(gsub(\"[[:upper:]]\", \"\", string)) -\n    nchar(gsub(\"[[:alpha:]]\"\
    , \"\", string)) -\n    nchar(gsub(\"[[:space:]]\", \"\", string)) -\n    nchar(gsub(\"\
    [[:blank:]]\", \"\", string)) -\n    nchar(gsub(\"[[:punct:]]\", \"\", string))\
    \ -\n    nchar(gsub(\"[[:digit:]]\", \"\", string)) -\n    nchar(gsub(\"[[:lower:]]\"\
    , \"\", string)) -\n    nchar(gsub(\"[[:upper:]]\", \"\", string))\n}\n", "\n\
    \  nchar(gsub(\"[^\" + substring + \"]\", \"\", string))\n}\n", "\n  str_count\
    \ <- str_count(string, substring)\n  str_count <- str_count - str_count(substring,\
    \ string) - str_count(string, substring)\n  str_count\n}\n", "\n  return(sum(gregexpr(substring,\
    \ string, fixed = TRUE)$length))\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring,\
    \ string, fixed = TRUE)$lengths >= n)\n}\n</cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
