name: HumanEval_139_special_factorial
language: r
prompt: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
  # 288\n# The function will receive an integer as input and should return the special\n\
  # factorial of this integer.\nspecial_factorial <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- special_factorial\n    if(!identical(candidate(4),\
  \ 288)){quit('no', 1)}\n    if(!identical(candidate(5), 34560)){quit('no', 1)}\n\
  \    if(!identical(candidate(7), 125411328000)){quit('no', 1)}\n    if(!identical(candidate(1),\
  \ 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  factorial <- 1\n  i <- 1\n  while (i <= n) {\n    factorial * i\
    \ <- factorial * (n - i)\n    i <- i + 1\n  }\n  factorial\n}\n", "\n  factorial\
    \ <- 1\n  i <- 1\n  while (i <= n) {\n    factorial * i <- factorial * i\n   \
    \ i <- i + 1\n  }\n  factorial\n}\n", "\n  factorial <- 1\n  for (i in 1:n) {\n\
    \    factorial *= i\n  }\n  factorial\n}\n", "\n  factorial <- 1\n  for (i in\
    \ 2:n) {\n    factorial * i <- factorial * i\n  }\n  factorial\n}\n", "\n  factorial\
    \ <- 1\n  for (i in 2:n) {\n    factorial * i <- factorial * i\n  }\n  factorial\n\
    }\n", "\n  factorial <- 1\n  i <- 1\n  while (i <= n) {\n    factorial * i <-\
    \ factorial * (i - 1)\n    i <- i + 1\n  }\n  factorial\n}\n", "\n  factorial\
    \ <- 1\n  for(i in 1:n) {\n    factorial * i\n  }\n}\n", "\n  factorial <- 1\n\
    \  for (i in 1:n) {\n    factorial * i\n  }\n}\n", "\n  factorial <- 1\n  i <-\
    \ 1\n  while (i <= n) {\n    factorial * i <- factorial * (n - i)\n    i <- i\
    \ + 1\n  }\n  factorial\n}\n", "\n  factorial <- function(n) if (n <= 1) 1 else\
    \ n * factorial(n - 1)\n  factorial(n)\n}\n", "\n  factorial <- 1\n  for (i in\
    \ 1:n) {\n    factorial * i\n  }\n}\n", "\n  factorial <- 1\n  for (i in 2:n)\
    \ {\n    factorial * i <- factorial * i\n  }\n  factorial\n}\n", "\n  factorial\
    \ <- 1\n  i <- 1\n  while (i <= n) {\n    factorial * i <- factorial * (n - i)\n\
    \    i <- i + 1\n  }\n  factorial\n}\n", "\n  factorial <- 1\n  i <- 1\n  while\
    \ (i <= n) {\n    factorial * i <- factorial * (i - 1)\n    i <- i + 1\n  }\n\
    \  factorial\n}\n", "\n  factorial <- 1\n  for(i in 1:n) {\n    factorial * i\n\
    \  }\n}\n", "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial * i\n  }\n\
    }\n", "\n  factorial <- 1\n  for (i in 2:n) {\n    factorial * i <- factorial\
    \ * i\n  }\n  factorial\n}\n", "\n  factorial <- 1\n  i <- 1\n  while (i <= n)\
    \ {\n    factorial * i <- factorial * (n - i)\n    i <- i + 1\n  }\n  factorial\n\
    }\n", "\n  factorial <- 1\n  for (i in 2:n) {\n    factorial * i <- factorial\
    \ * (i - 1)\n  }\n  factorial\n}\n", "\n  factorial <- 1\n  for(i in 1:n) {\n\
    \    factorial * i <- factorial * i\n  }\n  factorial\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
