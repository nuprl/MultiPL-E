name: HumanEval_96_count_up_to
language: r
prompt: "# Implement a function that takes an non-negative integer and returns a vector\
  \ of the first n\n# integers that are prime numbers and less than n.\n# for example:\n\
  # >>> count_up_to(5)\n# c(2, 3)\n# >>> count_up_to(11)\n# c(2, 3, 5, 7)\n# >>> count_up_to(0)\n\
  # c()\n# >>> count_up_to(20)\n# c(2, 3, 5, 7, 11, 13, 17, 19)\n# >>> count_up_to(1)\n\
  # c()\n# >>> count_up_to(18)\n# c(2, 3, 5, 7, 11, 13, 17)\ncount_up_to <- function(n)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- count_up_to\n    if(!identical(candidate(5),\
  \ c(2, 3))){quit('no', 1)}\n    if(!identical(candidate(6), c(2, 3, 5))){quit('no',\
  \ 1)}\n    if(!identical(candidate(7), c(2, 3, 5))){quit('no', 1)}\n    if(!identical(candidate(10),\
  \ c(2, 3, 5, 7))){quit('no', 1)}\n    if(!identical(candidate(0), c())){quit('no',\
  \ 1)}\n    if(!identical(candidate(22), c(2, 3, 5, 7, 11, 13, 17, 19))){quit('no',\
  \ 1)}\n    if(!identical(candidate(1), c())){quit('no', 1)}\n    if(!identical(candidate(18),\
  \ c(2, 3, 5, 7, 11, 13, 17))){quit('no', 1)}\n    if(!identical(candidate(47), c(2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43))){quit('no', 1)}\n    if(!identical(candidate(101),\
  \ c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
  \ 73, 79, 83, 89, 97))){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  \n}\n</cell>\n<text>\nProblem 3\nWrite a function that takes an\
    \ integer and returns a vector of the squares of all the integers less than or\
    \ equal to that integer.\n\n\n</text>\n<cell>", "\n  \n}\n</cell>\n<cell>", "\n\
    \  \n}\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns a vector of the squares of the numbers in the vector.\nFor example,\
    \ \n>>> square_of_vector(c(1, 2, 3))\nc(1, 4, 9)\n>>> square_of_vector(c(3, 4,\
    \ 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square", "\n  if(n <= 0) return()\n  if(n %% 2 ==\
    \ 0) return(c(n))\n  return(c(n,n-1))\n}\n", "\n  n <- as.integer(n)\n  \n  if(n\
    \ <= 0) return()\n  \n  if(n %% 2 == 0) return(c(n))\n  \n  i <- 3\n  \n  while(i\
    \ <= sqrt(n)) {\n    if(n %% i == 0) return(c(n, i))\n    i <- i + 1\n  }\n}\n\
    \ncount_up_to(20)", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x+1, x+2))\n   \
    \ x <- x + 2\n  }\n  return(c())\n}\n", "\n  n <- n + 1\n  x <- c()\n  for(i in\
    \ 2:n) {\n    for(j in 1:i) {\n      if(j %% i == 0) {\n        x <- c(x, i)\n\
    \      }\n    }\n  }\n  x\n}\n", "\n  n <- as.integer(n)\n  if(n <= 0) return(NULL)\n\
    \  if(n <= 1) return(integer(1))\n  if(n %% 2 == 0) return(integer(n))\n  if(n\
    \ %% 3 == 0) return(integer(n))\n  if(n %% 5 == 0) return(integer(n))\n  if(n\
    \ %% 7 == 0) return(integer(n))\n  if(n %% 11 == 0) return(integer(n))\n  if(n\
    \ %% 13 == 0) return(integer(n))\n  if(n %% 17 == 0) return(integer(n))\n  if(n\
    \ %% 19 == 0) return(integer(n))\n  return(integer(n))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,primes |>\n<code>\nprimes <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(1))\n  if(n %% 2 == 0)\
    \ return(integer(n))\n  if(n %% 3 == 0) return(integer(n))\n  if(n %% 5 == 0)\
    \ return(integer(n))\n  if(n %% 7 == 0) return(integer(n))\n  if(n %% 11 == 0)\
    \ return(integer(n))\n  if(n %% 13 == 0) return(integer(n))\n  if(n %% 17 == 0)\
    \ return(integer(n))\n  if(n %% 19 == 0) return(integer(n))\n  return(integer(n))\n\
    }\n\nprimes(10)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nprimes\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n <= 0) return(NULL)\n  if(n <=\
    \ 1) return(integer(1))\n  if(n %% 2 == 0) return(integer(n))\n  if(n %% 3 ==\
    \ 0) return(integer(n))\n  if(n %% 5 == 0) return(integer(n))\n  if(n %% 7 ==\
    \ 0) return(integer(n))\n  if(n %% 11 == 0) return(integer(n))\n  if(n %% 13 ==\
    \ 0) return(integer(n))\n  if(n %% 17 == 0) return(integer(n))\n  if(n %% 19 ==\
    \ 0) return(integer(n))\n  return(integer(n))\n}\n\nprimes(10)\n</code>\n<|/ a\
    \ tags=r,primes |>\n<| a tags=r,primes |>\n<code>\nprimes <- function(n) {\n \
    \ n <- as.integ", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n \
    \ return(c(n, count_up_to(n-1)))\n}\n</cell>\n<cell>", "\n  n <- n\n  \n  if(n\
    \ < 1) {\n    return(c())\n  }\n  \n  if(n %% 2 == 0) {\n    return(c(n))\n  }\n\
    \  \n  x <- 3\n  \n  while(x <= n) {\n    if(n %% x == 0) {\n      return(c(x,\
    \ n/x))\n    }\n    x <- x + 2\n  }\n  \n  return(c())\n}\n\ncount_up_to(20)",
  "\n  n <- n + 1\n  if(n <= 0) return(NULL)\n  if(n %% 2 == 0) return(c(n))\n  x\
    \ <- 3\n  while(x %% n != 0) {\n    x <- x + 1\n  }\n  return(c(x, n))\n}\n",
  "\n  \n}\n</cell>\n<text>\nExercise 4\nWrite a function that takes an integer vector\
    \ and returns a vector of the squares of the numbers in the vector.\nFor example,\
    \ \n>>> square_of_vector(c(2, 3, 4))\nc(0, 0, 1, 4)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2,\
    \ 9, 16, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(0, 1, 2, 9, 16, 25)\n>>> square_of_",
  "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2,\
    \ 3))\n  if(n %% 5 == 0) return(c(2, 3, 5))\n  if(n %% 7 == 0) return(c(2, 3,\
    \ 5, 7))\n  if(n %% 11 == 0) return(c(2, 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2,\
    \ 3, 5, 7, 11, 13))\n  if(n %% 17 == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n\
    \ %% 19 == 0) return(c(2, 3, 5, 7, 11, 13, 17, 19))\n  return(c())\n}\n</cell>\n\
    <cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(17)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(7)\n</cell>\n<cell>\n\
    count_up_to(5)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes an integer vector and\
    \ returns a vector of the same length\nthat contains the number of occurrences\
    \ of each number in the input vector.\nFor example, if the input vector is c(2,\
    \ 5, 3, 7, 5, 9), then the output vector should be c(2, \n5, 3, 7, 5, 9).\n\n\
    The input vector is assumed to be sorted in ascending order.\n\n\n</text>\n<cell>",
  "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  if(n %% 3 == 0) return(c(n,\
    \ 3))\n  if(n %% 5 == 0) return(c(n, 5, 7))\n  if(n %% 7 == 0) return(c(n, 5,\
    \ 7, 11))\n  if(n %% 11 == 0) return(c(n, 5, 7, 11, 13))\n  if(n %% 13 == 0) return(c(n,\
    \ 5, 7, 11, 13, 17))\n  if(n %% 17 == 0) return(c(n, 5, 7, 11, 13, 17, 19))\n\
    \  return(c(n, 5, 7, 11, 13, 17, 19, 23))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<cell>\ncount_up_to(23)\n</cell>\n\
    <cell>\ncount_up_to(25)\n</cell>\n<cell>\ncount_up_to(30)\n</cell>\n<cell>\ncount_up_to(100)\n\
    </cell>\n<cell>\ncount_up_to(1000)\n</cell>\n<cell>\ncount_up_to(10000)\n</cell>\n\
    <cell>\ncount_up_to(100000)\n</cell>\n<cell>\ncount_up_to(1000000)\n</cell>\n\
    <cell>\ncount_up_to(10000000)\n</cell>\n<cell>\ncount_up_to(100000000)\n</cell>\n\
    <cell>\ncount_up_to(1000000000)\n</cell>\n<cell>\ncount_up_to(10000000000)\n</cell>\n\
    <cell>\ncount_up_to(100000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<", "\n  \n}\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns a vector where each element is the product of all the numbers\
    \ in the vector.\nFor example, \n>>> prod(c(2, 3, 5, 7))", "\n  \n}\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer vector and returns\
    \ a vector of the squares of the numbers in the vector.\nFor example, \n>>> square_of_vector(c(2,\
    \ 3, 4))\nc(2, 4, 9)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n", "\n \
    \ if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n",
  "\n  n <- n + 1\n  x <- c()\n  for(i in 2:n) {\n    for(j in 1:i) {\n      if(j\
    \ %% i == 0) {\n        x <- c(x, i)\n        break\n      }\n    }\n  }\n  x\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in that vector.\nFor example, c(2, 3,\
    \ 4) should return 25 and c(3, 2) should return 9.\n\n\n</text>\n<cell>", "\n\
    \  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(count_up_to(n-1))\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nExercise: Implement a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nThe function should return\
    \ $n$ if $n$ is less than or equal to zero, or $n-1$ if $n$ is greater than or\
    \ equal to two.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 0) return(c())\n\
    \  if(n <= 1) return(c(n))\n  if(n %% 2 == 0) return(c(n))\n  if(n %% 3 == 0)\
    \ return(c(n))\n  if(n %% 5 == 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n\
    \  if(n %% 11 == 0) return(c(n))\n  if(n %% 13 == 0) return(c(n))\n  if(n %% 17\
    \ == 0) return(c(n))\n  if(n %% 19 == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n\
    <cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n\
    </cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\n\
    count_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nExercise\n\
    Implement a function that takes an integer n and returns the first n prime numbers.\n\
    \nThe first n prime numbers are 2, 3, 5, 7, 11, 13, 17, 19; \nthe second n prime\
    \ numbers are 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97.\n\n\n</text>\n<cell>", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n", "\n  n <- n + 1\n \
    \ if(n <= 1) return(integer(0))\n  if(n %% 2 == 0) return(integer(0))\n  return(integer(n))\n\
    }\n</cell>\n<cell>\ncount_up_to(10)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n\
    <cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n<cell>\ncount_up_to(20)\n\
    </cell>\n<cell>\ncount_up_to(21)\n</cell>\n<cell>\ncount_up_to(22)\n</cell>\n\
    <cell>\ncount_up_to(23)\n</cell>\n<cell>\ncount_up_to(24)\n</cell>\n<cell>\ncount_up_to(25)\n\
    </cell>\n<cell>\ncount_up_to(26)\n</cell>\n<cell>\ncount_up_to(27)\n</cell>\n\
    <cell>\ncount_up_to(28)\n</cell>\n<cell>\ncount_up_to(29)\n</cell>\n<cell>\ncount_up_to(30)\n\
    </cell>\n<cell>\ncount_up_to(31)\n</cell>\n<cell>\ncount_up_to(32)\n</cell>\n\
    <cell>\ncount_up_to(33)\n</cell>\n<cell>\ncount_up_to(34)\n</cell>\n<cell>\ncount_up_to(35)\n\
    </cell>\n<cell>\ncount_up_to(36)\n</cell>\n<cell>\ncount_up_to(37)\n</cell>\n\
    <cell>\ncount_up_to(38)\n</cell>\n<cell>\ncount_up_to(39)\n</cell>\n<cell>\ncount_up_to(40)\n\
    </cell>\n<cell>\ncount_up_to(41)\n</cell>\n<cell>\ncount_up_to(42)\n</cell>\n\
    <cell>\ncount_up_to(43)\n</cell>\n<cell>\ncount_up_to(44)\n</cell>\n<cell>\ncount_up_to(45)\n\
    </cell>\n<cell>\ncount_up_to(46)\n</cell>\n<cell>\ncount_up_to(47)\n</cell>\n\
    <cell>\ncount_up_to(48)\n</cell>\n<cell>\ncount_up_to(49)\n</cell>\n<cell>\ncount_",
  "\n  n <- as.integer(n)\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(c())\n \
    \ if(n <= 2) return(c(2, 3))\n  if(n <= 3) return(c(2, 3, 5))\n  if(n <= 5) return(c(2,\
    \ 3, 5, 7))\n  if(n <= 7) return(c(2, 3, 5, 7, 11))\n  if(n <= 11) return(c(2,\
    \ 3, 5, 7, 11, 13))\n  if(n <= 13) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n <=\
    \ 17) return(c(2, 3, 5, 7, 11, 13, 17, 19))\n  if(n <= 19) return(c(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23))\n  return(c())\n}\n</code>\n<|/ a tags=r,primes |>\n<|\
    \ c |>\nI like your solution, but I wonder if there is a way to avoid the repetition\
    \ of `c()` in the `return` statements.\n<|/ c |>\n<| c |>\nI thought about that,\
    \ but I couldn't think of a way to do it without repeating `c()`. I think it would\
    \ be more efficient to just return the `c()` at the end, but I wanted to keep\
    \ my answer as close to OP's code as possible.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. I just wanted to point out that your solution is more efficient than mine.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid\
    \ the repetition of `c()` in the `return` statements.\n<|/ c |>\n<| c |>\nI added\
    \ a version that avoids the repetition of `c()` in the `return` statements.\n\
    <|/ c |>\n<| a tags=r,primes |>\nHere is a solution that uses RcppAlgos::nextPrime()\
    \ from Rcpp package:\n<code>\nlibrary(RcppAlgos)\n\ncount_up_to <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(c())\n\
    \  if(n <= 2) return(c(2, 3))\n  if(n <= 3) return(c(2, 3, 5))\n  if(n <= 5) return(c(2,\
    \ 3, 5, 7))\n  if(n <= 7) return(c(2, 3, 5, 7, 11))\n  if(n <= 11) return(c(2,\
    \ 3, 5, 7, 11, 13))\n  if(n <= 13) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n <=\
    \ 17) return(c(2, 3, 5, 7, 11, 13, 17, 19))", "\n  \n  if(n <= 1) return()\n \
    \ \n  x <- c(2, 3)\n  \n  for(i in 4:n) {\n    \n    for(j in x:n) {\n      \n\
    \      if(j %% i == 0) break()\n    }\n    \n    if(j == n) x <- c(x, i)\n  }\n\
    \  \n  x\n}\n\ncount_up_to(20)\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\n\
    count_up_to <- function(n) {\n  \n  if(n <= 1) return()\n  \n  x <- c(2, 3)\n\
    \  \n  for(i in 4:n) {\n    \n    for(j in x:n) {\n      \n      if(j %% i ==\
    \ 0) break()\n    }\n    \n    if(j == n) x <- c(x, i)\n  }\n  \n  x\n}\n\ncount_up_to(20)\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\ncount_up_to <- function(n)\
    \ {\n  \n  if(n <= 1) return()\n  \n  x <- c(2, 3)\n  \n  for(i in 4:n) {\n  \
    \  \n    for(j in x:n) {\n      \n      if(j %% i == 0) break()\n    }\n    \n\
    \    if(j == n) x <- c(x, i)\n  }\n  \n  x\n}\n\ncount_up_to(20)\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ncount_up_to <- function(n) {\n  \n\
    \  if(n <= 1) return()\n  \n  x <- c(2, 3)\n  \n  for(i in 4:n) {\n    \n    for(j\
    \ in x:n) {\n      \n      if(j %% i == 0) break()\n    }\n    \n    if(j == n)\
    \ x <- c(x, i)\n  }\n  \n  x\n}\n\ncount_up_to(20)\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\ncount_up_to <- function(n) {\n  \n  if(n <= 1) return()\n\
    \  \n  x <- c(2, 3)\n  \n  for(i in 4:n) {\n    \n    for(j in x:n) {\n      \n\
    \      if(j %% i == 0) break()\n    }\n    \n    if(j == n) x <- c(x, i)\n  }\n\
    \  \n  x\n}\n\ncount_up_to(20)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    count_up_to <- function(n) {\n  ", "\n  n <- n\n  if(n < 1) {\n    return(c())\n\
    \  }\n  if(n <= 3) {\n    return(c(2, 3))\n  }\n  if(n <= 5) {\n    return(c(2,\
    \ 3, 5))\n  }\n  if(n <= 7) {\n    return(c(2, 3, 5, 7))\n  }\n  if(n <= 11) {\n\
    \    return(c(2, 3, 5, 7, 11))\n  }\n  if(n <= 13) {\n    return(c(2, 3, 5, 7,\
    \ 11, 13))\n  }\n  if(n <= 17) {\n    return(c(2, 3, 5, 7, 11, 13, 17))\n  }\n\
    \  if(n <= 19) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19))\n  }\n  if(n <= 23)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23))\n  }\n  if(n <= 29) {\n   \
    \ return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29))\n  }\n  if(n <= 39) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 39))\n  }\n  if(n <= 49) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49))\n  }\n  if(n <= 59) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59))\n  }\n  if(n <= 69) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69))\n  }\n  if(n <= 79) {\n  \
    \  return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79))\n  }\n  if(n\
    \ <= 89) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79,\
    \ 89))\n  }\n  if(n <= 99) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 39, 49, 59, 69, 79, 89, 99))\n  }\n  if(n <= 109) {\n    return(c(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89, 99, 109))\n  }\n  if(n <= 119)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89,\
    \ 99, 109, 119))\n  }\n  if(n <= 129) {\n    return(c(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129))\n  }\n  if(n <= 139)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89,\
    \ 99, 109, 119, 129, 139))\n  }\n  if(n <= 149) {\n    return(c", "\n  \n}\n</cell>\n\
    <cell>", "\n  n <- n\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x))\n    x <- x\
    \ + 2\n  }\n}\n", "\n  n <- n + 1\n  if(n <= 1) return(integer(0))\n  if(n %%\
    \ 2 == 0) return(integer(0))\n  if(n %% 3 == 0) return(integer(0))\n  if(n %%\
    \ 5 == 0) return(integer(0))\n  if(n %% 7 == 0) return(integer(0))\n  if(n %%\
    \ 11 == 0) return(integer(0))\n  if(n %% 13 == 0) return(integer(0))\n  if(n %%\
    \ 17 == 0) return(integer(0))\n  if(n %% 19 == 0) return(integer(0))\n  return(integer(n))\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers.\n\nThe function should only take one\
    \ argument, x, and return a number.\n\n\n</text>\n<cell>", "\n  \n}\n</cell>\n\
    <cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  x <- 3\n\
    \  y <- 2\n  while(x <= n) {\n    while(y <= n && x %% y == 0) {\n      y <- y\
    \ + 1\n    }\n    if(y > n) return(c(n))\n    x <- x + 1\n    y <- 2\n  }\n}\n\
    </cell>\n<cell>\ncount_up_to(10)\n</cell>\n<cell>\ncount_up_to(100)\n</cell>\n\
    <cell>\ncount_up_to(1000)\n</cell>\n<cell>\ncount_up_to(10000)\n</cell>\n<cell>\n\
    count_up_to(100000)\n</cell>\n<cell>\ncount_up_to(1000000)\n</cell>\n<cell>\n\
    count_up_to(10000000)\n</cell>\n<cell>\ncount_up_to(100000000)\n</cell>\n<cell>\n\
    count_up_to(1000000000)\n</cell>\n<cell>\ncount_up_to(10000000000)\n</cell>\n\
    <cell>\ncount_up_to(100000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000000)\n</cell>\n<cell>\n\
    count_up_to(10000000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100",
  "\n  \n  if(n <= 1) return(c())\n  \n  primes <- c(2, 3)\n  \n  for(i <- 3L; primes[i]\
    \ <= n; primes[i] <- primes[i+1] + 1) {\n    \n    for(j <- 3L; primes[j] <= primes[i];\
    \ j <- j + 1) {\n      \n      if(primes[i] %% j == 0) break\n    }\n    \n  \
    \  if(j > primes[i]) primes[i] <- primes[i] + j\n  }\n  \n  return(primes)\n}\n\
    </cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\n\
    count_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of the same length with the number of occurrences of each integer.\n\
    For example, if the input vector is c(3, 1, 2, 2, 5), then the output vector should\
    \ be c(3=1, 1=2, 2=2, 5=1).\n\n\n</text>\n<cell>", "\n  n <- n\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  if(n %% 3 == 0) return(c(n))\n  if(n %% 5 ==\
    \ 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n  if(n %% 11 == 0) return(c(n))\n\
    \  if(n %% 13 == 0) return(c(n))\n  if(n %% 17 == 0) return(c(n))\n  if(n %% 19\
    \ == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n\
    <cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n\
    </cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\n\
    count_up_to(19)\n</cell>\n<text>\nProblem 3\nWrite a function that takes an integer\
    \ vector and returns a vector of the same length where each element is the sum\
    \ of the elements in the original vector except the element at that index.\nFor\
    \ example, if the input vector is c(10, 20, 30, 40) then the returned vector should\
    \ be c(10, 30, 40).\n\n\n</text>\n<cell>", "\n  if(n <= 0) return()\n  if(n %%\
    \ 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n", "\n  \n}\n</cell>\n<cell>",
  "\n  n <- n + 1\n  if(n <= 1) return(vector())\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  y <- 0\n  while(x <= n) {\n    y <- y + 1\n    if(y > x) break\n\
    \    if(x %% x == 0) return(c(x, y))\n    x <- x + 2\n  }\n  return(c())\n}\n\
    </cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\n\
    count_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nProblem 3\nThe Fibonacci sequence is defined by the formula:\n\n$Fn =\
    \ \\begin{cases}\n  1 & n = 0\\\n  1 & n = 1 \\\n  F{n-1} + F_{n-2} & n > 1\n\\\
    end{cases}$\n\nwhere $F_n$ is the n-th number in the Fibonacci sequence. An example\
    \ of a sequence with 10 entries\nis 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ ...\n\nBy calling the sequence  $F_n$, an entry of the Fibonacci sequence is\
    \ generated by adding the previous two entries.\n\nBy starting with $F_0$ and\
    \ $F_1$, we can compute the $n$-th entry of the Fibonacci sequence by adding the\
    \ previous two entries:\n\n$F_n = F_{n-1} + F_{n-2}$\n\nFor example, if we start\
    \ $F_0$ and $F_1$ at 0, 1 and respectively $F_3$ and $F_4$, then $F_3$ is equal\
    \ to $F_0 + F_1$ and $F_4$ is equal to $F_1 + F_2$. Hence $F_3$ is equal to 1,\
    \ and $F_4$ is equal to 2. Since $F_3$ and $F_4$ are equal to 2, the sequence\
    \ will have $F_5$ and $F_6$. By iterating this process by computing each $F_i$,\
    \ we can generate the entire sequence by adding together the previous two $F_i$.\n\
    \n\n</text>\n<cell>\nfib <- function(n) {\n  if(n <= 0) return(vector())\n  if(n\
    \ %% 2 == 0) return(c(n))\n  x ", "\n  n <- n + 1\n  \n  if(n <= 1) return(numeric(0))\n\
    \  \n  is_prime <- function(x) {\n    x <- x\n    \n    for(i in 2:ceiling(sqrt(x)))\
    \ {\n      if(x %% i == 0) return(FALSE)\n    }\n    \n    return(TRUE)\n  }\n\
    \  \n  is_prime <- is_prime(n)\n  \n  if(is_prime) {\n    i <- 1\n    \n    while(i\
    \ <= n) {\n      if(is_prime(i)) return(c(i, i))\n      i <- i + 1\n    }\n  }\n\
    \  \n  return(c())\n}\n</cell>\n<cell>", "\n  if(n <= 0) return(c())\n  if(n %%\
    \ 2 == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2, 3))\n  if(n %% 5 == 0) return(c(2,\
    \ 3, 5))\n  if(n %% 7 == 0) return(c(2, 3, 5, 7))\n  if(n %% 11 == 0) return(c(2,\
    \ 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2, 3, 5, 7, 11, 13))\n  if(n %% 17\
    \ == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n %% 19 == 0) return(c(2, 3, 5,\
    \ 7, 11, 13, 17, 19))\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n <\
    \ 1) {\n    return(c())\n  }\n  if(n <= 3) {\n    return(c(2, 3))\n  }\n  if(n\
    \ <= 5) {\n    return(c(2, 3, 5))\n  }\n  if(n <= 7) {\n    return(c(2, 3, 5,\
    \ 7))\n  }\n  if(n <= 11) {\n    return(c(2, 3, 5, 7, 11))\n  }\n  if(n <= 13)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13))\n  }\n  if(n <= 17) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17))\n  }\n  if(n <= 19) {\n    return(c(2, 3, 5, 7, 11, 13,\
    \ 17, 19))\n  }\n  if(n <= 23) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23))\n\
    \  }\n  if(n <= 29) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29))\n  }\n\
    \  if(n <= 39) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39))\n  }\n\
    \  if(n <= 49) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49))\n\
    \  }\n  if(n <= 59) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49,\
    \ 59))\n  }\n  if(n <= 69) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 39, 49, 59, 69))\n  }\n  if(n <= 79) {\n    return(c(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 39, 49, 59, 69, 79))\n  }\n  if(n <= 89) {\n    return(c(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89))\n  }\n  if(n <= 99) {\n\
    \    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89, 99))\n\
    \  }\n  if(n <= 109) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49,\
    \ 59, 69, 79, 89, 99, 109))\n  }\n  if(n <= 119) {\n    return(c(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89, 99, 109, 119))\n  }\n  if(n <= 129)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89,\
    \ 99, 109, 119, 129))\n  }\n  if(n <= 139) {\n    return(c(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129, 139))\n  }\n  if(n\
    \ <= 149) {", "\n  n <- n\n  if(n < 1) {\n    return(c())\n  }\n  if(n <= 3) {\n\
    \    return(c(2, 3))\n  }\n  if(n <= 5) {\n    return(c(2, 3, 5))\n  }\n  if(n\
    \ <= 7) {\n    return(c(2, 3, 5, 7))\n  }\n  if(n <= 11) {\n    return(c(2, 3,\
    \ 5, 7, 11))\n  }\n  if(n <= 13) {\n    return(c(2, 3, 5, 7, 11, 13))\n  }\n \
    \ if(n <= 17) {\n    return(c(2, 3, 5, 7, 11, 13, 17))\n  }\n  if(n <= 19) {\n\
    \    return(c(2, 3, 5, 7, 11, 13, 17, 19))\n  }\n  if(n <= 23) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23))\n  }\n  if(n <= 29) {\n    return(c(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29))\n  }\n  if(n <= 39) {\n    return(c(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 39))\n  }\n  if(n <= 49) {\n    return(c(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 39, 49))\n  }\n  if(n <= 59) {\n    return(c(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 39, 49, 59))\n  }\n  if(n <= 69) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69))\n  }\n  if(n <= 79) {\n  \
    \  return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79))\n  }\n  if(n\
    \ <= 99) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79,\
    \ 99))\n  }\n  if(n <= 119) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 39, 49, 59, 69, 79, 99, 119, 119))\n  }\n  if(n <= 129) {\n    return(c(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 99, 119, 119, 129, 129))\n\
    \  }\n  if(n <= 139) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49,\
    \ 59, 69, 79, 99, 119, 119, 129, 129, 139, 139))\n  }\n  if(n <= 159) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 99, 119, 119, 129, 129,\
    \ 139, 139, 159, 159))\n  }\n  if(n <= 179) {\n    return(c(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 39, 49, 59, 69, 79, 99, 119, 11", "\n  \n}\n</cell>\n<cell>",
  "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n, count_up_to(n-1)))\n\
    }\n", "\n  n <- n + 1\n  i <- 1\n  while(i <= n) {\n    if(i %% 2 == 0) {\n  \
    \    i <- i + 1\n      if(i %% 3 == 0) {\n        i <- i + 1\n        if(i %%\
    \ 5 == 0) {\n          i <- i + 1\n          if(i %% 7 == 0) {\n            i\
    \ <- i + 1\n            if(i %% 11 == 0) {\n              i <- i + 1\n       \
    \       if(i %% 13 == 0) {\n                i <- i + 1\n                if(i %%\
    \ 17 == 0) {\n                  i <- i + 1\n                  if(i %% 19 == 0)\
    \ {\n                    i <- i + 1\n                  }\n                }\n\
    \              }\n            }\n          }\n        }\n      }\n    }\n  }\n\
    \  return(i)\n}\n", "\n  n <- n\n  if(n <= 0) return(NULL)\n  \n  primes <- c(2,\
    \ 3, 5, 7, 11, 13, 17)\n  \n  i <- 1\n  \n  while(i <= n) {\n    \n    for(j in\
    \ primes) {\n      \n      if(j > i && j <= n && j %% i != 0) {\n        \n  \
    \      i <- i + j\n        break\n      }\n    }\n    \n    if(i > n) return(NULL)\n\
    \    \n    i <- i + 1\n  }\n  \n  return(i)\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer vector and returns a vector of the same length with all\
    \ negative numbers removed.\n\nFor example, if the input vector is c(2, -3, 4,\
    \ -5, 6, -7, 8), then the output vector should be c(-2, -3, -4, -5, -6, -7, -8).\n\
    \n\n</text>\n<cell>", "\n  \n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes an integer vector and returns a vector of the squares of the numbers in\
    \ the vector.\nFor example, \n>>> square_of_vector(c(1, 2, 3))\nc(1, 4, 9)\n>>>\
    \ square_of_vector(c(1, 2, -3))\nc(-1, 2, -6)\n>>> square_of_vector(c(-1))\nc(0)\n\
    >>> square_of_vector(c())\nc()\n>>> square_of_vector(c(NA))\nc(NA)\n>>> square_of_vector(c(NA,\
    \ na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>>\
    \ square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm\
    \ = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA,\
    \ na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>>\
    \ square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm\
    \ = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA,\
    \ na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>>\
    \ square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm\
    \ = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA,\
    \ na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>>\
    \ square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm\
    \ = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA,\
    \ na.rm = TRUE))\nc(NA)\n>>> square_of_vector(c(NA, na.rm = TRUE", "\n  \n}\n\
    </cell>\n<cell>", "\n  \n  if(n <= 0) return()\n  \n  if(n %% 2 == 0) return(c(n))\n\
    \  \n  x <- 3\n  \n  while(x <= n) {\n    if(n %% x == 0) return(c(n, x))\n  \
    \  x <- x + 2\n  }\n  \n  return(c(n))\n}\n\ncount_up_to(0)", "\n  n <- as.integer(n)\n\
    \  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(1))\n  if(n %% 2 == 0)\
    \ return(integer(n))\n  if(n %% 3 == 0) return(integer(n))\n  if(n %% 5 == 0)\
    \ return(integer(n))\n  if(n %% 7 == 0) return(integer(n))\n  if(n %% 11 == 0)\
    \ return(integer(n))\n  if(n %% 13 == 0) return(integer(n))\n  if(n %% 17 == 0)\
    \ return(integer(n))\n  if(n %% 19 == 0) return(integer(n))\n  return(integer(n))\n\
    }\n</code>\n<|/ a tags=r,primes |>\n<| c |>\nI like your solution, but I wonder\
    \ why you didn't just use `ifelse`?\n<|/ c |>\n<| c |>\nI didn't know about `ifelse`\
    \ until I saw your solution.  I thought it was a little more complicated than\
    \ it needed to be.  I guess I should learn to use `ifelse` more often.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. `ifelse` is very useful.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder why you didn't just use `ifelse`?\n<|/ c |>\n\
    <| c |>\nI didn't know about `ifelse` until I saw your solution.  I thought it\
    \ was a little more complicated than it needed to be.  I guess I should learn\
    \ to use `ifelse` more often.\n<|/ c |>\n<| a tags=r,primes |>\nHere's a solution\
    \ using RcppAlgos::primes::primes\n<code>\nlibrary(RcppAlgos)\nlibrary(Rcpp)\n\
    \ncppFunction('\nIntegerVector count_up_to(IntegerVector x) {\n  int n = x.size();\n\
    \  IntegerVector out(n);\n  for(int i = 0; i < n; ++i) {\n    out[i] = primes::primes(x[i])[1];\n\
    \  }\n  return out;\n}')\n\ncount_up_to(1:10)", "\n  n <- n\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  if(n %% 3 == 0) return(c(n))\n  if(n %% 5 ==\
    \ 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n  if(n %% 11 == 0) return(c(n))\n\
    \  if(n %% 13 == 0) return(c(n))\n  if(n %% 17 == 0) return(c(n))\n  if(n %% 19\
    \ == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer vector and returns\
    \ a vector of the squares of the numbers in the vector.\nFor example, \n>>> square_of_vector(c(1,\
    \ 2, 3))\nc(1, 4, 9)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(6,\
    \ 9, 12))\nc(36, 72, 126)\n>>> square_of_vector(c(9, 12, 15))\nc(91, 184, 273)\n\
    >>> square_of_vector(c(12, 15, 18))\nc(246, 494, 923)\n>>> square_of_vector(c(15,\
    \ 18, 21))\nc(439, 832, 1669)\n>>> square_of_vector(c(18, 21, 24))\nc(832, 1669,\
    \ 2581)\n>>> square_of_vector(c(21, 24, 27))\nc(1669, 2581, 3424)\n>>> square_of_vector(c(24,\
    \ 27, 30))\nc(2581, 3424, 5584)\n>>> square_of_vector(c(27, 30, 33))\nc(3424,\
    \ 5584, 10409)\n>>> square_of_vector(c(30, 33, 36))\nc(5584, 10409, 17648)\n>>>\
    \ square_of_vector(c(33, 36, 39))\nc(10409, 17648, 29232)\n>>> square_of_vector(c(36,\
    \ 39, 42))\nc(17648, 29232, 41869)\n>>> square_of_vector(c(39, 42, 45))\nc(29232,\
    \ 41869, 62458)\n>>> square_of_vector(c(42, 45, 48))\nc(41869, 62458, 93981)\n\
    >>> square_of_vector(c(45, 48, 51))\nc(62458, 93981, 128724)\n>>> square_of_vector(c(48,\
    \ 51, 54))\nc(9", "\n  if(n <= 0) return(c())\n  if(n <= 1) return(c(n))\n  \n\
    \  x <- c()\n  \n  for(i in 2:n) {\n    for(j in 1:i) {\n      if(j %% i == 0)\
    \ x <- c(x, i)\n    }\n  }\n  \n  return(x)\n}\n</cell>\n<cell>\ncount_up_to(10)\n\
    </cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(30)\n</cell>\n\
    <cell>\ncount_up_to(100)\n</cell>\n<cell>\ncount_up_to(1000)\n</cell>\n<cell>\n\
    count_up_to(10000)\n</cell>\n<cell>\ncount_up_to(100000)\n</cell>\n<cell>\ncount_up_to(1000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000)\n</cell>\n<cell>\ncount_up_to(100000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000)\n</cell>\n<cell>\ncount_up_to(10000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000000)\n</cell>\n<cell>\n\
    count_up_to(100000000000000000000000000", "\n  \n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns a vector of the prime\
    \ factors of that integer.\nFor example, if the input integer is 17, the output\
    \ should be c(2, 3).\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  i <- 1\n  while(i\
    \ <= n) {\n    i <- i + 1\n    if(i %% 2 == 0) {\n      if(i %% 3 == 0) {\n  \
    \      if(i %% 5 == 0) {\n          if(i %% 7 == 0) {\n            c(i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, ", "\n  if(n <= 0) return(c())\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(count_up_to(n-1) + c(2))\n}\n</cell>\n\
    <cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n\
    </cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ and returns a vector of the prime numbers less than or equal to that integer.\n\
    \n\n</text>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x))\n    x <- x\
    \ + 2\n  }\n}\n</cell>\n<cell>", "\n  if(n <= 0) return()\n  \n  if(n %% 2 ==\
    \ 0) return(c(n))\n  \n  x <- 3\n  \n  while(x <= n) {\n    if(x %% n == 0) return(c(x,\
    \ n))\n    x <- x + 2\n  }\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\n\
    count_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n\
    </cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\n\
    Exercise: Write a function that takes an integer and returns the number of prime\
    \ numbers less than or equal to that integer.\n\n\n</text>\n<cell>", "\n  if(n\
    \ <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  x <- 3\n  while(x <= n) {\n\
    \    if(n %% x == 0) return(c(n, x))\n    x <- x + 2\n  }\n}\n", "\n  n <- n\n\
    \  if(n <= 0) return(NULL)\n  if(n %% 2 == 0) return(c())\n  i <- 3\n  while(i\
    \ <= sqrt(n)) {\n    if(n %% i == 0) return(c(i))\n    i <- i + 1\n  }\n  return(c())\n\
    }\n", "\n  n <- n + 1\n  i <- 1\n  while(i <= n) {\n    i <- i + 1\n    for(j\
    \ in i:n) {\n      if(j %% i == 0) {\n        break\n      }\n    }\n    if(j\
    \ == n) {\n      return(c(i, j))\n    }\n  }\n  return(c())\n}\n\ncount_up_to(10)",
  "\n  n <- n\n  if(n <= 0) return()\n  if(n <= 1) return(c())\n  if(n <= 2) return(c(n))\n\
    \  if(n <= 3) return(c(n, n))\n  if(n <= 5) return(c(n, n))\n  if(n <= 7) return(c(n,\
    \ n))\n  if(n <= 11) return(c(n, n))\n  if(n <= 13) return(c(n, n))\n  if(n <=\
    \ 17) return(c(n, n))\n  if(n <= 19) return(c(n, n))\n  return(c(n, n))\n}\n",
  "\n  n <- as.integer(n)\n  if(n < 1) {\n    return(c())\n  }\n  if(n <= 3) {\n \
    \   return(c(2, 3))\n  }\n  if(n <= 5) {\n    return(c(2, 3, 5))\n  }\n  if(n\
    \ <= 7) {\n    return(c(2, 3, 5, 7))\n  }\n  if(n <= 11) {\n    return(c(2, 3,\
    \ 5, 7, 11))\n  }\n  if(n <= 13) {\n    return(c(2, 3, 5, 7, 11, 13))\n  }\n \
    \ if(n <= 17) {\n    return(c(2, 3, 5, 7, 11, 13, 17))\n  }\n  if(n <= 19) {\n\
    \    return(c(2, 3, 5, 7, 11, 13, 17, 19))\n  }\n  if(n <= 23) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23))\n  }\n  if(n <= 29) {\n    return(c(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29))\n  }\n  if(n <= 39) {\n    return(c(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 39))\n  }\n  if(n <= 49) {\n    return(c(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 39, 49))\n  }\n  if(n <= 59) {\n    return(c(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 39, 49, 59))\n  }\n  if(n <= 69) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69))\n  }\n  if(n <= 79) {\n  \
    \  return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79))\n  }\n  if(n\
    \ <= 89) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79,\
    \ 89))\n  }\n  if(n <= 99) {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 39, 49, 59, 69, 79, 89, 99))\n  }\n  if(n <= 109) {\n    return(c(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89, 99, 109))\n  }\n  if(n <= 119)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89,\
    \ 99, 109, 119))\n  }\n  if(n <= 129) {\n    return(c(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129))\n  }\n  if(n <= 139)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 39, 49, 59, 69, 79, 89,\
    \ 99, 109, 119, 129, 139))\n  }\n  if(n <= 149) {", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2, 3))\n  if(n %%\
    \ 5 == 0) return(c(2, 3, 5))\n  if(n %% 7 == 0) return(c(2, 3, 5, 7))\n  if(n\
    \ %% 11 == 0) return(c(2, 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2, 3, 5,\
    \ 7, 11, 13))\n  if(n %% 17 == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n %%\
    \ 19 == 0) return(c(2, 3, 5, 7, 11, 13, 17, 19))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns a vector with all the prime numbers less than\
    \ or equal to that integer.\n\n\n</text>\n<cell>", "\n  \n}\n</cell>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(1))\n\
    \  \n  x <- 2\n  y <- 3\n  \n  while(x <= n) {\n    \n    if(n %% x == 0) {\n\
    \      y <- y + 1\n      x <- x + 1\n    }\n    x <- x + 1\n  }\n  \n  return(c(y,\
    \ x))\n}\n", "\n  n <- n + 1\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  if(n %% 3 == 0) return(c(n))\n  if(n %% 5 == 0) return(c(n))\n  if(n %% 7 ==\
    \ 0) return(c(n))\n  if(n %% 11 == 0) return(c(n))\n  if(n %% 13 == 0) return(c(n))\n\
    \  if(n %% 17 == 0) return(c(n))\n  if(n %% 19 == 0) return(c(n))\n  return(c(n))\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes an integer and returns the number\
    \ of prime numbers less than or equal to that integer.\n\n\n</text>\n<cell>",
  "\n  \n}\n</cell>\n<cell>", "\n  \n  if(n <= 0) return()\n  \n  if(n %% 2 == 0)\
    \ return(c(2))\n  \n  x <- 3\n  \n  while(x <= n) {\n    \n    if(n %% x == 0)\
    \ return(c(x, x+1))\n    \n    x <- x + 2\n  }\n  \n  return(c())\n}\n\ncount_up_to(20)",
  "\n  n <- n + 1\n  if(n < 1) {\n    return(c())\n  }\n  if(n %% 2 == 0) {\n    return(c(n))\n\
    \  }\n  i <- 3\n  while(i <= n) {\n    if(n %% i == 0) {\n      return(c(n, i))\n\
    \    }\n    i <- i + 2\n  }\n  return(c())\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer vector and returns a vector of the same length with all\
    \ elements multiplied by 2.\n\n\n</text>\n<cell>", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers.\nFor example, if the input vector\
    \ is c(4, 6, 9), then the output should be 55.\n\n\n</text>\n<cell>", "\n  n <-\
    \ n + 1\n  if(n <= 1) return(NULL)\n  if(n %% 2 == 0) return(c(n))\n  x <- 3\n\
    \  while(x <= n) {\n    i <- 3\n    while(i <= x && x %% i == 0) {\n      i <-\
    \ i + 1\n    }\n    if(i <= x) return(c(x, x))\n    x <- x + 1\n  }\n  return(c())\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ncount_up_to <- function(n)\
    \ {\n  n <- n + 1\n  if(n <= 1) return(NULL)\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    i <- 3\n    while(i <= x && x %% i == 0) {\n\
    \      i <- i + 1\n    }\n    if(i <= x) return(c(x, x))\n    x <- x + 1\n  }\n\
    \  return(c())\n}\n</code>\n<|/ a tags=r,primes |>\n<| a tags=r,primes |>\n<code>\n\
    count_up_to <- function(n) {\n  n <- n + 1\n  if(n <= 1) return(NULL)\n  if(n\
    \ %% 2 == 0) return(c(n))\n  x <- 3\n  while(x <= n) {\n    i <- 3\n    while(i\
    \ <= x && x %% i == 0) {\n      i <- i + 1\n    }\n    if(i <= x) return(c(x,\
    \ x))\n    x <- x + 1\n  }\n  return(c())\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nPlease add some explanation to your answer. Code-only answers are discouraged\
    \ on SO.\n<|/ c |>\n<| a tags=r,primes |>\n<code>\ncount_up_to <- function(n)\
    \ {\n  n <- n + 1\n  if(n <= 1) return(NULL)\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    i <- 3\n    while(i <= x && x %% i == 0) {\n\
    \      i <- i + 1\n    }\n    if(i <= x) return(c(x, x))\n    x <- x + 1\n  }\n\
    \  return(c())\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,primes |>\n<code>\n\
    count_up_to <- function(n) {\n  n <- n + 1\n  if(n <= 1) return(NULL)\n  if(n\
    \ %% 2 == 0) return(c(n))\n  x <- 3\n  while(x <= n) {\n    i <- 3\n    while(i\
    \ <= x ", "\n  n <- n + 1\n  x <- c()\n  for(i in 1:n) {\n    for(j in 1:i) {\n\
    \      if(j %% i == 0) {\n        x <- c(x, j)\n      }\n    }\n  }\n  x\n}\n",
  "\n  n <- n + 1\n  x <- c()\n  for(i in 2:n) {\n    for(j in 1:i) {\n      if(j\
    \ %% i == 0) {\n        x <- c(x, i)\n        break\n      }\n    }\n  }\n  x\n\
    }\n", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,\
    \ n - 1))\n}\n", "\n  \n}\n</cell>\n<cell>", "\n  \n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes an integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$. \nFor example, \n>>> count_primes(10)\nc(2,\
    \ 3, 5, 7)\n>>> count_primes(100)\nc(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n>>> count_primes(1000)\n\
    c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97)\n>>> count_primes(10000)\nc(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n>>> count_primes(100000)\n\
    c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97)\n>>> count_primes(1000000)\nc(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n>>> count_primes(10000000)\n\
    c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97)\n>>> count_primes(100000000)\nc(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n>>>\
    \ count_primes(1000000000)\nc(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n>>> count_primes(10000000000)\n\
    c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97)\n>>> count_primes(100000000000)\nc(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n>>>\
    \ count_primes(1000000000000)\nc(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n>>> count_primes(10000000000000)\n",
  "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  x <- 3\n  while(x <=\
    \ n) {\n    x <- x + 2\n    if(x %% 2 == 0) return(c(x, x))\n  }\n  return(c())\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of the squares of all the\
    \ integers in the vector.\nFor example, c(2, 3, 4, 5) returns c(4, 9, 16, 25).\n\
    \n\n</text>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    x <- x + 2\n    if(x %% 2 == 0) return(c(x,\
    \ x))\n  }\n}\n", "\n  n <- n + 1\n  if(n <= 1) return(NULL)\n  if(n %% 2 == 0)\
    \ return(NULL)\n  if(n %% 3 == 0) return(NULL)\n  if(n %% 5 == 0) return(NULL)\n\
    \  if(n %% 7 == 0) return(NULL)\n  if(n %% 11 == 0) return(NULL)\n  if(n %% 13\
    \ == 0) return(NULL)\n  if(n %% 17 == 0) return(NULL)\n  if(n %% 19 == 0) return(NULL)\n\
    \  return(seq(2, n, by = 2))\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\n\
    count_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n\
    </cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\n\
    count_up_to(19)\n</cell>\n<text>\nExercise\nImplement a function that takes an\
    \ integer and returns the first n prime numbers that are less than or equal to\
    \ n.\nFor example, count_primes(10) should return c(2, 3, 5, 7, 11, 13, 17, 19).\n\
    \n\n</text>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  return(c(n,n-1))\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n\
    </cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\n\
    count_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of the sums\
    \ of the squares of the numbers.\nFor example, if the input vector is c(2, 3,\
    \ 5, 7, 11, 13, 17), then the output vector should be c(5, 15, 35, 65, 105, 215).\n\
    \n\n</text>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  return(c(n,n-1))\n}\n</cell>\n<cell>\ncount_up_to(10)\n</cell>\n<cell>\ncount_up_to(20)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer vector and returns\
    \ a vector of the squares of the numbers in the vector.\nFor example, \n>>> square_of_vector(c(2,3,4))\n\
    c(4, 9, 16)\n>>> square_of_vector(c(1,2,3))\nc(1, 4, 9)\n>>> square_of_vector(c(1,2,0))\n\
    c(1, 4, 9)\n\n\n</text>\n<cell>\nsquare_of_vector <- function(x) {\n  return(x*x)\n\
    }\n</cell>\n<cell>\nsquare_of_vector(c(2,3,4))\n</cell>\n<cell>\nsquare_of_vector(c(1,2,3))\n\
    </cell>\n<cell>\nsquare_of_vector(c(1,2,0))\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer vector and returns a vector of the squares\
    \ of the numbers in the vector, except for those that are divisible by 3.\nFor\
    \ example, \n>>> square_of_vector(c(2,3,4))\nc(4, 9, 16)\n>>> square_of_vector(c(1,2,3))\n\
    c(2, 9, 27)\n>>> square_of_vector(c(1,2,0))\nc(1, 9, 27)\n\n\n</text>\n<cell>\n\
    square_of_vector <- function(x) {\n  return(x*x)\n}\n</cell>\n<cell>\nsquare_of_vector(c(2,3,4))\n\
    </cell>\n<cell>\nsquare_of_vector(c(1,2,3))\n</cell>\n<cell>\nsquare_of_vector(c(1,2,0))\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes an integer vector and\
    \ returns a vector of the squares of the numbers in the vector, except for those\
    \ that are divisible by 3 or 5.\nFor example, \n>>> square_of_vector(c(2,3,4))\n\
    c(4, 9, 16)\n>>> square_of_vector(c(1,2,3))\nc(2, 9, 27)\n>>> square_of_vector(c(1,2,0))\n\
    c(1, 9, 27)\n\n\n</text>\n<cell>\nsquare_of_vector <- function(x) {\n  return(x*x)\n\
    }\n</cell>\n<cell>\nsquare_of_vector(c(2,3,", "\n  n <- as.integer(n)\n  if(n\
    \ <= 0) return(NULL)\n  \n  primes <- c(2, 3)\n  \n  for(i <- 3; primes[i] <=\
    \ n; primes[i] <- primes[i]+1) {\n    for(j <- primes[i]; j <= n; j <- j+1) {\n\
    \      if(j %% primes[i] == 0) {\n        break\n      }\n    }\n    if(j > n)\
    \ {\n      primes <- c(primes, j)\n    }\n  }\n  \n  return(primes)\n}\n\ncount_up_to(20)",
  "\n  \n  if(n <= 0) return()\n  \n  if(n %% 2 == 0) return(c(2))\n  \n  x <- 3\n\
    \  \n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x+1, x+2))\n    x <- x\
    \ + 2\n  }\n  \n  return(c())\n}\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n\
    <cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers.\nFor\
    \ example, \n>>> square_sum(1:10)\nc(25L, 50L, 75L, 100L, 125L, 150L, 175L, 200L,\
    \ 225L, 250L, 275L, 300L, 325L, 350L, 375L, 400L, 425L, 450L, 475L, 500L, 525L,\
    \ 550L, 575L, 600L, 625L, 650L, 675L, 700L, 725L, 750L, 775L, 800L, 825L, 850L,\
    \ 875L, 900L, 925L, 950L, 975L, 1000L)\n>>> square_sum(1:10)\nc(25L, 50L, 75L,\
    \ 100L, 125L, 150L, 175L, 200L, 225L, 250L, 275L, 300L, 325L, 350L, 375L, 400L,\
    \ 425L, 450L, 475L, 500L, 525L, 550L, 575L, 600L, 625L, 650L, 675L, 700L, 725L,\
    \ 750L, 775L, 800L, 825L, 850L, 875L, 900L, 925L, 950L, 975L, 1000L)\n>>> square_sum(1:10)\n\
    c(25L, 50L, 75L, 100L, 125L, 150L, 175L, 200L, 225L, 250L, 275L, 300L, 325L, 350L,\
    \ 375L, 400L, 425L, 450L, 475L, 500L, 525L, 550L, 575L, 600L, 625L, 650L, 675L,\
    \ 700L, 725L, 750L, 775L, 800L, 825L, 850L, 875L, 900L, 925L, 950L, 975L, 1000L)\n\
    >>> square_sum(1:10)\nc(25L, 50L, 75L, 100L, 125L, 150L, 175L, 200L, 225L, 250L,\
    \ 275L, 300L, 325L, 350L, 375L, 400L, 425L, 450L, 475L, 500L, 525L, 550L, 575L,\
    \ 600L, 625L, 650L, 675L, 700L, 725L, 750L, 775L, 800L, 825L, 850L, 875L, 900L,\
    \ 925L, 950L, 975", "\n  if(n <= 0) return(c())\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x+1, x+2))\n   \
    \ x <- x + 3\n  }\n  return(c())\n}\n", "\n  n <- as.integer(n)\n  if(n <= 0)\
    \ return(NULL)\n  if(n <= 1) return(integer(n))\n  if(n %% 2 == 0) return(integer(n))\n\
    \  if(n %% 3 == 0) return(integer(n))\n  if(n %% 5 == 0) return(integer(n))\n\
    \  if(n %% 7 == 0) return(integer(n))\n  if(n %% 11 == 0) return(integer(n))\n\
    \  if(n %% 13 == 0) return(integer(n))\n  if(n %% 17 == 0) return(integer(n))\n\
    \  if(n %% 19 == 0) return(integer(n))\n  if(n %% 23 == 0) return(integer(n))\n\
    \  if(n %% 29 == 0) return(integer(n))\n  if(n %% 31 == 0) return(integer(n))\n\
    \  if(n %% 37 == 0) return(integer(n))\n  if(n %% 43 == 0) return(integer(n))\n\
    \  if(n %% 49 == 0) return(integer(n))\n  if(n %% 53 == 0) return(integer(n))\n\
    \  if(n %% 59 == 0) return(integer(n))\n  if(n %% 67 == 0) return(integer(n))\n\
    \  if(n %% 71 == 0) return(integer(n))\n  if(n %% 79 == 0) return(integer(n))\n\
    \  if(n %% 83 == 0) return(integer(n))\n  if(n %% 89 == 0) return(integer(n))\n\
    \  if(n %% 97 == 0) return(integer(n))\n  if(n %% 101 == 0) return(integer(n))\n\
    \  if(n %% 107 == 0) return(integer(n))\n  if(n %% 113 == 0) return(integer(n))\n\
    \  if(n %% 119 == 0) return(integer(n))\n  if(n %% 125 == 0) return(integer(n))\n\
    \  if(n %% 131 == 0) return(integer(n))\n  if(n %% 137 == 0) return(integer(n))\n\
    \  if(n %% 143 == 0) return(integer(n))\n  if(n %% 149 == 0) return(integer(n))\n\
    \  if(n %% 153 == 0) return(integer(n))\n  if(n %% 159 == 0) return(integer(n))\n\
    \  if(n %% 165 == 0) return(integer(n))\n  if(n %% 171 == 0) return(integer(n))\n\
    \  if(n %% 177 == 0) return(integer(n))\n  if(n %% 183 == 0) return(integer(n))\n\
    \  if(n %% ", "\n  n <- n\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x))\n    x <- x\
    \ + 2\n  }\n}\n", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n \
    \ x <- 3\n  y <- 2\n  while(x <= n) {\n    while(y <= n) {\n      if(x %% y ==\
    \ 0) return(c(x, y))\n      y <- y + 1\n    }\n    x <- x + 1\n    y <- 2\n  }\n\
    \  return(c())\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n\
    </cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\n\
    count_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes in a list of numbers and\
    \ returns a vector with the number of times each number appears in the list.\n\
    For example, if the input vector is [1, 1, 2, 3] the output should be [1, 1, 2,\
    \ 3]. \nThe function should only return one vector and should NOT modify the input\
    \ vector.\n\n\n</text>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  return(c(n, count_up_to(n-1)))\n}\n", "\n  n <- n + 1\n  \n  if(n <= 1) {\n\
    \    return(c())\n  }\n  \n  x <- 2\n  \n  while(x <= n) {\n    if(x %% n == 0)\
    \ {\n      return(c(x, x + 1))\n    }\n    x <- x + 1\n  }\n  \n  return(c())\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer $n$ and returns the number of prime numbers less than\
    \ or equal to $n$. \nFor example, \n>>> count_primes(10)\nc(2, 3, 5, 7)\n>>> count_primes(0)\n\
    c()\n\n</text>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  return(count_up_to(n-1))\n}\n", "\n  if(n <= 0) return()\n  if(n %% 2 == 0)\
    \ return(c(n))\n  x <- 3\n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x))\n\
    \    x <- x + 2\n  }\n}\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer vector and returns a vector of the squares of the numbers\
    \ in the vector.\nFor example, \n>>> square_of_vector(c(1, 2, 3))\nc(1, 4, 9)\n\
    >>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(9, 9, 9))\n\
    c(27, 81, 243)\n\n\n</text>\n<cell>\nsquare_of_vector <- function(x) {\n  y <-\
    \ x\n  for(i in 1:length(y)) {\n    y[i] <- y[i]^2\n  }\n  return(y)\n}\n</cell>\n\
    <cell>\nsquare_of_vector(c(1, 2, 3))\n</cell>\n<cell>\nsquare_of_vector(c(3, 4,\
    \ 5))\n</cell>\n<cell>\nsquare_of_vector(c(9, 9, 9))\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes an integer vector and returns a vector of the\
    \ sums of the numbers in the vector.\nFor example, \n>>> sum_of_vector(c(1, 2,\
    \ 3))\nc(1, 3, 6)\n>>> sum_of_vector(c(3, 4, 5))\nc(4, 9, 15)\n>>> sum_of_vector(c(9,\
    \ 9, 9))\nc(18, 27, 81)\n\n\n</text>\n<cell>\nsum_of_vector <- function(x) {\n\
    \  y <- x\n  for(i in 1:length(y)) {\n    y[i] <- y[i] + y[i]\n  }\n  return(y)\n\
    }\n</cell>\n<cell>\nsum_of_vector(c(1, 2, 3))\n</cell>\n<cell>\nsum_of_vector(c(3,\
    \ 4, 5))\n</cell>\n<cell>\nsum_of_vector(c(9, 9, 9))\n</cell>\n<text>\nExercise\
    \ 5\nWrite a function that takes an integer vector and returns a vector of the\
    \ product of the numbers in the vector.\nFor example, \n>>> product_of_vector(c(1,\
    \ 2, 3))\nc(1, 3, 6)\n>>> product_of_vector(c(3, 4, 5))\nc(4, 9, 15)\n>>> product_of_vector(c(9,\
    \ 9, 9))\nc(27, 81, 243)\n\n\n</text>\n<cell>\nproduct_of_", "\n  if(n <= 0) return()\n\
    \  \n  primes <- c(2, 3, 5, 7)\n  \n  i <- 1\n  \n  while(i <= n) {\n    \n  \
    \  for(j in primes) {\n      \n      if(i %% j == 0) break\n      \n    }\n  \
    \  \n    if(j == length(primes)) return(c(i))\n    \n    i <- i + 1\n    \n  }\n\
    \  \n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer vector and returns\
    \ a vector of the squares of the numbers in the vector.\nFor example, \n>>> square_of_vector(c(1,\
    \ 2, 3))\nc(1, 4, 9)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_", "\n  if(n <= 0) return(c())\n  if(n %% 2\
    \ == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2, 3))\n  if(n %% 5 == 0) return(c(2,\
    \ 3, 5))\n  if(n %% 7 == 0) return(c(2, 3, 5, 7))\n  if(n %% 11 == 0) return(c(2,\
    \ 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2, 3, 5, 7, 11, 13))\n  if(n %% 17\
    \ == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n %% 19 == 0) return(c(2, 3, 5,\
    \ 7, 11, 13, 17, 19))\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n\
    </cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\n\
    count_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a vector of integers and\
    \ returns a vector of the same length where each element is the sum of the elements\
    \ in the original vector except the element at that index.\nFor example, if the\
    \ input vector is c(10, 20, 30, 40) the function should return c(30, 60, 90, 120).\n\
    \n\n</text>\n<cell>", "\n  n <- n + 1\n  if(n <= 1) return(NULL)\n  if(n %% 2\
    \ == 0) return(c(n))\n  if(n %% 3 == 0) return(c(n, 3))\n  if(n %% 5 == 0) return(c(n,\
    \ 5, 7))\n  if(n %% 7 == 0) return(c(n, 5, 7, 11))\n  if(n %% 11 == 0) return(c(n,\
    \ 5, 7, 11, 13))\n  if(n %% 13 == 0) return(c(n, 5, 7, 11, 13, 17))\n  if(n %%\
    \ 17 == 0) return(c(n, 5, 7, 11, 13, 17, 19))\n  return(c(n, 5, 7, 11, 13, 17,\
    \ 19))\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n\
    </cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\n\
    count_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ a vector of the prime factors of that integer.\nFor example, if the input is\
    \ 25, the function should return c(2, 5, 3, 7).\n\n\n</text>\n<cell>", "\n  \n\
    \  if(n <= 0) return()\n  \n  if(n %% 2 == 0) return(c(2))\n  \n  if(n %% 3 ==\
    \ 0) return(c(2, 3))\n  \n  if(n %% 5 == 0) return(c(2, 3, 5))\n  \n  if(n %%\
    \ 7 == 0) return(c(2, 3, 5, 7))\n  \n  if(n %% 11 == 0) return(c(2, 3, 5, 7, 11))\n\
    \  \n  if(n %% 13 == 0) return(c(2, 3, 5, 7, 11, 13))\n  \n  if(n %% 17 == 0)\
    \ return(c(2, 3, 5, 7, 11, 13, 17))\n  \n  if(n %% 19 == 0) return(c(2, 3, 5,\
    \ 7, 11, 13, 17, 19))\n  \n  return(c())\n}\n", "\n  \n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes an integer vector and returns a vector of the\
    \ squares of the numbers in the vector.\nFor example, \n>>> square_vector(c(1,\
    \ 2, 3))\nc(1, 4, 9)\n>>> square_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_vector(c(6,\
    \ 9, 12))\nc(36, 72, 108)\n>>> square_vector(c(7, 9, 12))\nc(49, 76, 113)\n>>>\
    \ square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27,\
    \ 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9, 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(9,\
    \ 9, 9))\nc(27, 27, 27)\n>>> square_vector(c(", "\n  if(n <= 0) return()\n  if(n\
    \ %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2, 3))\n  if(n %%\
    \ 5 == 0) return(c(2, 3, 5))\n  if(n %% 7 == 0) return(c(2, 3, 5, 7))\n  if(n\
    \ %% 11 == 0) return(c(2, 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2, 3, 5,\
    \ 7, 11, 13))\n  if(n %% 17 == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n %%\
    \ 19 == 0) return(c(2, 3, 5, 7, 11, 13, 17, 19))\n  return(c())\n}\n</cell>\n\
    <cell>\ncount_up_to(10)\n</cell>\n<cell>\ncount_up_to(100)\n</cell>\n<cell>\n\
    count_up_to(1000)\n</cell>\n<cell>\ncount_up_to(10000)\n</cell>\n<cell>\ncount_up_to(100000)\n\
    </cell>\n<cell>\ncount_up_to(1000000)\n</cell>\n<cell>\ncount_up_to(10000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000)\n</cell>\n<cell>\ncount_up_to(1000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000)\n</cell>\n<cell>\ncount_up_to(100000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n\
    </cell>\n<cell>\ncount_", "\n  if(n <= 0) return()\n  \n  primes <- c(2, 3)\n\
    \  \n  for(i <- 3L; primes[i] <= n; primes[i+1] <- primes[i]+1) {\n    for(j <-\
    \ 3L; primes[j] <= primes[i]; j+1) {\n      if(primes[j] <= n) break\n    }\n\
    \    if(j > primes[i]) primes[i] <- j\n  }\n  \n  primes\n}\n\ncount_up_to(20)",
  "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n\
    </cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\n\
    count_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector of integers and returns a vector of the squares of all the\
    \ integers in the vector.\nFor example, c(1,2,3) should return c(1,4,9).\n\n\n\
    </text>\n<cell>", "\n  \n}\n</cell>\n<cell>", "\n  \n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ the squares of the numbers in the vector.\n\n\n</text>\n<cell>", "\n  \n}\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer and returns\
    \ the number of prime numbers less than or equal to that integer.\n\n\n</text>\n\
    <cell>", "\n  n <- n + 1\n  \n  if(n <= 1) return(integer(0))\n  \n  x <- 2\n\
    \  \n  while(x <= n) {\n    \n    i <- 1\n    \n    while(i <= x && x %% i !=\
    \ 0) {\n      i <- i + 1\n    }\n    \n    if(i > x) x <- x + 1\n    \n    return(c(x,\
    \ x))\n  }\n}\n", "\n  \n  if(n <= 0) return()\n  \n  if(n %% 2 == 0) return(c(n))\n\
    \  \n  x <- 3\n  \n  while(x <= n) {\n    \n    if(x %% n == 0) return(c(x, x))\n\
    \    \n    x <- x + 2\n  }\n  \n  return(c())\n}\n\ncount_up_to(10)", "\n  if(n\
    \ <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n, n - 1))\n}\n",
  "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n, count_up_to(n-1)))\n\
    }\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n\
    <cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<text>\nProblem\
    \ 3\nThe Fibonacci sequence is defined by the formula:\n$$Fn = \\begin{cases}\n\
    \      1 & n = 0\\\n      1 & n = 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\\
    end{cases}$$\nwhere $F_n$ is the n-th number in the Fibonacci sequence.\nThe first\
    \ few terms of the sequence are:\n$$F_1 = 1$$\n$$F_2 = 1$$\n$$F_3 = 2$$\n$$F_5\
    \ = 5$$\n$$F_8 = 10$$\n$$F_13 = 13$$\n$$F_21 = 21$$\n$$F_34 = 24$$\n$$F_55 = 55$$\n\
    $$F_89 = 89$$\n$$F_144 = 144$$\n$$F_233 = 313$$\n$$F_372 = 486$$\n$$F_613 = 659$\n\
    $$F_1094 = 1134$\n$$F_1771 = 1821$\n$$F_3143 = 2863$\n$$F_5222 = 5742$\n$$F_8362\
    \ = 8991$\n$$F_12586 = 13049$\n$$F_17644 = 18640$\n$$F_30243 = 26923$\n$$F_53835\
    \ = 57835$\n$$F_89121 = 94571$\n$$F_148478 = 159765$\n$$F_233918 = 270353$\n$$F_343216\
    \ = 446716$\n$$F_552774 = 727413$\n$$F_896130 = 1346261$\n$$F_1540733 = 2099609$\n\
    $$F_3073269 = 34329065$\n$$F_5573689 = 7014087$\n$$F_8914294 = 144724609$\n$$F_1584433\
    \ = 398829230$\n$$F_23391878 = 449127771$\n$$F_34321613 = 649128657$\n$$F_55277473\
    \ = 109", "\n  \n}\n</cell>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 ==\
    \ 0) return(c(n))\n  x <- 3\n  y <- 0\n  while(x <= n) {\n    if(n %% x == 0)\
    \ return(c(x, y))\n    x <- x + 2\n    y <- y + 1\n  }\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n\
    <cell>\ncount_up_to(21)\n</cell>\n<cell>\ncount_up_to(22)\n</cell>\n<cell>\ncount_up_to(23)\n\
    </cell>\n<cell>\ncount_up_to(24)\n</cell>\n<cell>\ncount_up_to(25)\n</cell>\n\
    <cell>\ncount_up_to(26)\n</cell>\n<cell>\ncount_up_to(27)\n</cell>\n<cell>\ncount_up_to(28)\n\
    </cell>\n<cell>\ncount_up_to(29)\n</cell>\n<cell>\ncount_up_to(30)\n</cell>\n\
    <cell>\ncount_up_to(31)\n</cell>\n<cell>\ncount_up_to(32)\n</cell>\n<cell>\ncount_up_to(33)\n\
    </cell>\n<cell>\ncount_up_to(34)\n</cell>\n<cell>\ncount_up_to(35)\n</cell>\n\
    <cell>\ncount_up_to(36)\n</cell>\n<cell>\ncount_up_to(37)\n</cell>\n<cell>\ncount_up_to(38)\n\
    </cell>\n<cell>\ncount_up_to(39)\n</cell>\n<cell>\ncount_up_to(40)\n</cell>\n\
    <cell>\ncount_up_to(41)\n</cell>\n<cell>\ncount_up_to(42)\n</cell>\n<cell>\ncount_up_to(43)\n\
    </cell>\n<cell>\ncount_up_to(44)\n</cell>\n<cell>\ncount_up_to(45)\n</cell>\n",
  "\n  \n}\n</cell>\n<text>\nProblem 3\nWrite a function that takes an integer vector\
    \ and returns a vector of the squares of all the integers in the vector.\nFor\
    \ example, \n>>> square_of_vector(c(2, 3, 4))\nc(2, 4, 9)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 25)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 25)", "\n  \n}\n</cell>\n<cell>", "\n  n <- n + 1\n  if(n <=\
    \ 1) return(NULL)\n  if(n %% 2 == 0) return(NULL)\n  if(n %% 3 == 0) return(NULL)\n\
    \  if(n %% 5 == 0) return(NULL)\n  if(n %% 7 == 0) return(NULL)\n  if(n %% 11\
    \ == 0) return(NULL)\n  if(n %% 13 == 0) return(NULL)\n  if(n %% 17 == 0) return(NULL)\n\
    \  if(n %% 19 == 0) return(NULL)\n  return(c(2, 3, 5, 7, 11, 13, 17))\n}\n</cell>\n\
    <cell>\ncount_up_to(20)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ an integer vector and returns a vector of the squares of the numbers in the\
    \ vector.\nFor example, \n>>> square_vector(c(1, 2, 3))\nc(1, 4, 9)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n>>> square_vector(c(6, 9, 12))\nc(36, 72, 108)\n>>> square_vector(c(9,\
    \ 12, 15))\nc(91, 172, 253)\n\n\n</text>\n<cell>\nsquare_vector <- function(x)\
    \ {\n  return(x^2)\n}\n</cell>\n<cell>\nsquare_vector(c(1, 2, 3))\n</cell>\n<cell>\n\
    square_vector(c(3, 4, 5))\n</cell>\n<cell>\nsquare_vector(c(6, 9, 12))\n</cell>\n\
    <cell>\nsquare_vector(c(9, 12, 15))\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a vector and returns a vector of the squares of the numbers in the\
    \ vector, except for the first element of the vector. For example, \n>>> square_except_first(c(1,\
    \ 2, 3))\nc(1, 4, 9)\n>>> square_except_first(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_except_first(c(6,\
    \ 9, 12))\nc(36, 72, 108)\n>>> square_except_first(c(9, 12, 15))\nc(91, 172, 253)\n\
    \n\n</text>\n<cell>\nsquare_except_first <- function(x) {\n  return(x^2 - x[1])\n\
    }\n</cell>\n<cell>\nsquare_except_first(c(1, 2, 3))\n</cell>\n<cell>\nsquare_except_first(c(3,\
    \ 4, 5))\n</cell>\n<cell>\nsquare_except_first(c(6, 9, 12))\n</cell>\n<cell>\n\
    square_except_first(c(9, 12, 15))\n</cell>\n<text>\nProblem 5\nWrite a function\
    \ that takes a vector and returns a vector ", "\n  n <- n + 1\n  if(n <= 1) return(c())\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(count_up_to(n-1) + c(2))\n}\n</cell>\n\
    <cell>\ncount_up_to(10)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ an integer n and returns the first n prime numbers.\nThe function should return\
    \ all prime numbers less than or equal to n.\n\n\n</text>\n<cell>", "\n  n <-\
    \ n + 1\n  if(n <= 1) return(NULL)\n  if(n %% 2 == 0) return(NULL)\n  if(n %%\
    \ 3 == 0) return(NULL)\n  if(n %% 5 == 0) return(NULL)\n  if(n %% 7 == 0) return(NULL)\n\
    \  if(n %% 11 == 0) return(NULL)\n  if(n %% 13 == 0) return(NULL)\n  if(n %% 17\
    \ == 0) return(NULL)\n  if(n %% 19 == 0) return(NULL)\n  return(seq(n))\n}\n</cell>\n\
    <cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n\
    </cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\n\
    count_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n<cell>\ncount_up_to(20)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer vector and\
    \ returns a vector of the same length with all elements multiplied by 2.\nFor\
    \ example, \n>>> my_vector = c(2,3,5,7,11,13,17,19)\n>>> my_vector\nc(2,3,5,7,11,13,17,19)\n\
    >>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n>>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n\
    >>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n>>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n\
    >>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n>>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n\
    >>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n>>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n\
    >>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n>>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n\
    >>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n>>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n\
    >>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n>>> my_vector * 2\nc(4,6,8,10,12,14,16,18)\n\
    >>> my_vector * 2\nc(4,6,8,", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  \n  x <- 3\n  \n  while(x <= n) {\n    if(n %% x == 0) return(c(n, x))\n  \
    \  x <- x + 2\n  }\n  \n  return(c(n))\n}\n\ncount_up_to(20)", "\n  n <- n + 1\n\
    \  i <- 1\n  while(i <= n) {\n    if(all(sapply(1:i, function(j) i%%j == 0)))\
    \ break\n    i <- i + 1\n  }\n  return(i)\n}\n", "\n  n <- n\n  \n  if(n <= 1)\
    \ {\n    return(NULL)\n  }\n  \n  x <- 2\n  \n  while(x <= n) {\n    if(x %% n\
    \ == 0) {\n      return(c(x, x + 1))\n    }\n    x <- x + 1\n  }\n  \n  return(c())\n\
    }\n\ncount_up_to(0)", "\n  n <- n\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  return(c(n, n - 1))\n}\n", "\n  \n  if(n <= 0) return()\n  \n  if(n %% 2 ==\
    \ 0) return(c(2))\n  \n  x <- 3\n  \n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x,\
    \ x+1))\n    x <- x + 2\n  }\n  \n  return(c())\n}\n\ncount_up_to(10)", "\n  n\
    \ <- n + 1\n  if(n <= 1) return(c())\n  if(n %% 2 == 0) return(c(n))\n  if(n %%\
    \ 3 == 0) return(c(n))\n  if(n %% 5 == 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n\
    \  if(n %% 11 == 0) return(c(n))\n  if(n %% 13 == 0) return(c(n))\n  if(n %% 17\
    \ == 0) return(c(n))\n  if(n %% 19 == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n\
    <cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n\
    </cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\n\
    count_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes an integer vector and returns a vector of the same\
    \ length where each element is the sum of the elements in the original vector\
    \ except the element at index i.\nFor example, if the input vector is c(2, 5,\
    \ 3, 8) the output vector should be c(6, 15, 12, 8).\n\n\n</text>\n<cell>", "\n\
    \  n <- n + 1\n  x <- c()\n  for(i in 2:n) {\n    for(j in i:n) {\n      if(j%%i\
    \ == 0) {\n        x <- c(x, j)\n      }\n    }\n  }\n  x\n}\n</cell>\n<cell>\n\
    count_up_to(10)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(100)\n\
    </cell>\n<cell>\ncount_up_to(1000)\n</cell>\n<cell>\ncount_up_to(10000)\n</cell>\n\
    <cell>\ncount_up_to(100000)\n</cell>\n<cell>\ncount_up_to(1000000)\n</cell>\n\
    <cell>\ncount_up_to(10000000)\n</cell>\n<cell>\ncount_up_to(100000000)\n</cell>\n\
    <cell>\ncount_up_to(1000000000)\n</cell>\n<cell>\ncount_up_to(10000000000)\n</cell>\n\
    <cell>\ncount_up_to(100000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000000)\n</cell>\n<cell>\n\
    count_up_to(10000000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_", "\n  n <- n + 1\n  if(n <= 1) return(c())\n  if(n\
    \ %% 2 == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2, 3))\n  if(n %% 5 == 0)\
    \ return(c(2, 3, 5))\n  if(n %% 7 == 0) return(c(2, 3, 5, 7))\n  if(n %% 11 ==\
    \ 0) return(c(2, 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2, 3, 5, 7, 11, 13))\n\
    \  if(n %% 17 == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n %% 19 == 0) return(c(2,\
    \ 3, 5, 7, 11, 13, 17, 19))\n}\n</cell>\n<cell>\ncount_up_to(10)\n</cell>\n<cell>\n\
    count_up_to(100)\n</cell>\n<cell>\ncount_up_to(1000)\n</cell>\n<cell>\ncount_up_to(10000)\n\
    </cell>\n<cell>\ncount_up_to(100000)\n</cell>\n<cell>\ncount_up_to(1000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000)\n</cell>\n<cell>\ncount_up_to(100000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000)\n</cell>\n<cell>\ncount_up_to(10000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n</cell>\n<cell>", "\n\
    \  n <- as.integer(n)\n  if(n <= 0) return(c())\n  if(n <= 1) return(c(n))\n \
    \ if(n <= 3) return(c(n, n - 2))\n  if(n <= 7) return(c(n, n - 3, n - 5))\n  if(n\
    \ <= 11) return(c(n, n - 5, n - 7))\n  if(n <= 13) return(c(n, n - 7, n - 11))\n\
    \  if(n <= 17) return(c(n, n - 11, n - 13))\n  if(n <= 19) return(c(n, n - 13,\
    \ n - 17))\n  return(c(n, n - 17, n - 19))\n}\n", "\n  if(n <= 0) return()\n \
    \ if(n %% 2 == 0) return(c(n))\n  x <- 3\n  while(x <= n) {\n    if(x %% n ==\
    \ 0) return(c(x, x+1))\n    x <- x + 2\n  }\n}\n", "\n  n <- as.integer(n)\n \
    \ if(n <= 0) return(c())\n  if(n <= 1) return(c(n))\n  \n  x <- 2\n  y <- 3\n\
    \  \n  while(x <= n) {\n    while(y <= n) {\n      if(x %% y == 0) {\n       \
    \ x <- x + 1\n        break\n      }\n      y <- y + 1\n    }\n    x <- x + 1\n\
    \    y <- 3\n  }\n  \n  return(c(x, y))\n}\n", "\n  \n}\n</cell>\n<cell>", "\n\
    \  if(n <= 0) return(c())\n  if(n %% 2 == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2,\
    \ 3))\n  if(n %% 5 == 0) return(c(2, 3, 5))\n  if(n %% 7 == 0) return(c(2, 3,\
    \ 5, 7))\n  if(n %% 11 == 0) return(c(2, 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2,\
    \ 3, 5, 7, 11, 13))\n  if(n %% 17 == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n\
    \ %% 19 == 0) return(c(2, 3, 5, 7, 11, 13, 17, 19))\n  return(c())\n}\n", "\n\
    \  n <- n + 1\n  x <- c()\n  for(i in 2:n) {\n    for(j in i:n) {\n      if(j\
    \ %% i == 0) {\n        x <- c(x, j)\n      }\n    }\n  }\n  x\n}\n", "\n  if(n\
    \ <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n</cell>\n\
    <cell>", "\n  if(n <= 0) return()\n  \n  primes <- c()\n  \n  for(i in 2:n) {\n\
    \    for(j in 1:i) {\n      if(j %% i == 0) break\n    }\n    if(j == i) primes[i]\
    \ <- i\n  }\n  \n  return(primes)\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n\
    <cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n\
    </cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers. \nFor example, \n>>> square_sum(1:10)\nc(1,4,9,16,25)\n\
    >>> square_sum(1:10)\nc(1,4,9,16,25)\n\n</text>\n<cell>\nsquare_sum <- function(x)\
    \ {\n  return(sum(x^2))\n}\n</cell>\n<cell>\nsquare_sum(1:10)\n</cell>\n<cell>\n\
    square_sum(1:10)\n</cell>\n<text>\nProblem 8\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. \nFor example,\
    \ \n>>> square_sum(1:10)\nc(1,4,9,16,25)\n>>> square_sum(1:10)\nc(1,4,9,16,25)\n\
    \n</text>\n<cell>\nsquare_sum <- function(x) {\n  return(sum(x^2))\n}\n</cell>\n\
    <cell>\nsquare_sum(1:10)\n</cell>\n<cell>\nsquare_sum(1:10)\n</cell>\n<text>\n\
    Problem 9\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers. \nFor example, \n>>> square_sum(1:10)\nc(1,4,9,16,25)\n\
    >>> square_sum(1:10)\nc(1,4,9,16,25)\n\n</text>\n<cell>\nsquare_sum <- function(x)\
    \ {\n  return(sum(x^2))\n}\n</cell>\n<cell>\nsquare_sum(1:10)\n</cell>\n<cell>\n\
    square_sum(1:10)\n</cell>\n<text>\nProblem 10\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. \nFor example,\
    \ \n>>> square_sum(1:10)\nc(1,4,9,16,25)\n>>> square_sum(1:10)\nc(1,4,9,16,",
  "\n  \n}\n</cell>\n<cell>", "\n  n <- n + 1\n  if(n <= 1) return(integer(0))\n \
    \ if(n %% 2 == 0) return(integer(0))\n  if(n %% 3 == 0) return(integer(0))\n \
    \ if(n %% 5 == 0) return(integer(0))\n  if(n %% 7 == 0) return(integer(0))\n \
    \ if(n %% 11 == 0) return(integer(0))\n  if(n %% 13 == 0) return(integer(0))\n\
    \  if(n %% 17 == 0) return(integer(0))\n  if(n %% 19 == 0) return(integer(0))\n\
    \  return(integer(n))\n}\n</cell>\n<cell>\ncount_up_to(10)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(100)\n</cell>\n<cell>\ncount_up_to(1000)\n\
    </cell>\n<cell>\ncount_up_to(10000)\n</cell>\n<cell>\ncount_up_to(100000)\n</cell>\n\
    <cell>\ncount_up_to(1000000)\n</cell>\n<cell>\ncount_up_to(10000000)\n</cell>\n\
    <cell>\ncount_up_to(100000000)\n</cell>\n<cell>\ncount_up_to(1000000000)\n</cell>\n\
    <cell>\ncount_up_to(10000000000)\n</cell>\n<cell>\ncount_up_to(100000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000",
  "\n  n <- as.integer(n)\n  if(n <= 0) return(c())\n  if(n <= 1) return(c(n))\n \
    \ if(n %% 2 == 0) return(c(n))\n  if(n %% 3 == 0) return(c(n))\n  if(n %% 5 ==\
    \ 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n  if(n %% 11 == 0) return(c(n))\n\
    \  if(n %% 13 == 0) return(c(n))\n  if(n %% 17 == 0) return(c(n))\n  if(n %% 19\
    \ == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the number of prime numbers less than or equal to a given number.\n\
    \nThe function should take one number as an argument and return a number.\n\n\
    The function should return 0 if the number is 0.\n\nThe function should return\
    \ -1 if the number is negative.\n\nThe function should return 1 if the number\
    \ is greater than 1.\n\nThe function should return 2 if the number is greater\
    \ than 2.\n\nThe function should return 3 if the number is greater than 3.\n\n\
    The function should return 4 if the number is greater than 4.\n\nThe function\
    \ should return 5 if the number is greater than 5.\n\nThe function should return\
    \ 6 if the number is greater than 6.\n\nThe function should return 7 if the number\
    \ is greater than 7.\n\nThe function should return 8 if the number is greater\
    \ than 8.\n\nThe function should return 9 if the number is greater than 9.\n\n\
    The function should return 10 if the number is greater than 10.\n\nThe function\
    \ should return 11 if the number is greater than 11.\n\nThe function should return\
    \ 12 if the number is greater than 12.\n\nThe function should return 13 if the\
    \ number is greater than 13.\n\nThe function should return 14 if the number is\
    \ greater than 14.\n\nThe function should return 15 if the number is greater than\
    \ 15.\n\nThe function should return 16 if the number is greater than 16.\n\nThe\
    \ function should return 17 if the number is greater than 17.\n\nThe function\
    \ should return 18 if the number is greater than 18.\n\nThe function should return\
    \ 19 if the number is greater than 19.\n\nThe function should return 20 if the\
    \ number is greater than 20.\n\nThe function should return 21 if the number is\
    \ greater than 21.\n\nThe function should return 22 if the number is greater than\
    \ 22.\n\nThe function should return 23 if the number is greater than 23.\n\nThe\
    \ function should return 24 if the number is greater than 24.\n\nThe function\
    \ should return 25 if the number is greater than 25.\n\nThe function should return\
    \ 26 if the number is greater than 26.\n\nThe function should return 27 if the\
    \ number is greater than 27.\n\nThe function should return 28 if the number is\
    \ greater than 28.\n\nThe function should return 29 if the number is greater than\
    \ 29.\n\nThe function should return 30 if the number is greater than 30.\n\nThe\
    \ function should return 31 if the number is greater than 31.\n\nThe function\
    \ should return 32 if the number is greater than 32.\n\nThe function should return\
    \ 33 if the number is greater than ", "\n  if(n <= 0) return()\n  if(n %% 2 ==\
    \ 0) return(c(n))\n  \n  i <- 3\n  while(i <= sqrt(n)) {\n    if(n %% i == 0)\
    \ return(c(n, i))\n    i <- i + 2\n  }\n  return(c(n))\n}\n", "\n  \n}\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of the squares of the integers in that vector. For example, c(2, 3,\
    \ 4) returns c(4, 9, 16).\n\n\n</text>\n<cell>", "\n  \n  if(n <= 0) return()\n\
    \  \n  if(n %% 2 == 0) return(c(n))\n  \n  x <- 3\n  \n  while(x <= n) {\n   \
    \ if(x %% n == 0) return(c(x, x+1))\n    x <- x + 2\n  }\n  \n  return(c())\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of prime numbers that\
    \ exist up to and including a given integer n.\n\n\n</text>\n<cell>", "\n  n <-\
    \ n\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(0))\n  \n  primes\
    \ <- c(2, 3)\n  \n  for(i in 4:n) {\n    for(j in primes) {\n      if(j %% i ==\
    \ 0) break\n    }\n    if(j == primes[i]) primes[i] <- primes[i] + 1\n  }\n  \n\
    \  return(primes)\n}\n\ncount_up_to(20)", "\n  \n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer vector and returns a vector of the\
    \ squares of the numbers in the vector.\nFor example, \n>>> square_of_vector(c(2,\
    \ 3, 4))\nc(2, 4, 9)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n", "\n \
    \ if(n <= 0) return()\n  \n  if(n %% 2 == 0) return(c(n))\n  \n  x <- 3\n  \n\
    \  while(x <= n) {\n    \n    if(n %% x == 0) return(c(n, x))\n    \n    x <-\
    \ x + 2\n  }\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n\
    </cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\n\
    count_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nProblem 3\n\
    The Fibonacci sequence is defined by the formula:\n\n$$ F_n = \\begin{cases}\n\
    \      0 & n = 0\\\n      1 & n = 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\\
    end{cases}\n$$\n\nwhere $F_0 = 0$ and $F_1 = 1$.\n\nBy starting with $F_0 = 0$\
    \ and $F_1 = 1$, we can compute the sequence $F_2, F_3, \\ldots, F{n-1}$ in $\\\
    mathbb{R}$ using the following formula:\n\n$$ F_n = F{n-1} + F_{n-2}$$\n\nFor\
    \ example, with $F_0 = 1$ and $F_1 = 1$, computing $F_1$ with $F_0$ yields:\n\n\
    $$ F_1 = 1 + 1 = 2$$\n\nBy iterating between $F_0$ and $F_1$, we can generate\
    \ the entire sequence:\n\n$$ F_n = F{n-1} + F_{n-2}$$\n\nThe Fibonacci sequence\
    \ is remarkable for its closed-form equation:\n\n$$ F_n = \\begin{cases}\n   \
    \   0 & n = 0\\\n      1 & n = 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\end{cases}\n\
    $$\n\nUsing the formula above, implement a function that computes the sum of the\
    \ $n$th Fibonacci numbers to its $n$-th power.\n\nThe Fibonacci sequence is defined\
    \ by the formula:\n\n$$ F_n = \\begin{cases}\n      0 & n = 0\\\n      1 & n =\
    \ 1 \\\n      F{n-1} + F_{n-2} & n > 1\n    \\end{cases}\n$$\n\nwhere $", "\n\
    \  n <- n + 1\n  if(n <= 1) return(vector())\n  if(n %% 2 == 0) return(vector())\n\
    \  if(n %% 3 == 0) return(vector())\n  if(n %% 5 == 0) return(vector())\n  if(n\
    \ %% 7 == 0) return(vector())\n  if(n %% 11 == 0) return(vector())\n  if(n %%\
    \ 13 == 0) return(vector())\n  if(n %% 17 == 0) return(vector())\n  if(n %% 19\
    \ == 0) return(vector())\n  if(n %% 23 == 0) return(vector())\n  if(n %% 29 ==\
    \ 0) return(vector())\n  if(n %% 31 == 0) return(vector())\n  if(n %% 37 == 0)\
    \ return(vector())\n  if(n %% 43 == 0) return(vector())\n  if(n %% 49 == 0) return(vector())\n\
    \  if(n %% 53 == 0) return(vector())\n  if(n %% 59 == 0) return(vector())\n  if(n\
    \ %% 67 == 0) return(vector())\n  if(n %% 71 == 0) return(vector())\n  if(n %%\
    \ 79 == 0) return(vector())\n  if(n %% 83 == 0) return(vector())\n  if(n %% 89\
    \ == 0) return(vector())\n  if(n %% 97 == 0) return(vector())\n  if(n %% 101 ==\
    \ 0) return(vector())\n  if(n %% 107 == 0) return(vector())\n  if(n %% 113 ==\
    \ 0) return(vector())\n  if(n %% 119 == 0) return(vector())\n  if(n %% 125 ==\
    \ 0) return(vector())\n  if(n %% 131 == 0) return(vector())\n  if(n %% 137 ==\
    \ 0) return(vector())\n  if(n %% 143 == 0) return(vector())\n  if(n %% 149 ==\
    \ 0) return(vector())\n  if(n %% 153 == 0) return(vector())\n  if(n %% 159 ==\
    \ 0) return(vector())\n  if(n %% 165 == 0) return(vector())\n  if(n %% 171 ==\
    \ 0) return(vector())\n  if(n %% 177 == 0) return(vector())\n  if(n %% 183 ==\
    \ 0) return(vector())\n  if(n %% 189 == 0) return(vector())\n  if(n %% 193 ==\
    \ 0) return(vector())\n  if(n %% 197 == 0) return(vector())\n  if(n %% 201 ==\
    \ 0) return(vector())\n  if(n %% 207", "\n  \n}\n</cell>\n<cell>", "\n  if(n <=\
    \ 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n, n - 2))\n}\n", "\n\
    \  if(n <= 0) return()\n  \n  if(n %% 2 == 0) return(c(n))\n  \n  x <- 3\n  \n\
    \  while(x <= n) {\n    \n    while(x %% x == 0) {\n      x <- x + 1\n    }\n\
    \    \n    if(x > n) return(c(n))\n    \n    x <- x + 1\n  }\n  \n  return(c(n))\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list of numbers and returns\
    \ the number of positive integers that do not exceed 100.\n\n\n</text>\n<cell>",
  "\n  n <- n + 1\n  if(n <= 0) return(NULL)\n  if(n %% 2 == 0) return(c(n))\n  if(n\
    \ %% 3 == 0) return(c(n))\n  if(n %% 5 == 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n\
    \  if(n %% 11 == 0) return(c(n))\n  if(n %% 13 == 0) return(c(n))\n  if(n %% 17\
    \ == 0) return(c(n))\n  if(n %% 19 == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n\
    <cell>", "\n  n <- n + 1\n  if(n <= 1) return(integer(0))\n  if(n %% 2 == 0) return(integer(0))\n\
    \  if(n %% 3 == 0) return(integer(0))\n  if(n %% 5 == 0) return(integer(0))\n\
    \  if(n %% 7 == 0) return(integer(0))\n  if(n %% 11 == 0) return(integer(0))\n\
    \  if(n %% 13 == 0) return(integer(0))\n  if(n %% 17 == 0) return(integer(0))\n\
    \  if(n %% 19 == 0) return(integer(0))\n  return(integer(n))\n}\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n\
    </cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(21)\n</cell>\n\
    <cell>\ncount_up_to(22)\n</cell>\n<cell>\ncount_up_to(23)\n</cell>\n<cell>\ncount_up_to(24)\n\
    </cell>\n<cell>\ncount_up_to(25)\n</cell>\n<cell>\ncount_up_to(26)\n</cell>\n\
    <cell>\ncount_up_to(27)\n</cell>\n<cell>\ncount_up_to(28)\n</cell>\n<cell>\ncount_up_to(29)\n\
    </cell>\n<cell>\ncount_up_to(30)\n</cell>\n<cell>\ncount_up_to(31)\n</cell>\n\
    <cell>\ncount_up_to(32)\n</cell>\n<cell>\ncount_up_to(33)\n</cell>\n<cell>\ncount_up_to(34)\n\
    </cell>\n<cell>\ncount_up_to(35)\n</cell>\n<cell>\ncount_up_to(36)\n</cell>\n\
    <cell>\ncount_up_to(37)\n</cell>\n<cell>\ncount_up_to(38)\n</cell>\n<cell>\ncount_up_to(39)\n\
    </cell>\n<cell>\ncount_up_to(40)\n</cell>\n<cell>\ncount_up_to(41)\n</cell>\n\
    <cell>\ncount_up_to(42)\n</cell>\n<cell>\ncount_up_to(43)\n</cell>\n<cell>\ncount_up_to(44)\n\
    </cell", "\n  n <- as.integer(n)\n  \n  if(n <= 0) return()\n  \n  if(n %% 2 ==\
    \ 0) return(c(n))\n  \n  i <- 3\n  \n  while(i <= sqrt(n)) {\n    if(n %% i ==\
    \ 0) return(c(n, i))\n    i <- i + 2\n  }\n}\n</cell>\n<cell>\ncount_up_to(10)\n\
    </cell>\n<cell>\ncount_up_to(100)\n</cell>\n<cell>\ncount_up_to(1000)\n</cell>\n\
    <cell>\ncount_up_to(10000)\n</cell>\n<cell>\ncount_up_to(100000)\n</cell>\n<cell>\n\
    count_up_to(1000000)\n</cell>\n<cell>\ncount_up_to(10000000)\n</cell>\n<cell>\n\
    count_up_to(100000000)\n</cell>\n<cell>\ncount_up_to(1000000000)\n</cell>\n<cell>\n\
    count_up_to(10000000000)\n</cell>\n<cell>\ncount_up_to(100000000000)\n</cell>\n\
    <cell>\ncount_up_to(1000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000000000)\n</cell>\n<cell>\n\
    count_up_to(100000000000000000000000000000)\n</cell>\n<cell", "\n  if(n <= 0)\
    \ return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n", "\n  \n\
    }\n</cell>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  \n  x <- 3\n  \n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x+1))\n\
    \    x <- x + 2\n  }\n  \n  return(c())\n}\n\ncount_up_to(20)", "\n  if(n <= 0)\
    \ return()\n  \n  if(n %% 2 == 0) return(c(n))\n  \n  x <- 3\n  \n  while(x <=\
    \ n) {\n    if(x %% 2 == 0) return(c(x, x+1, x+2))\n    x <- x + 2\n  }\n  \n\
    \  return(c())\n}\n\ncount_up_to(5)", "\n  \n}\n</cell>\n<cell>", "\n  \n}\n</cell>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(1))\n\
    \  if(n %% 2 == 0) return(integer(2))\n  if(n %% 3 == 0) return(integer(3))\n\
    \  if(n %% 5 == 0) return(integer(5))\n  if(n %% 7 == 0) return(integer(7))\n\
    \  if(n %% 11 == 0) return(integer(11))\n  if(n %% 13 == 0) return(integer(13))\n\
    \  if(n %% 17 == 0) return(integer(17))\n  if(n %% 19 == 0) return(integer(19))\n\
    \  return(integer(n))\n}\n", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  return(c(n,n-1))\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n\
    </cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\n\
    count_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a vector of integers and returns a vector of the squares\
    \ of all the integers in the vector.\nFor example, c(1,2,3) returns c(1,4,9).\n\
    \n\n</text>\n<cell>", "\n  n <- n + 1\n  if(n <= 0) return(NULL)\n  if(n %% 2\
    \ == 0) return(c(n))\n  x <- 3\n  while(x %% n != 0) {\n    x <- x + 1\n  }\n\
    \  return(c(x, n-x))\n}\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n\
    </cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\n\
    count_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer vector and\
    \ returns a vector of the same length\nthat contains the number of times each\
    \ integer appears in the vector.\nFor example, if the input vector is c(2, 5,\
    \ 7, 11, 13), then the output vector would be\nc(2, 1, 2, 1, 1).\n\n\n</text>\n\
    <cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nFor example, c(1,2,3) should return 9\nHint: use sapply.\n\n\
    \n</text>\n<cell>", "\n  if(n <= 0) return()\n  \n  primes <- c(2, 3)\n  \n  for(i\
    \ <- 3L; primes[i] <= n; primes[i] <- primes[i+1] + 1) {\n    \n    for(j <- 3L;\
    \ primes[j] <= primes[i]; j <<- j + 2) {\n      \n      if(primes[i] %% j == 0)\
    \ break\n    }\n    \n    if(j > primes[i]) break\n  }\n  \n  return(primes[seq_len(n)])\n\
    }\n\ncount_up_to(10)", "\n  n <- n\n  if(n < 1) {\n    return()\n  }\n  if(n <=\
    \ 3) {\n    return(c(n))\n  }\n  if(n <= 5) {\n    return(c(2, 3))\n  }\n  if(n\
    \ <= 7) {\n    return(c(2, 3, 5))\n  }\n  if(n <= 11) {\n    return(c(2, 3, 5,\
    \ 7))\n  }\n  if(n <= 13) {\n    return(c(2, 3, 5, 7, 11))\n  }\n  if(n <= 17)\
    \ {\n    return(c(2, 3, 5, 7, 11, 13))\n  }\n  if(n <= 19) {\n    return(c(2,\
    \ 3, 5, 7, 11, 13, 17))\n  }\n  return(c())\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes in a vector of integers and returns a vector of the squares of all\
    \ the integers in the vector.\nFor example, if the input vector is c(2, 3, 4,\
    \ 5), the function should return c(4, 9, 16, 25).\n\n\n</text>\n<cell>", "\n \
    \ n <- as.integer(n)\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(1))\n\
    \  \n  primes <- c(2, 3)\n  \n  for(i <- 3L; primes[i] <= n; primes[i+1] <- primes[i]+1)\
    \ {\n    for(j <- 3L; primes[j] <= primes[i]; j <- j+1) {\n      if(j > i) break\n\
    \      if(primes[j] == primes[i]) break\n    }\n    if(j > i) primes[i] <- primes[i]+1\n\
    \  }\n  \n  return(primes)\n}\n\ncount_up_to\n</cell>\n<cell>", "\n  \n}\n</cell>\n\
    <cell>", "\n  n <- n + 1\n  if(n <= 1) return(c())\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x %% n != 0) {\n    x <- x + 1\n  }\n  return(c(x, n))\n}\n",
  "\n  \n}\n</cell>\n<cell>", "\n  \n}\n</cell>\n<cell>", "\n  n <- n\n  \n  if(n\
    \ <= 1) return(c())\n  \n  i <- 1\n  \n  while(i <= n) {\n    \n    if(all(x <-\
    \ 1:i, x %% i == 0)) {\n      \n      if(i %% 2 == 0) return(c(i))\n      \n \
    \     i <- i + 1\n      \n    }\n    \n    i <- i + 1\n    \n  }\n  \n  return(c())\n\
    }\n\ncount_up_to(20)", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  x <- 3\n  while(x <= n) {\n    if(x %% 2 == 0) return(c(x, x))\n    x <- x\
    \ + 2\n  }\n}\n</cell>\n<cell>", "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n\
    \  return(c(n,n-1))\n}\n", "\n  n <- n\n  if(n < 1) return(c())\n  if(n %% 2 ==\
    \ 0) return(c(n))\n  x <- 3\n  i <- 1\n  while(i <= n) {\n    i <- i + 1\n   \
    \ if(x %% i == 0) return(c(x, x))\n    x <- x + 2\n  }\n  return(c())\n}\n</cell>\n\
    <cell>\ncount_up_to(10)\n</cell>\n<cell>\ncount_up_to(100)\n</cell>\n<cell>\n\
    count_up_to(1000)\n</cell>\n<cell>\ncount_up_to(10000)\n</cell>\n<cell>\ncount_up_to(100000)\n\
    </cell>\n<cell>\ncount_up_to(1000000)\n</cell>\n<cell>\ncount_up_to(10000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000)\n</cell>\n<cell>\ncount_up_to(1000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000)\n</cell>\n<cell>\ncount_up_to(100000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000000000)\n</cell>\n<cell>\n\
    count_up_to(100000000000000000000000000000)\n</cell>\n", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer vector and\
    \ returns a vector of the same length with all negative numbers removed.\nFor\
    \ example, \n>>> negative_numbers(c(1,2,3))\nc(-1,2,-3)\n>>> negative_numbers(c(1,2,-3))\n\
    c(-1,2,3)\n\n</text>\n<cell>\nnegative_numbers <- function(x) {\n  if(all(x %in%\
    \ c(0,-1))) return(x)\n  return(x[!x %in% c(0,-1)])\n}\n</cell>\n<cell>\nnegative_numbers(c(1,2,3))\n\
    </cell>\n<cell>\nnegative_numbers(c(1,2,-3))\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer vector and returns a vector of the same length\
    \ with all positive numbers removed.\nFor example, \n>>> positive_numbers(c(1,2,3))\n\
    c(1,2)\n>>> positive_numbers(c(1,2,-3))\nc(1,2)\n\n</text>\n<cell>\npositive_numbers\
    \ <- function(x) {\n  if(all(x %in% c(0,1))) return(x)\n  return(x[!x %in% c(0,1)])\n\
    }\n</cell>\n<cell>\npositive_numbers(c(1,2,3))\n</cell>\n<cell>\npositive_numbers(c(1,2,-3))\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes an integer vector and\
    \ returns a vector of the same length with all even numbers removed.\nFor example,\
    \ \n>>> even_numbers(c(1,2,3))\nc(1,3)\n>>> even_numbers(c(1,2,-3))\nc(1,3)\n\n\
    </text>\n<cell>\neven_numbers <- function(x) {\n  if(all(x %in% c(0,2))) return(x)\n\
    \  return(x[!x %in% c(0,2)])\n}\n</cell>\n<cell>\neven_numbers(c(1,2,3))\n</cell>\n\
    <cell>\neven_numbers(c(1,2,-3))\n</cell>\n<text>\nExercise 5", "\n  if(n <= 0)\
    \ return()\n  if(n %% 2 == 0) return(c(n))\n  return(count_up_to(n-1))\n}\n</cell>\n\
    <cell>\ncount_up_to(10)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n\
    <cell>\ncount_up_to(21)\n</cell>\n<cell>\ncount_up_to(22)\n</cell>\n<cell>\ncount_up_to(23)\n\
    </cell>\n<cell>\ncount_up_to(24)\n</cell>\n<cell>\ncount_up_to(25)\n</cell>\n\
    <cell>\ncount_up_to(26)\n</cell>\n<cell>\ncount_up_to(27)\n</cell>\n<cell>\ncount_up_to(28)\n\
    </cell>\n<cell>\ncount_up_to(29)\n</cell>\n<cell>\ncount_up_to(30)\n</cell>\n\
    <cell>\ncount_up_to(31)\n</cell>\n<cell>\ncount_up_to(32)\n</cell>\n<cell>\ncount_up_to(33)\n\
    </cell>\n<cell>\ncount_up_to(34)\n</cell>\n<cell>\ncount_up_to(35)\n</cell>\n\
    <cell>\ncount_up_to(36)\n</cell>\n<cell>\ncount_up_to(37)\n</cell>\n<cell>\ncount_up_to(38)\n\
    </cell>\n<cell>\ncount_up_to(39)\n</cell>\n<cell>\ncount_up_to(40)\n</cell>\n\
    <cell>\ncount_up_to(41)\n</cell>\n<cell>\ncount_up_to(42)\n</cell>\n<cell>\ncount_up_to(43)\n\
    </cell>\n<cell>\ncount_up_to(44)\n</cell>\n<cell>\ncount_up_to(45)\n</cell>\n\
    <cell>\ncount_up_to(46)\n</cell>\n<cell>\ncount_up_to(47)\n</cell>\n<cell>\ncount_up_to(48)\n\
    </cell>\n<cell>\ncount_up_to(49)\n</cell>\n<cell>\ncount_up_to(50)\n</cell>\n",
  "\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  if(n %% 3 == 0) return(c(n))\n\
    \  if(n %% 5 == 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n  if(n %% 11\
    \ == 0) return(c(n))\n  if(n %% 13 == 0) return(c(n))\n  if(n %% 17 == 0) return(c(n))\n\
    \  if(n %% 19 == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a vector of integers and returns a vector of the same length where\
    \ each element is the sum of the absolute values of the original vector's elements.\
    \ For example:\n\n>>> sum_of_abs_vals(c(2, -1, 3, 4))\nc(2, 5, 3)\n>>> sum_of_abs_vals(c(2,\
    \ -1, 3, 0))\nc()\n>>> sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2, -3, -4, -5)\n\
    >>> sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2, -3, -4, -5)\n>>> sum_of_abs_vals(c(-2,\
    \ -3, -4, -5))\nc(-2, -3, -4, -5)\n>>> sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2,\
    \ -3, -4, -5)\n>>> sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2, -3, -4, -5)\n>>>\
    \ sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2, -3, -4, -5)\n>>> sum_of_abs_vals(c(-2,\
    \ -3, -4, -5))\nc(-2, -3, -4, -5)\n>>> sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2,\
    \ -3, -4, -5)\n>>> sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2, -3, -4, -5)\n>>>\
    \ sum_of_abs_vals(c(-2, -3, -4, -5))\nc(-2, -3, -4, -5)\n>>> ", "\n  if(n <= 0)\
    \ return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n", "\n  if(n\
    \ <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n, count_up_to(n-1)))\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of the same length where\
    \ each element is the sum of the vector elements up until the given index.\n\n\
    For example, if the input vector is c(2, 3, 5, 7, 11, 13, 17), then the output\
    \ vector is c(3, 7, 11, 13, 17).\n\n\n</text>\n<cell>", "\n  \n}\n</cell>\n<cell>",
  "\n  \n}\n</cell>\n<cell>", "\n  \n}\n</cell>\n<cell>", "\n  \n  if(n <= 0) return()\n\
    \  \n  if(n %% 2 == 0) return(c(n))\n  \n  x <- 3\n  \n  while(x <= n) {\n   \
    \ \n    if(n %% x == 0) return(c(n, x))\n    \n    x <- x + 2\n  }\n  \n  return(c(n))\n\
    }\n</cell>\n<cell>\ncount_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n\
    <cell>\ncount_up_to(0)\n</cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n\
    </cell>\n<cell>\ncount_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes an integer vector and returns a\
    \ vector of the same length\nthat contains the number of occurrences of each of\
    \ the numbers in the input vector.\nFor example, if the input vector is c(3, 1,\
    \ 2, 2, 5), then the output vector should be c(3\n= 2, 1 = 3, 2 = 2, 5 = 1)\n\n\
    \n</text>\n<cell>", "\n  n <- n + 1\n  if(n <= 0) return(NULL)\n  if(n %% 2 ==\
    \ 0) return(c(n))\n  if(n %% 3 == 0) return(c(n, 3))\n  if(n %% 5 == 0) return(c(n,\
    \ 3, 5))\n  if(n %% 7 == 0) return(c(n, 3, 5, 7))\n  if(n %% 11 == 0) return(c(n,\
    \ 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(n, 3, 5, 7, 11, 13))\n  if(n %% 17\
    \ == 0) return(c(n, 3, 5, 7, 11, 13, 17))\n  if(n %% 19 == 0) return(c(n, 3, 5,\
    \ 7, 11, 13, 17, 19))\n  return(c(n, 3, 5, 7, 11, 13, 17, 19))\n}\n</cell>\n<cell>\n\
    count_up_to(5)\n</cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n\
    </cell>\n<cell>\ncount_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\n\
    count_up_to(18)\n</cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an integer and returns the number of prime numbers\
    \ less than or equal to that integer.\n\n\n</text>\n<cell>", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(count_up_to(n-1) + c(2))\n}\n\ncount_up_to\n\
    </cell>\n<cell>", "\n  n <- n + 1\n  if(n <= 1) return(integer(0))\n  if(n %%\
    \ 2 == 0) return(integer(0))\n  if(n %% 3 == 0) return(integer(0))\n  if(n %%\
    \ 5 == 0) return(integer(0))\n  if(n %% 7 == 0) return(integer(0))\n  if(n %%\
    \ 11 == 0) return(integer(0))\n  if(n %% 13 == 0) return(integer(0))\n  if(n %%\
    \ 17 == 0) return(integer(0))\n  if(n %% 19 == 0) return(integer(0))\n  return(integer(n))\n\
    }\n</cell>\n<cell>", "\n  n <- n + 1\n  \n  if(n <= 1) return(c())\n  \n  i <-\
    \ 1\n  \n  while(i <= n) {\n    if(!any(isprime(i))) return(c())\n    i <- i +\
    \ 1\n  }\n  \n  return(c(2))\n}\n", "\n  if(n <= 0) return()\n  if(n %% 2 == 0)\
    \ return(c(n))\n  return(\n    c(\n      count_up_to(n / 2),\n      count_up_to((n\
    \ - 1) / 2)),\n    count_up_to((n - 1) / 2))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<text>\nExercise: Write a function that takes an integer and returns\
    \ a vector with all the prime numbers up to and including that integer.\n\n\n\
    </text>\n<cell>", "\n  n <- n\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(0))\n\
    \  if(n %% 2 == 0) return(integer(0))\n  if(n %% 3 == 0) return(integer(0))\n\
    \  if(n %% 5 == 0) return(integer(0))\n  if(n %% 7 == 0) return(integer(0))\n\
    \  if(n %% 11 == 0) return(integer(0))\n  if(n %% 13 == 0) return(integer(0))\n\
    \  if(n %% 17 == 0) return(integer(0))\n  if(n %% 19 == 0) return(integer(0))\n\
    \  if(n %% 23 == 0) return(integer(0))\n  if(n %% 29 == 0) return(integer(0))\n\
    \  if(n %% 31 == 0) return(integer(0))\n  if(n %% 37 == 0) return(integer(0))\n\
    \  if(n %% 41 == 0) return(integer(0))\n  if(n %% 43 == 0) return(integer(0))\n\
    \  if(n %% 47 == 0) return(integer(0))\n  if(n %% 53 == 0) return(integer(0))\n\
    \  if(n %% 59 == 0) return(integer(0))\n  if(n %% 61 == 0) return(integer(0))\n\
    \  if(n %% 67 == 0) return(integer(0))\n  if(n %% 71 == 0) return(integer(0))\n\
    \  if(n %% 73 == 0) return(integer(0))\n  if(n %% 79 == 0) return(integer(0))\n\
    \  if(n %% 83 == 0) return(integer(0))\n  if(n %% 89 == 0) return(integer(0))\n\
    \  if(n %% 97 == 0) return(integer(0))\n  if(n %% 101 == 0) return(integer(0))\n\
    \  if(n %% 103 == 0) return(integer(0))\n  if(n %% 107 == 0) return(integer(0))\n\
    \  if(n %% 111 == 0) return(integer(0))\n  if(n %% 115 == 0) return(integer(0))\n\
    \  if(n %% 117 == 0) return(integer(0))\n  if(n %% 121 == 0) return(integer(0))\n\
    \  if(n %% 123 == 0) return(integer(0))\n  if(n %% 127 == 0) return(integer(0))\n\
    \  if(n %% 131 == 0) return(integer(0))\n  if(n %% 135 == 0) return(integer(0))\n\
    \  if(n %% 137 == 0) return(integer(0))\n  if(n %% 141 == 0) ", "\n  if(n <= 0)\
    \ return()\n  if(n %% 2 == 0) return(c(n))\n  if(n %% 3 == 0) return(c(n))\n \
    \ if(n %% 5 == 0) return(c(n))\n  if(n %% 7 == 0) return(c(n))\n  if(n %% 11 ==\
    \ 0) return(c(n))\n  if(n %% 13 == 0) return(c(n))\n  if(n %% 17 == 0) return(c(n))\n\
    \  if(n %% 19 == 0) return(c(n))\n  return(c(n))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of the sums of the squares\
    \ of the integers in the vector.\nFor example, if the input vector is c(4, 6,\
    \ 9, 12) then the output vector should be c(16, 25, 36, 49).\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n <= 0) return()\n  if(n %% 2 == 0) return(c())\n\
    \  x <- 3\n  i <- 1\n  while(i <= n) {\n    x <- x + 2\n    i <- i + x\n  }\n\
    \  return(c(x, n - x))\n}\n</cell>\n<cell>", "\n  \n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ the sums of the squares of the integers. For example:\n>>> square_sums(c(2,\
    \ 3, 5, 7, 11, 13, 17))\nc(27, 51, 109, 179, 283)\n>>> square_sums(c())\nc()\n\
    >>> square_sums(c(0))\nc()\n>>> square_sums(c(1))\nc()\n>>> square_sums(c(18))\n\
    c(81, 179, 283)\n>>> square_sums(c(2, 3))\nc(5, 9, 17)\n>>> square_sums(c(2, 3,\
    \ 5, 7, 11, 13, 17))\nc(27, 51, 109, 179, 283)\n>>> square_sums(c())\nc()\n>>>\
    \ square_sums(c(0))\nc()\n>>> square_sums(c(1))\nc()\n>>> square_sums(c(18))\n\
    c(81, 179, 283)\n>>> square_sums(c(2, 3))\nc(5, 9, 17)\n>>> square_sums(c(2, 3,\
    \ 5, 7, 11, 13, 17))\nc(27, 51, 109, 179, 283)\n>>> square_sums(c())\nc()\n>>>\
    \ square_sums(c(0))\nc()\n>>> square_sums(c(1))\nc()\n>>> square_sums(c(18))\n\
    c(81, 179, 283)\n>>> square_sums(c(2, 3))\nc(5, 9, 17)\n>>> square_sums(c(2, 3,\
    \ 5, 7, 11, 13, 17))\nc(27, 51, 109, 179, 283)\n>>> square_sums(c())\nc()\n>>>\
    \ square_sums(c(0))\nc()\n>>> square_sums(c(1))\nc()\n>>> square_sums(c(18))\n\
    c(81, 179, 283)\n>>> square_sums(c(2, 3))\nc(5, 9, 17)\n>>> square_sums(c(2, 3,\
    \ 5, 7, 11, 13, 17))\nc(27, 51, 109, 179, 283)\n>>> square_sums(c())\nc()\n>>>\
    \ square_sums(c(0))\nc()\n>>> square_sums(c(1))\nc()\n>>> square_sums(c(18))\n\
    c(81, 179, 283)\n>>> square_sums(c(2, 3))\nc(5, 9, 17)\n>>> square_sums(c(2, 3,\
    \ 5, 7, 11, 13, 17))\nc(27, 51, 109, 179, 283)\n>>> square_sums(c())\nc()", "\n\
    \  \n}\n</cell>\n<cell>", "\n  n <- n + 1\n  i <- 1\n  while(i <= n) {\n    i\
    \ <- i + 1\n    if(i %% 2 == 0) {\n      if(i %% 3 == 0) {\n        if(i %% 5\
    \ == 0) {\n          if(i %% 7 == 0) {\n            c(i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i,\
    \ i, i, i, i, i, i, i, i, i, i, i, i, ", "\n  if(n <= 0) return()\n  if(n %% 2\
    \ == 0) return(c(n))\n  return(c(n,n-1))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector.\nThe vector can\
    \ contain any number of elements.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  if(n\
    \ <= 1) return(c())\n  if(n %% 2 == 0) return(c(2))\n  if(n %% 3 == 0) return(c(2,\
    \ 3))\n  if(n %% 5 == 0) return(c(2, 3, 5))\n  if(n %% 7 == 0) return(c(2, 3,\
    \ 5, 7))\n  if(n %% 11 == 0) return(c(2, 3, 5, 7, 11))\n  if(n %% 13 == 0) return(c(2,\
    \ 3, 5, 7, 11, 13))\n  if(n %% 17 == 0) return(c(2, 3, 5, 7, 11, 13, 17))\n  if(n\
    \ %% 19 == 0) return(c(2, 3, 5, 7, 11, 13, 17, 19))\n}\n</cell>\n<cell>", "\n\
    \  \n  if(n <= 1) return(c())\n  \n  x <- 2\n  \n  while(x <= n) {\n    \n   \
    \ if(x %% x == 0) return(c(x, x))\n    \n    x <- x + 1\n  }\n  \n  return(c())\n\
    }\n\ncount_up_to(10)", "\n  n <- n\n  if(n <= 0) return(NULL)\n  if(n <= 1) return(integer(n))\n\
    \  if(n %% 2 == 0) return(integer(n))\n  if(n %% 3 == 0) return(integer(n))\n\
    \  if(n %% 5 == 0) return(integer(n))\n  if(n %% 7 == 0) return(integer(n))\n\
    \  if(n %% 11 == 0) return(integer(n))\n  if(n %% 13 == 0) return(integer(n))\n\
    \  if(n %% 17 == 0) return(integer(n))\n  if(n %% 19 == 0) return(integer(n))\n\
    \  if(n %% 23 == 0) return(integer(n))\n  if(n %% 29 == 0) return(integer(n))\n\
    \  if(n %% 31 == 0) return(integer(n))\n  if(n %% 37 == 0) return(integer(n))\n\
    \  if(n %% 43 == 0) return(integer(n))\n  if(n %% 49 == 0) return(integer(n))\n\
    \  if(n %% 53 == 0) return(integer(n))\n  if(n %% 59 == 0) return(integer(n))\n\
    \  if(n %% 67 == 0) return(integer(n))\n  if(n %% 71 == 0) return(integer(n))\n\
    \  if(n %% 79 == 0) return(integer(n))\n  if(n %% 83 == 0) return(integer(n))\n\
    \  if(n %% 89 == 0) return(integer(n))\n  if(n %% 97 == 0) return(integer(n))\n\
    \  if(n %% 101 == 0) return(integer(n))\n  if(n %% 107 == 0) return(integer(n))\n\
    \  if(n %% 113 == 0) return(integer(n))\n  if(n %% 119 == 0) return(integer(n))\n\
    \  if(n %% 125 == 0) return(integer(n))\n  if(n %% 131 == 0) return(integer(n))\n\
    \  if(n %% 137 == 0) return(integer(n))\n  if(n %% 143 == 0) return(integer(n))\n\
    \  if(n %% 149 == 0) return(integer(n))\n  if(n %% 153 == 0) return(integer(n))\n\
    \  if(n %% 159 == 0) return(integer(n))\n  if(n %% 165 == 0) return(integer(n))\n\
    \  if(n %% 171 == 0) return(integer(n))\n  if(n %% 177 == 0) return(integer(n))\n\
    \  if(n %% 183 == 0) return(integer(n))\n  if(n %% 189 == 0) ", "\n  if(n <= 0)\
    \ return()\n  if(n %% 2 == 0) return(c(n))\n  \n  x <- 3\n  while(x <= n) {\n\
    \    if(x %% 2 == 0) return(c(x, x+1, x+2))\n    x <- x + 2\n  }\n  return(c())\n\
    }\n\ncount_up_to\n</cell>\n<cell>", "\n  n <- n + 1\n  x <- c()\n  for(i in 1:n)\
    \ {\n    for(j in 1:i) {\n      if(j %% i == 0) {\n        x <- c(x, j)\n    \
    \  }\n    }\n  }\n  x\n}\n\ncount_up_to\n</cell>\n<cell>", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of the sums of the squares\
    \ of the integers in the vector.\nFor example, if the input vector is c(4, 6,\
    \ 9), then the output vector should be c(16, 25, 36).\n\n\n</text>\n<cell>", "\n\
    \  if(n <= 0) return()\n  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n",
  "\n  n <- n + 1\n  \n  if(n <= 1) {\n    return(integer(0))\n  }\n  \n  if(n %%\
    \ 2 == 0) {\n    return(integer(0))\n  }\n  \n  x <- 3\n  \n  while(x %% n !=\
    \ 0) {\n    x <- x + 1\n  }\n  \n  return(integer(x))\n}\n", "\n  if(n <= 0) return()\n\
    \  if(n %% 2 == 0) return(c(n))\n  return(c(n,n-1))\n}\n", "\n  n <- as.integer(n)\n\
    \  \n  if(n <= 0) {\n    return(c())\n  }\n  \n  if(n %% 2 == 0) {\n    return(c(n))\n\
    \  }\n  \n  i <- 3\n  \n  while(i <= n) {\n    if(n %% i == 0) {\n      return(c(n,\
    \ i))\n    }\n    i <- i + 1\n  }\n  \n  return(c())\n}\n</cell>\n<cell>\ncount_up_to(5)\n\
    </cell>\n<cell>\ncount_up_to(11)\n</cell>\n<cell>\ncount_up_to(0)\n</cell>\n<cell>\n\
    count_up_to(20)\n</cell>\n<cell>\ncount_up_to(1)\n</cell>\n<cell>\ncount_up_to(18)\n\
    </cell>\n<cell>\ncount_up_to(19)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of the squares of all the\
    \ integers in the vector.\nFor example, \n>>> square_of_vector(c(1, 2, 3))\nc(1,\
    \ 4, 9)\n>>> square_of_vector(c(3, 4, 5))\nc(9, 25, 49)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(9, 25, 49)\n\n\n</text>\n<cell>\nsquare_of_vector <- function(x) {\n\
    \  x <- as.vector(x)\n  \n  if(length(x) == 0) {\n    return(c())\n  }\n  \n \
    \ if(length(x) == 1) {\n    return(c(x * x))\n  }\n  \n  return(c(x * x, x * x\
    \ * x))\n}\n</cell>\n<cell>\nsquare_of_vector(c(1, 2, 3))\n</cell>\n<cell>\nsquare_of_vector(c(3,\
    \ 4, 5))\n</cell>\n<cell>\nsquare_of_vector(c(3, 4, 5))\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes a vector of integers and returns a vector of\
    \ the sums of all the integers in the vector.\nFor example, \n>>> sum_of_vector(c(1,\
    \ 2, 3))\nc(3, 6, 9)\n>>> sum_of_vector(c(3, 4, 5))\nc(6, 15, 25)\n>>> sum_of_vector(c(3,\
    \ 4, 5))\nc(6, 15, 25)\n\n\n</text>\n<cell>\nsum_of_vector <- function(x) {\n\
    \  x <- as.vector(x)\n  \n  if(length(x) == 0) {\n    return(c())\n  }\n  \n \
    \ if(length(x) == 1) {\n    return(c(sum(x)))\n  }\n  \n  return(c(sum(x), sum(x)\
    \ + sum(x)))\n}\n</cell>\n<cell>\nsum_", "\n  n <- as.integer(n)\n  if(n <= 0)\
    \ return(NULL)\n  if(n <= 1) return(integer(0))\n  if(n %% 2 == 0) return(integer(0))\n\
    \  if(n %% 3 == 0) return(integer(0))\n  if(n %% 5 == 0) return(integer(0))\n\
    \  if(n %% 7 == 0) return(integer(0))\n  if(n %% 11 == 0) return(integer(0))\n\
    \  if(n %% 13 == 0) return(integer(0))\n  if(n %% 17 == 0) return(integer(0))\n\
    \  if(n %% 19 == 0) return(integer(0))\n  return(integer(n))\n}\n", "\n  n <-\
    \ n + 1\n  x <- c()\n  for(i in 2:n) {\n    for(j in 1:i) {\n      if(j %% i ==\
    \ 0) {\n        x <- c(x, i)\n        break\n      }\n    }\n  }\n  x\n}\n</cell>\n\
    <cell>\ncount_up_to(10)\n</cell>\n<cell>\ncount_up_to(100)\n</cell>\n<cell>\n\
    count_up_to(1000)\n</cell>\n<cell>\ncount_up_to(10000)\n</cell>\n<cell>\ncount_up_to(100000)\n\
    </cell>\n<cell>\ncount_up_to(1000000)\n</cell>\n<cell>\ncount_up_to(10000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000)\n</cell>\n<cell>\ncount_up_to(1000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000)\n</cell>\n<cell>\ncount_up_to(100000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000)\n</cell>\n<cell>\ncount_up_to(100000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(1000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(10000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(100000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000000)\n\
    </cell>\n<cell>\ncount_up_to(10000000000000000000000000000)\n</cell>\n<cell>\n\
    count_up_to(100000000000000000000000000000)\n</cell>\n<cell>\ncount_up_to(1000000000000000000000000000000)\n\
    </cell>\n<", "\n  \n}\n</cell>\n<cell>", "\n  \n}\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns a vector of the squares\
    \ of the integers in the vector.\nFor example, \n>>> square_vector(c(2, 3, 4))\n\
    c(2, 4, 9)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_vector(c(",
  "\n  \n}\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer vector\
    \ and returns a vector of the squares of the numbers in the vector.\nFor example,\
    \ \n>>> square_of_vector(c(2, 3, 4))\nc(2, 4, 9)\n>>> square_of_vector(c(3, 4,\
    \ 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3, 4, 5))\nc(3, 9, 27)\n>>> square_of_vector(c(3,\
    \ 4, 5))\nc(3, 9, 27)\n"]
stop_tokens:
- "\n#"
- "\n```"
