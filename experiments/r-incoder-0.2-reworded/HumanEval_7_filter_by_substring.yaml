name: HumanEval_7_filter_by_substring
language: r
prompt: "# Filter an input list of strings only for ones that contain given substring\n\
  # >>> filter_by_substring(c(), 'a')\n# c()\n# >>> filter_by_substring(c('abc', 'bacd',\
  \ 'cde', 'array'), 'a')\n# c('abc', 'bacd', 'array')\nfilter_by_substring <- function(strings,\
  \ substring) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_substring\n    if(!identical(candidate(c(),\
  \ 'john'), c())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd', 'xxy',\
  \ 'john doe', 'xxxAAA', 'xxx'), 'xxx'), c('xxx', 'xxxAAA', 'xxx'))){quit('no', 1)}\n\
  \    if(!identical(candidate(c('xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'),\
  \ 'xx'), c('xxx', 'aaaxxy', 'xxxAAA', 'xxx'))){quit('no', 1)}\n    if(!identical(candidate(c('grunt',\
  \ 'trumpet', 'prune', 'gruesome'), 'run'), c('grunt', 'prune'))){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  strings <- strings[grep(substring, strings)]\n  return(strings)\n\
    }\n", "\n  strings <- strings[grep(substring, strings)]\n  if(length(strings)\
    \ == 0) {\n    return(strings)\n  } else {\n    return(c(strings))\n  }\n}\n",
  "\n  strings <- strings[grep(substring, strings)]\n  return(strings)\n}\n", "\n\
    \  strings <- strings[grepl(substring, strings)]\n  if(length(strings) == 0) return(strings)\n\
    \  else return(list(strings))\n}\n", "\n  strings <- strings[grepl(substring,\
    \ strings)]\n  return(strings)\n}\n", "\n  strings %>% \n    str_split(pattern\
    \ = substring) %>% \n    map_chr(~.[[1]])\n}\n", "\n  strings <- strings[grep(substring,\
    \ strings)]\n  if(length(strings) == 0) return(strings)\n  else return(list(strings))\n\
    }\n", "\n  strings <- strings[grep(substring, strings)]\n  return(strings)\n}\n",
  "\n  strings <- strings[grep(substring, strings)]\n  if(length(strings) == 0) return(strings)\n\
    \  else return(list(strings))\n}\n", "\n  strings <- strings[grepl(substring,\
    \ strings)]\n  if(length(strings) == 0) return(NULL)\n  else return(strings)\n\
    }\n", "\n  strings <- strings[grep(substring, strings)]\n  return(strings)\n}\n",
  "\n  strings <- strings[grepl(substring, strings)]\n  if(length(strings) == 0) {\n\
    \    strings\n  } else {\n    c(strings, strings$strings[length(strings)])\n \
    \ }\n}\n", "\n  strings %>% \n    str_split(pattern = substring) %>% \n    map_chr(~.[[1]])\n\
    }\n", "\n  strings <- strings[grepl(substring, strings)]\n  return(strings)\n\
    }\n", "\n  strings <- strings[grep(substring, strings)]\n  return(strings)\n}\n",
  "\n  strings <- strings[grepl(substring, strings)]\n  return(strings)\n}\n", "\n\
    \  strings <- strings[grep(substring, strings)]\n  return(strings)\n}\n", "\n\
    \  strings <- strings[grep(substring, strings)]\n  return(strings)\n}\n", "\n\
    \  strings <- strings[grepl(substring, strings)]\n  return(strings)\n}\n", "\n\
    \  strings <- strings[grep(substring, strings)]\n  if(length(strings) == 0) {\n\
    \    return(NULL)\n  } else {\n    return(strings)\n  }\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
