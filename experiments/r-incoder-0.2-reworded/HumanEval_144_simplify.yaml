name: HumanEval_144_simplify
language: r
prompt: "# Your task is to implement a function that will simplify the expression\n\
  # x * n. The function returns TRUE if x * n evaluates to a whole number and FALSE\n\
  # otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n# <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n# You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n# >>> simplify('1/5', '5/1')\n# TRUE\n#\
  \ >>> simplify('1/6', '2/1')\n# FALSE\n# >>> simplify('7/10', '10/2')\n# FALSE\n\
  simplify <- function(x, n) {"
tests: "test_humaneval <- function() {\ncandidate <- simplify\n    if(!identical(candidate('1/5',\
  \ '5/1'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('1/6', '2/1'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('5/1', '3/1'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('7/10',\
  \ '10/2'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('2/10', '50/10'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('7/2', '4/2'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('11/6', '6/1'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('2/3',\
  \ '5/2'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('5/2', '3/5'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('2/4', '8/4'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('2/4',\
  \ '4/2'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('1/5', '5/1'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('1/5', '1/5'), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n\
    }\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code\
    \ here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n \
    \ # Your code here\n}\n</cell>\n<text>\nExercise 4\nThe function simplify should\
    \ return TRUE if and only if both numerator and denominator are whole numbers.\
    \ You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\
    \nHint: You can use the function grepl in R to check if a pattern is in a string.\n\
    \n\n</text>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n",
  "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  #\
    \ Your code here\n}\n</cell>\n<text>\nPart III. Evaluating expressions\nIn this\
    \ section, you will implement a function that evaluates an expression and returns\
    \ its value.\n\nThe function should take an expression and a variable as input,\
    \ and return its value.\n\nThe function should raise an error if the expression\
    \ cannot be evaluated (e.g., if the expression is malformed).\n\nThe function\
    \ should handle fractions and decimals as well.\n\nThe function should handle\
    \ leading zeros as well.\n\nThe function should handle negative numbers as well.\n\
    \nThe function should handle fractions with denominator equal to zero.\n\nThe\
    \ function should handle expressions with more than two terms.\n\nThe function\
    \ should handle expressions with more than two terms.\n\nThe function should handle\
    \ expressions with more than two terms.\n\nThe function should handle expressions\
    \ with more than two terms.\n\nThe function should handle expressions with more\
    \ than two terms.\n\nThe function should handle expressions with more than two\
    \ terms.\n\nThe function should handle expressions with more than two terms.\n\
    \nThe function should handle expressions with more than two terms.\n\nThe function\
    \ should handle expressions with more than two terms.\n\nThe function should handle\
    \ expressions with more than two terms.\n\nThe function should handle expressions\
    \ with more than two terms.\n\nThe function should handle expressions with more\
    \ than two terms.\n\nThe function should handle expressions with more than two\
    \ terms.\n\nThe function should handle expressions with more than two terms.\n\
    \nThe function should handle expressions with more than two terms.\n\nThe function\
    \ should handle expressions with more than two terms.\n\nThe function should handle\
    \ expressions with more than two terms.\n\nThe function should handle expressions\
    \ with more than two terms.\n\nThe function should handle expressions with more\
    \ than two terms.\n\nThe function should handle expressions with more than two\
    \ terms.\n\nThe function should handle expressions with more than two terms.\n\
    \nThe function should handle expressions with more than two terms.\n\nThe function\
    \ should handle expressions with more than two terms.\n\nThe function should handle\
    \ expressions with more than two terms.\n\nThe function should handle expressions\
    \ with more than two terms.\n\nThe function should handle expressions with more\
    \ than two terms.\n\nThe function should handle expressions with more than two\
    \ terms.\n\nThe function should handle expressions with more than two terms.\n\
    \nThe function should handle expressions with more than two terms.\n\nThe function\
    \ should handle expressions with more than two terms.\n\nThe function should handle\
    \ expressions with more than two terms.\n\nThe function should handle expressions\
    \ with more than two terms.\n\nThe function should handle expressions with more\
    \ than two terms.\n\nThe function should handle expressions with more than two\
    \ terms.\n\nThe function should handle expressions with more than two terms.\n\
    \nThe function should handle expressions with more than two terms.\n\nThe function\
    \ should ", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  \n\
    \  # Your code here\n  \n}\n</cell>\n<cell>", "\n  x <- as.numeric(x)\n  n <-\
    \ as.numeric(n)\n  \n  if(is.na(x) || is.na(n)) {\n    return(FALSE)\n  }\n  \n\
    \  if(x %% 1 == 0 & n %% 1 == 0) {\n    return(TRUE)\n  }\n  \n  if(x %% 1 ==\
    \ 0 & n %% 1 != 0) {\n    return(FALSE)\n  }\n  \n  if(x %% 1 != 0 & n %% 1 ==\
    \ 0) {\n    return(FALSE)\n  }\n  \n  if(x %% 1 != 0 & n %% 1 != 0) {\n    return(TRUE)\n\
    \  }\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<text>\nPart III.\
    \ Evaluating expressions\nPart III is about evaluating expressions. We will use\
    \ our simplification function from Part II to evaluate expressions.\n\n\n</text>\n\
    <cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n\
    </cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<text>\nTask 3\nWrite a function\
    \ that will simplify a fraction to its lowest terms. For example, simplify('1/5',\
    \ '5/1') returns 5/1, simplify('1/6', '2/1') returns 2/1, and simplify('7/10',\
    \ '10/2') returns 7/2.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<text>\nTask 2: Implement a function that will\
    \ evaluate a polynomial expression. Your function should take two arguments, a\
    \ polynomial expression and a variable that you want to evaluate it for. Your\
    \ function should return TRUE if the polynomial expression evaluates to zero and\
    \ FALSE if it evaluates to a non-zero value.\nThe function should return TRUE\
    \ if the polynomial expression evaluates to zero and FALSE if it evaluates to\
    \ a non-zero value.\nThe function should return TRUE if the polynomial expression\
    \ evaluates to zero and FALSE if it evaluates to a non-zero value.\nThe function\
    \ should return TRUE if the polynomial expression evaluates to zero and FALSE\
    \ if it evaluates to a non-zero value.\nThe function should return TRUE if the\
    \ polynomial expression evaluates to zero and FALSE if it evaluates to a non-zero\
    \ value.\nThe function should return TRUE if the polynomial expression evaluates\
    \ to zero and FALSE if it evaluates to a non-zero value.\nThe function should\
    \ return TRUE if the polynomial expression evaluates to zero and FALSE if it evaluates\
    \ to a non-zero value.\nThe function should return TRUE if the polynomial expression\
    \ evaluates to zero and FALSE if it evaluates to a non-zero value.\nThe function\
    \ should return TRUE if the polynomial expression evaluates to zero and FALSE\
    \ if it evaluates to a non-zero value.\nThe function should return TRUE if the\
    \ polynomial expression evaluates to zero and FALSE if it evaluates to a non-zero\
    \ value.\nThe function should return TRUE if the polynomial expression evaluates\
    \ to zero and FALSE if it evaluates to a non-zero value.\nThe function should\
    \ return TRUE if the polynomial expression evaluates to zero and FALSE if it evaluates\
    \ to a non-zero value.\nThe function should return TRUE if the polynomial expression\
    \ evaluates to zero and FALSE if it evaluates to a non-zero value.\nThe function\
    \ should return TRUE if the polynomial expression evaluates to zero and FALSE\
    \ if it evaluates to a non-zero value.\nThe function should return TRUE if the\
    \ polynomial expression evaluates to zero and FALSE if it evaluates to a non-zero\
    \ value.\nThe function should return TRUE if the polynomial expression evaluates\
    \ to zero and FALSE if it evaluates to a non-zero value.\nThe function should\
    \ return TRUE if the polynomial expression evaluates to zero and FALSE if it evaluates\
    \ to a non-zero value.\nThe function should return TRUE if the polynomial expression\
    \ evaluates to zero and FALSE if it evaluates to a non-zero value.\nThe function\
    \ should return TRUE if the polynomial expression evaluates to zero and FALSE\
    \ if it evaluates to a non-zero value.\nThe function should return TRUE if the\
    \ polynomial expression evaluates to zero and FALSE if it evaluates to a non-zero\
    \ value.\nThe function should return TRUE if the polynomial ", "\n  # Your code\
    \ here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n\
    }\n</cell>\n<text>\nPart III. Evaluating Expressions\nIn this section, you will\
    \ implement a function that evaluates mathematical expressions. You will start\
    \ by writing a function that evaluates a single expression. Then, you will write\
    \ a function that evaluates multiple expressions.\n\nTo evaluate an expression,\
    \ you will first break the expression into its component parts. Then, you will\
    \ combine the parts to form an expression that you can evaluate. Finally, you\
    \ will evaluate that expression.\n\nFor example, you can break down expressions\
    \ like (5 + 3) * (6 - 4) into its individual components and then combine them\
    \ into (5 + 3) * 6 - 4.\n\nThe next cell contains some test cases for your function.\n\
    \nRun the following cell to test your function.\n\n\n</text>\n<cell>", "\n  \n\
    \  # Your code here\n  \n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nThe function below takes a string as input and returns the number of characters\
    \ in the string. \nThe string can contain only lowercase letters, uppercase letters,\
    \ numbers, and special characters. \nThe function should ignore spaces.\nThe function\
    \ should ignore leading and trailing spaces.\nThe function should ignore spaces\
    \ inside parentheses.\nThe function should ignore spaces inside square brackets.\n\
    The function should ignore spaces inside curly brackets.\nThe function should\
    \ ignore spaces inside square brackets.\nThe function should ignore spaces inside\
    \ curly brackets.\nThe function should ignore spaces inside parentheses.\nThe\
    \ function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.\nThe function should ignore spaces inside parentheses.\n\
    The function should ignore spaces inside parentheses.\nThe function should ignore\
    \ spaces inside parentheses.", "\n  # Your code here\n}\n</cell>\n<text>\nExercise\
    \ 2\nImplement a function that will simplify the expression\nx + y. The function\
    \ returns TRUE if x + y evaluates to a whole number and FALSE\notherwise. Both\
    \ x and y, are string representation of a fraction, and have the following format,\n\
    <numerator>/<denominator> where both numerator and denominator are positive whole\
    \ numbers.\nYou can assume that x, and y are valid fractions, and do not have\
    \ zero as denominator.\n>>> simplify('1/5', '5/1')\nTRUE\n>>> simplify('1/6',\
    \ '2/1')\nFALSE\n>>> simplify('7/10', '10/2')\nFALSE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    }\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code\
    \ here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n \
    \ # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will simplify the expression\nx + y. The function\
    \ returns TRUE if x + y evaluates to a whole number and FALSE\notherwise. Both\
    \ x and y, are string representation of a fraction, and have the following format,\n\
    <numerator>/<denominator> where both numerator and denominator are positive whole\
    \ numbers.\nYou can assume that x and y are valid fractions, and do not have zero\
    \ as denominator.\n>>> simplify('1/5', '5/1')\nTRUE\n>>> simplify('1/6', '2/1')\n\
    FALSE\n>>> simplify('7/10', '10/2')\nFALSE\n>>> simplify('7/5', '5/2')\nTRUE\n\
    >>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n\
    }\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes a string as input\
    \ and returns a string as output. The input string contains two fractions separated\
    \ by '/' sign. The function should simplify the fraction by dividing both numerator\
    \ and denominator by their GCD, and return the simplified fraction in the output\
    \ string. For example, if the input string is \"1/5\", the function should return\
    \ \"1/3\". Note that the fractions 1/3 and 1/5 are not simplified because their\
    \ GCD is 1. Also, note that if the input string contains only one fraction, it\
    \ is returned unchanged.\n\nThe function should return FALSE if the input string\
    \ contains more than one fraction.\n\n>>> simplify('1/5', '5/1')\n'1/3'\n>>> simplify('1/6',\
    \ '2/1')\n'1/2'\n>>> simplify('7/10', '10/2')\n'7/2'\n>>> simplify('1/5', '5/1')\n\
    '1/3'\n>>> simplify('1/6', '2/1')\n'1/2'\n>>> simplify('7/10', '10/2')\n'7/2'\n\
    >>> simplify('1/5', '5/1')\n'1/3'\n>>> simplify('1/6', '2/1')\n'1/2'\n>>> simplify('7/10',\
    \ '10/2')\n'7/2'\n>>> simplify('1/5', '5/1')\n'1/3'\n>>> simplify('1/6', '2/1')\n\
    '1/2'\n>>> simplify('7/10', '10/2')\n'7/2'\n>>> simplify('1/5', '5/1')\n'1/3'\n\
    >>> simplify('1/6', '2/1')\n'1/2'\n>>> simplify('7/10', '10/2')\n'7/2'\n>>> simplify('1/5',\
    \ '5/1')\n'1/3'\n>>> simplify('1/6', '2/1')\n'1/2'\n>>> simplify('7/10', '10/2')\n\
    '7/2'\n>>> simplify('1/5', '5/1')\n'1/3'\n>>> simplify('1/6', '2/1')\n'1/2'\n\
    >>> simplify('7/10', '10/2')\n'7/2'\n>>> simplify('1/5', '5/1')\n'1/3'\n>>> simplify('1/6',\
    \ '2/1')\n'1/2'\n>>> simplify('7/10', '10/2')\n'7/2'\n>>> simplify('1/5', '5/1')\n\
    '1/3'\n>>> simplify('1/6', '2/1')\n'1/2'\n>>> simplify('7/10', '10/2')\n'7/2'\n\
    >>> simplify('1/5', '5/1')\n'1/3'\n>>> simplify('1/6', '2/1')\n'1/2'\n>>> simplify('7/10',\
    \ '10/2')\n'7/2'\n>>> simplify('1/", "\n  # Your code here\n}\n</cell>\n<text>\n\
    Test your function with the example below.\n\n\n</text>\n<cell>", "\n  # Your\
    \ code here\n}\n</cell>\n<text>\nPart III. Palindrome Numbers\nIn this section,\
    \ you will implement a function that checks whether a given number is a palindrome.\
    \ Palindromes are numbers that read the same backward as forward.\n\nA palindrome\
    \ is a number that reads the same backward as forward, for example, 121 is a palindrome\
    \ while 1234 is not (121 is not equal to 1234).\n\nThe function should return\
    \ TRUE if the number is a palindrome and FALSE if it is not.\n\nYou can assume\
    \ that x is a valid string representation of a palindrome.\n\n\n</text>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nThe function below will take in a string representing a fraction\
    \ and simplify it into its simplest form.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form by removing all factors of fractions smaller than the\
    \ numerator and larger than the denominator.\nThe function will simplify the fraction\
    \ into its simplest form ", "\n  # Your code here\n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string representation of a fraction and returns\
    \ the fraction itself.\nThe function should return TRUE if the string represents\
    \ a valid fraction and FALSE otherwise.\nThe function should return FALSE if the\
    \ string does not represent a valid fraction.\nThe function should return FALSE\
    \ if the string does not represent a valid fraction.\nThe function should return\
    \ FALSE if the string does not represent a valid fraction.\nThe function should\
    \ return FALSE if the string does not represent a valid fraction.\nThe function\
    \ should return FALSE if the string does not represent a valid fraction.\nThe\
    \ function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent a valid fraction.\n\
    The function should return FALSE if the string does not represent ", "\n  \n \
    \ # Your code here\n  \n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ simplify a fraction into its lowest terms. For example,\nsimplify('1/5', '5/1')\
    \ returns 1/5 and simplify('1/6', '2/1') returns 2/1.\n\n\n</text>\n<cell>", "\n\
    \  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n\
    </cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n<text>\nTask 3\n\
    Write a function that will simplify the expression x^n. The function returns TRUE\
    \ if x^n evaluates to a whole number and FALSE otherwise. Both x and n, are string\
    \ representation of a fraction, and have the following format, <numerator>/<denominator>\
    \ where both numerator and denominator are positive whole numbers.\nYou can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n>>>\
    \ simplify('1/5', '5/1')\nTRUE\n>>> simplify('1/6', '2/1')\nFALSE\n>>> simplify('7/10',\
    \ '10/2')\nFALSE\n>>> simplify('7/2', '2/1')\nTRUE\n>>> simplify('7/2', '2/2')\n\
    FALSE\n>>> simplify('7/2', '2/3')\nTRUE\n>>> simplify('7/2', '2/4')\nFALSE\n>>>\
    \ simplify('7/2', '2/5')\nTRUE\n>>> simplify('7/2', '2/6')\nFALSE\n>>> simplify('7/2',\
    \ '2/7')\nTRUE\n>>> simplify('7/2', '2/8')\nFALSE\n>>> simplify('7/2', '2/9')\n\
    TRUE\n>>> simplify('7/2', '2/10')\nFALSE\n>>> simplify('7/2', '2/11')\nTRUE\n\
    >>> simplify('7/2', '2/12')\nFALSE\n>>> simplify('7/2', '2/13')\nTRUE\n>>> simplify('7/2',\
    \ '2/14')\nFALSE\n>>> simplify('7/2', '2/15')\nTRUE\n>>> simplify('7/2', '2/16')\n\
    FALSE\n>>> simplify('7/2', '2/17')\nTRUE\n>>> simplify('7/2', '2/18')\nFALSE\n\
    >>> simplify('7/2', '2/19')\nTRUE\n>>> simplify('7/2', '2/20')\nFALSE\n>>> simplify('7/2',\
    \ '2/21')\nTRUE\n>>> simplify('7/2', '2/22')\nFALSE\n>>> simplify('7/2', '2/23')\n\
    TRUE\n>>> simplify('7/2', '2/24')\nFALSE\n>>> simplify('7/2', '2/25')\nTRUE\n\
    >>> simplify('7/2', '2/26')\nFALSE\n>>> simplify('7/2', '2/27')\nTRUE\n>>> simplify('7/2',\
    \ '2/28')\nFALSE\n>>> simplify('7/2', '2/29')\nTRUE\n>>> simplify('7/2', '2/30')\n\
    FALSE\n>>> simplify('7/2', '2/31')\nTRUE\n>>> simplify('7/2', '2/32')\nFALSE\n\
    >>> simplify('7/2', '2/33')\nTRUE\n>>> simplify('7/2', '2/34')\nFALSE\n>>> simplify('7/2',\
    \ '2/35')\nTRUE\n>>> simplify('", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<text>\nTask 3: Implement a function that will\
    \ evaluate a mathematical expression and return the result as a string.\nThe function\
    \ should take two arguments: an expression and a variable name. The function should\
    \ evaluate the expression and return the result as a string. For example, if the\
    \ expression is 'x + y', the function should return 'x + y'. Note that x and y\
    \ are strings, and do not have zero as denominator. You may assume that all variables\
    \ are valid fractions, and do not have zero as denominator. You may assume that\
    \ all variables are positive whole numbers.\n\n\n</text>\n<cell>", "\n  # Your\
    \ code here\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  #\
    \ Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Implement a function that will simplify a fraction into its lowest terms. For\
    \ example,\nsimplify('1/3', '1/2') returns '1/2'.\n\n\n</text>\n<cell>", "\n \
    \ # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n", "\n  \n  # Your code goes here\n  \n}\n", "\n  # Your\
    \ code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n</cell>\n<text>\nTask 3: Implement a function\
    \ that will evaluate a mathematical expression given in string format. Your function\
    \ should return TRUE if the expression evaluates to a whole number and FALSE otherwise.\
    \ Both x and n, are string representation of a mathematical expression, and have\
    \ the following format, <numerator>/<denominator> where both numerator and denominator\
    \ are positive whole numbers.", "\n  # Your code here\n}\n</cell>\n<cell>", "\n\
    \  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n  #\
    \ Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n</cell>\n\
    <cell>", "\n  return(TRUE)\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\n\
    Task 2: Implement a function that will simplify a fraction into its lowest terms.\n\
    The function should return a list of simplified fractions, where each element\
    \ of the list is a string representation of a fraction,\n<numerator>/<denominator>\
    \ where both numerator and denominator are positive whole numbers. You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n>>>\
    \ simplify('1/5', '5/1')\n['1/1', '1/2']\n>>> simplify('1/6', '2/1')\n['1/2',\
    \ '2/1']\n>>> simplify('7/10', '10/2')\n['7/2', '7/5']\n>>> simplify('1/2', '1/2')\n\
    ['1/2']\n>>> simplify('1/2', '1/3')\n['1/3']\n>>> simplify('1/2', '1/4')\n['1/4']\n\
    >>> simplify('1/2', '1/5')\n['1/5']\n>>> simplify('1/2', '1/6')\n['1/6']\n>>>\
    \ simplify('1/2', '1/7')\n['1/7']\n>>> simplify('1/2', '1/8')\n['1/8']\n>>> simplify('1/2',\
    \ '1/9')\n['1/9']\n>>> simplify('1/2', '1/10')\n['1/10']\n>>> simplify('1/2',\
    \ '1/11')\n['1/11']\n>>> simplify('1/2', '1/12')\n['1/12']\n>>> simplify('1/2',\
    \ '1/13')\n['1/13']\n>>> simplify('1/2', '1/14')\n['1/14']\n>>> simplify('1/2',\
    \ '1/15')\n['1/15']\n>>> simplify('1/2', '1/16')\n['1/16']\n>>> simplify('1/2',\
    \ '1/17')\n['1/17']\n>>> simplify('1/2', '1/18')\n['1/18']\n>>> simplify('1/2',\
    \ '1/19')\n['1/19']\n>>> simplify('1/2', '1/20')\n['1/20']\n>>> simplify('1/2',\
    \ '1/21')\n['1/21']\n>>> simplify('1/2', '1/22')\n['1/22']\n>>> simplify('1/2',\
    \ '1/23')\n['1/23']\n>>> simplify('1/2', '1/24')\n['1/24']\n>>> simplify('1/2',\
    \ '1/25')\n['1/25']\n>>> simplify('1/2', '1/26')\n['1/26']\n>>> simplify('1/2',\
    \ '1/27')\n['1/27']\n>>> simplify('1/2', '1/28')\n['1/28']\n>>> simplify('1/2',\
    \ '1/29", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n\
    }\n</cell>\n<text>\nTask 2: Implement a function that will evaluate a mathematical\
    \ expression given in string format. The function should return TRUE if expression\
    \ evaluates to a whole number, and FALSE otherwise. Both expression and n are\
    \ string representations of mathematical expressions, and have the following format,\
    \ <expression>/<n>. For example, expression = '1/5' and n = '5/1' evaluate to\
    \ TRUE, while expression = '7/10' and n = '10/2' evaluate to FALSE.\n\n\n</text>\n\
    <cell>", "\n  # Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will convert a fraction to its decimal representation. For example, converting\
    \ the fraction 3/4 should return \"0.333\".\n\nThe function should return NULL\
    \ if the fraction cannot be converted to a decimal representation. For example,\
    \ converting the fraction 1/0 should return NULL.\n\nThe function should return\
    \ NA if the fraction cannot be converted to a decimal representation. For example,\
    \ converting the fraction 1/3 should return NA.\n\nThe function should return\
    \ an error message if the fraction cannot be converted to a decimal representation.\
    \ For example, converting the fraction 1/0 should return \"fraction cannot be\
    \ converted to a decimal representation\".\n\nThe function should return an error\
    \ message if the fraction cannot be converted to a decimal representation. For\
    \ example, converting the fraction 1/3 should return \"fraction cannot be converted\
    \ to a decimal representation\".\n\nThe function should return an error message\
    \ if the fraction cannot be converted to a decimal representation. For example,\
    \ converting the fraction 1/3 should return \"fraction cannot be converted to\
    \ a decimal representation\".\n\nThe function should return an error message if\
    \ the fraction cannot be converted to a decimal representation. For example, converting\
    \ the fraction 1/3 should return \"fraction cannot be converted to a decimal representation\"\
    .\n\nThe function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the fraction cannot be converted\
    \ to a decimal representation. For example, converting the fraction 1/3 should\
    \ return \"fraction cannot be converted to a decimal representation\".\n\nThe\
    \ function should return an error message if the ", "\n  # Your code here\n}\n\
    </cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code\
    \ here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<text>\nTest your\
    \ function by running the cell below.\n\n\n</text>\n<cell>", "\n  # Your code\
    \ here\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n\
    <text>\nTask 2\nImplement a function that will simplify a fraction to lowest terms.\
    \ For example, simplify('1/5', '5/1') returns 5/1, simplify('1/6', '2/1') returns\
    \ 2/1, and simplify('7/10', '10/2') returns 7/2.\n\n\n</text>\n<cell>", "\n  #\
    \ Your code here\n}\n</cell>\n<text>\nExercise 2\nWrite a function that will simplify\
    \ the expression x + y * z. The function should return TRUE if x + y * z evaluates\
    \ to a whole number and FALSE otherwise. x, y, and z are string representation\
    \ of a fraction, and have the following format, <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers. You can assume that\
    \ x, y, and z are valid fractions, and do not have zero as denominator. For example,\
    \ simplify('1/5', '5/1') should return TRUE.\n\n\n</text>\n<cell>", "\n  # Your\
    \ code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that will take two fractions as input and return the greatest common\
    \ divisor of them. Both fractions are represented as strings, and have the following\
    \ format, <numerator>/<denominator> where both numerator and denominator are positive\
    \ whole numbers.\nYou can assume that both fractions x and y have valid fractions,\
    \ and do not have zero as denominator.\n>>> greatest_common_divisor('1/5', '5/1')\n\
    5\n>>> greatest_common_divisor('1/6', '2/1')\n2\n>>> greatest_common_divisor('7/10',\
    \ '10/2')\n10\n>>> greatest_common_divisor('7/10', '10/3')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/0')\n7\n>>> greatest_common_divisor('7/10', '10/-1')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-2')\n7\n>>> greatest_common_divisor('7/10', '10/-3')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-4')\n7\n>>> greatest_common_divisor('7/10', '10/-5')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-6')\n7\n>>> greatest_common_divisor('7/10', '10/-7')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-8')\n7\n>>> greatest_common_divisor('7/10', '10/-9')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-10')\n7\n>>> greatest_common_divisor('7/10', '10/-11')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-12')\n7\n>>> greatest_common_divisor('7/10', '10/-13')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-14')\n7\n>>> greatest_common_divisor('7/10', '10/-15')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-16')\n7\n>>> greatest_common_divisor('7/10', '10/-17')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-18')\n7\n>>> greatest_common_divisor('7/10', '10/-19')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-20')\n7\n>>> greatest_common_divisor('7/10', '10/-21')\n7\n>>> greatest_common_divisor('7/10',\
    \ '10/-22')\n7\n>>> ", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  return(TRUE)\n\
    }\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nThe function is_prime takes as input a positive integer $n$\
    \ and returns TRUE if the input is a prime number and FALSE otherwise. Your function\
    \ should return TRUE if the input is a prime number or if the input is a number\
    \ that evenly divides $n$ (i.e. $n$ is evenly divisible by all integers up to\
    \ and including $n$). Your function should return FALSE otherwise. Your function\
    \ should return TRUE if the input is a prime number or if the input is a number\
    \ that evenly divides $n$ (i.e. $n$ is evenly divisible by all integers up to\
    \ and including $n$).\n\nYour function should return TRUE if the input is a prime\
    \ number or if the input is a number that evenly divides $n$ (i.e. $n$ is evenly\
    \ divisible by all integers up to and including $n$).\n\nYour function should\
    \ return FALSE otherwise.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n\
    </cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  x <- as.numeric(x)\n\
    \  n <- as.numeric(n)\n  \n  # Your code here\n  \n}\n</cell>\n<cell>", "\n  #\
    \ Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your\
    \ code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your code\
    \ here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n\
    }\n", "\n  # Your code here\n}\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string. For\
    \ example,\n'abc' has 3 characters. Write a function that takes a string and returns\
    \ the number of characters in the string\nthat are not letters. For example, 'abc'\
    \ has 3 characters, but 'abb' has only 2 characters. Write a function that takes\
    \ a string and returns the number of characters in the string\nthat are not letters\
    \ and digits. For example, 'abc' has 3 characters, but 'abb' has only 2 characters\
    \ and 'ab2c' has only 1 character. Write a function that takes a string and returns\
    \ the number of characters in the string\nthat are not letters and digits and\
    \ digits. For example, 'abc' has 3 characters, but 'abb' has only 2 characters\
    \ and 'ab2c' has only 1 character. Write a function that takes a string and returns\
    \ the number of characters in the string\nthat are not letters and digits and\
    \ digits. For example, 'abc' has 3 characters, but 'abb' has only 2 characters\
    \ and 'ab2c' has only 1 character.\n\n\n</text>\n<cell>", "\n  # Your code here\n\
    }\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code\
    \ here\n}\n</cell>\n<text>\nPart III: Part II\nNow that you have implemented the\
    \ simplify function, you can test it against some examples to see if it works\
    \ as expected.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n<text>\n\
    Task 2\nWrite a function that will simplify the expression x^n. Your function\
    \ should return TRUE if x is simplified and FALSE otherwise. Both x and n, are\
    \ string representation of a fraction, and have the following format, <numerator>/<denominator>\
    \ where both numerator and denominator are positive whole numbers.\nYou can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n>>>\
    \ simplify('1/5', '5/1')\nTRUE\n>>> simplify('1/6', '2/1')\nFALSE\n>>> simplify('7/10',\
    \ '10/2')\nFALSE\n>>> simplify('1/2', '1/2')\nTRUE\n>>> simplify('1/2', '1/3')\n\
    FALSE\n>>> simplify('1/2', '1/4')\nFALSE\n>>> simplify('1/2', '1/5')\nFALSE\n\
    >>> simplify('1/2', '1/6')\nFALSE\n>>> simplify('1/2', '1/7')\nFALSE\n>>> simplify('1/2',\
    \ '1/8')\nFALSE\n>>> simplify('1/2', '1/9')\nFALSE\n>>> simplify('1/2', '1/10')\n\
    FALSE\n>>> simplify('1/2', '1/11')\nFALSE\n>>> simplify('1/2', '1/12')\nFALSE\n\
    >>> simplify('1/2', '1/13')\nFALSE\n>>> simplify('1/2', '1/14')\nFALSE\n>>> simplify('1/2',\
    \ '1/15')\nFALSE\n>>> simplify('1/2', '1/16')\nFALSE\n>>> simplify('1/2', '1/17')\n\
    FALSE\n>>> simplify('1/2', '1/18')\nFALSE\n>>> simplify('1/2', '1/19')\nFALSE\n\
    >>> simplify('1/2', '1/20')\nFALSE\n>>> simplify('1/2', '1/21')\nFALSE\n>>> simplify('1/2',\
    \ '1/22')\nFALSE\n>>> simplify('1/2', '1/23')\nFALSE\n>>> simplify('1/2', '1/24')\n\
    FALSE\n>>> simplify('1/2', '1/25')\nFALSE\n>>> simplify('1/2', '1/26')\nFALSE\n\
    >>> simplify('1/2', '1/27')\nFALSE\n>>> simplify('1/2', '1/28')\nFALSE\n>>> simplify('1/2',\
    \ '1/29')\nFALSE\n>>> simplify('1/2', '1/30')\nFALSE\n>>> simplify('1/2', '1/31')\n\
    FALSE\n>>> simplify('1/2', '1/32')\nFALSE\n>>> simplify('1/2', '1/33')\nFALSE\n\
    >>> simplify('1/2', '1/34')\nFALSE\n>>> simplify('1/2', '1/35')\nFALSE\n>>> simplify('1/2',\
    \ '1/36')\nFALSE\n>>> simplify('1/2', '1/", "\n  # Your code here\n}\n</cell>\n\
    <text>\nPart III. Evaluating Expressions\nIn this section, you will implement\
    \ a function that evaluates mathematical expressions. You will start by writing\
    \ a function that evaluates a single expression. Next, you will write a function\
    \ that evaluates a mathematical expression. Finally, you will write a function\
    \ that evaluates mathematical expressions.\n\nYou will start by writing a function\
    \ that evaluates a single expression. Then, you will write a function that evaluates\
    \ a mathematical expression. Finally, you will write a function that evaluates\
    \ mathematical expressions.\n\nPart II. Single Expression\nYou will start by writing\
    \ a function that evaluates a single expression. Then, you will write a function\
    \ that evaluates a mathematical expression. Finally, you will write a function\
    \ that evaluates mathematical expressions.\n\nThe function should take in a single\
    \ expression and return a single value.\n\nThe function should return TRUE if\
    \ the expression is valid and FALSE if it is not.\n\nThe function should return\
    \ TRUE if the expression is valid and FALSE if it is not.\n\nThe function should\
    \ return TRUE if the expression is valid and FALSE if it is not.\n\nThe function\
    \ should return TRUE if the expression is valid and FALSE if it is not.\n\nThe\
    \ function should return TRUE if the expression is valid and FALSE if it is not.\n\
    \nThe function should return TRUE if the expression is valid and FALSE if it is\
    \ not.\n\nThe function should return TRUE if the expression is valid and FALSE\
    \ if it is not.\n\nThe function should return TRUE if the expression is valid\
    \ and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE if the expression\
    \ is valid and FALSE if it is not.\n\nThe function should return TRUE ", "\n \
    \ # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your\
    \ code here\n}\n</cell>\n<text>\nProblem 3\nThe function is_prime takes as input\
    \ a positive integer $n$ and returns TRUE if the number is prime and FALSE if\
    \ not.\nThe function should return TRUE if the number is prime and FALSE if not.\n\
    The function should return TRUE if the number is prime and FALSE if not.\nThe\
    \ function should return TRUE if the number is prime and FALSE if not.\nThe function\
    \ should return TRUE if the number is prime and FALSE if not.\nThe function should\
    \ return TRUE if the number is prime and FALSE if not.\nThe function should return\
    \ TRUE if the number is prime and FALSE if not.\nThe function should return TRUE\
    \ if the number is prime and FALSE if not.\nThe function should return TRUE if\
    \ the number is prime and FALSE if not.\nThe function should return TRUE if the\
    \ number is prime and FALSE if not.\nThe function should return TRUE if the number\
    \ is prime and FALSE if not.\nThe function should return TRUE if the number is\
    \ prime and FALSE if not.\nThe function should return TRUE if the number is prime\
    \ and FALSE if not.\nThe function should return TRUE if the number is prime and\
    \ FALSE if not.\nThe function should return TRUE if the number is prime and FALSE\
    \ if not.\nThe function should return TRUE if the number is prime and FALSE if\
    \ not.\nThe function should return TRUE if the number is prime and FALSE if not.\n\
    The function should return TRUE if the number is prime and FALSE if not.\nThe\
    \ function should return TRUE if the number is prime and FALSE if not.\nThe function\
    \ should return TRUE if the number is prime and FALSE if not.\nThe function should\
    \ return TRUE if the number is prime and FALSE if not.\nThe function should return\
    \ TRUE if the number is prime and FALSE if not.\nThe function should return TRUE\
    \ if the number is prime and FALSE if not.\nThe function should return TRUE if\
    \ the number is prime and FALSE if not.\nThe function should return TRUE if the\
    \ number is prime and FALSE if not.\nThe function should return TRUE if the number\
    \ is prime and FALSE if not.\nThe function should return TRUE if the number is\
    \ prime and FALSE if not.\nThe function should return TRUE if the number is prime\
    \ and FALSE if not.\nThe function should return TRUE if the number is prime and\
    \ FALSE if not.\nThe function should return TRUE if the number is prime and FALSE\
    \ if not.\nThe function should return TRUE if the number is prime and FALSE if\
    \ not.\nThe function should return TRUE if the number is prime and FALSE if not.\n\
    The function should return ", "\n  # Your code here\n}\n</cell>\n<text>\nTask\
    \ 3\nImplement a function that will simplify a fraction into its lowest terms.\
    \ For example,\nsimplify('1/5', '5/1') returns 5/1, simplify('1/6', '2/1') returns\
    \ 2/1, and\nsimplify('7/10', '10/2') returns 2/1.\n\n\n</text>\n<cell>", "\n \
    \ # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that will simplify the expression\n(x + y) * (x + y)\nThe\
    \ function should return TRUE if both expressions are simplified and FALSE if\
    \ one of them is not.\nBoth expressions are string representations of fractions,\
    \ and have the following format,\n<numerator>/<denominator> where both numerator\
    \ and denominator are positive whole numbers.\nYou can assume that x and y are\
    \ valid fractions, and do not have zero as denominator.\n>>> simplify('1/5', '5/1')\n\
    TRUE\n>>> simplify('1/6', '2/1')\nFALSE\n>>> simplify('7/10', '10/2')\nFALSE\n\
    >>> simplify('7/10', '5/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10',\
    \ '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\n\
    TRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>>\
    \ simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10',\
    \ '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\n\
    TRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>>\
    \ simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10',\
    \ '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\n\
    TRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>>\
    \ simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10',\
    \ '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\n\
    TRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>>\
    \ simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10',\
    \ '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '1/2')\n\
    TRUE\n>>> simplify('7/10', '1/2')\nTRUE\n>>> simplify('7/10', '", "\n  # Your\
    \ code here\n}\n</cell>\n<text>\nExercise 2\nWrite a function that will simplify\
    \ a fraction into its lowest terms. For example,\nsimplify('1/5', '5/1') returns\
    \ 5/1, simplify('1/6', '2/1') returns 2/1, and simplify('7/10', '10/2') returns\
    \ 7/2.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n\
    \  # Your code here\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    }\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n",
  "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n", "\n  # Your\
    \ code here\n}\n", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n", "\n\
    \  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  #\
    \ Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your\
    \ code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nTask 2\nImplement\
    \ a function that will simplify the expression x * n to TRUE if x is a whole number\
    \ and FALSE if x is not a whole number.\n\n\n</text>\n<cell>", "\n  # Your code\
    \ here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n\
    }\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will simplify a fraction into its lowest terms.\
    \ For example,\nsimplify('1/5', '5/1') returns '1/2'.\n\nThe function should return\
    \ TRUE if fraction can be simplified and FALSE if it cannot.\nThe function should\
    \ only simplify fractions that have at least one whole number as numerator and\
    \ denominator. For example,\nsimplify('1/5', '2/1') returns FALSE.\n\nThe function\
    \ should return TRUE if fraction can be simplified and FALSE if it cannot.\nThe\
    \ function should only simplify fractions that have at least one whole number\
    \ as numerator and denominator. For example,\nsimplify('1/5', '2/1') returns FALSE.\n\
    \nThe function should return TRUE if fraction can be simplified and FALSE if it\
    \ cannot.\nThe function should only simplify fractions that have at least one\
    \ whole number as numerator and denominator. For example,\nsimplify('1/5', '2/1')\
    \ returns FALSE.\n\nThe function should return TRUE if fraction can be simplified\
    \ and FALSE if it cannot.\nThe function should only simplify fractions that have\
    \ at least one whole number as numerator and denominator. For example,\nsimplify('1/5',\
    \ '2/1') returns FALSE.\n\nThe function should return TRUE if fraction can be\
    \ simplified and FALSE if it cannot.\nThe function should only simplify fractions\
    \ that have at least one whole number as numerator and denominator. For example,\n\
    simplify('1/5', '2/1') returns FALSE.\n\nThe function should return TRUE if fraction\
    \ can be simplified and FALSE if it cannot.\nThe function should only simplify\
    \ fractions that have at least one whole number as numerator and denominator.\
    \ For example,\nsimplify('1/5', '2/1') returns FALSE.\n\nThe function should return\
    \ TRUE if fraction can be simplified and FALSE if it cannot.\nThe function should\
    \ only simplify fractions that have at least one whole number as numerator and\
    \ denominator. For example,\nsimplify('1/5', '2/1') returns FALSE.\n\nThe function\
    \ should return TRUE if fraction can be simplified and FALSE if it cannot.\nThe\
    \ function should only simplify fractions that have at least one whole number\
    \ as numerator and denominator. For example,\nsimplify('1/5', '2/1') returns FALSE.\n\
    \nThe function should return TRUE if fraction can be simplified and FALSE if it\
    \ cannot.\nThe function should only simplify fractions that have at least one\
    \ whole number as numerator and denominator. For example,\nsimplify('1/5', '2/1')\
    \ returns FALSE.\n\nThe function should return TRUE if fraction can be simplified\
    \ and FALSE", "\n  # Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function\
    \ below takes a string as input and returns the number of characters in the string.\
    \ \nThe function should ignore all non-numeric characters and return the number\
    \ of characters in the string.\nThe function should ignore all spaces and tabs.\n\
    The function should ignore all leading and trailing spaces and tabs.\nThe function\
    \ should ignore all leading and trailing spaces and tabs.\nThe function should\
    \ ignore all spaces and tabs.\nThe function should ignore all leading and trailing\
    \ spaces and tabs.\nThe function should ignore all leading and trailing spaces\
    \ and tabs.\nThe function should ignore all spaces and tabs.\nThe function should\
    \ ignore all leading and trailing spaces and tabs.\nThe function should ignore\
    \ all leading and trailing spaces and tabs.\nThe function should ignore all spaces\
    \ and tabs.\nThe function should ignore all leading and trailing spaces and tabs.\n\
    The function should ignore all leading and trailing spaces and tabs.\nThe function\
    \ should ignore all spaces and tabs.\nThe function should ignore all leading and\
    \ trailing spaces and tabs.\nThe function should ignore all leading and trailing\
    \ spaces and tabs.\nThe function should ignore all spaces and tabs.\nThe function\
    \ should ignore all leading and trailing spaces and tabs.\nThe function should\
    \ ignore all leading and trailing spaces and tabs.\nThe function should ignore\
    \ all spaces and tabs.\nThe function should ignore all leading and trailing spaces\
    \ and tabs.\nThe function should ignore all leading and trailing spaces and tabs.\n\
    The function should ignore all spaces and tabs.\nThe function should ignore all\
    \ leading and trailing spaces and tabs.\nThe function should ignore all leading\
    \ and trailing spaces and tabs.\nThe function should ignore all spaces and tabs.\n\
    The function should ignore all leading and trailing spaces and tabs.\nThe function\
    \ should ignore all leading and trailing spaces and tabs.\nThe function should\
    \ ignore all spaces and tabs.\nThe function should ignore all leading and trailing\
    \ spaces and tabs.\nThe function should ignore all leading and trailing spaces\
    \ and tabs.\nThe function should ignore all spaces and tabs.\nThe function should\
    \ ignore all leading and trailing spaces and tabs.\nThe function should ignore\
    \ all leading and trailing spaces and tabs.\nThe function should ignore all spaces\
    \ and tabs.\nThe function should ignore all leading and trailing spaces and tabs.\n\
    The function should ignore all leading and trailing spaces and tabs.\nThe function\
    \ should ignore all spaces and tabs.\nThe function should ignore all leading and\
    \ trailing spaces and tabs.\nThe function should ignore all leading and trailing\
    \ spaces and tab", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code\
    \ here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nTask 3\nImplement a function\
    \ that will simplify a fraction into its lowest terms. For example, simplify('1/5',\
    \ '5/1') returns '1/5'.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n", "\n\
    \  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <text>\nTask 3: Implement a function that will simplify a fraction to its lowest\
    \ terms. For example,\nsimplify('1/5', '5/1') returns 5/1, simplify('1/6', '2/1')\
    \ returns 2/1.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<text>\nPart 2: Implement the function is_whole_number()\n\
    The function is_whole_number() should take two strings as inputs and return TRUE\
    \ if both strings represent whole numbers, and FALSE otherwise.\n\nThe function\
    \ is_whole_number() should return TRUE if both strings represent whole numbers,\
    \ and FALSE otherwise.\n\nFor example, both of the following strings are whole\
    \ numbers:\n\n'1'\n'1/2'\n'1/3'\n'1/4'\n'1/5'\n'1/6'\n'1/7'\n'1/8'\n'1/9'\n'1/10'\n\
    '1/11'\n'1/12'\n'1/13'\n'1/14'\n'1/15'\n'1/16'\n'1/17'\n'1/18'\n'1/19'\n'1/20'\n\
    '1/21'\n'1/22'\n'1/23'\n'1/24'\n'1/25'\n'1/26'\n'1/27'\n'1/28'\n'1/29'\n'1/30'\n\
    '1/31'\n'1/32'\n'1/33'\n'1/34'\n'1/35'\n'1/36'\n'1/37'\n'1/38'\n'1/39'\n'1/40'\n\
    '1/41'\n'1/42'\n'1/43'\n'1/44'\n'1/45'\n'1/46'\n'1/47'\n'1/48'\n'1/49'\n'1/50'\n\
    '1/51'\n'1/52'\n'1/53'\n'1/54'\n'1/55'\n'1/56'\n'1/57'\n'1/58'\n'1/59'\n'1/60'\n\
    '1/61'\n'1/62'\n'1/63'\n'1/64'\n'1/65'\n'1/66'\n'1/67'\n'1/68'\n'1/69'\n'1/70'\n\
    '1/71'\n'1/72'\n'1/73'\n'1/74'\n'1/75'\n'1/76'\n'1/77'\n'1/78'\n'1/79'\n'1/80'\n\
    '1/81'\n'1/82'\n'1/83'\n'1/84'\n'1/85'\n'1/86", "\n  # Your code here\n}\n", "\n\
    \  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <cell>", "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<text>\nExercise 3\nThe function below takes\
    \ a string representing a fraction and returns the fraction simplified to lowest\
    \ terms. For example, simplify('1/5', '5/1') returns 5/1, simplify('7/10', '10/2')\
    \ returns 7/2.\n\n\n</text>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n</cell>\n<cell>", "\n  \n  # Your code here\n  \n}\n",
  "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nPart III:\
    \ Problem Solving\nNow that you have implemented the simplification function,\
    \ you can start solving your problems. We will use your simplification function\
    \ and implement a function that will help you solve the problems. You will need\
    \ to implement the following functions:\n\nget_fraction: Given a fraction string\
    \ x, return its numerator and denominator.\nis_valid_fraction: Given a fraction\
    \ string x, return TRUE if x is a valid fraction and FALSE otherwise.\nsimplify:\
    \ The simplification function you implemented above.\nsolve: The function you\
    \ implemented above.\n\nThe function get_fraction should return a tuple (numerator,\
    \ denominator) where numerator and denominator are positive whole numbers. For\
    \ example, get_fraction('1/3') should return (1, 3). get_fraction should raise\
    \ a ValueError exception if it receives a string that does not contain a valid\
    \ fraction.\n\nThe function is_valid_fraction should return TRUE if the given\
    \ fraction string is a valid fraction and FALSE otherwise. For example, get_fraction('1/3')\
    \ should return TRUE since 1/3 can be represented exactly as a fraction. get_fraction\
    \ should raise a ValueError exception if it receives a string that does not contain\
    \ a valid fraction.\n\nThe function simplify should simplify the fraction string\
    \ x to its numerator and denominator and return them as a tuple (numerator, denominator).\
    \ For example, simplify('1/3') should return (1, 3). simplify should raise a ValueError\
    \ exception if it receives a string that does not contain a valid fraction.\n\n\
    The function solve should take as input a fraction string x and an integer k and\
    \ return the fraction string y such that y = x * k. For example, solve('1/3',\
    \ 3) should return '3/3'. solve should raise a ValueError exception if it receives\
    \ a string that does not contain a valid fraction or an integer that is not positive.\n\
    \nNote that solve should return the fraction string y and not the fraction string\
    \ x * k. For example, solve('1/3', 3) should return '3/3' since 3 * 3 = 9 and\
    \ 9 is also a whole number. solve('1/3', -2) should return '-1/3' since -2 * -3\
    \ = -8 and -8 is not a whole number.\n\n\n</text>\n<cell>", "\n  # Your code here\n\
    }\n</cell>\n<text>\nPart III: Problem set II\nProblem set II will be about calculating\
    \ and plotting graphs. You will need to use the following functions:\n\nplot_graph:\
    \ to plot a graph\nplot_graphs: to plot multiple graphs\nplot_graphs_with_bands:\
    \ to plot multiple graphs with bands\nplot_graphs_with_bands_with_names: to plot\
    \ multiple graphs with bands and names\nplot_graphs_with_bands_with_names_and_titles:\
    \ to plot multiple graphs with bands and names and titles\nplot_graphs_with_bands_with_names_and_titles_and_x_and_y_labels:\
    \ to plot multiple graphs with bands, names and titles and x and y labels\nplot_graphs_with_bands_with_names_and_titles_and_x_and_y_labels_and_x_and_y_ticks:\
    \ to plot multiple graphs with bands, names and titles, x and y labels and x and\
    \ y ticks\nplot_graphs_with_bands_with_names_and_titles_and_x_and_y_labels_and_x_and_y_ticks_and_x_and_y_ticks_labels:\
    \ to plot multiple graphs with bands, names and titles, x and y labels and x and\
    \ y ticks and x and y ticks labels\nplot_graphs_with_bands_with_names_and_titles_and_x_and_y_labels_and_x_and_y_ticks_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_and_x_and_y_ticks_labels_",
  "\n  # Your code here\n}\n</cell>\n<text>\nTask 2: Implement a function that will\
    \ evaluate a polynomial expression. Your function should take as input a polynomial\
    \ expression in the form of a string and return the value of the expression. Your\
    \ function should return an error if the input expression is not a valid polynomial\
    \ expression.\n\n</text>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your code\
    \ here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n \
    \ # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>",
  "\n  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nTask 2\n\
    Implement a function that will simplify a fraction into its lowest terms. For\
    \ example,\nsimplify('1/5', '5/1') returns '1/5'. The function should return TRUE\
    \ if x is a valid fraction\nand FALSE otherwise. Both x and n, are string representation\
    \ of a fraction, and have the following format,\n<numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\nYou can assume that\
    \ x, and n are valid fractions, and do not have zero as denominator.\n\n\n</text>\n\
    <cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n\
    </cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  \n  # Your\
    \ code here\n  \n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  # Your\
    \ code here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n", "\n  # Your code\
    \ here\n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n<cell>", "\n \
    \ # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<text>\nTask 3\n\
    Implement a function that will simplify the expression x * n. The function returns\
    \ TRUE if x * n evaluates to a whole number and FALSE\notherwise. Both x and n,\
    \ are string representation of a fraction, and have the following format,\n<numerator>/<denominator>\
    \ where both numerator and denominator are positive whole numbers.\nYou can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n>>>\
    \ simplify('1/5', '5/1')\nTRUE\n>>> simplify('1/6', '2/1')\nFALSE\n>>> simplify('7/10',\
    \ '10/2')\nFALSE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>>\
    \ simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5',\
    \ '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\n\
    TRUE\n>>> simplify('7/5', '5/2')\nTRUE\n>>> simplify('7/5', '5/2')\nTRUE", "\n\
    \  # Your code here\n}\n", "\n  # Your code here\n}\n</cell>\n<cell>", "\n  \n\
    \  # Your code here\n  \n}\n</cell>\n<cell>", "\n  # Your code here\n}\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will simplify a fraction to lowest terms.\
    \ For example, simplify('1/5', '5/1') returns 5/1, simplify('1/6', '2/1') returns\
    \ 2/1, and simplify('7/10', '10/2') returns 7/2.\n\n\n</text>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
