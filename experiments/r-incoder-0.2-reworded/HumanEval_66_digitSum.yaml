name: HumanEval_66_digitSum
language: r
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum('')\n\
  # 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n\
  # 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum\
  \ <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- digitSum\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('abAB'), 131)){quit('no', 1)}\n\
  \    if(!identical(candidate('abcCd'), 67)){quit('no', 1)}\n    if(!identical(candidate('helloE'),\
  \ 69)){quit('no', 1)}\n    if(!identical(candidate('woArBld'), 131)){quit('no',\
  \ 1)}\n    if(!identical(candidate('aAaaaXa'), 153)){quit('no', 1)}\n    if(!identical(candidate('\
  \ How are yOu?'), 151)){quit('no', 1)}\n    if(!identical(candidate('You arE Very\
  \ Smart'), 327)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)\
    \ > 64))))\n}\n", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\n</cell>\n<cell>", "\n  sum <-\
    \ 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(substr(s, i, i)) +\
    \ as.integer(substr(s, i+1, i+1))\n  }\n  return(sum)\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are uppercase letters.\nExamples:\n\
    >>> upperCaseCharCount('')\n0\n>>> upperCaseCharCount('abc')\n2\n>>> upperCaseCharCount('abC')\n\
    1\n>>> upperCaseCharCount('abCd')\n1\n>>> upperCaseCharCount('abCdE')\n2\n>>>\
    \ upperCaseCharCount('abCdEf')\n3\n>>> upperCaseCharCount('abCdEfG')\n4\n>>> upperCaseCharCount('abCdEfGh')\n\
    5\n>>> upperCaseCharCount('abCdEfGhI')\n6\n>>> upperCaseCharCount('abCdEfGhIj')\n\
    7\n>>> upperCaseCharCount('abCdEfGhIjK')\n8\n>>> upperCaseCharCount('abCdEfGhIjKl')\n\
    9\n>>> upperCaseCharCount('abCdEfGhIjKlM')\n10\n>>> upperCaseCharCount('abCdEfGhIjKlMno')\n\
    11\n>>> upperCaseCharCount('abCdEfGhIjKlMnoP')\n12\n>>> upperCaseCharCount('abCdEfGhIjKlMnoPq')\n\
    13\n>>> upperCaseCharCount('abCdEfGhIjKlMnoPqR')\n14\n>>> upperCaseCharCount('abCdEfGhIjKlMnoPqRsT')\n\
    15\n>>> upperCaseCharCount('abCdEfGhIjKlMnoPqRsTv')\n16\n>>> upperCaseCharCount('abCdEfGhIjKlMnoPqRsTvY')\n\
    17\n>>> upperCaseCharCount('abCdEfGhIjK", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\n\
    digitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are upper-case. For example, the string 'aBcDeF' has 4 upper-case\
    \ characters, so the function should return 4.\n\nHINT: You can use the function\
    \ strcount from the stringr package.\n\n\n</text>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\ndigitSum('helloE')\n\
    digitSum('woArBld')\ndigitSum('aAaaaXa')\ndigitSum('abcCd')\ndigitSum('abAB')\n\
    digitSum('')\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nA solution using stringr\
    \ package:\n<code>\nlibrary(stringr)\n", "\n  s <- gsub(\"[^[:digit:]]\", \"\"\
    , s)\n  sum(as.integer(s))\n}\n</cell>\n<cell>", "\n  sum(gregexpr(\"[A-Z]\",\
    \ s)[[1]])\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)[upper.case(x)])))\n\
    }\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)>96))))\n\
    }\n", "\n  sum(unlist(strsplit(s, \"\")))\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 96))))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ '')[[1]])[upper.case(unlist(strsplit(s, '')[[1]])) == TRUE])\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(as.integer(gsub(\"[^A-Z]\", \"\", s)))\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(as.integer(gsub(\"[^[:digit:]]\", \"\", s)))\n}\ndigitSum(letters)", "\n\
    \  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][grep(\"[[:upper:]]\"\
    , s)]))\n}\ndigitSum(\"aAaaaXa\")", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n\
    }\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s, \"\"\
    )[[1]]))]))\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n\
    \  sum(as.integer(unlist(strsplit(s, \"\"))[seq(1, length(s) - 1, 2)]))\n}\n</cell>\n\
    <cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\n\
    digitSum('aAaaaXa')\n</cell>\n<text>\nExercise\nWrite a function that takes a\
    \ string as input and returns the sum of the digits in that string.\n\n\n</text>\n\
    <cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum(gregexpr(\"[A-Z]\", s)[[1]])\n}\n</cell>\n\
    <cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\n\
    digitSum('aAaaaXa')\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the lower characters only'\nASCII codes.\n\
    Examples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n131\n>>> digitSum('abcCd')\n\
    67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n131\n>>> digitSum('aAaaaXa')\n\
    153\ndigitSum <- function(s) {\n  sum(gregexpr(\"[a-z]\", s)[[1]])\n}\n</text>\n\
    <cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE]))\n}\n", "\n  sum(as.integer(gsub(\"[^[:digit:]]\", \"\
    \", s)))\n}\n</cell>\n<cell>", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n",
  "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == 1]))\n}\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are uppercase letters.\n\n\n</text>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n</cell>\n<cell>\ndigitSum(\"helloE\")\n</cell>\n<cell>\ndigitSum(\"\
    woArBld\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are uppercase letters.\n\n\n</text>\n<cell>", "\n  s <- gsub(\"\
    [[:punct:]]\", \"\", s)\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n\
    \  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) > 96))))\n\
    }\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))[upper.case(unlist(strsplit(s,\
    \ \"\")))))\n}\ndigitSum(letters)\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE]))\n}\ndigitSum(letters)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input and returns\
    \ the sum of the lower characters only'\nASCII codes.\nExamples:\n>>> digitSum('')\n\
    0\n>>> digitSum('abAB')\n131\n>>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n\
    69\n>>> digitSum('woArBld')\n131\n>>> digitSum('aAaaaXa')\n153\ndigitSum <- function(s)\
    \ {\n  sum(unlist(strsplit(s, \"\")[[1]][lower.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE]))\n}\ndigitSum(letters)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string as input and returns the sum of the lower and upper characters\
    \ only'\nASCII codes.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n\
    131\n>>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n\
    131\n>>> digitSum('aAaaaXa')\n153\ndigitSum <- function(s) {\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][lower.case(unlist(strsplit(s, \"\")[[1]])) == TRUE & upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE]))\n}\ndigitSum(letters)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string as input and returns the sum of the lower and\
    \ upper characters only'\nASCII codes.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n\
    131\n>>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n\
    131\n>>> digitSum('aAaaaXa')\n153\ndigitSum <- function(s) {\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][lower.case(unlist(strsplit(s, \"\")[[1]])) == TRUE & upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE]))\n}\ndigitSum(letters)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string as input and returns the sum of the lower and\
    \ upper characters only'\nASCII codes.\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\ndigitSum('abcCd')", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[seq(1, length(s) - 1, 2)]))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the sum of the digits in that string.\nExamples:\n>>> digitSum('abcCd')\n6\n\
    >>> digitSum('helloE')\n5\n>>> digitSum('woArBld')\n6\n>>> digitSum('aAaaaXa')\n\
    10\n>>> digitSum('123')\n3\n>>> digitSum('1234')\n4\n>>> digitSum('12345')\n5\n\
    >>> digitSum('123456')\n6\n>>> digitSum('1234567')\n7\n>>> digitSum('12345678')\n\
    8\n>>> digitSum('123456789')\n9\n>>> digitSum('1234567890')\n10\n>>> digitSum('12345678901')\n\
    11\n>>> digitSum('123456789012')\n12\n>>> digitSum('1234567890123')\n13\n>>> digitSum('12345678901234')\n\
    14\n>>> digitSum('123456789012345')\n15\n>>> digitSum('1234567890123456')\n16\n\
    >>> digitSum('12345678901234567')\n17\n>>> digitSum('123456789012345678')\n18\n\
    >>> digitSum('1234567890123456789')\n19\n>>> digitSum('12345678901234567890')\n\
    20\n>>> digitSum('123456789012345678901')\n21\n>>> digitSum('1234567890123456789012')\n\
    22\n>>> digitSum('12345678901234567890123')\n23\n>>> digitSum('123456789012345678901234')\n\
    24\n>>> digitSum('1234567890123456789012345')\n25\n>>> digitSum('12345678901234567890123456')\n\
    26\n>>> digitSum('123456789012345678901234567')\n27\n>>> digitSum('1234567890123456789012345678')\n\
    28\n>>> digitSum('12345678901234567890123456789')\n29\n>>> digitSum('123456789012345678901234567890')\n\
    30\n>>> digitSum('1234567890123456789012345678901')\n31\n>>> digitSum('12345678901234567890123456789012')\n\
    32\n>>> digitSum('123456789012345678901234567890123')\n33\n>>> digitSum('1234567890123456789012345678901234')\n\
    34\n>>> digitSum('12345678901234567890123456789012345')\n35\n>>> digit", "\n \
    \ s <- tolower(s)\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\ndigitSum(\"\"\
    )\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"\
    woArBld\")\ndigitSum(\"aAaaaXa\")\n</code>\n<|/ a tags=r,regex |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `Error in gregexpr(\"\
    [[:upper:]]\", s) : invalid regular expression '[[:upper:]]', reason 'Invalid\
    \ regexp'`\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 and it works. What version\
    \ of R are you using?\n<|/ c |>\n<| c |>\nI am using R 3.2.2. Maybe the problem\
    \ comes from my R version? I installed R 3.2.2 from source code. Maybe I should\
    \ reinstall R?\n<|/ c |>\n<| c |>\nI reinstalled R and it works. Thanks for your\
    \ help!\n<|/ c |>\n<| a dscore=0 |>\nThis should work:\n<code>\nlibrary(stringr)\n\
    str_count(s, pattern = \"[[:upper:]]\")\n</code>\n<|/ a tags=r,regex |>\n<| c\
    \ |>\nThanks for your answer. I tried your code, but I got this error `Error in\
    \ gregexpr(\"[[:upper:]]\", s) : invalid regular expression '[[:upper:]]', reason\
    \ 'Invalid regexp'`\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 and it works. What\
    \ version of R are you using?\n<|/ c |>\n<| c |>\nI am using R 3.2.2. Maybe the\
    \ problem comes from my R version? I installed R 3.2.2 from source code. Maybe\
    \ I should reinstall R?\n<|/ c |>\n<| c |>\nI reinstalled R and it works. Thanks\
    \ for your help!\n<|/ c |>\n<| a tags=r,regex |>\n<code>\nlibrary(stringr)\nstr_count(s,\
    \ pattern = \"[[:upper:]]\")\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I tried your code, but I got this error `Error in gregexpr(\"[[:upper:]]\"\
    , s) : invalid regular expression '[[:upper:]]', reason 'Invalid regexp'`\n<|/\
    \ c |>\n<| c |>", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(as.character(s))]))\n\
    }\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\
    \")[[1]])) == TRUE])\n}\n", "\n  s <- gsub(\"[^0-9]\", \"\", s)\n  sum(as.integer(s))\n\
    }\n", "\n  sum(as.integer(gsub(\"[^[:digit:]]\", \"\", s)))\n}\n", "\n  s <- gsub(\"\
    [^0-9]\", \"\", s)\n  sum(as.integer(s))\n}\n", "\n  sum <- 0\n  for(i in 1:nchar(s))\
    \ {\n    sum <- sum + as.integer(substr(s, i, i))\n  }\n  return(sum)\n}\n", "\n\
    \  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) > 96))))\n\
    }\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) >\
    \ 64))))\n}\ndigitSum('abcCd')\n</cell>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\n</cell>\n<cell>", "\n  sum <-\
    \ 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(toupper(substr(s, i,\
    \ i)))\n  }\n  return(sum)\n}\n", "\n  sum(gregexpr(\"[A-Z]\", s)[[1]])\n}\n</cell>\n\
    <cell>", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)\
    \ > 64))))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\"\
    )\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\ndigitSum(\"\
    aAaaaXaXa\")\ndigitSum(\"aAaaaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXa\")\ndigitSum(\"\
    aAaaaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXa\")\n\
    digitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaX", "\n  sum <- 0\n  for(i in 1:nchar(s)) {\n    sum\
    \ <- sum + as.integer(substr(s, i, i))\n  }\n  return(sum)\n}\n", "\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\n</cell>\n<cell>", "\n  sum <- 0\n  for(i in 1:nchar(s))\
    \ {\n    sum <- sum + as.integer(toupper(substr(s, i, i)))\n  }\n  return(sum)\n\
    }\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\
    \")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\n\
    digitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nTask\
    \ 2\nWrite a function that takes a string as input and returns the number of occurrences\
    \ of the character 'e' in the string.\n\n\n</text>\n<cell>", "\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n<cell>\n\
    digitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are upper-case.\nExamples:\n\
    >>> upperCaseCount('')\n0\n>>> upperCaseCount('abc')\n3\n>>> upperCaseCount('ABC')\n\
    3\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n\
    2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')\n2\n>>> upperCaseCount('abC')",
  "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][upper.case(letters)]))\n}\n</cell>\n<cell>", "\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  sum(as.integer(s))\n}\n</cell>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 96))))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n</cell>\n\
    <cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum <- 0\n  for (i in 1:nchar(s)) {\n   \
    \ sum <- sum + as.integer(substr(s, i, i))\n  }\n  return(sum)\n}\n</cell>\n<cell>",
  "\n  sum(as.integer(gsub(\"[^0-9]\",\"\",s)))\n}\n", "\n  sum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n}\n", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s,\
    \ '')[[1]])) == TRUE])\n}\n</cell>\n<cell>", "\n  s <- gsub(\"[^[:digit:]]\",\
    \ \"\", s)\n  sum(as.integer(s))\n}\n", "\n  sum <- 0\n  for(i in 1:nchar(s)){\n\
    \    sum <- sum + as.integer(substr(s, i, i))\n  }\n  return(sum)\n}\n", "\n \
    \ sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s,\
    \ '')[[1]])) == TRUE])\n}\n", "\n  sum(as.integer(gsub(\"[[:upper:]]\", \"\",\
    \ s)))\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"\
    helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks for your answer. Can you please explain how this works?\n<|/ c\
    \ |>\n<| c |>\nI added some explanation. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your explanation. Can you please explain how this works?\n<|/ c |>\n<| c\
    \ |>\nI added some explanation. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your explanation. Can you please explain how this works?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"abAB\", \"[[:upper:]]\")\n</code>\n\
    <|/ a tags=string,r,regex |>\n<| c |>\nThanks for your answer. Can you please\
    \ explain how this works?\n<|/ c |>\n<| c |>\nThe `str_extract_all` function extracts\
    \ all the matches of a regex pattern from a string. `[[:upper:]]` matches all\
    \ uppercase letters. `str_extract_all` returns a list of matches. `str_extract_all(\"\
    abAB\", \"[[:upper:]]\")` returns `[[1]]` containing the matches.\n<|/ c |>\n\
    <| a tags=string,r,regex |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"abAB\"\
    , \"[[:upper:]]\")\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nThe `str_extract_all`\
    \ function extracts all the matches of a regex pattern from a string. `[[:upper:]]`\
    \ matches all uppercase letters. `str_extract_all` returns a list of matches.\
    \ `str_extract_all(\"abAB\", \"[[:upper:]]\")` returns `[[1]]` containing the\
    \ matches.\n<|/ c |>\n<| a tags=string,r,regex |>\n<code>\nlibrary(stringr)\n\
    str_extract_all(\"abAB\", \"[[:upper:]]\")\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. Can you please ", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[upper.case(unlist(strsplit(s, \"\")))))\n}\ndigitSum('abcCd')\ndigitSum('helloE')\n\
    digitSum('woArBld')\ndigitSum('aAaaaXa')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\ndigitSum('abcCdE')\n\
    digitSum('abc", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n</cell>\n\
    <cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\n\
    digitSum('aAaaaXa')\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nExamples:\n\
    >>> digitSum('1234')\n6\n>>> digitSum('abc')\n6\n>>> digitSum('abc123')\n6\n>>>\
    \ digitSum('abc123abc')\n6\n>>> digitSum('abc123abc456')\n6\n>>> digitSum('abc123abc456def')\n\
    6\n>>> digitSum('abc123abc456def789')\n6\n>>> digitSum('abc123abc456def789ghi')\n\
    6\n>>> digitSum('abc123abc456def789ghi123')\n6\n>>> digitSum('abc123abc456def789ghi123abc')\n\
    6\n>>> digitSum('abc123abc456def789ghi123abc456')\n6\n>>> digitSum('abc123abc456def789ghi123abc456def')\n\
    6\n>>> digitSum('abc123abc456def789ghi123abc456def789')\n6\n>>> digitSum('abc123abc456def789ghi123abc456def789ghi')\n\
    6\n>>> digitSum('abc123abc456def789ghi123abc456def789ghi123')\n6\n>>> digitSum('abc123abc456def789ghi123abc456def789ghi123abc')\n\
    6\n>>> digitSum('abc123abc456def789ghi123abc456def789ghi123abc456')\n6\n>>> digitSum('abc123abc456def789ghi123abc456def789ghi123abc456def')\n\
    6\n>>> digitSum('abc123abc456def789ghi123abc456def789ghi123abc456def789')\n6\n\
    >>> digitSum('abc123abc456def789ghi123abc456def789ghi123abc456def789ghi')\n6\n\
    >>> digitSum('abc123abc456def789ghi123abc456def789ghi123abc456", "\n  sum(as.integer(unlist(strsplit(s,\
    \ ''))[[1]][upper.case(unlist(strsplit(s, ''))[[1]])]))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nTask 3\nWrite a function that takes a string as input and returns the\
    \ sum of the digits in that string.\nExamples:\n>>> digitSum('1234')\n4\n>>> digitSum('abc')\n\
    0\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>>\
    \ digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n\
    1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>>\
    \ digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n\
    1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>>\
    \ digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n\
    1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>>\
    \ digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n\
    1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>>\
    \ digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n\
    1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>>\
    \ digitSum('abA')\n1\n>>> digitSum('abA')\n1\n>>> digitSum", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[[1]][upper.case(unlist(strsplit(s, \"\"))[[1]])]))\n}\n</cell>\n<cell>",
  "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == 1]))\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, \"\"\
    )[[1]][upper.case(as.character(s))]))\n}\n</cell>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\n", "\n  sum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == 1]))\n}\n</cell>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE]))\n}\ndigitSum(letters)\n\
    </cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n \
    \ sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  s <- tolower(s)\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\n", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[seq(1, length(s)) %in% c(letters, LETTERS)]))\n}\n", "\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\n</cell>\n<cell>\ndigitSum(\"helloE\")\n</cell>\n<cell>\n\
    digitSum(\"woArBld\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell>\n<cell>\n\
    digitSum(\"aAaaaXaX\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaX\")\n</cell", "\n\
    \  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n</cell>\n\
    <cell>\ndigitSum('helloE')\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are uppercase letters.\nExamples:\n>>> upperCaseCount('')\n0\n>>> upperCaseCount('abAB')\n\
    2\n>>> upperCaseCount('abcCd')\n2\n>>> upperCaseCount('helloE')\n2\n>>> upperCaseCount('woArBld')\n\
    2\n>>> upperCaseCount('aAaaaXa')\n4\n>>> upperCaseCount('Xa')\n1\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('Xa')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XA')\n\
    0\n>>> upper", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>", "\n  sum(as.integer(gsub(\"[^0-9]\"\
    , \"\", s))) # sum the integers\n}\n</cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are digits.\n\n\n</text>\n<cell>",
  "\n  sum <- 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(substr(s, i,\
    \ i))\n  }\n  return(sum)\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n\
    }\n", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 96))))\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are not upper case letters.\n\nExamples:\n\
    >>> nonUpperChars('')\n0\n>>> nonUpperChars('hello')\n4\n>>> nonUpperChars('Hello')\n\
    0\n>>> nonUpperChars('HELLO')\n4\n>>> nonUpperChars('HELLO WORLD')\n5\n>>> nonUpperChars('HELLO\
    \ WORLD!')\n5\n>>> nonUpperChars('HELLO WORLD!?')\n5\n>>> nonUpperChars('HELLO\
    \ WORLD!?!')\n5\n>>> nonUpperChars('HELLO WORLD!?!?')\n5\n>>> nonUpperChars('HELLO\
    \ WORLD!?!?!')\n5\n>>> nonUpperChars('HELLO WORLD!?!?!?')\n5\n>>> nonUpperChars('HELLO\
    \ WORLD!?!?!?!')\n5\n>>> nonUpperChars('HELLO WORLD!?!?!?!?')\n5\n>>> nonUpperChars('HELLO\
    \ WORLD!?!?!?!?!')\n5\n>>> nonUpperChars('HELLO WORLD!?!?!?!?!?')\n5\n>>> nonUpperChars('HELLO\
    \ WORLD!?!?!?!?!?!')\n5\n>>> nonUpperChars('HELLO WORLD!?!?!?!?!?!?')\n5\n>>>\
    \ nonUpperChars('HELLO WORLD!?!?!?!?!?!?!')\n5\n>>> nonUpperChars('HELLO WORLD!?!?!?!?!?!?!?')\n\
    5\n>>> nonUpperChars('HELLO WORLD!?!?!?!?!?!?!?!')\n5\n>>> nonUpperChars('HELLO\
    \ WORLD!?!?!?!?!?!?!?!?')\n5\n>>> nonUpperChars('HELLO", "\n  sum <- 0\n  for(i\
    \ in 1:nchar(s)) {\n    sum <- sum + as.integer(toupper(substr(s, i, i)))\n  }\n\
    \  return(sum)\n}\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\
    \"))[seq(1, length(s) - 1, 2)]))\n}\n", "\n  sum <- 0\n  for(i in 1:nchar(s)){\n\
    \    sum <- sum + as.integer(substr(s, i, i))\n  }\n  sum\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum <- 0\n  for(i in 1:nchar(s)){\n    sum <- sum + as.integer(substr(s, i,\
    \ i))\n  }\n  return(sum)\n}\n", "\n  sum(as.integer(gsub(\"[A-Z]\", \"\", s)))\n\
    }\n", "\n  s <- gsub(\"[^[:digit:]]\", \"\", s)\n  sum(as.integer(s))\n}\n", "\n\
    \  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))[upper.case(unlist(strsplit(s,\
    \ \"\")))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\
    \ \nExamples:\n>>> characterCount('')\n0\n>>> characterCount('abAB')\n2\n>>> characterCount('abcCd')\n\
    3\n>>> characterCount('helloE')\n5\n>>> characterCount('woArBld')\n6\n>>> characterCount('aAaaaXa')\n\
    7\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n\
    1\n>>> characterCount('abA')\n1\n>>> characterCount('abA')\n1\n", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)[upper.case(x)])))\n\
    }\ndigitSum('helloE')\ndigitSum('woArBld')\ndigitSum('aAaaaXa')\ndigitSum('abcCd')\n\
    digitSum('abAB')\ndigitSum('')\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so\
    \ much for the help! I really appreciate it! I really appreciate it!\n<|/ c |>\n\
    <| a tags=r,string,regex |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string as input and returns the\
    \ sum of the digits in that string.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n\
    131\n>>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n\
    131\n>>> digitSum('aAaaaXa')\n153\n\n\n</text>\n<cell>", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s, \"\")[[1]]))]))\n\
    }\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\"))[c(TRUE, FALSE)]))\n\
    }\ndigitSum(letters)\n</cell>\n<cell>", "\n  s <- gsub(\"[^0-9]\", \"\", s)\n\
    \  sum(as.integer(s))\n}\n</cell>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 96))))\n}\n</cell>\n<cell>\ndigitSum('abAB')\n\
    </cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n\
    <cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a string as input and returns the number\
    \ of words in the string.\nThe word is defined as a sequence of consecutive letters.\n\
    The function should ignore leading and trailing whitespace.\nExamples:\n>>> wordCount('')\n\
    0\n>>> wordCount('   ')\n0\n>>> wordCount('Hello World')\n2\n>>> wordCount('Hello\
    \ World!')\n1\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World\
    \  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n\
    2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n\
    >>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>>\
    \ wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('\
    \  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello\
    \ World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World\
    \  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n\
    2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n\
    >>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>>\
    \ wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('\
    \  Hello World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('  Hello\
    \ World  ')\n2\n>>> wordCount('  Hello World  ')\n2\n>>> wordCount('", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>", "\n \
    \ sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)[upper.case(x)])))\n\
    }\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))[which(grepl(\"[A-Z]\", s))]))\n\
    }\n</cell>\n<cell>\ndigitSum(\"helloE\")\n</cell>\n<cell>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][upper.case(unlist(strsplit(s, \"\")[[1]])) == 1]))\n}\n", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[which(grepl(\"^[A-Z]\", s))]))\n}\n", "\n  sum(unlist(strsplit(s, \"\"\
    )[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are not digits.\n\n\n</text>\n<cell>",
  "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]]))]))\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))[which(grepl(\"\
    [A-Z]\", s))]))\n}\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of uppercase letters.\n\nExamples:\n\
    >>> upperCaseLetters('')\n0\n>>> upperCaseLetters('abAB')\n2\n>>> upperCaseLetters('abcCd')\n\
    2\n>>> upperCaseLetters('helloE')\n2\n>>> upperCaseLetters('woArBld')\n2\n>>>\
    \ upperCaseLetters('aAaaaXa')\n2\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n\
    0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('')",
  "\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  sum(as.integer(s))\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are uppercase letters.\n\n\n</text>\n<cell>", "\n  sum(unlist(strsplit(s, \"\
    \")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n  sum <- 0\n  for(i in\
    \ 1:nchar(s)) {\n    sum <- sum + as.integer(toupper(substr(s, i, i)))\n  }\n\
    \  return(sum)\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(as.character(s))]))\n\
    }\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\ndigitSum(\"\
    aAaaaXaXa\")\ndigitSum(\"aAaaaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXa\")\ndigitSum(\"\
    aAaaaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXa\")\n\
    digitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXa\"\
    )\ndigitSum(\"aAaaaXaXaXaXaXaXaXaXaXaXaXaXaXa\")\ndigitSum(\"aAaaaXaXaXaXaXaX",
  "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n  sum(as.integer(gsub(\"\
    [^[:digit:]]\", \"\", s)))\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"\
    ))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the sum of the digits in that string.\n\
    Examples:\n>>> digitSum('1234')\n6\n>>> digitSum('12')\n2\n>>> digitSum('abc')\n\
    0\n>>> digitSum('abc123')\n6\n>>> digitSum('abc123def')\n6\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789jkl')\n\
    21\n>>> digitSum('abc123def456ghi789jkl')\n21\n>>> digitSum('abc123def456ghi789",
  "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(as.integer(gsub(\"[^0-9]\", \"\", s))) \n}\ndigitSum(\"\
    \")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"\
    woArBld\")\ndigitSum(\"aAaaaXa\")\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer! I appreciate it! I didn't know that `gsub` could take regular\
    \ expressions. I thought it only could take strings. I guess I learned something\
    \ new today. Thanks!\n<|/ c |>\n<| c |>\nYes, `gsub` can take regular expressions.\
    \ But it can only take strings. `gsub` returns a character vector, not a string.\
    \ `gsub` takes a regular expression and a replacement string. `gsub` replaces\
    \ all instances of the regular expression in the string with the replacement string.\n\
    <|/ c |>\n<| c |>\nAh! I see. Thanks for clarifying! I guess I learned something\
    \ new today. Thanks!\n<|/ c |>\n<| a tags=r,regex |>\nHere's a solution that uses\
    \ base R's gregexpr and regmatches to find the matches and then sum the matches:\n\
    <code>\nsum <- function(x) {\n  sum(regmatches(x, gregexpr(\"[0-9]\", x))[[1]])\n\
    }\n\nsum(\"\")", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)\
    \ > 96))))\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)\
    \ > 96))))\n}\ndigitSum(letters)", "\n  sum(unlist(lapply(strsplit(s, ''), function(x)\
    \ sum(as.integer(x) > 96))))\n}\ndigitSum(letters)\n</cell>\n<cell>", "\n  sum\
    \ <- 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(toupper(substr(s,\
    \ i, i)))\n  }\n  return(sum)\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\
    \"))))\n}\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string that are uppercase letters.\nExamples:\n>>> upperCaseCount('')\n\
    0\n>>> upperCaseCount('abAB')\n2\n>>> upperCaseCount('abcCd')\n2\n>>> upperCaseCount('helloE')\n\
    2\n>>> upperCaseCount('woArBld')\n3\n>>> upperCaseCount('aAaaaXa')\n4\n>>> upperCaseCount('Xa')\n\
    1\n>>> upperCaseCount('XA')\n1\n>>> upperCaseCount('XAa')\n1\n>>> upperCaseCount('XAAb')\n\
    2\n>>> upperCaseCount('XAAbc')\n3\n>>> upperCaseCount('XAAbcd')\n4\n>>> upperCaseCount('XAAbcdE')\n\
    5\n>>> upperCaseCount('XAAbcdEf')\n5\n>>> upperCaseCount('XAAbcdEfX')\n6\n>>>\
    \ upperCaseCount('XAAbcdEfXA')\n7\n>>> upperCaseCount('XAAbcdEfXAAb')\n8\n>>>\
    \ upperCaseCount('XAAbcdEfXAAbcd')\n9\n>>> upperCaseCount('XAAbcdEfXAAbcdE')\n\
    10\n>>> upperCaseCount('XAAbcdEfXAAbcdEf')\n10\n>>> upperCaseCount('XAAbcdEfXAAbcdEfX')\n\
    11\n>>> upperCaseCount('XAAbcdEfXAAbcdEfXA')\n12\n>>> upperCaseCount('XAAbcdEfXAAbcdEfXAAb')\n\
    13\n>>> upperCaseCount('XAAbcdEfXAAbcdEfXAAbcd')\n14\n>>> upperCaseCount('XAAbcdEfXAAbcdEfXAAbcdE')\n\
    15\n>>> upperCaseCount('XAAbcdEfXAAbcdEfXAAbcdEf')\n15\n>>> upperCaseCount('XAAbcdEfXAAbcdEfXAAbcdEfX')\n\
    16\n>>> ", "\n  sum <- 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(substr(s,\
    \ i, i))\n  }\n  return(sum)\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE]))\n}\n</cell>\n<cell>", "\n  sum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)\
    \ > 96))))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>", "\n  sum(as.integer(gsub(\"[^[:digit:]]\"\
    , \"\", s)))\n}\n", "\n  s <- tolower(s)\n  sum(unlist(lapply(strsplit(s, ''),\
    \ function(x) sum(as.integer(x) > 64))))\n}\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string as input and returns the sum of the digits in that string.\n\n\
    \n</text>\n<cell>", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 96))))\n}\n</cell>\n<cell>\ndigitSum('abAB')\n\
    </cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n\
    <cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the digits in that string.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n\
    3\n>>> digitSum('abcCd')\n5\n>>> digitSum('helloE')\n5\n>>> digitSum('woArBld')\n\
    5\n>>> digitSum('aAaaaXa')\n7\nHint: You may want to use the as.integer function\
    \ and sum.\n\n\n</text>\n<cell>", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s,\
    \ '')[[1]])) == TRUE])\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, \"\"\
    )[[1]][upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE]))\n}\n</cell>\n<cell>\n\
    digitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nTask 3\nWrite a function\
    \ that takes a string as input and returns the sum of the digits only'\nASCII\
    \ codes.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n13\n>>> digitSum('abcCd')\n\
    67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n131\n>>> digitSum('aAaaaXa')\n\
    153\ndigitSum <- function(s) {\n  sum(unlist(strsplit(s, \"\")[[1]][sapply(strsplit(s,\
    \ \"\")[[1]], is.numeric)]))\n}\n\n\n</text>\n<cell>", "\n  sum <- 0\n  for(i\
    \ in 1:nchar(s)){\n    sum <- sum + as.integer(toupper(substr(s, i, i)))\n  }\n\
    \  return(sum)\n}\n", "\n  sum(as.integer(gsub(\"[A-Z]\", \"\", s)))\n}\ndigitSum(letters)\n\
    </cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n \
    \ sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n", "\n  sum <- 0\n  for(i in 1:nchar(s)){\n\
    \    sum <- sum + as.integer(toupper(substr(s, i, i)))\n  }\n  return(sum)\n}\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of uppercase letters.\n\n\
    Examples:\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('abAB')\n2\n>>> upperCaseLetters('abcCd')\n\
    2\n>>> upperCaseLetters('helloE')\n2\n>>> upperCaseLetters('woArBld')\n2\n>>>\
    \ upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n\
    4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>>\
    \ upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n\
    4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>>\
    \ upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n\
    4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>>\
    \ upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n\
    4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>>\
    \ upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n\
    4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aAaaaXa')\n4\n>>>\
    \ upperCaseLetters('aAaaaXa')\n4\n>>> upperCaseLetters('aA", "\n  sum(gregexpr(\"\
    [A-Z]\", s)[[1]])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\n\
    digitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the sum of the digits\
    \ in that string.\n\n\n</text>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)\
    \ > 64))))\n}\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s, ''))[upper.case(unlist(strsplit(s,\
    \ ''))) == TRUE]))\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum(\"helloE\")\n</cell>\n\
    <cell>\ndigitSum(\"woArBld\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are uppercase letters.\nExamples:\n\
    >>> upperCaseCount('')\n0\n>>> upperCaseCount('abAB')\n2\n>>> upperCaseCount('abcCd')\n\
    2\n>>> upperCaseCount('helloE')\n2\n>>> upperCaseCount('woArBld')\n2\n>>> upperCaseCount('aAaaaXa')\n\
    3\n>>> upperCaseCount('Xa')\n1\n>>> upperCaseCount('XA')\n0\n>>> upperCaseCount('XAa')\n\
    0\n>>> upperCaseCount('XAAb')\n0\n>>> upperCaseCount('XAAbc')\n0\n>>> upperCaseCount('XAAbcd')\n\
    0\n>>> upperCaseCount('XAAbcdE')\n0\n>>> upperCaseCount('XAAbcdEf')\n0\n>>> upperCaseCount('XAAbcdEfG')\n\
    0\n>>> upperCaseCount('XAAbcdEfGh')\n0\n>>> upperCaseCount('XAAbcdEfGhI')\n0\n\
    >>> upperCaseCount('XAAbcdEfGhIj')\n0\n>>> upperCaseCount('XAAbcdEfGhIjK')\n0\n\
    >>> upperCaseCount('XAAbcdEfGhIjKl')\n0\n>>> upperCaseCount('XAAbcdEfGhIjKlm')\n\
    0\n>>> upperCaseCount('XAAbcdEfGhIjKlmn')\n0\n>>> upperCaseCount('XAAbcdEfGhIjKlmnO')\n\
    0\n>>> upperCaseCount('XAAbcdEfGhIjKlmnOp')\n0\n>>> upperCaseCount('XAAbcdEfGhIjKlmnOpq')\n\
    0\n>>> upperCaseCount('XAAbcdEfGhI", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x)\
    \ sum(as.integer(x) > 96))))\n}\n", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s,\
    \ '')[[1]])) == TRUE])\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"))[seq(1,\
    \ length(s) - 1, 2)]))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\n\
    digitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nTask 3\nWrite a function\
    \ that takes a string as input and returns the sum of the digits only'\nASCII\
    \ codes.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n131\n>>> digitSum('abcCd')\n\
    67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n131\n>>> digitSum('aAaaaXa')\n\
    153\ndigitSum <- function(s) {\n  sum(unlist(strsplit(s, \"\")[[1]])[grepl(\"\
    [0-9]\", unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n</text>\n<cell>\ndigitSum\
    \ <- function(s) {\n  sum(unlist(strsplit(s, \"\")[[1]])[grepl(\"[0-9]\", unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('')\n</cell>\n<cell>\n\
    digitSum('abAB')\n</cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nTask 4\nWrite a function that takes a string as input and returns the\
    \ sum of the digits only'\nASCII codes.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n\
    131\n>>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n\
    131\n>>> digitSum('aAaaaXa')\n153\ndigitSum <- function(s) {\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[grepl(\"[0-9]\", unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}",
  "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) > 96))))\n\
    }\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string as input and returns the sum of the digits only'\nASCII\
    \ codes.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n13\n>>> digitSum('abcCd')\n\
    67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n13\n>>> digitSum('aAaaaXa')\n\
    153\nHint: Use strsplit() and lapply() to solve this problem.\n\n\n</text>\n<cell>",
  "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\ndigitSum(letters)\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string as input and returns the sum of the digits in that string.\n\
    Examples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n13\n>>> digitSum('abcCd')\n\
    67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n13\n>>> digitSum('aAaaaXa')\n\
    153\nHint: Use strsplit() to split a string into a list of characters.\n\n\n</text>\n\
    <cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n</cell>\n<cell>",
  "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) > 64))))\n\
    }\n</cell>\n<cell>", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)[upper.case(x)])))\n\
    }\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)[upper.case(x)])))\n\
    }\ndigitSum(digits)\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s,\
    \ '')[[1]])) == TRUE])\n}\ndigitSum(letters)", "\n  sum(unlist(strsplit(s, \"\"\
    )[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n  s <-\
    \ tolower(s)\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n</cell>\n<cell>\ndigitSum(\"\
    helloE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as\
    \ input and returns the number of characters in the string that are uppercase\
    \ letters.\n\n\n</text>\n<cell>", "\n  sum <- 0\n  for(i in 1:length(s)){\n  \
    \  sum <- sum + as.integer(substr(s, i, i))\n  }\n  return(sum)\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n", "\n  sum <- 0\n\
    \  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(toupper(substr(s, i, i)))\n\
    \  }\n  return(sum)\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == 1]))\n}\n", "\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  sum(as.integer(s))\n\
    }\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\"\
    )\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like the idea of using regex to remove punctuation, but I wonder if\
    \ there is a way to do this without regex? I feel like there should be a way to\
    \ do this without regex but I can't think of one.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without regex.\n<|/ c |>\n<| c |>\nThanks for the solution! I didn't\
    \ know about `gsub` so I learned something new. I'm still not sure why my solution\
    \ didn't work, but I guess it's because I didn't account for the fact that `digitSum`\
    \ was returning a character vector instead of a numeric vector. Your solution\
    \ works perfectly though.\n<|/ c |>\n<| c |>\nYes, I guess I should have mentioned\
    \ that `digitSum` returns a character vector because `sum` expects a numeric vector.\
    \ `sum` also expects a character vector because `gsub` returns a character vector.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe reason your solution doesn't work is because you're\
    \ trying to sum up characters. When you do sum(as.integer(s)) you're trying to\
    \ sum up characters. You want to sum up numbers. \n<code>\ndigitSum <- function(s)\
    \ {\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  sum(as.integer(s))\n}\ndigitSum(\"\
    \")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"\
    woArBld\")\ndigitSum(\"aAaaaXa\")\n</code>\n<|/ a tags=r,regex |>\n<| a tags=r,regex\
    \ |>\nThe reason your solution doesn't work is because you're trying to sum up\
    \ characters. When you do sum(as.integer(s)) you're trying to sum up characters.\
    \ You want to sum up numbers. \n<code>\ndigitSum <- function(s) {\n  s <- gsub(\"\
    [[:punct:]]\", \"\", s)\n  sum(as.integer(s))\n}\ndigitSum(\"\")\ndigitSum(\"\
    abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigit",
  "\n  sum <- 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(toupper(substr(s,\
    \ i, i)))\n  }\n  return(sum)\n}\n", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s,\
    \ '')[[1]])) == TRUE])\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x)\
    \ sum(as.integer(x) > 96))))\n}\n</cell>\n<cell>", "\n  s <- gsub(\"[^[:digit:]]\"\
    , \"\", s)\n  sum(as.integer(s))\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''),\
    \ function(x) sum(as.integer(x) > 96))))\n}\n</cell>\n<cell>\ndigitSum('abAB')\n\
    </cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n\
    <cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the digits in that string.\n\n\n</text>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
