name: HumanEval_31_is_prime
language: rkt
prompt: "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n\
  (define (is_prime n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n\
  \    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n  \
  \  (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n \
  \   (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal?\
  \ (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate\
  \ 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85)\
  \ #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379)\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (= (modulo n 2) 0))\n", "  (= (modulo n 2) 0))\n", "  (cond [(= n\
    \ 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime\
    \ (- n 1)) (is_prime (- n 2)))))\n", "  (cond [(= n 1) #t]\n        [else (or\
    \ (is_prime (/ n 2))\n                  (is_prime (/ n 3)))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (let ([a\
    \ (* 2 n)]\n                    [b (* 3 n)]\n                    [c (* 5 n)]\n\
    \                    [d (* 7 n)]\n                    [e (* 11 n)]\n         \
    \           [f (* 13 n)]\n                    [g (* 17 n)]\n                 \
    \   [h (* 19 n)]\n                    [i (* 23 n)]\n                    [j (*\
    \ 29 n)]\n                    [k (* 31 n)]\n                    [l (* 37 n)]\n\
    \                    [m (* 41 n)]\n                    [n (* 43 n)]\n        \
    \            [o (* 47 n)]\n                    [p (* 51 n)]\n                \
    \    [q (* 53 n)]\n                    [r (* 59 n)]\n                    [s (*\
    \ 61 n)]\n                    [t (* 67 n)]\n                    [u (* 71 n)]\n\
    \                    [v (* 73 n)]\n                    [w (* 79 n)]\n        \
    \            [x (* 81 n)]\n                    [y (* 83 n)]\n                \
    \    [z (* 89 n)]\n                    [a (* 97 n)]\n                    [b (*\
    \ 101 n)]\n                    [c (* 103 n)]\n                    [d (* 107 n)]\n\
    \                    [e (* 111 n)]\n                    [f (* 113 n)]\n      \
    \              [g (* 117 n)]\n                    [h (* 121 n)]\n            \
    \        [i (* 127 n)]\n                    [j (* 131 n)]\n                  \
    \  [k (* 137 n)]\n                    [l (* 143 n)]\n                    [m (*\
    \ 149 n)]\n                    [n (* 151 n)]\n                    [o (* 157 n)]\n\
    \                    [p (* 163 n)]\n                    [q (* 167 n)]\n      \
    \              [r (* 173 n)]\n                    [s (* 179 n)]\n            \
    \        [t (* 181 n)]\n                    [u (* 187 n)]\n                  \
    \  [v (* 191 n)]\n                    [w (* 193 n)]\n                    [x (*\
    \ 197 n)]\n                    [y (* 201 n)]\n                    [z (* 203 n)]\n\
    \                    [a (* 209 n)]\n                    [b (* 211 n)]\n      \
    \              [c (* 213 n)]\n                    [d (* 217 n)]\n            \
    \        [e (* 221 ", "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) #t]\n     \
    \   [(= n 2) #t]\n        [(= n 3) #t]\n        [else (let ([a (* 2 n)]\n    \
    \                [b (* 3 n)]\n                    [c (* 5 n)]\n              \
    \      [d (* 7 n)]\n                    [e (* 11 n)]\n                    [f (*\
    \ 13 n)]\n                    [g (* 17 n)]\n                    [h (* 19 n)]\n\
    \                    [i (* 23 n)]\n                    [j (* 29 n)]\n        \
    \            [k (* 31 n)]\n                    [l (* 37 n)]\n                \
    \    [m (* 41 n)]\n                    [n (* 43 n)]\n                    [o (*\
    \ 47 n)]\n                    [p (* 53 n)]\n                    [q (* 59 n)]\n\
    \                    [r (* 61 n)]\n                    [s (* 67 n)]\n        \
    \            [t (* 71 n)]\n                    [u (* 73 n)]\n                \
    \    [v (* 79 n)]\n                    [w (* 83 n)]\n                    [x (*\
    \ 89 n)]\n                    [y (* 97 n)]\n                    [z (* 101 n)]\n\
    \                    [a (* 103 n)]\n                    [b (* 107 n)]\n      \
    \              [c (* 111 n)]\n                    [d (* 117 n)]\n            \
    \        [e (* 121 n)]\n                    [f (* 127 n)]\n                  \
    \  [g (* 131 n)]\n                    [h (* 137 n)]\n                    [i (*\
    \ 143 n)]\n                    [j (* 149 n)]\n                    [k (* 151 n)]\n\
    \                    [l (* 157 n)]\n                    [m (* 163 n)]\n      \
    \              [n (* 167 n)]\n                    [o (* 173 n)]\n            \
    \        [p (* 179 n)]\n                    [q (* 181 n)]\n                  \
    \  [r (* 187 n)]\n                    [s (* 191 n)]\n                    [t (*\
    \ 197 n)]\n                    [u (* 203 n)]\n                    [v (* 209 n)]\n\
    \                    [w (* 211 n)]\n                    [x (* 217 n)]\n      \
    \              [y (* 223 n)]\n                    [z (* 229 n)]\n            \
    \        [a (* 231 n)]\n                    [b (* 237 n)]\n                  \
    \  [c (* 241 n)]\n                    [d (* 247 n)]\n                    [e (*\
    \ 253 ", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n \
    \       [else (or (is_prime (- n 2)) (is_prime (- n 3)))))\n", "  (cond [(= n\
    \ 1) #t]\n        [else (or (is_prime (- n 1))\n                  (or (= (modulo\
    \ n 2) 1)\n                      (is_prime (/ n 2))))]))\n", "  (cond [(= n 1)\
    \ #t]\n        [else (or (is_prime (- n 1))\n                  (= (modulo n n)\
    \ 0))]))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime (/ n 2))\n \
    \                 (is_prime (/ n 3)))]))\n", "  (cond [(= n 1) true]\n       \
    \ [else (or (is_prime (/ n 2))\n                  (is_prime (* 3 n)))]))\n", " \
    \ (cond [(= n 1) true]\n        [else (or (is_prime (- n 1))\n               \
    \    (= (mod n n) 0))]))\n", "  (define (is-prime? n)\n    (if (= n 1)\n     \
    \   #t\n        (or (is-prime? (- n 1))\n            (or (= (modulo n n) 0)\n\
    \                (is-prime? (- n 2))))))\n  (is-prime? n))\n", "  (cond [(= n\
    \ 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (let ([a (*\
    \ 2 n)]\n                    [b (* 3 n)]\n                    [c (* 5 n)]\n  \
    \                  [d (* 7 n)]\n                    [e (* 11 n)]\n           \
    \         [f (* 13 n)]\n                    [g (* 17 n)]\n                   \
    \ [h (* 19 n)]\n                    [i (* 23 n)]\n                    [j (* 29\
    \ n)]\n                    [k (* 31 n)]\n                    [l (* 37 n)]\n  \
    \                  [m (* 41 n)]\n                    [n (* 43 n)]\n          \
    \          [o (* 47 n)]\n                    [p (* 51 n)]\n                  \
    \  [q (* 53 n)]\n                    [r (* 59 n)]\n                    [s (* 61\
    \ n)]\n                    [t (* 67 n)]\n                    [u (* 71 n)]\n  \
    \                  [v (* 73 n)]\n                    [w (* 79 n)]\n          \
    \          [x (* 81 n)]\n                    [y (* 83 n)]\n                  \
    \  [z (* 89 n)]\n                    [a (* 97 n)]\n                    [b (* 101\
    \ n)]\n                    [c (* 103 n)]\n                    [d (* 107 n)]\n\
    \                    [e (* 111 n)]\n                    [f (* 113 n)]\n      \
    \              [g (* 117 n)]\n                    [h (* 121 n)]\n            \
    \        [i (* 127 n)]\n                    [j (* 131 n)]\n                  \
    \  [k (* 137 n)]\n                    [l (* 143 n)]\n                    [m (*\
    \ 149 n)]\n                    [n (* 151 n)]\n                    [o (* 157 n)]\n\
    \                    [p (* 163 n)]\n                    [q (* 167 n)]\n      \
    \              [r (* 173 n)]\n                    [s (* 179 n)]\n            \
    \        [t (* 181 n)]\n                    [u (* 187 n)]\n                  \
    \  [v (* 191 n)]\n                    [w (* 193 n)]\n                    [x (*\
    \ 197 n)]\n                    [y (* 201 n)]\n                    [z (* 203 n)]\n\
    \                    [a (* 209 n)]\n                    [b (* 211 n)]\n      \
    \              [c (* 213 n)]\n                    [d (* 217 n)]\n            \
    \        [e (* 221 ", "  (define (helper n primes)\n    (cond ((= n 1) (= (length\
    \ primes) 0))\n          ((null? primes) #f)\n          ((= (modulo n primes)\
    \ 0) (helper (sub1 n) (cons n primes)))\n          (else (helper (sub1 n) (append\
    \ (cons n primes) primes)))))\n  (helper n '()))\n", "  (= (modulo n 2) 0))\n",
  "  (define (is-prime n)\n    (cond ((= n 1) #t)\n          ((= n 2) #f)\n      \
    \    ((odd? n) (is-prime (/ n 2)))\n          (else (is-prime (+ n 1)))))\n  (is-prime\
    \ n))\n", "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (let ([a (* 2 n)]\n                    [b\
    \ (* 3 n)]\n                    [c (* 5 n)]\n                    [d (* 7 n)]\n\
    \                    [e (* 11 n)]\n                    [f (* 13 n)]\n        \
    \            [g (* 17 n)]\n                    [h (* 19 n)]\n                \
    \    [i (* 23 n)]\n                    [j (* 29 n)]\n                    [k (*\
    \ 31 n)]\n                    [l (* 37 n)]\n                    [m (* 41 n)]\n\
    \                    [n (* 43 n)]\n                    [o (* 47 n)]\n        \
    \            [p (* 51 n)]\n                    [q (* 53 n)]\n                \
    \    [r (* 59 n)]\n                    [s (* 61 n)]\n                    [t (*\
    \ 67 n)]\n                    [u (* 71 n)]\n                    [v (* 73 n)]\n\
    \                    [w (* 79 n)]\n                    [x (* 81 n)]\n        \
    \            [y (* 83 n)]\n                    [z (* 89 n)]\n                \
    \    [a (* 97 n)]\n                    [b (* 101 n)]\n                    [c (*\
    \ 103 n)]\n                    [d (* 107 n)]\n                    [e (* 111 n)]\n\
    \                    [f (* 113 n)]\n                    [g (* 117 n)]\n      \
    \              [h (* 121 n)]\n                    [i (* 127 n)]\n            \
    \        [j (* 131 n)]\n                    [k (* 137 n)]\n                  \
    \  [l (* 143 n)]\n                    [m (* 149 n)]\n                    [n (*\
    \ 151 n)]\n                    [o (* 157 n)]\n                    [p (* 163 n)]\n\
    \                    [q (* 167 n)]\n                    [r (* 173 n)]\n      \
    \              [s (* 179 n)]\n                    [t (* 181 n)]\n            \
    \        [u (* 187 n)]\n                    [v (* 191 n)]\n                  \
    \  [w (* 193 n)]\n                    [x (* 197 n)]\n                    [y (*\
    \ 203 n)]\n                    [z (* 209 n)]\n                    [a (* 211 n)]\n\
    \                    [b (* 217 n)]\n                    [c (* 223 n)]\n      \
    \              [d (* 229 n)]\n                    [e (* 233 ", "  (cond [(= n\
    \ 1) true]\n        [(= n 2) true]\n        [(= n 3) true]\n        [else (let\
    \ ([a (* 2 n)]\n                    [b (* 3 n)]\n                    [c (* 5 n)]\n\
    \                    [d (* 7 n)]\n                    [e (* 11 n)]\n         \
    \           [f (* 13 n)]\n                    [g (* 17 n)]\n                 \
    \   [h (* 19 n)]\n                    [i (* 23 n)]\n                    [j (*\
    \ 29 n)]\n                    [k (* 31 n)]\n                    [l (* 37 n)]\n\
    \                    [m (* 41 n)]\n                    [n (* 43 n)]\n        \
    \            [o (* 47 n)]\n                    [p (* 51 n)]\n                \
    \    [q (* 53 n)]\n                    [r (* 59 n)]\n                    [s (*\
    \ 61 n)]\n                    [t (* 67 n)]\n                    [u (* 71 n)]\n\
    \                    [v (* 73 n)]\n                    [w (* 79 n)]\n        \
    \            [x (* 81 n)]\n                    [y (* 83 n)]\n                \
    \    [z (* 89 n)]\n                    [a (* 97 n)]\n                    [b (*\
    \ 101 n)]\n                    [c (* 103 n)]\n                    [d (* 107 n)]\n\
    \                    [e (* 111 n)]\n                    [f (* 113 n)]\n      \
    \              [g (* 117 n)]\n                    [h (* 121 n)]\n            \
    \        [i (* 127 n)]\n                    [j (* 131 n)]\n                  \
    \  [k (* 137 n)]\n                    [l (* 143 n)]\n                    [m (*\
    \ 149 n)]\n                    [n (* 151 n)]\n                    [o (* 157 n)]\n\
    \                    [p (* 163 n)]\n                    [q (* 167 n)]\n      \
    \              [r (* 173 n)]\n                    [s (* 179 n)]\n            \
    \        [t (* 181 n)]\n                    [u (* 187 n)]\n                  \
    \  [v (* 191 n)]\n                    [w (* 193 n)]\n                    [x (*\
    \ 197 n)]\n                    [y (* 203 n)]\n                    [z (* 209 n)]\n\
    \                    [a (* 211 n)]\n                    [b (* 217 n)]\n      \
    \              [c (* 223 n)]\n                    [d (* 229 n)]\n            \
    \        [e (* 233 n)]\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n     \
    \   [(= n 3) #t]\n        [else (= (mod n 3) 0)]))\n", "  (let loop ((i 2) (s\
    \ #t))\n    (cond ((= i n) s)\n          ((even? n) (loop (+ i 2) #f))\n     \
    \     ((odd? n) (loop (+ i 2) (loop (+ i 2) #f))))))\n", "  (cond [(= n 1) #t]\n\
    \        [else (or (is_prime (- n 1)) (= (modulo n n) 0))]))\n", "  (= (modulo\
    \ n 2) 0))\n", "  (define (is-prime n)\n    (if (= n 1)\n        #t\n        (if\
    \ (= (modulo n n) 0)\n            #f\n            (is-prime (sub1 n)))))\n  (is-prime\
    \ n))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime (- n 1))\n    \
    \              (= (modulo n 2) 0))]))\n", "  (cond [(= n 2) true]\n        [(=\
    \ n 3) true]\n        [else (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n",
  "  (= (modulo n 2) 0))\n", "  (define (is-prime? n)\n    (if (= n 1)\n        #t\n\
    \        (or (is-prime? (- n 1))\n            (or (is-prime? (- n 2))\n      \
    \          (is-prime? (- n 3))\n                (is-prime? (- n 4))\n        \
    \        (is-prime? (- n 5))\n                (is-prime? (- n 6))\n          \
    \      (is-prime? (- n 7))\n                (is-prime? (- n 8))\n            \
    \    (is-prime? (- n 9))\n                (is-prime? (- n 10))\n             \
    \   (is-prime? (- n 11))\n                (is-prime? (- n 12))\n             \
    \   (is-prime? (- n 13))\n                (is-prime? (- n 14))\n             \
    \   (is-prime? (- n 15))\n                (is-prime? (- n 16))\n             \
    \   (is-prime? (- n 17))\n                (is-prime? (- n 18))\n             \
    \   (is-prime? (- n 19))\n                (is-prime? (- n 20))\n             \
    \   (is-prime? (- n 21))\n                (is-prime? (- n 22))\n             \
    \   (is-prime? (- n 23))\n                (is-prime? (- n 24))\n             \
    \   (is-prime? (- n 25))\n                (is-prime? (- n 26))\n             \
    \   (is-prime? (- n 27))\n                (is-prime? (- n 28))\n             \
    \   (is-prime? (- n 29))\n                (is-prime? (- n 30))\n             \
    \   (is-prime? (- n 31))\n                (is-prime? (- n 32))\n             \
    \   (is-prime? (- n 33))\n                (is-prime? (- n 34))\n             \
    \   (is-prime? (- n 35))\n                (is-prime? (- n 36))\n             \
    \   (is-prime? (- n 37))\n                (is-prime? (- n 38))\n             \
    \   (is-prime? (- n 39))\n                (is-prime? (- n 40))\n             \
    \   (is-prime? (- n 41))\n                (is-prime? (- n 42))\n             \
    \   (is-prime? (- n 43))\n                (is-prime? (- n 44))\n             \
    \   (is-prime? (- n 45))\n                (is-prime? (- n 46))\n             \
    \   (is-prime? (- n 47))\n                (is-prime? (- n 48))\n             \
    \   (is-prime? (- n 49))\n                (is-prime? (- n 50))\n             \
    \   (is-prime? (- n 51))\n                (is-prime? (- n 52))\n             \
    \   (is-prime? (- n 53))\n                (is-prime? (- n 54))\n             \
    \   (is-prime? (- n 55))\n                (is-prime? (- n 56))\n", "  (cond [(=\
    \ n 2) true]\n        [else (or (is_prime (- n 1))\n                  (= (mod\
    \ n n) 0))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3)\
    \ #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or\
    \ (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (= (modulo n 2) 0))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n  \
    \      [(= n 2) #t]\n        [(= n 3) #t]\n        [else (let ([a (* n n)]\n \
    \                   [b (* n n + 1)]\n                    [c (* n n + 2)]\n   \
    \                 [d (* n n + 3)])\n              (= (mod a b) 0)\n          \
    \    (= (mod b c) 0)\n              (= (mod c d) 0)\n              (= (mod d n)\
    \ 0)\n              (is_prime (- n 1))]))]))\n", "  (cond ((= n 1) #t)\n     \
    \   ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (= (modulo n 2) 1))\n", "  (= (modulo n 2) 1))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or\
    \ (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) true]\n    \
    \    [else (or (is_prime (- n 1))\n                  (or (is_prime (- n 2))\n\
    \                      (or (is_prime (- n 3))\n                          (or (is_prime\
    \ (- n 4))\n                              (or (is_prime (- n 5))\n           \
    \                       (or (is_prime (- n 6))\n                             \
    \         (or (is_prime (- n 7))\n                                          (or\
    \ (is_prime (- n 8))\n                                              (or (is_prime\
    \ (- n 9))\n                                                  (or (is_prime (-\
    \ n 10))\n                                                      (or (is_prime\
    \ (- n 11))\n                                                          (or (is_prime\
    \ (- n 12))\n                                                              (or\
    \ (is_prime (- n 13))\n                                                      \
    \            (or (is_prime (- n 14))\n                                       \
    \                               (is_prime (- n 15))))))))))))))))))\n", "  (cond\
    \ [(= n 1) true]\n        [else (or (is_prime (- n 1))\n                   (=\
    \ (modulo n 2) 0))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n      \
    \  [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (let loop ((i 2) (s 1))\n    (if (= i n)\n        (= s 0)\n        (loop (+ i\
    \ 1) (+ s 1))\n        (loop (+ i 1) (- s 1)))))\n", "  (let loop ((i 2) (j n))\n\
    \    (cond ((= i j) true)\n          ((= (modulo i j) 0) false)\n          (else\
    \ (loop (+ i 1) (+ j 1))))))\n", "  (= (modulo (+ n 1) (* 2 n)) 1))\n", "  (define\
    \ (is-prime n primes)\n    (cond [(= n 1) (= (length primes) 0)]\n          [(prime-test\
    \ (first primes) n) (is-prime (first primes) (cons n (rest primes)))]\n      \
    \    [else (is-prime (first primes) (rest primes))]))\n  (is-prime n '()))\n",
  "  (define (is-prime? n primes)\n    (cond [(= n 1) (= n primes)] \n          [(=\
    \ (modulo n primes) 0) (is-prime? (quotient n primes) primes)]\n          [else\
    \ (is-prime? (quotient n primes) primes)]))\n  (is-prime? n '(2 3 5 7 11 13 17\
    \ 19)))\n", "  (let loop ((i 2) (s #t) (m (* i i)))\n    (if (= i n)\n       \
    \ s\n        (loop (+ i 1) (= (modulo n i) m) (* m m)))))\n", "  (cond ((= n 1)\
    \ #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) #t]\n        [(=\
    \ n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (sub1 n)) (is_prime\
    \ (sub2 n)))]))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime (- n\
    \ 1))\n                  (or (is_prime (- n 2))\n                      (= (modulo\
    \ n 3) 0)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0)]))\n",
  "  (cond [(= n 1) true]\n        [else (or (is_prime (- n 1))\n                \
    \  (= (modulo n 2) 0))]))\n", "  (define (is-prime? n k)\n    (cond [(= n k) false]\n\
    \          [(= (mod n k) 0) (is-prime? n (+ k 1))]\n          [else (is-prime?\
    \ n (+ k 1))]))\n  (is-prime? n 2))\n", "  (define (is-prime? n primes)\n    (cond\
    \ [(= n 1) true]\n          [(= n 2) true]\n          [else (or (is-prime? (-\
    \ n 1) primes)\n                    (or (is-prime? (- n 2) primes)\n         \
    \               (is-prime? (- n 3) primes)))))\n  (is-prime? n '(2)))\n", "  (cond\
    \ [(= n 1) true]\n        [else (or (is_prime (- n 1))\n                  (= (modulo\
    \ n 2) 0))]))\n", "  (= (modulo n 2) 0))\n", "  (define (is-prime? n i)\n    (cond\
    \ ((= i n) true)\n          ((= (remainder n i) 0) (is-prime? n (+ i 1)))\n  \
    \        (else false)))\n  (is-prime? n 2))\n", "  (define (is-prime? n primes)\n\
    \    (cond ((null? primes) #f)\n          ((= n 0) #t)\n          ((= n 1) #t)\n\
    \          ((= (modulo n primes) 0) (is-prime? n (cdr primes)))\n          (else\
    \ (is-prime? n (cons (car primes) primes)))))\n  (is-prime? n '(2)))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n    \
    \    ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (define\
    \ (is-prime? n primes)\n    (cond\n      [(= n 1) (= (length primes) 0)]\n   \
    \   [(= (modulo n primes) 0)\n       (is-prime? (quotient n primes) (cons n primes))]\n\
    \      [else (is-prime? (quotient n primes) primes)]\n      ))\n  (is-prime? n\
    \ '(2)))\n", "  (cond [(= n 1) true]\n        [(= n 2) true]\n        [else (or\
    \ (is_prime (- n 1))\n                   (is_prime (- n 2)))))\n", "  (define\
    \ (is-prime n)\n    (if (= n 1)\n        #t\n        (if (even? n)\n         \
    \   (is-prime (/ n 2))\n            (is-prime (/ n 3)))))\n  (is-prime n))\n",
  "  (let loop ((i 2) (p '()))\n    (if (= i n)\n        (if (null? p)\n         \
    \   true\n            (loop (+ i 1) (cons i p)))\n        (loop (+ i 1) p))))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))))\n", "  (= (modulo (+ n 1) (- n\
    \ 1)) #f)\n)\n", "  (= (mod n 2) 0))\n", "  (= (modulo n 2) 0))\n", "  (cond [(=\
    \ n 1) true]\n        [else (or (is_prime (/ n 2))\n                   (= (mod\
    \ n 2) 0))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3)\
    \ #t]\n        [else (= (mod n 3) 0)]))\n", "  (cond [(= n 1) true]\n        [else\
    \ (or (is_prime (- n 1))\n                  (= (modulo n 2) 0))]))\n", "  (= (modulo\
    \ n 2) 0))\n", "  (= (modulo n 2) 1))\n", "  (cond ((= n 2) #t)\n        ((= n\
    \ 3) #f)\n        ((= (mod n 2) 0) #t)\n        (else (is_prime (- n 1)))))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n", "  (= (modulo n 2) 0))\n",
  "  (define (helper n primes)\n    (cond ((= n 1) (= (length primes) 0))\n      \
    \    ((= (modulo n primes) 0)\n           (helper (quotient n primes) primes))\n\
    \          (else\n           (helper (quotient n primes) (cons n primes)))))\n\
    \  (helper n '()))\n", "  (let loop ((i 2) (s #t))\n    (if (< i n)\n        (loop\
    \ (+ i 1) (or (= (modulo n i) 0) s))\n        s)))\n", "  (define (is-prime? n\
    \ primes)\n    (cond\n      [(= n 1) primes]\n      [(= n 2) (is-prime? n (cons\
    \ 2 primes))]\n      [(= n 3) (is-prime? n (cons 3 primes))]\n      [(= n 4) (is-prime?\
    \ n (cons 4 primes))]\n      [(= n 5) (is-prime? n (cons 5 primes))]\n      [(=\
    \ n 6) (is-prime? n (cons 6 primes))]\n      [(= n 7) (is-prime? n (cons 7 primes))]\n\
    \      [(= n 8) (is-prime? n (cons 8 primes))]\n      [(= n 9) (is-prime? n (cons\
    \ 9 primes))]\n      [(= n 10) (is-prime? n (cons 10 primes))]\n      [(= n 11)\
    \ (is-prime? n (cons 11 primes))]\n      [(= n 12) (is-prime? n (cons 12 primes))]\n\
    \      [(= n 13) (is-prime? n (cons 13 primes))]\n      [(= n 14) (is-prime? n\
    \ (cons 14 primes))]\n      [(= n 15) (is-prime? n (cons 15 primes))]\n      [(=\
    \ n 16) (is-prime? n (cons 16 primes))]\n      [(= n 17) (is-prime? n (cons 17\
    \ primes))]\n      [(= n 18) (is-prime? n (cons 18 primes))]\n      [(= n 19)\
    \ (is-prime? n (cons 19 primes))]\n      [(= n 20) (is-prime? n (cons 20 primes))]\n\
    \      [(= n 21) (is-prime? n (cons 21 primes))]\n      [(= n 22) (is-prime? n\
    \ (cons 22 primes))]\n      [(= n 23) (is-prime? n (cons 23 primes))]\n      [(=\
    \ n 24) (is-prime? n (cons 24 primes))]\n      [(= n 25) (is-prime? n (cons 25\
    \ primes))]\n      [(= n 26) (is-prime? n (cons 26 primes))]\n      [(= n 27)\
    \ (is-prime? n (cons 27 primes))]\n      [(= n 28) (is-prime? n (cons 28 primes))]\n\
    \      [(= n ", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod\
    \ n 3) 0) #t)\n        (else (is_prime (- n 1)))))\n", "  (define (is-prime? n)\n\
    \    (if (= n 1)\n        #t\n        (or (is-prime? (- n 1))\n            (or\
    \ (is-prime? (- n 2))\n                (is-prime? (- n 3))\n                (is-prime?\
    \ (- n 4))\n                (is-prime? (- n 5))\n                (is-prime? (-\
    \ n 6))\n                (is-prime? (- n 7))\n                (is-prime? (- n\
    \ 8))\n                (is-prime? (- n 9))\n                (is-prime? (- n 10))\n\
    \                (is-prime? (- n 11))\n                (is-prime? (- n 12))\n\
    \                (is-prime? (- n 13))\n                (is-prime? (- n 14))\n\
    \                (is-prime? (- n 15))\n                (is-prime? (- n 16))\n\
    \                (is-prime? (- n 17))\n                (is-prime? (- n 18))\n\
    \                (is-prime? (- n 19))\n                (is-prime? (- n 20))\n\
    \                (is-prime? (- n 21))\n                (is-prime? (- n 22))\n\
    \                (is-prime? (- n 23))\n                (is-prime? (- n 24))\n\
    \                (is-prime? (- n 25))\n                (is-prime? (- n 26))\n\
    \                (is-prime? (- n 27))\n                (is-prime? (- n 28))\n\
    \                (is-prime? (- n 29))\n                (is-prime? (- n 30))\n\
    \                (is-prime? (- n 31))\n                (is-prime? (- n 32))\n\
    \                (is-prime? (- n 33))\n                (is-prime? (- n 34))\n\
    \                (is-prime? (- n 35))\n                (is-prime? (- n 36))\n\
    \                (is-prime? (- n 37))\n                (is-prime? (- n 38))\n\
    \                (is-prime? (- n 39))\n                (is-prime? (- n 40))\n\
    \                (is-prime? (- n 41))\n                (is-prime? (- n 42))\n\
    \                (is-prime? (- n 43))\n                (is-prime? (- n 44))\n\
    \                (is-prime? (- n 45))\n                (is-prime? (- n 46))\n\
    \                (is-prime? (- n 47))\n                (is-prime? (- n 48))\n\
    \                (is-prime? (- n 49))\n                (is-prime? (- n 50))\n\
    \                (is-prime? (- n 51))\n                (is-prime? (- n 52))\n\
    \                (is-prime? (- n 53))\n                (is-prime? (- n 54))\n\
    \                (is-prime? (- n 55))\n                (is-prime? (- n 56))\n",
  "  (cond [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n                  (or\
    \ (is_prime (- n 2))\n                      (or (is_prime (- n 3))\n         \
    \                 (or (is_prime (- n 4))\n                              (or (is_prime\
    \ (- n 5))\n                                  (or (is_prime (- n 6))\n       \
    \                               (or (is_prime (- n 7))\n                     \
    \                     (or (is_prime (- n 8))\n                               \
    \               (or (is_prime (- n 9))\n                                     \
    \             (or (is_prime (- n 10))\n                                      \
    \                (or (is_prime (- n 11))\n                                   \
    \                       (or (is_prime (- n 12))\n                            \
    \                                  (or (is_prime (- n 13))\n                 \
    \                                                 (or (is_prime (- n 14))\n  \
    \                                                                    (is_prime\
    \ (- n 15)))))))))))))))))))\n", "  (define (is-prime n)\n    (if (= n 1)\n  \
    \      #t\n        (if (even? n)\n            (is-prime (/ n 2))\n           \
    \ (is-prime (/ n 3))))))\n  (is-prime n))\n", "  (= (modulo n 2) 1))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #f)\n        (else (or (is_prime (- n 1))\n \
    \                 (is_prime (- n 2))))))\n", "  (cond [(= n 1) true]\n       \
    \ [else (or (is_prime (- n 1))\n                  (or (is_prime (- n 2))\n   \
    \                   (or (is_prime (- n 3))\n                          (or (is_prime\
    \ (- n 4))\n                              (or (is_prime (- n 5))\n           \
    \                       (or (is_prime (- n 6))\n                             \
    \         (or (is_prime (- n 7))\n                                          (or\
    \ (is_prime (- n 8))\n                                              (or (is_prime\
    \ (- n 9))\n                                                  (or (is_prime (-\
    \ n 10))\n                                                      (or (is_prime\
    \ (- n 11))\n                                                          (or (is_prime\
    \ (- n 12))\n                                                              (or\
    \ (is_prime (- n 13))\n                                                      \
    \            (or (is_prime (- n 14))\n                                       \
    \                               (is_prime (- n 15)))))))))))))))))))\n", "  (define\
    \ (is-prime? n)\n    (if (= n 1)\n        #t\n        (or (is-prime? (- n 1))\n\
    \            (or (is-prime? (- n 2))\n                (is-prime? (- n 3))\n  \
    \              (is-prime? (- n 4))\n                (is-prime? (- n 5))\n    \
    \            (is-prime? (- n 6))\n                (is-prime? (- n 7))\n      \
    \          (is-prime? (- n 8))\n                (is-prime? (- n 9))\n        \
    \        (is-prime? (- n 10))\n                (is-prime? (- n 11))\n        \
    \        (is-prime? (- n 12))\n                (is-prime? (- n 13))\n        \
    \        (is-prime? (- n 14))\n                (is-prime? (- n 15))\n        \
    \        (is-prime? (- n 16))\n                (is-prime? (- n 17))\n        \
    \        (is-prime? (- n 18))\n                (is-prime? (- n 19))\n        \
    \        (is-prime? (- n 20))\n                (is-prime? (- n 21))\n        \
    \        (is-prime? (- n 22))\n                (is-prime? (- n 23))\n        \
    \        (is-prime? (- n 24))\n                (is-prime? (- n 25))\n        \
    \        (is-prime? (- n 26))\n                (is-prime? (- n 27))\n        \
    \        (is-prime? (- n 28))\n                (is-prime? (- n 29))\n        \
    \        (is-prime? (- n 30))\n                (is-prime? (- n 31))\n        \
    \        (is-prime? (- n 32))\n                (is-prime? (- n 33))\n        \
    \        (is-prime? (- n 34))\n                (is-prime? (- n 35))\n        \
    \        (is-prime? (- n 36))\n                (is-prime? (- n 37))\n        \
    \        (is-prime? (- n 38))\n                (is-prime? (- n 39))\n        \
    \        (is-prime? (- n 40))\n                (is-prime? (- n 41))\n        \
    \        (is-prime? (- n 42))\n                (is-prime? (- n 43))\n        \
    \        (is-prime? (- n 44))\n                (is-prime? (- n 45))\n        \
    \        (is-prime? (- n 46))\n                (is-prime? (- n 47))\n        \
    \        (is-prime? (- n 48))\n                (is-prime? (- n 49))\n        \
    \        (is-prime? (- n 50))\n                (is-prime? (- n 51))\n        \
    \        (is-prime? (- n 52))\n                (is-prime? (- n 53))\n        \
    \        (is-prime? (- n 54))\n                (is-prime? (- n 55))\n        \
    \        (is-prime? (- n 56))\n", "  (cond [(= n 1) true]\n        [(= n 2) true]\n\
    \        [else (or (is_prime (- n 1)) (is_prime (- n 2)))))\n", "  (cond [(= n\
    \ 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime\
    \ (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n        [else (or\
    \ (is_prime (- n 1))\n                  (or (= (modulo n 2) 1)\n             \
    \         (is_prime (/ n 2))))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0)]))\n", "  (define (is-prime?\
    \ n)\n    (if (= n 1)\n        #t\n        (if (= (modulo n n) 0)\n          \
    \  #f\n            (is-prime? (- n 1)))))\n  (is-prime? n))\n", "  (= (mod n 2)\
    \ 0))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))))\n", "  (cond [(= n\
    \ 1) true]\n        [else (or (is_prime (- n 1))\n                   (= (modulo\
    \ n 2) 0))]))\n", "  (define (is-prime? n primes)\n    (cond [(= n 1) true]\n\
    \          [(= n 2) true]\n          [else (or (is-prime? (- n 1) primes)\n  \
    \                  (or (is-prime? (- n 2) primes)\n                        (is-prime?\
    \ (- n 3) primes)))))\n  (is-prime? n '(2)))\n", "  (= (modulo (+ n 1) (- n 2))\
    \ 0))\n", "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) #t]\n        [else (or\
    \ (is_prime (- n 1))\n                  (= (mod n n) 0))]))\n", "  (cond [(= n\
    \ 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (let ([i (+\
    \ 2 (* n 2))])\n                  (cond [(= (mod n i) 0)\n                   \
    \       (is_prime n)]\n                        [else #f]))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime\
    \ (- n 1)) (is_prime (- n 2)))))\n", "  (cond [(= n 2) true]\n        [(= n 3)\
    \ true]\n        [else (= (mod n 3) 0)]))\n", "  (= (modulo n 2) 0))\n", "  (define\
    \ (is-prime? n k)\n    (if (= k 0)\n        #t\n        (if (= (modulo n k) 0)\n\
    \            (is-prime? n (- k 1))\n            (is-prime? n (- k 2))))))\n  (is-prime?\
    \ n 2))\n", "  (cond [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n    \
    \              (= (modulo n n) 0))]))\n", "  (cond ((= n 1) #t)\n        ((= n\
    \ 2) #f)\n        (else (or (is_prime (- n 1))\n                  (or (is_prime\
    \ (- n 2))\n                      (is_prime (- n 3))))))\n", "  (cond [(= n 2)\
    \ true]\n        [else (or (is_prime (- n 1))\n                  (= (modulo n\
    \ 3) 0))]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #f)\n        (else (or\
    \ (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (= (modulo n 2) 0))\n", " \
    \ (cond ((= n 2) #t)\n        ((= n 3) #f)\n        (else (or (is_prime (- n 1))\
    \ (is_prime (- n 2))))))\n", "  (define (is-prime? n primes)\n    (cond ((null?\
    \ primes) #f)\n          ((= n 0) #t)\n          ((= n 1) #f)\n          ((= (modulo\
    \ n primes) 0) (is-prime? n (cdr primes)))\n          (else (is-prime? n (cons\
    \ n (car primes))))))\n  (is-prime? n '(2)))\n", "  (cond [(= n 1) #t]\n     \
    \   [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2)))))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime (/ n 2))\n\
    \                   (= (mod n 2) 0))]))\n", "  (cond [(= n 1) #t]\n        [else\
    \ (or (is_prime (- n 1))\n                  (or (is_prime (- n 2))\n         \
    \             (is_prime (- n 3))\n                      (is_prime (- n 4))\n \
    \                     (is_prime (- n 5))\n                      (is_prime (- n\
    \ 6))\n                      (is_prime (- n 7))\n                      (is_prime\
    \ (- n 8))\n                      (is_prime (- n 9))\n                      (is_prime\
    \ (- n 10))\n                      (is_prime (- n 11))\n                     \
    \ (is_prime (- n 12))\n                      (is_prime (- n 13))\n           \
    \           (is_prime (- n 14))\n                      (is_prime (- n 15))\n \
    \                     (is_prime (- n 16))\n                      (is_prime (-\
    \ n 17))\n                      (is_prime (- n 18))\n                      (is_prime\
    \ (- n 19))\n                      (is_prime (- n 20))\n                     \
    \ (is_prime (- n 21))\n                      (is_prime (- n 22))\n           \
    \           (is_prime (- n 23))\n                      (is_prime (- n 24))\n \
    \                     (is_prime (- n 25))\n                      (is_prime (-\
    \ n 26))\n                      (is_prime (- n 27))\n                      (is_prime\
    \ (- n 28))\n                      (is_prime (- n 29))\n                     \
    \ (is_prime (- n 30))\n                      (is_prime (- n 31))\n           \
    \           (is_prime (- n 32))\n                      (is_prime (- n 33))\n \
    \                     (is_prime (- n 34))\n                      (is_prime (-\
    \ n 35))\n                      (is_prime (- n 36))\n                      (is_prime\
    \ (- n 37))\n                      (is_prime (- n 38))\n                     \
    \ (is_prime (- n 39))\n                      (is_prime (- n 40))\n           \
    \           (is_prime (- n 41))\n                      (is_prime (- n 42))\n \
    \                     (is_prime (- n 43))\n                      (is_prime (-\
    \ n 44))\n                      (is_prime (- n 45))\n                      (is_prime\
    \ (- n 46))\n                      (is_prime (- n 47))\n                     \
    \ (is_prime (- n 48))\n                      (is_prime (- n 49))\n           \
    \           (is_prime (- n 50))\n                      (is_prime (- n 51))", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (sub1 n)) (is_prime (sub2 n)))]))\n", "  (cond ((= n 1) #t)\n\
    \        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3)\
    \ #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond\
    \ ((= n 2) #t)\n        ((= n 3) #f)\n        (else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2))))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        (else\
    \ (or (is_prime (- n 1))\n                  (is_prime (- n 2))))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n",
  "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n       \
    \ [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (/\
    \ n 2))]))\n", "  (define (is-prime? n)\n    (if (= n 1)\n        #t\n       \
    \ (or (is-prime? (- n 1))\n            (or (is-prime? (- n 2))\n             \
    \   (is-prime? (- n 3))\n                (is-prime? (- n 4))\n               \
    \ (is-prime? (- n 5))\n                (is-prime? (- n 6))\n                (is-prime?\
    \ (- n 7))\n                (is-prime? (- n 8))\n                (is-prime? (-\
    \ n 9))\n                (is-prime? (- n 10))\n                (is-prime? (- n\
    \ 11))\n                (is-prime? (- n 12))\n                (is-prime? (- n\
    \ 13))\n                (is-prime? (- n 14))\n                (is-prime? (- n\
    \ 15))\n                (is-prime? (- n 16))\n                (is-prime? (- n\
    \ 17))\n                (is-prime? (- n 18))\n                (is-prime? (- n\
    \ 19))\n                (is-prime? (- n 20))\n                (is-prime? (- n\
    \ 21))\n                (is-prime? (- n 22))\n                (is-prime? (- n\
    \ 23))\n                (is-prime? (- n 24))\n                (is-prime? (- n\
    \ 25))\n                (is-prime? (- n 26))\n                (is-prime? (- n\
    \ 27))\n                (is-prime? (- n 28))\n                (is-prime? (- n\
    \ 29))\n                (is-prime? (- n 30))\n                (is-prime? (- n\
    \ 31))\n                (is-prime? (- n 32))\n                (is-prime? (- n\
    \ 33))\n                (is-prime? (- n 34))\n                (is-prime? (- n\
    \ 35))\n                (is-prime? (- n 36))\n                (is-prime? (- n\
    \ 37))\n                (is-prime? (- n 38))\n                (is-prime? (- n\
    \ 39))\n                (is-prime? (- n 40))\n                (is-prime? (- n\
    \ 41))\n                (is-prime? (- n 42))\n                (is-prime? (- n\
    \ 43))\n                (is-prime? (- n 44))\n                (is-prime? (- n\
    \ 45))\n                (is-prime? (- n 46))\n                (is-prime? (- n\
    \ 47))\n                (is-prime? (- n 48))\n                (is-prime? (- n\
    \ 49))\n                (is-prime? (- n 50))\n                (is-prime? (- n\
    \ 51))\n                (is-prime? (- n 52))\n                (is-prime? (- n\
    \ 53))\n                (is-prime? (- n 54))\n                (is-prime? (- n\
    \ 55))\n                (is-prime? (- n 56))\n", "  (let loop ((i 2))\n    (if\
    \ (= i n)\n        #t\n        (loop (+ i 1)))))\n", "  (= (mod n 2) 0))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (= (mod n 3) 0) (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [else\
    \ (or (is_prime (- n 1))\n                  (= (modulo n 2) 1))]))\n", "  (let\
    \ loop ((i 2)\n             (prime (primes? n))\n             (count 0))\n   \
    \ (if (= i n)\n        prime\n        (loop (+ i 1) (or (not prime) (prime? i))\
    \ (+ count 1)))))\n", "  (= (modulo n 2) 1))\n", "  (cond [(= n 1) #t]\n     \
    \   [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime\
    \ (- n 3)))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n\
    \ 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime (- n 2))) (is_prime (-\
    \ n 3))]))\n", "  (define (is-prime? n primes)\n    (cond [(= n 1) #t]\n     \
    \     [(prime? (car primes) n) true]\n          [else (is-prime? (cdr primes)\
    \ (cons (car primes) primes))]))\n  (is-prime? n '(2)))\n", "  (cond ((= n 1)\
    \ #t)\n        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n\
    \                   (= (modulo n n) 0))]))\n", "  (= (modulo n 2) 0))\n", "  (cond\
    \ [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n                  (= (mod\
    \ n n) 0))]))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #f)\n        (else (or\
    \ (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (= (modulo n 2) 0))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n  \
    \      [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0)]))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n", "  (define (is-prime? n)\n\
    \    (if (= n 1)\n        #t\n        (or (is-prime? (- n 1))\n            (or\
    \ (is-prime? (- n 2))\n                (is-prime? (- n 3))))))\n  (is-prime? n))\n",
  "  (cond [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n                  (=\
    \ (modulo n 2) 0))]))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime\
    \ (- n 1))\n                  (= (modulo n 2) 0))]))\n", "  (define (helper n\
    \ primes)\n    (cond ((= n 1) (= (length primes) 0))\n          ((null? primes)\
    \ #f)\n          ((null? (cdr primes)) (= (modulo n primes) 0))\n          (else\
    \ (helper (sub1 n) (cons (car primes) (cdr primes))))))\n  (helper n '()))\n",
  "  (cond [(= n 1) #t]\n        [(= (modulo n 2) 0) #f]\n        [else (is_prime\
    \ (sub1 n))]))\n", "  (define (helper n primes)\n    (cond ((= n 0) primes)\n\
    \          ((= n 1) #f)\n          ((= (mod n primes) 0) (helper (- n 1) primes))\n\
    \          (else (helper (- n 1) (cons n primes)))))\n  (helper n '()))\n", " \
    \ (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n  \
    \      [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) (is_prime\
    \ (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n\
    \                  (= (modulo n n) 0))]))\n", "  (cond [(= n 1) #t]\n        [(=\
    \ n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2)))))\n", "  (cond [(= n 2) true]\n        [else (or (is_prime (- n 1))\n\
    \                  (= (modulo n 3) 0))]))\n", "  (cond [(= n 1) true]\n      \
    \  [else (or (is_prime (- n 1))\n                  (= (mod n n) 0))]))\n", " \
    \ (define (is-prime n)\n    (if (= n 1)\n        #t\n        (if (= (modulo n\
    \ n) 0)\n            #f\n            (is-prime (sub1 n)))))\n  (is-prime n))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (let ([a (* n n)]\n                    [b (+ a n)]\n                    [c (+\
    \ b n)]\n                    [d (+ c n)]\n                    [e (+ d n)]\n  \
    \                  [f (+ e n)]\n                    [g (+ f n)]\n            \
    \        [h (+ g n)]\n                    [i (+ h n)]\n                    [j\
    \ (+ i n)]\n                    [k (+ j n)]\n                    [l (+ k n)]\n\
    \                    [m (+ l n)]\n                    [n (+ m n)]\n          \
    \          [o (+ n n)]\n                    [p (+ o n)]\n                    [q\
    \ (+ p n)]\n                    [r (+ q n)]\n                    [s (+ r n)]\n\
    \                    [t (+ s n)]\n                    [u (+ t n)]\n          \
    \          [v (+ u n)]\n                    [w (+ v n)]\n                    [x\
    \ (+ w n)]\n                    [y (+ x n)]\n                    [z (+ y n)]\n\
    \                    [a (+ z n)]\n                    [b (+ a n)]\n          \
    \          [c (+ b n)]\n                    [d (+ c n)]\n                    [e\
    \ (+ d n)]\n                    [f (+ e n)]\n                    [g (+ f n)]\n\
    \                    [h (+ g n)]\n                    [i (+ h n)]\n          \
    \          [j (+ i n)]\n                    [k (+ j n)]\n                    [l\
    \ (+ k n)]\n                    [m (+ l n)]\n                    [n (+ m n)]\n\
    \                    [o (+ n n)]\n                    [p (+ o n)]\n          \
    \          [q (+ p n)]\n                    [r (+ q n)]\n                    [s\
    \ (+ r n)]\n                    [t (+ s n)]\n                    [u (+ t n)]\n\
    \                    [v (+ u n)]\n                    [w (+ v n)]\n          \
    \          [x (+ w n)]\n                    [y (+ x n)]\n                    [z\
    \ (+ y n)]\n                    [a (+ z n)]\n                    [b (+ a n)]\n\
    \                    [c (+ b n)]\n                    [d (+ c n)]\n          \
    \          [e (+ d n)]\n                    [f (+ e n)]\n                    [g\
    \ (+ f n)]\n                    [h (+ g n)]\n                    [i (+ h n)]\n\
    \                    [j (+ i n)]\n                    [k (", "  (cond [(= n 1)\
    \ #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime\
    \ (- n 2)) (is_prime (- n 3)))]))\n", "  (= (modulo n 2) 0))\n", "  (cond [(=\
    \ n 1) true]\n        [(= n 2) true]\n        [else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2)))))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime (- n 1))\n\
    \                  (= (mod n n) 0))]))\n", "  (cond [(= n 1) #t]\n        [(=\
    \ n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime\
    \ (- n 3)))]))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime (- n 1))\n\
    \                  (= (modulo n 2) 0))]))\n", "  (define (is-prime? n primes)\n\
    \    (cond [(= n 0) true]\n          [(= n 1) true]\n          [else (or (is-prime?\
    \ (- n 1) primes)\n                    (or (is-prime? (- n 2) primes)\n      \
    \                  (is-prime? (- n 3) primes)))))\n  (is-prime? n '(2 3)))\n",
  "  (define (is-prime? n)\n    (if (= n 1)\n        #t\n        (if (even? n)\n \
    \           (is-prime? (/ n 2))\n            (is-prime? (/ n 3)))))\n  (is-prime?\
    \ n))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (= (mod n 3) 0) (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0)]))\n",
  "  (define (is-prime? n primes)\n    (cond\n      [(= n 1) true]\n      [(= (modulo\
    \ n primes) 0) false]\n      [else (is-prime? (quotient n primes) primes)]\n \
    \   )\n  )\n  (is-prime? n '(2 3 5 7 11 13 17 19))\n)\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) (is_prime\
    \ (- n 1))]))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime (- n 1))\n\
    \                   (= (modulo n 2) 0))]))\n", "  (= (modulo n 2) 0))\n", "  (cond\
    \ [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n                  (= (modulo\
    \ n n) 0))]))\n", "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) true]\n       \
    \ [else (or (is_prime (- n 1))\n                  (or (= (modulo n 2) 1)\n   \
    \                   (is_prime (/ n 2)))))]))\n", "  (cond [(= n 1) true]\n   \
    \     [(= n 2) true]\n        [else (or (is_prime (- n 1)) (is_prime (- n 2)))))\n",
  "  (let loop ((i 2))\n    (if (= i n)\n        #t\n        (loop (+ i 1)))))\n",
  "  (let loop ((i 2))\n    (if (= i n)\n        #t\n        (loop (+ i 1)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (define (is-prime? n)\n    (if (= n 1)\n\
    \        #t\n        (or (is-prime? (- n 1))\n            (or (is-prime? (- n\
    \ 2))\n                (is-prime? (- n 3))\n                (is-prime? (- n 4))\n\
    \                (is-prime? (- n 5))\n                (is-prime? (- n 6))\n  \
    \              (is-prime? (- n 7))\n                (is-prime? (- n 8))\n    \
    \            (is-prime? (- n 9))\n                (is-prime? (- n 10))\n     \
    \           (is-prime? (- n 11))\n                (is-prime? (- n 12))\n     \
    \           (is-prime? (- n 13))\n                (is-prime? (- n 14))\n     \
    \           (is-prime? (- n 15))\n                (is-prime? (- n 16))\n     \
    \           (is-prime? (- n 17))\n                (is-prime? (- n 18))\n     \
    \           (is-prime? (- n 19))\n                (is-prime? (- n 20))\n     \
    \           (is-prime? (- n 21))\n                (is-prime? (- n 22))\n     \
    \           (is-prime? (- n 23))\n                (is-prime? (- n 24))\n     \
    \           (is-prime? (- n 25))\n                (is-prime? (- n 26))\n     \
    \           (is-prime? (- n 27))\n                (is-prime? (- n 28))\n     \
    \           (is-prime? (- n 29))\n                (is-prime? (- n 30))\n     \
    \           (is-prime? (- n 31))\n                (is-prime? (- n 32))\n     \
    \           (is-prime? (- n 33))\n                (is-prime? (- n 34))\n     \
    \           (is-prime? (- n 35))\n                (is-prime? (- n 36))\n     \
    \           (is-prime? (- n 37))\n                (is-prime? (- n 38))\n     \
    \           (is-prime? (- n 39))\n                (is-prime? (- n 40))\n     \
    \           (is-prime? (- n 41))\n                (is-prime? (- n 42))\n     \
    \           (is-prime? (- n 43))\n                (is-prime? (- n 44))\n     \
    \           (is-prime? (- n 45))\n                (is-prime? (- n 46))\n     \
    \           (is-prime? (- n 47))\n                (is-prime? (- n 48))\n     \
    \           (is-prime? (- n 49))\n                (is-prime? (- n 50))\n     \
    \           (is-prime? (- n 51))\n                (is-prime? (- n 52))\n     \
    \           (is-prime? (- n 53))\n                (is-prime? (- n 54))\n     \
    \           (is-prime? (- n 55))\n                (is-prime? (- n 56))\n", " \
    \ (define (is-prime n k)\n    (if (= k 0)\n        #t\n        (if (= (modulo\
    \ n k) 0)\n            (is-prime n (sub1 k))\n            (is-prime n (sub1 k))))\n\
    \    (is-prime n 2))\n  (is-prime n 2))\n", "  (define (is-prime? n primes)\n\
    \    (cond [(= n 1) #t]\n          [(= n 2) #t]\n          [else (or (is-prime?\
    \ (- n 1) primes)\n                    (or (is-prime? (- n 2) primes)\n      \
    \                  (is-prime? (- n 3) primes))]))\n  (is-prime? n '(2 3)))\n",
  "  (cond [(= n 1) #t]\n        [else (or (is_prime (- n 1))\n                  (=\
    \ (modulo n 2) 1))]))\n", "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) true]\n\
    \        [else (or (is_prime (- n 1))\n                  (or (is_prime (- n 2))\n\
    \                      (or (is_prime (- n 3))\n                          (or (is_prime\
    \ (- n 4))\n                              (or (is_prime (- n 5))\n           \
    \                       (or (is_prime (- n 6))\n                             \
    \         (or (is_prime (- n 7))\n                                          (or\
    \ (is_prime (- n 8))\n                                              (or (is_prime\
    \ (- n 9))\n                                                  (or (is_prime (-\
    \ n 10))\n                                                      (or (is_prime\
    \ (- n 11))\n                                                          (or (is_prime\
    \ (- n 12))\n                                                              (or\
    \ (is_prime (- n 13))\n                                                      \
    \            (or (is_prime (- n 14))\n                                       \
    \                               (is_prime (- n 15)))))))))))))))))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or\
    \ (is_prime (- n 1)) (is_prime (- n 2)))))\n", "  (let loop ((i 2)\n         \
    \    (prime #f)\n             (factors #(1 2)))\n    (cond ((= i n) prime)\n \
    \         ((even? n) (loop (+ i 1) (or (not prime) (= (modulo n i) 0)) factors))\n\
    \          (else (loop (+ i 1) prime factors)))))\n", "  (define (is-prime? n)\n\
    \    (if (= n 1)\n        #t\n        (or (is-prime? (- n 1))\n            (or\
    \ (is-prime? (- n 2))\n                (or (is-prime? (- n 3))\n             \
    \       (is-prime? (- n 4))))))\n  (is-prime? n))\n", "  (= (modulo n 2) 0))\n",
  "  (= (modulo n 2) 0))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n       \
    \ [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond [(= n 1) true]\n        [else (or (is_prime (- n 1))\n                \
    \  (= (modulo n 2) 0))]))\n", "  (cond [(= n 1) #t]\n        [else (or (is_prime\
    \ (- n 1))\n                  (= (modulo n 2) 1))]))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n\
    \ 1)) (is_prime (- n 2)))]))\n", "  (cond [(= n 1) true]\n        [else (or (is_prime\
    \ (- n 1))\n                  (= (modulo n 2) 0))]))\n", "  (cond [(= n 1) #t]\n\
    \        [else (or (is_prime (- n 1))\n                  (= (modulo n n) 0))]))\n",
  "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (/\
    \ n 2))]))\n", "  (cond [(= n 2) true]\n        [else (or (is_prime (- n 1))\n\
    \                  (= (modulo n n) 0))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
