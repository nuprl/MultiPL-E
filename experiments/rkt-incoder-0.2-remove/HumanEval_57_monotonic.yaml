name: HumanEval_57_monotonic
language: rkt
prompt: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
  \ or decreasing.\n(define (monotonic l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
  \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
  \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n   \
  \ (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list\
  \ 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9\
  \ 9)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n   \
    \     (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                 \
    \  (< (car l) (cadr l)))]))\n", "  (cond ((null? l) true)\n        ((null? (cdr\
    \ l)) true)\n        ((< (car l) (car (cdr l))) (monotonic (cdr l)))\n       \
    \ (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                  (or\
    \ (> (car l) (cadr l))\n                      (< (car l) (cadr l))))]))\n", " \
    \ (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n\
    \        [else false]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                  (or (not (< (car l) (cadr l)))\n                       (not\
    \ (> (car l) (cadr l))))))))\n", "  (cond [(null? l) true]\n        [(< (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond ((null?\
    \ l) true)\n        ((null? (cdr l)) true)\n        ((< (car l) (car (cdr l)))\
    \ (monotonic (cdr l)))\n        (else (monotonic (cdr l)))))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l))\n                  (or (< car l (car l))\n                      (< car l\
    \ (cadr l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l))\n                  (or (> (car l) (cadr\
    \ l))\n                       (< (car l) (cadr l))))]))\n", "  (cond ((null? l)\
    \ true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic (cdr l)))))\n",
  "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest l))) #f]\n        [else\
    \ (monotonic (rest l))]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first l)\
    \ (first l)) #t]\n    [else (and (monotonic (rest l))\n               (not (<\
    \ (first l) (first l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                  (or (> (car\
    \ l) (cadr l))\n                       (< (car l) (cadr l))))]))\n", "  (cond\
    \ [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n     \
    \   [else false]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l))\
    \ (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic\
    \ (car l)))]))\n", "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond\n    ((null? l) true)\n   \
    \ ((< (car l) (cadr l)) (monotonic (cdr l)))\n    (else (monotonic (cdr l)))))\n",
  "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest l)))\n         (and\
    \ (monotonic (rest l))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l))\n                  (or (< (car l)\
    \ (cadr l))\n                      (> (car l) (cadr l))))]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (> (car l) (cadr l))\n                     \
    \ (< (car l) (cadr l))))]))\n", "  (cond ((null? l) #t)\n        ((null? (cdr\
    \ l)) #f)\n        ((< (car l) (car (cdr l))) #t)\n        (else (monotonic (cdr\
    \ l)))))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond ((null? l) true)\n        ((<\
    \ (car l) (cadr l)) true)\n        (else (monotonic (cdr l)))))\n", "  (cond [(empty?\
    \ l) #t]\n        [(< (first l) (first (rest l)))\n         (and (monotonic (rest\
    \ l))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (monotonic (cdr l))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(empty? l) #t]\n\
    \        [(< (first l) (first (rest l))) #f]\n        [else (monotonic (rest l))]))\n",
  "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest l)))\n         (and\
    \ (monotonic (rest l))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (", "  (cond [(empty? l) #t]\n        [(< (first l) (first\
    \ (rest l)))\n         (and (monotonic (rest l))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (", "  (cond [(empty? l) true]\n\
    \        [(< (first l) (first (rest l))) (monotonic (rest l))]\n        [else\
    \ false]))\n", "  (cond\n    [(empty? l) true]\n    [(< (first l) (first (rest\
    \ l))) (monotonic (rest l))]\n    [else (monotonic (rest l))]\n  ))\n", "  (cond\
    \ ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond\n    ((null? l) #t)\n    ((<\
    \ (car l) (cadr l)) #t)\n    (else (and (monotonic (cdr l)) (monotonic (cdr (cdr\
    \ l)))))))\n", "  (cond ((null? l) #t)\n        ((< (car l) (cadr l)) #t)\n  \
    \      (else (and (monotonic (cdr l))\n                   (or (< car l (car l))\n\
    \                       (< car l (cadr l)))))))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                  (< (car l) (cadr l)))]))\n", "  (cond\n    ((null? l) true)\n\
    \    ((< (car l) (cadr l)) true)\n    ((> (car l) (cadr l)) false)\n    (else\
    \ (monotonic (cdr l)))))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first\
    \ (rest l)))\n         (and (monotonic (rest l))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (", "  (cond\n    [(empty? l) true]\n\
    \    [(null? (rest l)) false]\n    [(< (first l) (first (rest l))) (monotonic\
    \ (rest l))]\n    [else (monotonic (rest l))]\n  ))\n", "  (cond ((null? l) true)\n\
    \        ((null? (cdr l)) false)\n        ((< (car l) (car (cdr l))) (monotonic\
    \ (cdr l)))\n        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else #f]))\n", " \
    \ (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and\
    \ (monotonic (cdr l))\n                   (< (car l) (cadr l)))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond [(empty? l) #t]\n        [(<\
    \ (first l) (first (rest l)))\n         (and (monotonic (rest l))\n          \
    \     (not (< (first l) (first (rest l))))\n               (not (> (first l) (first\
    \ (rest l))))\n               (not (> (first l) (first (rest l))))\n         \
    \      (not (> (first l) (first (rest l))))\n               (not (> (first l)\
    \ (first (rest l))))\n               (not (> (first l) (first (rest l))))\n  \
    \             (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (> (car l) (cadr l))\n                     \
    \  (< (car l) (cadr l))))]))\n", "  (cond ((null? l) true)\n        ((< (car l)\
    \ (cadr l)) true)\n        (else (monotonic (cdr l)))))\n", "  (cond [(null? l)\
    \ true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond [(empty? l) #t]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \       [else #f]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ (monotonic (cdr l))]\n        [else #f]))\n", "  (cond [(null? l) true]\n  \
    \      [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                   (not (< (car l) (cadr l))))]))\n", "  (cond ((null?\
    \ l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic (cdr\
    \ l)))))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond [(null? l) false]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                      (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(empty? l) #t]\n\
    \        [(< (first l) (first (rest l)))\n         (and (monotonic (rest l))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (",
  "  (cond\n    ((null? l) true)\n    ((< (car l) (cadr l)) (monotonic (cdr l)))\n\
    \    (else (and (monotonic (cdr l)) (monotonic (car l))))))\n", "  (cond [(empty?\
    \ l) #t]\n        [(< (first l) (first (rest l))) #t]\n        [else (and (monotonic\
    \ (rest l)) (monotonic (rest (rest l))))]))\n", "  (cond [(null? l) #t]\n    \
    \    [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n     \
    \             (or (< car l (car l))\n                      (< car l (cadr l))))]))\n",
  "  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l))\n                   (< (car l) (cadr l)))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                   (< (car l) (cadr l)))]))\n", "  (cond [(null? l)\
    \ true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest\
    \ l)))\n         (and (monotonic (rest l))\n               (not (< (first l) (first\
    \ (rest l))))\n               (not (> (first l) (first (rest l))))\n         \
    \      (not (> (first l) (first (rest l))))\n               (not (> (first l)\
    \ (first (rest l))))\n               (not (> (first l) (first (rest l))))\n  \
    \             (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (", "  (cond [(null? l) #t]\n   \
    \     [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic\
    \ (cdr (cdr l))))]))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first\
    \ (rest l)))\n         (and (monotonic (rest l))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (", "  (cond [(null? l) #t]\n   \
    \     [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n    \
    \               (not (< (car l) (cadr l))))]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n  \
    \                (or (> (car l) (cadr l))\n                      (< (car l) (cadr\
    \ l))))]))\n", "  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                 (or (< car l (car l))\n                      (< car l (cadr\
    \ l))))]))\n", "  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                 (or (> (car l) (cadr l))\n                      (< (car l) (caddr\
    \ l))))]))\n", "  (cond\n    ((null? l) true)\n    ((< (car l) (cadr l)) (monotonic\
    \ (cdr l)))\n    (else (monotonic (cdr l)))))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(< (first l) (first (rest l))) (cons (first l) (monotonic (rest l)))]\n\
    \    [else (cons (first l) (monotonic (rest l)))]))\n", "  (cond [(null? l) true]\n\
    \        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                      (<\
    \ car l (cadr l))))]))\n", "  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n\
    \        (else (and (>= (car l) (car (cdr l)))\n                   (monotonic\
    \ (cdr l)))))) ;; (>= (car l) (car (cdr l)))\n", "  (cond [(null? l) #t]\n   \
    \     [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n    \
    \              (or (< car l (car l))\n                      (< car l (cadr l))))]))\n",
  "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest l)))\n         (and\
    \ (monotonic (rest l))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (", "  (cond ((null? l) '())\n        ((< (car l) (cadr l))\
    \ (cons (car l) (monotonic (cdr l))))\n        (else (cons (car l) (monotonic\
    \ (cdr l))))))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest\
    \ l)))\n         (and (monotonic (rest l))\n               (not (< (first l) (first\
    \ (rest l))))\n               (not (> (first l) (first (rest l))))\n         \
    \      (not (> (first l) (first (rest l))))\n               (not (< (first l)\
    \ (first (rest l))))\n               (not (> (first l) (first (rest l))))\n  \
    \             (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (", "  (cond [(null? l) #t]\n   \
    \     [(< (car l) (cadr l)) #t]\n        [else (monotonic (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) true]\n    [(< (first l) (first (rest l))) (monotonic (rest l))]\n\
    \    [else (monotonic (rest l))]\n  ))\n", "  (cond [(null? l) true]\n       \
    \ [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond\n    ((null? l) true)\n    ((<\
    \ (car l) (cadr l)) (monotonic (cdr l)))\n    (else (monotonic (cdr l)))))\n",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n\
    \        [else false]))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first\
    \ (rest l)))\n         (and (monotonic (rest l))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (", "  (cond [(null? l) false]\n\
    \        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond ((null? l) true)\n        ((<\
    \ (car l) (cadr l)) true)\n        (else (monotonic (cdr l)))))\n", "  (cond [(null?\
    \ l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else\
    \ false]))\n", "  (cond\n    ((null? l) '())\n    ((< (car l) (cadr l)) (cons\
    \ (car l) (monotonic (cdr l))))\n    (else (cons (car l) (monotonic (cdr l))))))\n",
  "  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n\
    \        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(< (first l) (first (rest l))) #f]\n        [else\
    \ (monotonic (rest l))]))\n", "  (cond [(empty? l) #t]\n        [(< (car l) (cadr\
    \ l)) #t]\n        [else (and (monotonic (cdr l))\n                  (or (< car\
    \ l (car l))\n                      (< car l (cadr l))))]))\n", "  (cond\n   \
    \ [(empty? l) #t]\n    [(< (first l) (first (rest l))) #f]\n    [else (and (monotonic\
    \ (rest l)) (monotonic (rest (rest l))))]))\n", "  (cond [(null? l) true]\n  \
    \      [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else (monotonic (cdr l))]))\n", "  (cond [(null? l) #t]\n\
    \        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n \
    \                 (or (> (car l) (cadr l))\n                       (< (car l)\
    \ (caddr l))))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l))\
    \ (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n  \
    \                (or (> (car l) (cadr l))\n                      (< (car l) (cadr\
    \ l))))]))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest l)))\n\
    \         (and (monotonic (rest l))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (", "  (cond [(null? l) true]\n        [(< (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(null?\
    \ l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else\
    \ false]))\n", "  (cond\n    [(empty? l) true]\n    [(< (first l) (first (rest\
    \ l)))\n     (monotonic (rest l))]\n    [else false]))\n", "  (cond [(null? l)\
    \ true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n\
    \        [else false]))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first\
    \ (rest l)))\n         (and (monotonic (rest l))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (", "  (cond [(null? l) true]\n \
    \       [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n\
    \        [else (monotonic (cdr l))]))\n", "  (cond [(empty? l) #t]\n        [(<\
    \ (first l) (first (rest l)))\n         (and (monotonic (rest l))\n          \
    \     (not (< (first l) (first (rest l))))\n               (not (> (first l) (first\
    \ (rest l))))\n               (not (> (first l) (first (rest l))))\n         \
    \      (not (< (first l) (first (rest l))))\n               (not (> (first l)\
    \ (first (rest l))))\n               (not (< (first l) (first (rest l))))\n  \
    \             (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (> (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (> (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (> (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n\
    \        [else false]))\n", "  (cond [(null? l) false]\n        [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n        [else (monotonic (cdr l))]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                   (< (car l) (cadr l)))]))\n", "  (cond\n    [(empty?\
    \ l) true]\n    [(< (first l) (first (rest l))) (monotonic (rest l))]\n    [else\
    \ (monotonic (rest l))]\n  ))\n", "  (cond [(null? l) false]\n        [(< (car\
    \ l) (cadr l)) (monotonic (cdr l))]\n        [else (monotonic (cdr l))]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr (cdr l))))]))\n", "  (cond [(null? l) #t]\n       \
    \ [(< (car l) (cadr l)) #t]\n        [else (monotonic (cdr l))]))\n", "  (cond\
    \ ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l))\n                   (not (< (car l) (cadr\
    \ l))))]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n  \
    \      [else (and (monotonic (cdr l))\n                  (or (< car l (car l))\n\
    \                      (< car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n  \
    \                (or (> (car l) (cadr l))\n                      (< (car l) (cadr\
    \ l))))]))\n", "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond ((null? l) true)\n        ((<\
    \ (car l) (cadr l)) true)\n        (else (monotonic (cdr l)))))\n", "  (cond ((null?\
    \ l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic (cdr\
    \ l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n    \
    \    [else (and (monotonic (cdr l))\n                  (or (< car l (car l))\n\
    \                      (< car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n  \
    \                (or (> (car l) (cadr l))\n                      (< (car l) (cadr\
    \ l))))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond ((null? l) #t)\n        ((null?\
    \ (cdr l)) #f)\n        (else (and (>= (car l) (car (cdr l)))\n              \
    \     (monotonic (cdr l)))))) ;; (>= (car l) (car (cdr l)))\n", "  (cond [(empty?\
    \ l) true]\n        [(< (first l) (first (rest l)))\n         (monotonic (rest\
    \ l))]\n        [else (and (monotonic (rest l))\n                   (not (< (first\
    \ l) (first (rest l))))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first\
    \ l) (first (rest l)))\n     (and (monotonic (rest l))\n          (or (not (<\
    \ (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))))\n     (and (monotonic (rest l))\n          (or (not (< (first l) (first\
    \ (rest l))))\n               (not (> (first l) (first (rest l))))))\n     #f]\n\
    \    [(> (first l) (first (rest l)))\n     (and (monotonic (rest l))\n       \
    \   (or (not (< (first l) (first (rest l))))\n               (not (> (first l)\
    \ (first (rest l))))))\n     #f]\n    [else #f]))\n", "  (cond [(null? l) true]\n\
    \        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                   (not (< (car l) (cadr l))))]))\n", "  (cond [(empty?\
    \ l) true]\n        [(< (first l) (first (rest l))) (monotonic (rest l))]\n  \
    \      [else (monotonic (rest l))]))\n", "  (cond [(null? l) #t]\n        [(<\
    \ (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n            \
    \      (or (< car l (car l))\n                       (< car l (cadr l))))]))\n",
  "  (cond [(empty? l) true]\n        [(< (first l) (first (rest l))) (monotonic (rest\
    \ l))]\n        [else (monotonic (rest l))]))\n", "  (cond [(empty? l) #t]\n \
    \       [(< (first l) (first (rest l)))\n         (and (monotonic (rest l))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (",
  "  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n        (else (and (< (car\
    \ l) (cadr l))\n                   (monotonic (cdr l))))))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else #f]))\n",
  "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l)) (monotonic (cdr l)))]))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (monotonic\
    \ (cdr l))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                 \
    \ (or (< car l (car l))\n                      (< car l (cadr l))))]))\n", " \
    \ (cond [(empty? l) #t]\n        [(< (first l) (first (rest l))) #t]\n       \
    \ [else (and (monotonic (rest l))\n                   (not (< (first l) (first\
    \ (rest l))))))]))\n", "  (cond ((null? l) true)\n        ((< (car l) (cadr l))\
    \ true)\n        (else (monotonic (cdr l)))))\n", "  (cond ((null? l) true)\n\
    \        ((< (car l) (cadr l)) (monotonic (cdr l)))\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n        [else false]))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic\
    \ (cdr l))\n                  (or (< car l (car l))\n                      (<\
    \ car l (cadr l))))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond ((null? l) #f)\n\
    \        ((< (car l) (cadr l)) #t)\n        (else (monotonic (cdr l)))))\n", " \
    \ (cond [(empty? l) true]\n        [(< (first l) (first (rest l))) (monotonic\
    \ (rest l))]\n        [else (monotonic (rest l))]\n        ))\n", "  (cond ((null?\
    \ l) true)\n        ((null? (cdr l)) true)\n        ((< (car l) (car (cdr l)))\
    \ (monotonic (cdr l)))\n        (else (monotonic (cdr l)))))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (and (monotonic (cdr\
    \ l))\n                   (< (car l) (cadr l)))]))\n", "  (cond ((null? l) true)\n\
    \        ((null? (cdr l)) true)\n        ((< (car l) (car (cdr l))) (monotonic\
    \ (cdr l)))\n        (else (monotonic (cdr l)))))\n", "  (cond [(empty? l) true]\n\
    \        [(< (first l) (first (rest l))) (monotonic (rest l))]\n        [else\
    \ (monotonic (rest l))]))\n", "  (cond [(null? l) true]\n        [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(empty? l) #t]\n\
    \        [(< (first l) (first (rest l)))\n         (and (monotonic (rest l))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (< (first\
    \ l) (first (rest l))))\n               (not (< (first l) (first (rest l))))\n\
    \               (not (< (first l) (first (rest l))))\n               (not (",
  "  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n\
    \        [else (monotonic (cdr l))]))\n", "  (cond ((null? l) true)\n        ((<\
    \ (car l) (cadr l)) true)\n        (else (monotonic (cdr l)))))\n", "  (cond ((null?\
    \ l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic (cdr\
    \ l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n    \
    \    [else (and (monotonic (cdr l))\n                  (or (< car l (car l))\n\
    \                      (< car l (cadr l))))]))\n", "  (cond [(null? l) #t]\n \
    \       [(< (car l) (cadr l)) #t]\n        [else (monotonic (cdr l))]))\n", " \
    \ (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l))\n                  (or (< car l (car l))\n\
    \                      (< car l (cadr l))))]))\n", "  (cond\n    ((null? l) '())\n\
    \    ((< (car l) (cadr l)) (cons (car l) (monotonic (cdr l))))\n    (else (cons\
    \ (car l) (monotonic (cdr l))))))\n", "  (cond [(null? l) #t]\n        [(< (car\
    \ l) (cadr l)) #t]\n        [else (and (monotonic (cdr l))\n                 \
    \  (not (< (car l) (cadr l))))]))\n", "  (cond [(empty? l) #t]\n        [(< (first\
    \ l) (first (rest l)))\n         (and (monotonic (rest l))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (", "  (cond\n    [(empty?\
    \ l) #t]\n    [(< (first l) (first (rest l)))\n     (and (monotonic (rest l))\n\
    \          (or (not (< (first l) (first (rest l))))\n              (and (monotonic\
    \ (rest l))\n                  (or (not (< (first l) (first (rest l))))\n    \
    \                  (and (monotonic (rest l))\n                          (or (not\
    \ (< (first l) (first (rest l))))\n                              (and (monotonic\
    \ (rest l))\n                                  (or (not (< (first l) (first (rest\
    \ l))))\n                                      (and (monotonic (rest l))\n   \
    \                                       (or (not (< (first l) (first (rest l))))\n\
    \                                              (and (monotonic (rest l))\n   \
    \                                               (or (not (< (first l) (first (rest\
    \ l))))\n                                                      (and (monotonic\
    \ (rest l))\n                                                          (or (not\
    \ (< (first l) (first (rest l))))\n                                          \
    \                    (and (monotonic (rest l))\n                             \
    \                                     (or (not (< (first l) (first (rest l))))\n\
    \                                                                      (and (monotonic\
    \ (rest l))\n                                                                \
    \          (or (not (< (first l) (first (rest l))))\n                        \
    \                                                      (and (monotonic (rest l))\n\
    \                                                                            \
    \      (or (not (< (first l) (first (rest l))))\n                            \
    \                                                          (and (monotonic (rest\
    \ l))\n                                                                      \
    \                    (or (not (< (first l) (first (rest l))))\n              \
    \                                                                            \
    \    (and (monotonic (rest l))\n                                             \
    \                                                     (or (not (< (first l) (first\
    \ (rest l))))\n                                                              \
    \                                        (and (monotonic (rest l))\n         \
    \                                                                            \
    \                     (or (not (< (first l) (first (rest l))))\n             \
    \                                                                            \
    \                     (and (monotonic (rest l))\n                            \
    \                                                                            \
    \          (or (not (< (first l) (first (rest l))))\n                        \
    \                                                                            \
    \                  (and (monotonic (rest l))\n                               \
    \                                                                            \
    \               (or (not (< (first l) (first (rest l))))\n                   \
    \                                                                            \
    \                               (and (monotonic (rest l))\n                  \
    \                                                                            \
    \                                    (or (not (< (first l) (first (rest l))))\n\
    \                                                                            \
    \                                                          (and (monotonic (rest\
    \ l))\n                                                                      \
    \                                                                    (or (not\
    \ (< (first l) (first (rest l))))\n                                          \
    \                                                                            \
    \                        (and (monotonic (rest l))\n                         \
    \                                                                            \
    \                                             (or (not (< (first l) (first (rest\
    \ l))))\n                                                                    \
    \                                                                            \
    \      (and (monotonic (rest l))\n                                           \
    \                                                                            \
    \                                   (or (", "  (cond [(null? l) false]\n     \
    \   [(< (car l) (cadr l)) (monotonic (cdr l))]\n        [else (monotonic (cdr\
    \ l))]))\n", "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest l)))\n\
    \         (and (monotonic (rest l))\n               (not (monotonic (rest l))))]\n\
    \        [else #f]))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l))\
    \ #t]\n        [else (and (monotonic (cdr l))\n                  (or (> (car l)\
    \ (cadr l))\n                      (< (car l) (caddr l))))]))\n", "  (cond [(empty?\
    \ l) empty]\n        [(< (first l) (first (rest l)))\n         (cons (first l)\
    \ (monotonic (rest l)))]\n        [else (cons (first l) (monotonic (rest l)))]))\n",
  "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else (monotonic\
    \ (cdr l)))))\n", "  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n\
    \        [else (and (monotonic (cdr l))\n                  (or (not (< (car l)\
    \ (cadr l)))\n                      (< (cadr l) (car l))))]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(< (first l) (first (rest l)))\n         (and (monotonic (rest\
    \ l))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (< (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (< (first l) (first (rest l))))\n               (not\
    \ (", "  (cond [(empty? l) #t]\n        [(< (first l) (first (rest l)))\n    \
    \     (and (monotonic (rest l))\n               (not (< (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (> (first l) (first (rest l))))\n               (not\
    \ (> (first l) (first (rest l))))\n               (not (> (first l) (first (rest\
    \ l))))\n               (not (", "  (cond [(null? l) true]\n        [(< (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond [(null?\
    \ l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else (monotonic (cdr l))]))\n",
  "  (cond ((null? l) true)\n        ((< (car l) (cadr l)) (monotonic (cdr l)))\n\
    \        (else (monotonic (cdr l)))))\n", "  (cond [(null? l) true]\n        [(<\
    \ (car l) (cadr l)) (monotonic (cdr l))]\n        [else false]))\n", "  (cond\
    \ [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr l))]\n     \
    \   [else false]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
