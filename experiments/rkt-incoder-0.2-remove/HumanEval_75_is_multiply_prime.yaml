name: HumanEval_75_is_multiply_prime
language: rkt
prompt: "#lang racket\n\n;; Write a function that returns true if the given number\
  \ is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing\
  \ that (a) is less then 100. \n;; Example:\n;; 30 = 2 * 3 * 5\n(define (is_multiply_prime\
  \ a)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n\
  \    (check-equal? (candidate 5) #f)\n    (check-equal? (candidate 30) #t)\n   \
  \ (check-equal? (candidate 8) #t)\n    (check-equal? (candidate 10) #f)\n    (check-equal?\
  \ (candidate 125) #t)\n    (check-equal? (candidate 105) #t)\n    (check-equal?\
  \ (candidate 126) #f)\n    (check-equal? (candidate 729) #f)\n    (check-equal?\
  \ (candidate 891) #f)\n    (check-equal? (candidate 1001) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= a 1) true]\n    [(= a 2) true]\n    [(= a 3) true]\n\
    \    [else (and (is_multiply_prime (- a 2)) (is_multiply_prime (- a 3)))]))\n",
  "  (< (* a a) 100))\n", "  (cond\n    [(= a 1) true]\n    [(= a 2) true]\n    [else\
    \ (and (is_multiply_prime (- a 3)) (is_multiply_prime (- a 5)))]))\n", "  (cond\n\
    \    [(= a 1) true]\n    [(= a 2) true]\n    [(= a 3) true]\n    [else (and (is_multiply_prime\
    \ (- a 2)) (is_multiply_prime (- a 3)))]))\n", "  (cond\n    [(= a 1) true]\n\
    \    [(= a 2) true]\n    [(= a 3) true]\n    [else (and (is_multiply_prime (-\
    \ a 2)) (is_multiply_prime (- a 3)))]))\n", "  (cond\n    [(= a 1) true]\n   \
    \ [(= a 2) true]\n    [(= a 3) true]\n    [else (and (is_multiply_prime (- a 2))\
    \ (is_multiply_prime (- a 3)))]))\n", "  (cond\n    [(= a 1) true]\n    [(= a\
    \ 2) true]\n    [(= a 3) true]\n    [else (is_multiply_prime (- a 1))]))\n", " \
    \ (cond\n    [(= a 1) true]\n    [(= a 2) true]\n    [(= a 3) true]\n    [else\
    \ (and (is_multiply_prime (- a 2)) (is_multiply_prime (- a 3)))]))\n", "  (cond\
    \ [(= a 1) true]\n        [(= a 2) true]\n        [(= a 3) true]\n        [else\
    \ (and (is_multiply_prime (- a 2)) (is_multiply_prime (- a 3)))]))\n", "  (cond\
    \ [(= a 1) true]\n        [(= a 2) true]\n        [(= a 3) true]\n        [else\
    \ (is_multiply_prime (- a 1))]))\n", "  (cond\n    [(= a 1) true]\n    [(= a 2)\
    \ true]\n    [(= a 3) true]\n    [else false]))\n", "  (< (- a 100) 0))\n", " \
    \ (cond\n    [(= a 1) true]\n    [(= a 2) true]\n    [(= a 3) true]\n    [else\
    \ (and (is_multiply_prime (- a 3)) (is_multiply_prime (- a 5)))]))\n", "  (cond\n\
    \    [(= a 1) true]\n    [(= a 2) true]\n    [else (and (is_multiply_prime (-\
    \ a 3)) (is_multiply_prime (- a 5)))]))\n", "  (cond\n    [(= a 1) true]\n   \
    \ [(= a 2) true]\n    [(= a 3) true]\n    [else false]))\n", "  (< (* a a) 100))\n",
  "  (cond\n    [(= a 1) true]\n    [(= a 2) true]\n    [(= a 3) true]\n    [else\
    \ (and (is_multiply_prime (- a 2)) (is_multiply_prime (- a 3)))]))\n", "  (cond\n\
    \    [(= a 1) true]\n    [(= a 2) true]\n    [(= a 3) true]\n    [else false]))\n",
  "  (cond\n    [(= a 1) true]\n    [(= a 2) true]\n    [else (and (is_multiply_prime\
    \ (- a 3)) (is_multiply_prime (- a 5)))]))\n", "  (cond [(= a 1) true]\n     \
    \   [(= a 2) true]\n        [(= a 3) true]\n        [else (is_multiply_prime (-\
    \ a 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
