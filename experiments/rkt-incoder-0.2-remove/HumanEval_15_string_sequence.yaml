name: HumanEval_15_string_sequence
language: rkt
prompt: "#lang racket\n\n;; Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n(define (string_sequence n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n\
  \    (check-equal? (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2\
  \ 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
completions: ["  (let loop ((i 0))\n    (if (< i n)\n        (string-append (number->string\
    \ i) \" \")\n        '())))\n", "  (let loop ((i 0))\n    (if (< i n)\n      \
    \  (string-append (number->string i) \" \")\n        (loop (+ i 1)))))\n", " \
    \ (let loop ((i 0))\n    (if (< i n)\n        (string-append (number->string i)\
    \ \" \")\n        (loop (+ i 1)))))\n", "  (let loop ((i 0) (s \"\"))\n    (if\
    \ (< i n)\n        (loop (+ i 1) (cons i s))\n        s)))\n", "  (let loop ((i\
    \ 0) (s \"\"))\n    (if (< i n)\n        (loop (+ i 1) (cons (string->number i)\
    \ s))\n        s)))\n", "  (let loop ((i 0))\n    (if (< i n)\n        (string-append\
    \ (number->string i) \" \")\n        (loop (+ i 1)))))\n", "  (let loop ((i 0))\n\
    \    (if (< i n)\n        (string-append (number->string i) (string-append \"\
    \ \" (number->string i))\n                      (loop (+ i 1))))\n        '())))\n",
  "  (let loop ((i 0))\n    (if (< i n)\n        (string-append (number->string i)\
    \ \" \")\n        (loop (+ i 1)))))\n", "  (let loop ((i 0) (s \"\"))\n    (if\
    \ (< i n)\n        (loop (+ i 1) (append s (list i))) (list s))))\n", "  (let\
    \ loop ((i 0))\n    (if (< i n)\n        (string-append (number->string i) \"\
    \ \")\n        (loop (+ i 1)))))\n", "  (let loop ((i 0))\n    (if (< i n)\n \
    \       (string-append (number->string i) \" \")\n        (loop (+ i 1)))))\n",
  "  (let loop ((i 0) (s \"\"))\n    (if (< i n)\n        (loop (+ i 1) (cons i s))\n\
    \        s)))\n", "  (let loop ((i 0))\n    (if (< i n)\n        (string-append\
    \ (number->string i) \" \")\n        (loop (+ i 1)))))\n", "  (let loop ((i 0))\n\
    \    (if (< i n)\n        (string-append (number->string i) (string-append \"\
    \ \" (number->string i))\n                      (loop (+ i 1)))))\n  (number->string\
    \ 0))\n", "  (let loop ((i 0))\n    (if (< i n)\n        (string-append (number->string\
    \ i) \" \")\n        (loop (+ i 1)))))\n", "  (let loop ((i 0))\n    (if (< i\
    \ n)\n        (string-append (number->string i) \" \")\n        (loop (+ i 1)))))\n",
  "  (let loop ((i 0) (s \"\"))\n    (if (< i n)\n        (loop (+ i 1) (cons (string->number\
    \ i) s))\n        s)))\n", "  (let loop ((i 0))\n    (if (< i n)\n        (string-append\
    \ (number->string i) \" \")\n        (loop (+ i 1)))))\n", "  (let loop ((i 0)\
    \ (s \"\"))\n    (if (< i n)\n        (loop (+ i 1) (cons i s))\n        s)))\n",
  "  (let loop ((i 0))\n    (if (< i n)\n        (string-append (number->string i)\
    \ \" \")\n        (loop (+ i 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
