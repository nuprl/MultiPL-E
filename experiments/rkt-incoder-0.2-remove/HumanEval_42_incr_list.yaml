name: HumanEval_42_incr_list
language: rkt
prompt: "#lang racket\n\n;; Return list with elements incremented by 1.\n(define (incr_list\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate incr_list))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 3 2 1)) (list 4 3 2))\n    (check-equal? (candidate (list 5 2 5 2 3 3 9 0 123))\
  \ (list 6 3 6 3 4 4 10 1 124))\n))\n\n(test-humaneval)"
completions: ["  (if (null? l)\n      '()\n      (cons (+ 1 (car l))\n           \
    \ (incr_list (cdr l)))))\n", "  (if (null? l)\n      '()\n      (cons (+ 1 (car\
    \ l)) (incr_list (cdr l)))))\n", "  (if (null? l)\n      '()\n      (cons (+ 1\
    \ (car l)) (incr_list (cdr l)))))\n", "  (cond [(empty? l) '()]\n        [else\
    \ (cons (car l) (cons (+ 1 (car l)) (incr_list (cdr l))))]))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ 1 (car l))\n            (incr_list (cdr l)))))\n",
  "  (if (null? l)\n      '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n",
  "  (if (null? l)\n      '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n",
  "  (if (null? l)\n      '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n",
  "  (if (null? l)\n      '()\n      (cons (+ 1 (car l))\n            (incr_list (cdr\
    \ l)))))\n", "  (cond [(empty? l) empty]\n        [else (cons (car l) (cons (+\
    \ 1 (car l)) (incr_list (cdr l))))]))\n", "  (if (null? l)\n      '()\n      (cons\
    \ (+ 1 (car l)) (incr_list (cdr l)))))\n", "  (cond [(empty? l) empty]\n     \
    \   [else (cons (car l) (+ 1 (incr_list (cdr l))))]))\n", "  (if (null? l)\n \
    \     '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ (car l) 1) (incr_list (cdr l)))))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ 1 (car l)) (incr_list (cdr l)))))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ (car l) 1) (incr_list (cdr l)))))\n", "  (if (null?\
    \ l)\n      '()\n      (cons (+ (car l) 1) (incr_list (cdr l)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
