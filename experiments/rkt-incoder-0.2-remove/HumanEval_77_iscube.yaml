name: HumanEval_77_iscube
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes an integer a and returns True\
  \ \n;; if this ingeger is a cube of some integer number.\n;; Note: you may assume\
  \ the input is always valid.\n;; Examples:\n(define (iscube a)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate iscube))\n\
  \    (check-equal? (candidate 1) #t)\n    (check-equal? (candidate 2) #f)\n    (check-equal?\
  \ (candidate -1) #t)\n    (check-equal? (candidate 64) #t)\n    (check-equal? (candidate\
  \ 180) #f)\n    (check-equal? (candidate 1000) #t)\n    (check-equal? (candidate\
  \ 0) #t)\n    (check-equal? (candidate 1729) #f)\n))\n\n(test-humaneval)"
completions: ["  (= (* a a a a) a))\n", "  (= (* a a a a) a))\n", "  (= (* a a a)\
    \ a))\n", "  (= (* a a a) a))\n", "  (= (* a a a) a))\n", "  (= (* a a a) a))\n",
  "  (= (mod a 3) 0))\n", "  (= (* a a a) a))\n", "  (= (mod a 3) 0))\n", "  (= (mod\
    \ a 3) 0)\n  (= (mod a 5) 0)\n  (= (mod a 7) 0)\n  (= (mod a 9) 0)\n  (= (mod\
    \ a 11) 0)\n  (= (mod a 13) 0)\n  (= (mod a 15) 0)\n  (= (mod a 17) 0)\n  (= (mod\
    \ a 19) 0)\n  (= (mod a 21) 0)\n  (= (mod a 23) 0)\n  (= (mod a 25) 0)\n  (= (mod\
    \ a 27) 0)\n  (= (mod a 29) 0)\n  (= (mod a 31) 0)\n  (= (mod a 33) 0)\n  (= (mod\
    \ a 35) 0)\n  (= (mod a 37) 0)\n  (= (mod a 39) 0)\n  (= (mod a 41) 0)\n  (= (mod\
    \ a 43) 0)\n  (= (mod a 45) 0)\n  (= (mod a 47) 0)\n  (= (mod a 49) 0)\n  (= (mod\
    \ a 51) 0)\n  (= (mod a 53) 0)\n  (= (mod a 55) 0)\n  (= (mod a 57) 0)\n  (= (mod\
    \ a 59) 0)\n  (= (mod a 61) 0)\n  (= (mod a 63) 0)\n  (= (mod a 65) 0)\n  (= (mod\
    \ a 67) 0)\n  (= (mod a 69) 0)\n  (= (mod a 71) 0)\n  (= (mod a 73) 0)\n  (= (mod\
    \ a 75) 0)\n  (= (mod a 77) 0)\n  (= (mod a 79) 0)\n  (= (mod a 81) 0)\n  (= (mod\
    \ a 83) 0)\n  (= (mod a 85) 0)\n  (= (mod a 87) 0)\n  (= (mod a 89) 0)\n  (= (mod\
    \ a 91) 0)\n  (= (mod a 93) 0)\n  (= (mod a 95) 0)\n  (= (mod a 97) 0)\n  (= (mod\
    \ a 99) 0)\n  (= (mod a 101) 0)\n  (= (mod a 103) 0)\n  (= (mod a 105) 0)\n  (=\
    \ (mod a 107) 0)\n  (= (mod a 109) 0)\n  (= (mod a 111) 0)\n  (= (mod a 113) 0)\n\
    \  (= (mod a 115) 0)\n  (= ", "  (= (* a a a) a))\n", "  (= (mod a 3) 0))\n",
  "  (= (* a a a) a))\n", "  (cond\n    [(= a 1) true]\n    [(= a 2) true]\n    [(=\
    \ a 3) true]\n    [(= a 4) true]\n    [(= a 5) true]\n    [(= a 6) true]\n   \
    \ [(= a 7) true]\n    [(= a 8) true]\n    [(= a 9) true]\n    [(= a 10) true]\n\
    \    [(= a 11) true]\n    [(= a 12) true]\n    [(= a 13) true]\n    [(= a 14)\
    \ true]\n    [(= a 15) true]\n    [(= a 16) true]\n    [(= a 17) true]\n    [(=\
    \ a 18) true]\n    [(= a 19) true]\n    [(= a 20) true]\n    [(= a 21) true]\n\
    \    [(= a 22) true]\n    [(= a 23) true]\n    [(= a 24) true]\n    [(= a 25)\
    \ true]\n    [(= a 26) true]\n    [(= a 27) true]\n    [(= a 28) true]\n    [(=\
    \ a 29) true]\n    [(= a 30) true]\n    [(= a 31) true]\n    [(= a 32) true]\n\
    \    [(= a 33) true]\n    [(= a 34) true]\n    [(= a 35) true]\n    [(= a 36)\
    \ true]\n    [(= a 37) true]\n    [(= a 38) true]\n    [(= a 39) true]\n    [(=\
    \ a 40) true]\n    [(= a 41) true]\n    [(= a 42) true]\n    [(= a 43) true]\n\
    \    [(= a 44) true]\n    [(= a 45) true]\n    [(= a 46) true]\n    [(= a 47)\
    \ true]\n    [(= a 48) true]\n    [(= a 49) true]\n    [(= a 50) true]\n    [(=\
    \ a 51) true]\n    [(= a 52) true]\n    [(= a 53) true]\n    [(= a 54) true]\n\
    \    [(= a 55) true]\n    [(= a 56) true]\n    [(= a 57) true]\n    [(= a 58",
  "  (= (* a a a a) a))\n", "  (= (* a a a) a))\n", "  (= (* a a a) a))\n", "  (=\
    \ (mod a 3) 0))\n", "  (= (* a a a) a))\n", "  (= (* a a a a) a))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
