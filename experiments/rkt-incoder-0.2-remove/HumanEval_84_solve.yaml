name: HumanEval_84_solve
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer N, return the total sum of its\
  \ digits in binary.\n;; Example\n;; Variables:\n;; @N integer\n;; Constraints: 0\
  \ \u2264 N \u2264 10000.\n;; Output:\n;; a string of binary number\n(define (solve\
  \ N)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate 1000) \"1\")\n    (check-equal? (candidate 150) \"\
  110\")\n    (check-equal? (candidate 147) \"1100\")\n    (check-equal? (candidate\
  \ 333) \"1001\")\n    (check-equal? (candidate 963) \"10010\")\n))\n\n(test-humaneval)"
completions: ["  (let loop ((N N) (S '()))\n    (if (= N 0)\n        (reverse S)\n\
    \        (loop (quotient N 2) (cons (remainder N 2) S)))))\n", "  (define (sum\
    \ n acc)\n    (if (= n 0)\n        acc\n        (sum (sub1 n) (cons (modulo (modulo\
    \ n 2) 2) acc))))\n  (sum (modulo N 2) '()))\n", "  (if (= N 0)\n      '(0)\n\
    \      (+ (string-append (number->string N) '(1))\n         (solve (sub1 N)))))\n",
  "  (cond\n    [(= N 0) '0]\n    [(= N 1) '1]\n    [else (+ (solve (sub1 N)) (list\
    \ (char-bin (digit-char (sub1 N))))))))\n", "  (cond\n    [(= N 0) \"\"]\n   \
    \ [else (add-to-string (number->string N) solve)]\n  )\n)\n", "  (let loop ((N\
    \ N) (S '()))\n    (if (= N 0)\n        (reverse S)\n        (loop (quotient N\
    \ 2) (cons (remainder N 2) S)))))\n", "  (define (helper N sum)\n    (if (= N\
    \ 0)\n        sum\n        (helper (quotient N 2) (+ sum (modulo N 2)))))\n  (helper\
    \ (quotient N 2) 0))\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "  (if (=\
    \ N 0)\n      '0\n      (let ((sum (string-append (solve (quotient N 2)) (string-append\
    \ (number->string N) '0'))))\n        (if (= (length sum) 4)\n            (string-append\
    \ (substring sum 0 3) '1')\n            sum))))\n", "  (if (= N 0)\n      '()\n\
    \      (append (list (modulo (quotient N 2) 10))\n              (solve (quotient\
    \ N 2)))))\n", "  (let loop ((N N) (acc '()))\n    (if (= N 0)\n        (reverse\
    \ acc)\n        (loop (quotient N 2) (cons (remainder N 2) acc)))))\n", "  (define\
    \ (sum-digits N)\n    (if (= N 0)\n        '()\n        (cons (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo (modulo\
    \ (modulo (modulo (", "  (if (= N 0)\n      '0\n      (let ((sum (string-append\
    \ (solve (sub1 N)) (list (char-bin N))))\n            (sum (string-append (solve\
    \ (sub1 N)) (list (char-bin (sub1 N))))))\n        (if (= (length sum) 4)\n  \
    \          (string-append sum \"0\")\n            sum))))\n", "  (let loop ((N\
    \ N) (S '()))\n    (if (= N 0)\n        (reverse S)\n        (loop (quotient N\
    \ 2) (cons N S)))))\n", "  (let loop ((N N) (acc '()))\n    (if (= N 0)\n    \
    \    (reverse acc)\n        (loop (quotient N 2) (cons (remainder N 2) acc)))))\n",
  "  (let loop ((N N) (S '()))\n    (if (= N 0)\n        S\n        (loop (quotient\
    \ N 2) (cons (remainder N 2) S)))))\n", "  (if (= N 0)\n      '(0)\n      (let\
    \ ((sum (string-append (solve (sub1 N)) (list (digit-char (modulo N 10))))))\n\
    \        (if (= (length sum) 0)\n            (string-append '(0) sum)\n      \
    \      (string-append sum '(0))\n        )\n      )\n    )\n  )\n", "  (if (=\
    \ N 0)\n      '()\n      (append (list (list (modulo (modulo N 2) 2) (modulo N\
    \ 2) 2))\n              (solve (quotient N 2)))))\n", "  (if (= N 0)\n      '()\n\
    \      (append (solve (quotient N 2))\n              (list (modulo N 2)))))\n",
  "  (if (= N 0)\n      '0\n      (let ([s (string-append (solve (sub1 N)) (list (char-bin\
    \ N)))])\n        (if (= (length s) 1)\n            (string-append s '0)\n   \
    \         (string-append s '1)))\n      (let ([s (string-append (solve (sub1 N))\
    \ (list (char-bin N)))])\n        (if (= (length s) 1)\n            (string-append\
    \ s '0)\n            (string-append s '1)))))\n", "  (define (sum N acc)\n   \
    \ (if (= N 0)\n        acc\n        (sum (quotient N 2) (+ acc (modulo N 2)))))\n\
    \  (sum (quotient N 2) 0))\n</code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0\
    \ |>\n<code>"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
