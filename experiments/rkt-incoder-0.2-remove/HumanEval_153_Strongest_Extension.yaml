name: HumanEval_153_Strongest_Extension
language: rkt
prompt: "#lang racket\n\n;; You will be given the name of a class (a string) and a\
  \ list of extensions.\n;; The extensions are to be used to load additional classes\
  \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
  \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
  \ number of lowercase letters \n;; in the extension's name, the strength is given\
  \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
  \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are\
  \ two or more extensions with the same strength, you should\n;; choose the one that\
  \ comes first in the list.\n;; For example, if you are given \"Slices\" as the class\
  \ and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n;; (its strength is -1).\n;; Example:\n(define (Strongest_Extension\
  \ class_name extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions)\
    \ (first class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n\
    \    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) class_name)\
    \ (Strongest_Extension (first extensions) (rest extensions))]\n    [else (Strongest_Extension\
    \ (first extensions) (append (rest extensions) (list (first extensions))))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) class_name) (Strongest_Extension (first extensions) (rest\
    \ extensions))]\n    [else (Strongest_Extension (first extensions) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (define\
    \ (strength extension)\n    (let ((cap (string-length extension))\n          (sm\
    \  (string-length extension)))\n      (if (= cap sm)\n          (- cap sm)\n \
    \         (if (< cap sm)\n              (- cap sm)\n              (- sm cap))))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (if\
    \ (null? extensions)\n      '()\n      (append (list class_name)\n           \
    \   (best_extension extensions))))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (define (strength extension)\n    (/ (length extension)\
    \ (length class_name)))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength)\n    (first extensions))\n  (format #t \"~a~%\" class_name)\n  (format\
    \ #t \"~a~%\" best_extension)\n  (format #t \"~a~%\" extensions))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (define (strength extension)\n\
    \    (/ (length extension) (length class_name)))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (if (null? extensions)\n      '()\n      (append\
    \ (list class_name)\n              (best_extension extensions))))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (define\
    \ (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (if (null? extensions)\n        '\n        (let ((extension\
    \ (car extensions))\n              (strength (strength extension)))\n        \
    \  (if (< strength 0)\n              (best_extension extensions)\n           \
    \   (if (= strength 0)\n                  extension\n                  (best_extension\
    \ (cdr extensions))))))))\n  (let ((extension (best_extension extensions)))\n\
    \    (string-append class_name \".\" extension)))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) class_name) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (Strongest_Extension (first extensions)\
    \ (append (rest extensions) (list (first extensions))))]))\n", "  (cond\n    [(empty?\
    \ extensions) \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (let ((best (first extensions)))\n\
    \      (if (null? extensions)\n          best\n          (if (> (strength extension)\
    \ \n               (strength best))\n              best\n              (best_extension\
    \ rest))))\n  (best_extension extensions))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (define (strength extension)\n\
    \    (define (strength-of extension)\n      (let ((cap (string-length extension)))\n\
    \        (let ((sm (string-length extension)))\n          (/ (- cap sm) cap)))\n\
    \    (if (null? extension)\n        0\n        (let ((strength (strength-of extension)))\n\
    \          (if (< strength 0)\n              (strength extension)\n          \
    \    (if (< strength (car extensions))\n                  (strength extension)\n\
    \                  (if (< strength (cdr extensions))\n                      (strength\
    \ extension)\n                      (if (< strength (car extensions))\n      \
    \                    (strength extension)\n                          (if (< strength\
    \ (cdr extensions))\n                              (strength extension)\n    \
    \                          (if (< strength (car extensions))\n               \
    \                   (strength extension)\n                                  (if\
    \ (< strength (cdr extensions))\n                                      (strength\
    \ extension)\n                                      (if (< strength (car extensions))\n\
    \                                          (strength extension)\n            \
    \                              (if (< strength (cdr extensions))\n           \
    \                                   (strength extension)\n                   \
    \                           (if (< strength (car extensions))\n              \
    \                                    (strength extension)\n                  \
    \                                (if (< strength (cdr extensions))\n         \
    \                                             (strength extension)\n         \
    \                                             (if (< strength (car extensions))\n\
    \                                                          (strength extension)\n\
    \                                                          (if (< strength (cdr\
    \ extensions))\n                                                             \
    \ (strength extension)\n                                                     \
    \         (if (< strength (car extensions))\n                                \
    \                                  (strength extension)\n                    \
    \                                              (if (< strength (cdr extensions))\n\
    \                                                                      (strength\
    \ extension)\n                                                               \
    \       (if (< strength (car extensions))\n                                  \
    \                                        (strength extension)\n              \
    \                                                            (if (< strength (cdr\
    \ extensions))\n                                                             \
    \                 (strength extension)\n                                     \
    \                                         (if (< strength (car extensions))\n\
    \                                                                            \
    \      (strength extension)\n                                                \
    \                                  (if (< strength (cdr extensions))\n       \
    \                                                                            \
    \   (strength extension)\n                                                   \
    \                                   (if (< strength (car extensions))\n      \
    \                                                                            \
    \        (strength extension)\n                                              \
    \                                            (if (< strength (cdr extensions))\n\
    \                                                                            \
    \                  (strength extension)\n                                    \
    \                                                          (if (< strength (car\
    \ extensions))\n                                                             \
    \                                     (strength extension)\n                 \
    \                                                                            \
    \     (if (< strength (cdr extensions))\n                                    \
    \                                                                  (strength extension)\n\
    \                                                                            \
    \                          (if (< strength (car extensions))\n               \
    \                                                                            \
    \               (strength ", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) class_name) (Strongest_Extension (first extensions) (rest\
    \ extensions))]\n    [else (Strongest_Extension (first extensions) (append (rest\
    \ extensions) (list (first extensions))))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) class_name)\n     (cond\n       [(empty? (rest\
    \ extensions)) \"\"]\n       [(equal? (first extensions) (rest (rest extensions)))\n\
    \        (cond\n          [(empty? (rest extensions)) \"\"]\n          [(equal?\
    \ (first extensions) (rest (rest extensions)))\n           (cond\n           \
    \  [(empty? (rest extensions)) \"\"]\n             [(equal? (first extensions)\
    \ (rest (rest extensions)))\n               (cond\n                 [(empty? (rest\
    \ extensions)) \"\"]\n                 [(equal? (first extensions) (rest (rest\
    \ extensions)))\n                   (cond\n                     [(empty? (rest\
    \ extensions)) \"\"]\n                     [(equal? (first extensions) (rest (rest\
    \ extensions)))\n                       (cond\n                         [(empty?\
    \ (rest extensions)) \"\"]\n                         [(equal? (first extensions)\
    \ (rest (rest extensions)))\n                           (cond\n              \
    \               [(empty? (rest extensions)) \"\"]\n                          \
    \   [(equal? (first extensions) (rest (rest extensions)))\n                  \
    \             (cond\n                                 [(empty? (rest extensions))\
    \ \"\"]\n                                 [(equal? (first extensions) (rest (rest\
    \ extensions)))\n                                   (cond\n                  \
    \                   [(empty? (rest extensions)) \"\"]\n                      \
    \               [(equal? (first extensions) (rest (rest extensions)))\n      \
    \                                 (cond\n                                    \
    \     [(empty? (rest extensions)) \"\"]\n                                    \
    \     [(equal? (first extensions) (rest (rest extensions)))\n                \
    \                           (cond\n                                          \
    \   [(empty? (rest extensions)) \"\"]\n                                      \
    \       [(equal? (first extensions) (rest (rest extensions)))\n              \
    \                                 (cond\n                                    \
    \             [(empty? (rest extensions)) \"\"]\n                            \
    \                     [(equal? (first extensions) (rest (rest extensions)))\n\
    \                                                   (cond\n                  \
    \                                   [(empty? (rest extensions)) \"\"]\n      \
    \                                               [(equal? (first extensions) (rest\
    \ (rest extensions)))\n                                                      \
    \ (cond\n                                                         [(empty? (rest\
    \ extensions)) \"\"]\n                                                       \
    \  [(equal? (first extensions) (rest (rest extensions)))\n                   \
    \                                        (cond\n                             \
    \                                [(empty? (rest extensions)) \"\"]\n         \
    \                                                    [(equal? (first extensions)\
    \ (rest (rest extensions)))\n                                                \
    \               (cond\n                                                      \
    \          [(empty? (rest extensions)) \"\"]\n                               \
    \                                 [(equal? (first extensions) (rest (rest extensions)))\n\
    \                                                                 (cond\n    \
    \                                                               [(empty? (rest\
    \ extensions)) \"\"]\n                                                       \
    \            [(equal? (first extensions) (rest (rest extension", "  (cond\n  \
    \  [(empty? extensions) \"\"]\n    [(equal? (first extensions) class_name) (Strongest_Extension\
    \ (first extensions) (rest extensions))]\n    [else (Strongest_Extension (first\
    \ extensions) (append (rest extensions) (list (first extensions))))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) class_name) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (Strongest_Extension (first extensions)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) class_name)\n     (Strongest_Extension (first extensions) (rest\
    \ extensions))]\n    [else (cons (first extensions)\n               (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (define (strength ext)\n  \
    \  (string-length \n     (string-map \n      (lambda (c)\n        (if (char-upper-case?\
    \ c)\n            (substring ext 0 (char-index (c) ext))\n            0))))\n\
    \  (define (best_extension exts)\n    (if (null? exts)\n        '()\n        (let\
    \ ((strength (strength exts)))\n          (if (> strength 0)\n              (cons\
    \ exts strength)\n              (best_extension (cdr exts))))))\n  (best_extension\
    \ (sort extensions strength)))\n", "  (cond\n    [(empty? extensions) \"\"]\n\
    \    [(equal? (first extensions) class_name) \n      (second extensions)]\n  \
    \  [else (Strongest_Extension class_name (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) class_name) (Strongest_Extension (first extensions)\
    \ (rest extensions))]\n    [else (Strongest_Extension (first extensions) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) class_name) \n     (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (Strongest_Extension (first extensions)\
    \ extensions)]))\n", "  (define (strength extension)\n    (string-length extension))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (if\
    \ (null? extensions)\n      '()\n      (let ([extension (best_extension extensions)])\n\
    \        (string-append class_name \".\" (string extension)))))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (define (strength extension)\n    (/ (length extension)\
    \ (length class_name)))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength)\n    (first extensions))\n  (format #t \"~a~%\" class_name)\n  (format\
    \ #t \"~a~%\" best_extension)\n  (format #t \"~a~%\" extensions))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions strength)\n    (if (null?\
    \ extensions)\n        '\n        (let ((extension (car extensions)))\n      \
    \    (if (> strength (strength extension))\n              (best_extension extensions\
    \ (strength extension))\n              extension))))\n  (best_extension extensions\
    \ (strength extension)))\n", "  (define (strength extension)\n    (/ (length extension)\
    \ (length class_name)))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength)\n    (first extensions))\n  (format #t \"~a~a\" class_name best_extension))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (define\
    \ (strength ext)\n    (string-length \n     (string-map \n      (lambda (c)\n\
    \        (if (char-upper-case? c)\n            (- \n             (string-length\
    \ \n              (substring ext 0 (string-length ext))\n             )\n    \
    \         (string-length \n              (substring ext 1 (string-length ext))\n\
    \             )\n            )\n            0\n         )\n      )\n      ext\n\
    \     )\n    )\n  )\n  (define (best_extension extensions)\n    (sort extensions\
    \ \n         (lambda (ext)\n           (if (null? ext)\n               0\n   \
    \            (if (> (strength ext) 0)\n                   (strength ext)\n   \
    \                (- 1)\n                 )\n             )\n         )\n     \
    \  )\n    (first extensions)\n  )\n  (format #t \"~a~a\" class_name best_extension)\n\
    )\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions)\
    \ (first class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n\
    \    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", " \
    \ (define (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (define (best_strength extension)\n      (if (null? extensions)\n\
    \          -1\n          (if (> (strength extension) best_strength)\n        \
    \      (best_strength extension)\n              (strength extension))))\n    (if\
    \ (null? extensions)\n        -1\n        (if (> (best_strength extensions) 0)\n\
    \            (best_extension extensions)\n            (best_extension extensions))))\n\
    \  (if (null? extensions)\n      -1\n      (if (> (strength extensions) 0)\n \
    \         (best_extension extensions)\n          (best_extension extensions))))\n\
    \  (format #t \"~a ~a\" class_name extensions))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (define (strength name)\n    (let ((cap\
    \ (string-length name)))\n      (let ((sm (string-length name)))\n        (/ (-\
    \ cap sm) (cap - sm))))\n  (let ((strongest (first extensions))\n        (others\
    \ (rest extensions)))\n    (if (null? strongest)\n        strongest\n        (if\
    \ (> (strength strongest) strength others)\n            strongest\n          \
    \  (Strongest_Extension class_name others)))))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (define (strength name)\n    (let ((cap\
    \ (string-length name)))\n      (let ((sm (string-length name)))\n        (/ (-\
    \ cap sm) cap)))\n  (define (extension name)\n    (let ((cap (string-length name)))\n\
    \      (let ((sm (string-length name)))\n        (/ (- cap sm) cap)))\n  (define\
    \ (extension name)\n    (let ((cap (string-length name)))\n      (let ((sm (string-length\
    \ name)))\n        (/ (- cap sm) cap)))\n  (define (extension name)\n    (let\
    \ ((cap (string-length name)))\n      (let ((sm (string-length name)))\n     \
    \   (/ (- cap sm) cap)))\n  (define (extension name)\n    (let ((cap (string-length\
    \ name)))\n      (let ((sm (string-length name)))\n        (/ (- cap sm) cap)))\n\
    \  (define (extension name)\n    (let ((cap (string-length name)))\n      (let\
    \ ((sm (string-length name)))\n        (/ (- cap sm) cap)))\n  (define (extension\
    \ name)\n    (let ((cap (string-length name)))\n      (let ((sm (string-length\
    \ name)))\n        (/ (- cap sm) cap)))\n  (define (extension name)\n    (let\
    \ ((cap (string-length name)))\n      (let ((sm (string-length name)))\n     \
    \   (/ (- cap sm) cap)))\n  (define (extension name)\n    (let ((cap (string-length\
    \ name)))\n      (let ((sm (string-length name)))\n        (/ (- cap sm) cap)))\n\
    \  (define (extension name)\n    (let ((cap (string-length name)))\n      (let\
    \ ((sm (string-length name)))\n        (/ (- cap sm) cap)))\n  (define (extension\
    \ name)\n    (let ((cap (string-length name)))\n      (let ((sm (string-length\
    \ name)))\n        (/ (- cap sm) cap)))\n  (define (extension name)\n    (let\
    \ ((cap (string-length name)))\n      (let ((sm (string-length name)))\n     \
    \   (/ (- cap sm) cap)))\n  (define (extension name)\n    (let ((cap (string-length\
    \ name)))\n      (let ((sm (string-length name)))\n        (/ (- cap sm) cap)))\n\
    \  (define (extension name)\n    (let ((cap (string-length name)))\n      (let\
    \ ((sm (string-length name)))\n        (/ (- cap sm) cap)))\n  (define (extension\
    \ name)\n    (", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) class_name)\n     (cond\n       [(empty?\
    \ (rest extensions)) \"\"]\n       [(equal? (first extensions) (rest extensions))\n\
    \        (cond\n          [(empty? (rest extensions)) \"\"]\n          [(equal?\
    \ (first extensions) (rest extensions))\n           (cond\n             [(empty?\
    \ (rest extensions)) \"\"]\n             [(equal? (first extensions) (rest extensions))\n\
    \              (cond\n                [(empty? (rest extensions)) \"\"]\n    \
    \            [(equal? (first extensions) (rest extensions))\n                \
    \ (cond\n                   [(empty? (rest extensions)) \"\"]\n              \
    \     [(equal? (first extensions) (rest extensions))\n                    (cond\n\
    \                      [(empty? (rest extensions)) \"\"]\n                   \
    \   [(equal? (first extensions) (rest extensions))\n                       (cond\n\
    \                         [(empty? (rest extensions)) \"\"]\n                \
    \         [(equal? (first extensions) (rest extensions))\n                   \
    \       (cond\n                            [(empty? (rest extensions)) \"\"]\n\
    \                            [(equal? (first extensions) (rest extensions))\n\
    \                             (cond\n                               [(empty? (rest\
    \ extensions)) \"\"]\n                               [(equal? (first extensions)\
    \ (rest extensions))\n                                (cond\n                \
    \                 [(empty? (rest extensions)) \"\"]\n                        \
    \         [(equal? (first extensions) (rest extensions))\n                   \
    \               (cond\n                                    [(empty? (rest extensions))\
    \ \"\"]\n                                    [(equal? (first extensions) (rest\
    \ extensions))\n                                     (cond\n                 \
    \                      [(empty? (rest extensions)) \"\"]\n                   \
    \                    [(equal? (first extensions) (rest extensions))\n        \
    \                                (cond\n                                     \
    \    [(empty? (rest extensions)) \"\"]\n                                     \
    \    [(equal? (first extensions) (rest extensions))\n                        \
    \                  (cond\n                                           [(empty?\
    \ (rest extensions)) \"\"]\n                                           [(equal?\
    \ (first extensions) (rest extensions))\n                                    \
    \         (cond\n                                               [(empty? (rest\
    \ extensions)) \"\"]\n                                               [(equal?\
    \ (first extensions) (rest extensions))\n                                    \
    \            (cond\n                                                  [(empty?\
    \ (rest extensions)) \"\"]\n                                                 \
    \ [(equal? (first extensions) (rest extensions))\n                           \
    \                        (cond\n                                             \
    \        [(empty? (rest extensions)) \"\"]\n                                 \
    \                    [(equal? (first extensions) (rest extensions))\n        \
    \                                               (cond\n                      \
    \                                 [(empty? (rest extensions)) \"\"]\n        \
    \                                               [(equal? (first extensions) (rest\
    \ extensions))\n                                                         (cond\n\
    \                                                         [(empty? (rest ", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (define (strength extension)\n\
    \    (/ (length extension) (length class_name)))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (define\
    \ (strength extension)\n    (let ((cap (string-length extension))\n          (sm\
    \  (string-length extension)))\n      (if (= cap sm)\n          -1\n         \
    \ (cap - sm))))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (let ((best (best_extension extensions)))\n    (if (null? best)\n        '\n\
    \        (string-append class_name \".\" (string-append (first best) \".\"))))\n\
    \  \n  ", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions)\
    \ (first class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n\
    \    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", " \
    \ (define (strength name)\n    (let ((cap (string-length name)))\n      (let ((sm\
    \ (string-length name)))\n        (/ (- cap sm) cap)))\n  (let ((strengths (sort\
    \ extensions strength)))\n    (if (null? strengths)\n        '\n        (string-append\
    \ (substring class_name 0 (- (length class_name) 1))\n                      (substring\
    \ strengths 0 (- (length strengths) 1))))))\n", "  (define (strength name)\n \
    \   (let ((cap (string-length name)))\n      (let ((sm (string-length name)))\n\
    \        (/ (- cap sm) (cap - sm))))\n  (let ((strengths (sort extensions strength)))\n\
    \    (if (null? strengths)\n        '\n        (string-append class_name \".\"\
    \ (first strengths) \".\"))))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (let ((best (first extensions)))\n\
    \      (if (null? extensions)\n          best\n          (if (> (strength extension)\
    \ (strongest best))\n              (best_extension extensions)\n             \
    \ best))))\n  (best_extension extensions))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) class_name) (Strongest_Extension (first extensions) (rest extensions))]\n\
    \    [else (Strongest_Extension (first extensions) (append (rest extensions) (list\
    \ (first extensions))))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) class_name)\n     (cond\n       [(empty? (rest extensions)) \"\"\
    ]\n       [(equal? (first extensions) (rest extensions))\n        (cond\n    \
    \      [(empty? (rest extensions)) \"\"]\n          [(< (first extensions) (rest\
    \ extensions)) \n           (Strongest_Extension (first extensions) (rest extensions))]\n\
    \          [else (Strongest_Extension (first extensions) (rest extensions))]\n\
    \        )]\n       [else (Strongest_Extension (first extensions) (rest extensions))]\n\
    \     )]\n    [else (Strongest_Extension (first extensions) (rest extensions))]\n\
    \   ))\n", "  (define (strength name)\n    (let ((cap (string-length name)))\n\
    \      (let ((sm (string-length name)))\n        (if (= cap sm)\n            (/\
    \ (- cap sm) cap)\n            (/ (- sm cap) sm))))\n  (define (best_extension\
    \ extensions)\n    (sort extensions \n          (lambda (extension)\n        \
    \    (if (string=? extension (string-append class_name \".\"))\n             \
    \   (- (strength extension) 0))))\n  (if (null? extensions)\n      '()\n     \
    \ (if (null? (best_extension extensions))\n          (best_extension extensions)\n\
    \          (best_extension (cdr extensions)))))\n", "  (define (strength ext)\n\
    \    (string-length (string-map #(char (char-code #\\A) (char-code #\\Z)) ext)))\n\
    \  (define (best_extension extensions)\n    (let ((best (car extensions)))\n \
    \     (cond\n        ((null? extensions) best)\n        ((strength best) best)\n\
    \        (else (best_extension (cdr extensions))))))\n  (define (best_extensions\
    \ extensions)\n    (cond\n      ((null? extensions) '())\n      (else (append\
    \ (list (list (car extensions) (best_extension extensions))) \n              \
    \      (best_extensions (cdr extensions)))))))\n  (best_extensions extensions))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) class_name)\n\
    \     (Strongest_Extension (first extensions)\n                        (tail extensions))]\n\
    \    [else (cons (first extensions)\n               (Strongest_Extension (first\
    \ extensions)\n                                (tail extensions)))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (define (strength extension)\n\
    \    (/ (length extension) (length class_name)))\n  (define (best_extension extensions\
    \ strength)\n    (if (null? extensions)\n        '()\n        (if (= (first extensions)\
    \ (first extensions))\n            (if (> strength (second extensions))\n    \
    \            (best_extension (rest extensions) strength)\n                (best_extension\
    \ (rest extensions) (- strength (second extensions))))\n            (if (> strength\
    \ (second extensions))\n                (best_extension (rest extensions) (- strength\
    \ (second extensions)))\n                (best_extension (rest extensions) strength))))\n\
    \  (best_extension (reverse extensions) (strength extensions)))\n", "  (define\
    \ (strength name)\n    (let ((cap (string-length name)))\n      (let ((sm (string-length\
    \ name)))\n        (if (= cap sm)\n            (/ cap sm)\n            (/ (- cap\
    \ sm) (cap sm))))))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)\n    (sort extensions strength))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength))\n  (define (best_extension extensions)\n    (sort\
    \ extensions strength))\n  (define (best_extension extensions)\n    (sort extensions\
    \ strength))\n  (define (best_extension extensions)\n    (sort extensions strength))\n\
    \  (define (best_extension extensions)", "  (cond\n    [(empty? extensions) \"\
    \"]\n    [(equal? (first extensions) class_name)\n     (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (cons (first extensions) (Strongest_Extension\
    \ (first extensions) (rest extensions)))]))\n", "  (define (strength extension)\n\
    \    (/ (length extension) (length class_name)))\n  (define (best_extension extensions)\n\
    \    (sort extensions strength)\n    (first extensions))\n  (format #t \"~a.~a\"\
    \ class_name best_extension))\n", "  (cond\n    [(empty? extensions) \"\"]\n \
    \   [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (define (strength extension)\n    (define (count-uppercase letter)\n      (define\
    \ (count-lowercase letter)\n        (if (= letter letter)\n            1\n   \
    \         (+ 1 (count-lowercase (substring letter 0 (length letter))))))\n   \
    \   (count-lowercase (substring extension (length extension) 1)))\n    (/ (count-uppercase\
    \ (substring class_name 0 (length class_name)) extensions)\n      (count-uppercase\
    \ (substring class_name 0 (length class_name)) extensions)))\n  (define (extension\
    \ extension)\n    (define (count-uppercase letter)\n      (define (count-lowercase\
    \ letter)\n        (if (= letter letter)\n            1\n            (+ 1 (count-lowercase\
    \ (substring letter 0 (length letter))))))\n      (count-lowercase (substring\
    \ extension (length extension) 1)))\n    (/ (count-uppercase (substring class_name\
    \ 0 (length class_name)) extensions)\n      (count-uppercase (substring class_name\
    \ 0 (length class_name)) extensions)))\n  (define (extension-name extension)\n\
    \    (substring extension (length extension) 1))\n  (define (extension-strength\
    \ extension)\n    (strength extension))\n  (define (extension-list extension)\n\
    \    (cond ((null? extensions) '())\n          ((extension-strength extension)\
    \ extension)\n          (else (extension-list (cdr extensions)))))\n  (define\
    \ (extension-list-sorted extensions)\n    (sort extensions extension-strength))\n\
    \  (define (extension-list-strength extensions)\n    (strength (extension-list-sorted\
    \ extensions)))\n  (define (extension-list-name extensions)\n    (extension-list-sorted\
    \ extensions)\n    (extension-list-strength extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-list-name extensions)\n    (extension-list-name\
    \ extensions))\n  (define (extension-", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ extension))\n  (define (best_extension extensions)\n    (sort extensions strength)\n\
    \    (first extensions))\n  (if (null? extensions)\n      '()\n      (cons (string-append\
    \ class_name \".\" best_extension)\n            (Strongest_Extension best_extension\
    \ (rest extensions)))))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) class_name) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (Strongest_Extension (first extensions)\
    \ (append (rest extensions) (list (first extensions))))]))\n", "  (define (strength\
    \ extension)\n    (string-length (substring extension (string-length extension)\
    \ 1)))\n  (define (best_extension extensions)\n    (if (null? extensions)\n  \
    \      '\n        (let ((strength (strength extension)))\n          (if (< strength\
    \ 0)\n              (best_extension extensions)\n              (cons extension\
    \ (best_extension (cdr extensions)))))))\n  (let ((extension (best_extension extensions)))\n\
    \    (string-append class_name \".\" extension)))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) class_name)\n     (cond\n       [(empty? (rest extensions))\
    \ \"\"]\n       [(equal? (first extensions) (rest extensions))\n        (cond\n\
    \          [(empty? (rest extensions)) \"\"]\n          [(< (first extensions)\
    \ (rest extensions)) (rest extensions)]\n          [else (first extensions)]\n\
    \        )]\n       [else (Strongest_Extension class_name (rest extensions))]\n\
    \     )]\n    [else (Strongest_Extension class_name (rest extensions))]\n  )\n\
    )\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions)\
    \ (first class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n\
    \    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", " \
    \ (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (define (strength name)\n    (let ((cap (string-length\
    \ name)) (sm  (string-length name)))\n      (if (= cap sm)\n          -1\n   \
    \       (/ (- cap sm) (- cap cap)))) \n  (let ((strength (apply (lambda (x y)\
    \ (strength x y)) class_name extensions)))\n  (if (> strength 0)\n      (apply\
    \ (lambda (x y) (string-append x \".\" y)) class_name extensions)\n      (apply\
    \ (lambda (x y) (string-append x \".\" y)) class_name extensions)))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (define (strength extension)\n    (string-length\
    \ (string-map extension (string->list class_name)))\n  )\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n  )\n  (if (null? extensions)\n\
    \      '\n      (if (= (length extensions) 1)\n          (cons (car extensions)\
    \ (best_extension extensions))\n          (best_extension extensions))\n  )\n\
    )\n", "  (define (strength extension)\n    (string-length extension))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength))\n  (if (null? extensions)\n\
    \      '()\n      (if (> (strength (first extensions)) 0)\n          (cons (first\
    \ extensions) (best_extension (rest extensions)))\n          (best_extension (rest\
    \ extensions)))))\n  (append class_name (best_extension extensions)))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) class_name) (Strongest_Extension (first\
    \ extensions) (rest extensions))]\n    [else (Strongest_Extension (first extensions)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (cond\n\
    \    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first class_name))\
    \ (Strongest_Extension (rest class_name) (rest extensions))]\n    [else (Strongest_Extension\
    \ (rest class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions)\
    \ \"\"]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension\
    \ (rest class_name) (rest extensions))]\n    [else (Strongest_Extension (rest\
    \ class_name) (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"\
    ]\n    [(equal? (first extensions) (first class_name)) (Strongest_Extension (rest\
    \ class_name) (rest extensions))]\n    [else (Strongest_Extension (rest class_name)\
    \ (rest extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal?\
    \ (first extensions) (first class_name)) (Strongest_Extension (rest class_name)\
    \ (rest extensions))]\n    [else (Strongest_Extension (rest class_name) (rest\
    \ extensions))]))\n", "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first\
    \ extensions) (first class_name)) (Strongest_Extension (rest class_name) (rest\
    \ extensions))]\n    [else (Strongest_Extension (rest class_name) (rest extensions))]))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (define\
    \ (strength extension)\n    (string-length extension))\n  (define (best_extension\
    \ extensions)\n    (sort extensions strength)\n    (first extensions))\n  (let\
    \ ((extension (best_extension extensions)))\n    (string-append class_name extension)))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n", "  (define\
    \ (strength extension)\n    (/ (length extension) (length class_name)))\n  (define\
    \ (best_extension extensions)\n    (sort extensions strength)\n    (first extensions))\n\
    \  (format #t \"~a~%\" class_name)\n  (format #t \"~a~%\" best_extension))\n",
  "  (cond\n    [(empty? extensions) \"\"]\n    [(equal? (first extensions) (first\
    \ class_name)) (Strongest_Extension (rest class_name) (rest extensions))]\n  \
    \  [else (Strongest_Extension (rest class_name) (rest extensions))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
