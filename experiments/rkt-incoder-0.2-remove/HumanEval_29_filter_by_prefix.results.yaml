language: rkt
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ strings-starts-with prefix))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppbvbhuue.rkt:5:10: strings-starts-with: unbound identifier\n  in:\
    \ strings-starts-with\n  location...:\n   /tmp/tmppbvbhuue.rkt:5:10\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-prefix x prefix) prefix)) strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd6dry9wd.rkt:5:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmpd6dry9wd.rkt:5:31\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-prefix x prefix) prefix)) strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd6dry9wd.rkt:5:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmpd6dry9wd.rkt:5:31\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix? x prefix)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (substring x 0) prefix)) strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn43brlvp.rkt:13:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-ref x 0) prefix)) strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2_07lat.rkt:13:4

    actual:     ''()

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-prefix x prefix) prefix)) strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd6dry9wd.rkt:5:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmpd6dry9wd.rkt:5:31\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-prefix x prefix) prefix)) strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd6dry9wd.rkt:5:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmpd6dry9wd.rkt:5:31\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n            (string=? prefix x))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn9xo_atf.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-match prefix s))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0oq1wr1r.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp0oq1wr1r.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-match prefix s))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0oq1wr1r.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp0oq1wr1r.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix? x prefix)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix? x prefix)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix? x prefix)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n            (string-match prefix x))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1rhw97au.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp1rhw97au.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n           (string-match prefix x))\n         strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy0igon4w.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpy0igon4w.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-match prefix s))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0oq1wr1r.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp0oq1wr1r.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxkibqqr2.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpxkibqqr2.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n           (string-match prefix x))\n         strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy0igon4w.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpy0igon4w.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (substring x 0 prefix) prefix)) strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdal47o_e.rkt:13:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ \"xxx\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (substring x 0 length) prefix))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtm7wq0p.rkt:14:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ #<procedure:length>\n--------------------\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix? x prefix)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n           (string-match prefix x))\n         strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy0igon4w.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpy0igon4w.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (substring x 0 string-length) prefix))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmput9aim8y.rkt:14:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ #<procedure:string-length>\n--------------------\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n            (string-match prefix x))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1rhw97au.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp1rhw97au.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-prefix x prefix) prefix)) strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd6dry9wd.rkt:5:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmpd6dry9wd.rkt:5:31\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n            (string=? (substring x 0 prefix) prefix))\n       \
    \   strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_by_prefix))\n    (check-equal? (candidate (list ) \"john\"\
    ) (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp43x7jzp0.rkt:15:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ \"xxx\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n            (string-match prefix x))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1rhw97au.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp1rhw97au.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-prefix x prefix) prefix)) strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd6dry9wd.rkt:5:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmpd6dry9wd.rkt:5:31\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxkibqqr2.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpxkibqqr2.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-match prefix s))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0oq1wr1r.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp0oq1wr1r.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (substring x 0 length) prefix)) strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvhib7ag.rkt:13:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ #<procedure:length>\n--------------------\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxkibqqr2.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpxkibqqr2.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-match prefix s))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0oq1wr1r.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp0oq1wr1r.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxkibqqr2.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpxkibqqr2.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n            (string-match prefix x))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1rhw97au.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp1rhw97au.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x)\n            (string-match prefix x))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1rhw97au.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp1rhw97au.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) empty]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpll1rill7.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-prefix x prefix) prefix)) strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd6dry9wd.rkt:5:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmpd6dry9wd.rkt:5:31\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix-p x prefix)) strings))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp39l5yxik.rkt:5:23: string-prefix-p: unbound identifier\n  in: string-prefix-p\n\
    \  location...:\n   /tmp/tmp39l5yxik.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-ref x 0) prefix)) strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2_07lat.rkt:13:4

    actual:     ''()

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (substring x 0 length) prefix))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtm7wq0p.rkt:14:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ #<procedure:length>\n--------------------\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxkibqqr2.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpxkibqqr2.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67bf2ltk.rkt:15:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n            (string-match prefix str))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw5y7r938.rkt:6:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpw5y7r938.rkt:6:13\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (str)\n           (string-match prefix str))\n         strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbt2i5amh.rkt:6:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbt2i5amh.rkt:6:12\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (equal? (string-ref x 0) prefix)) strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo2_07lat.rkt:13:4

    actual:     ''()

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_n0swsx.rkt:5:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpl_n0swsx.rkt:5:23\n"
  stdout: ''
  timestamp: 1660039595
