name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; If the input list is empty, return 0.\n(define (double_the_difference\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
  \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0\
  \ -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
  \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
completions: ["  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (if (null? lst)\n      0\n     \
    \ (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", "  (cond\n  \
    \  [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (first lst)) (double_the_difference (rest\
    \ lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square\
    \ (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (first lst) (second lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(number?\
    \ (first lst)) (+ (first lst) (second lst) (third lst) (fourth lst) (fifth lst)\
    \ (sixth lst) (seventh lst) (eighth lst) (tenth lst) (eleventh lst) (twelfth lst)\
    \ (thirteenth lst) (fourteenth lst) (fifteenth lst) (sixteenth lst) (seventeenth\
    \ lst) (eighteenth lst) (twentieth lst) (twenty-first lst) (twenty-second lst)\
    \ (twenty-third lst) (twenty-fourth lst) (twenty-fifth lst) (twenty-sixth lst)\
    \ (twenty-seventh lst) (twenty-eighth lst) (twenty-ninth lst) (thirtieth lst)\
    \ (thirty-first lst) (thirty-second lst) (thirty-third lst) (thirty-fourth lst)\
    \ (thirty-fifth lst) (thirty-sixth lst) (thirty-seventh lst) (thirty-eighth lst)\
    \ (thirty-ninth lst) (fortieth lst) (forty-first lst) (forty-second lst) (forty-third\
    \ lst) (forty-fourth lst) (forty-fifth lst) (forty-sixth lst) (forty-seventh lst)\
    \ (forty-eighth lst) (forty-ninth lst) (fiftieth lst) (fifty-first lst) (fifty-second\
    \ lst) (fifty-third lst) (fifty-fourth lst) (fifty-fifth lst) (fifty-sixth lst)\
    \ (fifty-seventh lst) (fifty-eighth lst) (fifty-ninth lst) (sixtieth lst) (sixty-first\
    \ lst) (sixty-second lst) (sixty-third lst) (sixty-fourth lst) (sixty-fifth lst)\
    \ (sixty-sixth lst) (sixty-seventh lst) (sixty-eighth lst) (sixty-ninth lst) (seventieth\
    \ lst) (seventy-first lst) (seventy-second lst) (seventy-third lst) (seventy-fourth\
    \ lst) (seventy-fifth lst) (seventy-sixth lst) (seventy-seventh lst) (seventy-eighth\
    \ lst) (seventy-ninth lst) (ninetieth lst) (ninety-first ", "  (if (null? lst)\n\
    \      0\n      (+ (square (first lst))\n         (double_the_difference (rest\
    \ lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first\
    \ lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n", " \
    \ (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (square (first lst)) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", " \
    \ (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* 2 (car lst))\n         (double_the_difference (cdr lst)))))\n", "  (if\
    \ (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest\
    \ lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (first lst) (second lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (if (empty?\
    \ lst)\n      0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (if (null? lst)\n      0\n     \
    \ (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (car lst))\n         (double_the_difference\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (empty? lst)\n      0\n   \
    \   (+ (square (first lst)) (double_the_difference (rest lst)))))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest\
    \ lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square\
    \ (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (first lst) (second lst))]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n\
    \         (double_the_difference (rest lst)))))\n", "  (if (null? lst)\n     \
    \ 0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", "  (cond\n \
    \   [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (* 2 (car lst))\n         (double_the_difference (cdr lst)))))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n\
    \         (double_the_difference (rest lst)))))\n", "  (if (null? lst)\n     \
    \ 0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square\
    \ (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (null? lst)\n      0\n    \
    \  (+ (* 2 (first lst)) (double_the_difference (rest lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n\
    \         (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (car lst))\n \
    \        (double_the_difference (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", "  (if (empty?\
    \ lst)\n      0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first\
    \ lst) (second lst))]))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (car lst))\n\
    \         (double_the_difference (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n         (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (empty? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (if (empty? lst)\n      0\n    \
    \  (+ (square (first lst)) (double_the_difference (rest lst)))))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (if (null? lst)\n      0\n      (+ (square (car lst))\n         (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (if (empty?\
    \ lst)\n      0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\n\
    \         (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(number? (car lst)) (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", " \
    \ (if (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (* 2 (car lst))\n         (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(number? (first lst))\
    \ (* 2 (first lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(number? (first\
    \ lst)) (+ (first lst) (* 2 (first lst)))]\n    [else (+ (double_the_difference\
    \ (rest lst)) (* 2 (first lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(number?\
    \ (first lst)) (+ (first lst) (second lst))]\n    [else (+ (first lst) (double_the_difference\
    \ (rest lst)))]))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (empty? lst)\n      0\n   \
    \   (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", "  (if (null?\
    \ lst)\n      0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(number? (first lst)) (+ (first\
    \ lst) (second lst))]\n    [else (+ (first lst) (double_the_difference (rest lst)))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(number? (first lst))\
    \ (+ (first lst) (second lst) (third lst) (fourth lst) (fifth lst) (sixth lst)\
    \ (seventh lst) (eighth lst) (tenth lst) (eleventh lst) (twelfth lst) (thirteenth\
    \ lst) (fourteenth lst) (fifteenth lst) (sixteenth lst) (seventeenth lst) (eighteenth\
    \ lst) (twentieth lst) (twenty-first lst) (twenty-second lst) (twenty-third lst)\
    \ (twenty-fourth lst) (twenty-fifth lst) (twenty-sixth lst) (twenty-seventh lst)\
    \ (twenty-eighth lst) (twenty-ninth lst) (twenty-tenth lst) (twenty-eleventh lst)\
    \ (twenty-twelfth lst) (twenty-thirteenth lst) (twenty-fourteenth lst) (twenty-fifteenth\
    \ lst) (twenty-sixteenth lst) (twenty-seventeenth lst) (eighty-first lst) (eighty-second\
    \ lst) (eighty-third lst) (eighty-fourth lst) (eighty-fifth lst) (eighty-sixth\
    \ lst) (eighty-seventh lst) (eighty-eighth lst) (eighty-ninth lst) (eighty-tenth\
    \ lst) (eighty-eleventh lst) (eighty-twelfth lst) (eighty-thirteenth lst) (eighty-fourteenth\
    \ lst) (eighty-fifteenth lst) (eighty-sixteenth lst) (eighty-seventeenth lst)\
    \ (seventy-first lst) (seventy-second lst) (seventy-third lst) (seventy-fourth\
    \ lst) (seventy-fifth lst) (seventy-sixth lst) (seventy-seventh lst) (seventy-eighth\
    \ lst) (seventy-ninth lst) (seventy-tenth lst) (seventy-eleventh lst) (seventy-twelfth\
    \ lst) (seventy-thirteenth lst) (seventy-fourteenth lst) (seventy-fifteenth lst)\
    \ (seventy-sixteenth lst) (seventy-seventeenth lst) (sixty-first lst) (sixty-",
  "  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (* 2 (first lst))\n\
    \         (double_the_difference (rest lst)))))\n", "  (if (null? lst)\n     \
    \ 0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", "  (if\
    \ (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first\
    \ lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n", " \
    \ (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (null? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second\
    \ lst))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (empty? lst)\n      0\n   \
    \   (+ (square (first lst)) (double_the_difference (rest lst)))))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (first lst))\
    \ (double_the_difference (rest lst)))))\n", "  (if (empty? lst)\n      0\n   \
    \   (+ (square (first lst)) (double_the_difference (rest lst)))))\n", "  (if (empty?\
    \ lst)\n      0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (first lst)) (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (square (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst)) (double_the_difference\
    \ (cdr lst)))))\n", "  (if (empty? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (square (first lst)) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (empty? lst)\n      0\n      (+ (square (car lst))\
    \ (double_the_difference (cdr lst)))))\n", "  (if (empty? lst)\n      0\n    \
    \  (+ (square (first lst))\n         (double_the_difference (rest lst)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (second lst))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (+ (square (car lst)) (double_the_difference (cdr lst)))))\n", " \
    \ (if (empty? lst)\n      0\n      (+ (square (first lst))\n         (double_the_difference\
    \ (rest lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (+\
    \ (square (first lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (+ (square (car lst))\n\
    \         (double_the_difference (cdr lst)))))\n", "  (if (null? lst)\n      0\n\
    \      (+ (* 2 (first lst))\n         (double_the_difference (rest lst)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
