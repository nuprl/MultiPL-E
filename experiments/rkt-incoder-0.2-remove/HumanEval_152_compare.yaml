name: HumanEval_152_compare
language: rkt
prompt: "#lang racket\n\n;; I think we all remember that feeling when the result of\
  \ some long-awaited\n;; event is finally known. The feelings and thoughts you have\
  \ at that moment are\n;; definitely worth noting down and comparing.\n;; Your task\
  \ is to determine if a person correctly guessed the results of a number of matches.\n\
  ;; You are given two arrays of scores and guesses of equal length, where each index\
  \ shows a match. \n;; Return an array of the same length denoting how far off each\
  \ guess was. If they have guessed correctly,\n;; the value is 0, and if not, the\
  \ value is the absolute difference between the guess and the score.\n;; example:\n\
  (define (compare game guess)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n\
  \    (check-equal? (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0\
  \ 0 0 3 3))\n    (check-equal? (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0))\
  \ (list 0 0 0 0 0 0))\n    (check-equal? (candidate (list 1 2 3) (list -1 -2 -3))\
  \ (list 2 4 6))\n    (check-equal? (candidate (list 1 2 3 5) (list -1 2 3 4)) (list\
  \ 2 0 0 1))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first game)\
    \ (first guess)) (cons 0 guess)]\n    [else (cons (abs (- (first game) (first\
    \ guess))) guess)]\n  )\n)\n", "  (if (equal? (game-score game) 0)\n      (game-score\
    \ guess)\n      (abs (game-score guess) (- (game-score game) (game-score guess)))))\n",
  "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (cond\n\
    \    [(empty? game) (list guess)]\n    [(empty? guess) (list game)]\n    [else\
    \ (cons (abs (- (car game) (car guess))) (compare game (cdr guess)))]))\n", " \
    \ (cond\n    [(empty? game) (empty? guess)] \n    [(equal? (first game) (first\
    \ guess)) (+ 1 (compare (rest game) (rest guess)))]\n    [else (+ 1 (compare (rest\
    \ game) guess))]\n  )\n)\n", "  (if (= (length game) (length guess))\n      (let\
    \ ((scores (make-array (length guess) 'int))\n            (guesses (make-array\
    \ (length guess) 'int)))\n        (let loop ((i 0) (j 0))\n          (if (< i\
    \ j)\n              (let ((score (car game))\n                    (guess (car\
    \ guess)))\n                (set! scores[j] (- score guess))\n               \
    \ (set! guesses[j] (- guess score))\n                (loop (+ i 1) (+ j 1))\n\
    \                (list scores guesses))\n              (let ((score (car game))\n\
    \                    (guess (car guess)))\n                (set! scores[j] (-\
    \ guess score))\n                (set! guesses[j] (- score guess))\n         \
    \       (loop (+ i 1) (+ j 1))))))))\n", "  (if (equal? game guess)\n      0\n\
    \      (abs (- guess game))))\n", "  (if (equal? (game-scores game) guess)\n \
    \     0\n      (abs (game-scores game) (- (game-scores game) guess))))\n", " \
    \ (if (= (length game) (length guess))\n      (let ((diff (- guess game)))\n \
    \       (if (= diff 0)\n            0\n            (abs diff))))\n  (let ((diff\
    \ (- guess game)))\n    (if (= diff 0)\n        0\n        (abs diff))))\n", " \
    \ (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (if (equal?\
    \ game guess)\n      0\n      (abs (- guess game))))\n", "  (if (= (length game)\
    \ (length guess))\n      0\n      (abs (- (car guess) (car game)))))\n", "  (if\
    \ (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (cond\n  \
    \  [(empty? game) (list guess)]\n    [(empty? guess) (list game)]\n    [else (cons\
    \ (- guess (first game)) (compare rest (rest guess)))]))\n", "  (if (equal? (game-score\
    \ game) (game-score guess))\n      0\n      (abs (game-score guess) (- (game-score\
    \ game) (game-score guess)))))\n", "  (if (= (length game) (length guess))\n \
    \     (let ((diff (- guess game)))\n        (if (= diff 0)\n            (list\
    \ 0)\n            (list diff))))\n  (let ((diff (- guess game)))\n    (if (= diff\
    \ 0)\n        (list 0)\n        (list diff))))\n", "  (if (equal? game guess)\n\
    \      0\n      (abs (- guess game))))\n", "  (cond\n    [(empty? game) (empty?\
    \ guess)] \n    [(= (first game) (first guess)) (cons 0 game)]\n    [else (cons\
    \ (abs (first guess) (rest game)) game)]))\n", "  (if (= (length game) (length\
    \ guess))\n      0\n      (abs (- (car game) (car guess))))) ; <-- this is the\
    \ important bit\n", "  (let ((score (game-score game))\n        (guess (game-guess\
    \ game)))\n    (if (equal? guess score)\n        0\n        (abs (- guess score)))))\n",
  "  (cond\n    [(empty? game) (empty? guess)] \n    [(empty? guess) 0]\n    [(= (first\
    \ game) (first guess)) (compare rest guess)]\n    [else (+ (abs (first game) (first\
    \ guess))\n              (compare rest guess))]))\n", "  (cond\n    [(empty? game)\
    \ (empty? guess)] \n    [(= (first game) (first guess)) (cons 0 guess)]\n    [else\
    \ (cons (abs (first game) (first guess))\n                (compare (rest game)\
    \ (rest guess)))]))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [(=\
    \ (first game) (first guess)) (cons 0 guess)]\n    [else (cons (abs (first game)\
    \ (first guess))\n                (compare (rest game) (rest guess)))]))\n", " \
    \ (if (equal? guess game)\n      0\n      (abs (- guess game))))\n", "  (if (equal?\
    \ game guess)\n      0\n      (abs (- guess game))))\n", "  (if (= (length game)\
    \ (length guess))\n      (let ((diff (- guess game)))\n        (if (= diff 0)\n\
    \            0\n            (abs diff)))))\n", "  (if (equal? guess game)\n  \
    \    0\n      (abs (- guess game))))\n", "  (let ((score (game-score game))\n\
    \        (guess (game-guess game)))\n    (if (= guess score)\n        0\n    \
    \    (abs (- guess score)))))\n", "  (cond\n    [(empty? game) (empty? guess)]\
    \ \n    [(= (first game) (first guess)) (cons 0 guess)]\n    [else (cons (abs\
    \ (- (first game) (first guess))) guess)]))\n", "  (if (equal? game guess)\n \
    \     0\n      (abs (- guess game))))\n", "  (cond\n    [(empty? game) (empty?\
    \ guess)] \n    [(= (first game) (first guess)) (cons 0 guess)]\n    [else (cons\
    \ (abs (- (first game) (first guess))) guess)]))\n", "  (let ((score (game-score\
    \ game))\n        (guess (game-guess game)))\n    (cond\n      [(= (length guess)\
    \ 0) 0]\n      [(= (length score) 0) (abs (- guess score))]\n      [else (abs\
    \ (- guess score))]))))\n", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (- guess game)))\n        (if (= diff 0)\n            (list 0)\n    \
    \        (list diff))))\n  (let ((diff (- guess game)))\n    (if (= diff 0)\n\
    \        (list 0)\n        (list diff))))\n", "  (if (equal? game guess)\n   \
    \   0\n      (abs (- guess game))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (- guess game)))\n        (if (= diff 0)\n            (list\
    \ 0)\n            (list diff))))\n  (let ((diff (- guess game)))\n    (if (= diff\
    \ 0)\n        (list 0)\n        (list diff))))\n", "  (if (null? guess)\n    \
    \  0\n      (let ((score (car guess))\n            (diff (car (cdr guess))))\n\
    \        (if (= score score)\n            0\n            (abs (- score diff)))))\n",
  "  (if (= (length game) (length guess))\n      0\n      (abs (- (car game) (car\
    \ guess))))) ; absolute difference\n", "  (let ((score (game-score game))\n  \
    \      (guess (game-guess game)))\n    (if (equal? guess score)\n        0\n \
    \       (abs (- guess score)))))\n", "  (if (equal? (game-score game) 0)\n   \
    \   (game-score guess)\n      (abs (game-score guess) (- (game-score game) (game-score\
    \ guess)))))\n", "  (if (null? game)\n      '()\n      (let ((score (car game))\n\
    \            (guess (car guess))\n            (diff (abs (- guess score))))\n\
    \        (cons (cons diff score) \n              (compare (cdr game) (cdr guess)))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (- guess game)))\n  \
    \      (if (= diff 0)\n            (list 0)\n            (list diff))))\n  (let\
    \ ((diff (- guess game)))\n    (if (= diff 0)\n        (list 0)\n        (list\
    \ diff))))\n", "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n",
  "  (cond\n    [(empty? game) (list 0)]\n    [(empty? guess) (list 0)]\n    [else\
    \ (let ([score (car game)]\n               [guess (car guess)]\n             \
    \  [result (compare (cdr game) (cdr guess)))]\n             [diff (if (= score\
    \ guess) 0 \n                       (abs (- guess score)))])\n          (cons\
    \ diff result))]\n))\n", "  (if (= (length game) (length guess))\n      0\n  \
    \    (abs (- (car game) (car guess))))) ; absolute difference\n", "  (cond\n \
    \   [(empty? game) (empty? guess)] \n    [(= (first game) (first guess)) (cons\
    \ 0 guess)]\n    [else (cons (abs (- (first game) (first guess))) guess)]))\n",
  "  (cond\n    [(empty? game) (empty? guess)] \n    [else (let ([score (first game)]\n\
    \               [guess (rest guess)])\n           (cond\n             [(= (first\
    \ guess) score) 0]\n             [else (- guess (first game))]))]))\n", "  (cond\n\
    \    [(empty? game) (empty? guess)] \n    [(equal? (first game) (first guess))\
    \ (+ 1 (compare (rest game) (rest guess)))]\n    [else (+ 1 (compare (rest game)\
    \ guess))]\n  )\n)\n", "  (if (null? guess)\n      0\n      (let ((diff (- guess\
    \ game)))\n        (if (< diff 0)\n            diff\n            (if (= diff 0)\n\
    \                0\n                diff))))\n", "  (cond\n    [(empty? game)\
    \ (list guess)]\n    [(empty? guess) (list game)]\n    [(= (first game) (first\
    \ guess)) (list 0)]\n    [else (list (abs (- (first game) (first guess)))\n  \
    \             (compare game (rest game) (rest guess)))]))\n", "  (if (equal? game\
    \ guess)\n      0\n      (abs (- guess game))))\n", "  (if (equal? game guess)\n\
    \      0\n      (abs (- guess game))))\n", "  (cond\n    [(empty? game) (list\
    \ 0)]\n    [(empty? guess) (list 0)]\n    [(equal? (first game) (first guess))\
    \ (list (abs (- (first game) (first guess))))]\n    [else (cons (abs (- (first\
    \ game) (first guess))) (compare (rest game) guess))]\n  )\n)\n", "  (let ((score\
    \ (game-score game))\n        (guess (game-guess game)))\n    (if (equal? guess\
    \ score)\n        0\n        (abs (- guess score)))))\n", "  (if (= (length game)\
    \ (length guess))\n      0\n      (abs (- (car guess) (car game)))))\n", "  (if\
    \ (equal? (game-score game) 0)\n      (game-score guess)\n      (abs (game-score\
    \ guess) (- (game-score game) (game-score guess)))))\n", "  (if (= (length game)\
    \ (length guess))\n      0\n      (abs (- (car guess) (car game)))))\n", "  (if\
    \ (equal? (game-score game) (game-score guess))\n      0\n      (abs (game-score\
    \ guess) (- (game-score game) (game-score guess)))))\n", "  (let ((score (game-score\
    \ game))\n        (guess (game-guess game)))\n    (if (equal? guess score)\n \
    \       0\n        (abs (- guess score)))))\n", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (- guess game)))\n        (if (= diff 0)\n      \
    \      (list 0)\n            (list diff))))\n  (let ((diff (- guess game)))\n\
    \    (if (= diff 0)\n        (list 0)\n        (list diff))))\n", "  (if (= (length\
    \ game) (length guess))\n      0\n      (abs (- (car game) (car guess))))) ; <--\
    \ this is the key line\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks\
    \ so much! I didn't realize that my code was so far off. I'm still learning Racket\
    \ and I appreciate your help.\n<|/ c |>\n<| c |>\nNo problem! I added a comment\
    \ to explain the key line that made your program work. Good luck!\n<|/ c |>\n\
    <| c |>\nThanks so much! I didn't realize that my code was so far off. I'm still\
    \ learning Racket and I appreciate your help.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? game) (list 0)]\n    [(empty? guess) (list\
    \ 0)]\n    [(= (first game) (first guess)) (list 0)]\n    [else (cons (abs (-\
    \ (first game) (first guess)))\n                (compare (rest game) (rest guess)))]))\n",
  "  (if (= (length game) (length guess))\n      0\n      (abs (- (car guess) (car\
    \ game)))))\n", "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n",
  "  (if (equal? (game-result game) (game-result guess))\n      0\n      (abs (game-result\
    \ guess) (- (game-result game) (game-result guess)))))\n", "  (let ((scores (game-scores\
    \ game))\n        (guesses (game-guesses game)))\n    (cond\n      [(empty? guesses)\
    \ 0]\n      [(equal? (first guesses) guess)\n       (if (equal? (first scores)\
    \ guess)\n           (+ 1 (compare (rest game) guess))\n           (compare (rest\
    \ game) guess))]\n      [else (+ 1 (compare (rest game) guess))]))))\n", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (- guess game)))\n     \
    \   (if (= diff 0)\n            0\n            (abs diff)))))\n", "  (if (equal?\
    \ guess game)\n      0\n      (abs (- guess game))))\n", "  (if (equal? game guess)\n\
    \      0\n      (abs (- guess game))))\n", "  (if (equal? (game-result game) guess)\n\
    \      0\n      (abs (game-result game) (- (game-result game) guess))))\n", " \
    \ (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (if (=\
    \ (length game) (length guess))\n      (let ([scores (subseq game 0 -1)])\n  \
    \      (let ([guesses (subseq guess 0 -1)])\n          (if (= (length scores)\
    \ (length guesses))\n              (let ([scores (subseq scores 0 -1)])\n    \
    \            (let ([guesses (subseq guesses 0 -1)])\n                  (if (=\
    \ (length scores) (length guesses))\n                      (let ([scores (subseq\
    \ scores 0 -1)])\n                        (let ([guesses (subseq guesses 0 -1)])\n\
    \                          (if (= (length scores) (length guesses))\n        \
    \                      (let ([scores (subseq scores 0 -1)])\n                \
    \                (let ([guesses (subseq guesses 0 -1)])\n                    \
    \              (if (= (length scores) (length guesses))\n                    \
    \                  (let ([scores (subseq scores 0 -1)])\n                    \
    \                    (let ([guesses (subseq guesses 0 -1)])\n                \
    \                          (if (= (length scores) (length guesses))\n        \
    \                                      (let ([scores (subseq scores 0 -1)])\n\
    \                                                (let ([guesses (subseq guesses\
    \ 0 -1)])\n                                                  (if (= (length scores)\
    \ (length guesses))\n                                                      (let\
    \ ([scores (subseq scores 0 -1)])\n                                          \
    \              (let ([guesses (subseq guesses 0 -1)])\n                      \
    \                                    (if (= (length scores) (length guesses))\n\
    \                                                              (let ([scores (subseq\
    \ scores 0 -1)])\n                                                           \
    \     (let ([guesses (subseq guesses 0 -1)])\n                               \
    \                                   (if (= (length scores) (length guesses))\n\
    \                                                                      (let ([scores\
    \ (subseq scores 0 -1)])\n                                                   \
    \                     (let ([guesses (subseq guesses 0 -1)])\n               \
    \                                                           (if (= (length scores)\
    \ (length guesses))\n                                                        \
    \                      (let ([scores (subseq scores 0 -1)])\n                \
    \                                                                (let ([guesses\
    \ (subseq guesses 0 -1)])\n                                                  \
    \                                (if (= (length scores) (length guesses))\n  \
    \                                                                            \
    \        (let ([scores (subseq scores 0 -1)])\n                              \
    \                                                          (let ([guesses (subseq\
    \ guesses 0 -1)])\n                                                          \
    \                                (if (= (length scores) (length guesses))\n  \
    \                                                                            \
    \                (let ([scores (subseq scores 0 -1)])\n                      \
    \                                                                          (let\
    \ ([guesses (subseq guesses 0 -1)])\n                                        \
    \                                                          (if (= (length scores",
  "  (let ((score (game-score game))\n        (guess (game-guess game)))\n    (if\
    \ (= guess score)\n        0\n        (abs (- guess score)))))\n", "  (if (equal?\
    \ (game-result game) guess)\n      0\n      (abs (game-result game) (- (game-result\
    \ game) guess))))\n", "  (cond\n    [(empty? game) (list 0)]\n    [(empty? guess)\
    \ (list 0)]\n    [(= (first game) (first guess)) (list 0)]\n    [else (list (abs\
    \ (- (first game) (first guess)))\n                (compare (rest game) (rest\
    \ guess)))]))\n", "  (if (= (length game) (length guess))\n      0\n      (abs\
    \ (- (car game) (car guess))))) ; absolute difference\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI appreciate your efforts, but I believe you misunderstood the\
    \ question. Your solution does not take into account the fact that there are multiple\
    \ matches. I believe that my solution does take into account multiple matches.\
    \ I believe that my solution does take into account multiple matches. I believe\
    \ that my solution does take into account multiple matches. I believe that my\
    \ solution does take into account multiple matches. I believe that my solution\
    \ does take into account multiple matches. I believe that my solution does take\
    \ into account multiple matches. I believe that my solution does take into account\
    \ multiple matches. I believe that my solution does take into account multiple\
    \ matches. I believe that my solution does take into account multiple matches.\
    \ I believe that my solution does take into account multiple matches. I believe\
    \ that my solution does take into account multiple matches. I believe that my\
    \ solution does take into account multiple matches. I believe that my solution\
    \ does take into account multiple matches. I believe that my solution does take\
    \ into account multiple matches. I believe that my solution does take into account\
    \ multiple matches. I believe that my solution does take into account multiple\
    \ matches. I believe that my solution does take into account multiple matches.\
    \ I believe that my solution does take into account multiple matches. I believe\
    \ that my solution does take into account multiple matches. I believe that my\
    \ solution does take into account multiple matches. I believe that my solution\
    \ does take into account multiple matches. I believe that my solution does take\
    \ into account multiple matches. I believe that my solution does take into account\
    \ multiple matches. I believe that my solution does take into account multiple\
    \ matches. I believe that my solution does take into account multiple matches.\
    \ I believe that my solution does take into account multiple matches. I believe\
    \ that my solution does take into account multiple matches. I believe that my\
    \ solution does take into account multiple matches. I believe that my solution\
    \ does take into account multiple matches. I believe that my solution does take\
    \ into account multiple matches. I believe that my solution does take into account\
    \ multiple matches. I believe that my solution does take into account multiple\
    \ matches. I believe that my solution does take into account multiple matches.\
    \ I believe that my solution does take into account multiple matches. I believe\
    \ that my solution does take into account multiple matches. I believe that my\
    \ solution does take into account multiple matches. I believe that ", "  (if (=\
    \ (length game) (length guess))\n      (let ((diff (- guess game)))\n        (if\
    \ (= diff 0)\n            0\n            (abs diff)))))\n", "  (if (equal? game\
    \ guess)\n      0\n      (abs (- guess game))))\n", "  (cond\n    [(empty? game)\
    \ (empty? guess)] \n    [else (let ([score (car game)]\n               [guess\
    \ (car guess)]\n               [result (compare (cdr game) (cdr guess)))])\n \
    \         (cond\n            [(= score guess) 0]\n            [else (- result\
    \ (abs (- score guess)))]))]))\n", "  (cond\n    [(empty? game) (empty? guess)]\
    \ \n    [(equal? (first game) (first guess)) (+ 1 (compare (rest game) (rest guess)))]\n\
    \    [else (+ 1 (compare (rest game) guess))]))\n", "  (if (= (length game) (length\
    \ guess))\n      0\n      (abs (- (car guess) (car game)))))\n", "  (cond\n  \
    \  [(empty? game) (empty? guess)] \n    [else (let ([score (first game)]\n   \
    \            [guess (rest guess)])\n           (cond\n             [(= (first\
    \ guess) score) (if (= (first guess) score) 0 \n                             \
    \          (abs (first guess) score))]\n             [else (if (= (first guess)\
    \ score) 0 \n                        (abs (first guess) score))]))]))\n", "  (if\
    \ (null? game)\n      '()\n      (let ((score (car game))\n            (guess\
    \ (car guess))\n            (diff (car game)))\n        (if (= guess score)\n\
    \            (list diff)\n            (cons (- diff guess)\n                 \
    \ (compare game (cons guess guess)))))))\n", "  (if (equal? game guess)\n    \
    \  0\n      (abs (- guess game))))\n", "  (let ((scores (map score game))\n  \
    \      (guesses (map guess game)))\n    (if (= (length scores) (length guesses))\n\
    \        (let ((scores (map score game))\n              (guesses (map guess game)))\n\
    \          (let ((scores (map score game))\n                (guesses (map guess\
    \ game)))\n            (let ((scores (map score game))\n                  (guesses\
    \ (map guess game)))\n              (let ((scores (map score game))\n        \
    \            (guesses (map guess game)))\n                (let ((scores (map score\
    \ game))\n                      (guesses (map guess game)))\n                \
    \  (let ((scores (map score game))\n                        (guesses (map guess\
    \ game)))\n                    (let ((scores (map score game))\n             \
    \             (guesses (map guess game)))\n                    (let ((scores (map\
    \ score game))\n                          (guesses (map guess game)))\n      \
    \              (let ((scores (map score game))\n                          (guesses\
    \ (map guess game)))\n                    (let ((scores (map score game))\n  \
    \                        (guesses (map guess game)))\n                    (let\
    \ ((scores (map score game))\n                          (guesses (map guess game)))\n\
    \                    (let ((scores (map score game))\n                       \
    \   (guesses (map guess game)))\n                    (let ((scores (map score\
    \ game))\n                          (guesses (map guess game)))\n            \
    \        (let ((scores (map score game))\n                          (guesses (map\
    \ guess game)))\n                    (let ((scores (map score game))\n       \
    \                   (guesses (map guess game)))\n                    (let ((scores\
    \ (map score game))\n                          (guesses (map guess game)))\n \
    \                   (let ((scores (map score game))\n                        \
    \  (guesses (map guess game)))\n                    (let ((scores (map score game))\n\
    \                          (guesses (map guess game)))\n                    (let\
    \ ((scores (map score game))\n                          (guesses (map guess game)))\n\
    \                    (let ((scores (map score game))\n                       \
    \   (guesses (map guess game)))\n                    (let ((scores (map score\
    \ game))\n                          (guesses (map guess game)))\n            \
    \        (let ((scores (map score game))\n                          (guesses (map\
    \ guess game)))\n                    (let ((scores (map score game))\n       \
    \                   (guesses (map guess game)))\n                    (let ((scores\
    \ (map score game))\n                          (guesses (map guess game)))\n \
    \                   (", "  (if (equal? (game-score game) 0)\n      (game-score\
    \ guess)\n      (abs (game-score guess) (- (game-score game) (game-score guess)))))\n",
  "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (if (=\
    \ (length game) (length guess))\n      0\n      (abs (- (car game) (car guess)))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (- guess game)))\n  \
    \      (if (= diff 0)\n            (list 0)\n            (list diff))))\n  (let\
    \ ((diff (- guess game)))\n    (if (= diff 0)\n        (list 0)\n        (list\
    \ diff))))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [else (let ([score\
    \ (first game)]\n               [guess (rest guess)]\n               [result (compare\
    \ (rest game) guess))]\n             [diff (if (= (first guess) score)\n     \
    \               0\n                    (abs (- guess (first score))))])\n    \
    \      (cons diff result)])))\n", "  (let ((score (game-score game))\n       \
    \ (guess (game-guess game)))\n    (cond\n      [(= guess score) 0]\n      [else\
    \ (abs (- guess score))]))))\n", "  (if (equal? (game-score game) 0)\n      (game-score\
    \ guess)\n      (abs (game-score guess) (- (game-score game) (game-score guess)))))\n",
  "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (let ([scores\
    \ (game-scores game)]\n        [guesses (game-guesses game)])\n    (cond\n   \
    \   [(empty? guesses) 0]\n      [(equal? (first guesses) guess)\n       (if (equal?\
    \ (first scores) guess)\n           (+ 1 (compare game (rest guesses)))\n    \
    \       (+ 1 (compare game (rest scores))))]\n      [else (if (equal? (first scores)\
    \ guess)\n               (+ 1 (compare game (rest guesses)))\n               (+\
    \ 1 (compare game (rest scores))))])))\n", "  (if (equal? guess game)\n      0\n\
    \      (abs (- guess game))))\n", "  (if (equal? guess game)\n      0\n      (abs\
    \ (- guess game))))\n", "  (if (= (length game) (length guess))\n      (let ([scores\
    \ (subseq game 0 -1)])\n        (let ([guesses (subseq guess 0 -1)])\n       \
    \   (if (= (length scores) (length guesses))\n              (let ([scores (subseq\
    \ scores 0 -1)])\n                (let ([guesses (subseq guesses 0 -1)])\n   \
    \               (if (= (length scores) (length guesses))\n                   \
    \   (let ([scores (subseq scores 0 -1)])\n                        (let ([guesses\
    \ (subseq guesses 0 -1)])\n                          (if (= (length scores) (length\
    \ guesses))\n                              (let ([scores (subseq scores 0 -1)])\n\
    \                                (let ([guesses (subseq guesses 0 -1)])\n    \
    \                              (if (= (length scores) (length guesses))\n    \
    \                                  (let ([scores (subseq scores 0 -1)])\n    \
    \                                    (let ([guesses (subseq guesses 0 -1)])\n\
    \                                          (if (= (length scores) (length guesses))\n\
    \                                              (let ([scores (subseq scores 0\
    \ -1)])\n                                                (let ([guesses (subseq\
    \ guesses 0 -1)])\n                                                  (if (= (length\
    \ scores) (length guesses))\n                                                \
    \      (let ([scores (subseq scores 0 -1)])\n                                \
    \                        (let ([guesses (subseq guesses 0 -1)])\n            \
    \                                              (if (= (length scores) (length\
    \ guesses))\n                                                              (let\
    \ ([scores (subseq scores 0 -1)])\n                                          \
    \                      (let ([guesses (subseq guesses 0 -1)])\n              \
    \                                                    (if (= (length scores) (length\
    \ guesses))\n                                                                \
    \      (let ([scores (subseq scores 0 -1)])\n                                \
    \                                        (let ([guesses (subseq guesses 0 -1)])\n\
    \                                                                          (if\
    \ (= (length scores) (length guesses))\n                                     \
    \                                         (let ([scores (subseq scores 0 -1)])\n\
    \                                                                            \
    \    (let ([guesses (subseq guesses 0 -1)])\n                                \
    \                                                  (if (= (length scores) (length\
    \ guesses))\n                                                                \
    \                      (let ([scores (subseq scores 0 -1)])\n                \
    \                                                                        (let\
    \ ([guesses (subseq guesses 0 -1)])\n                                        \
    \                                                  (if (= (length scores) (length\
    \ guesses))\n                                                                \
    \                              (let ([scores (subseq scores 0 -1)])\n        \
    \                                                                            \
    \            (let ([guesses (subseq guesses 0 -1)])\n                        \
    \                                                                          (if\
    \ (= (length scores", "  (if (null? guess)\n      (list 0)\n      (let ((diff\
    \ (- guess game)))\n        (if (= diff 0)\n            (list 0)\n           \
    \ (list diff))))) ; <-- this line is what makes the difference\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nI appreciate your answer, but I'm afraid I didn't make\
    \ myself clear. My question was about how to compare the two lists I have. Your\
    \ answer doesn't really help with that. Thanks anyway!\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the code explaining what makes the difference. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks again, but I still don't understand why my code doesn't\
    \ work. Could you please explain why my code doesn't work? Thanks!\n<|/ c |>\n\
    <| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for\
    \ your explanation! I still don't understand why my code doesn't work. Could you\
    \ please explain why my code doesn't work? Thanks!\n<|/ c |>\n<| a dscore=0 |>\n\
    The problem is that the return value from your compare function is a list of lists.\
    \ You then call map on that list to return a list of lists. But map expects a\
    \ function as its first argument. Your compare function returns only a single\
    \ value, so map doesn't know what to do with it.\nThe solution is to either flatten\
    \ the list of lists returned by compare or to change your compare function to\
    \ return a value instead of a list of lists.\n<|/ a tags=racket,scheme |>\n<|\
    \ c |>\nThanks for your answer! Could you please explain why my code doesn't work?\
    \ Thanks!\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n\
    <| a tags=racket,scheme dscore=0 |>\nThe problem is that the return value from\
    \ your compare function is a list of lists. You then call map on that list to\
    \ return a list of lists. But map expects a function as its first argument. Your\
    \ compare function returns only a single value, so map doesn't know what to do\
    \ with it.\nThe solution is to either flatten the list of lists returned by compare\
    \ or to change your compare function to return a value instead of a list of lists.\n\
    <|/ a |>\n<| a tags=racket,scheme |>\nThe problem is that the return value from\
    \ your compare function is a list of lists. You then call map on that list to\
    \ return a list of lists. But map expects a function as its first ", "  (if (equal?\
    \ game guess)\n      0\n      (abs (- guess game))))\n", "  (if (equal? game guess)\n\
    \      0\n      (abs (- guess game))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (- guess game)))\n        (if (= diff 0)\n            0\n \
    \           (abs diff)))))\n", "  (if (equal? (game-result game) guess)\n    \
    \  0\n      (abs (game-result game) (- (game-result game) guess))))\n", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (- guess game)))\n     \
    \   (if (= diff 0)\n            (list 0)\n            (list diff))))\n  (let ((diff\
    \ (- guess game)))\n    (if (= diff 0)\n        (list 0)\n        (list diff))))\n",
  "  (if (null? guess)\n      (list 0)\n      (let ((diff (- guess (car game))))\n\
    \        (cons diff (compare game (rest guess)))))) ; recurse on rest of guess\n",
  "  (let loop ((game-scores (game-scores game))\n             (guess-scores (game-scores\
    \ guess))\n             (game-guesses (game-guesses game))\n             (guess-guesses\
    \ (game-guesses guess)))\n    (if (or (null? game-scores)\n            (null?\
    \ guess-scores))\n        (list 0)\n        (let ((game-score (first game-scores))\n\
    \              (guess-score (first guess-scores))\n              (game-guess (first\
    \ game-guesses))\n              (guess-guess (first guess-guesses)))\n       \
    \   (if (= game-score guess-score)\n              (loop (rest game-scores) (rest\
    \ guess-scores) (rest game-guesses) (rest guess-guesses))\n              (loop\
    \ (rest game-scores) (cons game-score guess-scores) (rest game-guesses) (cons\
    \ game-guess guess-guesses)))))))\n", "  (if (equal? game guess)\n      0\n  \
    \    (abs (- guess game))))\n", "  (if (equal? game guess)\n      0\n      (abs\
    \ (- guess game))))\n", "  (if (equal? guess game)\n      0\n      (abs (- guess\
    \ game))))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first game)\
    \ (first guess)) (cons 0 game)]\n    [else (cons (abs (first guess) (rest game))\
    \ game)]))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first game)\
    \ (first guess)) (cons 0 guess)]\n    [else (cons (abs (first guess) (first game))\
    \ guess)]\n  )\n)\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (- guess game)))\n        (if (= diff 0)\n            0\n            (abs diff)))))\n",
  "  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first game) (first guess))\
    \ (cons 0 guess)]\n    [else (cons (abs (first game) (first guess))\n        \
    \        (compare rest (rest guess)))]))\n", "  (if (null? game)\n      '()\n\
    \      (cons (abs (- guess (car game))) \n            (compare (cdr game) guess)))))\n",
  "  (if (equal? (game-score game) 0)\n      (game-score guess)\n      (abs (game-score\
    \ guess) (- (game-score game) (game-score guess)))))\n", "  (let ((score (game-score\
    \ game))\n        (guess (game-guess game)))\n    (if (equal? guess score)\n \
    \       0\n        (abs (- guess score)))))\n", "  (if (equal? game guess)\n \
    \     0\n      (abs (- guess game))))\n", "  (if (null? game)\n      (list guess)\n\
    \      (let ((score (car game))\n            (guess (car guess)))\n        (if\
    \ (= score guess)\n            (list 0)\n            (list (abs (- guess score)))))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (- guess game)))\n  \
    \      (if (= diff 0)\n            0\n            (abs diff)))))\n", "  (if (null?\
    \ game)\n      (if (null? guess)\n          0\n          (abs (- guess (car game)))\n\
    \      )\n      (if (null? guess)\n          (abs (- (car game) (car game)))\n\
    \          (if (equal? (car game) (car guess))\n              (+ 1 (compare (cdr\
    \ game) (cdr guess)))\n              (+ 1 (compare (cdr game) guess))\n      \
    \    )\n      )\n  )\n)\n", "  (let ((scores (map score-of game))\n        (guesses\
    \ (map guess-of guess)))\n    (if (equal? scores guesses)\n        0\n       \
    \ (abs (- guesses scores))))))\n", "  (if (= (length game) (length guess))\n \
    \     (let ((diff (- guess game)))\n        (if (= diff 0)\n            0\n  \
    \          (abs diff)))))\n", "  (let ((score (game-score game))\n        (guess\
    \ (game-guess game)))\n    (if (equal? guess score)\n        0\n        (abs (-\
    \ guess score)))))\n", "  (if (equal? guess game)\n      0\n      (abs (- guess\
    \ game))))\n", "  (if (equal? (game-score game) (game-score guess))\n      0\n\
    \      (abs (game-score guess) (game-score game))))\n", "  (cond\n    [(empty?\
    \ game) (list guess)]\n    [(empty? guess) (list game)]\n    [else (cons (abs\
    \ (- (car game) (car guess))) (compare game (cdr guess)))]))\n", "  (if (equal?\
    \ guess game)\n      0\n      (abs (- guess game))))\n", "  (if (equal? (game-score\
    \ game) (game-score guess))\n      0\n      (abs (game-score guess) (- (game-score\
    \ game) (game-score guess)))))\n", "  (if (equal? (game-result game) guess)\n\
    \      0\n      (abs (game-result game) (- (game-result game) guess))))\n", " \
    \ (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (if (equal?\
    \ game guess)\n      0\n      (abs (- guess game))))\n", "  (if (equal? (game-score\
    \ game) 0)\n      (game-score guess)\n      (abs (game-score guess) (- (game-score\
    \ game) (game-score guess)))))\n", "  (let ((score (game-score game))\n      \
    \  (guess (game-guess game)))\n    (if (equal? guess score)\n        0\n     \
    \   (abs (- guess score)))))\n", "  (if (equal? game guess)\n      0\n      (abs\
    \ (- guess game))))\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (- guess game)))\n        (if (= diff 0)\n            0\n            (abs diff)))))\n",
  "  (cond\n    [(empty? game) (empty? guess)] \n    [(equal? (first game) (first\
    \ guess)) (compare rest guess) ]\n    [else (+ (abs (first game) (first guess))\n\
    \             (compare rest guess))]))\n", "  (if (null? game)\n      guess\n\
    \      (let ((score (car game))\n            (guess (car guess))\n           \
    \ (diff (abs (- guess score))))\n        (cons (cons diff score) \n          \
    \    (compare (cdr game) (cdr guess)))))\n", "  (cond\n    [(empty? game) (empty?\
    \ guess)] \n    [else (let ([score (car game)]\n               [guess (car guess)]\n\
    \               [result (compare (cdr game) (cdr guess)))]\n             [diff\
    \ (if (= score guess) 0 \n                       (abs (- guess score)))])\n  \
    \        (cons diff result))]\n    [else (error 'compare (list game guess))]))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (- guess game)))\n  \
    \      (if (= diff 0)\n            (list 0)\n            (list diff))))\n  (let\
    \ ((diff (- guess game)))\n    (if (= diff 0)\n        (list 0)\n        (list\
    \ diff))))\n", "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n",
  "  (if (= (length game) (length guess))\n      (let ((scores (make-array (length\
    \ guess) 'int))\n            (guesses (make-array (length guess) 'int)))\n   \
    \     (let loop ((i 0) (j 0))\n          (if (< i j)\n              (begin (set!\
    \ guesses (vector-set! guesses j guess))\n                     (set! scores (vector-set!\
    \ scores j 0))\n                     (loop (+ i 1) (+ j 1))))\n            (begin\
    \ (set! scores (vector-set! scores i 0))\n                  (set! guesses (vector-set!\
    \ guesses i guess))\n                  (loop (+ i 1) j)))))\n    (let loop ((i\
    \ 0) (j 0))\n      (if (< i j)\n          (begin (set! guesses (vector-set! guesses\
    \ j guess))\n                 (set! scores (vector-set! scores j 0))\n       \
    \          (loop (+ i 1) (+ j 1))))\n      (begin (set! scores (vector-set! scores\
    \ i 0))\n            (set! guesses (vector-set! guesses i guess))\n          \
    \  (loop (+ i 1) j)))))\n", "  (if (equal? game guess)\n      0\n      (abs (-\
    \ guess game))))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [(empty?\
    \ guess) 0]\n    [else (let ([score (first game)])\n            (let ([guess (first\
    \ guess)])\n              (cond\n                [(= score guess) 0]\n       \
    \         [else (- guess score)])))]))\n", "  (let ((scores (map score game))\n\
    \        (guesses (map guess game)))\n    (if (null? guesses)\n        scores\n\
    \        (let ((diff (- guess (first guesses))))\n          (cons diff (compare\
    \ scores (rest guesses)))))))\n", "  (cond\n    [(empty? game) (empty? guess)]\
    \ \n    [(= (first game) (first guess)) (cons 0 guess)]\n    [else (cons (abs\
    \ (first guess) (first game)) guess)]\n  )\n)\n", "  (if (equal? (game-score game)\
    \ (game-score guess))\n      0\n      (abs (game-score guess) (- (game-score game)\
    \ (game-score guess)))))\n", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (- guess game)))\n        (if (= diff 0)\n            0\n           \
    \ (- diff))))\n  (let ((diff (- guess game)))\n    (if (= diff 0)\n        0\n\
    \        (- diff))))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [(=\
    \ (first game) (first guess)) (cons 0 guess)]\n    [else (cons (abs (first guess)\
    \ (rest game)) guess)]\n  )\n)\n", "  (if (null? game)\n      '()\n      (let\
    \ ((score (car game))\n            (guess (car guess))\n            (diff (abs\
    \ (- guess score))))\n        (cons (cons diff score) \n              (compare\
    \ \n               (cdr game)\n               (cdr guess)))))\n", "  (cond\n \
    \   [(empty? game) (empty? guess)] \n    [else (let ([score (car game)]\n    \
    \           [guess (car guess)]\n               [diff (- guess score)])\n    \
    \       (cond\n             [(= score guess) 0]\n             [else diff])])]))\n",
  "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (let ((score\
    \ (game-score game))\n        (guess (game-guess game)))\n    (cond\n      [(=\
    \ (game-score game) 0)\n       (game-score guess)]\n      [(= (game-score guess)\
    \ 0)\n       (game-score score)]\n      [else\n       (abs (- guess score))]))))\n",
  "  (let ((scores (map score game))\n        (guesses (map guess game)))\n    (if\
    \ (null? guesses) \n        (map abs scores)\n        (let ((best-score (first\
    \ scores))\n               (best-guess (first guesses)))\n          (if (< (abs\
    \ best-score) (abs best-guess))\n              (cons best-score (compare scores\
    \ guesses))\n              (cons best-guess (compare guesses scores)))))))\n",
  "  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first game) (first guess))\
    \ (cons 0 guess)]\n    [else (cons (abs (- (first game) (first guess))) guess)]\n\
    \  )\n)\n", "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n",
  "  (if (equal? (game-score game) 0)\n      (game-score guess)\n      (abs (game-score\
    \ guess) (- (game-score game) (game-score guess)))))\n", "  (if (null? guess)\n\
    \      0\n      (if (equal? (car guess) (car game))\n          0\n          (abs\
    \ (- (car guess) (car game)))))) \n", "  (cond\n    [(empty? game) (list guess)]\n\
    \    [(empty? guess) (list game)]\n    [(= (first game) (first guess)) (list 0)]\n\
    \    [else (cons (abs (- (first game) (first guess)))\n                (compare\
    \ (rest game) (rest guess)))]))\n", "  (if (equal? (game-score game) 0)\n    \
    \  (game-score guess)\n      (abs (game-score guess) (- (game-score game) (game-score\
    \ guess)))))\n", "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n",
  "  (if (= (length game) (length guess))\n      (let ((scores (make-array (length\
    \ game) 'int))\n            (guesses (make-array (length guess) 'int)))\n    \
    \    (loop for i from 0 to (length game)\n              for j from 0 to (length\
    \ guess)\n              when (= (game-score game i) (guesses-score guess j))\n\
    \              (set! scores[i] j)\n              (set! guesses[j] i))))\n    \
    \  (let ((scores (make-array (length game) 'int))\n            (guesses (make-array\
    \ (length guess) 'int)))\n        (loop for i from 0 to (length game)\n      \
    \        for j from 0 to (length guess)\n              when (= (game-score game\
    \ i) (guesses-score guess j))\n              (set! scores[i] j)\n            \
    \  (set! guesses[j] i))))\n  (let ((scores (make-array (length game) 'int))\n\
    \        (guesses (make-array (length guess) 'int)))\n    (loop for i from 0 to\
    \ (length game)\n          for j from 0 to (length guess)\n          when (= (game-score\
    \ game i) (guesses-score guess j))\n          (set! scores[i] j)\n          (set!\
    \ guesses[j] i))))\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for the answer.\
    \ I am still trying to understand how this works. I understand that you are comparing\
    \ each element of the two arrays and setting the score and guesses accordingly.\
    \ I am confused on how you get the absolute difference between the two scores.\
    \ I understand that you are taking the absolute difference between the two scores.\
    \ But how do you get the absolute difference between the two guesses?\n<|/ c |>\n\
    <| c |>\nThe absolute difference is simply the difference between the two scores.\
    \ I added a section to my answer to show how this can be done in one loop.\n<|/\
    \ c |>\n<| c |>\nThank you for the explanation. I understand it now. I was confused\
    \ on how to get the absolute difference between the two guesses. I appreciate\
    \ your help.\n<|/ c |>\n<| c |>\nI added a section to my answer to show how this\
    \ can be done in one loop.\n<|/ c |>\n<| a tags=racket,scheme |>\nHere's a solution\
    \ that uses only a single loop:\n<code>", "  (cond\n    [(empty? game) (list 0)]\n\
    \    [(empty? guess) (list 0)]\n    [else (let ([score (first game)]\n       \
    \        [guess (rest guess)]\n               [result (compare (rest game) guess))]\n\
    \             [(< score guess) (list result (- score guess))]\n             [(>\
    \ score guess) (list result (+ score guess))]))]))\n", "  (cond\n    [(empty?\
    \ game) (empty? guess)] \n    [else (let ([score (first game)]\n             \
    \  [guess (rest guess)])\n           (cond\n             [(< score guess) 0]\n\
    \             [(> score guess) (abs (- score guess))]\n             [else (+ 1\
    \ (compare game guess))]))]))\n", "  (if (equal? game guess)\n      0\n      (abs\
    \ (- guess game))))\n", "  (let ((scores (map score game))\n        (guesses (map\
    \ guess game)))\n    (let loop ((i 0) (j 0))\n      (if (< i guesses)\n      \
    \    (if (= (- guesses i) j)\n              (list 0)\n              (let ((diff\
    \ (- guesses i) (- scores j)))\n                (if (= diff 0)\n             \
    \       (list 0)\n                    (list diff))))\n          (list 0)))))\n",
  "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (if (equal?\
    \ (game-score game) (game-score guess))\n      0\n      (abs (game-score guess)\
    \ (- (game-score game) (game-score guess)))))\n", "  (if (null? game)\n      (list\
    \ guess)\n      (let ((diff (- guess (car game))))\n        (cons diff (compare\
    \ (cdr game) guess)))))\n", "  (if (equal? guess game)\n      0\n      (abs (-\
    \ guess game))))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [else\
    \ (let ([score (first game)]\n               [guess (rest guess)])\n         \
    \  (cond\n             [(equal? score guess) 0]\n             [else (- guess score)]))])))\n",
  "  (if (equal? (game-score game) 0)\n      (game-score guess)\n      (abs (game-score\
    \ guess) (- (game-score game) (game-score guess)))))\n", "  (cond\n    [(empty?\
    \ game) (empty? guess)] \n    [else (let ([score (first game)]\n             \
    \  [guess (rest guess)])\n            (cond\n              [(empty? guess) 0]\n\
    \              [else (let ([diff (abs (first guess))])\n                     \
    \ (cond\n                        [(empty? guess) diff]\n                     \
    \   [(= (first guess) score) 0]\n                        [else (+ diff (compare\
    \ score (rest guess)))])))])))])\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (- guess game)))\n        (if (= diff 0)\n            0\n \
    \           (abs diff)))))\n", "  (cond\n    [(empty? game) (empty? guess)] \n\
    \    [else (let ([score (first game)]\n               [guess (rest guess)])\n\
    \           (cond\n             [(empty? guess) 0]\n             [else (if (=\
    \ (first guess) score)\n                      0\n                      (+ (abs\
    \ (first guess) score) (abs (first guess) guess)))]))]))\n", "  (if (equal? (game-score\
    \ game) (game-score guess))\n      0\n      (abs (game-score guess) (- (game-score\
    \ game) (game-score guess)))))\n", "  (let ([scores (game-scores game)]\n    \
    \    [guesses (game-guesses game)]\n        [result (compare-scores scores guesses)])\n\
    \    (if (equal? guess result)\n        0\n        (abs (- guess result)))))\n",
  "  (if (equal? (game-score game) (game-score guess))\n      0\n      (abs (game-score\
    \ guess) (- (game-score game) (game-score guess)))))\n", "  (if (equal? game guess)\n\
    \      0\n      (abs (- guess game))))\n", "  (cond\n    [(empty? game) (list\
    \ 0)]\n    [(empty? guess) (list 0)]\n    [(= (first game) (first guess)) (list\
    \ 0)]\n    [else (list (abs (- (first game) (first guess)))\n               (compare\
    \ (rest game) (rest guess)))]))\n", "  (if (null? game)\n      '()\n      (if\
    \ (null? guess)\n          '()\n          (cons (abs (- guess (car game))) \n\
    \                (compare (cdr game) guess)))))\n", "  (cond\n    [(empty? game)\
    \ (list 0)]\n    [(empty? guess) (list 0)]\n    [(= (first game) (first guess))\
    \ (list (abs (first game) (first guess)))]\n    [else (cons (abs (first game)\
    \ (first guess)) (compare (rest game) (rest guess)))]))\n", "  (cond\n    [(empty?\
    \ game) (list guess)]\n    [else (cons (abs (- guess (car game))) \n         \
    \       (compare game (cdr game)))]))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (- guess game)))\n        (if (= diff 0)\n            0\n \
    \           (abs diff)))))\n", "  (if (= (length game) (length guess))\n     \
    \ (let ((diff (- guess game)))\n        (if (= diff 0)\n            0\n      \
    \      (abs diff)))))\n", "  (if (equal? game guess)\n      0\n      (abs (- guess\
    \ game))))\n", "  (if (equal? guess game)\n      0\n      (abs (- guess game))))\n",
  "  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first game) (first guess))\
    \ (cons 0 guess)]\n    [else (cons (abs (first guess) (rest game)) guess)]\n \
    \ )\n)\n", "  (let ((scores (map score game))\n        (guesses (map guess game)))\n\
    \    (if (= (length scores) (length guesses))\n        (let ((diff (map abs (map\
    \ - guesses scores))))\n          (if (= (length diff) 0)\n              (list\
    \ 0)\n              (list diff)))))\n", "  (if (null? game)\n      '()\n     \
    \ (if (null? guess)\n          '()\n          (if (equal? (car game) (car guess))\n\
    \              (cons 0 (compare (cdr game) (cdr guess)))\n              (cons\
    \ (abs (- (car game) (car guess))) (compare (cdr game) (cdr guess)))))))\n", " \
    \ (cond\n    [(empty? game) (list guess)]\n    [(empty? guess) (list game)]\n\
    \    [else (cons (- guess game) (compare game (rest guess)))]))\n", "  (if (equal?\
    \ guess game)\n      0\n      (abs (- guess game))))\n", "  (let ((score (game-score\
    \ game))\n        (guess (game-guess game)))\n    (if (equal? guess score)\n \
    \       0\n        (abs (- guess score)))))\n", "  (let ((score (game-score game))\n\
    \        (guess (game-guess game)))\n    (if (equal? guess score)\n        0\n\
    \        (abs (- guess score)))))\n", "  (if (equal? game guess)\n      0\n  \
    \    (abs (- guess game))))\n", "  (if (equal? (game-score game) 0)\n      (game-score\
    \ guess)\n      (abs (game-score guess) (- (game-score game) (game-score guess)))))\n",
  "  (if (equal? guess game)\n      0\n      (abs (- guess game))))\n", "  (if (equal?\
    \ (game-score game) 0)\n      (game-score guess)\n      (abs (game-score guess)\
    \ (- (game-score game) (game-score guess)))))\n", "  (if (equal? game guess)\n\
    \      0\n      (abs (- guess game))))\n", "  (if (null? guess)\n      0\n   \
    \   (let ((diff (- guess game)))\n        (if (= diff 0)\n            0\n    \
    \        (- diff))))\n", "  (cond\n    [(empty? game) (list 0)]\n    [(empty?\
    \ guess) (list 0)]\n    [(= (first game) (first guess)) (list 0)]\n    [else (cons\
    \ (abs (- (first game) (first guess)))\n                (compare (rest game) (rest\
    \ guess)))]))\n", "  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first\
    \ game) (first guess)) (cons 0 guess)]\n    [else (cons (abs (- (first game) (first\
    \ guess))) guess)]\n  )\n)\n", "  (if (equal? (game-score game) 0)\n      (game-score\
    \ guess)\n      (abs (game-score guess) (- (game-score game) (game-score guess)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
