name: HumanEval_152_compare
language: rkt
prompt: "#lang racket\n\n;; I think we all remember that feeling when the result of\
  \ some long-awaited\n;; event is finally known. The feelings and thoughts you have\
  \ at that moment are\n;; definitely worth noting down and comparing.\n;; Your task\
  \ is to determine if a person correctly guessed the results of a number of matches.\n\
  ;; You are given two arrays of scores and guesses of equal length, where each index\
  \ shows a match. \n;; Return an array of the same length denoting how far off each\
  \ guess was. If they have guessed correctly,\n;; the value is 0, and if not, the\
  \ value is the absolute difference between the guess and the score.\n;; example:\n\
  (define (compare game guess)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n\
  \    (check-equal? (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0\
  \ 0 0 3 3))\n    (check-equal? (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0))\
  \ (list 0 0 0 0 0 0))\n    (check-equal? (candidate (list 1 2 3) (list -1 -2 -3))\
  \ (list 2 4 6))\n    (check-equal? (candidate (list 1 2 3 5) (list -1 2 3 4)) (list\
  \ 2 0 0 1))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? game) (empty? guess)] \n    [(= (first game)\
    \ (first guess)) (cons 0 guess)]\n    [else (cons (abs (- (first game) (first\
    \ guess))) guess)]\n  )\n)\n", "  (if (equal? (game-score game) 0)\n      (game-score\
    \ guess)\n      (abs (game-score guess) (- (game-score game) (game-score guess)))))\n",
  "  (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (cond\n\
    \    [(empty? game) (list guess)]\n    [(empty? guess) (list game)]\n    [else\
    \ (cons (abs (- (car game) (car guess))) (compare game (cdr guess)))]))\n", " \
    \ (cond\n    [(empty? game) (empty? guess)] \n    [(equal? (first game) (first\
    \ guess)) (+ 1 (compare (rest game) (rest guess)))]\n    [else (+ 1 (compare (rest\
    \ game) guess))]\n  )\n)\n", "  (if (= (length game) (length guess))\n      (let\
    \ ((scores (make-array (length guess) 'int))\n            (guesses (make-array\
    \ (length guess) 'int)))\n        (let loop ((i 0) (j 0))\n          (if (< i\
    \ j)\n              (let ((score (car game))\n                    (guess (car\
    \ guess)))\n                (set! scores[j] (- score guess))\n               \
    \ (set! guesses[j] (- guess score))\n                (loop (+ i 1) (+ j 1))\n\
    \                (list scores guesses))\n              (let ((score (car game))\n\
    \                    (guess (car guess)))\n                (set! scores[j] (-\
    \ guess score))\n                (set! guesses[j] (- score guess))\n         \
    \       (loop (+ i 1) (+ j 1))))))))\n", "  (if (equal? game guess)\n      0\n\
    \      (abs (- guess game))))\n", "  (if (equal? (game-scores game) guess)\n \
    \     0\n      (abs (game-scores game) (- (game-scores game) guess))))\n", " \
    \ (if (= (length game) (length guess))\n      (let ((diff (- guess game)))\n \
    \       (if (= diff 0)\n            0\n            (abs diff))))\n  (let ((diff\
    \ (- guess game)))\n    (if (= diff 0)\n        0\n        (abs diff))))\n", " \
    \ (if (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (if (equal?\
    \ game guess)\n      0\n      (abs (- guess game))))\n", "  (if (= (length game)\
    \ (length guess))\n      0\n      (abs (- (car guess) (car game)))))\n", "  (if\
    \ (equal? game guess)\n      0\n      (abs (- guess game))))\n", "  (cond\n  \
    \  [(empty? game) (list guess)]\n    [(empty? guess) (list game)]\n    [else (cons\
    \ (- guess (first game)) (compare rest (rest guess)))]))\n", "  (if (equal? (game-score\
    \ game) (game-score guess))\n      0\n      (abs (game-score guess) (- (game-score\
    \ game) (game-score guess)))))\n", "  (if (= (length game) (length guess))\n \
    \     (let ((diff (- guess game)))\n        (if (= diff 0)\n            (list\
    \ 0)\n            (list diff))))\n  (let ((diff (- guess game)))\n    (if (= diff\
    \ 0)\n        (list 0)\n        (list diff))))\n", "  (if (equal? game guess)\n\
    \      0\n      (abs (- guess game))))\n", "  (cond\n    [(empty? game) (empty?\
    \ guess)] \n    [(= (first game) (first guess)) (cons 0 game)]\n    [else (cons\
    \ (abs (first guess) (rest game)) game)]))\n", "  (if (= (length game) (length\
    \ guess))\n      0\n      (abs (- (car game) (car guess))))) ; <-- this is the\
    \ important bit\n", "  (let ((score (game-score game))\n        (guess (game-guess\
    \ game)))\n    (if (equal? guess score)\n        0\n        (abs (- guess score)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
