name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (let ([numbers (string->list numbers)])\n    (sort numbers (lambda\
    \ (a b) (< (string->number a) (string->number b)))))\n  (list->string numbers))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers-sorted (sort numbers '<)])\n    (string-append (numbers-sorted\
    \ numbers) \" \"))))\n", "  (let ([numbers (string->list numbers)])\n    (sort\
    \ numbers <)\n    (string->list numbers)))\n", "  (let ([numbers-sorted (sort\
    \ numbers '<)])\n    (string-append (numbers-sorted \" \") \"\\n\")))\n", "  (sort\
    \ numbers (lambda (a b) (< (string-to-number a) (string-to-number b))))\n)\n",
  "  (let ([number-list '()])\n    (loop for number in numbers\n          for i from\
    \ 0 to (length numbers)\n          collect (cons number number-list))\n    (string-append\
    \ (sort number-list <)\n                  (sort number-list >))))\n", "  (cond\n\
    \    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"\
    ]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (let ((numbers (string->list\
    \ numbers)))\n    (sort numbers <)))\n", "  (cond\n    [(empty? numbers) \"\"\
    ]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ((numbers-sorted '()))\n    (loop for number in numbers\n          for i\
    \ from 0 to (length numbers)\n          for j from (+ i 1) to (length numbers)\n\
    \          when (= (substring number i 1) (substring number j 1))\n          collect\
    \ (cons number numbers-sorted)\n          finally (set! numbers-sorted (cons number\
    \ numbers-sorted)))))\n", "  (let ([numbers (string->list numbers)])\n    (if\
    \ (null? numbers)\n        '()\n        (append (sort numbers (lambda (a b) (<\
    \ (length a) (length b)))) '()))))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([number-chars (string->list numbers)])\n    (sort number-chars <)))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) 'one]\n\
    \    [(equal? (first numbers) 'one) 'two]\n    [(equal? (first numbers) 'two)\
    \ 'three]\n    [(equal? (first numbers) 'three) 'four]\n    [(equal? (first numbers)\
    \ 'four) 'five]\n    [(equal? (first numbers) 'five) 'six]\n    [(equal? (first\
    \ numbers) 'six) 'seven]\n    [(equal? (first numbers) 'seven) 'eight]\n    [(equal?\
    \ (first numbers) 'eight) 'nine]\n    [else (sort_numbers (rest numbers))]))\n",
  "  (sort numbers (lambda (a b) (< (string-to-number a) (string-to-number b))))\n\
    )\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\"\
    ) \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first\
    \ numbers) \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"\
    ]\n    [(equal? (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers)\
    \ \"five\") \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal?\
    \ (first numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\"\
    ) \"eight\"]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons\
    \ (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty?\
    \ numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal?\
    \ (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"\
    two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first\
    \ numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"\
    ]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers)\
    \ \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n\
    \    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (let ([number-list '()])\n    (loop\
    \ for number in numbers\n          for i from 0 to (length numbers)\n        \
    \  collect (cond [(number-list-empty? number-list) (cons number number-list)]\n\
    \                      [(number-list-empty? (cdr number-list)) (cons number number-list)]\n\
    \                      [else (cons (car number-list) (cons number number-list))]))))\n",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (cond\n      [(empty?\
    \ numbers) result]\n      [(equal? (first numbers) 'zero) (loop (rest numbers)\
    \ (cons 0 (first result)))]\n      [(equal? (first numbers) 'one) (loop (rest\
    \ numbers) (cons 1 (first result)))]\n      [(equal? (first numbers) 'two) (loop\
    \ (rest numbers) (cons 2 (first result)))]\n      [(equal? (first numbers) 'three)\
    \ (loop (rest numbers) (cons 3 (first result)))]\n      [(equal? (first numbers)\
    \ 'four) (loop (rest numbers) (cons 4 (first result)))]\n      [(equal? (first\
    \ numbers) 'five) (loop (rest numbers) (cons 5 (first result)))]\n      [(equal?\
    \ (first numbers) 'six) (loop (rest numbers) (cons 6 (first result)))]\n     \
    \ [(equal? (first numbers) 'seven) (loop (rest numbers) (cons 7 (first result)))]\n\
    \      [(equal? (first numbers) 'eight) (loop (rest numbers) (cons 8 (first result)))]\n\
    \      [(equal? (first numbers) 'nine) (loop (rest numbers) (cons 9 (first result)))]\n\
    \      [else (loop (rest numbers) (cons (first numbers) result))])))\n", "  (if\
    \ (empty? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 (- (length numbers) 1)))\n              (cons (substring numbers 1 (- (length\
    \ numbers) 1))\n                    (sort_numbers (substring numbers (- (length\
    \ numbers) 1) (length numbers))))))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (let ([numbers (string->list numbers)])\n    (if\
    \ (null? numbers)\n        '()\n        (append (sort numbers (lambda (x y) (<\
    \ (string->number x) (string->number y))))\n                (sort_numbers (substring\
    \ numbers (+ 0 (length numbers)))))))\n", "  (let ((result '()))\n    (for ([i\
    \ (in-range (length numbers))])\n      (if (numbers (+ i 1))\n          (cons\
    \ (cons i result) (sort_numbers (substring numbers 0 i)))\n          (cons i result)))))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (sort_numbers (rest numbers))]))\n", "  (let\
    \ ([numbers-sorted (sort numbers '<)])\n    (if (null? numbers-sorted)\n     \
    \   '()\n        (append (numbers-sorted 'zero) 'one)\n      )\n    )\n  )\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (cond\n      [(empty?\
    \ numbers) result]\n      [(equal? (first numbers) 'zero) (loop (rest numbers)\
    \ (cons 0 (first result)))]\n      [(equal? (first numbers) 'one) (loop (rest\
    \ numbers) (cons 1 (first result)))]\n      [(equal? (first numbers) 'two) (loop\
    \ (rest numbers) (cons 2 (first result)))]\n      [(equal? (first numbers) 'three)\
    \ (loop (rest numbers) (cons 3 (first result)))]\n      [(equal? (first numbers)\
    \ 'four) (loop (rest numbers) (cons 4 (first result)))]\n      [(equal? (first\
    \ numbers) 'five) (loop (rest numbers) (cons 5 (first result)))]\n      [(equal?\
    \ (first numbers) 'six) (loop (rest numbers) (cons 6 (first result)))]\n     \
    \ [(equal? (first numbers) 'seven) (loop (rest numbers) (cons 7 (first result)))]\n\
    \      [(equal? (first numbers) 'eight) (loop (rest numbers) (cons 8 (first result)))]\n\
    \      [(equal? (first numbers) 'nine) (loop (rest numbers) (cons 9 (first result)))]\n\
    \      [else (loop (rest numbers) (cons (first numbers) result))])))\n", "  (let\
    \ ([number-list '()])\n    (loop for number in numbers\n          for i from 0\
    \ to (length numbers)\n          collect (cond [(number-list-empty? number-list)\
    \ (cons number number-list)]\n                      [(number-list-member? number\
    \ number-list) (cons number number-list)]\n                      [else (cons number\
    \ number-list)])))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", " \
    \ (let ([number-list '()])\n    (loop for number in numbers\n          for i from\
    \ 0 to (length numbers)\n          collect (cond [(= number 'zero) (set! number-list\
    \ '(number-list number))]\n                      [(= number 'one) (set! number-list\
    \ '(number-list number-list number))]\n                      [(= number 'two)\
    \ (set! number-list '(number-list number-list number-list number))]\n        \
    \              [(= number 'three) (set! number-list '(number-list number-list\
    \ number-list number-list number))]\n                      [(= number 'four) (set!\
    \ number-list '(number-list number-list number-list number-list number-list number))]\n\
    \                      [(= number 'five) (set! number-list '(number-list number-list\
    \ number-list number-list number-list number-list number))]\n                \
    \      [(= number 'six) (set! number-list '(number-list number-list number-list\
    \ number-list number-list number-list number-list number))]\n                \
    \      [(= number 'seven) (set! number-list '(number-list number-list number-list\
    \ number-list number-list number-list number-list number-list number))]\n    \
    \                  [(= number 'eight) (set! number-list '(number-list number-list\
    \ number-list number-list number-list number-list number-list number-list number-list\
    \ number))]\n                      [(= number 'nine) (set! number-list '(number-list\
    \ number-list number-list number-list number-list number-list number-list number-list\
    \ number-list number-list number))]))))\n", "  (let ((result '()))\n    (loop\
    \ for number in numbers\n          for i from 0 to (length numbers)\n        \
    \  for j from 0 to (length numbers)\n          when (and (= i j)\n           \
    \        (= (substring number i 1)\n                       (substring number j\
    \ 1)))\n          collect (cons number result))\n    (reverse result)))\n", " \
    \ (let ([numbers-sorted (sort numbers '<)])\n    (string-append (numbers-sorted\
    \ numbers) \" \"))))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first\
    \ numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"\
    ]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (if (null? numbers)\n    \
    \  '()\n      (append (sort_numbers (substring numbers 0 -1))\n              (cons\
    \ (car numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n", "  (let ([numbers-sorted (sort numbers '<)])\n    (string-append\
    \ (numbers-sorted numbers) \" \"))))\n", "  (cond\n    [(empty? numbers) \"\"\
    ]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([number-chars (string->list numbers)])\n    (sort number-chars >)))\n",
  "  (let ([numbers (string->list numbers)])\n    (if (null? numbers)\n        '()\n\
    \        (append (sort (subseq numbers 0 9) <)\n                 (sort (subseq\
    \ numbers 10 19) >))))\n", "  (let ([number-chars (string->list (string->string\
    \ numbers))])\n    (sort number-chars (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  )\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers)\
    \ \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal?\
    \ (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"\
    three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n    [(equal? (first\
    \ numbers) \"five\") \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"\
    ]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers)\
    \ \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n  \
    \  [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (let ((result\
    \ '()))\n    (loop for number in numbers\n          for i from 0 to 9\n      \
    \    for j from 0 to 9\n          for k from 0 to 9\n          for l from 0 to\
    \ 9\n          for m from 0 to 9\n          for n from 0 to 9\n          for o\
    \ from 0 to 9\n          for p from 0 to 9\n          for q from 0 to 9\n    \
    \      for r from 0 to 9\n          for s from 0 to 9\n          for t from 0\
    \ to 9\n          for u from 0 to 9\n          for v from 0 to 9\n          for\
    \ w from 0 to 9\n          for x from 0 to 9\n          for y from 0 to 9\n  \
    \        for z from 0 to 9\n          for a from 0 to 9\n          for b from\
    \ 0 to 9\n          for c from 0 to 9\n          for d from 0 to 9\n         \
    \ for e from 0 to 9\n          for f from 0 to 9\n          for g from 0 to 9\n\
    \          for h from 0 to 9\n          for i from 0 to 9\n          for j from\
    \ 0 to 9\n          for k from 0 to 9\n          for l from 0 to 9\n         \
    \ for m from 0 to 9\n          for n from 0 to 9\n          for o from 0 to 9\n\
    \          for p from 0 to 9\n          for q from 0 to 9\n          for r from\
    \ 0 to 9\n          for s from 0 to 9\n          for t from 0 to 9\n         \
    \ for u from 0 to 9\n          for v from 0 to 9\n          for w from 0 to 9\n\
    \          for x from 0 to 9\n          for y from 0 to 9\n          for z from\
    \ 0 to 9\n          for a from 0 to 9\n          for b from 0 to 9\n         \
    \ for c from 0 to 9\n          for d from 0 to 9\n          for e from 0 to 9\n\
    \          for f from 0 to 9\n          for g from 0 to 9\n          for h from\
    \ 0 to 9\n          for i from 0 to 9\n          for j from 0 to 9\n         \
    \ for k from 0 to 9\n          for l from 0 to 9\n          for m from 0 to 9\n\
    \          for n from 0 to 9\n          for o from 0 to 9\n          for p from\
    \ 0 to 9\n          for q from 0 to 9\n          for r from 0 to 9\n         \
    \ for s from 0 to 9\n          for t from 0 to 9\n          for u from 0 to 9\n\
    \          for v from 0 to 9\n          for w from 0 to 9\n          for x from\
    \ 0 to 9\n          for y from 0 to 9\n          for z from 0 to 9\n         \
    \ for a from 0 to 9\n          for b from 0 to 9", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (if (null? numbers)\n    \
    \  '()\n      (append (sort_numbers (substring numbers 0 -1))\n              (cons\
    \ (substring numbers -1)\n                    (sort_numbers (substring numbers\
    \ (string-length numbers) -1))))))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers-list (number-list numbers)])\n    (if (null? numbers-list)\n \
    \       '()\n        (append (sort_numbers (cdr numbers-list)) (list (car numbers-list)))))\n\
    \  )\n", "  (let ([number-chars (string->list numbers)])\n    (sort number-chars\
    \ <)))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers)\
    \ \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal?\
    \ (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"\
    three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n    [(equal? (first\
    \ numbers) \"five\") \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"\
    ]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers)\
    \ \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n  \
    \  [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (let ([number-list\
    \ '()])\n    (loop for number in numbers\n          for i from 0 to (length numbers)\n\
    \          collect (cond [(= (substring number i 1) 'zero) (set! number-list (append\
    \ number-list '(number)))]\n                      [(= (substring number i 1) 'one)\
    \ (set! number-list (append number-list '(number)))]\n                      [(=\
    \ (substring number i 1) 'two) (set! number-list (append number-list '(number)))]\n\
    \                      [(= (substring number i 1) 'three) (set! number-list (append\
    \ number-list '(number)))]\n                      [(= (substring number i 1) 'four)\
    \ (set! number-list (append number-list '(number)))]\n                      [(=\
    \ (substring number i 1) 'five) (set! number-list (append number-list '(number)))]\n\
    \                      [(= (substring number i 1) 'six) (set! number-list (append\
    \ number-list '(number)))]\n                      [(= (substring number i 1) 'seven)\
    \ (set! number-list (append number-list '(number)))]\n                      [(=\
    \ (substring number i 1) 'eight) (set! number-list (append number-list '(number)))]\n\
    \                      [(= (substring number i 1) 'nine) (set! number-list (append\
    \ number-list '(number)))]\n                      [else (set! number-list (append\
    \ number-list '(number)))])))\n    (reverse number-list)))\n", "  (cond\n    [(empty?\
    \ numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers (string->list numbers)])\n    (cond\n      [(empty? numbers) 'zero]\n\
    \      [(number-< (first numbers) 'zero) (cons (first numbers) 'zero)]\n     \
    \ [(number-< (first numbers) 'one) (cons (first numbers) 'one)]\n      [(number-<\
    \ (first numbers) 'two) (cons (first numbers) 'two)]\n      [(number-< (first\
    \ numbers) 'three) (cons (first numbers) 'three)]\n      [(number-< (first numbers)\
    \ 'four) (cons (first numbers) 'four)]\n      [(number-< (first numbers) 'five)\
    \ (cons (first numbers) 'five)]\n      [(number-< (first numbers) 'six) (cons\
    \ (first numbers) 'six)]\n      [(number-< (first numbers) 'seven) (cons (first\
    \ numbers) 'seven)]\n      [(number-< (first numbers) 'eight) (cons (first numbers)\
    \ 'eight)]\n      [(number-< (first numbers) 'nine) (cons (first numbers) 'nine)]\n\
    \      [else (cons (first numbers) (sort_numbers (rest numbers)))])))\n", "  (cond\n\
    \    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) 'one]\n   \
    \ [(equal? (first numbers) 'one) 'two]\n    [(equal? (first numbers) 'two) 'three]\n\
    \    [(equal? (first numbers) 'three) 'four]\n    [(equal? (first numbers) 'four)\
    \ 'five]\n    [(equal? (first numbers) 'five) 'six]\n    [(equal? (first numbers)\
    \ 'six) 'seven]\n    [(equal? (first numbers) 'seven) 'eight]\n    [(equal? (first\
    \ numbers) 'eight) 'nine]\n    [else (sort_numbers (rest numbers))]))\n", "  (let\
    \ ([numbers-sorted (sort numbers '<)])\n    (string-append numbers-sorted \" \"\
    \ numbers)))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers)\
    \ \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal?\
    \ (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"\
    three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n    [(equal? (first\
    \ numbers) \"five\") \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"\
    ]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers)\
    \ \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n  \
    \  [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n\
    \    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (let ([numbers-sorted (sort\
    \ numbers '<)])\n    (if (null? numbers-sorted)\n        '()\n        (cons (car\
    \ numbers-sorted)\n              (sort_numbers (cdr numbers-sorted)))))\n  )\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (sort_numbers (rest numbers))]))\n",
  "  (let ([number-chars (string->list numbers)])\n    (sort number-chars <)))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([nums (number->string numbers)])\n    (cond\n      [(empty? nums) 'zero]\n\
    \      [(equal? (first nums) 'zero) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'one) (sort_numbers (rest nums))]\n      [(equal? (first nums)\
    \ 'two) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'three) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'four) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'five) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'six) (sort_numbers (rest nums))]\n      [(equal? (first nums)\
    \ 'seven) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'eight) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'nine) (sort_numbers (rest nums))]\n\
    \      [else (cons (first nums) (sort_numbers (rest nums)))])))\n", "  (let ([nums\
    \ (number-sequence 'zero 'nine)])\n    (if (null? numbers)\n        '()\n    \
    \    (append (sort (map number->string nums) <)\n                 (sort (map number->string\
    \ nums) >))))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers)\
    \ \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal?\
    \ (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"\
    three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n    [(equal? (first\
    \ numbers) \"five\") \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"\
    ]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers)\
    \ \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n  \
    \  [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n\
    \    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (let ([numbers-to-sort (number-string\
    \ numbers)])\n    (sort numbers-to-sort <)))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (if (null? numbers)\n      '()\n      (append (sort_numbers\
    \ (substring numbers 0 -1))\n              (cons (substring numbers -1)\n    \
    \                (sort_numbers (substring numbers (length numbers) -1))))))\n",
  "  (if (empty? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 -1))\n              (cons (car numbers)\n                    (sort_numbers\
    \ (substring numbers (+ 0 (length numbers))))))))\n", "  (let ((nums (string->list\
    \ numbers)))\n    (cond\n      [(empty? nums) 'zero]\n      [(equal? (first nums)\
    \ 'zero) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'one) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'two) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'three) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'four) (sort_numbers (rest nums))]\n      [(equal? (first nums)\
    \ 'five) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'six) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'seven) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'eight) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'nine) (sort_numbers (rest nums))]\n      [else (cons (first nums)\
    \ (sort_numbers (rest nums)))])))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (let ([numbers (split-string numbers)])\n    (sort\
    \ numbers <)\n    (string-join numbers)))\n", "  (if (null? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (list (substring\
    \ numbers -1))))\n)\n", "  (sort numbers (lambda (a b) (< (char-code a) (char-code\
    \ b))))\n)\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers)\
    \ \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal?\
    \ (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"\
    three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n    [(equal? (first\
    \ numbers) \"five\") \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"\
    ]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers)\
    \ \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n  \
    \  [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n\
    \    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"\
    ]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (let ([number-list '()])\n\
    \    (loop for number in numbers\n          for i from 0 to 9\n          collect\
    \ (cond [(number-list-empty? number-list) (cons number number-list)]\n       \
    \               [(number-list-empty? (cdr number-list)) (cons number number-list)]\n\
    \                      [else (cons (car number-list) (cons number number-list))]))))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (if (null? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 -1))\n              (cons (substring numbers -1)\n                    (sort_numbers\
    \ (substring numbers (length numbers) -1))))))\n", "  (let loop ((numbers numbers)\n\
    \             (result '()))\n    (cond\n      [(empty? numbers) result]\n    \
    \  [(equal? (first numbers) 'zero) (loop (rest numbers) (cons 0 (first result)))]\n\
    \      [(equal? (first numbers) 'one) (loop (rest numbers) (cons 1 (first result)))]\n\
    \      [(equal? (first numbers) 'two) (loop (rest numbers) (cons 2 (first result)))]\n\
    \      [(equal? (first numbers) 'three) (loop (rest numbers) (cons 3 (first result)))]\n\
    \      [(equal? (first numbers) 'four) (loop (rest numbers) (cons 4 (first result)))]\n\
    \      [(equal? (first numbers) 'five) (loop (rest numbers) (cons 5 (first result)))]\n\
    \      [(equal? (first numbers) 'six) (loop (rest numbers) (cons 6 (first result)))]\n\
    \      [(equal? (first numbers) 'seven) (loop (rest numbers) (cons 7 (first result)))]\n\
    \      [(equal? (first numbers) 'eight) (loop (rest numbers) (cons 8 (first result)))]\n\
    \      [(equal? (first numbers) 'nine) (loop (rest numbers) (cons 9 (first result)))]\n\
    \      [else (loop (rest numbers) (cons (first numbers) result))])))\n", "  (cond\n\
    \    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers-list (string->list numbers)])\n    (sort numbers-list <)\n   \
    \ (string->list numbers))\n  )\n", "  (cond\n    [(empty? numbers) \"\"]\n   \
    \ [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"\
    one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([number-list '()])\n    (loop for number in numbers\n          for i from\
    \ 0 to (length numbers)\n          for j from 0 to (length numbers)\n        \
    \  when (and (number-list-contains number-list number)\n                   (number-list-contains\
    \ number-list number))\n          do (set! number-list (append number-list (list\
    \ number)))\n          collect (list number i j)\n          finally (return number-list))))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers (string->list numbers)])\n    (sort numbers <)))\n", "  (let ([number-list\
    \ '()])\n    (loop for number in numbers\n          for i from 0 to (length numbers)\n\
    \          collect (cond [(number-list-empty? number-list) (cons number number-list)]\n\
    \                      [(number-list-empty? (subseq number-list i))\n        \
    \               (cons number number-list)]\n                      [else (cons\
    \ (subseq number-list i) number-list)])))\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nThanks for your answer! I did some testing and it seems that your solution\
    \ is faster than the one I posted in the question. Do you know why that is?\n\
    <|/ c |>\n<| c |>\nI suspect that your solution has to do with how you implement\
    \ the sorting algorithm. Your solution sorts the list in-place. My solution sorts\
    \ the list and then returns a new list with the sorted numbers. I suspect that\
    \ your solution is faster than mine because mine is more concise. My solution\
    \ also uses `subseq` which I suspect is faster than `list-ref`.\n<|/ c |>\n<|\
    \ c |>\nOh I see, thank you! I didn't know that `subseq` was faster than `list-ref`.\
    \ Do you know if there is a way to implement my solution with `subseq`?\n<|/ c\
    \ |>\n<| c |>\nI added a solution that uses `subseq`.\n<|/ c |>\n<| c |>\nThank\
    \ you! I tested your solution and it seems to be faster than mine. Do you know\
    \ why that is?\n<|/ c |>\n<| a tags=racket,scheme |>\nI did some testing and it\
    \ seems that your solution is faster than the one I posted in the question. Do\
    \ you know why that is?\n\nThe reason is that the sorting algorithm is O(n^2)\
    \ in the worst case. Your solution is O(n^2) in the best case. \nThe best case\
    \ is when the list is sorted in ascending order. Your solution is O(n). \nThe\
    \ worst case is when the list is sorted in descending order. Your solution is\
    \ O(n^2). \nThe best case is when the list is sorted in ascending order. Your\
    \ solution is O(n^2). \nThe worst case is when the list is sorted in descending\
    \ order. Your solution is O(n^2). \nThe best case is when the list is sorted in\
    \ ascending order. Your solution is O(n^2). \nThe worst case ", "  (let ([number-list\
    \ '()])\n    (loop for number in numbers\n          for i from 0 to (length numbers)\n\
    \          collect (cond [(number-list-empty? number-list) (cons number number-list)]\n\
    \                      [(number-list-empty? (cdr number-list)) (cons number number-list)]\n\
    \                      [else (cons (car number-list) (cons number number-list))]))))\n",
  "  (let ((numbers (string->list numbers)))\n    (sort numbers (lambda (a b) (< (string->number\
    \ a) (string->number b)))))\n    (string->list numbers)))\n", "  (cond\n    [(empty?\
    \ numbers) 'zero]\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first\
    \ numbers) 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal?\
    \ (first numbers) 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n\
    \    [(equal? (first numbers) 'five) 'five]\n    [(equal? (first numbers) 'six)\
    \ 'six]\n    [(equal? (first numbers) 'seven) 'seven]\n    [(equal? (first numbers)\
    \ 'eight) 'eight]\n    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons\
    \ (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty?\
    \ numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal?\
    \ (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"\
    two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first\
    \ numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"\
    ]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers)\
    \ \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n\
    \    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n\
    \        result\n        (loop (rest numbers)\n              (cons (first numbers)\n\
    \                    (loop (rest numbers)\n                          (cons (first\
    \ numbers)\n                                result)))))))\n", "  (if (empty? numbers)\n\
    \      '()\n      (append (sort_numbers (substring numbers 0 -1))\n          \
    \    (list (substring numbers -1)))))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (sort_numbers (rest\
    \ numbers))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first\
    \ numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"\
    ]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers <)))\n", "  (let ([number-chars (string->list\
    \ numbers)])\n    (sort number-chars <)\n    (string->list numbers)))\n", "  (if\
    \ (empty? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 -1))\n              (cons (car numbers)\n                    (sort_numbers\
    \ (substring numbers (+ 0 (string-length numbers))))))))\n", "  (let ([numbers\
    \ (string->list numbers)])\n    (sort numbers <)\n    (string->list numbers)))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (sort_numbers (rest numbers))]))\n", "  (let\
    \ ([number-list '()])\n    (cond\n      [(empty? numbers) number-list]\n     \
    \ [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n      [(equal? (first\
    \ numbers) 'two) (sort_numbers (rest numbers))]\n      [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n      [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \      [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n     \
    \ [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n      [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))])))\n", "  (let ([number-list '()])\n\
    \    (for ([i numbers])\n      (if (number? (string->number i))\n          (set!\
    \ number-list (append number-list (list i)))\n          (set! number-list (append\
    \ number-list (list 'zero))))))\n  (sort number-list <))\n", "  (cond\n    [(empty?\
    \ numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal?\
    \ (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"\
    two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first\
    \ numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"\
    ]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers)\
    \ \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n\
    \    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (if (null? numbers)\n      '()\n  \
    \    (append (sort_numbers (substring numbers 0 -1))\n              (list (substring\
    \ numbers -1)))))\n", "  (let ([number-list '()])\n    (for ([i numbers]\n   \
    \       [number (car i)])\n      (if (number-list-empty?)\n          (set! number-list\
    \ '(number))\n          (set! number-list\n                (append number-list\n\
    \                        (list (number-list-first number-list))\n            \
    \            (list (number-list-last number-list))\n                        (list\
    \ (number))))))))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first\
    \ numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"\
    ]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (sort numbers (lambda (a b) (< (string-to-number a) (string-to-number b))))\n\
    )\n", "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero)\
    \ (sort_numbers (rest numbers))]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (let ([numbers-sorted (sort numbers '<)])\n    (string-append\
    \ (numbers-sorted numbers) \" \"))))\n", "  (let ([numbers-sorted (sort (map number->string\
    \ numbers) '<)])\n    (string-append numbers-sorted \" \" numbers)))\n", "  (cond\n\
    \    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (let ((numbers (string->list numbers)))\n\
    \    (if (null? numbers)\n        '()\n        (append (sort (subseq numbers 0\
    \ 9) <)\n                 (sort (subseq numbers 10 19) >))))\n", "  (cond\n  \
    \  [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ((numbers numbers))\n    (cond\n      [(empty? numbers) 'zero]\n      [(equal?\
    \ (first numbers) 'zero) (sort_numbers (rest numbers))]\n      [(equal? (first\
    \ numbers) 'one) (sort_numbers (rest numbers))]\n      [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'three)\
    \ (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'four) (sort_numbers\
    \ (rest numbers))]\n      [(equal? (first numbers) 'five) (sort_numbers (rest\
    \ numbers))]\n      [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \      [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n     \
    \ [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n      [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))])))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers-sorted (sort numbers '<)])\n    (string-append numbers-sorted\
    \ \" \" numbers)))\n", "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first\
    \ numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'two) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty?\
    \ numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (sort numbers))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first\
    \ numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"one\"\
    ]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) 'zero]\n\
    \    [(equal? (first numbers) 'one) 'one]\n    [(equal? (first numbers) 'two)\
    \ 'two]\n    [(equal? (first numbers) 'three) 'three]\n    [(equal? (first numbers)\
    \ 'four) 'four]\n    [(equal? (first numbers) 'five) 'five]\n    [(equal? (first\
    \ numbers) 'six) 'six]\n    [(equal? (first numbers) 'seven) 'seven]\n    [(equal?\
    \ (first numbers) 'eight) 'eight]\n    [(equal? (first numbers) 'nine) 'nine]\n\
    \    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n\
    \    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (if (null? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 -1))\n              (list (substring numbers -1))))) ;; #lang racket\n", " \
    \ (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([number-list '()])\n    (loop for number in numbers\n          for i from\
    \ 0\n          for j from (length number-list)\n          when (= (substring number\
    \ i 1) number)\n          collect (cons number number-list))\n    (reverse number-list)))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (let ([numbers (string->list numbers)])\n\
    \    (sort numbers <)))\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers (string->list numbers)])\n    (sort numbers\n          (lambda\
    \ (a b)\n            (< (string->number a) (string->number b)))\n          :key\
    \ string->number)))\n", "  (sort numbers (lambda (x y) (< (string-to-number x)\
    \ (string-to-number y))))\n)\n", "  (cond\n    [(empty? numbers) \"\"]\n    [(equal?\
    \ (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers) \"one\") \"\
    one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal? (first numbers)\
    \ \"three\") \"three\"]\n    [(equal? (first numbers) \"four\") \"four\"]\n  \
    \  [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first numbers)\
    \ \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"]\n    [(equal?\
    \ (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers) \"nine\"\
    ) \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ((numbers-sorted (sort numbers '<)))\n    (string-append (numbers-sorted\
    \ 'zero) \" \" (numbers-sorted 'one) \" \" (numbers-sorted 'two) \" \" (numbers-sorted\
    \ 'three) \" \" (numbers-sorted 'four) \" \" (numbers-sorted 'five) \" \" (numbers-sorted\
    \ 'six) \" \" (numbers-sorted 'seven) \" \" (numbers-sorted 'eight) \" \" (numbers-sorted\
    \ 'nine))))\n", "  (let ([numbers-list (numbers-list numbers)])\n    (sort numbers-list\
    \ <)))\n", "  (let ((numbers-sorted '()))\n    (for ([i (in-range (length numbers))])\n\
    \      (if (numbers-sorted? (numbers (- i 1)))\n          (set! numbers-sorted\
    \ (cons (numbers (- i 1)) (numbers-sorted)))\n          (set! numbers-sorted (cons\
    \ (numbers (- i 1)) (numbers-sorted)))))))\n", "  (let loop ((numbers numbers)\n\
    \             (result '()))\n    (if (null? numbers)\n        result\n       \
    \ (loop (rest numbers)\n              (cons (first numbers)\n                \
    \    (loop (rest numbers)\n                          (cons (first numbers)\n \
    \                               result)))))))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (let ((result '()))\n    (for ([i (in-range\
    \ (length numbers))])\n      (if (number? (substring numbers i i))\n         \
    \ (append result (substring numbers i i))\n          (append result (substring\
    \ numbers (+ i 1) (+ i 1)))))))\n", "  (cond\n    [(empty? numbers) 'zero]\n \
    \   [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers (string->list numbers)])\n    (sort numbers\n          (lambda\
    \ (a b)\n            (< (string->number a) (string->number b)))))\n  (string->list\
    \ numbers))\n", "  (let ([numbers-list (numbers-list numbers)])\n    (sort numbers-list\
    \ <)))\n", "  (if (empty? numbers)\n      '()\n      (append (sort_numbers (substring\
    \ numbers 0 -1))\n              (cons (car numbers)\n                    (sort_numbers\
    \ (substring numbers (+ 0 (length numbers))))))))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers))) ]))\n", "  (cond\n    [(empty? numbers) 'zero]\n    [(equal?\
    \ (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'two) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty?\
    \ numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers-sorted (sort (map number->string numbers))])\n    (string-append\
    \ numbers-sorted \" \" numbers)))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (let ([number-chars (string->list (numbers))])\n\
    \    (cond\n      [(empty? number-chars) 'zero]\n      [(number-chars starts-with?\
    \ 'one) (cons 'one (sort_numbers (rest number-chars)))]\n      [(number-chars\
    \ starts-with? 'two) (cons 'two (sort_numbers (rest number-chars)))]\n      [(number-chars\
    \ starts-with? 'three) (cons 'three (sort_numbers (rest number-chars)))]\n   \
    \   [(number-chars starts-with? 'four) (cons 'four (sort_numbers (rest number-chars)))]\n\
    \      [(number-chars starts-with? 'five) (cons 'five (sort_numbers (rest number-chars)))]\n\
    \      [(number-chars starts-with? 'six) (cons 'six (sort_numbers (rest number-chars)))]\n\
    \      [(number-chars starts-with? 'seven) (cons 'seven (sort_numbers (rest number-chars)))]\n\
    \      [(number-chars starts-with? 'eight) (cons 'eight (sort_numbers (rest number-chars)))]\n\
    \      [(number-chars starts-with? 'nine) (cons 'nine (sort_numbers (rest number-chars)))]\n\
    \      [else (cons (first number-chars) (sort_numbers (rest number-chars)))])))\n",
  "  (if (null? numbers)\n      '()\n      (append (sort_numbers (substring numbers\
    \ 0 -1))\n              (cons (substring numbers -1)\n                    (sort_numbers\
    \ (substring numbers (length numbers) -1))))))\n", "  (cond\n    [(empty? numbers)\
    \ 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) 'zero]\n\
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'three) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'seven) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'eight)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'nine) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
