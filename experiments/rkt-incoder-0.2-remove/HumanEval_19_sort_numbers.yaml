name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (let ([numbers (string->list numbers)])\n    (sort numbers (lambda\
    \ (a b) (< (string->number a) (string->number b)))))\n  (list->string numbers))\n",
  "  (cond\n    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"\
    zero\"]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([numbers-sorted (sort numbers '<)])\n    (string-append (numbers-sorted\
    \ numbers) \" \"))))\n", "  (let ([numbers (string->list numbers)])\n    (sort\
    \ numbers <)\n    (string->list numbers)))\n", "  (let ([numbers-sorted (sort\
    \ numbers '<)])\n    (string-append (numbers-sorted \" \") \"\\n\")))\n", "  (sort\
    \ numbers (lambda (a b) (< (string-to-number a) (string-to-number b))))\n)\n",
  "  (let ([number-list '()])\n    (loop for number in numbers\n          for i from\
    \ 0 to (length numbers)\n          collect (cons number number-list))\n    (string-append\
    \ (sort number-list <)\n                  (sort number-list >))))\n", "  (cond\n\
    \    [(empty? numbers) \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"\
    ]\n    [(equal? (first numbers) \"one\") \"one\"]\n    [(equal? (first numbers)\
    \ \"two\") \"two\"]\n    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal?\
    \ (first numbers) \"four\") \"four\"]\n    [(equal? (first numbers) \"five\")\
    \ \"five\"]\n    [(equal? (first numbers) \"six\") \"six\"]\n    [(equal? (first\
    \ numbers) \"seven\") \"seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"\
    ]\n    [(equal? (first numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'three) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'four) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'five) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))]))\n", "  (let ((numbers (string->list\
    \ numbers)))\n    (sort numbers <)))\n", "  (cond\n    [(empty? numbers) \"\"\
    ]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ((numbers-sorted '()))\n    (loop for number in numbers\n          for i\
    \ from 0 to (length numbers)\n          for j from (+ i 1) to (length numbers)\n\
    \          when (= (substring number i 1) (substring number j 1))\n          collect\
    \ (cons number numbers-sorted)\n          finally (set! numbers-sorted (cons number\
    \ numbers-sorted)))))\n", "  (let ([numbers (string->list numbers)])\n    (if\
    \ (null? numbers)\n        '()\n        (append (sort numbers (lambda (a b) (<\
    \ (length a) (length b)))) '()))))\n", "  (cond\n    [(empty? numbers) \"\"]\n\
    \    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first numbers)\
    \ \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n    [(equal?\
    \ (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers) \"four\"\
    ) \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal? (first\
    \ numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"seven\"\
    ]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first numbers)\
    \ \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n",
  "  (let ([number-chars (string->list numbers)])\n    (sort number-chars <)))\n",
  "  (cond\n    [(empty? numbers) 'zero]\n    [(equal? (first numbers) 'zero) 'one]\n\
    \    [(equal? (first numbers) 'one) 'two]\n    [(equal? (first numbers) 'two)\
    \ 'three]\n    [(equal? (first numbers) 'three) 'four]\n    [(equal? (first numbers)\
    \ 'four) 'five]\n    [(equal? (first numbers) 'five) 'six]\n    [(equal? (first\
    \ numbers) 'six) 'seven]\n    [(equal? (first numbers) 'seven) 'eight]\n    [(equal?\
    \ (first numbers) 'eight) 'nine]\n    [else (sort_numbers (rest numbers))]))\n",
  "  (sort numbers (lambda (a b) (< (string-to-number a) (string-to-number b))))\n\
    )\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
