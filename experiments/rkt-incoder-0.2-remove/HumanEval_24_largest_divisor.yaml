name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n(define (largest_divisor n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor (- n 1))]\n\
    \        [else (* n (largest_divisor (- n 1)))]))\n", "  (cond [(= n 1) n]\n \
    \       [(even? n) (* n largest_divisor (- n 1))]\n        [else (* n (largest_divisor\
    \ (- n 1)))]))\n", "  (define (helper n divisor)\n    (cond ((= n 0) divisor)\n\
    \          ((even? n) (helper (- n 1) divisor))\n          (else (helper (- n\
    \ 1) (+ divisor n)))))\n  (helper n 1))\n", "  (cond [(= n 1) n]\n        [(even?\
    \ n) (* n largest_divisor (- n 1))]\n        [else (* n (largest_divisor (- n\
    \ 1)))]))\n", "  (cond [(= n 1) n]\n        [(even? n) (* n (largest_divisor (-\
    \ n 1)))]\n        [else (largest_divisor (- n 1))]))\n", "  (cond [(= n 0) 0]\n\
    \        [(even? n) (/ n 2)\n         (if (= (largest_divisor (- n 1)) 0)\n  \
    \           (/ n 2)\n             (largest_divisor (- n 1)))]\n        [else (largest_divisor\
    \ (- n 1))]))\n", "  (cond [(= n 1) n]\n        [(even? (remainder n 2)) (quotient\
    \ n 2)]\n        [else (largest_divisor (quotient n 2))]))\n", "  (cond [(= n\
    \ 1) n]\n        [(even? n) (* n largest_divisor(sub1 n))]\n        [else (* largest_divisor(sub1\
    \ n) (* n largest_divisor(sub1 n)))]))\n", "  (cond [(= n 1) n]\n        [(even?\
    \ n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n",
  "  (define (helper n count)\n    (cond ((= n 1) count)\n          ((even? n) (helper\
    \ (quotient n 2) (+ count 1)))\n          (else (helper (quotient n 2) count))))\n\
    \  (helper n 0))\n", "  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n", "  (cond ((= n 0)\
    \ 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else (+ 1 (largest_divisor\
    \ (- n 1))))))\n", "  (cond [(= n 1) n]\n        [(even? (remainder n 2)) (+ n\
    \ 1)]\n        [else (largest_divisor (- n 1))]))\n", "  (let loop ((n n) (divisor\
    \ 1))\n    (cond ((= n 0) divisor)\n          ((even? n) (loop (/ n 2) (+ divisor\
    \ 1)))\n          (else (loop (/ n 2) divisor)))))\n", "  (let loop ((n n) (max\
    \ 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2) (max n)))\n\
    \          (else (loop (/ n 2) max)))))\n", "  (cond [(= n 1) n]\n        [(even?\
    \ n) (* n (largest_divisor (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n",
  "  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient\
    \ n 2)\n              (if (even? n)\n                  (loop (quotient n 2)\n\
    \                        (max (max max n)))\n                  (loop (quotient\
    \ n 2)\n                        (max n)))))))\n", "  (define (helper n count)\n\
    \    (cond ((= count 0) n)\n          ((even? n) (helper (quotient n 2) (add1\
    \ count)))\n          (else (helper (quotient n 2) count))))\n  (helper n 0))\n",
  "  (cond ((= n 0) 0)\n        ((even? n) (largest_divisor (- n 1)))\n        (else\
    \ (+ 1 (largest_divisor (- n 1))))))\n", "  (cond [(= n 1) n]\n        [(even?\
    \ n) (* n largest_divisor (/ n 2))]\n        [else (* n (largest_divisor (/ n\
    \ 2)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
