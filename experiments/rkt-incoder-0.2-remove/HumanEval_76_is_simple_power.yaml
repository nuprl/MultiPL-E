name: HumanEval_76_is_simple_power
language: rkt
prompt: "#lang racket\n\n;; Your task is to write a function that returns true if\
  \ a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple\
  \ power of n if n**int=x\n;; For example:\n(define (is_simple_power x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= n 0) true)\n        ((= x 1) true)\n        ((= x n) true)\n\
    \        (else (is_simple_power (/ x n) n))))\n", "  (cond [(= n 1) (= x 1)]\n\
    \        [(= n 0) (= x 0)]\n        [(= n -1) (= x 0)]\n        [(= n 0) (= x\
    \ 0)]\n        [else (= x (* n (* n x)))]))\n", "  (cond ((= n 0) true)\n    \
    \    ((= n 1) true)\n        ((= (mod x n) 0) false)\n        (else (is_simple_power\
    \ x (sub1 n))))) ;; #lang racket\n", "  (cond [(= n 1) true]\n        [(= x 1)\
    \ true]\n        [(= x n) true]\n        [else false]))\n", "  (cond ((= n 0)\
    \ true)\n        ((= n 1) true)\n        ((= x 1) true)\n        ((= (mod x n)\
    \ 0) false)\n        (else (is_simple_power x (sub1 n)))))\n", "  (cond ((= n\
    \ 0) true)\n        ((= n 1) true)\n        ((= (mod x n) 0) false)\n        (else\
    \ (is_simple_power x (sub1 n)))))\n", "  (cond ((= n 0) (= x 1))\n        ((=\
    \ n 1) (= x x))\n        ((= (mod x n) 0) (is_simple_power x (sub1 n)))\n    \
    \    (else false)))\n", "  (cond ((= n 0) #t)\n        ((= x 1) #t)\n        ((=\
    \ (* x x) n) #t)\n        (else #f)))\n", "  (cond\n    ((= n 1) (= x 1))\n  \
    \  ((= n 0) (= x 0))\n    ((= n -1) (= x 0))\n    ((= n 2) (= x 1))\n    ((= x\
    \ 0) (= x 1))\n    ((= x 1) (= x 1))\n    ((= x n) (= x n))\n    (else false)))\n",
  "  (cond\n    [(= n 1) (= x 1)]\n    [(= n 0) (= x 0)]\n    [else (= (* n x) x)]))\n",
  "  (cond ((= n 0) true)\n        ((= x 1) true)\n        ((= x n) true)\n      \
    \  (else false)))\n", "  (cond [(= n 1) true]\n        [(= x 1) true]\n      \
    \  [(= x n) true]\n        [else false]))\n", "  (cond [(= n 1) true]\n      \
    \  [(= x 1) true]\n        [(= x n) true]\n        [else false]))\n", "  (cond\
    \ ((= n 0) true)\n        ((= x 1) true)\n        ((= x n) true)\n        (else\
    \ false)))\n", "  (cond ((= n 0) true)\n        ((= x 1) true)\n        ((= x\
    \ n) true)\n        (else false)))\n", "  (cond ((= n 0) true)\n        ((= x\
    \ 1) true)\n        ((= (* x x) n) true)\n        (else false)))\n", "  (cond\
    \ ((= n 1) (= x 1))\n        ((= n 0) (= x 0))\n        ((= n -1) (= x 0))\n \
    \       ((= n -2) (= x 1))\n        ((= n -3) (= x 1))\n        ((= n -4) (= x\
    \ 1))\n        ((= n -5) (= x 1))\n        ((= n -6) (= x 1))\n        ((= n -7)\
    \ (= x 1))\n        ((= n -8) (= x 1))\n        ((= n -9) (= x 1))\n        ((=\
    \ n -10) (= x 1))\n        ((= n -11) (= x 1))\n        ((= n -12) (= x 1))\n\
    \        ((= n -13) (= x 1))\n        ((= n -14) (= x 1))\n        ((= n -15)\
    \ (= x 1))\n        ((= n -16) (= x 1))\n        ((= n -17) (= x 1))\n       \
    \ ((= n -18) (= x 1))\n        ((= n -19) (= x 1))\n        ((= n -20) (= x 1))\n\
    \        ((= n -21) (= x 1))\n        ((= n -22) (= x 1))\n        ((= n -23)\
    \ (= x 1))\n        ((= n -24) (= x 1))\n        ((= n -25) (= x 1))\n       \
    \ ((= n -26) (= x 1))\n        ((= n -27) (= x 1))\n        ((= n -28) (= x 1))\n\
    \        ((= n -29) (= x 1))\n        ((= n -30) (= x 1))\n        ((= n -31)\
    \ (= x 1))\n        ((= n -32) (= x 1))\n        ((= n -33) (= x 1))\n       \
    \ ((= n -34) (= x 1))\n        ((= n -35) (= x 1))\n        ((= n -36) (= x 1))\n\
    \        ((= n -37) (= x 1))\n        ((= n -38) (= x 1))\n        ((= n -39)\
    \ (= x 1))\n        ((= n -40) (= x 1))\n        ((= n -41) (= x 1))\n       \
    \ ((= n -42) (= x 1))\n        ((= n -43) (= x 1))\n        ((= n -44) (= x 1))\n\
    \        ((= n -45) (= x 1))\n        ((= n -46) (= x 1))\n        ((= n -", " \
    \ (cond ((= n 0) true)\n        ((= n 1) true)\n        ((= (mod x n) 0) false)\n\
    \        (else (is_simple_power x (sub1 n))))) ;; #lang racket\n", "  (= (* x\
    \ n) x))\n", "  (cond ((= n 0) (= x 1))\n        ((= n 1) (= x x))\n        ((=\
    \ n 2) (= x (* x x)))\n        (else (is_simple_power x (- n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
