name: HumanEval_14_all_prefixes
language: rkt
prompt: "#lang racket\n\n;; Return list of all prefixes from shortest to longest of\
  \ the input string\n(define (all_prefixes string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string)))))\n", "  (let loop ((prefixes\
    \ '())\n             (string string))\n    (if (string-empty? string)\n      \
    \  (reverse prefixes)\n        (loop (cons (substring string 0 (string-length\
    \ string)) prefixes)\n               (substring string 1 (string-length string))))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (let loop ((prefixes\
    \ '())\n             (string string))\n    (if (empty? string)\n        (reverse\
    \ prefixes)\n        (loop (cons (substring string 0 (string-length string))\n\
    \                    (cons (substring string 0 (string-length string))\n     \
    \                     prefixes))\n               (substring string 1 (string-length\
    \ string))))))\n", "  (let loop ((prefixes '())\n             (string string))\n\
    \    (if (null? string)\n        prefixes\n        (loop (cons (substring string\
    \ 0 (string-length string))\n                  prefixes)\n               (substring\
    \ string 1 (string-length string))))))\n", "  (let loop ((prefixes '())\n    \
    \         (string string))\n    (cond [(empty? string) prefixes]\n          [(char=?\
    \ (first string) (rest string)) (loop (cons (first string) prefixes) (rest string))]\n\
    \          [else (loop (cons (first string) prefixes) (rest string))]))\n  (loop\
    \ '() string))\n", "  (if (empty? string)\n      '()\n      (cons (substring string\
    \ 0 (string-length string)) (all_prefixes (string-append string \"-\")))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))) ;; #lang racket\n", "  (let loop ((prefixes '())\n             (string\
    \ string))\n    (cond [(empty? string) prefixes]\n          [(char=? (first string)\
    \ (rest string)) (loop (cons (first string) prefixes) (rest string))]\n      \
    \    [else (loop (cons (first string) prefixes) (rest string))]))\n  (loop '()\
    \ string))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (cons (car string) (all_prefixes (cdr\
    \ string)))))\n", "  (define (helper string prefix)\n    (cond [(empty? string)\
    \ prefix]\n          [(char=? (car string) prefix) \n           (helper (cdr string)\
    \ (cons (car string) prefix))]\n          [else (helper (cdr string) prefix)])\n\
    \  (helper string '()))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))) ;; #lang racket\n", " \
    \ (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string)))))\n", "  (let loop ((prefixes '())\n   \
    \          (string string))\n    (if (null? string)\n        prefixes\n      \
    \  (loop (cons (car string) prefixes)\n               (cdr string)))))\n", " \
    \ (let loop ((prefixes '())\n             (string string))\n    (cond ((null?\
    \ string) prefixes)\n          ((char=? (car string) (car prefixes)) \n      \
    \     (loop (cons (car prefixes) '())\n                 (cdr string)))\n     \
    \     (else (loop (cons (car prefixes) '())\n                      (cdr string))))))\n",
  "  (cond [(empty? string) '()]\n        [(equal? (first string) '#\\#) '()]\n  \
    \      [else (cons (first string) (all_prefixes (rest string)))]))\n", "  (let\
    \ loop ((prefixes '())\n             (string string))\n    (if (string-empty?\
    \ string)\n        (reverse prefixes)\n        (loop (cons (substring string 0\
    \ (string-length string)) prefixes)\n               (substring string 1 (string-length\
    \ string))))))\n", "  (if (empty? string)\n      '()\n      (cons (car string)\n\
    \            (all_prefixes (cdr string)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
