name: HumanEval_20_find_closest_elements
language: rkt
prompt: "#lang racket\n\n;; From a supplied list of numbers (of length at least two)\
  \ select and return two that are the closest to each\n;; other and return them in\
  \ order (smaller number, larger number).\n(define (find_closest_elements numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0))\n\
  \    (check-equal? (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0))\n    (check-equal?\
  \ (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1))\n))\n\n(test-humaneval)"
completions: ["  (let ((smallest (first numbers))\n        (largest (second numbers)))\n\
    \    (if (null? numbers)\n        (list smallest largest)\n        (let ((smallest\
    \ (first numbers))\n              (largest (second numbers)))\n          (if (<\
    \ (first numbers) (second numbers))\n              (find_closest_elements (rest\
    \ numbers))\n              (find_closest_elements (rest numbers))))))))\n", " \
    \ (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null?\
    \ numbers)\n        (list smallest largest)\n        (let ((smallest (car numbers))\n\
    \              (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? (cdr numbers))\n\
    \        (list smallest largest)\n        (let ((smallest2 (find_closest_elements\
    \ (cdr numbers))))\n          (let ((largest2 (find_closest_elements (cdr numbers))))\n\
    \            (if (< (abs (- smallest smallest2) (abs (- smallest largest2))))\n\
    \                (list smallest largest)\n                (list smallest largest2)\n\
    \            )\n          )\n        )\n    )\n  )\n)\n", "  (define (helper numbers\
    \ smallest-number largest-number)\n    (cond\n      [(null? numbers) (list smallest-number\
    \ largest-number)]\n      [(< (car numbers) largest-number) \n       (helper (cdr\
    \ numbers) smallest-number (car numbers))]\n      [(> (car numbers) smallest-number)\
    \ \n       (helper (cdr numbers) (car numbers) largest-number)]\n      [else (helper\
    \ (cdr numbers) (car numbers) (car numbers))]))\n  (helper numbers numbers (car\
    \ numbers)))\n", "  (define (helper numbers smallest-number largest-number)\n\
    \    (cond [(empty? numbers) (list smallest-number largest-number)]\n        \
    \  [(< (first numbers) smallest-number)\n           (helper (rest numbers) smallest-number\
    \ (first numbers))]\n          [(> (first numbers) largest-number)\n         \
    \  (helper (rest numbers) (first numbers) largest-number)]\n          [else (helper\
    \ (rest numbers) (first numbers) (first numbers))]))\n  (helper numbers numbers\
    \ (first numbers)))\n", "  (let ((smallest (car numbers))\n        (largest (car\
    \ numbers)))\n    (if (null? (cdr numbers))\n        (list smallest largest)\n\
    \        (let ((smallest (car numbers))\n              (largest (car numbers)))\n\
    \          (if (< (abs (- smallest largest)) (abs (- largest smallest)))\n   \
    \           (find_closest_elements (cdr numbers))\n              (find_closest_elements\
    \ (cdr numbers))))))))\n", "  (define (helper numbers)\n    (if (null? numbers)\n\
    \        '()\n        (let ((smallest (car numbers))\n              (largest (car\
    \ numbers)))\n          (if (< (abs (- smallest largest)) (abs (- largest smallest)))\n\
    \              (cons smallest numbers)\n              (cons largest numbers)))))\n\
    \  (helper numbers))\n", "  (define (helper numbers smallest-number largest-number)\n\
    \    (cond [(empty? numbers) (list smallest-number largest-number)]\n        \
    \  [(< (first numbers) smallest-number) \n           (helper (rest numbers) smallest-number\
    \ (first numbers))]\n          [(> (first numbers) largest-number) \n        \
    \   (helper (rest numbers) (first numbers) largest-number)]\n          [else (helper\
    \ (rest numbers) (first numbers) (first numbers))]))\n  (helper numbers numbers\
    \ (first numbers)))\n", "  (let ((smallest (first numbers))\n        (largest\
    \ (second numbers)))\n    (cond\n      [(< (first numbers) (second numbers)) (list\
    \ smallest largest)]\n      [(< (second numbers) (third numbers)) (list smallest\
    \ largest)]\n      [(< (third numbers) (fourth numbers)) (list smallest largest)]\n\
    \      [(< (fourth numbers) (fifth numbers)) (list smallest largest)]\n      [(<\
    \ (fifth numbers) (sixth numbers)) (list smallest largest)]\n      [(< (sixth\
    \ numbers) (seventh numbers)) (list smallest largest)]\n      [(< (seventh numbers)\
    \ (eigth numbers)) (list smallest largest)]\n      [(< (eigth numbers) (ninth\
    \ numbers)) (list smallest largest)]\n      [(< (ninth numbers) (tenth numbers))\
    \ (list smallest largest)]\n      [(< (tenth numbers) (eleventh numbers)) (list\
    \ smallest largest)]\n      [(< (eleventh numbers) (twelfth numbers)) (list smallest\
    \ largest)]\n      [(< (twelfth numbers) (thirteenth numbers)) (list smallest\
    \ largest)]\n      [(< (thirteenth numbers) (fourteenth numbers)) (list smallest\
    \ largest)]\n      [(< (fourteenth numbers) (fifteenth numbers)) (list smallest\
    \ largest)]\n      [(< (fifteenth numbers) (sixteenth numbers)) (list smallest\
    \ largest)]\n      [(< (sixteenth numbers) (seventeenth numbers)) (list smallest\
    \ largest)]\n      [(< (seventeenth numbers) (eighteenth numbers)) (list smallest\
    \ largest)]\n      [(< (eighteenth numbers) (nineteenth numbers)) (list smallest\
    \ largest)]\n      [(< (nineteenth numbers) (twentieth numbers)) (list smallest\
    \ largest)]\n      [(< (twentieth numbers) (thirtieth numbers)) (list smallest\
    \ largest)]\n      [(< (thirtieth numbers) (fourtieth numbers)) (list smallest\
    \ largest)]\n      [(< (fourtieth numbers) (fiftieth numbers)) (list smallest\
    \ largest)]\n      [(< (fiftieth numbers) (sixtieth numbers)) (list smallest largest)]\n\
    \      [(< (sixtieth numbers) (seventieth numbers)) (list smallest largest", " \
    \ (let ((smallest (first numbers))\n        (largest (first numbers)))\n    (if\
    \ (null? numbers)\n        (list smallest largest)\n        (let ((smallest (first\
    \ numbers))\n              (largest (first numbers)))\n          (if (< (first\
    \ numbers) largest)\n              (find_closest_elements (rest numbers))\n  \
    \            (find_closest_elements (rest numbers)))))))\n", "  (let ((smallest\
    \ (first numbers))\n        (largest (second numbers)))\n    (if (null? numbers)\n\
    \        (list smallest largest)\n        (let ((smallest (first numbers))\n \
    \             (largest (second numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (rest numbers))\n\
    \              (find_closest_elements (rest numbers))))))))\n", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? (cdr numbers))\n\
    \        (list smallest largest)\n        (let ((smallest (car numbers))\n   \
    \           (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? (cdr numbers))\n\
    \        (list smallest largest)\n        (let ((smallest (car numbers))\n   \
    \           (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n", "  (define (helper\
    \ numbers smallest-number largest-number)\n    (cond [(null? numbers) (list smallest-number\
    \ largest-number)]\n          [(< (first numbers) smallest-number)\n         \
    \  (helper (rest numbers) smallest-number (first numbers))]\n          [(> (first\
    \ numbers) largest-number)\n           (helper (rest numbers) (first numbers)\
    \ largest-number)]\n          [else (helper (rest numbers) (first numbers) (first\
    \ numbers))]))\n  (helper numbers #f #f))\n", "  (define (helper numbers smallest)\n\
    \    (cond [(empty? numbers) (list smallest smallest)]\n          [(< (first numbers)\
    \ smallest) (helper (rest numbers) smallest)]\n          [else (helper (rest numbers)\
    \ (first numbers))]))\n  (helper numbers numbers))\n", "  (let ((smallest (car\
    \ numbers))\n        (largest (car numbers)))\n    (if (null? (cdr numbers))\n\
    \        (list smallest largest)\n        (let ((smallest (car numbers))\n   \
    \           (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n", "  (define (helper\
    \ numbers smallest-number largest-number)\n    (cond [(empty? numbers) (list smallest-number\
    \ largest-number)]\n          [(< (first numbers) smallest-number)\n         \
    \  (helper (rest numbers) smallest-number (first numbers))]\n          [(> (first\
    \ numbers) largest-number)\n           (helper (rest numbers) (first numbers)\
    \ largest-number)]\n          [else (helper (rest numbers) (first numbers) (first\
    \ numbers))]))\n  (helper numbers numbers (first numbers)))\n", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? (cdr numbers))\n\
    \        (list smallest largest)\n        (let ((smallest (car numbers))\n   \
    \           (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n", "  (define (helper\
    \ numbers smallest-number largest-number)\n    (cond [(null? numbers) (list smallest-number\
    \ largest-number)]\n          [(< (first numbers) smallest-number)\n         \
    \  (helper (rest numbers) smallest-number (first numbers))]\n          [(> (first\
    \ numbers) largest-number)\n           (helper (rest numbers) (first numbers)\
    \ largest-number)]\n          [else (helper (rest numbers) (first numbers) (first\
    \ numbers))]))\n  (helper numbers numbers (first numbers)))\n", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? (cdr numbers))\n\
    \        (list smallest largest)\n        (let ((smallest (car numbers))\n   \
    \           (largest (car numbers)))\n          (if (< (abs (- smallest largest))\
    \ (abs (- largest smallest)))\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
