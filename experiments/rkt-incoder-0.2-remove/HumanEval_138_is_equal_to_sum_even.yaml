name: HumanEval_138_is_equal_to_sum_even
language: rkt
prompt: "#lang racket\n\n;; Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\n;; Example\n(define (is_equal_to_sum_even\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) (modulo (+ n 1) 4)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4)\
    \ 0))\n", "  (= (modulo n 4) 0))\n", "  (cond\n    [(= n 0) true]\n    [(even?\
    \ n) true]\n    [else (is_equal_to_sum_even (- n 2))]))\n", "  (= (modulo n 4)\
    \ 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) (modulo (+ n 1) 4)))\n", "  (cond\n    [(= n 0) true]\n    [(= n 1) true]\n\
    \    [(= n 2) true]\n    [(= n 3) true]\n    [else (= (modulo n 4) 0)]))\n", " \
    \ (= (modulo n 4) 0))\n", "  (cond\n    [(= n 0) true]\n    [(even? n) (is_equal_to_sum_even\
    \ (- n 2))]\n    [else false]))\n", "  (= (modulo n 4) (modulo (+ n 1) 4)))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) (modulo (+ n 1) 4)))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) (modulo (+ n 1) 4)))\n", "  (cond\n    [(= n\
    \ 0) true]\n    [(even? n) (is_equal_to_sum_even (- n 2))]\n    [else false]))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (cond\n    [(= n 0) true]\n    [(even? n) (= (- n 2) 0)]\n    [else false]))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (cond\n    ((= n 0) #t)\n\
    \    ((= n 1) #t)\n    ((= n 2) #t)\n    ((= (mod n 2) 0) #t)\n    ((= (mod n\
    \ 2) 1) #t)\n    ((= (mod n 2) 2) #t)\n    ((= (mod n 2) 3) #t)\n    ((= (mod\
    \ n 2) 4) #t)\n    ((= (mod n 2) 5) #t)\n    ((= (mod n 2) 6) #t)\n    ((= (mod\
    \ n 2) 7) #t)\n    ((= (mod n 2) 8) #t)\n    ((= (mod n 2) 9) #t)\n    ((= (mod\
    \ n 2) 10) #t)\n    ((= (mod n 2) 11) #t)\n    ((= (mod n 2) 12) #t)\n    ((=\
    \ (mod n 2) 13) #t)\n    ((= (mod n 2) 14) #t)\n    ((= (mod n 2) 15) #t)\n  \
    \  ((= (mod n 2) 16) #t)\n    ((= (mod n 2) 17) #t)\n    ((= (mod n 2) 18) #t)\n\
    \    ((= (mod n 2) 19) #t)\n    ((= (mod n 2) 20) #t)\n    ((= (mod n 2) 21) #t)\n\
    \    ((= (mod n 2) 22) #t)\n    ((= (mod n 2) 23) #t)\n    ((= (mod n 2) 24) #t)\n\
    \    ((= (mod n 2) 25) #t)\n    ((= (mod n 2) 26) #t)\n    ((= (mod n 2) 27) #t)\n\
    \    ((= (mod n 2) 28) #t)\n    ((= (mod n 2) 29) #t)\n    ((= (mod n 2) 30) #t)\n\
    \    ((= (mod n 2) 31) #t)\n    ((= (mod n 2) 32) #t)\n    ((= (mod n 2) 33) #t)\n\
    \    ((= (mod n 2) 34) #t)\n    ((= (mod n 2) 35) #t)\n    ((= (mod n 2) 36) #t)\n\
    \    ((= (mod n 2) 37) #t)\n    ((= (mod n 2) 38) #t)\n    ((= (mod n 2) 39) #t)\n\
    \    ((= (mod n 2) 40) #t)\n    ((= (mod n 2) 41) #t)\n    ((= (mod n 2) 42) #t)\n\
    \    ((= (mod n 2) 43) #t)\n    ((= (mod n 2) 44) #t)\n    ((= (mod n 2) 45) #t)\n\
    \    ((= (mod n 2) 46) #t)\n    ((= (mod n 2) 47) #t)\n    ((= (mod n 2) ", " \
    \ (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) (modulo\
    \ (+ n 1) 4)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (=\
    \ (modulo n 4) (modulo (+ n 1) 4)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 2) 0)\n  (= (modulo n 4) 0)\n  (= (modulo n 6)\
    \ 0)\n  (= (modulo n 8) 0)\n  (= (modulo n 10) 0)\n  (= (modulo n 12) 0)\n  (=\
    \ (modulo n 14) 0)\n  (= (modulo n 16) 0)\n  (= (modulo n 18) 0)\n  (= (modulo\
    \ n 20) 0)\n  (= (modulo n 22) 0)\n  (= (modulo n 24) 0)\n  (= (modulo n 26) 0)\n\
    \  (= (modulo n 28) 0)\n  (= (modulo n 30) 0)\n  (= (modulo n 32) 0)\n  (= (modulo\
    \ n 34) 0)\n  (= (modulo n 36) 0)\n  (= (modulo n 38) 0)\n  (= (modulo n 40) 0)\n\
    \  (= (modulo n 42) 0)\n  (= (modulo n 44) 0)\n  (= (modulo n 46) 0)\n  (= (modulo\
    \ n 48) 0)\n  (= (modulo n 50) 0)\n  (= (modulo n 52) 0)\n  (= (modulo n 54) 0)\n\
    \  (= (modulo n 56) 0)\n  (= (modulo n 58) 0)\n  (= (modulo n 60) 0)\n  (= (modulo\
    \ n 62) 0)\n  (= (modulo n 64) 0)\n  (= (modulo n 66) 0)\n  (= (modulo n 68) 0)\n\
    \  (= (modulo n 70) 0)\n  (= (modulo n 72) 0)\n  (= (modulo n 74) 0)\n  (= (modulo\
    \ n 76) 0)\n  (= (modulo n 78) 0)\n  (= (modulo n 80) 0)\n  (= (modulo n 82) 0)\n\
    \  (= (modulo n 84) 0)\n  (= (modulo n 86) 0)\n  (= (modulo n 88) 0)\n  (= (modulo\
    \ n 90) 0)\n  (= (modulo n 92) 0)\n  (= (modulo n 94) 0)\n  (= (modulo n 96) 0)\n\
    \  (= (modulo n 98) 0)\n  (= (modulo n 100) 0)\n  (= (modulo n 102) 0)\n  (= (modulo\
    \ n 104", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even\
    \ (- n 2))]\n    [else #f]))\n", "  (= (modulo n 2) 0))\n", "  (cond\n    [(=\
    \ n 0) true]\n    [(= n 1) true]\n    [(= n 2) true]\n    [(= n 3) true]\n   \
    \ [(= (modulo n 2) 0) (= (modulo n 2) 0)]\n    [else false]))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo\
    \ n 4) (modulo (+ n 1) 4)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4)\
    \ 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 2) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo n 2) 0))\n", "  (cond\n\
    \    [(= n 0) true]\n    [(= n 1) true]\n    [(= n 2) true]\n    [(= n 3) true]\n\
    \    [else (= (modulo n 4) 0)]))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) (modulo (+ n 1) 4)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4)\
    \ 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (cond\n\
    \    [(= n 0) true]\n    [(even? n) (is_equal_to_sum_even (- n 2))]\n    [else\
    \ false]))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 2) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) (modulo (+ n 1) 4)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4)\
    \ 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) (modulo (+ n 2) 4)))\n", "  (= (modulo n 4)\
    \ 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (cond\n    [(= n 0) true]\n    [(even? n) true]\n    [else (is_equal_to_sum_even\
    \ (- n 2))]))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (=\
    \ (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) (modulo (+\
    \ n 1) 4)))\n", "  (= (modulo n 2) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 2) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ n 2) 0)\n  (= (modulo n 4) 0)\n  (= (modulo n 6) 0)\n  (= (modulo n 8) 0)\n\
    \  (= (modulo n 10) 0)\n  (= (modulo n 12) 0)\n  (= (modulo n 14) 0)\n  (= (modulo\
    \ n 16) 0)\n  (= (modulo n 18) 0)\n  (= (modulo n 20) 0)\n  (= (modulo n 22) 0)\n\
    \  (= (modulo n 24) 0)\n  (= (modulo n 26) 0)\n  (= (modulo n 28) 0)\n  (= (modulo\
    \ n 30) 0)\n  (= (modulo n 32) 0)\n  (= (modulo n 34) 0)\n  (= (modulo n 36) 0)\n\
    \  (= (modulo n 38) 0)\n  (= (modulo n 40) 0)\n  (= (modulo n 42) 0)\n  (= (modulo\
    \ n 44) 0)\n  (= (modulo n 46) 0)\n  (= (modulo n 48) 0)\n  (= (modulo n 50) 0)\n\
    \  (= (modulo n 52) 0)\n  (= (modulo n 54) 0)\n  (= (modulo n 56) 0)\n  (= (modulo\
    \ n 58) 0)\n  (= (modulo n 60) 0)\n  (= (modulo n 62) 0)\n  (= (modulo n 64) 0)\n\
    \  (= (modulo n 66) 0)\n  (= (modulo n 68) 0)\n  (= (modulo n 70) 0)\n  (= (modulo\
    \ n 72) 0)\n  (= (modulo n 74) 0)\n  (= (modulo n 76) 0)\n  (= (modulo n 78) 0)\n\
    \  (= (modulo n 80) 0)\n  (= (modulo n 82) 0)\n  (= (modulo n 84) 0)\n  (= (modulo\
    \ n 86) 0)\n  (= (modulo n 88) 0)\n  (= (modulo n 90) 0)\n  (= (modulo n 92) 0)\n\
    \  (= (modulo n 94) 0)\n  (= (modulo n 96) 0)\n  (= (modulo n 98) 0)\n  (= (modulo\
    \ n 100) 0)\n  (= (modulo n 102) 0)\n  (= (modulo n 104", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
