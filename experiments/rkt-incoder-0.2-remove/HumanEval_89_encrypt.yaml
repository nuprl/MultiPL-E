name: HumanEval_89_encrypt
language: rkt
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n(define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n        \
    \  for i from 0\n          for j from (- i 2)\n          for k from (- j 2)\n\
    \          when (char=? c alpha)\n          collect (cond ((char=? (char-after\
    \ c alpha) alpha)\n                         (char-before c alpha))\n         \
    \              ((char=? (char-after c alpha) alpha (+ i 1))\n                \
    \         (char-before c alpha (+ i 1)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ j 1))\n                         (char-before c alpha (+ j\
    \ 1)))\n                       ((char=? (char-after c alpha) alpha (+ k 1))\n\
    \                         (char-before c alpha (+ k 1)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ i 1))\n                         (char-before\
    \ c alpha (+ i 1)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ j 1))\n                         (char-before c alpha (+ j 1)))\n        \
    \               ((char=? (char-after c alpha) alpha (+ k 1))\n               \
    \          (char-before c alpha (+ k 1)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ i 1))\n                         (char-before c alpha (+ i\
    \ 1)))\n                       ((char=? (char-after c alpha) alpha (+ j 1))\n\
    \                         (char-before c alpha (+ j 1)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ k 1))\n                         (char-before\
    \ c alpha (+ k 1)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ i 1))\n                         (char-before c alpha (+ i 1)))\n        \
    \               ((char=? (char-after c alpha) alpha (+ j 1))\n               \
    \          (char-before c alpha (+ j 1)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ k 1))\n                         (char-before c alpha (+ k\
    \ 1)))\n                       ((char=? (char-after c alpha) alpha (+ i 1))\n\
    \                         (char-before c alpha (+ i 1)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ j 1))\n                         (char-before\
    \ c alpha (+ j 1)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ k 1))\n                         (char-before c alph", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (loop for i from 0 to (length s) do\n          (set! alpha\
    \ (rotate-alphabet alpha i))\n          (set! s (string-append s (char->string\
    \ alpha))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha (-\
    \ (length s) i)))\n          (set! alpha (rotate! alpha (- (length s) (+ i 1))))\n\
    \          (set! alpha (rotate! alpha (- (length s) (+ i 2))))\n          (set!\
    \ alpha (rotate! alpha (- (length s) (+ i 3))))\n          (set! alpha (rotate!\
    \ alpha (- (length s) (+ i 4))))\n          (set! alpha (rotate! alpha (- (length\
    \ s) (+ i 5))))\n          (set! alpha (rotate! alpha (- (length s) (+ i 6))))\n\
    \      (loop for i from 0 to (length s) do\n            (set! alpha (rotate! alpha\
    \ (- (length s) i)))\n            (set! alpha (rotate! alpha (- (length s) (+\
    \ i 1))))\n            (set! alpha (rotate! alpha (- (length s) (+ i 2))))\n \
    \           (set! alpha (rotate! alpha (- (length s) (+ i 3))))\n            (set!\
    \ alpha (rotate! alpha (- (length s) (+ i 4))))\n            (set! alpha (rotate!\
    \ alpha (- (length s) (+ i 5))))\n            (set! alpha (rotate! alpha (- (length\
    \ s) (+ i 6))))\n      (loop for i from 0 to (length s) do\n            (set!\
    \ alpha (rotate! alpha (- (length s) i)))\n            (set! alpha (rotate! alpha\
    \ (- (length s) (+ i 1))))\n            (set! alpha (rotate! alpha (- (length\
    \ s) (+ i 2))))\n            (set! alpha (rotate! alpha (- (length s) (+ i 3))))\n\
    \            (set! alpha (rotate! alpha (- (length s) (+ i 4))))\n           \
    \ (set! alpha (rotate! alpha (- (length s) (+ i 5))))\n            (set! alpha\
    \ (rotate! alpha (- (length s) (+ i 6))))\n      (loop for i from 0 to (length\
    \ s) do\n            (set! alpha (rotate! alpha (- (length s) i)))\n         \
    \   (set! alpha (rotate! alpha (- (length s) (+ i 1))))\n            (set! alpha\
    \ (rotate! alpha (- (length s) (+ i 2))))\n            (set! alpha (rotate! alpha\
    \ (- (length s) (+ i 3))))\n            (set! alpha (rotate! ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha 2))\n       \
    \   (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (define\
    \ (encrypt s alpha)\n      (cond\n        ((null? s) s)\n        ((char=? (car\
    \ s) #\\A) (cons (char=? (car alpha) #\\A) alpha))\n        ((char=? (car s) #\\\
    Z) (cons (char=? (car alpha) #\\Z) alpha))\n        (else (cons (char=? (car alpha)\
    \ #\\A) alpha))\n      )\n    )\n    (encrypt (encrypt s (reverse alpha)) (reverse\
    \ alpha))\n  )\n)\n", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n\
    \    (loop for c across s\n          for i from 0\n          for j from (- i 2)\n\
    \          for k from (- j 2)\n          when (char=? c alpha)\n          collect\
    \ (rotate-char c i j k))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for c across s\n          for i from 0\n          for j from\
    \ (- i 2)\n          for k from (- j 2)\n          when (char=? c alpha)\n   \
    \       collect (rotate-char c alpha (+ i j) (+ k j))))\n  ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26)))\n    (set! alpha (rotate! alpha 'A))\n    (set!\
    \ alpha (rotate! alpha 'B))\n    (set! alpha (rotate! alpha 'C))\n    (set! alpha\
    \ (rotate! alpha 'D))\n    (set! alpha (rotate! alpha 'E))\n    (set! alpha (rotate!\
    \ alpha 'F))\n    (set! alpha (rotate! alpha 'G))\n    (set! alpha (rotate! alpha\
    \ 'H))\n    (set! alpha (rotate! alpha 'I))\n    (set! alpha (rotate! alpha 'J))\n\
    \    (set! alpha (rotate! alpha 'K))\n    (set! alpha (rotate! alpha 'L))\n  \
    \  (set! alpha (rotate! alpha 'M))\n    (set! alpha (rotate! alpha 'N))\n    (set!\
    \ alpha (rotate! alpha 'O))\n    (set! alpha (rotate! alpha 'P))\n    (set! alpha\
    \ (rotate! alpha 'Q))\n    (set! alpha (rotate! alpha 'R))\n    (set! alpha (rotate!\
    \ alpha 'S))\n    (set! alpha (rotate! alpha 'T))\n    (set! alpha (rotate! alpha\
    \ 'U))\n    (set! alpha (rotate! alpha 'V))\n    (set! alpha (rotate! alpha 'W))\n\
    \    (set! alpha (rotate! alpha 'X))\n    (set! alpha (rotate! alpha 'Y))\n  \
    \  (set! alpha (rotate! alpha 'Z))\n    (set! alpha (rotate! alpha 'a'))\n   \
    \ (set! alpha (rotate! alpha 'b'))\n    (set! alpha (rotate! alpha 'c'))\n   \
    \ (set! alpha (rotate! alpha 'd'))\n    (set! alpha (rotate! alpha 'e'))\n   \
    \ (set! alpha (rotate! alpha 'f'))\n    (set! alpha (rotate! alpha 'g'))\n   \
    \ (set! alpha (rotate! alpha 'h'))\n    (set! alpha (rotate! alpha 'i'))\n   \
    \ (set! alpha (rotate! alpha 'j'))\n    (set! alpha (rotate! alpha 'k'))\n   \
    \ (set! alpha (rotate! alpha 'l'))\n    (set! alpha (rotate! alpha 'm'))\n   \
    \ (set! alpha (rotate! alpha 'n'))\n    (set! alpha (rotate! alpha 'o'))\n   \
    \ (set! alpha (rotate! alpha 'p'))\n", "  (let ((alpha (make-alphabet (length\
    \ s))))\n    (let loop ((i 0) (acc '()))\n      (if (< i alpha)\n          (loop\
    \ (+ i 2) (cons (char->int (substring s i 1)) (cons (char->int (substring s i\
    \ 2)) (cons (char->int (substring s i 3)) acc))))\n          acc))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n\
    \          for i from 0 to 26\n          for j from 0 to 26\n          when (char=?\
    \ c alpha)\n          collect (cond ((char=? c #\\a) (rotate! alpha i j))\n  \
    \                     ((char=? c #\\b) (rotate! alpha i j))\n                \
    \       ((char=? c #\\c) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\d) (rotate! alpha i j))\n                       ((char=? c #\\e) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\f) (rotate! alpha i j))\n\
    \                       ((char=? c #\\g) (rotate! alpha i j))\n              \
    \         ((char=? c #\\h) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\i) (rotate! alpha i j))\n                       ((char=? c #\\j) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\k) (rotate! alpha i j))\n\
    \                       ((char=? c #\\l) (rotate! alpha i j))\n              \
    \         ((char=? c #\\m) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\n) (rotate! alpha i j))\n                       ((char=? c #\\o) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\p) (rotate! alpha i j))\n\
    \                       ((char=? c #\\q) (rotate! alpha i j))\n              \
    \         ((char=? c #\\r) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\s) (rotate! alpha i j))\n                       ((char=? c #\\t) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\v) (rotate! alpha i j))\n\
    \                       ((char=? c #\\w) (rotate! alpha i j))\n              \
    \         ((char=? c #\\x) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\y) (rotate! alpha i j))\n                       ((char=? c #\\z) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\0) (rotate! alpha i j))\n\
    \                       ((char=? c #\\1) (rotate! alpha i j))\n              \
    \         ((char=? c #\\2) (rotate! ", "  (cond [(empty? s) \"\"]\n        [(equal?\
    \ (first s) 'a) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'b) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'c)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'd) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'e) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'f) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'i) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'j) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'k)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'l) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'm) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'q) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'r) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 's)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 't) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'u) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'v) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'w) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'x) (cons (first s) (encrypt (rest s)))]", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha 2))\n       \
    \   (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n        \
    \  (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for c across s\n        \
    \  for i from 0\n          for j from (- i 2)\n          for k from (- j 2)\n\
    \          for l from (- k 2)\n          for m from (- l 2)\n          for n from\
    \ (- m 2)\n          for o from (- n 2)\n          for p from (- o 2)\n      \
    \    for q from (- p 2)\n          for r from (- q 2)\n          for s from (-\
    \ r 2)\n          for t from (- s 2)\n          for u from (- t 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
