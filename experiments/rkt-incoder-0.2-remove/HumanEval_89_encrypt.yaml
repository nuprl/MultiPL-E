name: HumanEval_89_encrypt
language: rkt
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n(define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n        \
    \  for i from 0\n          for j from (- i 2)\n          for k from (- j 2)\n\
    \          when (char=? c alpha)\n          collect (cond ((char=? (char-after\
    \ c alpha) alpha)\n                         (char-before c alpha))\n         \
    \              ((char=? (char-after c alpha) alpha (+ i 1))\n                \
    \         (char-before c alpha (+ i 1)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ j 1))\n                         (char-before c alpha (+ j\
    \ 1)))\n                       ((char=? (char-after c alpha) alpha (+ k 1))\n\
    \                         (char-before c alpha (+ k 1)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ i 1))\n                         (char-before\
    \ c alpha (+ i 1)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ j 1))\n                         (char-before c alpha (+ j 1)))\n        \
    \               ((char=? (char-after c alpha) alpha (+ k 1))\n               \
    \          (char-before c alpha (+ k 1)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ i 1))\n                         (char-before c alpha (+ i\
    \ 1)))\n                       ((char=? (char-after c alpha) alpha (+ j 1))\n\
    \                         (char-before c alpha (+ j 1)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ k 1))\n                         (char-before\
    \ c alpha (+ k 1)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ i 1))\n                         (char-before c alpha (+ i 1)))\n        \
    \               ((char=? (char-after c alpha) alpha (+ j 1))\n               \
    \          (char-before c alpha (+ j 1)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ k 1))\n                         (char-before c alpha (+ k\
    \ 1)))\n                       ((char=? (char-after c alpha) alpha (+ i 1))\n\
    \                         (char-before c alpha (+ i 1)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ j 1))\n                         (char-before\
    \ c alpha (+ j 1)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ k 1))\n                         (char-before c alph", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (loop for i from 0 to (length s) do\n          (set! alpha\
    \ (rotate-alphabet alpha i))\n          (set! s (string-append s (char->string\
    \ alpha))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha (-\
    \ (length s) i)))\n          (set! alpha (rotate! alpha (- (length s) (+ i 1))))\n\
    \          (set! alpha (rotate! alpha (- (length s) (+ i 2))))\n          (set!\
    \ alpha (rotate! alpha (- (length s) (+ i 3))))\n          (set! alpha (rotate!\
    \ alpha (- (length s) (+ i 4))))\n          (set! alpha (rotate! alpha (- (length\
    \ s) (+ i 5))))\n          (set! alpha (rotate! alpha (- (length s) (+ i 6))))\n\
    \      (loop for i from 0 to (length s) do\n            (set! alpha (rotate! alpha\
    \ (- (length s) i)))\n            (set! alpha (rotate! alpha (- (length s) (+\
    \ i 1))))\n            (set! alpha (rotate! alpha (- (length s) (+ i 2))))\n \
    \           (set! alpha (rotate! alpha (- (length s) (+ i 3))))\n            (set!\
    \ alpha (rotate! alpha (- (length s) (+ i 4))))\n            (set! alpha (rotate!\
    \ alpha (- (length s) (+ i 5))))\n            (set! alpha (rotate! alpha (- (length\
    \ s) (+ i 6))))\n      (loop for i from 0 to (length s) do\n            (set!\
    \ alpha (rotate! alpha (- (length s) i)))\n            (set! alpha (rotate! alpha\
    \ (- (length s) (+ i 1))))\n            (set! alpha (rotate! alpha (- (length\
    \ s) (+ i 2))))\n            (set! alpha (rotate! alpha (- (length s) (+ i 3))))\n\
    \            (set! alpha (rotate! alpha (- (length s) (+ i 4))))\n           \
    \ (set! alpha (rotate! alpha (- (length s) (+ i 5))))\n            (set! alpha\
    \ (rotate! alpha (- (length s) (+ i 6))))\n      (loop for i from 0 to (length\
    \ s) do\n            (set! alpha (rotate! alpha (- (length s) i)))\n         \
    \   (set! alpha (rotate! alpha (- (length s) (+ i 1))))\n            (set! alpha\
    \ (rotate! alpha (- (length s) (+ i 2))))\n            (set! alpha (rotate! alpha\
    \ (- (length s) (+ i 3))))\n            (set! alpha (rotate! ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha 2))\n       \
    \   (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (define\
    \ (encrypt s alpha)\n      (cond\n        ((null? s) s)\n        ((char=? (car\
    \ s) #\\A) (cons (char=? (car alpha) #\\A) alpha))\n        ((char=? (car s) #\\\
    Z) (cons (char=? (car alpha) #\\Z) alpha))\n        (else (cons (char=? (car alpha)\
    \ #\\A) alpha))\n      )\n    )\n    (encrypt (encrypt s (reverse alpha)) (reverse\
    \ alpha))\n  )\n)\n", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n\
    \    (loop for c across s\n          for i from 0\n          for j from (- i 2)\n\
    \          for k from (- j 2)\n          when (char=? c alpha)\n          collect\
    \ (rotate-char c i j k))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for c across s\n          for i from 0\n          for j from\
    \ (- i 2)\n          for k from (- j 2)\n          when (char=? c alpha)\n   \
    \       collect (rotate-char c alpha (+ i j) (+ k j))))\n  ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26)))\n    (set! alpha (rotate! alpha 'A))\n    (set!\
    \ alpha (rotate! alpha 'B))\n    (set! alpha (rotate! alpha 'C))\n    (set! alpha\
    \ (rotate! alpha 'D))\n    (set! alpha (rotate! alpha 'E))\n    (set! alpha (rotate!\
    \ alpha 'F))\n    (set! alpha (rotate! alpha 'G))\n    (set! alpha (rotate! alpha\
    \ 'H))\n    (set! alpha (rotate! alpha 'I))\n    (set! alpha (rotate! alpha 'J))\n\
    \    (set! alpha (rotate! alpha 'K))\n    (set! alpha (rotate! alpha 'L))\n  \
    \  (set! alpha (rotate! alpha 'M))\n    (set! alpha (rotate! alpha 'N))\n    (set!\
    \ alpha (rotate! alpha 'O))\n    (set! alpha (rotate! alpha 'P))\n    (set! alpha\
    \ (rotate! alpha 'Q))\n    (set! alpha (rotate! alpha 'R))\n    (set! alpha (rotate!\
    \ alpha 'S))\n    (set! alpha (rotate! alpha 'T))\n    (set! alpha (rotate! alpha\
    \ 'U))\n    (set! alpha (rotate! alpha 'V))\n    (set! alpha (rotate! alpha 'W))\n\
    \    (set! alpha (rotate! alpha 'X))\n    (set! alpha (rotate! alpha 'Y))\n  \
    \  (set! alpha (rotate! alpha 'Z))\n    (set! alpha (rotate! alpha 'a'))\n   \
    \ (set! alpha (rotate! alpha 'b'))\n    (set! alpha (rotate! alpha 'c'))\n   \
    \ (set! alpha (rotate! alpha 'd'))\n    (set! alpha (rotate! alpha 'e'))\n   \
    \ (set! alpha (rotate! alpha 'f'))\n    (set! alpha (rotate! alpha 'g'))\n   \
    \ (set! alpha (rotate! alpha 'h'))\n    (set! alpha (rotate! alpha 'i'))\n   \
    \ (set! alpha (rotate! alpha 'j'))\n    (set! alpha (rotate! alpha 'k'))\n   \
    \ (set! alpha (rotate! alpha 'l'))\n    (set! alpha (rotate! alpha 'm'))\n   \
    \ (set! alpha (rotate! alpha 'n'))\n    (set! alpha (rotate! alpha 'o'))\n   \
    \ (set! alpha (rotate! alpha 'p'))\n", "  (let ((alpha (make-alphabet (length\
    \ s))))\n    (let loop ((i 0) (acc '()))\n      (if (< i alpha)\n          (loop\
    \ (+ i 2) (cons (char->int (substring s i 1)) (cons (char->int (substring s i\
    \ 2)) (cons (char->int (substring s i 3)) acc))))\n          acc))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n\
    \          for i from 0 to 26\n          for j from 0 to 26\n          when (char=?\
    \ c alpha)\n          collect (cond ((char=? c #\\a) (rotate! alpha i j))\n  \
    \                     ((char=? c #\\b) (rotate! alpha i j))\n                \
    \       ((char=? c #\\c) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\d) (rotate! alpha i j))\n                       ((char=? c #\\e) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\f) (rotate! alpha i j))\n\
    \                       ((char=? c #\\g) (rotate! alpha i j))\n              \
    \         ((char=? c #\\h) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\i) (rotate! alpha i j))\n                       ((char=? c #\\j) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\k) (rotate! alpha i j))\n\
    \                       ((char=? c #\\l) (rotate! alpha i j))\n              \
    \         ((char=? c #\\m) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\n) (rotate! alpha i j))\n                       ((char=? c #\\o) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\p) (rotate! alpha i j))\n\
    \                       ((char=? c #\\q) (rotate! alpha i j))\n              \
    \         ((char=? c #\\r) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\s) (rotate! alpha i j))\n                       ((char=? c #\\t) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\v) (rotate! alpha i j))\n\
    \                       ((char=? c #\\w) (rotate! alpha i j))\n              \
    \         ((char=? c #\\x) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\y) (rotate! alpha i j))\n                       ((char=? c #\\z) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\0) (rotate! alpha i j))\n\
    \                       ((char=? c #\\1) (rotate! alpha i j))\n              \
    \         ((char=? c #\\2) (rotate! ", "  (cond [(empty? s) \"\"]\n        [(equal?\
    \ (first s) 'a) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'b) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'c)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'd) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'e) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'f) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'i) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'j) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'k)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'l) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'm) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'q) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'r) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 's)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 't) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'u) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'v) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'w) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'x) (cons (first s) (encrypt (rest s)))]", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha 2))\n       \
    \   (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n        \
    \  (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for c across s\n        \
    \  for i from 0\n          for j from (- i 2)\n          for k from (- j 2)\n\
    \          for l from (- k 2)\n          for m from (- l 2)\n          for n from\
    \ (- m 2)\n          for o from (- n 2)\n          for p from (- o 2)\n      \
    \    for q from (- p 2)\n          for r from (- q 2)\n          for s from (-\
    \ r 2)\n          for t from (- s 2)\n          for u from (- t 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z ", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n   \
    \ (define (encrypt char alpha)\n      (cond ((char=? char #\\A) (set! alpha (rotate!\
    \ alpha #\\A)))\n            ((char=? char #\\Z) (set! alpha (rotate! alpha #\\\
    Z)))\n            (else (set! alpha (rotate! alpha char)))))\n    (map encrypt\
    \ s alpha)))\n", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n   \
    \ (loop for i from 0 to (length s) do\n      (let ((alpha (substring alpha (*\
    \ i 2) (* i 2))))\n        (set! alpha (substring alpha (* i 2) (* i 2))))\n \
    \     (set! alpha (append alpha (substring alpha (* i 2) (* i 2))))\n      (set!\
    \ alpha (append alpha (substring alpha (* i 2) (* i 2))))\n      (set! alpha (append\
    \ alpha (substring alpha (* i 2) (* i 2))))\n      (set! alpha (append alpha (substring\
    \ alpha (* i 2) (* i 2))))\n      (set! alpha (append alpha (substring alpha (*\
    \ i 2) (* i 2))))\n      (set! alpha (append alpha (substring alpha (* i 2) (*\
    \ i 2))))\n      (set! alpha (append alpha (substring alpha (* i 2) (* i 2))))\n\
    \      (set! alpha (append alpha (substring alpha (* i 2) (* i 2))))\n      (set!\
    \ alpha (append alpha (substring alpha (* i 2) (* i 2))))\n      (set! alpha (append\
    \ alpha (substring alpha (* i 2) (* i 2))))\n      (set! alpha (append alpha (substring\
    \ alpha (* i 2) (* i 2))))\n      (set! alpha (append alpha (substring alpha (*\
    \ i 2) (* i 2))))\n      (set! alpha (append alpha (substring alpha (* i 2) (*\
    \ i 2))))\n      (set! alpha (append alpha (substring alpha (* i 2) (* i 2))))\n\
    \      (set! alpha (append alpha (substring alpha (* i 2) (* i 2))))\n      (set!\
    \ alpha (append alpha (substring alpha (* i 2) (* i 2))))\n      (set! alpha (append\
    \ alpha (substring alpha (* i 2) (* i 2))))\n      (set! alpha (append alpha (substring\
    \ alpha (* i 2) (* i 2))))\n      (set! alpha (append alpha (substring alpha (*\
    \ i 2) (* i 2))))\n      (set! alpha (append alpha (substring alpha (* i 2) (*\
    \ i 2))))\n      (set! alpha (append alpha (substring alpha (* i 2) (* i 2))))\n\
    \      (set! alpha (append alpha (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (let ((c (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (let loop ((i 0))\n      (cond\n\
    \        ((null? s) (list '()))\n        ((eq? alpha (substring s i i))\n    \
    \     (cons alpha (loop (+ i 1))))\n        (else (loop (+ i 1))))))))\n", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate! alpha 2))\n\
    \          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for c across s\n        \
    \  for i from 0 to 26\n          for j from 0 to 26\n          when (char=? (char-code\
    \ c) (char-code (substring alpha (+ i j))))\n          collect (substring alpha\
    \ (+ i j)))))\n", "  (cond [(empty? s) \"\"]\n        [(equal? (first s) 'a) (cons\
    \ (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'b) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'c) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'd) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'e) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'f) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'g) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'h) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'i)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'j) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'k) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'l) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'm) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'o) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'p) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'q)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'r) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 's) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 't) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'u) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'v) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'w) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'x) (cons (first s) (encrypt (rest s)))]", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n        \
    \  (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n  \
    \        (set! alpha (rotate! alpha (+ j 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ j 1)))\n          (set! alpha (rotate! alpha (+ j 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ j 1)))\n          (set!\
    \ alpha (rotate! alpha (+ j 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ j 1)))\n          (set! alpha (rotate! alpha (+ j 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ j 1)))\n          (set! alpha (rotate!\
    \ alpha (+ j 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ j 1)))\n\
    \          (set! alpha (rotate! alpha (+ j 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ j 1)))\n          (set! alpha (rotate! alpha (+ j 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ j 1)))\n          (set!\
    \ alpha (rotate! alpha (+ j 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ j ", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop\
    \ for i from 0 to (length s) do\n          (let ((alpha (rotate-array alpha i\
    \ 2)))\n            (set! alpha (rotate-array alpha i 1))\n            (set! alpha\
    \ (rotate-array alpha i 0))\n            (set! alpha (rotate-array alpha i -1)))\n\
    \    (string-append (substring s 0 i) (substring s i length) alpha))))\n", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for c across\
    \ s\n          for i from 0 to 26\n          for j from 0 to 26\n          when\
    \ (char=? c alpha)\n          collect (cond [(char=? alpha (char-after alpha (char-before\
    \ alpha (char-after alpha (char-before alpha (char-after alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (char-before alpha (char-before alpha (char-before alpha\
    \ (char-before alpha (", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) by 2\n          for c from 0 to (length\
    \ s)\n          when (char=? (char-code (substring s i c)) #\\a)\n          collect\
    \ (substring alpha (+ i c) 1))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26)))\n \
    \   (set! alpha (rotate! alpha 'A 'Z 'N 'T 'W 'V 'U 'R 'Q 'P 'O 'N 'M 'L 'K 'J\
    \ 'I))\n    (string-append (map alpha (string->list s))))\n", "  (let ((alpha\
    \ (make-alphabet (length s))))\n    (define (enc-loop s)\n      (if (empty? s)\n\
    \          s\n          (let ((char (car s)))\n            (set! alpha (rotate-alpha\
    \ (char) alpha))\n            (enc-loop (cdr s))))\n      (enc-loop s))\n    (enc-loop\
    \ s))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for\
    \ c across s\n          for i from 0 to 26\n          for j from 0 to 26\n   \
    \       when (char=? c alpha)\n          collect (rotate-char (char-code c) i\
    \ j))))\n", "  (let ((alpha (make-array 26)))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate! alpha\
    \ -37))\n", "  (let ((alpha (make-array 26)))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate! alpha (i + 1))))\n    (string-append (substring\
    \ s 0 i) \n                  (substring alpha (- i 1)))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          when (and (char=? (char-code c) alpha)\n                \
    \   (char=? (char-code (char alpha (+ i j)) alpha)\n                         \
    \  (char alpha (+ k l))))\n          collect (char alpha (+ i j)))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n\
    \      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s) do\n     \
    \ (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n     \
    \ (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n    \
    \  (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n  \
    \    (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop\
    \ for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n        (loop for j from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha j))\n          (set! alpha (rotate! alpha (- i 1)))\n       \
    \   (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha\
    \ (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha\
    \ (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n \
    \         (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )))\n    (let loop ((s s)\n               (alpha alpha))\n      (cond ((null?\
    \ s) s)\n            ((char-alphabet (first s)) (loop (rest s) (first alpha)))\n\
    \            (else (loop (rest s) (cons (first alpha) (second alpha))))))))\n",
  "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (acc '()))\n\
    \      (if (< i alpha)\n          (loop (+ i 1) (cons (char->int (char s (+ i\
    \ 1))) acc))\n          (loop (+ i 1) acc)))))\n", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (define (enc-loop s alpha)\n      (if (empty? s)\n      \
    \    s\n          (let ((char (car s)))\n            (set! alpha (rotate-alpha\
    \ (char->int char) alpha))\n            (enc-loop (cdr s) alpha)))))\n    (enc-loop\
    \ s alpha)))\n", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n   \
    \ (loop for c across s\n          for i from 0\n          for j from (- i 2)\n\
    \          for k from (- j 2)\n          when (char=? c alpha)\n          do (set!\
    \ alpha (rotate! alpha j k c))\n          collect c)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(equal? (first s) \"A\") (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) \"B\") (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) \"C\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s)\
    \ \"D\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"E\") (cons\
    \ (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"F\") (cons (first s)\
    \ (encrypt (rest s)))]\n    [else (cons (first s) (encrypt (rest s)))]))\n", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ (- (length s) i)))\n          (set! alpha (rotate! alpha (- (length s) i)))\n\
    \          (set! alpha (rotate! alpha (- (length s) i)))\n          (set! alpha\
    \ (rotate! alpha (- (length s) i))))\n    (string-append (map char->string alpha)\
    \ s)))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set! alpha\
    \ (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n          (set!\
    \ alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n     \
    \     (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n\
    \          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha\
    \ -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate!\
    \ alpha -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha\
    \ (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n         \
    \ (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n\
    \          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha\
    \ -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate!\
    \ alpha -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha\
    \ (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n         \
    \ (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n\
    \          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha\
    \ -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate!\
    \ alpha -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha\
    \ (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n         \
    \ (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n\
    \          (set! alpha (rotate", "  (let ((alpha (make-array 26)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate! alpha (i + 1))))\n\
    \    (string-append (substring s 0 i) \n                  (substring alpha (-\
    \ i 1)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop\
    \ for c across s\n          for i from 0 to 26\n          for j from 0 to 26\n\
    \          when (char=? c alpha)\n          collect (rotate-char (char-code c)\
    \ i j))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set! alpha\
    \ (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n          (set!\
    \ alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n     \
    \     (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n\
    \          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha\
    \ -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate!\
    \ alpha -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha\
    \ (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n         \
    \ (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n\
    \          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha\
    \ -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate!\
    \ alpha -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha\
    \ (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n         \
    \ (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n\
    \          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha\
    \ -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate!\
    \ alpha -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha\
    \ (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n         \
    \ (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n\
    \          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for c across s\n        \
    \  for i from 0\n          for j from (- i 2)\n          for k from (- j 2)\n\
    \          for l from (- k 2)\n          for m from (- l 2)\n          for n from\
    \ (- m 2)\n          for o from (- n 2)\n          for p from (- o 2)\n      \
    \    for q from (- p 2)\n          for r from (- q 2)\n          for s from (-\
    \ r 2)\n          for t from (- s 2)\n          for u from (- t 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n   \
    \ (loop for c across s\n          for i from 0\n          for j from (- i 2)\n\
    \          for k from (- j 2)\n          when (char=? c alpha)\n          collect\
    \ (cond ((char=? c #\\z) (cons c alpha))\n                       ((char=? c #\\\
    a) (cons c alpha))\n                       ((char=? c #\\b) (cons c alpha))\n\
    \                       ((char=? c #\\c) (cons c alpha))\n                   \
    \    ((char=? c #\\d) (cons c alpha))\n                       ((char=? c #\\e)\
    \ (cons c alpha))\n                       ((char=? c #\\f) (cons c alpha))\n \
    \                      ((char=? c #\\g) (cons c alpha))\n                    \
    \   ((char=? c #\\h) (cons c alpha))\n                       ((char=? c #\\i)\
    \ (cons c alpha))\n                       ((char=? c #\\j) (cons c alpha))\n \
    \                      ((char=? c #\\k) (cons c alpha))\n                    \
    \   ((char=? c #\\l) (cons c alpha))\n                       ((char=? c #\\m)\
    \ (cons c alpha))\n                       ((char=? c #\\n) (cons c alpha))\n \
    \                      ((char=? c #\\o) (cons c alpha))\n                    \
    \   ((char=? c #\\p) (cons c alpha))\n                       ((char=? c #\\q)\
    \ (cons c alpha))\n                       ((char=? c #\\r) (cons c alpha))\n \
    \                      ((char=? c #\\s) (cons c alpha))\n                    \
    \   ((char=? c #\\t) (cons c alpha))\n                       ((char=? c #\\v)\
    \ (cons c alpha))\n                       ((char=? c #\\w) (cons c alpha))\n \
    \                      ((char=? c #\\x) (cons c alpha))\n                    \
    \   ((char=? c #\\y) (cons c alpha))\n                       ((char=? c #\\z)\
    \ (cons c alpha))\n                       ((char=? c #\\0) (cons c alpha))\n \
    \                      ((char=? c #\\1) (cons c alpha))\n                    \
    \   ((char=? c #\\2) (cons c ", "  (let ((alpha (make-alphabet (length s))))\n\
    \    (define (rotate x y)\n      (cond ((= y 0) x)\n            ((= y 1) (cons\
    \ alpha (rotate (first x) (- y 1))))\n            (else (cons (first x) \n   \
    \                     (rotate (first x) \n                              (- y 1))))))\n\
    \    (rotate s (- s 1))))\n", "  (let ((alpha (make-array 26)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! alpha i 2))\n      (set!\
    \ alpha (rotate! alpha i 2))\n      (set! alpha (rotate! ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha 2))\n       \
    \   (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha 2))\n       \
    \   (set! alpha (", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((c (char-code (char s i))))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha 0))\n      \
    \    (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 2))\n\
    \          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate! alpha\
    \ 4))\n          (set! alpha (rotate! alpha 5))\n          (set! alpha (rotate!\
    \ alpha 6))\n          (set! alpha (rotate! alpha 7))\n          (set! alpha (rotate!\
    \ alpha 8))\n          (set! alpha (rotate! alpha 9))\n          (set! alpha (rotate!\
    \ alpha 10))\n          (set! alpha (rotate! alpha 11))\n          (set! alpha\
    \ (rotate! alpha 12))\n          (set! alpha (rotate! alpha 13))\n          (set!\
    \ alpha (rotate! alpha 14))\n          (set! alpha (rotate! alpha 15))\n     \
    \     (set! alpha (rotate! alpha 16))\n          (set! alpha (rotate! alpha 17))\n\
    \          (set! alpha (rotate! alpha 18))\n          (set! alpha (rotate! alpha\
    \ 19))\n          (set! alpha (rotate! alpha 20))\n          (set! alpha (rotate!\
    \ alpha 21))\n          (set! alpha (rotate! alpha 22))\n          (set! alpha\
    \ (rotate! alpha 23))\n          (set! alpha (rotate! alpha 24))\n          (set!\
    \ alpha (rotate! alpha 25))\n          (set! alpha (rotate! alpha 26))\n     \
    \     (set! alpha (rotate! alpha 27))\n          (set! alpha (rotate! alpha 28))\n\
    \          (set! alpha (rotate! alpha 29))\n          (set! alpha (rotate! alpha\
    \ 30))\n          (set! alpha (rotate! alpha 31))\n          (set! alpha (rotate!\
    \ alpha 32))\n          (set! alpha (rotate! alpha 33))\n          (set! alpha\
    \ (rotate! alpha 34", "  (let ((alpha (make-array 26)))\n    (set! alpha (rotate!\
    \ alpha 2 #\\A))\n    (set! alpha (rotate! alpha 2 #\\B))\n    (set! alpha (rotate!\
    \ alpha 2 #\\C))\n    (set! alpha (rotate! alpha 2 #\\D))\n    (set! alpha (rotate!\
    \ alpha 2 #\\E))\n    (set! alpha (rotate! alpha 2 #\\F))\n    (set! alpha (rotate!\
    \ alpha 2 #\\G))\n    (set! alpha (rotate! alpha 2 #\\H))\n    (set! alpha (rotate!\
    \ alpha 2 #\\I))\n    (set! alpha (rotate! alpha 2 #\\J))\n    (set! alpha (rotate!\
    \ alpha 2 #\\K))\n    (set! alpha (rotate! alpha 2 #\\L))\n    (set! alpha (rotate!\
    \ alpha 2 #\\M))\n    (set! alpha (rotate! alpha 2 #\\N))\n    (set! alpha (rotate!\
    \ alpha 2 #\\O))\n    (set! alpha (rotate! alpha 2 #\\P))\n    (set! alpha (rotate!\
    \ alpha 2 #\\Q))\n    (set! alpha (rotate! alpha 2 #\\R))\n    (set! alpha (rotate!\
    \ alpha 2 #\\S))\n    (set! alpha (rotate! alpha 2 #\\T))\n    (set! alpha (rotate!\
    \ alpha 2 #\\U))\n    (set! alpha (rotate! alpha 2 #\\V))\n    (set! alpha (rotate!\
    \ alpha 2 #\\W))\n    (set! alpha (rotate! alpha 2 #\\X))\n    (set! alpha (rotate!\
    \ alpha 2 #\\Y))\n    (set! alpha (rotate! alpha 2 #\\Z))\n    (set! alpha (rotate!\
    \ alpha 2 #\\0))\n    (set! alpha (rotate! alpha 2 #\\1))\n    (set! alpha (rotate!\
    \ alpha 2 #\\2))\n    (set! alpha (rotate! alpha 2 #\\3))\n    (set! alpha (rotate!\
    \ alpha 2 #\\4))\n    (set! alpha (rotate! alpha 2 #\\5))\n    (set! alpha (rotate!\
    \ alpha 2 #\\6))\n    (set! alpha (rotate! alpha 2 #\\7))\n    (set! alpha (rotate!\
    \ alpha 2 #\\8))\n    (set! alpha (rotate! alpha 2 #\\9))\n    (set! alpha (rotate!\
    \ alpha 2 ", "  (let ((alpha (make-alphabet (length s))))\n    (define (rotate\
    \ x y)\n      (cond ((= y 0) x)\n            ((= y 1) (cons alpha (rotate (first\
    \ x) (sub1 y))))\n            (else (cons (rotate (first x) (sub1 y)) (rotate\
    \ (first x) (sub1 y))))))\n    (rotate s (sub1 s))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0 to 26\n          for j from 0 to 26\n          when (char=? c alpha (+ i j))\n\
    \          collect (rotate-char (char-code c) (+ i j))))\n  ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((char (char-code (char s i))))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char", "  (cond\n    [(empty? s) \"\"]\n    [(equal? (first s) \"A\") (cons\
    \ (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"B\") (cons (first s)\
    \ (encrypt (rest s)))]\n    [(equal? (first s) \"C\") (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) \"D\") (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) \"E\") (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) \"F\") (cons (first s) (encrypt (rest s)))]\n    [else (cons (first\
    \ s) (encrypt (rest s)))]))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (cond [(empty? s) \"\"]\n        [else (cons (char->integer (first\
    \ s)) (encrypt (rest s)))]))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha (- (length s) i)))\n          (set! alpha (rotate! alpha (- (length s)\
    \ i))))\n    (string-append (map char->string alpha) s)))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha 1))\n       \
    \   (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 3))\n\
    \          (set! alpha (rotate! alpha 4))\n          (set! alpha (rotate! alpha\
    \ 5))\n          (set! alpha (rotate! alpha 6))\n          (set! alpha (rotate!\
    \ alpha 7))\n          (set! alpha (rotate! alpha 8))\n          (set! alpha (rotate!\
    \ alpha 9))\n          (set! alpha (rotate! alpha 10))\n          (set! alpha\
    \ (rotate! alpha 11))\n          (set! alpha (rotate! alpha 12))\n          (set!\
    \ alpha (rotate! alpha 13))\n          (set! alpha (rotate! alpha 14))\n     \
    \     (set! alpha (rotate! alpha 15))\n          (set! alpha (rotate! alpha 16))\n\
    \          (set! alpha (rotate! alpha 17))\n          (set! alpha (rotate! alpha\
    \ 18))\n          (set! alpha (rotate! alpha 19))\n          (set! alpha (rotate!\
    \ alpha 20))\n          (set! alpha (rotate! alpha 21))\n          (set! alpha\
    \ (rotate! alpha 22))\n          (set! alpha (rotate! alpha 23))\n          (set!\
    \ alpha (rotate! alpha 24))\n          (set! alpha (rotate! alpha 25))\n     \
    \     (set! alpha (rotate! alpha 26))\n          (set! alpha (rotate! alpha 27))\n\
    \          (set! alpha (rotate! alpha 28))\n          (set! alpha (rotate! alpha\
    \ 29))\n          (set! alpha (rotate! alpha 30))\n          (set! alpha (rotate!\
    \ alpha 31))\n          (set! alpha (rotate! alpha 32))\n          (set! alpha\
    \ (rotate! alpha 33))\n          (set! alpha (rotate! alpha 34", "  (cond [(empty?\
    \ s) \"\"]\n        [(equal? (first s) \"A\") (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) \"B\") (cons (first s) (encrypt (rest s)))]\n    \
    \    [(equal? (first s) \"C\") (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) \"D\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) \"E\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) \"\
    F\") (cons (first s) (encrypt (rest s)))]\n        [else (cons (first s) (encrypt\
    \ (rest s)))]))\n", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n\
    \    (loop for c across s\n          for i from 0 to 26\n          for j from\
    \ 0 to 26\n          when (char=? c alpha)\n          collect (rotate-char (char-code\
    \ c) i j))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n   \
    \ (loop for c across s\n          for i from 0 to 26\n          for j from 0 to\
    \ 26\n          when (char=? c alpha)\n          do (set! alpha (rotate! alpha\
    \ j i)))\n    (string-append (make-string 26 :initial-element #\\a) \n       \
    \           (make-string 26 :initial-element #\\z))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for c across s\n          for i from\
    \ 0\n          for j from (- i 2)\n          for k from (- j 2)\n          when\
    \ (char=? (char-code c) alpha)\n          collect (rotate-char (char-code c) i\
    \ j k))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          ", "  (let ((alpha\
    \ (make-array 26)))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (rotate! alpha (- (char-code (char s i)) 26)))\n      (set! alpha (rotate! alpha\
    \ (- (char-code (char s i)) 26))))\n    (string-append (make-string 26) (map char->string\
    \ alpha))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let\
    \ loop ((s s)\n               (alpha alpha))\n      (cond\n        ((null? s)\
    \ (list s))\n        ((char-alphabetic? s) (cons (char-alphabetic? s) alpha))\n\
    \        (else (loop (substring s 0 (char-index (char-alphabetic? s) alpha))\n\
    \                   (rotate-alphabetic alpha 2))))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26)))\n    (set! alpha (rotate! alpha 'A))\n    (set! alpha (rotate!\
    \ alpha 'B))\n    (set! alpha (rotate! alpha 'C))\n    (set! alpha (rotate! alpha\
    \ 'D))\n    (set! alpha (rotate! alpha 'E))\n    (set! alpha (rotate! alpha 'F))\n\
    \    (set! alpha (rotate! alpha 'G))\n    (set! alpha (rotate! alpha 'H))\n  \
    \  (set! alpha (rotate! alpha 'I))\n    (set! alpha (rotate! alpha 'J))\n    (set!\
    \ alpha (rotate! alpha 'K))\n    (set! alpha (rotate! alpha 'L))\n    (set! alpha\
    \ (rotate! alpha 'M))\n    (set! alpha (rotate! alpha 'N))\n    (set! alpha (rotate!\
    \ alpha 'O))\n    (set! alpha (rotate! alpha 'P))\n    (set! alpha (rotate! alpha\
    \ 'Q))\n    (set! alpha (rotate! alpha 'R))\n    (set! alpha (rotate! alpha 'S))\n\
    \    (set! alpha (rotate! alpha 'T))\n    (set! alpha (rotate! alpha 'U))\n  \
    \  (set! alpha (rotate! alpha 'V))\n    (set! alpha (rotate! alpha 'W))\n    (set!\
    \ alpha (rotate! alpha 'X))\n    (set! alpha (rotate! alpha 'Y))\n    (set! alpha\
    \ (rotate! alpha 'Z))\n    (set! alpha (rotate! alpha 'a'))\n    (set! alpha (rotate!\
    \ alpha 'b'))\n    (set! alpha (rotate! alpha 'c'))\n    (set! alpha (rotate!\
    \ alpha 'd'))\n    (set! alpha (rotate! alpha 'e'))\n    (set! alpha (rotate!\
    \ alpha 'f'))\n    (set! alpha (rotate! alpha 'g'))\n    (set! alpha (rotate!\
    \ alpha 'h'))\n    (set! alpha (rotate! alpha 'i'))\n    (set! alpha (rotate!\
    \ alpha 'j'))\n    (set! alpha (rotate! alpha 'k'))\n    (set! alpha (rotate!\
    \ alpha 'l'))\n    (set! alpha (rotate! alpha 'm'))\n    (set! alpha (rotate!\
    \ alpha 'n'))\n    (set! alpha (rotate! alpha 'o'))\n    (set! alpha (rotate!\
    \ alpha 'p'))\n", "  (let ((alpha (make-alphabet (length s))))\n    (lambda (x)\n\
    \      (let ((alpha (make-alphabet (length s))))\n        (set! alpha (rotate-alphabet\
    \ alpha x))\n        (make-string (reverse (map alpha (string->list s))))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! alpha (rotate", "  (let ((alpha (make-alphabet (length s))))\n    (let\
    \ loop ((i 0))\n      (cond\n        ((= i 0) (append alpha (list #\\space)))\n\
    \        ((char-alphabet (char alpha (+ i 1))) (append alpha (list #\\space)))\n\
    \        (else (append alpha (list (char alpha (+ i 1)))))))\n    (loop (length\
    \ s))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-alphabet (length\
    \ s))))\n    (let loop ((i 0) (alpha (make-alphabet (length s))))\n      (if (<\
    \ i length)\n          (let ((alpha (make-alphabet (length s))))\n           \
    \ (set! alpha (rotate-alphabet alpha (substring alpha (+ i 1) (+ i 1))))\n   \
    \         (loop (+ i 1) alpha))\n          (set! alpha (rotate-alphabet alpha\
    \ (substring alpha (+ i 1) (+ i 1))))\n          (loop (+ i 1) alpha))))\n   \
    \ (map char->string alpha)))\n", "  (let ((alpha (make-alphabet (length s))))\n\
    \    (define (shift a b)\n      (cond ((= b 0) a)\n            ((= b 1) (cons\
    \ b a))\n            (else (cons (car a) (shift (cdr a) (b - 1))))))\n    (map\
    \ (lambda (c) (shift alpha (char-index c alpha))) s))\n  ", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (lambda (x)\n      (let ((alpha (make-alphabet (length s))))\n\
    \        (set! alpha (rotate-alphabet alpha x))\n        (make-string (reverse\
    \ (map alpha (string->list s)))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (cond [(empty? s) \"\"]\n        [(equal? (first s) (last)) (cons (first s)\
    \ (encrypt (rest s)))]\n        [else (cons (first s) (encrypt (rotate (first\
    \ s) (second s))))]))\n", "  (let ((alpha (make-array 26)))\n    (loop for i from\
    \ 0 to (length s) do\n      (set! alpha (subarray alpha 0 (+ i 26)))\n      (set!\
    \ alpha (subarray alpha (+ i 26) (+ i 26)))\n      (set! alpha (subarray alpha\
    \ 0 (+ i 26)))\n      (set! alpha (subarray alpha (+ i 26) (+ i 26))))\n    (string-append\
    \ (substring s 0 26) (substring s 26 26))))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n        \
    \  (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (cond [(empty?\
    \ s) \"\"]\n        [(empty? (rest s)) \"\"]\n        [else (cons (first s) (encrypt\
    \ (rest s)))]))\n", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n\
    \    (loop for c across s\n          for i from 0\n          for j from (- i 2)\n\
    \          for k from (- j 2)\n          for l from (- k 2)\n          for m from\
    \ (- l 2)\n          for n from (- m 2)\n          for o from (- n 2)\n      \
    \    for p from (- o 2)\n          for q from (- p 2)\n          for r from (-\
    \ q 2)\n          for s from (- r 2)\n          for t from (- s 2)\n         \
    \ for u from (- t 2)\n          for v from (- u 2)\n          for w from (- v\
    \ 2)\n          for x from (- w 2)\n          for y from (- x 2)\n          for\
    \ z from (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n\
    \          for w from (- v 2)\n          for x from (- w 2)\n          for y from\
    \ (- x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n      \
    \    for v from (- u 2)\n          for w from (- v 2)\n          for x from (-\
    \ w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n         \
    \ for u from (- z 2)\n          for v from (- u 2)\n          for w from (- v\
    \ 2)\n          for x from (- w 2)\n          for y from (- x 2)\n          for\
    \ z from (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n\
    \          for w from (- v 2)\n          for x from (- w 2)\n          for y from\
    \ (- x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n      \
    \    for v from (- u 2)\n          for w from (- v 2)\n          for x from (-\
    \ w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n         \
    \ for u from (- z 2)\n          for v from (- u 2)\n          for w from (- v\
    \ 2)\n          for x from (- w 2)\n          for y from (- x 2)\n          for\
    \ z from (- y 2)\n          for u from (- z ", "  (let ((alpha (make-array 26)))\n\
    \    (define (rotate-letter letter)\n      (let ((alpha-index (char-code letter)))\n\
    \        (set! alpha (assoc alpha-index alpha))\n        (set! alpha-index (-\
    \ alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n        (set!\
    \ alpha-index (- alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n\
    \        (set! alpha-index (- alpha-index 26))\n        (set! alpha (assoc alpha-index\
    \ alpha))\n        (set! alpha-index (- alpha-index 26))\n        (set! alpha\
    \ (assoc alpha-index alpha))\n        (set! alpha-index (- alpha-index 26))\n\
    \        (set! alpha (assoc alpha-index alpha))\n        (set! alpha-index (-\
    \ alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n        (set!\
    \ alpha-index (- alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n\
    \        (set! alpha-index (- alpha-index 26))\n        (set! alpha (assoc alpha-index\
    \ alpha))\n        (set! alpha-index (- alpha-index 26))\n        (set! alpha\
    \ (assoc alpha-index alpha))\n        (set! alpha-index (- alpha-index 26))\n\
    \        (set! alpha (assoc alpha-index alpha))\n        (set! alpha-index (-\
    \ alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n        (set!\
    \ alpha-index (- alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n\
    \        (set! alpha-index (- alpha-index 26))\n        (set! alpha (assoc alpha-index\
    \ alpha))\n        (set! alpha-index (- alpha-index 26))\n        (set! alpha\
    \ (assoc alpha-index alpha))\n        (set! alpha-index (- alpha-index 26))\n\
    \        (set! alpha (assoc alpha-index alpha))\n        (set! alpha-index (-\
    \ alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n        (set!\
    \ alpha-index (- alpha-index 26))\n        (set! alpha (assoc alpha-index alpha))\n\
    \        (set! alpha-index (- ", "  (cond [(empty? s) \"\"]\n        [(equal?\
    \ (first s) (first '())) \"\"]\n        [else (append (encrypt (substring s 0\
    \ (- (length s) 2))) (cons (first s) (encrypt (substring s (+ 0 (- (length s)\
    \ 2)))))]))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (let loop ((i 0) (acc \"\"))\n      (if (< i alpha)\n   \
    \       (loop (+ i 1) (cons (char->int (char s (+ i 1))) (cons (char->int (char\
    \ s (- i 1))) (cons (char->int (char s (+ i 1))) (cons (char->int (char s (- i\
    \ 1))) (cons (char->int (char s (+ i 1))) (cons (char->int (char s (- i 1))) (cons\
    \ (char->int (char s (+ i 1))) (cons (char->int (char s (- i 1))) (cons (char->int\
    \ (char s (+ i 1))) (cons (char->int (char s (- i 1))) (cons (char->int (char\
    \ s (+ i 1))) (cons (char->int (char s (- i 1))) (cons (char->int (char s (+ i\
    \ 1))) (cons (char->int (char s (- i 1))) (cons (char->int (char s (+ i 1))) (cons\
    \ (char->int (char s (- i 1))) (cons (char->int (char s (+ i 1))) (cons (char->int\
    \ (char s (- i 1))) (cons (char->int (char s (+ i 1))) (cons (char->int (char\
    \ s (- i 1))) (cons (char->int (char s (+ i 1))) (cons (char->int (char s (- i\
    \ 1))) (cons (char->int (char s (+ i 1))) (cons (char->int (char s (- i 1))) (cons\
    \ (char->int (char s (+ i 1))) (cons (char->int (char s (- i 1))) (cons (char->int\
    \ (char s (+ i 1))) (cons (char->int (char s (- i 1))) (cons (char->int (char\
    \ s (+ i 1))) (cons (char->int (char s (- i 1))) (cons (char->int (char s (+ i\
    \ 1))) (cons (char->int (char s (- i 1))) (cons (char->int (char s (+ i 1))) (cons\
    \ (char->int (char s (- i 1))) (cons (char->int (char s (+ i 1))) (cons (char->int\
    \ (char s (- i 1))) (cons (char->int (char s (+ i 1))) (cons (char->int (char\
    \ s (- i 1))) (cons (char->int (char s (+ i 1))) (cons (char->int (", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n\
    \    (loop for c across s\n          for i from 0 to 26\n          for j from\
    \ 0 to 26\n          when (char=? (char-code c) alpha (+ i j))\n          collect\
    \ (+ (char-code c) (* 2 j)))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set! alpha\
    \ (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n          (set!\
    \ alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n     \
    \     (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n\
    \          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha\
    \ -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate!\
    \ alpha -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha\
    \ (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n         \
    \ (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n\
    \          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha\
    \ -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate!\
    \ alpha -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha\
    \ (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n         \
    \ (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n\
    \          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha\
    \ -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate!\
    \ alpha -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha\
    \ (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n         \
    \ (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n\
    \          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for c across s\n          for i from 0 to 26\n          for\
    \ j from 0 to 26\n          when (char=? (char-code c) alpha (+ i j))\n      \
    \    collect (rotate-char (char-code c) (+ i j)))))\n", "  (cond [(empty? s) \"\
    \"]\n        [(equal? (first s) 'a) (cons (first s) (encrypt (rest s)))]\n   \
    \     [(equal? (first s) 'b) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'c) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'd) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'e)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'f) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'g) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'i) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'j) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'k) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'l) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'm)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'n) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'o) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'q) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'r) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 's) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 't) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'u)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'v) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'w) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'x) (cons (first s) (encrypt (rest s)))]",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (let loop ((i 0))\n      (cond\n        ((= i 0) (append\
    \ alpha (list 'z)))\n        ((char-alphabet (char s i)) (append alpha (list (char-alphabet\
    \ (char s i))))))\n      (loop (+ i 1)))))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((char (char-code (substring s i i))))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) by 2\n          for c from 0 to 26\n          when (char=? (char-code\
    \ (substring s i i + 1) c) alpha)\n          collect (substring s i i + 1) into\
    \ s\n          finally (return s))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) by 2\n          for j from 0 to\
    \ (length s) by 2\n          for k from 0 to (length s) by 2\n          when (=\
    \ (mod i 26) (mod j 26) (mod k 26))\n          do (set! alpha (rotate! alpha i\
    \ j k)))\n    (string-append (map (lambda (c) (char c alpha)) s))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for c across s\n\
    \          for i from 0\n          for j from (- i 2)\n          for k from (-\
    \ j 2)\n          when (char=? c alpha)\n          collect (cond ((char=? (char-after\
    \ c alpha) alpha) c)\n                       (else (cond ((char=? (char-after\
    \ c alpha) (char-before c alpha)) (cons c (encrypt (substring alpha (+ i 1) (+\
    \ j 1))))\n                                   (else (cons c (encrypt (substring\
    \ alpha (+ i 1) (+ j 1)))))))))))\n", "  (let ((alpha (make-alphabet (length s))))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((alpha (make-alphabet (length\
    \ s))))\n        (loop for j from 0 to (length s) do\n          (set! alpha (rotate-alphabet\
    \ alpha j))\n          (set! alpha (rotate-alphabet alpha (+ j 1))))\n       \
    \ (set! alpha (rotate-alphabet alpha (+ i 1))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate-alphabet alpha (+ i 1))))\n    (loop for i\
    \ from 0 to (length s) do\n      (set! alpha (rotate-alphabet alpha (+ i 1))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-alphabet alpha\
    \ (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (rotate-alphabet alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (rotate-alphabet alpha (+ i 1))))\n    (loop for i from 0 to\
    \ (length s) do\n      (set! alpha (rotate-alphabet alpha (+ i 1))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate-alphabet alpha (+ i\
    \ 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (rotate-alphabet alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (rotate-alphabet alpha (+ i 1))))\n    (loop for i from 0 to\
    \ (length s) do\n      (set! alpha (rotate-alphabet alpha (+ i 1))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate-alphabet alpha (+ i\
    \ 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-alphabet\
    \ alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (rotate-alphabet alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (", "  (let ((alpha (make-array 26)))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (set! alpha (rotate! alpha\
    \ i))\n      (set! alpha (rotate! alpha i))\n      (", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0 to 26\n          for j from 0 to 26\n          when (char=? c alpha)\n   \
    \       collect (cond ((char=? (char-after c alpha) alpha) \n                \
    \         (char-before c alpha))\n                       (else c)))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) by 2\n          for j from 0 to (length s) by 2\n          collect (substring\
    \ alpha (+ (* i 2) (* j 2))\n                           (+ (* i 2) (* j 2))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set", "  (cond [(empty? s) \"\"]\n        [else (cons\
    \ (char->integer (first s)) (encrypt (rest s)))]))\n", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (loop for i from 0 to (length s) do\n          (set! alpha\
    \ (rotate-alphabet alpha (substring s i (+ i 2))))\n          (set! s (substring\
    \ s (+ i 1) (+ i 2)))\n          (set! i (+ i 2))\n          (set! alpha (rotate-alphabet\
    \ alpha (substring s i (+ i 2))))\n          (set! s (substring s (+ i 1) (+ i\
    \ 2)))\n          (set! i (+ i 2))\n          (set! alpha (rotate-alphabet alpha\
    \ (substring s i (+ i 2))))\n          (set! s (substring s (+ i 1) (+ i 2))))\n\
    \    (concat s alpha)))\n", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-alphabet (length s))))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate-alphabet alpha (+ i 2))))\n    (make-string\
    \ s (lambda (x) (char-code (substring alpha (+ x 0)))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate! alpha 2))\n\
    \          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for c across s\n          for i from 0 to 26\n          for j from 0 to 26\n\
    \          when (char=? c alpha)\n          collect (cond ((char=? c #\\z) (concat\
    \ \"z\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=? c\
    \ #\\a) (concat \"a\" (substring alpha (+ i 2) (+ j 2))))\n                  \
    \     ((char=? c #\\b) (concat \"b\" (substring alpha (+ i 2) (+ j 2))))\n   \
    \                    ((char=? c #\\c) (concat \"c\" (substring alpha (+ i 2) (+\
    \ j 2))))\n                       ((char=? c #\\d) (concat \"d\" (substring alpha\
    \ (+ i 2) (+ j 2))))\n                       ((char=? c #\\e) (concat \"e\" (substring\
    \ alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\f) (concat \"\
    f\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\\
    g) (concat \"g\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=?\
    \ c #\\h) (concat \"h\" (substring alpha (+ i 2) (+ j 2))))\n                \
    \       ((char=? c #\\i) (concat \"i\" (substring alpha (+ i 2) (+ j 2))))\n \
    \                      ((char=? c #\\j) (concat \"j\" (substring alpha (+ i 2)\
    \ (+ j 2))))\n                       ((char=? c #\\k) (concat \"k\" (substring\
    \ alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\l) (concat \"\
    l\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\\
    m) (concat \"m\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=?\
    \ c #\\n) (concat \"n\" (substring alpha (+ i 2) (+ j 2))))\n                \
    \       ((char=? c #\\o) (concat \"o\" (substring alpha (+ i 2) (+ j 2))))\n \
    \                      ((char=? c #\\p) (concat \"p\" (substring ", "  (let ((alpha\
    \ (make-alphabet (length s))))\n    (loop for i from 0 to (length s) do\n    \
    \      (set! alpha (rotate-alphabet alpha (substring s i i)))\n          (set!\
    \ alpha (rotate-alphabet alpha (substring s i i)))\n          (set! alpha (rotate-alphabet\
    \ alpha (substring s i i)))\n          (set! alpha (rotate-alphabet alpha (substring\
    \ s i i)))\n          (set! alpha (rotate-alphabet alpha (substring s i i))))\n\
    \    (make-string s (lambda (x) (char (char-code x) alpha)))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for c across\
    \ s\n          for i from 0 to 26\n          for j from 0 to 26\n          when\
    \ (char=? c alpha)\n          collect (cond ((char=? c #\\A) (concat \"a\" (substring\
    \ alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\B) (concat \"\
    b\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\\
    C) (concat \"c\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=?\
    \ c #\\D) (concat \"d\" (substring alpha (+ i 2) (+ j 2))))\n                \
    \       ((char=? c #\\E) (concat \"e\" (substring alpha (+ i 2) (+ j 2))))\n \
    \                      ((char=? c #\\F) (concat \"f\" (substring alpha (+ i 2)\
    \ (+ j 2))))\n                       ((char=? c #\\G) (concat \"g\" (substring\
    \ alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\H) (concat \"\
    h\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\\
    I) (concat \"i\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=?\
    \ c #\\J) (concat \"j\" (substring alpha (+ i 2) (+ j 2))))\n                \
    \       ((char=? c #\\K) (concat \"k\" (substring alpha (+ i 2) (+ j 2))))\n \
    \                      ((char=? c #\\L) (concat \"l\" (substring alpha (+ i 2)\
    \ (+ j 2))))\n                       ((char=? c #\\M) (concat \"m\" (substring\
    \ alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\N) (concat \"\
    n\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=? c #\\\
    O) (concat \"o\" (substring alpha (+ i 2) (+ j 2))))\n                       ((char=?\
    \ c #\\P) (concat \"p\" (substring alpha (+ i 2) (+ j 2))))\n                \
    \       ((char=? c #\\Q) (concat \"q", "  (let ((alpha (make-alphabet (length\
    \ s))))\n    (loop [s s alpha alpha-index 0]\n      (cond\n        ((null? s)\
    \ (make-string 0 0))\n        ((equal? (char-code (first s)) (char-code (first\
    \ alpha)))\n         (string-append (make-string (+ alpha-index 2) (+ alpha-index\
    \ 2))\n                        (make-string (+ alpha-index 1) (+ alpha-index 1)))\n\
    \         (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n \
    \                       (make-string (+ alpha-index 1) (+ alpha-index 1)))\n \
    \        (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n  \
    \                      (make-string (+ alpha-index 1) (+ alpha-index 1)))\n  \
    \       (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n   \
    \                     (make-string (+ alpha-index 1) (+ alpha-index 1)))\n   \
    \      (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n    \
    \                    (make-string (+ alpha-index 1) (+ alpha-index 1)))\n    \
    \     (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n     \
    \                   (make-string (+ alpha-index 1) (+ alpha-index 1)))\n     \
    \    (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n      \
    \                  (make-string (+ alpha-index 1) (+ alpha-index 1)))\n      \
    \   (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n       \
    \                 (make-string (+ alpha-index 1) (+ alpha-index 1)))\n       \
    \  (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n        \
    \                (make-string (+ alpha-index 1) (+ alpha-index 1)))\n        \
    \ (string-append (make-string (+ alpha-index 2) (+ alpha-index 2))\n         \
    \               (make-string (+ alpha-index 1) (+ alpha-index 1)))\n         (string-append\
    \ (make-string (+ alpha-index 2) (+ alpha-index 2))\n                        (make-string\
    \ (+ alpha-index 1) (+ alpha-index 1)))\n         (string-append (make-string\
    \ (+ alpha-index 2) (+ alpha-index 2))\n                        (make-string (+\
    \ alpha-index 1) (+ alpha-index 1)))\n         (string-append (make-string (+\
    \ alpha-index 2) (+ alpha-index 2))\n                        (make-string (+ alpha-index\
    \ 1) (+ alpha-index 1)))\n         (string-append (make-string (+ alpha-index\
    \ 2) (+ alpha-index 2))\n                        (make-string (+ alpha-index 1) ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (define (shift a b)\n      (set! alpha (rotate! alpha b))\n      (set! alpha\
    \ (rotate! alpha a))\n      alpha)\n    (let ((c (char-code (first s))))\n   \
    \   (set! alpha (shift c 2))\n      (set! alpha (shift c 1))\n      (set! alpha\
    \ (shift c 0))\n      (set! alpha (shift c 3))\n      (set! alpha (shift c 4))\n\
    \      (set! alpha (shift c 5))\n      (set! alpha (shift c 6))\n      (set! alpha\
    \ (shift c 7))\n      (set! alpha (shift c 8))\n      (set! alpha (shift c 9))\n\
    \      (set! alpha (shift c 10))\n      (set! alpha (shift c 11))\n      (set!\
    \ alpha (shift c 12))\n      (set! alpha (shift c 13))\n      (set! alpha (shift\
    \ c 14))\n      (set! alpha (shift c 15))\n      (set! alpha (shift c 16))\n \
    \     (set! alpha (shift c 17))\n      (set! alpha (shift c 18))\n      (set!\
    \ alpha (shift c 19))\n      (set! alpha (shift c 20))\n      (set! alpha (shift\
    \ c 21))\n      (set! alpha (shift c 22))\n      (set! alpha (shift c 23))\n \
    \     (set! alpha (shift c 24))\n      (set! alpha (shift c 25))\n      (set!\
    \ alpha (shift c 26))\n      (set! alpha (shift c 27))\n      (set! alpha (shift\
    \ c 28))\n      (set! alpha (shift c 29))\n      (set! alpha (shift c 30))\n \
    \     (set! alpha (shift c 31))\n      (set! alpha (shift c 32))\n      (set!\
    \ alpha (shift c 33))\n      (set! alpha (shift c 34))\n      (set! alpha (shift\
    \ c 35))\n      (set! alpha (shift c 36))\n      (set! alpha (shift c 37))\n \
    \     (set! alpha (shift c 38))\n      (set! alpha (shift c 39))\n      (set!\
    \ alpha (shift c 40))\n      (set! alpha (shift c 41))\n      (set! alpha (shift\
    \ c 42))\n      (set! alpha (shift c 43))\n      (set! alpha (shift c 44))\n \
    \     (set! alpha (shift c 45))\n      (set! alpha (", "  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (rotate! alpha 'A 'Z 'N 'O 'P 'R 'S 'T 'U 'V 'W 'X 'Y\
    \ 'Z))\n    (string-append (map alpha (string->list s)))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\A)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n  \
    \        (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i ", "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i\
    \ 0))\n      (cond\n        ((= i 0) (append alpha (list #\\space)))\n       \
    \ ((char-alphabet (char alpha (+ i 2))) \n         (append alpha (list #\\space)))\n\
    \        (else (append alpha (list char (char alpha (+ i 2))))\n         (loop\
    \ (+ i 1))))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for c across s\n          for i from 0 to 26\n          for j from\
    \ 0 to 26\n          when (char=? c alpha (+ i j))\n          collect (char alpha\
    \ (+ i j)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n\
    \          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set! alpha\
    \ (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n          (set!\
    \ alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n     \
    \     (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n\
    \          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha\
    \ -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate!\
    \ alpha -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha\
    \ (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n         \
    \ (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n\
    \          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha\
    \ -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate!\
    \ alpha -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha\
    \ (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n         \
    \ (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n\
    \          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha\
    \ -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate!\
    \ alpha -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha\
    \ (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n         \
    \ (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n\
    \          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0 to 26\n          for\
    \ j from 0 to 26\n          when (char=? (char-code c) alpha (+ i j))\n      \
    \    collect (rotate-char (char-code c) (+ i j)))))\n", "  (cond [(empty? s) \"\
    \"]\n        [(equal? (first s) 'a) (cons (first s) (encrypt (rest s)))]\n   \
    \     [(equal? (first s) 'b) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'c) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'd) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'e)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'f) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'g) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'i) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'j) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'k) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'l) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'm)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'n) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'o) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'q) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'r) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 's) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 't) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'u)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'v) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'w) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'x) (cons (first s) (encrypt (rest s)))]",
  "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for c across s\n          for i from\
    \ 0\n          for j from (- i 2)\n          for k from (- j 2)\n          when\
    \ (char=? c alpha)\n          collect (rotate-char c i j k))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ by 2\n          for j from 0 to (length s) by 2\n          when (= (substring\
    \ s i j) \"\")\n          do (set! alpha (rotate! alpha #\\A))\n          do (set!\
    \ alpha (rotate! alpha #\\B))\n          do (set! alpha (rotate! alpha #\\C))\n\
    \          do (set! alpha (rotate! alpha #\\D))\n          do (set! alpha (rotate!\
    \ alpha #\\E))\n          do (set! alpha (rotate! alpha #\\F))\n          do (set!\
    \ alpha (rotate! alpha #\\G))\n          do (set! alpha (rotate! alpha #\\H))\n\
    \          do (set! alpha (rotate! alpha #\\I))\n          do (set! alpha (rotate!\
    \ alpha #\\J))\n          do (set! alpha (rotate! alpha #\\K))\n          do (set!\
    \ alpha (rotate! alpha #\\L))\n          do (set! alpha (rotate! alpha #\\M))\n\
    \          do (set! alpha (rotate! alpha #\\N))\n          do (set! alpha (rotate!\
    \ alpha #\\O))\n          do (set! alpha (rotate! alpha #\\P))\n          do (set!\
    \ alpha (rotate! alpha #\\Q))\n          do (set! alpha (rotate! alpha #\\R))\n\
    \          do (set! alpha (rotate! alpha #\\S))\n          do (set! alpha (rotate!\
    \ alpha #\\T))\n          do (set! alpha (rotate! alpha #\\U))\n          do (set!\
    \ alpha (rotate! alpha #\\V))\n          do (set! alpha (rotate! alpha #\\W))\n\
    \          do (set! alpha (rotate! alpha #\\X))\n          do (set! alpha (rotate!\
    \ alpha #\\Y))\n          do (set! alpha (rotate! alpha #\\Z))\n          do (set!\
    \ alpha (rotate! alpha #\\0))\n          do (set! alpha (rotate! alpha #\\1))\n\
    \          do (set! alpha (rotate! alpha #\\2))\n          do (set! alpha (rotate!\
    \ alpha #\\3))\n          do (set! alpha (rotate! alpha #\\4))\n          do",
  "  (cond [(empty? s) \"\"]\n        [(equal? (first s) 'A) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'B) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'C) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'D) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'E) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'F) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'G)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'H) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'I) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'J) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'K) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'L) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'M) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'N) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'O)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'P) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'Q) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'R) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'S) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'T) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'U) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'V) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'W)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'X) (cons (first\
    \ s) (encrypt (rest s)))", "  (cond\n    [(empty? s) \"\"]\n    [(equal? (first\
    \ s) \"a\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"b\"\
    ) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"c\") (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) \"d\") (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) \"e\") (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) \"f\") (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) \"g\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s)\
    \ \"h\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"i\") (cons\
    \ (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"j\") (cons (first s)\
    \ (encrypt (rest s)))]\n    [(equal? (first s) \"k\") (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) \"l\") (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) \"m\") (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) \"n\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s)\
    \ \"o\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"p\") (cons\
    \ (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"q\") (cons (first s)\
    \ (encrypt (rest s)))]\n    [(equal? (first s) \"r\") (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) \"s\") (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) \"t\") (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) \"u\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s)\
    \ \"v\") (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) \"w\") (cons\
    \ (first s) (encrypt (rest ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate! alpha\
    \ -37))\n          (set! alph", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n\
    \      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array 26)))\n  \
    \  (loop for i from 0 to (length s) do\n      (set! alpha (rotate! alpha i))\n\
    \      (set! alpha (rotate! alpha (- (length s) i)))\n      (set! alpha (rotate!\
    \ alpha (- (length s) (- (length s) i))))\n      (set! alpha (rotate! alpha (-\
    \ (length s) (- (length s) (- (length s) i))))\n      (set! alpha (rotate! alpha\
    \ (- (length s) (- (length s) (- (length s) (- (length s) i))))))\n    (string-append\
    \ (make-string 1 #\\space) \n                  (make-string 1 #\\space) \n   \
    \               (make-string 1 #\\space) \n                  (make-string 1 #\\\
    space) \n                  (make-string 1 #\\space) \n                  (make-string\
    \ 1 #\\space) \n                  (make-string 1 #\\space) \n                \
    \  (make-string 1 #\\space) \n                  (make-string 1 #\\space) \n  \
    \                (make-string 1 #\\space) \n                  (make-string 1 #\\\
    space) \n                  (make-string 1 #\\space) \n                  (make-string\
    \ 1 #\\space) \n                  (make-string 1 #\\space) \n                \
    \  (make-string 1 #\\space) \n                  (make-string 1 #\\space) \n  \
    \                (make-string 1 #\\space) \n                  (make-string 1 #\\\
    space) \n                  (make-string 1 #\\space) \n                  (make-string\
    \ 1 #\\space) \n                  (make-string 1 #\\space) \n                \
    \  (make-string 1 #\\space) \n                  (make-string 1 #\\space) \n  \
    \                (make-string 1 #\\space) \n                  (make-string 1 #\\\
    space) \n                  (make-string 1 #\\space) \n                  (make-string\
    \ 1 #\\space) \n                  (make-string 1 #\\space) \n                \
    \  (make-string 1 #\\space) \n                  (make-string 1 #\\space) \n  \
    \                (make-string 1 #\\space) \n                  (make-string 1 #\\\
    space) \n                  (make-string 1 #\\space) \n                  (make-string\
    \ 1 #\\space) \n                  (make-string 1 #\\space) \n                \
    \  (make-string 1 #\\space) \n                  (make-string 1 #\\space) \n  \
    \                (make-string 1 #\\space) \n                  (make-string 1 #\\\
    space) \n                  (make-string ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (let ((c (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for c across s\n          for i from\
    \ 0 to 26\n          for j from 0 to 26\n          when (char=? c alpha (+ i j))\n\
    \          collect (rotate-char (char-code c) alpha (+ i j))))\n  ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((char (char-code (substring s i i))))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ", " \
    \ (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n          (let ((alpha (make-array 26 :initial-element #\\\
    A)))\n            (loop for j from 0 to (length s) do\n                  (set!\
    \ alpha (rotate! alpha j))\n                  (set! alpha (rotate! alpha (- i\
    \ 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n             \
    \     (set! alpha (rotate! alpha (- i 1)))\n                  (set! alpha (rotate!\
    \ alpha (- i 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n  \
    \                (set! alpha (rotate! alpha (- i 1)))\n                  (set!\
    \ alpha (rotate! alpha (- i 1)))\n                  (set! alpha (rotate! alpha\
    \ (- i 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n        \
    \          (set! alpha (rotate! alpha (- i 1)))\n                  (set! alpha\
    \ (rotate! alpha (- i 1)))\n                  (set! alpha (rotate! alpha (- i\
    \ 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n             \
    \     (set! alpha (rotate! alpha (- i 1)))\n                  (set! alpha (rotate!\
    \ alpha (- i 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n  \
    \                (set! alpha (rotate! alpha (- i 1)))\n                  (set!\
    \ alpha (rotate! alpha (- i 1)))\n                  (set! alpha (rotate! alpha\
    \ (- i 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n        \
    \          (set! alpha (rotate! alpha (- i 1)))\n                  (set! alpha\
    \ (rotate! alpha (- i 1)))\n                  (set! alpha (rotate! alpha (- i\
    \ 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n             \
    \     (set! alpha (rotate! alpha (- i 1)))\n                  (set! alpha (rotate!\
    \ alpha (- i 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n  \
    \                (set! alpha (rotate! alpha (- i 1)))\n                  (set!\
    \ alpha (rotate! alpha (- i 1)))\n                  (set! alpha (rotate! alpha\
    \ (- i 1)))\n                  (set! alpha (rotate! alpha (- i 1)))\n        \
    \          (set! alpha (rotate! alpha (- ", "  (cond\n    [(empty? s) \"\"]\n\
    \    [(equal? (first s) 'a) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'b) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'c)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'd) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'e) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'f) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'h) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'i)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'j) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'k) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'l) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'm) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'n) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'o)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'p) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'q) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'r) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 's) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 't) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'u)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'v) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'w) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'x) (cons (first s) (encrypt (rest s)))",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          for l from (- k 2)\n          for m from (- l 2)\n      \
    \    for n from (- m 2)\n          for o from (- n 2)\n          for p from (-\
    \ o 2)\n          for q from (- p 2)\n          for r from (- q 2)\n         \
    \ for s from (- r 2)\n          for t from (- s 2)\n          for u from (- t\
    \ 2)\n          for v from (- u 2)\n          for w from (- v 2)\n          for\
    \ x from (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n\
    \          for u from (- z 2)\n          for v from (- u 2)\n          for w from\
    \ (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n      \
    \    for z from (- y 2)\n          for u from (- z 2)\n          for v from (-\
    \ u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n         \
    \ for y from (- x 2)\n          for z from (- y 2)\n          for u from (- z\
    \ 2)\n          for v from (- u 2)\n          for w from (- v 2)\n          for\
    \ x from (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n\
    \          for u from (- z 2)\n          for v from (- u 2)\n          for w from\
    \ (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n      \
    \    for z from (- y 2)\n          for u from (- z 2)\n          for v from (-\
    \ u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n         \
    \ for y from (- x 2)\n          for z from (- y 2)\n          for u from (- z\
    \ 2)\n          for v from (- u 2)\n          for w from (- v 2)\n          for\
    \ x from (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n\
    \          for u from (- z ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set! alpha\
    \ (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n          (set!\
    \ alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n     \
    \     (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n\
    \          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha\
    \ -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate!\
    \ alpha -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha\
    \ (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n         \
    \ (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n\
    \          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha\
    \ -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate!\
    \ alpha -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha\
    \ (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n         \
    \ (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n\
    \          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha\
    \ -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate!\
    \ alpha -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha\
    \ (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n         \
    \ (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n\
    \          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n               (alpha alpha))\n      (cond ((null?\
    \ s) (list \"\"))\n            ((char= (first s) #\\a) (list \"a\"))\n       \
    \     ((char= (first s) #\\b) (list \"b\"))\n            ((char= (first s) #\\\
    c) (list \"c\"))\n            ((char= (first s) #\\d) (list \"d\"))\n        \
    \    ((char= (first s) #\\e) (list \"e\"))\n            ((char= (first s) #\\\
    f) (list \"f\"))\n            ((char= (first s) #\\g) (list \"g\"))\n        \
    \    ((char= (first s) #\\h) (list \"h\"))\n            ((char= (first s) #\\\
    i) (list \"i\"))\n            ((char= (first s) #\\j) (list \"j\"))\n        \
    \    ((char= (first s) #\\k) (list \"k\"))\n            ((char= (first s) #\\\
    l) (list \"l\"))\n            ((char= (first s) #\\m) (list \"m\"))\n        \
    \    ((char= (first s) #\\n) (list \"n\"))\n            ((char= (first s) #\\\
    o) (list \"o\"))\n            ((char= (first s) #\\p) (list \"p\"))\n        \
    \    ((char= (first s) #\\q) (list \"q\"))\n            ((char= (first s) #\\\
    r) (list \"r\"))\n            ((char= (first s) #\\s) (list \"s\"))\n        \
    \    ((char= (first s) #\\t) (list \"t\"))\n            ((char= (first s) #\\\
    v) (list \"v\"))\n            ((char= (first s) #\\w) (list \"w\"))\n        \
    \    ((char= (first s) #\\x) (list \"x\"))\n            ((char= (first s) #\\\
    y) (list \"y\"))\n            ((char= (first s) #\\z) (list \"z\"))\n        \
    \    ((char= (first s) #\\A) (list \"A\"))\n            ((char= (first s) #\\\
    B) (list \"B\"))\n            ((char= (first s) #\\C) (list \"C\"))\n        \
    \    ((char= (first s) #\\D) (list \"D\"))\n            ((char= (first s) #\\\
    E) (list \"E\"))", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n \
    \   (let loop ((i 0))\n      (cond\n        ((= i 26) (append alpha (list #\\\
    Z)))\n        (else (set! alpha (rotate! alpha i #\\A))\n               (loop\
    \ (+ i 1)))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n\
    \      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n\
    \      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n\
    \      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n\
    \      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n\
    \      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n\
    \      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n\
    \      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n\
    \      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n\
    \      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n\
    \      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n\
    \      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n\
    \      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n\
    \      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n\
    \      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n\
    \      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n\
    \      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n\
    \      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n\
    \      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n\
    \      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha -40",
  "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s) do\n     \
    \     (let ((char (char-code (substring s i i))))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate", "  (let ((alpha (make-alphabet (length s))))\n    (loop [s s\
    \ alpha alpha (make-alphabet (length s))]\n      (if (empty? s)\n          (make-string\
    \ 0)\n          (let ((char (car s))\n                (alpha (substring alpha\
    \ (length char))))\n            (set! alpha (substring alpha (length char))\n\
    \                  s (cdr s))\n            (set! alpha (substring alpha (length\
    \ char))\n                  alpha (substring alpha (length char)))\n         \
    \   (set! alpha (substring alpha (length char))\n                  alpha (substring\
    \ alpha (length char)))\n            (set! alpha (substring alpha (length char))\n\
    \                  alpha (substring alpha (length char)))\n            (set! alpha\
    \ (substring alpha (length char))\n                  alpha (substring alpha (length\
    \ char)))\n            (set! alpha (substring alpha (length char))\n         \
    \         alpha (substring alpha (length char)))\n            (set! alpha (substring\
    \ alpha (length char))\n                  alpha (substring alpha (length char)))\n\
    \            (set! alpha (substring alpha (length char))\n                  alpha\
    \ (substring alpha (length char)))\n            (set! alpha (substring alpha (length\
    \ char))\n                  alpha (substring alpha (length char)))\n         \
    \   (set! alpha (substring alpha (length char))\n                  alpha (substring\
    \ alpha (length char)))\n            (set! alpha (substring alpha (length char))\n\
    \                  alpha (substring alpha (length char)))\n            (set! alpha\
    \ (substring alpha (length char))\n                  alpha (substring alpha (length\
    \ char)))\n            (set! alpha (substring alpha (length char))\n         \
    \         alpha (substring alpha (length char)))\n            (set! alpha (substring\
    \ alpha (length char))\n                  alpha (substring alpha (length char)))\n\
    \            (set! alpha (substring alpha (length char))\n                  alpha\
    \ (substring alpha (length char)))\n            (set! alpha (substring alpha (length\
    \ char))\n                  alpha (substring alpha (length char)))\n         \
    \   (set! alpha (substring alpha (length char))\n                  alpha (substring\
    \ alpha (length char)))\n            (set! alpha (substring alpha (length char))\n\
    \                  alpha (substring alpha (length char)))\n            (set! alpha\
    \ (substring alpha (length char))\n                  alpha (substring alpha (length\
    \ char)))", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let\
    \ loop ((s s)\n               (alpha (make-array 26 :initial-element #\\a)))\n\
    \      (cond ((null? s) (append alpha (list #\\a)))\n            ((char=? (car\
    \ s) #\\a) (append alpha (list #\\b)))\n            (else (loop (cdr s) (append\
    \ alpha (list (char-code (car s))))))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-alphabet \"abcdefghijklmnopqrstuvwxyz\")))\n\
    \    (let loop ((s s)\n               (alpha (alpha-to-rotated alpha))\n     \
    \          (result '()))\n      (cond ((null? s) result)\n            ((char-alphabetic?\
    \ s)\n             (loop (substring s 0 (length s)) (alpha-to-rotated alpha) (cons\
    \ s (reverse result))))\n            (else\n             (loop (substring s 1\
    \ (length s)) (alpha-to-rotated (alpha-to-rotated alpha)) (cons s (reverse result))))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for c across s\n          for i from 0\n          for j from (- i 2)\n     \
    \     for k from (- j 2)\n          when (char=? c alpha)\n          collect (char\
    \ alpha (+ i j) (+ k 26))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n         \
    \ (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ by 2\n          for c from 0 to 26\n          for j from 0 to 26\n         \
    \ when (char=? (char-code (char s i c)) (char alpha (+ c j)))\n          collect\
    \ (char alpha (+ c j))))))\n", "  (let ((alpha (make-alphabet (length s))))\n\
    \    (define (rotate x y)\n      (cond [(< x y) alpha (rotate-left alpha (- x\
    \ y))]\n            [else alpha (rotate-right alpha (- x y))]))\n    (define (rotate-left\
    \ a x)\n      (cond [(< x 0) a]\n            [else (rotate-left (rotate-right\
    \ a x) 2)]))\n    (define (rotate-right a x)\n      (cond [(< x 0) a]\n      \
    \      [else (rotate-left a (- x 2))]))\n    (rotate-left alpha (length s))))\n",
  "  (let ((alpha (make-alphabet (length s))))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate! alpha i))\n          (set! s (string-append\
    \ s (char->string (car alpha)))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (define (enc-loop s alpha)\n      (cond\n        ((null? s) (append\
    \ alpha (list #\\a)))\n        ((char=? (car s) #\\a) (enc-loop (cdr s) alpha))\n\
    \        (else (cons (char->integer (char->symbol s)) (enc-loop (cdr s) alpha))))\n\
    \      (enc-loop s alpha)))\n  (enc-loop s alpha))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for c across s\n          for i from\
    \ 0 to 26\n          for j from 0 to 26\n          when (char=? c alpha (+ i j))\n\
    \          collect (rotate-char (char-code c) alpha (+ i j)))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n\
    \      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0 to 26\n          for\
    \ j from 0 to 26\n          when (char=? c alpha (+ i j))\n          collect (substring\
    \ alpha (+ i j) 1)\n          into alpha\n          finally (return (substring\
    \ alpha (+ i j) 1)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\A)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! alpha (rotate", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0\n          for j from\
    \ (- i 2)\n          for k from (- j 2)\n          for l from (- k 2)\n      \
    \    for m from (- l 2)\n          for n from (- m 2)\n          for o from (-\
    \ n 2)\n          for p from (- o 2)\n          for q from (- p 2)\n         \
    \ for r from (- q 2)\n          for s from (- r 2)\n          for t from (- s\
    \ 2)\n          for u from (- t 2)\n          for v from (- u 2)\n          for\
    \ w from (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n\
    \          for z from (- y 2)\n          for u from (- z 2)\n          for v from\
    \ (- u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n      \
    \    for y from (- x 2)\n          for z from (- y 2)\n          for u from (-\
    \ z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n         \
    \ for x from (- w 2)\n          for y from (- x 2)\n          for z from (- y\
    \ 2)\n          for u from (- z 2)\n          for v from (- u 2)\n          for\
    \ w from (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n\
    \          for z from (- y 2)\n          for u from (- z 2)\n          for v from\
    \ (- u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n      \
    \    for y from (- x 2)\n          for z from (- y 2)\n          for u from (-\
    \ z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n         \
    \ for x from (- w 2)\n          for y from (- x 2)\n          for z from (- y\
    \ 2)\n          for u from (- z 2)\n          for v from (- u 2)\n          for\
    \ w from (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n\
    \          for z from (- y 2)\n          for u from (- z ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set",
  "  (let ((alpha (make-array 26)))\n    (define (rotate-letter letter)\n      (let\
    \ ((alpha (make-array 26)))\n        (set! alpha (subarray alpha 0 (- letter (length\
    \ alpha))))\n        (set! alpha (subarray alpha letter (length alpha))))\n  \
    \    (set! alpha (rotate-letter letter))\n      (set! alpha (subarray alpha 0\
    \ (- letter (length alpha))))\n      (set! alpha (subarray alpha letter (length\
    \ alpha))))\n    (set! alpha (rotate-letter s))\n    (set! alpha (subarray alpha\
    \ 0 (- s (length alpha))))\n    (set! alpha (subarray alpha s (length alpha))))\n\
    \  (string-join (map char->string alpha) \"\"))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s) do\n     \
    \ (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n     \
    \ (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -2))\n    \
    \  (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n  \
    \    (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n\
    \      (set! ", "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop\
    \ for i from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha\
    \ (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n      \
    \    (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -2))\n      \
    \    (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (",
  "  (let ((alpha (make-array 26 :initial-element #\\A)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (loop [s s alpha alpha]\n      (cond\n        ((null? s)\
    \ s)\n        ((char-alphabet (first s)) (char-alphabet (first alpha)))\n    \
    \    (else (loop (rest s) (first alpha) (second alpha)))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\A)))\n    (loop for i from 0 to (length s)\
    \ do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n\
    \      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0 to 26\n          for\
    \ j from 0 to 26\n          when (char=? (char-code c) (char-code (substring alpha\
    \ (+ i j))))\n          collect (substring alpha (+ i j))))\n  )\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
