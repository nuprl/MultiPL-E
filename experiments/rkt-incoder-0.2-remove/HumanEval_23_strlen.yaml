name: HumanEval_23_strlen
language: rkt
prompt: "#lang racket\n\n;; Return length of given string\n(define (strlen string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"x\") 1)\n\
  \    (check-equal? (candidate \"asdasnakj\") 9)\n))\n\n(test-humaneval)"
completions: ["  (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (string-length string))\n", "  (length\
    \ (string->list string)))\n", "  (string-length string))\n", "  (length string))\n",
  "  (length string))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (length (string->list string)))\n", "  (define\
    \ (helper string index)\n    (if (= index 0)\n        (string-length string)\n\
    \        (helper (substring string index) (substring string index 1))))\n  (helper\
    \ string 0))\n", "  (string-length string))\n", "  (length string))\n", "  (string-length\
    \ string))\n", "  (define (helper string length)\n    (if (null? string)\n   \
    \     length\n        (helper (cdr string) (+ length 1))))\n  (helper string 0))\n",
  "  (string-length string))\n", "  (length (string->list string)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
