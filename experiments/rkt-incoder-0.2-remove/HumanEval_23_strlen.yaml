name: HumanEval_23_strlen
language: rkt
prompt: "#lang racket\n\n;; Return length of given string\n(define (strlen string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"x\") 1)\n\
  \    (check-equal? (candidate \"asdasnakj\") 9)\n))\n\n(test-humaneval)"
completions: ["  (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (string-length string))\n", "  (length\
    \ (string->list string)))\n", "  (string-length string))\n", "  (length string))\n",
  "  (length string))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (length (string->list string)))\n", "  (define\
    \ (helper string index)\n    (if (= index 0)\n        (string-length string)\n\
    \        (helper (substring string index) (substring string index 1))))\n  (helper\
    \ string 0))\n", "  (string-length string))\n", "  (length string))\n", "  (string-length\
    \ string))\n", "  (define (helper string length)\n    (if (null? string)\n   \
    \     length\n        (helper (cdr string) (+ length 1))))\n  (helper string 0))\n",
  "  (string-length string))\n", "  (length (string->list string)))\n", "  (length\
    \ (string->list string)))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (define (loop i string)\n    (if (null?\
    \ string)\n        i\n        (loop (+ i 1) (substring string i (string->length\
    \ string))))\n    (loop (length string) string))\n  (loop (length string) string))\n",
  "  (length (string->list string)))\n", "  (length string))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (define (helper string index)\n    (if\
    \ (null? string)\n        0\n        (+ 1 (helper (cdr string) index))))\n  (helper\
    \ string 0))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (length string))\n", "  (length string))\n", "  (length (string->list string)))\n",
  "  (string-length string))\n", "  (string-length string))\n", "  (length (string->list\
    \ string)))\n", "  (length (string->list string)))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (define (helper string length)\n    (cond\n  \
    \    [(empty? string) length]\n      [else (helper (cdr string) (+ length 1))]))\n\
    \  (helper string 0))\n", "  (string-length string))\n", "  (length (string->list\
    \ string)))\n", "  (string-length string))\n", "  (length (string->list string)))\n",
  "  (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length (string->list string)))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (length (string->list string)))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (string-length string))\n", "  (define\
    \ (helper string count)\n    (cond\n      [(empty? string) count]\n      [(char=?\
    \ (first string) ?) count]\n      [else (helper (rest string) (+ count 1))]))\n\
    \  (helper string 0))\n", "  (string-length string))\n", "  (length (string->list\
    \ string)))\n", "  (string-length string))\n", "  (length string))\n", "  (string-length\
    \ string))\n", "  (length (string->list string)))\n", "  (define (helper string\
    \ count)\n    (if (null? string)\n        count\n        (helper (cdr string)\
    \ (+ count 1))))\n  (helper string 0))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (define (loop i string)\n    (if (zero? i)\n        0\n    \
    \    (+ 1 (loop (sub1 i) string))))\n  (loop (length string) string))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (string-length string))\n", "  (string-length string))\n", "  (length string))\n",
  "  (length string))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (length (string->list string)))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (length (string->list string)))\n",
  "  (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (length string))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (string-length string))\n", "  (length string))\n", "  (length string))\n",
  "  (define (helper string)\n    (if (null? string)\n        0\n        (+ 1 (helper\
    \ (cdr string))))\n    (helper string))\n  (helper string))\n", "  (length (string->list\
    \ string)))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (define (loop i string)\n    (if (null? string)\n        0\n\
    \        (loop (+ i 1) (substring string i (string-length string))))\n    (loop\
    \ (+ i 1) string))\n  (loop (length string) string))\n", "  (string-length string))\n",
  "  (length (string->list string)))\n", "  (length string))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (string-length string))\n", "  (length (string-ref string 0)))\n", "  (length\
    \ (string->list string)))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (length (string->list string)))\n", "  (length string))\n", "  (length string))\n",
  "  (length string))\n", "  (length (string-ref string 0)))\n", "  (string-length\
    \ string))\n", "  (length string))\n", "  (string-length string))\n", "  (length\
    \ string))\n", "  (length (string->list string)))\n", "  (string-length string))\n",
  "  (length (string-ref string 0)))\n", "  (length (string->list string)))\n", " \
    \ (string-length string))\n", "  (string-length string))\n", "  (length (string->list\
    \ string)))\n", "  (string-length string))\n", "  (length (string->list string)))\n",
  "  (length string))\n", "  (length (string->list string)))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (length (string->list string)))\n", "  (string-length string))\n", "  (length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (string-length string))\n", "  (length (string->list string)))\n", "  (string-length\
    \ string))\n", "  (length (string->list string)))\n", "  (string-length string))\n",
  "  (length string))\n", "  (length string))\n", "  (string-length string))\n", " \
    \ (length (string->list string)))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (string-length string))\n", "  (define (helper string length)\n    (if (null?\
    \ string)\n        length\n        (helper (cdr string) (+ length 1))))\n  (helper\
    \ string 0))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (length string))\n", "  (length (string->list\
    \ string)))\n", "  (length (string->list string)))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (length (string->list string)))\n", "  (length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length (string->list string)))\n", "  (length (string->list\
    \ string)))\n", "  (string-length string))\n", "  (length (string->list string)))\n",
  "  (length string))\n", "  (string-length string))\n", "  (string-length string))\n",
  "  (string-length string))\n", "  (length string))\n", "  (length (string->list\
    \ string)))\n", "  (string-length string))\n", "  (length (string->list string)))\n",
  "  (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (length (string->list string)))\n", "  (length (string->list string)))\n", " \
    \ (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (string-length string))\n", " \
    \ (string-length string))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length (string-ref string 0)))\n", "  (string-length string))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
