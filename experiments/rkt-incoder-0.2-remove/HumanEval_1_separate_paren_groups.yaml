name: HumanEval_1_separate_paren_groups
language: rkt
prompt: "#lang racket\n\n;; Input to this function is a string containing multiple\
  \ groups of nested parentheses. Your goal is to\n;; separate those group into separate\
  \ strings and return the list of those.\n;; Separate groups are balanced (each open\
  \ brace is properly closed) and not nested within each other\n;; Ignore any spaces\
  \ in the input string.\n(define (separate_paren_groups paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate separate_paren_groups))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list \"(()())\"\
  \ \"((()))\" \"()\" \"((())()())\"))\n    (check-equal? (candidate \"() (()) ((()))\
  \ (((())))\") (list \"()\" \"(())\" \"((()))\" \"(((())))\"))\n    (check-equal?\
  \ (candidate \"(()(())((())))\") (list \"(()(())((())))\"))\n    (check-equal? (candidate\
  \ \"( ) (( )) (( )( ))\") (list \"()\" \"(())\" \"(()())\"))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((paren_string paren_string)\n             (paren_group_list\
    \ '())\n             (paren_group_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (list paren_group_list))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_group_list)\n                (+ 1 paren_group_count)))]\n      [(char=\
    \ (first paren_string) ')\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) paren_group_list)\n             (- 1 paren_group_count)))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_group_list)\n             (+ 1 paren_group_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (groups '())\n             (group\
    \ (make-empty-string 0))\n             (open_braces '()))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse groups)]\n      [(equal? (char (first paren_string))\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons group groups)\n\
    \             (make-empty-string 0)\n             (cons (first paren_string) open_braces))]\n\
    \      [(equal? (char (first paren_string)) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons group groups)\n             (make-empty-string 0)\n      \
    \       (cons (first paren_string) open_braces))]\n      [(equal? (char (first\
    \ paren_string)) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (cons (first\
    \ paren_string) open_braces))]\n      [(equal? (char (first paren_string)) '(#\\\
    ))\n       (loop (rest paren_string)\n             (cons group groups)\n     \
    \        (make-empty-string 0)\n             (cons (first paren_string) open_braces))]\n\
    \      [(equal? (char (first paren_string)) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons group groups)\n             (make-empty-string 0)\n      \
    \       (cons (first paren_string) open_braces))]\n      [(equal? (char (first\
    \ paren_string)) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (cons (first\
    \ paren_string) open_braces))]\n      [(equal? (char (first paren_string)) '(#\\\
    ))\n       (loop (rest paren_string)\n             (cons group groups)\n     \
    \        (make-empty-string 0)\n             (cons (first paren_string) open_braces))]\n\
    \      [(equal? (char (first paren_string)) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons group groups)\n             (make-empty-string 0)\n      \
    \       (cons (first paren_string) open_braces))]\n      [(equal? (char (first\
    \ paren_string)) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (cons (first\
    \ paren_string) open_braces))]\n      [(equal? (", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '())\n             (group (make-empty-string\
    \ 0))\n             (group_count 0))\n    (if (string-empty? paren_string)\n \
    \       (reverse groups)\n        (let ((char (string-ref paren_string 0)))\n\
    \          (if (char= char #\\)\n              (loop (substring paren_string 1\
    \ string-length (string-ref paren_string 0))\n                    (cons group\
    \ groups)\n                    (make-string 1 char))\n              (loop (substring\
    \ paren_string 1 string-length (string-ref paren_string 0))\n                \
    \    (cons (make-string 1 char) groups)\n                    (make-string 1 char)))))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (group_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char= (first paren_string) '(\n         (loop (rest paren_string)\n\
    \               (cons group (reverse groups))\n               (add1 group_count)))]\n\
    \      [(char= (first paren_string) '(\n         (loop (rest paren_string)\n \
    \              (cons (first group) (cons (first group) (reverse groups))\n   \
    \                  (add1 group_count)))]\n      [(char= (first paren_string) '(\n\
    \         (loop (rest paren_string)\n               (cons (first group) (cons\
    \ (first group) (cons (first group) (reverse groups))\n                     (add1\
    \ group_count)))]\n      [(char= (first paren_string) '(\n         (loop (rest\
    \ paren_string)\n               (cons (first group) (cons (first group) (cons\
    \ (first group) (cons (first group) (reverse groups))\n                     (add1\
    \ group_count)))]\n      [(char= (first paren_string) '(\n         (loop (rest\
    \ paren_string)\n               (cons (first group) (cons (first group) (cons\
    \ (first group) (cons (first group) (cons (first group) (reverse groups))\n  \
    \                   (add1 group_count)))]\n      [(char= (first paren_string)\
    \ '(\n         (loop (rest paren_string)\n               (cons (first group) (cons\
    \ (first group) (cons (first group) (cons (first group) (cons (first group) (cons\
    \ (first group) (reverse groups))\n                     (add1 group_count)))]\n\
    \      [(char= (first paren_string) '(\n         (loop (rest paren_string)\n \
    \              (cons (first group) (cons (first group) (cons (first group) (cons\
    \ (first group) (cons (first group) (cons (first group) (cons (first group) (reverse\
    \ groups))\n                     (add1 group_count)))]\n      [(char= (first paren_string)\
    \ '(\n         (loop (rest paren_string)\n               (cons (first group) (cons\
    \ (first group) (cons (first group) (cons (first group) (cons (first group) (cons\
    \ (first group) (cons (first group) (cons (first group) (reverse groups))\n  \
    \                   (add1 group_count)))]\n      [(char= (first paren_string)\
    \ '(\n         (loop (rest ", "  (let loop ((paren_string paren_string)\n    \
    \         (result '()))\n    (cond\n      [(empty? paren_string) result]\n   \
    \   [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char= (first paren_string) '( () )) (loop (rest\
    \ paren_string) (cons (first paren_string) (loop (rest paren_string) result)))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string) (cons (first paren_string) result))))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) (loop (rest paren_string) (cons (first paren_string) (loop (rest\
    \ paren_string) (cons (first paren_string) result)))))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))))]))\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))))]))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))))]))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string)\
    \ (cons (first paren_string) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))))]))]\n      [(char= (", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond [(empty? paren_string) groups]\n      \
    \    [(char=? (first paren_string) '( () )]\n          [(char=? (first paren_string)\
    \ '( () )]\n          [(char=? (first paren_string) '( () )]\n          [(char=?\
    \ (first paren_string) '( () )]\n          [(char=? (first paren_string) '( ()\
    \ )]\n          [(char=? (first paren_string) '( () )]\n          [(char=? (first\
    \ paren_string) '( () )]\n          [(char=? (first paren_string) '( () )]\n \
    \         [(char=? (first paren_string) '( () )]\n          [(char=? (first paren_string)\
    \ '( () )]\n          [(char=? (first paren_string) '( () )]\n          [(char=?\
    \ (first paren_string) '( () )]\n          [(char=? (first paren_string) '( ()\
    \ )]\n          [(char=? (first paren_string) '( () )]\n          [(char=? (first\
    \ paren_string) '( () )]\n          [(char=? (first paren_string) '( () )]\n \
    \         [(char=? (first paren_string) '( () )]\n          [(char=? (first paren_string)\
    \ '( () )]\n          [(char=? (first paren_string) '( () )]\n          [(char=?\
    \ (first paren_string) '( () )]\n          [(char=? (first paren_string) '( ()\
    \ )]\n          [(char=? (first paren_string) '( () )]\n          [(char=? (first\
    \ paren_string) '( () )]\n          [(char=? (first paren_string) '( () )]\n \
    \         [(char=? (first paren_string) '( () )]\n          [(char=? (first paren_string)\
    \ '( () )]\n          [(char=? (first paren_string) '( () )]\n          [(char=?\
    \ (first paren_string) '( () )]\n          [(char=? (first paren_string) '( ()\
    \ )]\n          [(char=? (first paren_string) '( () )]\n          [(char=? (first\
    \ paren_string) '( () )]\n          [(char=? (first paren_string) '( () )]\n \
    \         [(char", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ()))\n    (cond ((string-length paren_string)\n           (reverse groups))\n\
    \          ((char= (first paren_string) '(')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) ')')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '[')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) ']')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '{')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '}')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '(')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) ')')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '[')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) ']')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '{')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '}')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '[')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) ']')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string)\n                      groups))))\n\
    \          ((char= (first paren_string) '{')\n           (", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond ((string-empty? paren_string)\n\
    \           (reverse result))\n          ((char=? (car paren_string) '(')\n  \
    \         (loop (cdr paren_string)\n                 (cons (car paren_string)\
    \ result)))\n          ((char=? (car paren_string) ')')\n           (loop (cdr\
    \ paren_string)\n                 (cons (car paren_string) result)))\n       \
    \   (else\n           (loop (cdr paren_string)\n                 (cons (car paren_string)\
    \ result))))))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n \
    \     [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    ))\n       (loop (rest paren_string) (cons (first paren_string) groups))]\n  \
    \    [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\
    \ ((null? paren_string)\n           (reverse result))\n          ((char=? (car\
    \ paren_string) '(')\n           (loop (cdr paren_string)\n                 (cons\
    \ (car paren_string) result)))\n          ((char=? (car paren_string) ')')\n \
    \          (loop (cdr paren_string)\n                 (cons (car paren_string)\
    \ result)))\n          (else\n           (loop (cdr paren_string)\n          \
    \       (cons (car paren_string) result))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_group_list '())\n             (paren_group_string\
    \ '()))\n    (cond\n      [(empty? paren_string)\n       (reverse (append paren_group_list\
    \ paren_group_string))]\n      [(equal? (first paren_string) '(#\\))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string)\n             \
    \      (loop (rest paren_string)\n                         (cons (first paren_string)\n\
    \                               (loop (rest paren_string)\n                  \
    \                   (cons (first paren_string)\n                             \
    \             (loop (rest paren_string)\n                                    \
    \            (cons (first paren_string)\n                                    \
    \                  (loop (rest paren_string)\n                               \
    \                             (cons (first paren_string)\n                   \
    \                                             (loop (rest paren_string)\n    \
    \                                                                (cons (first\
    \ paren_string)\n                                                            \
    \            (loop (rest paren_string)\n                                     \
    \                                       (cons (first paren_string)\n         \
    \                                                                         (loop\
    \ (rest paren_string)\n                                                      \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \    (loop (rest paren_string)\n                                             \
    \                                                       (cons (first paren_string)\n\
    \                                                                            \
    \                              (loop (rest paren_string)\n                   \
    \                                                                            \
    \                 (cons (first paren_string)\n                               \
    \                                                                            \
    \           (loop (rest paren_string)\n                                      \
    \                                                                            \
    \          (cons (first paren_string)\n                                      \
    \                                                                            \
    \              (loop (rest paren_string)\n                                   \
    \                                                                            \
    \                       (cons (first paren_string)\n                         \
    \                                                                            \
    \                                     (loop (rest paren_string)\n            \
    \                                                                            \
    \                                                    (cons (first paren_string)\n\
    \                                                                            \
    \                                                                      (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \              (cons (first paren_string)\n                                  \
    \                                                                            \
    \                                               (loop (rest paren_string)\n  \
    \                                                                            \
    \                                                                            \
    \      (cons (first paren_string)\n                                          \
    \                                                                            \
    \                                                (loop (rest paren_string)\n \
    \                                                                            \
    \                                                                            \
    \                    (cons (first paren_string)\n                            \
    \                                                                            \
    \                                                                          (loop\
    \ (rest paren_string)\n                                                      \
    \                                                                            \
    \                                                    (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                 (loop (rest paren_string)\n                \
    \                                                                            \
    \                                                                            \
    \                    (cons (first paren_string)\n                            \
    \                                                                            \
    \                                                                            \
    \          (loop (rest paren_string)\n                                       \
    \                                                                            \
    \                                                                            \
    \ (cons (first paren_string)\n                                               \
    \                                                                            \
    \                                                                       (loop\
    \ (rest paren_string)\n                                                      \
    \                                                                            \
    \                                                                    (cons (first\
    \ paren_string)\n                                                            \
    \                                                                            \
    \                                                               (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                    (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                          (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                              (cons (first paren_string)",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (group_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (+ group_count\
    \ 1)))]\n      [(char=? (first paren_string) ')')\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (- group_count\
    \ 1)))]\n      [else\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (+ group_count 1))]\n    )\n  )\n)\n", " \
    \ (let loop ((paren_string paren_string)\n             (paren_list '())\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (car paren_string) '(')\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_list) paren_list)\n             (add1 paren_count))]\n\
    \      [else\n       (loop (cdr paren_string)\n             (cons (car paren_string)\
    \ paren_list)\n             (add1 paren_count)\n             (add1 paren_count))]\n\
    \      [(char=? (car paren_string) ')')\n       (loop (cdr paren_string)\n   \
    \          (cons (car paren_list) paren_list)\n             (add1 paren_count)\n\
    \             (add1 paren_count))]\n      [else\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_string) paren_list)\n             (add1 paren_count)\n\
    \             (add1 paren_count)\n             (add1 paren_count)])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n \
    \     [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups)))]\n      [(equal? (first paren_string) '[')\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))]\n      [(equal? (first paren_string) '{')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups)))]\n    \
    \  [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) '[')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups)))]\n    \
    \  [(equal? (first paren_string) '{')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups)))]\n    \
    \  [(equal? (first paren_string) '[')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) '{')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups)))]\n    \
    \  [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) '[')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups)))]\n    \
    \  [(equal? (first paren_string) '{')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups)))]\n    \
    \  [(equal? (first paren_string) '[')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) '{')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups)))]\n    \
    \  [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) '[')\n\
    \       (loop (", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ())\n             (group_count 0))\n    (cond ((null? paren_string)\n      \
    \     (reverse groups))\n          ((char= (first paren_string) '(')\n       \
    \    (loop (rest paren_string)\n                 (cons (first paren_string) groups)\n\
    \                 (add1 group_count)))\n          ((char= (first paren_string)\
    \ ')')\n           (loop (rest paren_string)\n                 (reverse (cons\
    \ (first paren_string) groups))\n                 (sub1 group_count)))\n     \
    \     (else\n           (loop (rest paren_string)\n                 (cons (first\
    \ paren_string) groups)\n                 (add1 group_count))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (paren_count 0))\n    (cond ((string-length paren_string) paren_list)\n \
    \         ((char= (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count)))\n          ((char= (first paren_string)\
    \ ')') (loop (rest paren_string) (cons (first paren_string) paren_list) (sub1\
    \ paren_count)))\n          ((char= (first paren_string) '[') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count)))\n          ((char=\
    \ (first paren_string) ']') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (sub1 paren_count)))\n          ((char= (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '}') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (sub1 paren_count)))\n          (else (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) (add1 paren_count))))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string) groups]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) (cons (first groups) groups))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(equal? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) result)))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (cons (first paren_string) result))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) result))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (current_group 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ (list paren_list))]\n      [(char=? (first paren_string) '(\n              (loop\
    \ (rest paren_string)\n                    (cons (first paren_string) paren_list)\n\
    \                    (add1 current_group)))]\n      [(char=? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) paren_list)\n                    (add1 current_group)))]\n   \
    \   [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (add1 current_group)))]\n      [(char=? (first paren_string) '(\n       \
    \       (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (add1 current_group)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) paren_list)\n                    (add1 current_group)))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (add1 current_group)))]\n      [(char=? (first paren_string) '(\n       \
    \       (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (add1 current_group)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) paren_list)\n                    (add1 current_group)))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (add1 current_group)))]\n      [(char=? (first paren_string) '(\n       \
    \       (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ paren_list)\n                    (add1 current_group)))]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) paren_list)\n                    (add1 current_group)))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (add1 current_group)))]\n      ", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (group_start 0))\n    (if (empty? paren_string)\n\
    \        (reverse groups)\n        (let ((char (car paren_string)))\n        \
    \  (if (char= char #\\)\n              (loop (cdr paren_string)\n            \
    \        (cons (substring paren_string 0 group_start) groups)\n              \
    \      (+ group_start 1))\n              (loop (cdr paren_string)\n          \
    \          (cons (substring paren_string 0 group_start) groups)\n            \
    \        group_start)))))\n</code>\n<|/ a dscore=1 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ())\n             (group_start 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (first paren_string) '( () ( () ) )\
    \ )\n       (loop (rest paren_string)\n             (cons (substring paren_string\
    \ 0 group_start)\n                  groups)\n             (+ group_start 1))]\n\
    \      [(char=? (first paren_string) '( () ) )\n       (loop (rest paren_string)\n\
    \             (cons (substring paren_string 0 group_start)\n                 \
    \ groups)\n             (+ group_start 1))]\n      [(char=? (first paren_string)\
    \ '( () ( () ) ) )\n       (loop (rest paren_string)\n             (cons (substring\
    \ paren_string 0 group_start)\n                  groups)\n             (+ group_start\
    \ 1))]\n      [(char=? (first paren_string) '( () ( () ) ) )\n       (loop (rest\
    \ paren_string)\n             (cons (substring paren_string 0 group_start)\n \
    \                 groups)\n             (+ group_start 1))]\n      [(char=? (first\
    \ paren_string) '( () ( () ) ) )\n       (loop (rest paren_string)\n         \
    \    (cons (substring paren_string 0 group_start)\n                  groups)\n\
    \             (+ group_start 1))]\n      [(char=? (first paren_string) '( () (\
    \ () ) ) )\n       (loop (rest paren_string)\n             (cons (substring paren_string\
    \ 0 group_start)\n                  groups)\n             (+ group_start 1))]\n\
    \      [(char=? (first paren_string) '( () ( () ) ) )\n       (loop (rest paren_string)\n\
    \             (cons (substring paren_string 0 group_start)\n                 \
    \ groups)\n             (+ group_start 1))]\n      [(char=? (first paren_string)\
    \ '( () ( () ) ) )\n       (loop (rest paren_string)\n             (cons (substring\
    \ paren_string 0 group_start)\n                  groups)\n             (+ group_start\
    \ 1))]\n      [(char=? (first paren_string) '( () ( () ) ) )\n       (loop (rest\
    \ paren_string)\n             (cons (substring paren_string 0 group_start)\n \
    \                 groups)\n             (+ group_start 1))]\n      [(char=? (first\
    \ paren_string) '( () ( () ) ) )\n       (loop (rest paren_string)\n         \
    \    (cons (substring paren_string 0 group_start)", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '()))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(equal? (car paren_string) '(\n            \
    \      (loop (cdr paren_string)\n                        (cons (car paren_string)\
    \ groups)))]\n      [(equal? (car paren_string) '(\n                  (loop (cdr\
    \ paren_string)\n                        (cons (car paren_string) groups))\n \
    \                 (loop (cdr paren_string)\n                        (cons (car\
    \ paren_string) groups))]\n      [(equal? (car paren_string) '(\n            \
    \      (loop (cdr paren_string)\n                        (cons (car paren_string)\
    \ groups))\n                  (loop (cdr paren_string)\n                     \
    \   (cons (car paren_string) groups))\n                  (loop (cdr paren_string)\n\
    \                        (cons (car paren_string) groups))]\n      [(equal? (car\
    \ paren_string) '(\n                  (loop (cdr paren_string)\n             \
    \           (cons (car paren_string) groups))\n                  (loop (cdr paren_string)\n\
    \                        (cons (car paren_string) groups))\n                 \
    \ (loop (cdr paren_string)\n                        (cons (car paren_string) groups))\n\
    \                  (loop (cdr paren_string)\n                        (cons (car\
    \ paren_string) groups))]\n      [(equal? (car paren_string) '(\n            \
    \      (loop (cdr paren_string)\n                        (cons (car paren_string)\
    \ groups))\n                  (loop (cdr paren_string)\n                     \
    \   (cons (car paren_string) groups))\n                  (loop (cdr paren_string)\n\
    \                        (cons (car paren_string) groups))\n                 \
    \ (loop (cdr paren_string)\n                        (cons (car paren_string) groups))\n\
    \                  (loop (cdr paren_string)\n                        (cons (car\
    \ paren_string) groups))]\n      [(equal? (car paren_string) '(\n            \
    \      (loop (cdr paren_string)\n                        (cons (car paren_string)\
    \ groups))\n                  (loop (cdr paren_string)\n                     \
    \   (cons (car paren_string) groups))\n                  (loop (cdr paren_string)\n\
    \                        (cons (car paren_string) groups))\n                 \
    \ (loop (cdr paren_string)\n                        (cons (car paren_string) groups))\n\
    \                  (loop", "  (let loop ((paren_string paren_string)\n       \
    \      (groups '())\n             (group_count 0))\n    (if (string-empty? paren_string)\n\
    \        (reverse groups)\n        (let ((char (car paren_string)))\n        \
    \  (if (char-whitespace? char)\n              (loop (cdr paren_string)\n     \
    \               (cons (car groups) groups)\n                    (+ group_count\
    \ 1)))\n              (loop (cdr paren_string)\n                    (cons (car\
    \ groups) groups)\n                    (+ group_count 1))))))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (groups ()))\n    (cond ((null? paren_string)\n\
    \           (reverse groups))\n          ((char= (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first paren_string) '( (not (equal? (first paren_string) '(\
    \ (not (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first paren_string) '( (not (equal? (first paren_string) '(\
    \ (not (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first paren_string) '( (not (equal? (first paren_string) '(\
    \ (not (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first paren_string) '( (not (equal? (first paren_string) '(\
    \ (not (equal? (first paren_string", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string) groups]\n      [(char=? (first paren_string) '( () )]\n      (loop\
    \ (rest paren_string)\n            (cons (first paren_string)\n              \
    \    (loop (rest paren_string)\n                        (cons (first paren_string)\n\
    \                              (loop (rest paren_string)\n                   \
    \                 (cons (first paren_string)\n                               \
    \           (loop (rest paren_string)\n                                      \
    \          (cons (first paren_string)\n                                      \
    \                (loop (rest paren_string)\n                                 \
    \                           (cons (first paren_string)\n                     \
    \                                           (loop (rest paren_string)\n      \
    \                                                              (cons (first paren_string)\n\
    \                                                                          (loop\
    \ (rest paren_string)\n                                                      \
    \                      (cons (first paren_string)\n                          \
    \                                                        (loop (rest paren_string)\n\
    \                                                                            \
    \            (cons (first paren_string)\n                                    \
    \                                                          (loop (rest paren_string)\n\
    \                                                                            \
    \                        (cons (first paren_string)\n                        \
    \                                                                            \
    \      (loop (rest paren_string)\n                                           \
    \                                                                     (cons (first\
    \ paren_string)\n                                                            \
    \                                                          (loop (rest paren_string)\n\
    \                                                                            \
    \                                                (cons (first paren_string)\n\
    \                                                                            \
    \                                                      (loop (rest paren_string)\n\
    \                                                                            \
    \                                                            (cons (first paren_string)\n\
    \                                                                            \
    \                                                                (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                      (cons (first\
    \ paren_string)\n                                                            \
    \                                                                            \
    \              (loop (rest paren_string)\n                                   \
    \                                                                            \
    \                                             (cons (first paren_string)\n   \
    \                                                                            \
    \                                                                            \
    \     (loop (rest paren_string)\n                                            \
    \                                                                            \
    \                                              (cons (first paren_string)\n  \
    \                                                                            \
    \                                                                            \
    \                  (loop (rest paren_string)\n                               \
    \                                                                            \
    \                                                                       (cons\
    \ (first paren_string)\n                                                     \
    \                                                                            \
    \                                                   (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                              (cons (first paren_string)\n                  \
    \                                                                            \
    \                                                                            \
    \              (loop (rest paren_string)\n                                   \
    \                                                                            \
    \                                                                           (cons\
    \ (first paren_string)\n                                                     \
    \                                                                            \
    \                                                           (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                      (cons (first paren_string)\n          \
    \                                                                            \
    \                                                                            \
    \                              (loop (rest paren_string)\n                   \
    \                                                                            \
    \                                                                            \
    \                       (cons (first paren_string)\n                         \
    \                                                                            \
    \                                                                            \
    \                     (loop (rest paren_string)\n                            \
    \                                                                            \
    \                                                                            \
    \                    (cons (first paren_string)\n                            \
    \                                                                            \
    \                                                                            \
    \                          (loop (rest paren_string)\n                       \
    \                                                                            \
    \                                                                            \
    \                                   (cons (first paren_string)\n             \
    \                                                                            \
    \                                                                            \
    \                                                 (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                                ", "  (let ([paren_groups\
    \ (string->list paren_string)])\n    (cond\n      [(empty? paren_groups) '()]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[) (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) ", "  (let loop ((paren_string paren_string)\n\
    \             (paren_group_list '())\n             (paren_group_count 0))\n  \
    \  (cond\n      [(empty? paren_string)\n       (reverse (list paren_group_list))]\n\
    \      [(equal? (car paren_string) '())\n       (loop (cdr paren_string)\n   \
    \          (cons (car paren_group_list) paren_group_list)\n             (+ 1 paren_group_count))\n\
    \       ]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\n\
    \             (cons (car paren_group_list) paren_group_list)\n             (+\
    \ 1 paren_group_count))\n       ]\n      [(equal? (car paren_string) '(')\n  \
    \     (loop (cdr paren_string)\n             (cons (car paren_group_list) paren_group_list)\n\
    \             (+ 1 paren_group_count))\n       ]\n      [else\n       (loop (cdr\
    \ paren_string)\n             (cons (car paren_group_list)\n                 \
    \  (list (car paren_string)))\n             (+ 1 paren_group_count))\n       ]\n\
    \      ]\n    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n      \
    \       (paren_list '())\n             (open_braces '()))\n    (cond\n      [(empty?\
    \ paren_string) paren_list]\n      [(char=? (car paren_string) '(') (loop (cdr\
    \ paren_string) (cons (car paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (car paren_string) ')') (loop (cdr paren_string) (cons (car paren_string) paren_list)\
    \ open_braces\n                                               (cons (car paren_string)\
    \ open_braces))]\n      [else (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list) open_braces\n                       (cons (car paren_string) open_braces\n\
    \                             (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_list) open_braces)))]\n    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_group_list '())\n             (paren_group_count 0))\n  \
    \  (cond\n      [(empty? paren_string) paren_group_list]\n      [(char=? (first\
    \ paren_string) '(') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (add1 paren_group_count))\n       (loop (rest paren_string) (cons (first paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (add1 paren_group_count))\n       (loop (rest paren_string) (cons (first paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [else (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) (add1 paren_group_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '())\n         \
    \    (group (make-empty-string 0))\n             (group_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse groups)]\n      [(char= (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (cons group\
    \ groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest paren_string)\n   \
    \          (cons group groups)\n             (make-empty-string 0)\n         \
    \    (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest paren_string)\n   \
    \          (cons group groups)\n             (make-empty-string 0)\n         \
    \    (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest paren_string)\n   \
    \          (cons group groups)\n             (make-empty-string 0)\n         \
    \    (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest paren_string)\n   \
    \          (cons group groups)\n             (make-empty-string 0)\n         \
    \    (add1 group_count))\n       (loop (rest ", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    ))\n       (loop (rest paren_string) (cons (first paren_string) groups))]\n  \
    \    [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (group_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char= (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (+ group_count\
    \ 1)))]\n      [else\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string)\n                    (loop (rest paren_string)\n             \
    \             (cons (first paren_string) groups)\n                          (+\
    \ group_count 1))))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string)\n                    (loop (rest paren_string)\n             \
    \             (cons (first paren_string) groups)\n                          (+\
    \ group_count 1))))]))))\n", "  (let loop ((paren_string paren_string)\n     \
    \        (paren_list '())\n             (open_braces '()))\n    (cond\n      [(empty?\
    \ paren_string) paren_list]\n      [(char= (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons paren_string paren_list) (cons (first paren_string)\
    \ open_braces))]\n      [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons paren_string paren_list) (cons (first paren_string) open_braces))]\n \
    \     [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons paren_string\
    \ paren_list) (cons (first paren_string) open_braces))]\n      [(char= (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons paren_string paren_list)\
    \ (cons (first paren_string) open_braces))]\n      [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons paren_string paren_list) (cons (first\
    \ paren_string) open_braces))]\n      [(char= (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons paren_string paren_list) (cons (first paren_string)\
    \ open_braces))]\n      [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons paren_string paren_list) (cons (first paren_string) open_braces))]\n \
    \     [(char= (first paren_string) '(#\\)) (loop (rest paren_string) (cons paren_string\
    \ paren_list) (cons (first paren_string) open_braces))]\n      [(char= (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons paren_string paren_list)\
    \ (cons (first paren_string) open_braces))]\n      [(char= (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons paren_string paren_list) (cons (first\
    \ paren_string) open_braces))]\n      [(char= (first paren_string) '(#\\)) (loop\
    \ (rest paren_string) (cons paren_string paren_list) (cons (first paren_string)\
    \ open_braces))]\n      [(char= (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (", "  (let loop ((paren_string paren_string)\n             (paren_group_list\
    \ '())\n             (paren_group_size 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_group_list]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) (add1 paren_group_size))]\n   \
    \   [(char=? (first paren_string) ')') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (sub1 paren_group_size))]\n      [else (loop\
    \ (rest paren_string) (cons (first paren_string) paren_group_list) (add1 paren_group_size))]\n\
    \    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (cond ((null? paren_string) result)\n          ((char=? (car paren_string)\
    \ '(') (loop (cdr paren_string) (cons (car paren_string) result)))\n         \
    \ ((char=? (car paren_string) ')') (loop (cdr paren_string) (cons (car paren_string)\
    \ result)))\n          (else (loop (cdr paren_string) (cons (car paren_string)\
    \ result))))))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond\n      [(empty? paren_string) groups]\n      [(char= (first\
    \ paren_string) '( () ( () ) ) ) ; open paren\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '(\
    \ () ) ) ; close paren\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '( () ) ) ; open paren\n     \
    \  (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '( () ) ) ; close paren\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '(\
    \ () ) ) ; open paren\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '( () ) ) ; close paren\n    \
    \   (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '( () ) ) ; open paren\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '(\
    \ () ) ) ; close paren\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '( () ) ) ; open paren\n     \
    \  (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '( () ) ) ; close paren\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '(\
    \ () ) ) ; open paren\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '( () ) ) ; close paren\n    \
    \   (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '( () ) ) ; open paren\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '(",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) result))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n \
    \     [(empty? paren_string)\n       (reverse groups)]\n      [(char=? (first\
    \ paren_string) '( () ( () ( () ( () ) ) ) ) )\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [else\n       (loop (rest paren_string)\
    \ (cons (first paren_string) (cons (first paren_string) groups)))]\n    )\n  )\n\
    )\n", "  (let loop ((paren_string paren_string)\n             (groups '())\n \
    \            (group_count 0))\n    (cond\n      [(empty? paren_string)\n     \
    \  (reverse groups)]\n      [(char=? (first paren_string) '(\n               (loop\
    \ (rest paren_string)\n                       (cons (first paren_string) groups)\n\
    \                       (add1 group_count)))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (add1 group_count))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups)\n             (add1 group_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse (list paren_list))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string)\n                   (loop (rest paren_string)\n\
    \                         (cons (first paren_string)\n                       \
    \        (loop (rest paren_string)\n                                     (cons\
    \ (first paren_string)\n                                          (loop (rest\
    \ paren_string)\n                                                 (cons (first\
    \ paren_string)\n                                                      (loop (rest\
    \ paren_string)\n                                                            (cons\
    \ (first paren_string)\n                                                     \
    \           (loop (rest paren_string)\n                                      \
    \                              (cons (first paren_string)\n                  \
    \                                                      (loop (rest paren_string)\n\
    \                                                                            (cons\
    \ (first paren_string)\n                                                     \
    \                             (loop (rest paren_string)\n                    \
    \                                                                    (cons (first\
    \ paren_string)\n                                                            \
    \                                  (loop (rest paren_string)\n               \
    \                                                                            \
    \         (cons (first paren_string)\n                                       \
    \                                                                   (loop (rest\
    \ paren_string)\n                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                          (loop (rest paren_string)\n       \
    \                                                                            \
    \                                         (cons (first paren_string)\n       \
    \                                                                            \
    \                                           (loop (rest paren_string)\n      \
    \                                                                            \
    \                                              (cons (first paren_string)\n  \
    \                                                                            \
    \                                                      (loop (rest paren_string)\n\
    \                                                                            \
    \                                                          (cons (first paren_string)\n\
    \                                                                            \
    \                                                              (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                (cons (first\
    \ paren_string)\n                                                            \
    \                                                                            \
    \          (loop (rest paren_string)\n                                       \
    \                                                                            \
    \                                   (cons (first paren_string)\n             \
    \                                                                            \
    \                                                                 (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \                        (cons (first paren_string)\n                        \
    \                                                                            \
    \                                                                  (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \                                     (cons (first paren_string)\n           \
    \                                                                            \
    \                                                                            \
    \               (loop (rest paren_string)\n                                  \
    \                                                                            \
    \                                                                        (cons\
    \ (first paren_string)\n                                                     \
    \                                                                            \
    \                                                         (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                        (cons (first paren_string)\n        \
    \                                                                            \
    \                                                                            \
    \                                    (loop (rest paren_string)\n             \
    \                                                                            \
    \                                                                            \
    \                                 (cons (first paren_string)\n               \
    \                                                                            \
    \                                                                            \
    \                                 (loop (rest paren_string)\n                \
    \                                                                            \
    \                                                                            \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \                                                                            \
    \                                      (loop (rest paren_string)\n           \
    \                                                                            \
    \                                                                            \
    \                                           (cons (first paren_string)\n     \
    \                                                                            \
    \                                                                            \
    \                                                     (loop (rest ", "  (let loop\
    \ ((paren_string paren_string)\n             (groups ())\n             (open_braces\
    \ 0))\n    (if (empty? paren_string)\n        (reverse groups)\n        (let ((char\
    \ (car paren_string)))\n          (if (char= char #\\)\n              (loop (cdr\
    \ paren_string)\n                    (cons (cons char groups) groups)\n      \
    \              (+ open_braces 1)))\n              (loop (cdr paren_string)\n \
    \                   (cons char groups)\n                    open_braces))))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string) groups]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first\
    \ paren_string) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) groups))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (", " \
    \ (let loop ((paren_string paren_string)\n             (paren_group_list '())\n\
    \             (paren_group_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse paren_group_list)]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_group_list)\n\
    \             (add1 paren_group_count))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_group_list)\n             (add1\
    \ paren_group_count))]))))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char=? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) groups))]\n      [else\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) (cons (car paren_string) groups))])]))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n \
    \     [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) groups))\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) groups))))]\n      [(equal? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) groups))\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) groups))\n              (loop\
    \ (rest paren_string)\n                     (cons (first paren_string) groups))))]\n\
    \      [(equal? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) groups))\n              (loop\
    \ (rest paren_string)\n                     (cons (first paren_string) groups))\n\
    \              (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups))\n              (loop (rest paren_string)\n                     (cons\
    \ (first paren_string) groups))))]\n      [(equal? (first paren_string) '(\n \
    \             (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups))\n              (loop (rest paren_string)\n                     (cons\
    \ (first paren_string) groups))\n              (loop (rest paren_string)\n   \
    \                  (cons (first paren_string) groups))\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) groups))\n  \
    \            (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups))))]\n      [(equal? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) groups))\n  \
    \            (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups))\n              (loop (rest paren_string)\n                     (cons\
    \ (first paren_string) groups))\n              (loop (rest paren_string)\n   \
    \                  (cons (first paren_string) groups))\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) groups))\n  \
    \            (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ groups))))]\n      [(equal? (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) groups))\n  \
    \            (loop (rest paren_string)\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_group_list '())\n             (group_count 0))\n    (cond\
    \ [(empty? paren_string) paren_group_list]\n          [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (inc group_count))]\n          [(char=? (first paren_string) '{') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_group_list) (inc group_count))]\n\
    \          [(char=? (first paren_string) '[) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (inc group_count))]\n          [(char=? (first\
    \ paren_string) '(') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (inc group_count))]\n          [(char=? (first paren_string) '{') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_group_list) (inc group_count))]\n\
    \          [(char=? (first paren_string) '[) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (inc group_count))]\n          [(char=? (first\
    \ paren_string) '(]\n          [(char=? (first paren_string) '{]\n          [(char=?\
    \ (first paren_string) '[]\n          [(char=? (first paren_string) '(]\n    \
    \      [(char=? (first paren_string) '{]\n          [(char=? (first paren_string)\
    \ '[]\n          [(char=? (first paren_string) '(]\n          [(char=? (first\
    \ paren_string) '{]\n          [(char=? (first paren_string) '[]\n          [(char=?\
    \ (first paren_string) '(]\n          [(char=? (first paren_string) '{]\n    \
    \      [(char=? (first paren_string) '[]\n          [(char=? (first paren_string)\
    \ '(]\n          [(char=? (first paren_string) '{]\n          [(char=? (first\
    \ paren_string) '[]\n          [(char=? (first paren_string) '(]\n          [(char=?\
    \ (first paren_string) '{]\n          [(char=? (first paren_string) '[]\n    \
    \      [(char=? (first paren_string) '(]\n          [(char=? (first paren_string)\
    \ '{]\n          [(char=? (first paren_string) ", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ()))\n    (cond\n      [(empty? paren_string)\
    \ groups]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(char= (first paren_string) ')') (loop\
    \ (rest paren_string) (cons (first paren_string) groups))]\n      [(char= (first\
    \ paren_string) '[') (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char= (first paren_string) ']') (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n      [(char= (first paren_string) '{') (loop (rest\
    \ paren_string) (cons (first paren_string) groups))]\n      [(char= (first paren_string)\
    \ '}') (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '#lang) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '#lang) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [else (loop (rest paren_string)\
    \ (cons (first paren_string) groups))])))\n", "  (let ([paren_groups (string->list\
    \ paren_string)])\n    (cond\n      [(empty? paren_groups) '()]\n      [(not (pair?\
    \ paren_groups)) '()]\n      [(not (list? paren_groups)) '()]\n      [(not (equal?\
    \ (first paren_groups) '(')) '()]\n      [(not (equal? (first paren_groups) '['))\
    \ '()]\n      [(not (equal? (first paren_groups) '{'))\n       (error \"Invalid\
    \ paren group: ~a\" paren_groups)]\n      [(not (equal? (first paren_groups) '('))\
    \ (separate_paren_groups (rest paren_groups))]\n      [(not (equal? (first paren_groups)\
    \ '['))\n       (separate_paren_groups (rest paren_groups))]\n      [(not (equal?\
    \ (first paren_groups) '{'))\n       (separate_paren_groups (rest paren_groups))]\n\
    \      [else (separate_paren_groups (rest paren_groups))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_list '())\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse (list paren_list))]\n\
    \      [(char=? (first paren_string) '( (not (equal? (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first paren_string) '( (not (equal? (first paren_string) '(\
    \ (not (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first paren_string) '( (not (equal? (first paren_string) '(\
    \ (not (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first paren_string) '( (not (equal? (first paren_string) '(\
    \ (not (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not\
    \ (equal? (first paren_string) '( (not (equal? (first paren_string) '( (not (equal?\
    \ (first paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first\
    \ paren_string) '( (not (equal? (first paren_string) '( (not (equal? (first paren_string)\
    \ '( (not (equal? (first ", "  (let loop ((paren_string paren_string)\n      \
    \       (paren_list '())\n             (paren_count 0))\n    (if (null? paren_string)\n\
    \        paren_list\n        (loop (rest paren_string)\n              (cons (first\
    \ paren_string)\n                    (loop (rest paren_string)\n             \
    \             (cons (first paren_string)\n                                (loop\
    \ (rest paren_string)\n                                      (cons (first paren_string)\n\
    \                                            (loop (rest paren_string)\n     \
    \                                             (cons (first paren_string)\n   \
    \                                                       (loop (rest paren_string)\n\
    \                                                                  (cons (first\
    \ paren_string)\n                                                            \
    \            (loop (rest paren_string)\n                                     \
    \                                         (cons (first paren_string)\n       \
    \                                                                            \
    \   (loop (rest paren_string)\n                                              \
    \                                              (cons (first paren_string)\n  \
    \                                                                            \
    \                    (loop (rest paren_string)\n                             \
    \                                                                           (cons\
    \ (first paren_string)\n                                                     \
    \                                                         (loop (rest paren_string)\n\
    \                                                                            \
    \                                        (cons (first paren_string)\n        \
    \                                                                            \
    \                                      (loop (rest paren_string)\n           \
    \                                                                            \
    \                                             (cons (first paren_string)\n   \
    \                                                                            \
    \                                           (loop (rest paren_string)\n      \
    \                                                                            \
    \                                                  (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     ", "  (let ([paren_groups\
    \ (string->list paren_string)])\n    (cond\n      [(empty? paren_groups) '()]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '(') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '[') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) '{') (separate_paren_groups (rest paren_groups))]\n\
    \      [(equal? (first paren_groups) ", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) groups)))]\n      [(char= (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) (cons (first groups) groups))))]\n      [(char=\
    \ (first paren_string) '(\n              (loop (rest paren_string)\n         \
    \            (cons (first paren_string) (cons (first groups) (cons (first groups)\
    \ groups))))])]\n      [(char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                     (cons (first paren_string) (cons (first\
    \ groups) (cons (first groups) (cons (first groups) groups))))))]\n      [(char=\
    \ (first paren_string) '(\n              (loop (rest paren_string)\n         \
    \            (cons (first paren_string) (cons (first groups) (cons (first groups)\
    \ (cons (first groups) (cons (first groups) groups))))))])]\n      [(char= (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \     (cons (first paren_string) (cons (first groups) (cons (first groups) (cons\
    \ (first groups) (cons (first groups) (cons (first groups) groups))))))])]\n \
    \     [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) (cons (first groups) (cons (first\
    \ groups) (cons (first groups) (cons (first groups) (cons (first groups) (cons\
    \ (first groups) groups))))))])]\n      [(char= (first paren_string) '(\n    \
    \          (loop (rest paren_string)\n                     (cons (first paren_string)\
    \ (cons (first groups) (cons (first groups) (cons (first groups) (cons (first\
    \ groups) (cons (first groups) (cons (first groups) (cons (first groups) groups))))))])))]\n\
    \      [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                     (cons (first paren_string) (cons (first groups) (cons (first\
    \ groups) (cons (first groups) (cons (first groups) ", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '()))\n    (cond [(empty? paren_string)\n\
    \           (reverse groups)]\n          [(char=? (car paren_string) '(')\n  \
    \         (loop (cdr paren_string) (cons (car paren_string) groups))]\n      \
    \    [else\n           (loop (cdr paren_string) (cons (car paren_string) groups))]\n\
    \          [else\n           (loop (cdr paren_string) (cons (car paren_string)\
    \ groups))])))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond\n      [(empty? paren_string) groups]\n      [(equal? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) groups))]\n   \
    \   [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) groups))]\n   \
    \   [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) groups))]\n   \
    \   [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) groups))]\n   \
    \   [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) groups))]\n   \
    \   [(", "  (let loop ((paren_string paren_string)\n             (paren_list '())\n\
    \             (paren_count 0))\n    (if (string-empty? paren_string)\n       \
    \ (reverse paren_list)\n        (let ((char (char-at (string->list paren_string)\
    \ 0)))\n          (if (char= char #\\)\n              (loop (substring paren_string\
    \ 0 (- (string-length paren_string) 1))\n                    (cons (reverse paren_list)\
    \ paren_list)\n                    (incf paren_count))\n              (loop (substring\
    \ paren_string 0 (+ 1 char))\n                    (cons (reverse (cons (reverse\
    \ paren_list) '())) paren_list)\n                    (if (char= char #\\)\n  \
    \                      (incf paren_count)\n                        (incf paren_count))))))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string) groups]\n      [(equal? (first paren_string) '(#\\\
    Space)) (loop (rest paren_string) (cons groups '()))]\n      [(equal? (first paren_string)\
    \ '(#\\Newline)) (loop (rest paren_string) (cons groups '()))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons groups '()))]\n\
    \      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons groups\
    \ '()))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons groups '()))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons groups '()))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons groups '()))]\n      [(equal? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons groups '()))]\n      [(equal? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons groups '()))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons groups '()))]\n\
    \      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons groups\
    \ '()))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons groups '()))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons groups '()))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons groups '()))]\n      [(equal? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons groups '()))]\n      [(equal? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons groups '()))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons groups '()))]\n\
    \      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (", " \
    \ (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string)\
    \ result)))])))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond ((string-empty? paren_string)\n           (reverse groups))\n\
    \          ((char=? (car paren_string) '(')\n           (loop (cdr paren_string)\
    \ (cons (car paren_string) groups)))\n          ((char=? (car paren_string) '[')\n\
    \           (loop (cdr paren_string) (cons (car paren_string) groups)))\n    \
    \      ((char=? (car paren_string) '{')\n           (loop (cdr paren_string) (cons\
    \ (car paren_string) groups)))\n          ((char=? (car paren_string) '(')\n \
    \          (loop (cdr paren_string) (cons (car paren_string) groups)))\n     \
    \     ((char=? (car paren_string) '{')\n           (loop (cdr paren_string) (cons\
    \ (car paren_string) groups)))\n          ((char=? (car paren_string) '[')\n \
    \          (loop (cdr paren_string) (cons (car paren_string) groups)))\n     \
    \     ((char=? (car paren_string) '(')\n           (loop (cdr paren_string) (cons\
    \ (car paren_string) groups)))\n          ((char=? (car paren_string) '{')\n \
    \          (loop (cdr paren_string) (cons (car paren_string) groups)))\n     \
    \     ((char=? (car paren_string) '[')\n           (loop (cdr paren_string) (cons\
    \ (car paren_string) groups)))\n          ((char=? (car paren_string) '(')\n \
    \          (loop (cdr paren_string) (cons (car paren_string) groups)))\n     \
    \     ((char=? (car paren_string) '{')\n           (loop (cdr paren_string) (cons\
    \ (car paren_string) groups)))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char= (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) (cons (first groups)\
    \ groups))])]))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '())\n             (group (make-empty-string 0))\n             (group_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n   \
    \   [(char= (first paren_string) '(')\n       (loop (rest paren_string)\n    \
    \         (cons group groups)\n             (make-empty-string 0)\n          \
    \   (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest paren_string)\n   \
    \          (cons group groups)\n             (make-empty-string 0)\n         \
    \    (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest paren_string)\n   \
    \          (cons group groups)\n             (make-empty-string 0)\n         \
    \    (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest paren_string)\n   \
    \          (cons group groups)\n             (make-empty-string 0)\n         \
    \    (add1 group_count))\n       (loop (rest paren_string)\n             (cons\
    \ group groups)\n             (make-empty-string 0)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons group groups)\n        \
    \     (make-empty-string 0)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons group groups)\n             (make-empty-string\
    \ 0)\n             (add1 group_count))\n       (loop (rest ", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond ((null? paren_string) result)\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) result)))\n          ((char= (first paren_string) ')') (loop (rest\
    \ paren_string) (cons (first paren_string) result)))\n          (else (loop (rest\
    \ paren_string) (cons (first paren_string) result))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_group_list '())\n             (paren_group_count\
    \ 0))\n    (cond\n      [(empty? paren_string) paren_group_list]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_group_list) (add1 paren_group_count))\n        (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) (add1 paren_group_count))]\n  \
    \    [(char=? (first paren_string) ')') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (add1 paren_group_count))\n        (loop (rest\
    \ paren_string) (cons (first paren_string) paren_group_list) (add1 paren_group_count))]\n\
    \      [else (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (add1 paren_group_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (open_braces 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse groups)]\n      [(equal? (first paren_string)\
    \ '( () ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n            \
    \ (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (", " \
    \ (let loop ((paren_string paren_string)\n             (paren_group_list '())\n\
    \             (paren_group_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_group_list]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) (incf paren_group_count))]\n  \
    \    [(char= (first paren_string) ')') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (incf paren_group_count))]\n      [(char= (first\
    \ paren_string) '(#') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (incf paren_group_count))]\n      [(char= (first paren_string) '(#') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_group_list) (incf paren_group_count))]\n\
    \      [(char= (first paren_string) '(#') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (incf paren_group_count))]\n      [(char= (first\
    \ paren_string) '(#') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (incf paren_group_count))]\n      [(char= (first paren_string) '(#') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_group_list) (incf paren_group_count))]\n\
    \      [(char= (first paren_string) '(#') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (incf paren_group_count))]\n      [(char= (first\
    \ paren_string) '(#') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (incf paren_group_count))]\n      [(char= (first paren_string) '(#') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_group_list) (incf paren_group_count))]\n\
    \      [(char= (first paren_string) '(#') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (incf paren_group_count))]\n      [(char= (first\
    \ paren_string) '(#') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (inc", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (if (empty? paren_string)\n        result\n        (loop (rest paren_string)\n\
    \              (cons (first paren_string)\n                    (loop (rest paren_string)\n\
    \                          result))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_group_list '())\n             (paren_group_size 0))\n   \
    \ (cond\n      [(empty? paren_string)\n       (reverse (cons (reverse paren_group_list)\
    \ paren_group_list))]\n      [(equal? (first paren_string) '(#\\))\n       (loop\
    \ (rest paren_string)\n             (cons (reverse (first paren_string)) paren_group_list)\n\
    \             (+ paren_group_size 1))]\n      [(equal? (first paren_string) '(#\\\
    ))\n       (loop (rest paren_string)\n             (cons (reverse (first paren_string))\
    \ paren_group_list)\n             (- paren_group_size 1))]\n      [else\n    \
    \   (loop (rest paren_string)\n             (cons (first paren_string) paren_group_list)\n\
    \             (+ paren_group_size 1))]\n    )\n  )\n)\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '()))\n    (cond ((null? paren_string)\n\
    \           (reverse groups))\n          ((char= (first paren_string) '( (char=\
    \ (first paren_string) ')) ))\n          ((char= (first paren_string) '( (char=\
    \ (first paren_string) '( (char= (first paren_string) ')) ))\n           (loop\
    \ (rest paren_string) (cons (first paren_string) groups)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ ')) ))\n           (loop (rest paren_string) (cons (first paren_string) groups))))\n\
    \    (loop (rest paren_string) (cons (first paren_string) groups))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n \
    \     [(empty? paren_string)\n       (reverse groups)]\n      [(char=? (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) groups))\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) groups))))]\n      [else\n   \
    \    (loop (rest paren_string)\n             (cons (first paren_string) groups))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_list]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (incf paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (cons (first paren_string) paren_list) (incf\
    \ paren_count))]\n      [else (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (incf paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(equal? (first\
    \ paren_string) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) paren_list)\n             (+ paren_count 1))]\n      [(equal?\
    \ (first paren_string) '(#\\))\n       (loop (rest paren_string)\n           \
    \  (cons (first paren_string) paren_list)\n             (- paren_count 1))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (+ paren_count\
    \ 1))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (- paren_count\
    \ 1))]\n      [else\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) paren_list)\n             (+ paren_count 1))]\n      )))\n", " \
    \ (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\
    \ ((null? paren_string)\n           (reverse result))\n          ((char=? (car\
    \ paren_string) '( () ( () ))\n           (loop (cdr paren_string) (cons (car\
    \ paren_string) result)))\n          ((char=? (car paren_string) '( () ))\n  \
    \         (loop (cdr paren_string) (cons (car paren_string) result)))\n      \
    \    ((char=? (car paren_string) '( () ))\n           (loop (cdr paren_string)\
    \ (cons (car paren_string) result)))\n          ((char=? (car paren_string) '(\
    \ () ))\n           (loop (cdr paren_string) (cons (car paren_string) result)))\n\
    \          ((char=? (car paren_string) '( () ))\n           (loop (cdr paren_string)\
    \ (cons (car paren_string) result)))\n          ((char=? (car paren_string) '(\
    \ () ))\n           (loop (cdr paren_string) (cons (car paren_string) result)))\n\
    \          ((char=? (car paren_string) '( () ))\n           (loop (cdr paren_string)\
    \ (cons (car paren_string) result)))\n          ((char=? (car paren_string) '(\
    \ () ))\n           (loop (cdr paren_string) (cons (car paren_string) result)))\n\
    \          ((char=? (car paren_string) '( () ))\n           (loop (cdr paren_string)\
    \ (cons (car paren_string) result)))\n          ((char=? (car paren_string) '(\
    \ () ))\n           (loop (cdr paren_string) (cons (car paren_string) result)))\n\
    \          ((char=? (car paren_string) '( () ))\n           (loop (cdr paren_string)\
    \ (cons (car paren_string) result)))\n          ((char=? (car paren_string) '(\
    \ () ))\n           (loop (cdr paren_string) (cons (car paren_string) result)))\n\
    \          ((char=? (car paren_string) '( () ))\n           (loop (cdr paren_string)\
    \ (cons (car paren_string) result)))\n          ((char=? (car paren_string) '(\
    \ () ))\n           (loop (cdr paren_string) (cons (car paren_string) result)))\n\
    \          ((", "  (let loop ((paren_string paren_string)\n             (paren_group_list\
    \ '())\n             (paren_group_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse (list paren_group_list))]\n      [(char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren_string) '( ([char=? (car paren_string) '( ([char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren_string) '( ([char=? (car paren_string) '( ([char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren_string) '( ([char=? (car paren_string) '( ([char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren_string) '( ([char=? (car paren_string) '( ([char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren_string) '( ([char=? (car paren_string) '( ([char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren_string) '( ([char=? (car paren_string) '( ([char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren_string) '( ([char=? (car paren_string) '( ([char=? (car paren_string)\
    \ '( ([char=? (car paren_string) '( ([char=? (car paren_string) '( ([char=? (car\
    \ paren", "  (let loop ((paren_string paren_string)\n             (groups '()))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n      [(char=?\
    \ (first paren_string) '(\n              (loop (rest paren_string)\n         \
    \           (cons (first paren_string) groups)))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups))]\n      )))\n",
  "  (let ([paren_groups '()])\n    (cond\n      [(empty? paren_string) paren_groups]\n\
    \      [(char=? (first paren_string) '(') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '{') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '[) (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '(') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '{') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '[) (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '(') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '{') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '[) (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '(') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '{') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '[) (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '(') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '{') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '[) (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '(') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '{') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '[) (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '(') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string) '{') (add-to-paren-groups paren_groups paren_string)]\n\
    \      [(char=? (first paren_string", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) result)))]\n      [(equal? (first paren_string) '{') (loop (rest\
    \ paren_string) (cons (first paren_string) result)))]\n      [(equal? (first paren_string)\
    \ '[') (loop (rest paren_string) (cons (first paren_string) result)))]\n     \
    \ [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '[')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '[')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '[')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '[')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '[')\
    \ (loop (rest paren_string) (cons (first paren_string) ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (open_braces '()))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse (append paren_list open_braces))]\n\
    \      [(char=? (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) paren_list)\n                \
    \    (cons (first paren_string) open_braces)))]\n      [(char=? (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) paren_list)\n                    (append open_braces (list (first\
    \ paren_string))))]\n      [else\n       (loop (rest paren_string)\n         \
    \    (cons (first paren_string) paren_list)\n             (append open_braces\
    \ (list (first paren_string))))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string)\n       (reverse paren_list)]\n      [(char= (first\
    \ paren_string) '(\n          (loop (rest paren_string)\n                (cons\
    \ (first paren_string) paren_list)\n                (add1 paren_count)))]\n  \
    \    [(char= (first paren_string) '(\n          (loop (rest paren_string)\n  \
    \              (cons (first paren_string) paren_list)\n                (add1 paren_count)))]\n\
    \      [(char= (first paren_string) '(\n          (loop (rest paren_string)\n\
    \                (cons (first paren_string) paren_list)\n                (add1\
    \ paren_count)))]\n      [(char= (first paren_string) '(\n          (loop (rest\
    \ paren_string)\n                (cons (first paren_string) paren_list)\n    \
    \            (add1 paren_count)))]\n      [(char= (first paren_string) '(\n  \
    \        (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(char= (first paren_string)\
    \ '(\n          (loop (rest paren_string)\n                (cons (first paren_string)\
    \ paren_list)\n                (add1 paren_count)))]\n      [(", "  (let loop\
    \ ((paren_string paren_string)\n             (groups '()))\n    (cond [(empty?\
    \ paren_string) groups]\n          [(char=? (car paren_string) '(') (loop (cdr\
    \ paren_string) (cons (car paren_string) groups)))]\n          [(char=? (car paren_string)\
    \ ')') (loop (cdr paren_string) (cons (car paren_string) groups))]\n         \
    \ [else (loop (cdr paren_string) (cons (car paren_string) groups))])))\n", " \
    \ (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse groups)]\n      [(char=? (car paren_string)\
    \ '(')\n       (loop (cdr paren_string) (cons (car paren_string) groups))]\n \
    \     [else\n       (loop (cdr paren_string) (cons (car paren_string) groups))]\n\
    \      )))\n", "  (let loop ((paren_string paren_string)\n             (paren_groups\
    \ ()))\n    (cond\n      [(empty? paren_string)\n       (reverse paren_groups)]\n\
    \      [(char= (first paren_string) '(')\n       (loop (rest paren_string)\n \
    \            (cons (first paren_string) paren_groups))]\n      [else\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string)\n             \
    \     (loop (rest paren_string)\n                         (cons (first paren_string)\
    \ paren_groups))))])))\n", "  (let loop ((paren_string paren_string)\n       \
    \      (result '()))\n    (cond [(empty? paren_string) result]\n          [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n          [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n          [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \       [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons\
    \ (first paren_string) result))]\n          [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n          [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n          [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n          [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \       [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons\
    \ (first paren_string) result))]\n          [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n          [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n          [(char=? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n          [(char=? (first paren_string)\
    \ '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n   \
    \       [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons\
    \ (first paren_string) result))]\n          [(char=? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) result))]\n          [(char=?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n          [(char", "  (let loop ((paren_string paren_string)\n  \
    \           (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(equal? (first paren_string) '(\n                  (loop (rest\
    \ paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)\n      \
    \                   (cons (first paren_string) groups))\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups))\n\
    \                  (loop (rest paren_string)\n                         (cons (first\
    \ paren_string) groups))\n                  (loop (rest paren_string)", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (open_braces '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ paren_list)]\n      [(char=? (first paren_string) '( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '()))\n    (cond ((empty? paren_string)\n\
    \           (reverse groups))\n          ((char=? (first paren_string) '(\n  \
    \                   (loop (rest paren_string)\n                           (cons\
    \ (first paren_string) groups))\n                       (rest paren_string)))\n\
    \           (loop (rest paren_string)\n                 (cons (first paren_string)\
    \ groups)\n                 (rest paren_string)))\n          ((char=? (first paren_string)\
    \ ')\n           (loop (rest paren_string)\n                 (cons (first paren_string)\
    \ groups)\n                 (rest paren_string)))\n          (else\n         \
    \  (loop (rest paren_string)\n                 (cons (first paren_string) groups)\n\
    \                 (rest paren_string))))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond [(empty? paren_string) result]\n      \
    \    [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) result)))]\n          [(char=? (first paren_string) ')') (loop\
    \ (rest paren_string) (cons (first paren_string) result))]\n          [else (loop\
    \ (rest paren_string) (cons (first paren_string) result))]))))\n", "  (let ([paren_groups\
    \ (string-split paren_string)])\n    (cond\n      [(empty? paren_groups) '()]\n\
    \      [(not (member (first paren_groups) '())) (cons (first paren_groups) (separate_paren_groups\
    \ (rest paren_groups)))]\n      [else (separate_paren_groups (rest paren_groups))])))\n",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (group_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (add1 group_count))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\n\
    \                   (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (add1 group_count))))]\n\
    \      [else\n       (loop (", "  (let loop ((paren_string paren_string)\n   \
    \          (groups ())\n             (group_count 0))\n    (if (empty? paren_string)\n\
    \        (reverse groups)\n        (let ((char (car paren_string)))\n        \
    \  (if (char= char #\\)\n              (loop (cdr paren_string)\n            \
    \        (cons (cons char groups) groups)\n                    (+ group_count\
    \ 1)))\n              (loop (cdr paren_string)\n                    (cons (cons\
    \ char groups) groups)\n                    (+ group_count 1))))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_group_list '())\n   \
    \          (paren_group_count 0))\n    (cond\n      [(empty? paren_string) paren_group_list]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (add1 paren_group_count))]\n      [(char=? (first\
    \ paren_string) ')') (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ (add1 paren_group_count))\n       (else (loop (rest paren_string) (cons (first\
    \ paren_string) paren_group_list) (add1 paren_group_count)))]\n      [else (loop\
    \ (rest paren_string) (cons (first paren_string) paren_group_list) (add1 paren_group_count)))]\n\
    \    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n \
    \     [(equal? (car paren_string) '(\n                   (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups)))]\n      [(equal?\
    \ (car paren_string) '(\n                   (loop (cdr paren_string)\n       \
    \                  (cons (car paren_string) groups))\n                   (loop\
    \ (cdr paren_string)\n                         (cons (car paren_string) groups)))]\n\
    \      [(equal? (car paren_string) '(\n                   (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \   (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                   (loop (cdr paren_string)\n                    \
    \     (cons (car paren_string) groups))\n                   (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \   (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                   (loop (cdr paren_string)\n                    \
    \     (cons (car paren_string) groups))\n                   (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \   (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                   (loop (cdr paren_string)\n                    \
    \     (cons (car paren_string) groups))\n                   (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \   (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                   (loop (cdr paren_string)\n                    \
    \     (cons (car paren_string) groups))\n                   (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \   (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                   (loop (cdr paren_string)\n                    \
    \     (cons (car paren_string) groups))\n                   (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \   (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                  ", "  (let loop ((paren_string paren_string)\n \
    \            (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [else\n       (loop (rest paren_string)\
    \ (cons (first paren_string) (cons (rest paren_string) groups))])])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond [(empty?\
    \ paren_string) result]\n          [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) result)))]\n          [(char=? (first\
    \ paren_string) ')') (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \          [else (loop (rest paren_string) (cons (first paren_string) result))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '())\n         \
    \    (group_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char= (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (add1 group_count))]\n\
    \      [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups)\n             (add1 group_count))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups)\n             (add1 group_count))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) groups)\n\
    \             (add1 group_count))\n       (loop (rest paren_string)\n        \
    \     (cons (first paren_string) groups)\n             (add1 group_count))\n \
    \      (", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (cond\n      [(empty? paren_string) result]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) result))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) result))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups ()))\n    (cond ((empty?\
    \ paren_string)\n           (reverse groups))\n          ((char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '(", "  (let ([paren_groups\
    \ (regexp-split paren_string #\"\\(\\)\" #t #t)])\n    (cond\n      [(empty? paren_groups)\
    \ '()]\n      [(not (member (first paren_groups) '())) (cons (first paren_groups)\
    \ (separate_paren_groups (rest paren_string)))]\n      [else (separate_paren_groups\
    \ (rest paren_string))]))))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (paren_list '())\n             (current_group ''))\n    (cond\n  \
    \    [(empty? paren_string)\n       (reverse (list current_group))]\n      [(char=\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) paren_list)\n             (first paren_string)))]\n   \
    \   [(char= (first paren_string) ')')\n       (loop (rest paren_string)\n    \
    \         (cons (first paren_string) paren_list)\n             (first paren_string))\n\
    \       (reverse (list current_group))]\n      [else\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (first paren_string))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (first paren_string))\n       (reverse (list current_group))]]))))\n",
  "  (let ([paren_groups (regexp-split paren_string #\"\\((?!\\))\" #t #t)])\n   \
    \ (map (lambda (group) (substring group 0 -1))\n         paren_groups)))\n", " \
    \ (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first\
    \ paren_string) '(#\\))\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [else\n       (loop (rest paren_string) (cons (first paren_string)\
    \ (cons (first groups) groups))\n             (rest groups))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (groups '())\n             (group_count\
    \ 0))\n    (if (empty? paren_string)\n        (reverse groups)\n        (let ((char\
    \ (first paren_string)))\n          (if (char= char #\\)\n              (loop\
    \ (rest paren_string)\n                    (cons (first paren_string) groups)\n\
    \                    (+ group_count 1)))\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) groups)\n                    (+\
    \ group_count 1))))))))\n", "  (let loop ((paren_string paren_string)\n      \
    \       (result '()))\n    (cond\n      [(empty? paren_string) result]\n     \
    \ [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '[')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '[') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '[') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '[') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) '[') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(equal? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (current_group ''))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse (list current_group))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) paren_list)\n             (first paren_string)))]\n\
    \      [(equal? (first paren_string) ')')\n       (loop (rest paren_string)\n\
    \             (reverse (cons (first paren_string) paren_list))\n             (first\
    \ paren_string))])\n      [(equal? (first paren_string) '(#|[|])\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (first paren_string)))]\n      [(equal? (first paren_string) '(#|[|])\n\
    \       (loop (rest paren_string)\n             (reverse (cons (first paren_string)\
    \ paren_list))\n             (first paren_string))])\n      [(equal? (first paren_string)\
    \ '(#|[|])\n       (loop (rest paren_string)\n             (reverse (cons (first\
    \ paren_string) paren_list))\n             (first paren_string))])\n      [(equal?\
    \ (first paren_string) '(#|[|])\n       (loop (rest paren_string)\n          \
    \   (reverse (cons (first paren_string) paren_list))\n             (first paren_string))])\n\
    \      [(equal? (first paren_string) '(#|[|])\n       (loop (rest paren_string)\n\
    \             (reverse (cons (first paren_string) paren_list))\n             (first\
    \ paren_string))])\n      [(equal? (first paren_string) '(#|[|])\n       (loop\
    \ (rest paren_string)\n             (reverse (cons (first paren_string) paren_list))\n\
    \             (first paren_string))])\n      [(equal? (first paren_string) '(#|[|])\n\
    \       (loop (rest paren_string)\n             (reverse (cons (first paren_string)\
    \ paren_list))\n             (first paren_string))])\n      [(equal? (first paren_string)\
    \ '(#|[|])\n       (loop (rest paren_string)\n             (reverse (cons (first\
    \ paren_string) paren_list))\n             (first paren_string))])\n      [(equal?\
    \ (first paren_string) '(#|[|])\n       (loop (rest paren_string)\n          \
    \   (reverse (cons (first paren_string) paren_list))\n             (first paren_string))])",
  "  (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string) groups]\n      [(equal? (car paren_string) '(')\
    \ (loop (cdr paren_string) (cons (car paren_string) groups)))]\n      [(equal?\
    \ (car paren_string) ')') (loop (cdr paren_string) (cons (car paren_string) groups))]\n\
    \      [(equal? (car paren_string) '(') (loop (cdr paren_string) (cons (car paren_string)\
    \ groups))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string) (cons\
    \ (car paren_string) groups))]\n      [else (loop (cdr paren_string) (cons (car\
    \ paren_string) groups))])))\n", "  (let loop ((paren_string paren_string)\n \
    \            (groups '())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string) groups]\n      [(char= (char (first paren_string)) #\\) (incf\
    \ group_count)]\n      [(char= (char (first paren_string)) #\\)]\n      [(char=\
    \ (char (first paren_string)) #\\)]\n      [(char= (char (first paren_string))\
    \ #\\)]\n      [(char= (char (first paren_string)) #\\)]\n      [(char= (char\
    \ (first paren_string)) #\\)]\n      [(char= (char (first paren_string)) #\\)]\n\
    \      [(char= (char (first paren_string)) #\\)]\n      [(char= (char (first paren_string))\
    \ #\\)]\n      [(char= (char (first paren_string)) #\\)]\n      [(char= (char\
    \ (first paren_string)) #\\)]\n      [(char= (char (first paren_string)) #\\)]\n\
    \      [(char= (char (first paren_string)) #\\)]\n      [(char= (char (first paren_string))\
    \ #\\)]\n      [(char= (char (first paren_string)) #\\)]\n      [(char= (char\
    \ (first paren_string)) #\\)]\n      [(char= (char (first paren_string)) #\\)]\n\
    \      [(char= (char (first paren_string)) #\\)]\n      [(char= (char (first paren_string))\
    \ #\\)]\n      [(char= (char (first paren_string)) #\\)]\n      [(char= (char\
    \ (first paren_string)) #\\)]\n      [(char= (char (first paren_string)) #\\)]\n\
    \      [(char= (char (first paren_string)) #\\)]\n      [(char= (char (first paren_string))\
    \ #\\)]\n      [(char= (char (first paren_string)) #\\)]\n      [(char= (char\
    \ (first paren_string)) #\\)]\n      [(char= (char (first paren_string)) #\\)]\n\
    \      [(char= (char (first paren_string)) #\\)]\n      [(char= (char (first paren_string))\
    \ #\\)]\n      [(char= (char (first paren_string)) #\\)]\n      [(char= (char\
    \ (first paren_string)) #\\)]\n      [(char= (char (first paren_string)) #\\)]\n\
    \      [(char= (char (first paren_string)) #\\)]\n      [(char= (char (first paren_string",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse result)]\n      [(char=? (first\
    \ paren_string) '(\n               (loop (rest paren_string)\n               \
    \        (cons (first paren_string) result)))]\n      [(char=? (first paren_string)\
    \ '(\n               (loop (rest paren_string)\n                       (cons (first\
    \ paren_string) result)))]\n      [(char=? (first paren_string) '(\n         \
    \      (loop (rest paren_string)\n                       (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(\n               (loop (rest\
    \ paren_string)\n                       (cons (first paren_string) result)))]\n\
    \      [(char=? (first paren_string) '(\n               (loop (rest paren_string)\n\
    \                       (cons (first paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '(\n               (loop (rest paren_string)\n        \
    \               (cons (first paren_string) result)))]\n      [(char=? (first paren_string)\
    \ '(\n               (loop (rest paren_string)\n                       (cons (first\
    \ paren_string) result)))]\n      [(char=? (first paren_string) '(\n         \
    \      (loop (rest paren_string)\n                       (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(\n               (loop (rest\
    \ paren_string)\n                       (cons (first paren_string) result)))]\n\
    \      [(char=? (first paren_string) '(\n               (loop (rest paren_string)\n\
    \                       (cons (first paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '(\n               (loop (rest paren_string)\n        \
    \               (cons (first paren_string) result)))]\n      [(char=? (first paren_string)\
    \ '(\n               (loop (rest paren_string)\n                       (cons (first\
    \ paren_string) result)))]\n      [(char=? (first paren_string) '(\n         \
    \      (loop (rest paren_string)\n                       (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(\n               (loop (rest\
    \ paren_string)\n                       (cons (first paren_string) result)))]\n\
    \      [(char=? (first paren_string) '(\n               (loop (rest ", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_list '())\n         \
    \    (paren_count 0))\n    (if (empty? paren_string)\n        paren_list\n   \
    \     (loop (rest paren_string)\n              (cons (first paren_string)\n  \
    \                  (loop (rest paren_string)\n                          (cons\
    \ (first paren_string)\n                                (loop (rest paren_string)\n\
    \                                      (cons (first paren_string)\n          \
    \                                  (loop (rest paren_string)\n               \
    \                                   (cons (first paren_string)\n             \
    \                                             (loop (rest paren_string)\n    \
    \                                                              (cons (first paren_string)\n\
    \                                                                        (loop\
    \ (rest paren_string)\n                                                      \
    \                        (cons (first paren_string)\n                        \
    \                                                              (loop (rest paren_string)\n\
    \                                                                            \
    \                (cons (first paren_string)\n                                \
    \                                                                  (loop (rest\
    \ paren_string)\n                                                            \
    \                                            (cons (first paren_string)\n    \
    \                                                                            \
    \                              (loop (rest paren_string)\n                   \
    \                                                                            \
    \                     (cons (first paren_string)\n                           \
    \                                                                            \
    \                   (loop (rest paren_string)\n                              \
    \                                                                            \
    \                          (cons (first paren_string)\n                      \
    \                                                                            \
    \                        (loop (rest paren_string)\n                         \
    \                                                                            \
    \                               (cons (first paren_string)\n                 \
    \                                                                            \
    \                             (loop (rest paren_string)\n                    \
    \                                                                            \
    \                                    (cons (first paren_string)\n            \
    \                                                                            \
    \                                  (loop (rest paren_string)\n               \
    \                                                                            \
    \                                         (cons (first paren_string)\n       \
    \                                                                            \
    \                                       (loop (rest paren_string)\n          \
    \                                                                            \
    \                                              (cons (first paren_string)\n  \
    \                                                                            \
    \                                            (loop (rest paren_string)\n     \
    \                                                                            \
    \                                                   (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     (cons (first paren_string)\n\
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                     ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string) paren_list]\n      [(char= (first paren_string)\
    \ '( () ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n             (paren_group_list\
    \ '())\n             (paren_group_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_group_list]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) 1)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ 2)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) paren_group_list) 3)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ 4)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) paren_group_list) 5)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ 6)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) paren_group_list) 7)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ 8)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons\
    \ (first paren_string) paren_group_list) 9)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ 10)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) 11)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) paren_group_list)\
    \ 12)]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) 13)]\n      [(char= (first paren_string)\
    \ '( () )) (loop (", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond\n      [(empty? paren_string) groups]\n      [(char= (first\
    \ paren_string) '( () )]\n      [else\n       (loop (rest paren_string)\n    \
    \         (cons (first paren_string) groups))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) (cons (first groups)\
    \ groups))])]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome! If this answer solved your\
    \ problem, please consider accepting it by clicking the check mark next to it.\n\
    <|/ c |>\n<| c |>\nI did but I'm new here and I didn't know how to. Thanks again!\n\
    <|/ c |>\n<| c |>\nNo problem! Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  (let loop ((paren_string paren_string)\n             (groups '()))\n\
    \    (if (empty? paren_string)\n        (reverse groups)\n        (let ((char\
    \ (car paren_string)))\n          (if (char= char #\\)\n              (loop (cdr\
    \ paren_string)\n                    (cons (car paren_string) groups))\n     \
    \         (loop (cdr paren_string)\n                    (cons (car paren_string)\
    \ (cons char groups)))))))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (groups '())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string) groups]\n      [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) groups) (add1 group_count))]\n    \
    \  [(char=? (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (add1 group_count))]\n      [(char=? (first paren_string) '[) (loop\
    \ (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (add1 group_count))]\n      [(char=? (first paren_string)\
    \ '{') (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [(char=? (first paren_string) '[) (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (add1 group_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [(char=? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (add1 group_count))]\n      [(char=? (first paren_string)\
    \ '[) (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (add1 group_count))]\n      [(char=? (first paren_string)\
    \ '{') (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [(char=? (first paren_string) '[) (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (add1 group_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [(char=? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (add1 group_count))]\n      [(char=? (first paren_string)\
    \ '[) (loop (rest ", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_list]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count))]\n      [(char= (first\
    \ paren_string) ')') (loop (rest paren_string) (cons (first paren_string) paren_list)\
    \ (sub1 paren_count))]\n      [else (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 paren_count))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups ())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse groups)]\n      [(char=? (first paren_string)\
    \ '( () ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n          \
    \   (groups ()))\n    (cond ((string-length paren_string)\n           (reverse\
    \ groups))\n          ((char= (first paren_string) '(')\n           (loop (rest\
    \ paren_string)\n                 (cons (first paren_string) groups))))\n    \
    \      ((char= (first paren_string) '[')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string) groups))))\n          ((char= (first\
    \ paren_string) '{')\n           (loop (rest paren_string)\n                 (cons\
    \ (first paren_string) groups))))\n          ((char= (first paren_string) '(')\n\
    \           (loop (rest paren_string)\n                 (cons (first paren_string)\
    \ groups))))\n          ((char= (first paren_string) '{')\n           (loop (rest\
    \ paren_string)\n                 (cons (first paren_string) groups))))\n    \
    \      ((char= (first paren_string) '[')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string) groups))))\n          ((char= (first\
    \ paren_string) '(')\n           (loop (rest paren_string)\n                 (cons\
    \ (first paren_string) groups))))\n          ((char= (first paren_string) '{')\n\
    \           (loop (rest paren_string)\n                 (cons (first paren_string)\
    \ groups))))\n          ((char= (first paren_string) '[')\n           (loop (rest\
    \ paren_string)\n                 (cons (first paren_string) groups))))\n    \
    \      ((char= (first paren_string) '(')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string) groups))))\n          ((char= (first\
    \ paren_string) '{')\n           (loop (rest paren_string)\n                 (cons\
    \ (first paren_string) groups))))\n          ((char= (first paren_string) '[')\n\
    \           (loop (rest paren_string)\n                 (cons (first paren_string)\
    \ groups))))\n          ((char= (first paren_string) '(')\n           (loop (rest\
    \ paren_string)\n                 (cons (first paren_string) groups))))\n    \
    \      ((char= (first paren_string) '{')\n           (loop (rest paren_string)\n\
    \                 (cons (first paren_string) groups))))\n          ((char= (first\
    \ paren_string) '[')\n           (loop (rest paren_string)\n                 (cons\
    \ (first paren_string) groups))))\n          ((char= (", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '( () ( () () () ) ) ) \n     \
    \  (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '( () () () ) ) \n       (loop (rest paren_string) (cons\
    \ (first paren_string) result))]\n      [(char=? (first paren_string) '( () ()\
    \ ) ) \n       (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '( () ) ) \n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(\
    \ () ) ) \n       (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '( () ) ) \n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(\
    \ () ) ) \n       (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '( () ) ) \n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(\
    \ () ) ) \n       (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '( () ) ) \n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(\
    \ () ) ) \n       (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '( () ) ) \n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(\
    \ () ) ) \n       (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '( () ) ) \n       (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(\
    \ () ) ) \n       (loop (rest paren_string) (cons (first ", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string paren_string)\n             (paren_string\
    \ paren_string)\n             (paren_string ", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) result)))]\n      [(equal? (first paren_string) ')') (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [else (loop (rest\
    \ paren_string) (cons (first paren_string) result))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_group_list '())\n             (paren_group_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse (list paren_group_list))]\n\
    \      [(char=? (first paren_string) '( () ( () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () () () ()\
    \ () () () () () () () () () () () () () () () () () () () () () () () ", "  (let\
    \ loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n \
    \     [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first\
    \ paren_string) '(#\\))\n       (loop (rest paren_string)\n             (cons\
    \ (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\))\n\
    \       (loop (rest paren_string)\n             (cons (first paren_string) groups))]\n\
    \      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (rest paren_string)\n\
    \             (cons (first paren_string) groups))]\n      [(equal? (first paren_string)\
    \ '(#\\))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\))\n       (loop (", " \
    \ (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(equal?\
    \ (first paren_string) ')') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [else (loop (rest paren_string) (cons (first paren_string)\
    \ result))])))\n", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (cond [(empty? paren_string) result]\n          [(char=? (car paren_string)\
    \ '(') (loop (cdr paren_string) (cons (car paren_string) result))]\n         \
    \ [(char=? (car paren_string) '{') (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n          [(char=? (car paren_string) '[') (loop (cdr paren_string)\
    \ (cons (car paren_string) result))]\n          [(char=? (car paren_string) '{')\
    \ (loop (cdr paren_string) (cons (car paren_string) result))]\n          [(char=?\
    \ (car paren_string) '(') (loop (cdr paren_string) (cons (car paren_string) result))]\n\
    \          [(char=? (car paren_string) '{') (loop (cdr paren_string) (cons (car\
    \ paren_string) result))]\n          [(char=? (car paren_string) '[') (loop (cdr\
    \ paren_string) (cons (car paren_string) result))]\n          [(char=? (car paren_string)\
    \ '{') (loop (cdr paren_string) (cons (car paren_string) result))]\n         \
    \ [(char=? (car paren_string) '(') (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n          [(char=? (car paren_string) '{') (loop (cdr paren_string)\
    \ (cons (car paren_string) result))]\n          [(char=? (car paren_string) '[')\
    \ (loop (cdr paren_string) (cons (car paren_string) result))]\n          [(char=?\
    \ (car paren_string) '{') (loop (cdr paren_string) (cons (car paren_string) result))]\n\
    \          [(char=? (car paren_string) '(') (loop (cdr paren_string) (cons (car\
    \ paren_string) result))]\n          [(char=? (car paren_string) '{') (loop (cdr\
    \ paren_string) (cons (car paren_string) result))]\n          [(char=? (car paren_string)\
    \ '[') (loop (cdr paren_string) (cons (car paren_string) result))]\n         \
    \ [(char=? (car paren_string) '{') (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n          [(char", "  (let loop ((paren_string paren_string)\n  \
    \           (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) groups)))]\n      [(char= (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) groups))\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) groups))))]\n      [else\n   \
    \    (loop (rest paren_string)\n             (cons (first paren_string) groups))])))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '<)\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '#) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '#)\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '#) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '#)\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '#) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '#)\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '#) (loop (rest paren_string)\
    \ (cons (first paren_string", "  (let loop ((paren_string paren_string)\n    \
    \         (result '()))\n    (cond ((empty? paren_string) result)\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) ')) result)\n          \
    \ (loop (rest paren_string) (cons (first paren_string) result)))\n          ((char=\
    \ (first paren_string) '( (char= (first ", "  (let loop ((paren_string paren_string)\n\
    \             (paren_list '())\n             (open_braces '()))\n    (cond\n \
    \     [(empty? paren_string) empty]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 open_braces))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 open_braces))]\n      [(char=? (first paren_string)\
    \ '[') (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ open_braces))]\n      [(char=? (first paren_string) ']') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 open_braces))]\n      [(char=? (first paren_string) '}') (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (add1 open_braces))]\n\
    \      [(char=? (first paren_string) '#lang) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 open_braces))]\n      [(char=? (first paren_string)\
    \ '#lang) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ open_braces))]\n      [(char=? (first paren_string) '#lang) (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 open_braces))]\n      [(char=?\
    \ (first paren_string) '#lang) (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 open_braces))]\n      [(char=? (first paren_string) '#lang)\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 open_braces))]\n\
    \      [(char=? (first paren_string) '#lang) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 open_braces))]\n      [(char=? (first paren_string)\
    \ '#lang) (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ open_braces))]\n      [(char=? (first paren_string) '#", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_group_list '())\n             (paren_group_count\
    \ 0))\n    (cond\n      [(empty? paren_string) paren_group_list]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [else (loop (rest paren_string)\
    \ (cons (first paren_string) paren_group_list) (add1 paren_group_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_groups ()))\n   \
    \ (if (empty? paren_string)\n        paren_groups\n        (loop (rest paren_string)\n\
    \               (cons (first paren_string) (loop (rest paren_string) (cons (first\
    \ paren_string) paren_groups))))))))\n", "  (let ([paren_groups (regexp-split\
    \ paren_string #\"\\((?!\\()\") ])\n        paren_groups (remove-if (lambda (x)\
    \ (not (equal? (car x) '('))) paren_groups)])\n    (remove-if (lambda (x) (equal?\
    \ (car x) '(')) paren_groups)))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond ((string-empty? paren_string)\n       \
    \    (reverse groups))\n          ((char= (first paren_string) '(\n          \
    \    (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ groups))))\n          ((char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) (cons (first paren_string)\
    \ groups))))\n          ((char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) (cons (first paren_string)\
    \ (cons (first paren_string) groups))))))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) (cons (first paren_string) (cons (first paren_string) (cons (first\
    \ paren_string) groups))))))\n          ((char= (first paren_string) '(\n    \
    \          (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ (cons (first paren_string) (cons (first paren_string) (cons (first paren_string)\
    \ (cons (first paren_string) groups))))))))\n          ((char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) (cons (first paren_string) (cons (first paren_string) (cons (first\
    \ paren_string) (cons (first paren_string) (cons (first paren_string) groups))))))))\n\
    \          ((char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) (cons (first paren_string) (cons\
    \ (first paren_string) (cons (first paren_string) (cons (first paren_string) (cons\
    \ (first paren_string) (cons (first paren_string) groups))))))))\n          ((char=\
    \ (first paren_string) '(\n              (loop (rest paren_string)\n         \
    \           (cons (first paren_string) (cons (first paren_string) (cons (first\
    \ paren_string) (cons (first paren_string) (cons (first paren_string) (cons (first\
    \ paren_string) (cons (first paren_string) (cons (first paren_string) groups))))))))\n\
    \          ((char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) (cons (first paren_string) (cons\
    \ (first paren_string) (cons (first paren_string) (cons (first paren_string",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (open_braces '()))\n    (cond ((null? paren_string)\n           (reverse\
    \ paren_list))\n          ((char=? (car paren_string) '( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result)))]\n      [(char=?\
    \ (first ", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (open_braces '()))\n    (cond\n      [(empty? paren_string)\
    \ empty]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (cons\
    \ (first paren_string) paren_list) (add1 open_braces))]\n      [(equal? (first\
    \ paren_string) ')') (loop (rest paren_string) (cons (first paren_string) paren_list)\
    \ (add1 open_braces))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 open_braces))]\n      [(equal?\
    \ (first paren_string) ')') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 open_braces))]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (add1 open_braces))]\n\
    \      [(equal? (first paren_string) ')') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 open_braces))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ open_braces))]\n      [(equal? (first paren_string) ')') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 open_braces))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 open_braces))]\n      [(equal? (first paren_string) ')') (loop\
    \ (rest paren_string) (cons (first paren_string) paren_list) (add1 open_braces))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 open_braces))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (cons (first paren_string) paren_list) (add1\
    \ open_braces))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 open_braces))]\n      [(equal?\
    \ (first paren_string) ')') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (add1 open_bra", "  (let loop ((paren_string paren_string)\n   \
    \          (result '()))\n    (cond\n      [(empty? paren_string) result]\n  \
    \    [(char=? (car paren_string) '(') (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n      [else (loop (cdr paren_string) (cons (car paren_string) result))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (current_group ())\n             (current_group_length 0))\n    (if (empty?\
    \ paren_string)\n        (reverse groups)\n        (let ((char (car paren_string)))\n\
    \          (if (char= char #\\)\n              (loop (cdr paren_string)\n    \
    \                (cons (cons current_group groups)\n                         \
    \ groups)\n                    (cons current_group groups)\n                 \
    \   (+ current_group_length 1))\n              (loop (cdr paren_string)\n    \
    \                (cons current_group\n                          groups)\n    \
    \                (cons current_group\n                          groups)\n    \
    \                (+ current_group_length 1)))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '())\n             (group_count 0))\n  \
    \  (cond\n      [(empty? paren_string) groups]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [else (loop (rest paren_string) (cons (first paren_string) groups) (add1\
    \ group_count))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (groups '()))\n    (cond\n      [(empty? paren_string) groups]\n      [(equal?\
    \ (car paren_string) '(#\\Space)) (loop (cdr paren_string) (cons (car paren_string)\
    \ groups))]\n      [(equal? (car paren_string) '(#\\Newline)) (loop (cdr paren_string)\
    \ (cons (car paren_string) groups))]\n      [(equal? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) groups))]\n      [(equal?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ groups))]\n      [(equal? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) groups))]\n      [(equal? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) groups))]\n      [(equal?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ groups))]\n      [(equal? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) groups))]\n      [(equal? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) groups))]\n      [(equal?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ groups))]\n      [(equal? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) groups))]\n      [(equal? (car paren_string) '(#\\\
    )) (loop (cdr paren_string) (cons (car paren_string) groups))]\n      [(equal?\
    \ (car paren_string) '(#\\)) (loop (cdr paren_string) (cons (car paren_string)\
    \ groups))]\n      [(equal? (car paren_string) '(#\\)) (loop (cdr paren_string)\
    \ (cons (car paren_string) groups))]\n      [(equal? (car paren_string) '(#\\\
    )) (loop (", "  (let loop ((paren_string paren_string)\n             (groups '())\n\
    \             (group_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (reverse groups)]\n      [(char=? (car paren_string) '(')\n       (loop (cdr\
    \ paren_string) (cons (car paren_string) groups) (add1 group_count))\n       (loop\
    \ (cdr paren_string) (cons (car paren_string) groups) (add1 group_count))]\n \
    \     [(char=? (car paren_string) ')')\n       (loop (cdr paren_string) (cons\
    \ (car paren_string) groups) (add1 group_count))\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) groups) (add1 group_count))]\n      [else\n       (loop\
    \ (cdr paren_string) (cons (car paren_string) groups) (add1 group_count))]\n \
    \   )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n             (paren_group_list\
    \ '())\n             (paren_group_string '()))\n    (if (empty? paren_string)\n\
    \        paren_group_list\n        (loop (rest paren_string)\n              (cons\
    \ (first paren_string)\n                    (loop (rest paren_string)\n      \
    \                    (cons (first paren_string)\n                            \
    \    (loop (rest paren_string)\n                                      (cons (first\
    \ paren_string)\n                                            (loop (rest paren_string)\n\
    \                                                  (cons (first paren_string)\n\
    \                                                          (loop (rest paren_string)\n\
    \                                                                  (cons (first\
    \ paren_string)\n                                                            \
    \              (loop (rest paren_string)\n                                   \
    \                                           (cons (first paren_string)\n     \
    \                                                                            \
    \     (loop (rest paren_string)\n                                            \
    \                                                (cons (first paren_string)\n\
    \                                                                            \
    \                    (loop (rest paren_string)\n                             \
    \                                                                         (cons\
    \ (first paren_string)\n                                                     \
    \                                                        (loop (rest paren_string)\n\
    \                                                                            \
    \                                      (cons (first paren_string)\n          \
    \                                                                            \
    \                                    (loop (rest paren_string)\n             \
    \                                                                            \
    \                                           (cons (first paren_string)\n     \
    \                                                                            \
    \                                                       (loop (rest paren_string)\n\
    \                                                                            \
    \                                                  (cons (first paren_string)\n\
    \                                                                            \
    \                                          (loop (rest paren_string)\n       \
    \                                                                            \
    \                                         (cons (first paren_string)\n       \
    \                                                                            \
    \                                             (loop (rest paren_string)\n    \
    \                                                                            \
    \                                                    (cons (first paren_string)\n\
    \                                                                            \
    \                                                            (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                (cons (first\
    \ paren_string)\n                                                            \
    \                                                                            \
    \          (loop (rest paren_string)\n                                       \
    \                                                                            \
    \                                     (cons (first paren_string)\n           \
    \                                                                            \
    \                                                                       (loop\
    \ (rest paren_string)\n                                                      \
    \                                                                            \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \                                                                            \
    \  (loop (rest paren_string)\n                                               \
    \                                                                            \
    \                                                   (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                          (loop (rest paren_string)\n                       \
    \                                                                            \
    \                                                                            \
    \         (cons (first paren_string)\n                                       \
    \                                                                            \
    \                                                                           (loop\
    \ (rest paren_string)\n                                                      \
    \                                                                            \
    \                                                              (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                      (loop (rest paren_string)\n           \
    \                                                                            \
    \                                                                            \
    \                                   (cons (first paren_string)\n             \
    \                                                                            \
    \                                                                            \
    \                                 (loop (rest paren_string)\n                \
    \                                                                            \
    \                                                                            \
    \                                    (cons (first paren_string)\n            \
    \                                                                            \
    \                                                                            \
    \                                        (loop (rest paren_string)\n         \
    \                                                                            \
    \                                                                            \
    \                                                 (cons (first paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                          (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                                                (cons (first\
    \ paren_string)", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n  \
    \    [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(equal? (first paren_string) ')')\n\
    \       (loop (rest paren_string) (cons (first paren_string) groups))]\n     \
    \ [else\n       (loop (rest paren_string) (cons (first paren_string) groups))])))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '())\n         \
    \    (group_count 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char=? (first paren_string) '(\n              (loop (rest\
    \ paren_string) (cons (first paren_string) groups) (+ group_count 1)))]\n    \
    \  [else\n       (loop (rest paren_string) (cons (first paren_string) groups)\
    \ group_count)])))\n", "  (let loop ((paren_string paren_string)\n           \
    \  (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [else\n       (loop (rest paren_string)\
    \ (cons (first paren_string) (cons (first groups) groups))))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [else (loop (rest\
    \ paren_string) (cons (first paren_string) result))])))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks for your answer. I'm still having trouble understanding\
    \ how this works. I understand that `separate_paren_groups` takes in a string\
    \ and returns a list of strings, but I don't understand how it works. How does\
    \ it know when to stop? What is the `loop` function doing? How does it know when\
    \ to stop? What is the `cond` function doing? What is the `char=?` function doing?\
    \ What is the `first` function doing? What is the `rest` function doing? What\
    \ is the `cons` function doing? What is the `loop` function doing? What is the\
    \ `result` function doing? What is the `result` function doing? What is the `result`\
    \ function doing? What is the `result` function doing? What is the `result` function\
    \ doing? What is the `result` function doing? What is the `result` function doing?\
    \ What is the `result` function doing? What is the `result` function doing? What\
    \ is the `result` function doing? What is the `result` function doing? What is\
    \ the `result` function doing? What is the `result` function doing? What is the\
    \ `result` function doing? What is the `result` function doing? What is the `result`\
    \ function doing? What is the `result` function doing? What is the `result` function\
    \ doing? What is the `result` function doing? What is the `result` function doing?\
    \ What is the `result` function doing? What is the `result` function doing? What\
    \ is the `result` function doing? What is the `result` function doing? What is\
    \ the `result` function doing? What is the `result` function doing? What is the\
    \ `result` function doing? What is the `result` function doing? What is the `result`\
    \ function doing? What is the `result` function doing? What is the `result` function\
    \ doing? What is the `result` function doing? What is the `result` function doing?\
    \ What ", "  (let loop ((paren_string paren_string)\n             (groups '())\n\
    \             (group_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (reverse groups)]\n      [(char= (first paren_string) '(\n         (loop (rest\
    \ paren_string) (cons (first paren_string) groups) (add1 group_count)))\n    \
    \   (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count)))]\n\
    \      [(char= (first paren_string) ')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups) (add1 group_count)))]\n      [(char= (first paren_string)\
    \ '(\n         (loop (rest paren_string) (cons (first paren_string) groups) (add1\
    \ group_count)))\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (add1 group_count)))\n       (char= (first paren_string) ')\n      \
    \ (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count)))]\n\
    \      [(char= (first paren_string) '(\n         (loop (rest paren_string) (cons\
    \ (first paren_string) groups) (add1 group_count)))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups) (add1 group_count)))\n       (char= (first\
    \ paren_string) ')\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (add1 group_count)))\n       (char= (first paren_string) ')\n      \
    \ (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count)))]\n\
    \      [(char= (first paren_string) '(\n         (loop (rest paren_string) (cons\
    \ (first paren_string) groups) (add1 group_count)))\n       (loop (rest paren_string)\
    \ (cons (first paren_string) groups) (add1 group_count)))\n       (char= (first\
    \ paren_string) ')\n       (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (add1 group_count)))\n       (char= (first paren_string) ')\n      \
    \ (loop (rest paren_string) (cons (first paren_string) groups) (add1 group_count)))\n\
    \       (char= (first paren_string) ')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) groups) (add1 group_count)))]\n      [(char= (first paren_string)\
    \ '(\n         (loop (rest paren_string) (con", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [else (loop (rest paren_string) (cons (first\
    \ paren_string) result))])))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\n\
    Thank you so much! I really appreciate your help.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses `match` instead of `cond`.  It should be easier to understand.\n\
    <|/ c |>\n<| a dscore=1 |>\nI wrote this solution that uses match instead of cond.\
    \  It should be easier to understand.\n<code>", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(equal? (first paren_string) '(\n                  (loop (rest\
    \ paren_string)\n                         (cons (first paren_string) groups)))]\n\
    \      [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups)\n               \
    \          (cons (first paren_string) groups)))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ (first paren_string) groups)\n                         (cons (first paren_string)\
    \ groups)\n                         (cons (first paren_string) groups)))]\n  \
    \    [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups)\n               \
    \          (cons (first paren_string) groups)\n                         (cons\
    \ (first paren_string) groups)\n                         (cons (first paren_string)\
    \ groups)))]\n      [(equal? (first paren_string) '(\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups)\n\
    \                         (cons (first paren_string) groups)\n               \
    \          (cons (first paren_string) groups)\n                         (cons\
    \ (first paren_string) groups)\n                         (cons (first paren_string)\
    \ groups)))]\n      [(equal? (first paren_string) '(\n                  (loop\
    \ (rest paren_string)\n                         (cons (first paren_string) groups)\n\
    \                         (cons (first paren_string) groups)\n               \
    \          (cons (first paren_string) groups)\n                         (cons\
    \ (first paren_string) groups)\n                         (cons (first paren_string)\
    \ groups)\n                         (cons (first paren_string) groups)))]\n  \
    \    [(equal? (first paren_string) '(\n                  (loop (rest paren_string)\n\
    \                         (cons (first paren_string) groups)\n               \
    \          (cons (first paren_string) groups)\n                         (cons\
    \ (first paren_string) groups)\n                         (cons (first paren_string)\
    \ groups)\n                         (cons (first paren_string) groups)\n     \
    \                    (cons (first paren_string) groups)\n                    \
    \     (cons (first paren_string) groups)))]\n      [(equal? (first paren_string)\
    \ '(\n                  (loop (rest paren_string)\n                         (cons\
    \ (", "  (let loop ((paren_string paren_string)\n             (groups '())\n \
    \            (group_count 0))\n    (cond\n      [(empty? paren_string)\n     \
    \  (reverse groups)]\n      [(char=? (first paren_string) '( () ))\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string)\n             \
    \      (loop (rest paren_string)\n                         (cons (first paren_string)\n\
    \                               (loop (rest paren_string)\n                  \
    \                   (cons (first paren_string)\n                             \
    \              (loop (rest paren_string)\n                                   \
    \              (cons (first paren_string)\n                                  \
    \                    (loop (rest paren_string)\n                             \
    \                               (cons (first paren_string)\n                 \
    \                                               (loop (rest paren_string)\n  \
    \                                                                  (cons (first\
    \ paren_string)\n                                                            \
    \            (loop (rest paren_string)\n                                     \
    \                                       (cons (first paren_string)\n         \
    \                                                                         (loop\
    \ (rest paren_string)\n                                                      \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \    (loop (rest paren_string)\n                                             \
    \                                                       (cons (first paren_string)\n\
    \                                                                            \
    \                              (loop (rest paren_string)\n                   \
    \                                                                            \
    \                 (cons (first paren_string)\n                               \
    \                                                                            \
    \           (loop (rest paren_string)\n                                      \
    \                                                                            \
    \          (cons (first paren_string)\n                                      \
    \                                                                            \
    \              (loop (rest paren_string)\n                                   \
    \                                                                            \
    \                       (cons (first paren_string)\n                         \
    \                                                                            \
    \                                     (loop (rest paren_string)\n            \
    \                                                                            \
    \                                                    (cons (first paren_string)\n\
    \                                                                            \
    \                                                                      (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \              (cons (first paren_string)\n                                  \
    \                                                                            \
    \                                              (loop (rest paren_string)\n   \
    \                                                                            \
    \                                                                            \
    \   (cons (first paren_string)\n                                             \
    \                                                                            \
    \                                           (loop (rest paren_string)\n      \
    \                                                                            \
    \                                                                            \
    \        (cons (first paren_string)\n                                        \
    \                                                                            \
    \                                                    (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                  (cons (first paren_string)\n                              \
    \                                                                            \
    \                                                                  (loop (rest\
    \ paren_string)\n                                                            \
    \                                                                            \
    \                                        (cons (first paren_string)\n        \
    \                                                                            \
    \                                                                            \
    \                  (loop (rest paren_string)\n                               \
    \                                                                            \
    \                                                                         (cons\
    \ (first paren_string)\n                                                     \
    \                                                                            \
    \                                                       (loop (rest paren_string)\n\
    \                                                                            \
    \                                                                            \
    \                                  (cons (first paren_string)\n              \
    \                                                                            \
    \                                                                            \
    \                        (loop (rest paren_string)\n                         \
    \                                                                            \
    \                                                                            \
    \               (cons (first paren_string)\n                                 \
    \                                                                            \
    \                                                                            \
    \             (loop (rest paren_string)\n                                    \
    \                                                                            \
    \                                                                            \
    \              (cons (first paren_string)\n                                  \
    \                                                                            \
    \                                                                            \
    \                  (loop (rest paren_string)\n                               \
    \                                                                            \
    \                                                                            \
    \         ", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (cond\n      [(empty? paren_string) result]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) result))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) result))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups ()))\n    (cond\n  \
    \    [(empty? paren_string)\n       (reverse groups)]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (cons (first paren_string) groups)))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (cons\
    \ (first paren_string) (cons (first groups) groups))))]\n      [(equal? (first\
    \ paren_string) ')')\n       (loop (rest paren_string) (cons (first groups) groups))]\n\
    \      [(equal? (first paren_string) ')')\n       (loop (rest paren_string) (cons\
    \ (first groups) (cons (first groups) groups))))]\n      [else\n       (loop (rest\
    \ paren_string) (cons (first groups) groups))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond ((null? paren_string) result)\n\
    \          ((char=? (car paren_string) '(') (loop (cdr paren_string) (cons (car\
    \ paren_string) result)))\n          ((char=? (car paren_string) ')') (loop (cdr\
    \ paren_string) (cons (car paren_string) result)))\n          (else (loop (cdr\
    \ paren_string) (cons (car paren_string) result))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ()))\n    (cond\n      [(empty? paren_string)\
    \ groups]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))]\n      [(char= (first paren_string) ')') (loop\
    \ (rest paren_string) (cons (first paren_string) groups))]\n      [else (loop\
    \ (rest paren_string) (cons (first paren_string) (cons (first paren_string) groups))))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond ((string-length paren_string) paren_list)\n\
    \          ((char= (char-code (char-before (string-ref paren_string 0)) '(') paren_string)\n\
    \           (loop (substring (substring paren_string 0 1)\n                  \
    \       (+ 1 paren_count))\n                 (cons (substring paren_string 0 1)\n\
    \                      paren_list))\n          ((char= (char-code (char-before\
    \ (string-ref paren_string 0)) ')') paren_string)\n          ((char= (char-code\
    \ (char-before (string-ref paren_string 0)) '(') paren_string)\n           (loop\
    \ (substring (substring paren_string 0 1)\n                         (+ 1 paren_count))\n\
    \                 (cons (substring paren_string 0 1)\n                      paren_list))\n\
    \          ((char= (char-code (char-before (string-ref paren_string 0)) ')') paren_string)\n\
    \          ((char= (char-code (char-before (string-ref paren_string 0)) '(') paren_string)\n\
    \           (loop (substring (substring paren_string 0 1)\n                  \
    \       (+ 1 paren_count))\n                 (cons (substring paren_string 0 1)\n\
    \                      paren_list))\n          ((char= (char-code (char-before\
    \ (string-ref paren_string 0)) ')') paren_string)\n          ((char= (char-code\
    \ (char-before (string-ref paren_string 0)) '(') paren_string)\n           (loop\
    \ (substring (substring paren_string 0 1)\n                         (+ 1 paren_count))\n\
    \                 (cons (substring paren_string 0 1)\n                      paren_list))\n\
    \          ((char= (char-code (char-before (string-ref paren_string 0)) ')') paren_string)\n\
    \          ((char= (char-code (char-before (string-ref paren_string 0)) '(') paren_string)\n\
    \           (loop (substring (substring paren_string 0 1)\n                  \
    \       (+ 1 paren_count))\n                 (cons (substring paren_string 0 1)\n\
    \                      paren_list))\n          ((char= (char-code (char-before\
    \ (string-ref paren_string 0)) ')') paren_string)\n          ((char= (char-code\
    \ (char-before (string-ref paren_string 0)) '(') paren_string)\n           (loop\
    \ (substring (substring paren_string 0 1)\n                         (+ 1 paren_count))\n\
    \                 (cons (substring paren_string 0 1)", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse result)\n       ]\n      [(char= (first paren_string) '(\n  \
    \            (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ result)))]\n      [(char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) result)))]\n \
    \     [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) result)))]\n      [(char= (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) result)))]\n      [(char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) result)))]\n      [(char= (first paren_string) '(\n          \
    \    (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ result)))]\n      [(char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) result)))]\n \
    \     [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) result)))]\n      [(char= (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) result)))]\n      [(char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) result)))]\n      [(char= (first paren_string) '(\n          \
    \    (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ result)))]\n      [(char= (first paren_string) '(\n              (loop (rest\
    \ paren_string)\n                    (cons (first paren_string) result)))]\n \
    \     [(char= (first paren_string) '(\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) result)))]\n      [(char= (first\
    \ paren_string) '(\n              (loop (rest paren_string)\n                \
    \    (cons (first paren_string) result)))]\n      [(char= (first paren_string)\
    \ '(\n              (loop (rest paren_string)\n                    (cons (first\
    \ paren_string) result", "  (let loop ((paren_string paren_string)\n         \
    \    (groups '()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n\
    \      [(equal? (car paren_string) '(\n                  (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups)))]\n      [(equal?\
    \ (car paren_string) '(\n                  (loop (cdr paren_string)\n        \
    \                 (cons (car paren_string) groups))\n                  (loop (cdr\
    \ paren_string)\n                         (cons (car paren_string) groups))]\n\
    \      [(equal? (car paren_string) '(\n                  (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \  (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                  (loop (cdr paren_string)\n                     \
    \    (cons (car paren_string) groups))]\n      [(equal? (car paren_string) '(\n\
    \                  (loop (cdr paren_string)\n                         (cons (car\
    \ paren_string) groups))\n                  (loop (cdr paren_string)\n       \
    \                  (cons (car paren_string) groups))\n                  (loop\
    \ (cdr paren_string)\n                         (cons (car paren_string) groups))\n\
    \                  (loop (cdr paren_string)\n                         (cons (car\
    \ paren_string) groups))]\n      [(equal? (car paren_string) '(\n            \
    \      (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                  (loop (cdr paren_string)\n                     \
    \    (cons (car paren_string) groups))\n                  (loop (cdr paren_string)\n\
    \                         (cons (car paren_string) groups))\n                \
    \  (loop (cdr paren_string)\n                         (cons (car paren_string)\
    \ groups))\n                  (loop (cdr paren_string)\n                     \
    \    (cons (car paren_string) groups))]\n      [(equal? (car paren_string) '(\n\
    \                  (loop (cdr paren_string)\n                         (cons (car\
    \ paren_string) groups))\n                  (loop (cdr paren_string)\n       \
    \                  (cons (car paren_string) groups))\n                  (loop\
    \ (cdr paren_string)\n                         (cons (car paren_string) groups))\n\
    \                  (loop (cdr ", "  (let loop ((paren_string paren_string)\n \
    \            (result '()))\n    (cond\n      [(empty? paren_string) result]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n      [else (loop (cdr paren_string) (cons (car paren_string) result))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_group_list '())\n\
    \             (paren_group_count 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse paren_group_list)]\n      [(equal? (first paren_string) '(#\\\
    ))\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_group_list)\n             (add1 paren_group_count))\n       (loop (rest\
    \ paren_string)\n             (reverse (cons (first paren_string) paren_group_list))\n\
    \             (add1 paren_group_count))\n       (loop (rest paren_string)\n  \
    \           (reverse (cons (first paren_string) paren_group_list))\n         \
    \    (add1 paren_group_count))\n       (loop (rest paren_string)\n           \
    \  (reverse (cons (first paren_string) paren_group_list))\n             (add1\
    \ paren_group_count))\n       (loop (rest paren_string)\n             (reverse\
    \ (cons (first paren_string) paren_group_list))\n             (add1 paren_group_count))\n\
    \       (loop (rest paren_string)\n             (reverse (cons (first paren_string)\
    \ paren_group_list))\n             (add1 paren_group_count))\n       (loop (rest\
    \ paren_string)\n             (reverse (cons (first paren_string) paren_group_list))\n\
    \             (add1 paren_group_count))\n       (loop (rest paren_string)\n  \
    \           (reverse (cons (first paren_string) paren_group_list))\n         \
    \    (add1 paren_group_count))\n       (loop (rest paren_string)\n           \
    \  (reverse (cons (first paren_string) paren_group_list))\n             (add1\
    \ paren_group_count))\n       (loop (rest paren_string)\n             (reverse\
    \ (cons (first paren_string) paren_group_list))\n             (add1 paren_group_count))\n\
    \       (loop (rest paren_string)\n             (reverse (cons (first paren_string)\
    \ paren_group_list))\n             (add1 paren_group_count))\n       (loop (rest\
    \ paren_string)\n             (reverse (cons (first paren_string) paren_group_list))\n\
    \             (add1 paren_group_count))\n       (loop (rest paren_string)\n  \
    \           (reverse (cons (first paren_string) paren_group_list))\n         \
    \    (add1 paren_group_count))\n       (loop (rest paren_string)\n           \
    \  (reverse (cons (first paren_string) paren_group_list))\n             (add1\
    \ paren_group_count))\n       (loop (rest paren_string)\n             (reverse\
    \ (cons (first paren_string) paren_group_list", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string) groups]\n      [(equal? (first paren_string) '(#\\)) (loop (rest\
    \ paren_string) (cons (first paren_string) groups) (add1 group_count))]\n    \
    \  [(equal? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (add1 group_count))\n                                \
    \            (loop (rest paren_string) (cons (first paren_string) groups) (add1\
    \ group_count))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups) (add1 group_count))\n                   \
    \                         (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (add1 group_count))\n                                            (loop\
    \ (rest paren_string) (cons (first paren_string) groups) (add1 group_count))]\n\
    \      [else (loop (rest paren_string) (cons (first paren_string) groups) (add1\
    \ group_count))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (groups '())\n             (group_count 0))\n    (cond\n      [(empty? paren_string)\
    \ groups]\n      [(char=? (car paren_string) '( () )) (loop (cdr paren_string)\
    \ (cons (car paren_string) groups) (add1 group_count))\n       (loop (cdr paren_string)\
    \ (cons (car paren_string) groups) (add1 group_count))]\n      [else (loop (cdr\
    \ paren_string) (cons (car paren_string) groups) (add1 group_count))])))\n", " \
    \ (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string) groups]\n      [(char= (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) groups)))]\n      [(char=\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) ')')\
    \ (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '}') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) ']') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) ';')\
    \ (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) ',') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '\\n') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '\\\
    t') (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '\\r') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '\\t') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '\\\
    r') (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '\\n') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(char= (first paren_string) '\\t') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char= (first paren_string) '\\\
    r') (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(char=\
    \ (first paren_string) '\\t') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))", "  (let loop ((paren_string paren_string)\n             (groups '()))\n\
    \    (cond ((null? paren_string)\n           (reverse groups))\n          ((char=\
    \ (first paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '( (char= (first paren_string) '( (char= (first paren_string) '( (char= (first\
    \ paren_string) '( (char= (first paren_string) '( (char= (first paren_string)\
    \ '", "  (let loop ((paren_string paren_string)\n             (groups '()))\n\
    \    (cond [(empty? paren_string) groups]\n          [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) groups)))]\n     \
    \     [(equal? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n          [(equal? (first paren_string) '[') (loop\
    \ (rest paren_string) (cons (first paren_string) groups))]\n          [(equal?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n          [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n          [(equal? (first paren_string)\
    \ '[') (loop (rest paren_string) (cons (first paren_string) groups))]\n      \
    \    [(equal? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n          [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) groups))]\n          [(equal?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n          [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n          [(equal? (first paren_string)\
    \ '{') (loop (rest paren_string) (cons (first paren_string) groups))]\n      \
    \    [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n          [(equal? (first paren_string) '{') (loop\
    \ (rest paren_string) (cons (first paren_string) groups))]\n          [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n          [(equal? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n          [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) groups))]\n      \
    \    [(equal? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n          [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) group", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '()))\n    (cond [(empty? paren_string)\
    \ groups]\n          [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))]\n          [(equal? (first paren_string)\
    \ '{') (loop (rest paren_string) (cons (first paren_string) groups))]\n      \
    \    [(equal? (first paren_string) '[) (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n          [(equal? (first paren_string) '{') (loop\
    \ (rest paren_string) (cons (first paren_string) groups))]\n          [(equal?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n          [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n          [(equal? (first paren_string)\
    \ '{') (loop (rest paren_string) (cons (first paren_string) groups))]\n      \
    \    [(equal? (first paren_string) '[) (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n          [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) groups))]\n          [(equal?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n          [(equal? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n          [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) groups))]\n      \
    \    [(equal? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) groups))]\n          [(equal? (first paren_string) '[) (loop (rest\
    \ paren_string) (cons (first paren_string) groups))]\n          [(equal? (first\
    \ paren_string) '(') (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \          [(equal? (first paren_string) '{') (loop (rest paren_string) (cons\
    \ (first paren_string) groups))]\n          [(equal? (first paren_string) '[)\
    \ (loop (rest paren_string) (cons (first paren_string) groups))]\n          [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ group", "  (let loop ((paren_string paren_string)\n             (result '()))\n\
    \    (cond ((or (char-equal? #\\( paren_string)\n                  (char-equal?\
    \ #\\) paren_string)\n             (string-length paren_string))\n          result)\n\
    \          ((char-equal? #\\( paren_string)\n           (loop (substring paren_string\
    \ 0 (string-length paren_string)))\n           (loop (substring paren_string 1\
    \ (string-length paren_string))))\n          ((char-equal? #\\) paren_string)\n\
    \          (loop (substring paren_string 0 (string-length paren_string)))\n  \
    \        (else (loop (substring paren_string 1 (string-length paren_string)))))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse groups)]\n      [(char=? (car paren_string)\
    \ '( () ( () ) ) )\n       (loop (cdr paren_string)\n             (cons (car paren_string)\
    \ groups))]\n      [else\n       (loop (cdr paren_string)\n             (cons\
    \ (car paren_string) (cons (car groups) groups))])]))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '<) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '#)\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '#') (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '#')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '#') (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '#')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '#') (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '#')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '#') (loop", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond ((string-length paren_string) '())\n  \
    \        ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '(#\\))\n           (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '(#\\))\n           (loop (", "  (let loop ((paren_string paren_string)\n  \
    \           (groups ()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ groups)]\n      [(char=? (first paren_string) '( () ( () ))) \n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) groups))]\n   \
    \   [else\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ (cons (first paren_string) groups))])]))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond\n      [(empty? paren_string) groups]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(char=? (first paren_string) '(\
    \ () )]\n      (loop (rest paren_string) (cons (first paren_string) groups))]\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(", "  (let loop ((paren_string\
    \ paren_string)\n             (groups '()))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse groups)]\n      [(char=? (first paren_string) '( () ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( (", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (cond\n      [(empty? paren_string) result]\n      [(char=? (first\
    \ paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [else (loop (rest paren_string) (cons (first\
    \ paren_string) result))])))\n", "  (let loop ((paren_string paren_string)\n \
    \            (paren_group_list '())\n             (paren_group_count 0))\n   \
    \ (cond\n      [(empty? paren_string) paren_group_list]\n      [(char=? (car paren_string)\
    \ '(#\\)) (loop (cdr paren_string) (cons (car paren_string) paren_group_list)\
    \ (add1 paren_group_count))\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [(char=? (car paren_string)\
    \ #\\) (loop (cdr paren_string) (cons (car paren_string) paren_group_list) (add1\
    \ paren_group_count))\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [(char=? (car paren_string)\
    \ '(#\\)) (loop (cdr paren_string) (cons (car paren_string) paren_group_list)\
    \ (add1 paren_group_count))\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [(char=? (car paren_string)\
    \ #\\) (loop (cdr paren_string) (cons (car paren_string) paren_group_list) (add1\
    \ paren_group_count))\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [(char=? (car paren_string)\
    \ '(#\\)) (loop (cdr paren_string) (cons (car paren_string) paren_group_list)\
    \ (add1 paren_group_count))\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [(char=? (car paren_string)\
    \ #\\) (loop (cdr paren_string) (cons (car paren_string) paren_group_list) (add1\
    \ paren_group_count))\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_group_list) (add1 paren_group_count))]\n      [(char=? (car paren_string)\
    \ '(#\\)) (loop (cdr paren_string) (cons (car paren_string) paren_group_list)\
    \ (add1 paren_group_count))\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ paren_group_list", "  (let loop ((paren_string paren_string)\n             (paren_list\
    \ '())\n             (paren_count 0))\n    (if (empty? paren_string)\n       \
    \ (reverse paren_list)\n        (let ((char (car paren_string)))\n          (if\
    \ (char= char #\\)\n              (loop (cdr paren_string)\n                 \
    \   (cons (car paren_list) paren_list)\n                    (+ paren_count 1))\n\
    \              (loop (cdr paren_string)\n                    (cons (car paren_list)\
    \ paren_list)\n                    (+ paren_count 1)))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (groups ())\n             (group_count 0))\n   \
    \ (if (string-empty? paren_string)\n        (reverse groups)\n        (let ((char\
    \ (char-code (first paren_string))))\n          (if (char= char #\\)\n       \
    \       (loop (rest paren_string)\n                    (cons (first paren_string)\
    \ groups)\n                    (+ group_count 1))\n              (loop (rest paren_string)\n\
    \                    (cons (first paren_string) groups)\n                    (+\
    \ group_count 1)))))))\n", "  (let loop ((paren_string paren_string)\n       \
    \      (paren_list '())\n             (paren_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse paren_list)]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (cons (first paren_string)\
    \ paren_list)\n             (add1 paren_count))]\n      [else\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) paren_list)\n       \
    \      (add1 paren_count))]\n      [else\n       (loop (rest paren_string)\n \
    \            (cons (first paren_string) paren_list)\n             (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_list '())\n     \
    \        (paren_count 0))\n    (cond ((null? paren_string) paren_list)\n     \
    \     ((char= (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (add1 paren_count)))\n          ((char= (first paren_string)\
    \ ')') (loop (rest paren_string) (cons (first paren_string) paren_list) (sub1\
    \ paren_count)))\n          ((char= (first paren_string) '[') (loop (rest paren_string)\
    \ (cons (first paren_string) paren_list) (add1 paren_count)))\n          ((char=\
    \ (first paren_string) ']') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) (sub1 paren_count)))\n          ((char= (first paren_string) '{')\
    \ (loop (rest paren_string) (cons (first paren_string) paren_list) (add1 paren_count)))\n\
    \          ((char= (first paren_string) '}') (loop (rest paren_string) (cons (first\
    \ paren_string) paren_list) (sub1 paren_count)))\n          (else (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) (add1 paren_count))))))\n",
  "  (let loop ((paren_string paren_string)\n             (groups ())\n          \
    \   (group_count 0))\n    (cond\n      [(empty? paren_string) groups]\n      [(equal?\
    \ (char-type (car paren_string)) '(') (loop (cdr paren_string) (cons (car paren_string)\
    \ groups) (add1 group_count))]\n      [else (loop (cdr paren_string) (cons (car\
    \ paren_string) (cons (substring paren_string 0 group_count) groups)) (add1 group_count))]))\n\
    </code>\n<|/ a |>\n<| a tags=racket,scheme |>\n<code>", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_list '())\n             (paren_count 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse paren_list)]\n     \
    \ [(equal? (first paren_string) '( () ( () ()) ) ) ; open paren\n       (loop\
    \ (rest paren_string)\n             (cons (first paren_string) paren_list)\n \
    \            (+ 1 paren_count))]\n      [(equal? (first paren_string) '( () ()\
    \ ) ) ; close paren\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) paren_list)\n             (- 1 paren_count))]\n      [else\n \
    \      (loop (rest paren_string)\n             (cons (first paren_string) paren_list)\n\
    \             (+ 1 paren_count))]\n      )))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '()))\n    (cond ((string-length paren_string) groups)\n\
    \          ((char= (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) groups)))\n          ((char= (first paren_string) ')') (loop (rest\
    \ paren_string) (cons (first paren_string) groups)))\n          ((char= (first\
    \ paren_string) '[') (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) ']') (loop (rest paren_string) (cons (first\
    \ paren_string) groups)))\n          ((char= (first paren_string) '{') (loop (rest\
    \ paren_string) (cons (first paren_string) groups)))\n          ((char= (first\
    \ paren_string) '}') (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '#lang) (loop (rest paren_string) (cons\
    \ (first paren_string) groups)))\n          ((char= (first paren_string) '#')\
    \ (loop (rest paren_string) (cons (first paren_string) groups)))\n          ((char=\
    \ (first paren_string) '#') (loop (rest paren_string) (cons (first paren_string)\
    \ groups)))\n          ((char= (first paren_string) '#') (loop (rest paren_string)\
    \ (cons (first paren_string) groups)))\n          ((char= (first paren_string)\
    \ '#') (loop (rest paren_string) (cons (first paren_string) groups)))\n      \
    \    ((char= (first paren_string) '#') (loop (rest paren_string) (cons (first\
    \ paren_string) groups)))\n          ((char= (first paren_string) '#') (loop (rest\
    \ paren_string) (cons (first paren_string) groups)))\n          ((char= (first\
    \ paren_string) '#') (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '#') (loop (rest paren_string) (cons (first\
    \ paren_string) groups)))\n          ((char= (first paren_string) '#') (loop (rest\
    \ paren_string) (cons (first paren_string) groups)))\n          ((char= (first\
    \ paren_string) '#') (loop (rest paren_string) (cons (first paren_string) groups)))\n\
    \          ((char= (first paren_string) '#') (", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond [(empty? paren_string) result]\n      \
    \    [(char=? (car paren_string) '( () ( () )) (loop (cdr paren_string) result))]\n\
    \          [(char=? (car paren_string) '( () ) result]\n          [(char=? (car\
    \ paren_string) '( () ) result]\n          [(char=? (car paren_string) '( () )\
    \ result]\n          [(char=? (car paren_string) '( () ) result]\n          [(char=?\
    \ (car paren_string) '( () ) result]\n          [(char=? (car paren_string) '(\
    \ () ) result]\n          [(char=? (car paren_string) '( () ) result]\n      \
    \    [(char=? (car paren_string) '( () ) result]\n          [(char=? (car paren_string)\
    \ '( () ) result]\n          [(char=? (car paren_string) '( () ) result]\n   \
    \       [(char=? (car paren_string) '( () ) result]\n          [(char=? (car paren_string)\
    \ '( () ) result]\n          [(char=? (car paren_string) '( () ) result]\n   \
    \       [(char=? (car paren_string) '( () ) result]\n          [(char=? (car paren_string)\
    \ '( () ) result]\n          [(char=? (car paren_string) '( () ) result]\n   \
    \       [(char=? (car paren_string) '( () ) result]\n          [(char=? (car paren_string)\
    \ '( () ) result]\n          [(char=? (car paren_string) '( () ) result]\n   \
    \       [(char=? (car paren_string) '( () ) result]\n          [(char=? (car paren_string)\
    \ '( () ) result]\n          [(char=? (car paren_string) '( () ) result]\n   \
    \       [(char=? (car paren_string) '( () ) result]\n          [(char=? (car paren_string)\
    \ '( () ) result]\n          [(char=? (car paren_string) '( () ) result]\n   \
    \       [(char=? (", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond\n      [(empty? paren_string) groups]\n      [(equal? (car\
    \ paren_string) '(') (loop (cdr paren_string) (cons (car paren_string) groups)))]\n\
    \      [(equal? (car paren_string) ')') (loop (cdr paren_string) groups)]\n  \
    \    [else (loop (cdr paren_string) (cons (car paren_string) groups))])))\n",
  "  (let loop ((paren_string paren_string)\n             (groups ()))\n    (cond\
    \ [(empty? paren_string)\n           (reverse groups)]\n          [(equal? (first\
    \ paren_string) '(#\\))\n           (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n          [else\n           (loop (rest paren_string)\n         \
    \        (cons (first paren_string)\n                       (loop (rest paren_string)\n\
    \                             (cons (first paren_string) groups))))])))\n", " \
    \ (let ([paren_groups (regexp-split paren_string\n                           \
    \      (string->regexp \"\\\\(|\\\\)\")\n                                 #(case\
    \ (first %)\n                                   (\\() '()\n                  \
    \                 (\\) '()\n                                   (\\|) '()\n   \
    \                                (\\|) '()\n                                 \
    \  (\\|) '()\n                                   (\\|) '()\n                 \
    \                  (\\|) '()\n                                   (\\|) '()\n \
    \                                  (\\|) '()\n                               \
    \    (\\|) '()\n                                   (\\|) '()\n               \
    \                    (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n                                   (\\|) '()\n              \
    \                     (\\|) '()\n                                   (\\|) '()\n\
    \                                   (\\|) '()\n                              \
    \     (\\|) '()\n", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (cond\n      [(empty? paren_string) result]\n      [(char=? (first\
    \ paren_string) '(') (loop (rest paren_string) (cons (first paren_string) result))]\n\
    \      [(char=? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) result))]\n      [(char=? (first paren_string) '[) (loop (rest\
    \ paren_string) (cons (first paren_string) result))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) result))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result))]\n      [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren", "  (let loop ((paren_string paren_string)\n           \
    \  (groups ())\n             (group_start 0))\n    (if (string-empty? paren_string)\n\
    \        (reverse groups)\n        (let ((char (car paren_string)))\n        \
    \  (if (char= char #\\)\n              (loop (cdr paren_string)\n            \
    \        (cons (substring paren_string 0 group_start) groups)\n              \
    \      (+ group_start 1))\n              (loop (cdr paren_string)\n          \
    \          (cons (substring paren_string 0 group_start) groups)\n            \
    \        group_start)))))\n</code>\n<|/ a tags=scheme,racket,functional-programming\
    \ |>\n<| c |>\nThank you so much for your answer! I really appreciate it. I will\
    \ try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nI tried to run\
    \ this in DrRacket and I got this error message: \n\"application: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: '(#\\)\n  arguments...:\
    \ [none]\"\n<|/ c |>\n<| c |>\nI fixed the error by changing \"(if (char= char\
    \ #\\)\" to \"(if (char= char #\\))\". Now it runs but doesn't separate the groups.\
    \ I put parenthesis around the string and I put a print statement in the loop\
    \ to see if it was going through the loop but it never prints anything. Do you\
    \ know why that is?\n<|/ c |>\n<| c |>\nI figured it out! Thank you so much for\
    \ your help!\n<|/ c |>\n<| c |>\nI added a version that doesn't use recursion.\n\
    <|/ c |>\n<| a tags=scheme,racket,functional-programming |>\nI figured it out!\
    \ Thanks to everyone who helped me figure it out! Here is the code I ended up\
    \ using:\n<code>", "  (let loop ((paren_string paren_string)\n             (groups\
    \ '()))\n    (cond\n      [(empty? paren_string)\n       (reverse groups)]\n \
    \     [(char=? (car paren_string) '( () )\n       (loop (cdr paren_string)\n \
    \            (cons (car paren_string) groups))]\n      [(char=? (car paren_string)\
    \ ')' () )\n       (loop (cdr paren_string)\n             (cons (car paren_string)\
    \ groups))]\n      [else\n       (loop (cdr paren_string)\n             (cons\
    \ (car paren_string) groups))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (groups '())\n             (group_count 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse groups)]\n      [(char=? (first paren_string)\
    \ '( () ( () ) ) )\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n       (loop (rest\
    \ paren_string)\n             (cons (first paren_string) groups)\n           \
    \  (add1 group_count))\n       (loop (rest paren_string)\n             (cons (first\
    \ paren_string) groups)\n             (add1 group_count))\n", "  (let ([paren_groups\
    \ (string->list paren_string)])\n    (cond\n      [(empty? paren_groups) '()]\n\
    \      [(not (pair? paren_groups)) (error \"paren_groups should be a list\")]\n\
    \      [(not (list? paren_groups)) (error \"paren_groups should be a list\")]\n\
    \      [(not (equal? (first paren_groups) '(')) (error \"first element of paren_groups\
    \ should be '('\")]\n      [(not (equal? (last paren_groups) ')')) (error \"last\
    \ element of paren_groups should be ')'\")]\n      [else (let ([open_brace (first\
    \ paren_groups)])\n               (separate_paren_groups (rest paren_groups))\n\
    \               (cons open_brace (separate_paren_groups (rest paren_groups))))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n\
    \      [(empty? paren_string) result]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) result))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) result))])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (groups '()))\n    (cond\n \
    \     [(empty? paren_string) groups]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (cons (first paren_string) groups)))]\n      [else\
    \ (loop (rest paren_string) (cons (first paren_string) (loop (rest paren_string)\
    \ groups))))])))\n", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ())\n             (group_count 0))\n    (if (string-empty? paren_string)\n \
    \       (reverse groups)\n        (let ((char (car paren_string)))\n         \
    \ (if (char= char #\\)\n              (loop (cdr paren_string)\n             \
    \       (cons (car groups) groups)\n                    (+ group_count 1)))\n\
    \              (loop (cdr paren_string)\n                    (cons (car groups)\
    \ groups)\n                    (+ group_count 1))))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond [(empty? paren_string)\n\
    \           (reverse result)]\n          [(char= (first paren_string) '(')\n \
    \          (loop (rest paren_string)\n                 (cons (first paren_string)\
    \ result))\n           (loop (rest paren_string)\n                 (cons (first\
    \ paren_string) (cons (first result) (rest result))))]\n          [else\n    \
    \       (loop (rest paren_string)\n                 (cons (first paren_string)\
    \ (cons (first result) (rest result))))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond [(empty? paren_string) result]\n      \
    \    [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) result)))]\n          [(char=? (first paren_string) '{') (loop\
    \ (rest paren_string) (cons (first paren_string) result)))]\n          [(char=?\
    \ (first paren_string) '[) (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n          [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n          [(char=? (first paren_string)\
    \ '{') (loop (rest paren_string) (cons (first paren_string) result)))]\n     \
    \     [(char=? (first paren_string) '[) (loop (rest paren_string) (cons (first\
    \ paren_string) result)))]\n          [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (cons (first paren_string) result)))]\n          [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n          [(char=? (first paren_string) '[) (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n          [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (cons (first paren_string) result)))]\n     \
    \     [(char=? (first paren_string) '{') (loop (rest paren_string) (cons (first\
    \ paren_string) result)))]\n          [(char=? (first paren_string) '[) (loop\
    \ (rest paren_string) (cons (first paren_string) result)))]\n          [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ result)))]\n          [(char=? (first paren_string) '{') (loop (rest paren_string)\
    \ (cons (first paren_string) result)))]\n          [(char=? (first paren_string)\
    \ '[) (loop (rest paren_string) (cons (first paren_string) result)))]\n      \
    \    [(char=? (first paren_string) '(') (loop (rest paren_string) (cons (first\
    \ paren_string) result)))]\n          [(char=? (first paren_string) '{') (loop\
    \ (rest paren_string) (cons (first paren_string) result)))]\n          [(char=?\
    \ (first paren", "  (let loop ((paren_string paren_string)\n             (result\
    \ '()))\n    (cond\n      [(empty? paren_string) result]\n      [(equal? (char-type\
    \ (car paren_string)) '(')\n       (loop (cdr paren_string) (cons (car paren_string)\
    \ result))]\n      [else (loop (cdr paren_string) (cons (car paren_string) result))])))\n",
  "  (let loop ((paren_string paren_string)\n             (groups '())\n         \
    \    (group_count 0))\n    (cond\n      [(empty? paren_string) groups]\n     \
    \ [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (+ group_count 1))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) groups) (+ group_count\
    \ 1))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) groups) (+ group_count 1))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (+ group_count 1))]\n      [(char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) groups) (+ group_count 1))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (+ group_count 1))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) groups) (+ group_count\
    \ 1))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) groups) (+ group_count 1))]\n      [(char= (first\
    \ paren_string) '( () )) (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (+ group_count 1))]\n      [(char= (first paren_string) '( () )) (loop\
    \ (rest paren_string) (cons (first paren_string) groups) (+ group_count 1))]\n\
    \      [(char= (first paren_string) '( () )) (loop (rest paren_string) (cons (first\
    \ paren_string) groups) (+ group_count 1))]\n      [(char= (first paren_string)\
    \ '( () )) (loop (rest paren_string) (cons (first paren_string) groups) (+ group_count\
    \ 1))]\n      [(char= (first paren_string) '( () )) (loop (rest paren_string)\
    \ (cons (first paren_string) groups) (+ group_count 1))]\n      [(char= (first\
    \ paren_string) ", "  (let loop ((paren_string paren_string)\n             (groups\
    \ ())\n             (group_count 0))\n    (cond\n      [(empty? paren_string)\
    \ groups]\n      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\n\
    \            (cons (first paren_string)\n                  (loop (rest paren_string)\n\
    \                        (cons (first paren_string)\n                        \
    \      groups))\n            (add1 group_count))\n      [(char=? (first paren_string)\
    \ ')' )]\n      (loop (rest paren_string)\n            (cons (first paren_string)\n\
    \                  (loop (rest paren_string)\n                        (cons (first\
    \ paren_string)\n                              groups))\n            (add1 group_count))\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\n\
    \            (cons (first paren_string)\n                  (loop (rest paren_string)\n\
    \                        (cons (first paren_string)\n                        \
    \      groups))\n            (add1 group_count))\n      [(char=? (first paren_string)\
    \ ')' )]\n      (loop (rest paren_string)\n            (cons (first paren_string)\n\
    \                  (loop (rest paren_string)\n                        (cons (first\
    \ paren_string)\n                              groups))\n            (add1 group_count))\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\n\
    \            (cons (first paren_string)\n                  (loop (rest paren_string)\n\
    \                        (cons (first paren_string)\n                        \
    \      groups))\n            (add1 group_count))\n      [(char=? (first paren_string)\
    \ ')' )]\n      (loop (rest paren_string)\n            (cons (first paren_string)\n\
    \                  (loop (rest paren_string)\n                        (cons (first\
    \ paren_string)\n                              groups))\n            (add1 group_count))\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)\n\
    \            (cons (first paren_string)\n                  (loop (rest paren_string)\n\
    \                        (cons (first paren_string)\n                        \
    \      groups))\n            (add1 group_count))\n      [(char=? (first paren_string)\
    \ ')' )]\n      (loop (rest paren_string)\n            (cons (first paren_string)\n\
    \                  (loop (rest paren_string)\n                        (cons (first\
    \ paren_string)\n                              groups))\n            (add1 group_count))\n\
    \      [(char=? (first paren_string) '( () )]\n      (loop (rest paren_string)",
  "  (let loop ((paren_string paren_string)\n             (groups '())\n         \
    \    (group_count 0))\n    (cond\n      [(empty? paren_string) groups]\n     \
    \ [(equal? (first paren_string) '(') (loop (rest paren_string) (cons (first paren_string)\
    \ groups) (add1 group_count)))]\n      [(equal? (first paren_string) ')') (loop\
    \ (rest paren_string) (cons (first paren_string) groups) (sub1 group_count))]\n\
    \      [else (loop (rest paren_string) (cons (first paren_string) groups) (add1\
    \ group_count))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (groups '()))\n    (cond\n      [(empty? paren_string) groups]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(equal? (first paren_string) '(#\\)) (loop (rest paren_string)\
    \ (cons (first paren_string) groups))]\n      [(equal? (first paren_string) '(#\\\
    )) (loop (rest paren_string) (cons (first paren_string) groups))]\n      [(equal?\
    \ (first paren_string) '(#\\)) (loop (rest paren_string) (cons (first paren_string)\
    \ groups))]\n      [(", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_list '())\n             (open_braces '()))\n    (cond\n      [(empty?\
    \ paren_string) paren_list]\n      [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) open_braces))]\n      [(char=? (first paren_string) '[) (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) open_braces))]\n      [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) open_braces))]\n      [(char=? (first paren_string) '[) (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) open_braces))]\n      [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) open_braces))]\n      [(char=? (first paren_string) '[) (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) open_braces))]\n      [(char=? (first paren_string) '(') (loop (rest\
    \ paren_string) (cons (first paren_string) paren_list) open_braces))]\n      [(char=?\
    \ (first paren_string) '{') (loop (rest paren_string) (cons (first paren_string)\
    \ paren_list) open_braces))]\n      [(char=? (first paren_string) '"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
