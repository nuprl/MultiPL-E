name: HumanEval_158_find_max
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The\
  \ list contains different words. Return the word with maximum number\n;; of unique\
  \ characters. If multiple strings have maximum number of unique\n;; characters,\
  \ return the one which comes first in lexicographical order.\n(define (find_max\
  \ words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? words) empty]\n    [(equal? (length words) 1)\
    \ (first words)]\n    [else (find_max (rest words))]))\n", "  (cond\n    [(empty?\
    \ words) empty]\n    [(equal? (length words) 1) (first words)]\n    [else (find_max\
    \ (rest words))]))\n", "  (define (helper word count)\n    (cond ((null? word)\
    \ count)\n          ((helper (cdr word) (inc (count (length word))))\n       \
    \    (if (> (count (length word)) count)\n               (cons (car word) (helper\
    \ (cdr word) count))\n               (helper (cdr word) count))))\n  (helper words\
    \ 0))\n", "  (define (helper word count)\n    (cond\n      [(empty? words) (cons\
    \ word count)]\n      [(char-count (first word)) (helper (rest word) (+ count\
    \ 1))]\n      [else (helper (rest word) count)]\n    )\n  )\n  (helper words 0)\n\
    )\n", "  (define (count-unique str)\n    (define (count-unique str)\n      (define\
    \ (count-unique str)\n        (define (count-unique str)\n          (define (count-unique\
    \ str)\n            (define (count-unique str)\n              (define (count-unique\
    \ str)\n                (define (count-unique str)\n                  (define\
    \ (count-unique str)\n                    (define (count-unique str)\n       \
    \               (define (count-unique str)\n                        (define (count-unique\
    \ str)\n                          (define (count-unique str)\n               \
    \             (define (count-unique str)\n                              (define\
    \ (count-unique str)\n                                (define (count-unique str)\n\
    \                                  (define (count-unique str)\n              \
    \                      (define (count-unique str)\n                          \
    \            (define (count-unique str)\n                                    \
    \    (define (count-unique str)\n                                          (define\
    \ (count-unique str)\n                                            (define (count-unique\
    \ str)\n                                              (define (count-unique str)\n\
    \                                                (define (count-unique str)\n\
    \                                                  (define (count-unique str)\n\
    \                                                    (define (count-unique str)\n\
    \                                                      (define (count-unique str)\n\
    \                                                        (define (count-unique\
    \ str)\n                                                          (define (count-unique\
    \ str)\n                                                            (define (count-unique\
    \ str)\n                                                              (define\
    \ (count-unique str)\n                                                       \
    \         (define (count-unique str)\n                                       \
    \                           (define (count-unique str)\n                     \
    \                                               (define (count-unique str)\n \
    \                                                                     (define\
    \ (count-unique str)\n                                                       \
    \                 (define (count-unique str)\n                               \
    \                                           (define (count-unique str)\n     \
    \                                                                       (define\
    \ (count-unique str)\n                                                       \
    \                       (define (count-unique str)\n                         \
    \                                                       (define (count-unique\
    \ str)\n                                                                     \
    \             (define (count-unique str)\n                                   \
    \                                                 (define (count-unique str)\n\
    \                                                                            \
    \          (define (count-unique str)\n                                      \
    \                                                  (define (count-unique str)\n\
    \                                                                            \
    \              (define (count-unique str)\n                                  \
    \                                                          (define (count-unique\
    \ str)\n                                                                     \
    \                         (define (count-unique str)\n                       \
    \                                                                         (define\
    \ (count-unique str)\n                                                       \
    \                                           (define (count-unique str)\n     \
    \                                                                            \
    \                   (define (count-unique str)\n                             \
    \                                                                         (define\
    \ (count-unique str)\n                                                       \
    \                                                 (define (count-unique str)\n\
    \                                                                            \
    \                              (define (count-unique str)\n                  \
    \                                                                            \
    \              (define (count-unique str)\n                                  \
    \                                                                            (define\
    \ (count-unique str)\n                                                       \
    \                                                         (define (count-unique ",
  "  (define (count-unique str)\n    (define (helper str count)\n      (cond\n   \
    \     ((null? str) count)\n        ((helper (cdr str) (inc (count-unique (car\
    \ str))))\n         (helper (cdr str) count))\n        (else (helper (cdr str)\
    \ count))))\n    (helper words 0))\n  (define (helper str count)\n    (cond\n\
    \      ((null? str) count)\n      ((helper (cdr str) (inc (count-unique (car str))))\n\
    \       (helper (cdr str) count))\n      (else (helper (cdr str) count))))\n \
    \ (helper words 0))\n", "  (let loop ((max-count 0)\n             (max-word '())\n\
    \             (words (sort words))\n             (count 0))\n    (cond\n     \
    \ [(empty? words) max-word]\n      [(equal? (length words) 1) max-word]\n    \
    \  [(equal? (length words) 2) (cons (first words) max-word)]\n      [(equal? (length\
    \ words) 3) (cons (first words) (cons (second words) max-word))]\n      [(equal?\
    \ (length words) 4) (cons (first words) (cons (second words) (cons (third words)\
    \ max-word)))]\n      [(equal? (length words) 5) (cons (first words) (cons (second\
    \ words) (cons (third words) (cons (fourth words) max-word))))]\n      [(equal?\
    \ (length words) 6) (cons (first words) (cons (second words) (cons (third words)\
    \ (cons (fourth words) (cons (fifth words) max-word))))]\n      [(equal? (length\
    \ words) 7) (cons (first words) (cons (second words) (cons (third words) (cons\
    \ (fourth words) (cons (fifth words) (cons (sixth words) max-word))))))]\n   \
    \   [(equal? (length words) 8) (cons (first words) (cons (second words) (cons\
    \ (third words) (cons (fourth words) (cons (fifth words) (cons (sixth words) (cons\
    \ (seventh words) max-word))))))]\n      [(equal? (length words) 9) (cons (first\
    \ words) (cons (second words) (cons (third words) (cons (fourth words) (cons (fifth\
    \ words) (cons (sixth words) (cons (seventh words) (cons (eighth words) max-word))))))))]\n\
    \      [(equal? (length words) 10) (cons (first words) (cons (second words) (cons\
    \ (third words) (cons (fourth words) (cons (fifth words) (cons (sixth words) (cons\
    \ (seventh words) (cons (eighth words) (cons (ninth words) max-word))))))))]\n\
    \      [(equal? (length words) 11) (cons (first words) (cons (second words) (cons\
    \ (third words) (cons (fourth words) (cons (fifth words) (cons (sixth words) ",
  "  (define (helper word count)\n    (cond\n      [(empty? words) word]\n      [(equal?\
    \ (count (first word)) count) (helper (rest word) (add1 count))]\n      [else\
    \ (helper (rest word) count)]))\n  (helper words 0))\n", "  (cond\n    [(empty?\
    \ words) empty]\n    [(equal? (length words) 1) (first words)]\n    [else (find_max\
    \ (rest words))]))\n", "  (cond\n    [(empty? words) empty]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (let ([word (first words)])\n          \
    \  (cond\n              [(equal? (count-unique word words) (count-unique (first\
    \ words) word))\n               (find_max (rest words))]\n              [else\
    \ (find_max (rest words))])))]))\n", "  (define (helper word count)\n    (cond\
    \ [(empty? words) (list count)]\n          [(equal? (length word) (length count))\
    \ (list count)]\n          [else (helper (rest word) (+ count 1))]))\n  (helper\
    \ (first words) 0))\n", "  (cond\n    [(empty? words) '()]\n    [(equal? (length\
    \ words) 1) (first words)]\n    [else (find_max (rest words))]))\n", "  (let ([max-count\
    \ (max 0 (length words))])\n    (cond [(empty? words) empty]\n          [(equal?\
    \ max-count (length words)) (first words)]\n          [else (find_max (rest words))])))\n",
  "  (define (helper word count)\n    (cond\n      [(empty? words) (cons word count)]\n\
    \      [(equal? (count (first word)) count) (cons word count)]\n      [else (helper\
    \ (rest word) (+ count 1))]))\n  (helper '() 0))\n", "  (define (helper word count)\n\
    \    (cond\n      [(empty? words) (cons word count)]\n      [(equal? (count (first\
    \ word)) count) (cons word count)]\n      [else (helper (rest word) (add1 count))]))\n\
    \  (helper words 0))\n", "  (define (helper word count)\n    (cond [(empty? words)\
    \ (cons word count)]\n          [(char-count (first word)) (helper (rest word)\
    \ (+ count 1))]\n          [else (helper (rest word) count)]))\n  (helper words\
    \ 0))\n", "  (define (helper word count)\n    (cond\n      [(empty? words) (cons\
    \ word count)]\n      [(equal? (count (first word)) count) (cons word count)]\n\
    \      [else (helper (rest word) (+ count 1))]))\n  (helper words 0))\n", "  (cond\n\
    \    [(empty? words) empty]\n    [(equal? (length words) 1) (first words)]\n \
    \   [else (find_max (rest words))]))\n", "  (define (helper word count)\n    (cond\n\
    \      [(empty? words) (cons word count)]\n      [(char-count (first word)) (helper\
    \ (rest word) (+ count 1))]\n      [else (helper (rest word) (+ count 1))]))\n\
    \  (helper words 0))\n", "  (define (helper word count)\n    (cond\n      [(empty?\
    \ words) (cons word count)]\n      [(equal? (length word) (length count)) (cons\
    \ word count)]\n      [else (helper (cdr word) (+ count 1))]))\n  (helper (car\
    \ words) 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
