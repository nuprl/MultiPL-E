language: rkt
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:15:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:16:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:17:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n\
    \  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:16:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:17:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:18:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) '()]\n    [(number? (first l)) (cons\
    \ (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n  )\n\
    )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81uqphu5.rkt:17:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81uqphu5.rkt:18:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81uqphu5.rkt:19:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    ((null? l) '())\n    ((number? (car l)) (cons\
    \ (car l) (get_positive (cdr l))))\n    (else (cons (car l) (get_positive (cdr\
    \ l))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp20b1qbk4.rkt:15:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp20b1qbk4.rkt:16:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp20b1qbk4.rkt:17:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:17:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:18:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:19:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:17:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:18:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:19:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:17:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:18:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0usj756z.rkt:19:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:15:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:16:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:17:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) '()]\n    [(number? (first l)) (cons\
    \ (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n  )\n\
    )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81uqphu5.rkt:17:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81uqphu5.rkt:18:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81uqphu5.rkt:19:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) '()]\n    [(number? (first l)) (cons\
    \ (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx_38f5cq.rkt:15:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx_38f5cq.rkt:16:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx_38f5cq.rkt:17:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) '()]\n    [(number? (first l)) (cons\
    \ (first l) (get_positive (rest l)))]\n    [else (cons (first l) (get_positive\
    \ (rest l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdnpftbu.rkt:15:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdnpftbu.rkt:16:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdnpftbu.rkt:17:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) '()]\n    [(number? (first l)) (cons\
    \ (first l) (get_positive (rest l)))]\n    [else (cons (first l) (get_positive\
    \ (rest l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdnpftbu.rkt:15:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdnpftbu.rkt:16:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdnpftbu.rkt:17:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n\
    \  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:16:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:17:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:18:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:15:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:16:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_g7czxd.rkt:17:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n\
    \  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:16:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:17:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:18:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (cond\n    [(empty? l) empty]\n    [(number? (first l))\
    \ (cons (first l) (get_positive (rest l)))]\n    [else (get_positive (rest l))]\n\
    \  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n\
    \    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3\
    \ 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal?\
    \ (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:16:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:17:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa0xann8_.rkt:18:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039570
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n(define\
    \ (get_positive l)\n  (filter (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039505
