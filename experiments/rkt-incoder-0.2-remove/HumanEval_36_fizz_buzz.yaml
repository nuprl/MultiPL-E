name: HumanEval_36_fizz_buzz
language: rkt
prompt: "#lang racket\n\n;; Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n(define (fizz_buzz n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n\
  \    (check-equal? (candidate 50) 0)\n    (check-equal? (candidate 78) 2)\n    (check-equal?\
  \ (candidate 79) 3)\n    (check-equal? (candidate 100) 3)\n    (check-equal? (candidate\
  \ 200) 6)\n    (check-equal? (candidate 4000) 192)\n    (check-equal? (candidate\
  \ 10000) 639)\n    (check-equal? (candidate 100000) 8026)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< n 0) '()]\n    [(= (mod n 11) 0) '()]\n    [(= (mod\
    \ n 13) 0) '()]\n    [else (cons (mod n 11) (fizz_buzz (- n 1)))]))\n", "  (cond\n\
    \    [(< n 0) 0]\n    [(= (modulo n 11) 0) 1]\n    [(= (modulo n 13) 0) 2]\n \
    \   [else (+ (fizz_buzz (quotient n 11)) (fizz_buzz (quotient n 13)))]))\n", " \
    \ (cond\n    [(< n 0) 0]\n    [(= (mod n 11) 0) 1]\n    [(= (mod n 13) 0) 2]\n\
    \    [else (+ 3 (fizz_buzz (- n 1)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 1]\n    [(= (mod n 11) 0) 1]\n    [(= (mod n 13) 0) 2]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= (mod n 11)\
    \ 0) 1]\n    [(= (mod n 13) 0) 2]\n    [else (+ 3 (fizz_buzz (/ n 11)))]))\n",
  "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= (mod n 11) 0) 0)\n    ((= (mod\
    \ n 13) 0) 0)\n    ((= (mod n 11) 0) (+ 1 (fizz_buzz (- n 1))))\n    ((= (mod\
    \ n 13) 0) (+ 1 (fizz_buzz (- n 1)))))\n  )\n", "  (cond\n    [(= n 0) 0]\n  \
    \  [(= n 1) 1]\n    [(= (mod n 11) 0) 1]\n    [(= (mod n 13) 0) 2]\n    [else\
    \ (fizz_buzz (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(=\
    \ (mod n 11) 0) (+ 1 (fizz_buzz (/ n 11)))]\n    [(= (mod n 13) 0) (+ 1 (fizz_buzz\
    \ (/ n 13)))]\n    [else (+ 1 (fizz_buzz (/ n 11)))]))\n", "  (cond\n    [(= n\
    \ 0) 0]\n    [(= n 1) 1]\n    [(= (mod n 11) 0) (+ 1 (fizz_buzz (/ n 11)))]\n\
    \    [(= (mod n 13) 0) (+ 1 (fizz_buzz (/ n 13)))]\n    [else (+ 1 (fizz_buzz\
    \ (/ n 11)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= (mod n\
    \ 11) 0) 1]\n    [(= (mod n 13) 0) 2]\n    [else (+ (fizz_buzz (/ n 11)) (fizz_buzz\
    \ (/ n 13)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= (mod n\
    \ 11) 0) (+ 1 (fizz_buzz (/ n 11)))]\n    [(= (mod n 13) 0) (+ 1 (fizz_buzz (/\
    \ n 13)))]\n    [else (+ 1 (fizz_buzz (/ n 11)))]))\n", "  (cond\n    [(= n 0)\
    \ 0]\n    [(= n 1) 1]\n    [(= (mod n 11) 0) 1]\n    [(= (mod n 13) 0) 2]\n  \
    \  [else (+ 3 (fizz_buzz (- n 1)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n\
    \ 1) 1]\n    [(= (mod n 11) 0) 1]\n    [(= (mod n 13) 0) 2]\n    [else (+ (fizz_buzz\
    \ (/ n 11)) (fizz_buzz (/ n 13)))]))\n", "  (cond\n    [(< n 0) 0]\n    [(= (mod\
    \ n 11) 0) 1]\n    [(= (mod n 13) 0) 2]\n    [else (+ (fizz_buzz (quotient n 11))\
    \ (fizz_buzz (quotient n 13)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1)\
    \ 1]\n    [(= (mod n 11) 0) (+ 1 (fizz_buzz (quotient n 11)))]\n    [(= (mod n\
    \ 13) 0) (+ 1 (fizz_buzz (quotient n 13)))]\n    [else (+ 1 (fizz_buzz (quotient\
    \ n 11)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= (mod n 11)\
    \ 0) (+ 1 (fizz_buzz (quotient n 11)))]\n    [(= (mod n 13) 0) (+ 1 (fizz_buzz\
    \ (quotient n 13)))]\n    [else (+ 1 (fizz_buzz (quotient n 11)))]))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= (mod n 11) 0) (+ 1 (fizz_buzz (/ n\
    \ 11)))]\n    [(= (mod n 13) 0) (+ 1 (fizz_buzz (/ n 13)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= (mod n 11)\
    \ 0) (+ 1 (fizz_buzz (/ n 11)))]\n    [(= (mod n 13) 0) (+ 1 (fizz_buzz (/ n 13)))]\n\
    \    [else (+ 1 (fizz_buzz (/ n 11)))]))\n", "  (cond\n    [(< n 0) 0]\n    [(=\
    \ (modulo n 11) 0) 1]\n    [(= (modulo n 13) 0) 2]\n    [else (+ 3 (fizz_buzz\
    \ (- n 1)))]))\n", "  (cond\n    [(< n 0) 0]\n    [(= (mod n 11) 0) 1]\n    [(=\
    \ (mod n 13) 0) 2]\n    [else (+ (fizz_buzz (/ n 11)) (fizz_buzz (/ n 13)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
