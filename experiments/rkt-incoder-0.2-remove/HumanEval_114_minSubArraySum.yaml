name: HumanEval_114_minSubArraySum
language: rkt
prompt: "#lang racket\n\n;; Given an array of integers nums, find the minimum sum\
  \ of any non-empty sub-array\n;; of nums.\n;; Example\n(define (minSubArraySum nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (define (helper nums min max)\n    (cond\n      [(empty? nums) min]\n\
    \      [(> min max) (helper nums (car nums) max)]\n      [else (helper (cdr nums)\
    \ (car nums) max)]\n    ))\n  (helper nums 0 0))\n", "  (define (helper nums min\
    \ sum)\n    (cond\n      [(null? nums) sum]\n      [(< min (first nums)) (helper\
    \ (rest nums) (first nums) sum)]\n      [else (helper (rest nums) (first nums)\
    \ (+ sum (first nums)))]))\n  (helper nums 0 (car nums)))\n", "  (define (helper\
    \ nums start end)\n    (cond\n      [(empty? nums) 0]\n      [(= start end) 0]\n\
    \      [(= start (length nums)) 0]\n      [else (+ (first nums) (helper (rest\
    \ nums) (+ start 1) end))]\n      ))\n  (helper nums 0 (length nums) - 1))\n",
  "  (define (helper nums sum i j)\n    (cond\n      [(empty? nums) sum]\n      [(=\
    \ i j) (if (= sum 0) (- sum (car nums)) sum)]\n      [else (helper (cdr nums)\
    \ (+ sum (car nums)) i (+ 1 j))]))\n  (helper nums 0 0 (length nums)))\n", " \
    \ (if (null? nums)\n      0\n      (let ([sum (+ 0 (min (subArraySum nums) (subArraySum\
    \ nums (+ 1 sum))))])\n        (min sum nums))))\n", "  (define (helper nums min\
    \ sum)\n    (cond [(empty? nums) sum]\n          [(< (first nums) min) (helper\
    \ (rest nums) min (+ min (first nums)))]\n          [else (helper (rest nums)\
    \ min (+ sum (first nums)))]))\n  (helper nums 0 0))\n", "  (define (helper nums\
    \ acc i)\n    (if (null? nums)\n        acc\n        (helper (cdr nums) (if (=\
    \ i (length nums)) acc (+ acc (car nums))) (i + 1))))\n  (helper nums 0 0))\n",
  "  (let loop ((nums (in-list nums))\n             (min (first nums))\n         \
    \    (sum (first nums)))\n    (if (empty? nums)\n        min\n        (loop (rest\
    \ nums)\n              (+ min sum)\n              (+ sum min))))))\n", "  (define\
    \ (helper nums min max)\n    (cond [(empty? nums) min]\n          [(>= (first\
    \ nums) max) (helper nums (first nums) max)]\n          [else (helper (rest nums)\
    \ (+ min (first nums)) max)])\n  (helper nums 0 0))\n", "  (define (helper nums\
    \ min sum)\n    (cond\n      [(empty? nums) sum]\n      [(= 0 (car nums)) (helper\
    \ (cdr nums) min sum)]\n      [else (helper (cdr nums) (+ min (car nums)) sum)])\n\
    \  (helper nums 0 0))\n", "  (define (helper nums min max)\n    (if (null? nums)\n\
    \        min\n        (if (> max min)\n            (helper (cdr nums) min max)\n\
    \            (helper (cdr nums) (+ min (car nums)) max))))\n  (helper nums 0 0))\n",
  "  (define (helper nums min sum)\n    (cond\n      [(null? nums) sum]\n      [(<\
    \ sum (+ min (first nums))) (helper rest min (+ sum (first nums)))]\n      [else\
    \ (helper (rest nums) min (+ sum (first nums)))]))\n  (helper nums 0 (first nums)))\n",
  "  (define (helper nums min sum)\n    (cond [(empty? nums) sum]\n          [(< sum\
    \ (+ min (first nums)))\n           (helper (rest nums) min (+ sum (first nums)))]\n\
    \          [else (helper (rest nums) min sum)]))\n  (helper nums 0 (first nums))))\n",
  "  (define (helper nums sum)\n    (cond [(empty? nums) sum]\n          [(< sum (first\
    \ nums)) (helper (rest nums) (+ sum (first nums)))]\n          [else (helper (rest\
    \ nums) sum)]))\n  (helper nums 0))\n", "  (define (helper nums min max)\n   \
    \ (cond [(empty? nums) (+ min max)]\n          [(> min max) (helper nums (car\
    \ nums) max)]\n          [else (helper (cdr nums) (car nums) (+ min max))]))\n\
    \  (helper nums 0 0))\n", "  (define (helper nums min max)\n    (if (null? nums)\n\
    \        min\n        (helper (cdr nums) (+ min (car nums)) (max max))))\n  (helper\
    \ nums 0 0))\n", "  (define (helper nums min sum)\n    (cond [(null? nums) sum]\n\
    \          [(< min (first nums)) (helper nums (first nums) (+ sum (first nums)))]\n\
    \          [else (helper (rest nums) (+ min (first nums)) sum)]))\n  (helper nums\
    \ 0 (car nums)))\n", "  (define (helper nums min sum)\n    (cond\n      [(empty?\
    \ nums) sum]\n      [(< min (first nums)) (helper nums (first nums) sum)]\n  \
    \    [else (helper (rest nums) (+ min (first nums)) sum)]))\n  (helper nums 0\
    \ 0))\n", "  (define (helper nums min sum)\n    (cond\n      [(null? nums) sum]\n\
    \      [(< min (first nums)) (helper nums (first nums) (+ sum (first nums)))]\n\
    \      [else (helper (rest nums) (+ min (first nums)) sum)]\n    ))\n  (helper\
    \ nums 0 (first nums)))\n", "  (define (helper nums min max)\n    (if (null? nums)\n\
    \        min\n        (if (> max min)\n            (helper (cdr nums) (+ min max)\
    \ max)\n            (helper (cdr nums) min (min max))))))\n  (helper nums 0 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
