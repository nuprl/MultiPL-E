name: HumanEval_67_fruit_distribution
language: rkt
prompt: "#lang racket\n\n;; In this task, you will be given a string that represents\
  \ a number of apples and oranges \n;; that are distributed in a basket of fruit\
  \ this basket contains \n;; apples, oranges, and mango fruits. Given the string\
  \ that represents the total number of \n;; the oranges and apples and an integer\
  \ that represent the total number of the fruits \n;; in the basket return the number\
  \ of the mango fruits in the basket.\n;; for examble:\n(define (fruit_distribution\
  \ s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n\
  \    (check-equal? (candidate \"5 apples and 6 oranges\" 19) 8)\n    (check-equal?\
  \ (candidate \"5 apples and 6 oranges\" 21) 10)\n    (check-equal? (candidate \"\
  0 apples and 1 oranges\" 3) 2)\n    (check-equal? (candidate \"1 apples and 0 oranges\"\
  \ 3) 2)\n    (check-equal? (candidate \"2 apples and 3 oranges\" 100) 95)\n    (check-equal?\
  \ (candidate \"2 apples and 3 oranges\" 5) 0)\n    (check-equal? (candidate \"1\
  \ apples and 100 oranges\" 120) 19)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'mango) n]\n  \
    \  [else (+ (fruit_distribution (rest s) n) (first s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(equal? (first s) 'mango) n]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(equal? (first s) 'mango) n]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal?\
    \ (first s) 'mango) n]\n    [else (fruit_distribution (rest s) (+ n 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'mango) n]\n    [else (+ 1\
    \ (fruit_distribution (rest s) n))]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal?\
    \ (first s) 'O) (+ (fruit_distribution rest (- n 1))\n                       \
    \   (fruit_distribution (rest s) n))\n     (fruit_distribution (rest s) n)]\n\
    \    [else (+ (fruit_distribution rest (- n 1))\n              (fruit_distribution\
    \ (rest s) n))]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'mango)\
    \ n]\n    [else (+ 1 (fruit_distribution (rest s) n))]\n  )\n)\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) 'mango) n]\n    [else (+ 1 (fruit_distribution\
    \ (rest s) n))]\n  )\n)\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first\
    \ s) 'mango) n]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"\
    apple\") (+ n (fruit_distribution (rest s) n))]\n    [(equal? (first s) \"orange\"\
    ) (+ n (fruit_distribution (rest s) n))]\n    [else (+ n (fruit_distribution (rest\
    \ s) n))]\n  )\n)\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'apples)\
    \ (+ n (fruit_distribution (rest s) n))]\n    [(equal? (first s) 'oranges) (+\
    \ n (fruit_distribution (rest s) n))]\n    [else (+ n (fruit_distribution (rest\
    \ s) n))]\n  )\n)\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'mango)\
    \ n]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'mango) (+ (fruit_distribution\
    \ rest (- n 1))\n                               (fruit_distribution (rest s) n))]\n\
    \    [else (fruit_distribution rest (- n 1))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(equal? (first s) 'apples) (+ n (fruit_distribution (rest s) n))]\n\
    \    [(equal? (first s) 'oranges) (+ n (fruit_distribution (rest s) n))]\n   \
    \ [else (+ n (fruit_distribution (rest s) n))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(equal? (first s) 'mango) n]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(equal? (first s) 'mango) n]\n    [else (+ (fruit_distribution (rest s) n)\
    \ (first s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'mango)\
    \ n]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) \"apple\") (+\
    \ n (fruit_distribution (rest s) n))]\n    [(equal? (first s) \"mango\") (+ n\
    \ (fruit_distribution (rest s) n))]\n    [else (+ n (fruit_distribution (rest\
    \ s) n))]\n  )\n)\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'O)\
    \ (+ (fruit_distribution (rest s) n) 1)]\n    [(equal? (first s) 'A) (+ (fruit_distribution\
    \ (rest s) n) -1)]\n    [else (fruit_distribution (rest s) n)]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) \"apple\") (+ n (fruit_distribution\
    \ (rest s) n))]\n    [(equal? (first s) \"orange\") (+ n (fruit_distribution (rest\
    \ s) n))]\n    [else (+ n (fruit_distribution (rest s) n))]\n  )\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
