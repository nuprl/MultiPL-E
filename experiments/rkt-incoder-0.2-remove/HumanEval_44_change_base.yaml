name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  (define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append \"0\" x)\n  \
    \   (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))]\n    [else x]))\n", "  (if (<\
    \ base 10)\n      (number->string x (+ base 1))\n      (number->string x (- base\
    \ 1))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string\
    \ x)))\n", "  (cond\n    [(< base 10) (number->string x)\n     (cond\n       [(=\
    \ base 2) (cons (string->number \"10\") '(\"2\" \"10\"))\n        (= base 3) (cons\
    \ (string->number \"100\") '(\"3\" \"100\"))\n        (= base 4) (cons (string->number\
    \ \"1000\") '(\"4\" \"1000\"))\n        (= base 5) (cons (string->number \"10000\"\
    ) '(\"5\" \"10000\"))\n        (= base 6) (cons (string->number \"100000\") '(\"\
    6\" \"100000\"))\n        (= base 7) (cons (string->number \"1000000\") '(\"7\"\
    \ \"1000000\"))\n        (= base 8) (cons (string->number \"10000000\") '(\"8\"\
    \ \"10000000\"))\n        (= base 9) (cons (string->number \"100000000\") '(\"\
    9\" \"100000000\"))\n        (= base 10) (cons (string->number \"1000000000\"\
    ) '(\"10\" \"1000000000\"))\n        (= base 11) (cons (string->number \"10000000000\"\
    ) '(\"11\" \"10000000000\"))\n        (= base 12) (cons (string->number \"100000000000\"\
    ) '(\"12\" \"100000000000\"))\n        (= base 13) (cons (string->number \"1000000000000\"\
    ) '(\"13\" \"1000000000000\"))\n        (= base 14) (cons (string->number \"10000000000000\"\
    ) '(\"14\" \"10000000000000\"))\n        (= base 15) (cons (string->number \"\
    100000000000000\") '(\"15\" \"100000000000000\"))\n        (= base 16) (cons (string->number\
    \ \"1000000000000000\") '(\"16\" \"1000000000000000\"))\n        (= base 17) (cons\
    \ (string->number \"10000000000000000\") '(\"17\" \"10000000000000000\"))\n  \
    \      (= base 18) (cons (string->number \"100000000000000000\") '(\"18\" \"100000000000000000\"\
    ))\n        (= base 19) (cons (string->number \"1000000000000000000\") '(\"19\"\
    \ \"1000000000000000000\"))\n        (= base 20) (cons (string->number \"10000000000000000000\"\
    ) '(\"20\" \"10000000000000000000\"))\n        (= base 21) (cons (string->number\
    \ \"100000000000000000000\") '(\"21\" \"100000000000000000000\"))\n        (=\
    \ base 22) (cons (string->number \"1000000000000000000000\") '(\"22\" \"1000000000000000000000\"\
    ))\n        (= base 23) (cons (string->number \"10000000000000000000000\") '(\"\
    23\" \"10000000000000000000000\"))", "  (cond [(< base 10) x]\n        [else (quotient\
    \ x base)\n               (change_base (quotient x base) base)]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base 1))\n      (number->string x (- base 1))))\n", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) \"0\" (number->string\
    \ base))\n     (cond\n       [(= base 10) (string-append (number->string x) \"\
    0\")\n        (cond\n         [(< x 0) \"0\"]\n         [(< x 1) \"1\"]\n    \
    \     [(< x 10) (string-append (number->string x) \"0\")\n          (cond\n  \
    \         [(< x 100) (string-append (number->string x) \"0\")\n            (cond\n\
    \             [(< x 1000) (string-append (number->string x) \"0\")\n         \
    \     (cond\n               [(< x 10000) (string-append (number->string x) \"\
    0\")\n                (cond\n                 [(< x 100000) (string-append (number->string\
    \ x) \"0\")\n                  (cond\n                   [(< x 1000000) (string-append\
    \ (number->string x) \"0\")\n                    (cond\n                     [(<\
    \ x 100000000) (string-append (number->string x) \"0\")\n                    \
    \  (cond\n                       [(< x 1000000000) (string-append (number->string\
    \ x) \"0\")\n                        (cond\n                         [(< x 10000000000)\
    \ (string-append (number->string x) \"0\")\n                          (cond\n\
    \                           [(< x 100000000000) (string-append (number->string\
    \ x) \"0\")\n                            (cond\n                             [(<\
    \ x 1000000000000) (string-append (number->string x) \"0\")\n                \
    \              (cond\n                               [(< x 10000000000000) (string-append\
    \ (number->string x) \"0\")\n                                (cond\n         \
    \                        [(< x 100000000000000) (string-append (number->string\
    \ x) \"0\")\n                                  (cond\n                       \
    \            [(< x 1000000000000000) (string-append (number->string x) \"0\")\n\
    \                                    (cond\n                                 \
    \    [(< x 10000000000000000) (string-append (number->string x) \"0\")\n     \
    \                                 (cond\n                                    \
    \   [(< x 100000000000000000) (string-append (number->string x) \"0\")\n     \
    \                                   (cond\n                                  \
    \       [(< x 1000000000000000000) (string-append (number->string x) \"0\")\n\
    \                                          (cond\n                           \
    \                [(< x 10000000000000000000) (string-append (number->string x)\
    \ \"0\")\n                                             (cond\n               \
    \                              [(< x 100000000000000000000) (string-append (number->string\
    \ x) \"0\")\n                                               (cond\n          \
    \                                     [(< x 1000000000000000000000) (string-append\
    \ (number->string x) \"0\")\n                                                \
    \ (cond\n                                                 [(< x 10000000000000000000000)\
    \ (string-", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base) (number->string base))\n        (cond\n         [(< base 8) (string-append\
    \ (number->string x) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n          (cond\n           [(< base 16) (string-append\
    \ (number->string x) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base))\n \
    \           (cond\n             [(< base 32) (string-append (number->string x)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n              (cond\n               [(< base 64)\
    \ (string-append (number->string x) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (", "  (cond\n    [(< base 10) (string-append \"0\" x)\n     (string->number\
    \ (string->string x))\n     (string->number (string->string x))]\n    [else x]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n           [(< base\
    \ 16) (string-append (number->string x) (number->string base))\n            (cond\n\
    \             [(< base 256) (string-append (number->string x) (number->string\
    \ base))\n              (cond\n               [(< base 65536) (string-append (number->string\
    \ x) (number->string base))\n                (cond\n                 [(< base\
    \ 16777216) (string-append (number->string x) (number->string base))\n       \
    \           (cond\n                   [(< base 268435456) (string-append (number->string\
    \ x) (number->string base))\n                    (string-append \"0\" (number->string\
    \ base))\n                    (cond\n                     [(< base 536870912)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \     (string-append \"0\" (number->string base))\n                      (cond\n\
    \                       [(< base 1073741824) (string-append (number->string x)\
    \ (number->string base))\n                        (string-append \"0\" (number->string\
    \ base))\n                        (cond\n                         [(< base 2147483648)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \         (string-append \"0\" (number->string base))\n                      \
    \    (cond\n                           [(< base 4294967296) (string-append (number->string\
    \ x) (number->string base))\n                            (string-append \"0\"\
    \ (number->string base))\n                            (cond\n                \
    \             [(< base 8589934592) (string-append (number->string x) (number->string\
    \ base))\n                              (string-append \"0\" (number->string base))\n\
    \                              (cond\n                               [(< base\
    \ 17179869184) (string-append (number->string x) (number->string base))\n    \
    \                            (string-append \"0\" (number->string base))\n   \
    \                             (cond\n                                 [(< base\
    \ 34359738368) (string-append (number->string x) (number->string base))\n    \
    \                              (string-append \"0\" (number->string base))\n \
    \                                 (cond\n                                   [(<\
    \ base 687194767", "  (if (< base 10)\n      (number->string x (+ base 1))\n \
    \     (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base) (number->string base))\n        (cond\n         [(<\
    \ base 8) (string-append (number->string x) (number->string base) (number->string\
    \ base) (number->string base) (number->string base))\n          (cond\n      \
    \     [(< base 16) (string-append (number->string x) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base))\n            (cond\n             [(< base 32) (string-append (number->string\
    \ x) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n              (cond\n               [(< base 64)\
    \ (string-append (number->string x) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (", "  (if (< base 10)\n      (number->string x (- base 10))\n      (number->string\
    \ x (- base 10) (- base 10))))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
