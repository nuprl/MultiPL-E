name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  (define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append \"0\" x)\n  \
    \   (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))]\n    [else x]))\n", "  (if (<\
    \ base 10)\n      (number->string x (+ base 1))\n      (number->string x (- base\
    \ 1))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string\
    \ x)))\n", "  (cond\n    [(< base 10) (number->string x)\n     (cond\n       [(=\
    \ base 2) (cons (string->number \"10\") '(\"2\" \"10\"))\n        (= base 3) (cons\
    \ (string->number \"100\") '(\"3\" \"100\"))\n        (= base 4) (cons (string->number\
    \ \"1000\") '(\"4\" \"1000\"))\n        (= base 5) (cons (string->number \"10000\"\
    ) '(\"5\" \"10000\"))\n        (= base 6) (cons (string->number \"100000\") '(\"\
    6\" \"100000\"))\n        (= base 7) (cons (string->number \"1000000\") '(\"7\"\
    \ \"1000000\"))\n        (= base 8) (cons (string->number \"10000000\") '(\"8\"\
    \ \"10000000\"))\n        (= base 9) (cons (string->number \"100000000\") '(\"\
    9\" \"100000000\"))\n        (= base 10) (cons (string->number \"1000000000\"\
    ) '(\"10\" \"1000000000\"))\n        (= base 11) (cons (string->number \"10000000000\"\
    ) '(\"11\" \"10000000000\"))\n        (= base 12) (cons (string->number \"100000000000\"\
    ) '(\"12\" \"100000000000\"))\n        (= base 13) (cons (string->number \"1000000000000\"\
    ) '(\"13\" \"1000000000000\"))\n        (= base 14) (cons (string->number \"10000000000000\"\
    ) '(\"14\" \"10000000000000\"))\n        (= base 15) (cons (string->number \"\
    100000000000000\") '(\"15\" \"100000000000000\"))\n        (= base 16) (cons (string->number\
    \ \"1000000000000000\") '(\"16\" \"1000000000000000\"))\n        (= base 17) (cons\
    \ (string->number \"10000000000000000\") '(\"17\" \"10000000000000000\"))\n  \
    \      (= base 18) (cons (string->number \"100000000000000000\") '(\"18\" \"100000000000000000\"\
    ))\n        (= base 19) (cons (string->number \"1000000000000000000\") '(\"19\"\
    \ \"1000000000000000000\"))\n        (= base 20) (cons (string->number \"10000000000000000000\"\
    ) '(\"20\" \"10000000000000000000\"))\n        (= base 21) (cons (string->number\
    \ \"100000000000000000000\") '(\"21\" \"100000000000000000000\"))\n        (=\
    \ base 22) (cons (string->number \"1000000000000000000000\") '(\"22\" \"1000000000000000000000\"\
    ))\n        (= base 23) (cons (string->number \"10000000000000000000000\") '(\"\
    23\" \"10000000000000000000000\"))", "  (cond [(< base 10) x]\n        [else (quotient\
    \ x base)\n               (change_base (quotient x base) base)]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base 1))\n      (number->string x (- base 1))))\n", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) \"0\" (number->string\
    \ base))\n     (cond\n       [(= base 10) (string-append (number->string x) \"\
    0\")\n        (cond\n         [(< x 0) \"0\"]\n         [(< x 1) \"1\"]\n    \
    \     [(< x 10) (string-append (number->string x) \"0\")\n          (cond\n  \
    \         [(< x 100) (string-append (number->string x) \"0\")\n            (cond\n\
    \             [(< x 1000) (string-append (number->string x) \"0\")\n         \
    \     (cond\n               [(< x 10000) (string-append (number->string x) \"\
    0\")\n                (cond\n                 [(< x 100000) (string-append (number->string\
    \ x) \"0\")\n                  (cond\n                   [(< x 1000000) (string-append\
    \ (number->string x) \"0\")\n                    (cond\n                     [(<\
    \ x 100000000) (string-append (number->string x) \"0\")\n                    \
    \  (cond\n                       [(< x 1000000000) (string-append (number->string\
    \ x) \"0\")\n                        (cond\n                         [(< x 10000000000)\
    \ (string-append (number->string x) \"0\")\n                          (cond\n\
    \                           [(< x 100000000000) (string-append (number->string\
    \ x) \"0\")\n                            (cond\n                             [(<\
    \ x 1000000000000) (string-append (number->string x) \"0\")\n                \
    \              (cond\n                               [(< x 10000000000000) (string-append\
    \ (number->string x) \"0\")\n                                (cond\n         \
    \                        [(< x 100000000000000) (string-append (number->string\
    \ x) \"0\")\n                                  (cond\n                       \
    \            [(< x 1000000000000000) (string-append (number->string x) \"0\")\n\
    \                                    (cond\n                                 \
    \    [(< x 10000000000000000) (string-append (number->string x) \"0\")\n     \
    \                                 (cond\n                                    \
    \   [(< x 100000000000000000) (string-append (number->string x) \"0\")\n     \
    \                                   (cond\n                                  \
    \       [(< x 1000000000000000000) (string-append (number->string x) \"0\")\n\
    \                                          (cond\n                           \
    \                [(< x 10000000000000000000) (string-append (number->string x)\
    \ \"0\")\n                                             (cond\n               \
    \                              [(< x 100000000000000000000) (string-append (number->string\
    \ x) \"0\")\n                                               (cond\n          \
    \                                     [(< x 1000000000000000000000) (string-append\
    \ (number->string x) \"0\")\n                                                \
    \ (cond\n                                                 [(< x 10000000000000000000000)\
    \ (string-", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base) (number->string base))\n        (cond\n         [(< base 8) (string-append\
    \ (number->string x) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n          (cond\n           [(< base 16) (string-append\
    \ (number->string x) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base))\n \
    \           (cond\n             [(< base 32) (string-append (number->string x)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n              (cond\n               [(< base 64)\
    \ (string-append (number->string x) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (", "  (cond\n    [(< base 10) (string-append \"0\" x)\n     (string->number\
    \ (string->string x))\n     (string->number (string->string x))]\n    [else x]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n           [(< base\
    \ 16) (string-append (number->string x) (number->string base))\n            (cond\n\
    \             [(< base 256) (string-append (number->string x) (number->string\
    \ base))\n              (cond\n               [(< base 65536) (string-append (number->string\
    \ x) (number->string base))\n                (cond\n                 [(< base\
    \ 16777216) (string-append (number->string x) (number->string base))\n       \
    \           (cond\n                   [(< base 268435456) (string-append (number->string\
    \ x) (number->string base))\n                    (string-append \"0\" (number->string\
    \ base))\n                    (cond\n                     [(< base 536870912)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \     (string-append \"0\" (number->string base))\n                      (cond\n\
    \                       [(< base 1073741824) (string-append (number->string x)\
    \ (number->string base))\n                        (string-append \"0\" (number->string\
    \ base))\n                        (cond\n                         [(< base 2147483648)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \         (string-append \"0\" (number->string base))\n                      \
    \    (cond\n                           [(< base 4294967296) (string-append (number->string\
    \ x) (number->string base))\n                            (string-append \"0\"\
    \ (number->string base))\n                            (cond\n                \
    \             [(< base 8589934592) (string-append (number->string x) (number->string\
    \ base))\n                              (string-append \"0\" (number->string base))\n\
    \                              (cond\n                               [(< base\
    \ 17179869184) (string-append (number->string x) (number->string base))\n    \
    \                            (string-append \"0\" (number->string base))\n   \
    \                             (cond\n                                 [(< base\
    \ 34359738368) (string-append (number->string x) (number->string base))\n    \
    \                              (string-append \"0\" (number->string base))\n \
    \                                 (cond\n                                   [(<\
    \ base 687194767", "  (if (< base 10)\n      (number->string x (+ base 1))\n \
    \     (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base) (number->string base))\n        (cond\n         [(<\
    \ base 8) (string-append (number->string x) (number->string base) (number->string\
    \ base) (number->string base) (number->string base))\n          (cond\n      \
    \     [(< base 16) (string-append (number->string x) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base))\n            (cond\n             [(< base 32) (string-append (number->string\
    \ x) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n              (cond\n               [(< base 64)\
    \ (string-append (number->string x) (number->string base) (number->string base)\
    \ (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (", "  (if (< base 10)\n      (number->string x (- base 10))\n      (number->string\
    \ x (- base 10) (- base 10))))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n     (cond\n \
    \      [(< base 2) (string-append (number->string x) (number->string base))\n\
    \        (cond\n         [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n           [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n            (cond\n             [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(< base 16) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                       (cond\n                  \
    \       [(< base 16) (string-append (number->string x) (number->string base))\n\
    \                           (cond\n                             [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                   (cond\n      \
    \                               [(< base 16) (string-append (number->string x)\
    \ (number->string base))\n                                       (cond\n     \
    \                                    [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                             [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \   [(< base 16) (string-append (number->string x) (number->string base))\n  \
    \                                                     (cond\n                \
    \                                         [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \           (cond\n                                                          \
    \   [(< base 16) (string-append (number->string x) (number->string base))\n  \
    \                                                             (cond\n        \
    \                                                        [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                 (cond\n                                    \
    \                                [(< base 16) (string-append (number->string x)\
    \ (number->string base))\n                                                   \
    \                  (cond\n                                                   \
    \                     [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \      (cond\n                                                               \
    \              [(< base 16) (string-append (", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(zero? x) (number->string x)]\n    [(< base 10) (number->string (expt\
    \ x base))]\n    [else (number->string (expt x base))]))\n", "  (cond\n    [(<\
    \ base 10) (number->string x)]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(zero? x) \"\"]\n    [(< base 10) (string-append (change_base (/\
    \ x base) (quotient base 10)) \"0\")]\n    [else (change_base (/ x base) (quotient\
    \ base 10))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n \
    \     (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) \"0\" (number->string base))\n     (string->number\
    \ (string-append (number->string x) \"0\" (number->string base)))]\n    [else\
    \ x]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond [(< base 10)\n         (string-append (number->string x) (number->string\
    \ base))\n         ]\n        [(= base 10)\n         (number->string x)\n    \
    \     ]\n        [else\n         (number->string x) (number->string base)\n  \
    \       ]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond [(< base\
    \ 10) (string-append (number->string x) \"0\")]\n        [else (string-append\
    \ (number->string x) \"0\")]))\n", "  (if (< base 10)\n      (number->string x\
    \ (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (number->string x (- base 10))\n\
    \      (number->string x (- base 10) (- base 10))))\n", "  (if (< base 10)\n \
    \     (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n          (cond\n           [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n            (cond\n             [(<\
    \ base 36) (string-append (number->string x) (number->string base))\n        \
    \       (cond\n                 [(< base 62) (string-append (number->string x)\
    \ (number->string base))\n                   (cond\n                     [(< base\
    \ 91) (string-append (number->string x) (number->string base))\n             \
    \          (cond\n                         [(< base 100) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 101) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 102) (string-append (number->string x) (number->string base))\n\
    \                                   (cond\n                                  \
    \   [(< base 103) (string-append (number->string x) (number->string base))\n \
    \                                      (cond\n                               \
    \          [(< base 104) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 105) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(< base 106) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 107)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                                      (cond\n                               \
    \                          [(< base 108) (string-append (number->string x) (number->string\
    \ base))\n                                                           (cond\n \
    \                                                            [(< base 109) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                           [(< base 110) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \  (cond\n                                                                   \
    \  [(< base 111) (string-append (number->string x) (number->string base))\n  \
    \                                                                     (cond\n\
    \                                                                         [(<\
    \ base 112) (string-append (number->string x) (number->string base))\n       \
    \                                                                    (cond\n \
    \                                                                            [(<\
    \ base 113) (string-", "  (cond\n    [(zero? x) (number->string x)]\n    [(< base\
    \ 10) (number->string (/ x base))]\n    [else (number->string (* base x))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (/ base 10))\n      (number->string\
    \ x (* base 10))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (string-append (number->string\
    \ x) (number->string base) (number->string base))]))\n", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string (expt x base))))\n", "  (cond\
    \ [(< base 10)\n         (string-append (number->string x) (number->string base))\n\
    \         ]\n        [(= base 10)\n         (string-append (number->string x)\
    \ (number->string base))\n         ]\n        [else\n         (string-append (number->string\
    \ x) (number->string base) (number->string base))\n         ]))\n", "  (cond\n\
    \    [(< base 10) (string-append \"0\" x)\n     (cond\n       [(= base 10) (string-append\
    \ \"0\" x)\n        (cond\n         [(< x 10) (string-append \"0\" x)\n      \
    \    (cond\n            [(= x 10) \"0\"]\n            [(= x 11) \"1\"]\n     \
    \       [(= x 12) \"2\"]\n            [(= x 13) \"3\"]\n            [(= x 14)\
    \ \"4\"]\n            [(= x 15) \"5\"]\n            [(= x 16) \"6\"]\n       \
    \     [(= x 17) \"7\"]\n            [(= x 18) \"8\"]\n            [(= x 19) \"\
    9\"]\n            [(= x 20) \"A\"]\n            [(= x 21) \"B\"]\n           \
    \ [(= x 22) \"C\"]\n            [(= x 23) \"D\"]\n            [(= x 24) \"E\"\
    ]\n            [(= x 25) \"F\"]\n            [(= x 26) \"G\"]\n            [(=\
    \ x 27) \"H\"]\n            [(= x 28) \"I\"]\n            [(= x 29) \"J\"]\n \
    \           [(= x 30) \"K\"]\n            [(= x 31) \"L\"]\n            [(= x\
    \ 32) \"M\"]\n            [(= x 33) \"N\"]\n            [(= x 34) \"O\"]\n   \
    \         [(= x 35) \"P\"]\n            [(= x 36) \"Q\"]\n            [(= x 37)\
    \ \"R\"]\n            [(= x 38) \"S\"]\n            [(= x 39) \"T\"]\n       \
    \     [(= x 40) \"U\"]\n            [(= x 41) \"V\"]\n            [(= x 42) \"\
    W\"]\n            [(= x 43) \"X\"]\n            [(= x 44) \"Y\"]\n           \
    \ [(= x 45) \"Z\"]\n            [(= x 46) \"a\"]\n            [(= x 47) \"b\"\
    ]\n            [(= x 48) \"c\"]\n            [(= x 49) \"d\"]\n            [(=\
    \ x 50) \"e\"]\n            [(= x 51) \"f\"]\n            [(= x 52) \"g\"]\n \
    \           [(= x 53) \"h\"]\n            [(= x 54) \"i\"]\n            [(= x\
    \ 55) \"j\"]\n            [(= x 56) \"k\"]\n            [(= x 57) \"l\"]\n   \
    \         [(= x 58) \"m\"]\n            [(= x 59) \"n\"]\n            [(= x 60)\
    \ \"o\"]\n            [", "  (if (< base 10)\n      (number->string x (+ base\
    \ 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient x base))))\n", "  (if\
    \ (< base 10)\n      (number->string x (+ base 1))\n      (number->string x (-\
    \ base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string x)\
    \ \"0\" (number->string base))]\n    [else (string-append (number->string x) \"\
    0\" (number->string base) (number->string base))]))\n", "  (cond [(< base 10)\n\
    \         (string-append (number->string x) (number->string base))\n         ]\n\
    \        [(= base 10)\n         (number->string x)\n         ]\n        [else\n\
    \         (number->string x) (number->string base)\n         ]))\n", "  (if (<\
    \ base 10)\n      (base-to-long x base)\n      (base-to-long x (- base 10))))\n",
  "  (cond\n    [(zero? x) (list '())]\n    [(zero? (remainder x base)) (list '())]\n\
    \    [else (cons (remainder x base) (change_base (remainder x base) base))]))\n",
  "  (cond\n    [(< base 10) (string-append \"0\" x)\n     (string->number (string-append\
    \ \"0\" x (string->number (string-append \"0\" base \"0\")))]\n    [else x]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))])\n  (cond\n    [(= base 10) (string-append (number->string\
    \ x) (number->string base))]))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base) (number->string base))\n        (cond\n         [(< base 4) (string-append\
    \ (number->string x) (number->string base) (number->string base) (number->string\
    \ base))\n          (cond\n           [(< base 8) (string-append (number->string\
    \ x) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n            (cond\n             [(< base 16) (string-append\
    \ (number->string x) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base))\n              (cond\n               [(< base 32) (string-append (number->string\
    \ x) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base))\n                (cond\n                 [(< base\
    \ 64) (string-append (number->string x) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base))\n                  (cond\n\
    \                   [(< base 128) (string-append (number->string x) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->string base) (number->string base) (number->string base) (number->string\
    \ base) (number->", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (/ x base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (number->string x (- base 10))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) \"0\" (number->string base))\n     (cond\n\
    \       [(< base 2) (string-append (number->string x) \"0\" (number->string base))\n\
    \        (cond\n         [(< base 8) (string-append (number->string x) \"0\" (number->string\
    \ base))\n          (cond\n           [(< base 16) (string-append (number->string\
    \ x) \"0\" (number->string base))\n            (cond\n             [(< base 32)\
    \ (string-append (number->string x) \"0\" (number->string base))\n           \
    \   (cond\n               [(< base 64) (string-append (number->string x) \"0\"\
    \ (number->string base))\n                (cond\n                 [(< base 128)\
    \ (string-append (number->string x) \"0\" (number->string base))\n           \
    \       (cond\n                   [(< base 256) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                    (cond\n               \
    \      [(< base 512) (string-append (number->string x) \"0\" (number->string base))\n\
    \                      (cond\n                       [(< base 1024) (string-append\
    \ (number->string x) \"0\" (number->string base))\n                        (cond\n\
    \                         [(< base 2048) (string-append (number->string x) \"\
    0\" (number->string base))\n                          (cond\n                \
    \           [(< base 4096) (string-append (number->string x) \"0\" (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 8192) (string-append (number->string x) \"0\" (number->string base))\n\
    \                              (cond\n                               [(< base\
    \ 16384) (string-append (number->string x) \"0\" (number->string base))\n    \
    \                            (cond\n                                 [(< base\
    \ 32768) (string-append (number->string x) \"0\" (number->string base))\n    \
    \                              (cond\n                                   [(< base\
    \ 65536) (string-append (number->string x) \"0\" (number->string base))\n    \
    \                                (cond\n                                     [(<\
    \ base 131072) (string-append (number->string x) \"0\" (number->string base))\n\
    \                                      (cond\n                               \
    \        [(< base 262144) (string-append (number->string x) \"0\" (number->string\
    \ base))\n                                        (cond\n                    \
    \                     [(< base 524288) (string-append (number->string x) \"0\"\
    \ (number->string base))\n", "  (cond\n    [(< base 10) (number->string x)]\n\
    \    [else (change_base (/ x base) base)]))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (expt x base))))\n", "  (cond\n    [(zero? x) '0]\n\
    \    [(< base 10) (string-append (number->string x) \"0\")]\n    [else (string-append\
    \ (number->string x) \"0\")]))\n", "  (if (< base 10)\n      (number->string x\
    \ (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append \"0\" x)\n     (cond\n       [(= base 10) (string-append\
    \ \"0\" x)\n        (cond\n         [(< x 10) (string-append \"0\" x)\n      \
    \    (cond\n            [(= x 10) \"0\"]\n            [(= x 100) \"1\"]\n    \
    \        [(= x 1000) \"10\"]\n            [(= x 10000) \"100\"]\n            [(=\
    \ x 100000) \"1000\"]\n            [(= x 1000000) \"10000\"]\n            [(=\
    \ x 10000000) \"100000\"]\n            [(= x 100000000) \"1000000\"]\n       \
    \     [(= x 1000000000) \"10000000\"]\n            [(= x 10000000000) \"100000000\"\
    ]\n            [(= x 100000000000) \"1000000000\"]\n            [(= x 1000000000000)\
    \ \"10000000000\"]\n            [(= x 10000000000000) \"100000000000\"]\n    \
    \        [(= x 100000000000000) \"1000000000000\"]\n            [(= x 1000000000000000)\
    \ \"10000000000000\"]\n            [(= x 10000000000000000) \"100000000000000\"\
    ]\n            [(= x 100000000000000000) \"1000000000000000\"]\n            [(=\
    \ x 1000000000000000000) \"10000000000000000\"]\n            [(= x 10000000000000000000)\
    \ \"100000000000000000\"]\n            [(= x 100000000000000000000) \"1000000000000000000\"\
    ]\n            [(= x 1000000000000000000000) \"10000000000000000000\"]\n     \
    \       [(= x 10000000000000000000000) \"100000000000000000000\"]\n          \
    \  [(= x 100000000000000000000000) \"1000000000000000000000\"]\n            [(=\
    \ x 1000000000000000000000000) \"10000000000000000000000\"]\n            [(= x\
    \ 10000000000000000000000000) \"100000000000000000000000\"]\n            [(= x\
    \ 100000000000000000000000000) \"1000000000000000000000000\"]\n            [(=\
    \ x 1000000000000000000000000000) \"10000000000000000000000000\"]\n          \
    \  [(= x 10000000000000000000000000000) \"100000000000000000000000000\"]\n   \
    \         [(= x 100000000000000000000000000000) \"1000000000000000000000000000\"\
    ]\n            [(= x 1000000000000000000000000000000) \"10000000000000000000000000000\"\
    ]\n            [(= x 10000000000000000000000000000000) \"100000000000000000000000000000\"\
    ]\n            [(= x 100000000000000000000000000000000) \"1000000000000000000000000000000\"\
    ]\n            [(= x 1000000000000000000000000000000000) \"10000000000000000000000000000000\"\
    ]\n            [(= x 10000000000000000000000000000000000) \"100000000000000000000000000000000\"\
    ]\n            [(= x 100000000000000000000000000000000000) \"1000000000000000000000000000000000\"\
    ]\n            [(= x 1000000000000000000000000000000000000) \"10000000000000000000000000000000000\"\
    ]\n            [(= x 10000000000000000000000000000000000000", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n     (cond\n\
    \       [(= base 10) (string-append (number->string x) (number->string 10))]\n\
    \       [else (string-append (number->string x) (number->string base) (number->string\
    \ 10))])]\n    [else (string-append (number->string x) (number->string base) (number->string\
    \ 10))]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (base-to-long x base)\n      (base-to-long\
    \ x (- base 10))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append \"0\" x)\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))]\n    [else (number->string x)]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x)))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (expt x base))))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (if (< base 10)\n      (number->string x (- base 10))\n      (number->string\
    \ x (- base 10) (- base 10))))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string (expt x base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (expt x base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (base-to-long x base)\n      (base-to-long\
    \ x (- base 10))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(zero? x) '()]\n    [(< base 10) (string-append\
    \ (change_base (/ x base) (quotient base 10)) (number->string x))]\n    [else\
    \ (number->string x)]))\n", "  (if (< base 10)\n      (number->string x (+ base\
    \ 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (/ x (expt base\
    \ (- base 1))))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond [(< base 10) (string-append (number->string x)\
    \ (number->string base))])\n  (else (string-append (number->string x) (number->string\
    \ (- base 10)))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond [(< base 10)\n         (string-append\
    \ \"0\" x)\n         (string-append \"0\" base)\n         (string-append \"0\"\
    \ x)\n         (string-append \"0\" base)\n         (string-append \"0\" x)\n\
    \         (string-append \"0\" base)\n         (string-append \"0\" x)\n     \
    \    (string-append \"0\" base)\n         (string-append \"0\" x)\n         (string-append\
    \ \"0\" base)\n         (string-append \"0\" x)\n         (string-append \"0\"\
    \ base)\n         (string-append \"0\" x)\n         (string-append \"0\" base)\n\
    \         (string-append \"0\" x)\n         (string-append \"0\" base)\n     \
    \    (string-append \"0\" x)\n         (string-append \"0\" base)\n         (string-append\
    \ \"0\" x)\n         (string-append \"0\" base)\n         (string-append \"0\"\
    \ x)\n         (string-append \"0\" base)\n         (string-append \"0\" x)\n\
    \         (string-append \"0\" base)\n         (string-append \"0\" x)\n     \
    \    (string-append \"0\" base)\n         (string-append \"0\" x)\n         (string-append\
    \ \"0\" base)\n         (string-append \"0\" x)\n         (string-append \"0\"\
    \ base)\n         (string-append \"0\" x)\n         (string-append \"0\" base)\n\
    \         (string-append \"0\" x)\n         (string-append \"0\" base)\n     \
    \    (string-append \"0\" x)\n         (string-append \"0\" base)\n         (string-append\
    \ \"0\" x)\n         (string-append \"0\" base)\n         (string-append \"0\"\
    \ x)\n         (string-append \"0\" base)\n         (string-append \"0\" x)\n\
    \         (string-append \"0\" base)\n         (string-append \"0\" x)\n     \
    \    (string-append \"0\" base)\n         (string-append \"0\" x)\n         (string-append\
    \ \"0\" base)\n         (string-append \"0\" x)\n         (string-append \"0\"\
    \ base)\n         (string-append \"0\" x)\n         (string-append \"0\" base)\n\
    \         (string-append \"0\" x)\n         (string-append \"0\" base)\n     \
    \    (string-append \"0\" x)\n         (string-append \"0\" base)\n         (string-append\
    \ \"0\" x)\n         (string-append \"0\" base)\n         (string-append \"0\"\
    \ x)\n         (string-append \"0\" base)\n         (string-append \"0\" x)\n\
    \         (string-append \"0\" base)\n         (string-append \"0\" x)\n     \
    \    (string-append \"0\" base)\n         (string-append \"0\" x)\n         (string-append\
    \ \"0\" base)\n         (string-append \"0\" x)\n         (string-append \"0\"\
    \ base)\n         (string-append \"0\" x)\n         (string-append \"0\" base)\n\
    \         (string-append \"0\" x)\n         (string-append \"0\" base)\n     \
    \    (string-append \"0\" x)\n         (string-append \"0\" base)\n", "  (if (<\
    \ base 10)\n      (number->string x (/ base 10))\n      (number->string x (* base\
    \ 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(= base 10) (string-append (number->string x) (number->string\
    \ 10))]\n       [else (string-append (number->string x) (number->string (- base\
    \ 10)))]))])\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n   \
    \   (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (base-to-long x base)\n      (base-to-long x (- base 10))))\n",
  "  (cond\n    [(< base 10) (string-append \"0\" x)\n     (cond\n       [(= base\
    \ 10) (string-append \"0\" x)\n        (cond\n         [(< x 10) (string-append\
    \ \"0\" x)\n          (cond\n            [(= x 10) \"0\"]\n            [(= x 100)\
    \ \"1\"]\n            [(= x 1000) \"10\"]\n            [(= x 10000) \"100\"]\n\
    \            [(= x 100000) \"1000\"]\n            [(= x 1000000) \"10000\"]\n\
    \            [(= x 10000000) \"100000\"]\n            [(= x 100000000) \"1000000\"\
    ]\n            [(= x 1000000000) \"10000000\"]\n            [(= x 10000000000)\
    \ \"100000000\"]\n            [(= x 100000000000) \"1000000000\"]\n          \
    \  [(= x 1000000000000) \"10000000000\"]\n            [(= x 10000000000000) \"\
    100000000000\"]\n            [(= x 100000000000000) \"1000000000000\"]\n     \
    \       [(= x 1000000000000000) \"10000000000000\"]\n            [(= x 10000000000000000)\
    \ \"100000000000000\"]\n            [(= x 100000000000000000) \"1000000000000000\"\
    ]\n            [(= x 1000000000000000000) \"10000000000000000\"]\n           \
    \ [(= x 10000000000000000000) \"100000000000000000\"]\n            [(= x 100000000000000000000)\
    \ \"1000000000000000000\"]\n            [(= x 1000000000000000000000) \"10000000000000000000\"\
    ]\n            [(= x 10000000000000000000000) \"100000000000000000000\"]\n   \
    \         [(= x 100000000000000000000000) \"1000000000000000000000\"]\n      \
    \      [(= x 1000000000000000000000000) \"10000000000000000000000\"]\n       \
    \     [(= x 10000000000000000000000000) \"100000000000000000000000\"]\n      \
    \      [(= x 100000000000000000000000000) \"1000000000000000000000000\"]\n   \
    \         [(= x 1000000000000000000000000000) \"10000000000000000000000000\"]\n\
    \            [(= x 10000000000000000000000000000) \"100000000000000000000000000\"\
    ]\n            [(= x 100000000000000000000000000000) \"1000000000000000000000000000\"\
    ]\n            [(= x 1000000000000000000000000000000) \"10000000000000000000000000000\"\
    ]\n            [(= x 10000000000000000000000000000000) \"100000000000000000000000000000\"\
    ]\n            [(= x 100000000000000000000000000000000) \"1000000000000000000000000000000\"\
    ]\n            [(= x 1000000000000000000000000000000000) \"10000000000000000000000000000000\"\
    ]\n            [(= x 10000000000000000000000000000000000) \"100000000000000000000000000000000\"\
    ]\n            [(= x 100000000000000000000000000000000000) \"1000000000000000000000000000000000\"\
    ]\n            [(= x 1000000000000000000000000000000000000) \"10000000000000000000000000000000000\"\
    ]\n            [(= x 10000000000000000000000000000000000", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(= base 10) (string-append (number->string x) (number->string base))\n   \
    \     (cond\n         [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n           [(= base 10) (string-append (number->string\
    \ x) (number->string base))\n            (cond\n             [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n              (cond\n           \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \               (cond\n                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(= base\
    \ 10) (string-append (number->string x) (number->string base))\n             \
    \       (cond\n                     [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(= base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 10) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(= base 10) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(= base 10) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 10) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(= base 10) (string-append (number->string x) (number->string\
    \ base))\n                                             (cond\n               \
    \                              [(< base 10) (string-append (number->string x)\
    \ (number->string base))\n                                              (cond\n\
    \                                               [(= base 10) (string-append (number->",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append \"0\" x)]\n    [else (number->string x\
    \ (- base 10))]))\n", "  (if (< base 10)\n      (number->string x (+ base 10))\n\
    \      (number->string x (- base 10))))\n", "  (cond\n    [(< base 10) (number->string\
    \ x)]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n           [(< base\
    \ 16) (string-append (number->string x) (number->string base))\n            (cond\n\
    \             [(< base 36) (string-append (number->string x) (number->string base))\n\
    \              (cond\n               [(< base 62) (string-append (number->string\
    \ x) (number->string base))\n                (cond\n                 [(< base\
    \ 91) (string-append (number->string x) (number->string base))\n             \
    \     (cond\n                   [(< base 101) (string-append (number->string x)\
    \ (number->string base))\n                    (string-append \"0\" (number->string\
    \ base))\n                    (number->string base)]\n                   (number->string\
    \ base)]\n                 (number->string base)]\n               (number->string\
    \ base)]\n             (number->string base)]\n           (number->string base)]\n\
    \         (number->string base)]\n       (number->string base)]\n     (number->string\
    \ base)]\n   (number->string base)]", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond [(< base 10) x]\n        [else (quotient x base)\n\
    \               (change_base (quotient x base) base)]))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (base-to-long x base)\n      (base-to-long x (- base 10))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(zero? x) (list '())]\n\
    \    [(zero? (remainder x base))\n     (cons (quotient x base) (change_base (remainder\
    \ x base) base))]\n    [else (cons (quotient x base) (change_base (remainder x\
    \ base) base))]))\n", "  (cond [(< base 10)\n         (number->string x (- base\
    \ 10))]\n        [(< base (+ 10 base))\n         (number->string x (- base (+\
    \ 10 base)))]\n        [else\n         (number->string x (- base (- base base\
    \ 10)))]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ (quotient x base)))]\n    [else (string-append (number->string x) (number->string\
    \ (quotient x base) (number->string base)))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x)\n      (number->string (expt x base))))\n", " \
    \ (if (< base 10)\n      (number->string x)\n      (number->string (quotient x\
    \ base) (quotient x base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (number->string x (- base\
    \ 10))]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n     (cond\n       [(= base 10) (string-append (number->string x) (number->string\
    \ 10))]\n       [else (string-append (number->string x) (number->string base)\
    \ (number->string 10))])]\n    [else (string-append (number->string x) (number->string\
    \ base) (number->string 10))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string (quotient x base)))]\n    [else (string-append\
    \ (number->string x) (number->string (quotient x base) (number->string (- base\
    \ base))))]))\n", "  (if (< base 10)\n      (number->string x (/ base 10))\n \
    \     (number->string x (/ 10 base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond [(< base 10) (string-append (number->string x) \"0\")]\n        [else (string-append\
    \ (number->string x) \"0\")]))\n", "  (if (< base 10)\n      (number->string x\
    \ (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base) \"0\")\n        (cond\n         [(< base 8) (string-append (number->string\
    \ x) (number->string base) \"0\")\n          (cond\n           [(< base 16) (string-append\
    \ (number->string x) (number->string base) \"0\")\n            (cond\n       \
    \      [(< base 32) (string-append (number->string x) (number->string base) \"\
    0\")\n              (cond\n               [(< base 64) (string-append (number->string\
    \ x) (number->string base) \"0\")\n                (cond\n                 [(<\
    \ base 128) (string-append (number->string x) (number->string base) \"0\")\n \
    \                 (cond\n                   [(< base 256) (string-append (number->string\
    \ x) (number->string base) \"0\")\n                    (string-append (number->string\
    \ x) (number->string base) \"1\")\n                    (cond\n               \
    \      [(< base 512) (string-append (number->string x) (number->string base) \"\
    0\")\n                      (cond\n                       [(< base 1024) (string-append\
    \ (number->string x) (number->string base) \"0\")\n                        (string-append\
    \ (number->string x) (number->string base) \"1\")\n                        (string-append\
    \ (number->string x) (number->string base) \"2\")\n                        (string-append\
    \ (number->string x) (number->string base) \"3\")\n                        (string-append\
    \ (number->string x) (number->string base) \"4\")\n                        (string-append\
    \ (number->string x) (number->string base) \"5\")\n                        (string-append\
    \ (number->string x) (number->string base) \"6\")\n                        (string-append\
    \ (number->string x) (number->string base) \"7\")\n                        (string-append\
    \ (number->string x) (number->string base) \"8\")\n                        (string-append\
    \ (number->string x) (number->string base) \"9\")\n                        (string-append\
    \ (number->string x) (number->string base) \"10\")\n                        (string-append\
    \ (number->string x) (number->string base) \"11\")\n                        (string-append\
    \ (number->string x) (number->string base) \"12\")\n                        (string-append\
    \ (number->string x) (number->string base) \"13\")\n                        (string-append\
    \ (number->string x) (number->string base) \"14", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (/ x base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n     (cond\n       [(< base 2) (string-append\
    \ (number->string x) (number->string base))\n        (cond\n         [(< base\
    \ 10) (string-append (number->string x) (number->string base))\n          (cond\n\
    \           [(< base 16) (string-append (number->string x) (number->string base))\n\
    \            (cond\n             [(< base 256) (string-append (number->string\
    \ x) (number->string base))\n              (cond\n               [(< base 65536)\
    \ (string-append (number->string x) (number->string base))\n                (cond\n\
    \                 [(< base 16777216) (string-append (number->string x) (number->string\
    \ base))\n                  (cond\n                   [(< base 268435456) (string-append\
    \ (number->string x) (number->string base))\n                    (cond\n     \
    \                [(< base 1099511627776) (string-append (number->string x) (number->string\
    \ base))\n                      (cond\n                       [(< base 134217727)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \       (cond\n                         [(< base 17179869184) (string-append (number->string\
    \ x) (number->string base))\n                          (cond\n               \
    \            [(< base 2097152) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 268435455) (string-append (number->string x) (number->string base))\n \
    \                             (cond\n                               [(< base 314572800)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \               (cond\n                                 [(< base 34359738368)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                 (cond\n                                   [(< base 4294967296)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                   (cond\n                                     [(< base 536870912)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                     (cond\n                                       [(< base 576460752303423488)\
    \ (string-append (number->string x) (number->string base))\n                 \
    \                       (cond\n                                         [(< base\
    \ 68719476736) (string-append (number->string x) (number->string base))\n", " \
    \ (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (base-to-long x base)\n   \
    \   (base-to-long x (- base 10))))\n", "  (cond [(< base 10)\n         (number->string\
    \ x (- base 10))]\n        [else\n         (number->string x (- base 10))\n  \
    \       (number->string x (- base 10))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond [(< base 10)\n\
    \         (number->string x (+ base base))\n         (number->string x (- base\
    \ base))\n         '()]\n        [(= base 10)\n         (number->string x (- base\
    \ base))\n         (number->string x (+ base base))\n         '()]\n        [else\n\
    \         (number->string x (- base base))\n         (number->string x (+ base\
    \ base))\n         (number->string x (- base base))\n         '()]\n        ))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) \"0\")]\n    [else (string-append (number->string x) \"0\")]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (number->string x (- base 10))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (* base 10))))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ \"0\" x)\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string->number (string->string\
    \ x))\n     (string->number (string->string x))\n     (string", "  (cond\n   \
    \ [(< base 10) (string-append (number->string x) \"0\" (number->string base))]\n\
    \    [else (string-append (number->string x) \"0\" (number->string base) \"0\"\
    )]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond [(< base\
    \ 10)\n         (string-append (number->string x) \"0\")]\n        [else\n   \
    \      (string-append (number->string x) \"1\")]\n        [else (error \"Invalid\
    \ base ~S\" base)]\n        [else (error \"Invalid number ~S\" x)]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string (expt base\
    \ 10)))]\n    [else (string-append (number->string x) (number->string (expt base\
    \ 10)))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n     \
    \ (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x)\n      (number->string (expt x base))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) \"0\")]\n    [else (string-append\
    \ (number->string x) \"0\" (number->string base))]))\n", "  (cond\n    [(< base\
    \ 10) (number->string x)]\n    [else (change_base (/ x base) (- base 10))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond [(< base 10) (string-append (number->string x) \"\
    0\")]\n        [else (string-append (number->string x) \"0\")]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string (expt base\
    \ 10)))]\n    [else (string-append (number->string x) (number->string (expt base\
    \ (- base 10))))]))\n", "  (cond [(< base 10)\n         (number->string x (- base\
    \ 10))]\n        [else\n         (number->string x (- base 10))\n         (number->string\
    \ x (- base 10))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n           [(< base\
    \ 16) (string-append (number->string x) (number->string base))\n            (cond\n\
    \             [(< base 16) (string-append (number->string x) (number->string base))\n\
    \               (cond\n                 [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 16) (string-append (number->string x) (number->string base))\n        \
    \               (cond\n                         [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                               (cond\n                             \
    \    [(< base 16) (string-append (number->string x) (number->string base))\n \
    \                                  (cond\n                                   \
    \  [(< base 16) (string-append (number->string x) (number->string base))\n   \
    \                                    (cond\n                                 \
    \        [(< base 16) (string-append (number->string x) (number->string base))\n\
    \                                           (cond\n                          \
    \                   [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                               (cond\n             \
    \                                    [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \   (cond\n                                                     [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                       (cond\n                                              \
    \           [(< base 16) (string-append (number->string x) (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                               (cond\n                                      \
    \                          [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                                                 (cond\n\
    \                                                                    [(< base\
    \ 16) (string-append (number->string x) (number->string base))\n             \
    \                                                        (cond\n             \
    \                                                           [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                         (cond\n                            \
    \                                                 [(< base 16) (string-append\
    \ (", "  (if (< base 10)\n      (base-to-long x base)\n      (base-to-long x 10)))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (expt x base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (/ base 10))\n      (number->string\
    \ x (/ base 10) (quotient x base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(< base 2) (string-append (number->string x) (number->string base))\n    \
    \    (cond\n         [(< base 10) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n           [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n            (cond\n             [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(< base 16) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                       (cond\n                  \
    \       [(< base 16) (string-append (number->string x) (number->string base))\n\
    \                           (cond\n                             [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                   (cond\n      \
    \                               [(< base 16) (string-append (number->string x)\
    \ (number->string base))\n                                       (cond\n     \
    \                                    [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                             [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \   [(< base 16) (string-append (number->string x) (number->string base))\n  \
    \                                                     (cond\n                \
    \                                         [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \           (cond\n                                                          \
    \   [(< base 16) (string-append (number->string x) (number->string base))\n  \
    \                                                             (cond\n        \
    \                                                        [(< base 16) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                 (cond\n                                    \
    \                                [(< base 16) (string-append (number->string x)\
    \ (number->string base))\n                                                   \
    \                  (cond\n                                                   \
    \                     [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \      (cond\n                                                               \
    \              [(< base 16) (string-append (", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) \"0\" (number->string base))]\n    [else (string-append (number->string\
    \ x) \"0\" (number->string base))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) \"0\" (number->string base))\n     (cond\n       [(< base\
    \ 2) (string-append (number->string x) \"0\" (number->string base))\n        (cond\n\
    \         [(< base 8) (string-append (number->string x) \"0\" (number->string\
    \ base))\n          (cond\n           [(< base 16) (string-append (number->string\
    \ x) \"0\" (number->string base))\n            (cond\n             [(< base 32)\
    \ (string-append (number->string x) \"0\" (number->string base))\n           \
    \    (cond\n                 [(< base 64) (string-append (number->string x) \"\
    0\" (number->string base))\n                   (cond\n                     [(<\
    \ base 128) (string-append (number->string x) \"0\" (number->string base))\n \
    \                      (cond\n                         [(< base 256) (string-append\
    \ (number->string x) \"0\" (number->string base))\n                          \
    \ (cond\n                             [(< base 512) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                               (cond\n    \
    \                             [(< base 1024) (string-append (number->string x)\
    \ \"0\" (number->string base))\n                                   (cond\n   \
    \                                  [(< base 2048) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                       (cond\n\
    \                                         [(< base 4096) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                          \
    \ (cond\n                                             [(< base 8192) (string-append\
    \ (number->string x) \"0\" (number->string base))\n                          \
    \                     (cond\n                                                \
    \ [(< base 16384) (string-append (number->string x) \"0\" (number->string base))\n\
    \                                                   (cond\n                  \
    \                                   [(< base 32768) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                          \
    \             (cond\n                                                        \
    \ [(< base 65536) (string-append (number->string x) \"0\" (number->string base))\n\
    \                                                           (cond\n          \
    \                                                   [(< base 131072) (string-append\
    \ (number->string x) \"0\" (number->string base))\n                          \
    \                                     (cond\n                                \
    \                                 [(< base 262144) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                          \
    \                           (cond\n                                          \
    \                           [(< base 524288) (string-append (number->string x)\
    \ \"0\" (", "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string\
    \ x (- base 1))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (number->string x)\n     (cond\n\
    \       [(= base 2) (concat (substring x 0 1) (substring x 1 1))]\n       [(=\
    \ base 3) (concat (substring x 0 1) (substring x 1 1) (substring x 2 1))]\n  \
    \     [(= base 4) (concat (substring x 0 1) (substring x 1 1) (substring x 2 1)\
    \ (substring x 3 1))]\n       [(= base 5) (concat (substring x 0 1) (substring\
    \ x 1 1) (substring x 2 1) (substring x 3 1) (substring x 4 1))]\n       [(= base\
    \ 6) (concat (substring x 0 1) (substring x 1 1) (substring x 2 1) (substring\
    \ x 3 1) (substring x 4 1) (substring x 5 1))]\n       [(= base 7) (concat (substring\
    \ x 0 1) (substring x 1 1) (substring x 2 1) (substring x 3 1) (substring x 4\
    \ 1) (substring x 5 1) (substring x 6 1))]\n       [(= base 8) (concat (substring\
    \ x 0 1) (substring x 1 1) (substring x 2 1) (substring x 3 1) (substring x 4\
    \ 1) (substring x 5 1) (substring x 6 1) (substring x 7 1))]\n       [(= base\
    \ 9) (concat (substring x 0 1) (substring x 1 1) (substring x 2 1) (substring\
    \ x 3 1) (substring x 4 1) (substring x 5 1) (substring x 6 1) (substring x 7\
    \ 1) (substring x 8 1))]\n       [(= base 10) (concat (substring x 0 1) (substring\
    \ x 1 1) (substring x 2 1) (substring x 3 1) (substring x 4 1) (substring x 5\
    \ 1) (substring x 6 1) (substring x 7 1) (substring x 8 1) (substring x 9 1))]\n\
    \       [(= base 11) (concat (substring x 0 1) (substring x 1 1) (substring x\
    \ 2 1) (substring x 3 1) (substring x 4 1) (substring x 5 1) (substring x 6 1)\
    \ (substring x 7 1) (substring x 8 1) (substring x 9 1) (substring x 10 1))]\n\
    \       [(= base 12) (concat (substring x 0 1) (sub", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) \"0\" (number->string base))\n     (cond\n\
    \       [(< base 2) (string-append (number->string x) \"0\" (number->string base))\n\
    \        (cond\n         [(< base 10) (string-append (number->string x) \"0\"\
    \ (number->string base))\n          (cond\n           [(< base 16) (string-append\
    \ (number->string x) \"0\" (number->string base))\n            (cond\n       \
    \      [(< base 256) (string-append (number->string x) \"0\" (number->string base))\n\
    \              (cond\n               [(< base 65536) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                (cond\n                 [(<\
    \ base 16777216) (string-append (number->string x) \"0\" (number->string base))\n\
    \                  (cond\n                   [(< base 268435456) (string-append\
    \ (number->string x) \"0\" (number->string base))\n                    (cond\n\
    \                     [(< base 536870912) (string-append (number->string x) \"\
    0\" (number->string base))\n                      (cond\n                    \
    \   [(< base 1073741824) (string-append (number->string x) \"0\" (number->string\
    \ base))\n                        (cond\n                         [(< base 2147483648)\
    \ (string-append (number->string x) \"0\" (number->string base))\n           \
    \               (cond\n                           [(< base 4294967296) (string-append\
    \ (number->string x) \"0\" (number->string base))\n                          \
    \  (cond\n                             [(< base 8589934592) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                              (cond\n     \
    \                          [(< base 17179869184) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                (cond\n   \
    \                              [(< base 34359738368) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                  (cond\n \
    \                                  [(< base 68719476736) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                    (cond\n\
    \                                     [(< base 137438953472) (string-append (number->string\
    \ x) \"0\" (number->string base))\n                                      (cond\n\
    \                                       [(< base 274877906944) (string-append\
    \ (number->string x) \"", "  (if (< base 10)\n      (number->string x (+ base\
    \ 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond [(< base 10) (string-append (number->string x) \"\
    0\" (number->string base))\n         (< base 36) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 62) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 9) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 16) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 26) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 36) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 46) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 56) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 66) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 76) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 86) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 96) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 106) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 116) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 126) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 136) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 146) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 156) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 166) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 176) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 186) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 196) (string-append (number->string\
    \ x) \"0\" (number->string base))\n         (< base 206", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(= base 10) (string-append (number->string x) (number->string 10))]\n    \
    \   [(= base 2) (string-append (number->string x) (number->string 2))]\n     \
    \  [(= base 3) (string-append (number->string x) (number->string 3))]\n      \
    \ [(= base 4) (string-append (number->string x) (number->string 4))]\n       [(=\
    \ base 5) (string-append (number->string x) (number->string 5))]\n       [(= base\
    \ 6) (string-append (number->string x) (number->string 6))]\n       [(= base 7)\
    \ (string-append (number->string x) (number->string 7))]\n       [(= base 8) (string-append\
    \ (number->string x) (number->string 8))]\n       [(= base 9) (string-append (number->string\
    \ x) (number->string 9))]\n       [(= base 10) (string-append (number->string\
    \ x) (number->string 10))]\n       [(= base 11) (string-append (number->string\
    \ x) (number->string 11))]\n       [(= base 12) (string-append (number->string\
    \ x) (number->string 12))]\n       [(= base 13) (string-append (number->string\
    \ x) (number->string 13))]\n       [(= base 14) (string-append (number->string\
    \ x) (number->string 14))]\n       [(= base 15) (string-append (number->string\
    \ x) (number->string 15))]\n       [(= base 16) (string-append (number->string\
    \ x) (number->string 16))]\n       [(= base 17) (string-append (number->string\
    \ x) (number->string 17))]\n       [(= base 18) (string-append (number->string\
    \ x) (number->string 18))]\n       [(= base 19) (string-append (number->string\
    \ x) (number->string 19))]\n       [(= base 20) (string-append (number->string\
    \ x) (number->string 20))]\n       [(= base 21) (string-append (number->string\
    \ x) (number->string 21))]\n       [(= base 22) (string-append (number->string\
    \ x) (number->string 22))]\n       [(= base 23) (string-append (number->string\
    \ x) (number->string 23))]\n       [(= base 24) (string-append (number"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
