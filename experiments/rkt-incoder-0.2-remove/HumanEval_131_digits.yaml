name: HumanEval_131_digits
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return the product of the\
  \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> digits(1)\
  \ \n;; 1\n;; >>> digits(4) \n;; 0\n(define (digits n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n\
  \    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
  \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal? (candidate\
  \ 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal? (candidate\
  \ 2468) 0)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      0\n      (* n (digits (remainder n 10))))) ;;\
    \ #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10))))) \n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n      0\n\
    \      (* n (digits (remainder n 10))))) ;; #lang racket\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n      0\n\
    \      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n      0\n      (* n\
    \ (digits (quotient n 2)))))\n", "  (if (= n 0)\n      0\n      (* n (digits ((quotient\
    \ n 10))))))\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder n 10)))))\
    \ ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder n\
    \ 10))))) ;; #lang racket\n", "  (if (even? n)\n      0\n      (* n (digits (quotient\
    \ n 2)))))\n", "  (if (even? n)\n      (* n (digits (quotient n 2)))\n      0))\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (cond [(=\
    \ n 0) 0]\n        [(even? (remainder n 2)) (* n 3)]\n        [else (* n (digits\
    \ (remainder n 2)))]))\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder\
    \ n 10))))) \n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
