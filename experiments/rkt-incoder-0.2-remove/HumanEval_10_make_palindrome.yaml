name: HumanEval_10_make_palindrome
language: rkt
prompt: "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied\
  \ string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied\
  \ string that is a palindrome.\n;; - Append to the end of the string reverse of\
  \ a string prefix that comes before the palindromic suffix.\n(define (make_palindrome\
  \ string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"\
  x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate\
  \ \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\
  \n(test-humaneval)"
completions: ["  (let ((longest-palindromic-suffix (longest-palindrome string)))\n\
    \    (append string (reverse (substring string 0 (- (length string) longest-palindromic-suffix)))))\n",
  "  (let ((longest-palindromic-suffix (longest-palindrome-suffix string)))\n    (append\
    \ string (reverse (substring string 0 (- (length string) longest-palindromic-suffix)))))\n",
  "  (let loop ((string string)\n             (palindrome (make-string (string-length\
    \ string)))\n             (i 0))\n    (if (string-empty? string)\n        palindrome\n\
    \        (loop (substring string 0 (string-length string))\n              (string-append\
    \ palindrome (substring string 0 (string-length string))) (add1 i))))))\n", " \
    \ (let ((longest-palindromic-suffix (longest-palindrome-suffix string)))\n   \
    \ (append string (reverse (substring string 0 (- (length string) longest-palindromic-suffix)))))\n",
  "  (let ((longest-palindromic-suffix (longest-palindrome string)))\n    (append\
    \ string (reverse longest-palindromic-suffix))))\n", "  (let ([len (string-length\
    \ string)])\n    (if (= len 0)\n        '()\n        (append (make-string len\
    \ (char->integer string)) (make-palindrome (string-append string (string-reverse\
    \ (substring string 0 len)))))\n      )\n    )\n  )\n", "  (let ([length (string-length\
    \ string)])\n    (if (= length 0)\n        '()\n        (append (make-string length\
    \ (string->char (reverse (string-ref string 0))))\n                (make_palindrome\
    \ (string-ref string (1- length)))))\n  )\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindrome string)))\n    (append string (reverse (substring string\
    \ 0 (- (length string) longest-palindromic-suffix)))))\n", "  (let ((longest-palindromic-postfix\
    \ '())\n        (longest-palindromic-suffix '())\n        (longest-palindromic-prefix\
    \ (reverse string)))\n    (if (string-equal? string (reverse string))\n      \
    \  (list string)\n        (let ((palindromic-suffix (reverse (string-append longest-palindromic-postfix\
    \ string))))\n          (if (string-equal? palindromic-suffix string)\n      \
    \        (list palindromic-suffix)\n              (let ((palindromic-prefix (reverse\
    \ (string-append longest-palindromic-prefix string))))\n                (if (string-equal?\
    \ palindromic-prefix palindromic-suffix)\n                    (list palindromic-prefix\
    \ palindromic-suffix)\n                    (let ((palindromic-prefix (reverse\
    \ (string-append longest-palindromic-prefix palindromic-suffix))))\n         \
    \             (if (string-equal? palindromic-prefix palindromic-suffix)\n    \
    \                      (list palindromic-prefix palindromic-suffix)\n        \
    \                  (list palindromic-prefix palindromic-suffix longest-palindromic-prefix\
    \ longest-palindromic-suffix longest-palindromic-postfix)))))\n            (list\
    \ longest-palindromic-prefix longest-palindromic-suffix longest-palindromic-postfix\
    \ string))))))\n", "  (let ((palindrome (make-string (string-length string) ?a)))\n\
    \    (let loop ((i 0)\n               (palindrome-length 0))\n      (if (< i string-length)\n\
    \          (loop (+ i 1)\n                (if (equal? (substring string i i) (reverse\
    \ (substring string 0 i)))\n                    (palindrome-length i)\n      \
    \              (+ 1 (loop (+ i 1) palindrome-length))))\n          palindrome)))\n",
  "  (let ((longest-postfix \n         (longest-postfix string)))\n    (if (null?\
    \ longest-postfix)\n        string \n        (append (make-palindrome (substring\
    \ string 0 (- (length string) longest-postfix))) \n                (substring\
    \ string longest-postfix 0)))))\n", "  (let loop ((string string)\n          \
    \   (palindrome '())\n             (i 0))\n    (if (null? string)\n        palindrome\n\
    \        (loop (cdr string)\n              (cons (reverse (string-ref string i))\n\
    \                    palindrome)\n              (incf i))))))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindromic-suffix string)))\n    (append string (reverse (substring\
    \ string 0 (- (length string) longest-palindromic-suffix)))))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindrome string)))\n    (append string (reverse (substring string\
    \ 0 (- (length string) longest-palindromic-suffix)))))\n", "  (let ((palindrome\
    \ (make-string (string-length string) string)))\n    (let loop ((i 0) (j 0))\n\
    \      (if (< i j)\n          palindrome\n          (loop (+ i 1) (+ j 1))\n \
    \         (loop (+ i 1) j)\n          (loop (+ i 1) (+ j 1))))))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindromic-suffix string)))\n    (append string (reverse (substring\
    \ string 0 (- (length string) longest-palindromic-suffix)))))\n", "  (let loop\
    \ ((string string)\n             (result '()))\n    (if (string-empty? string)\n\
    \        result\n        (loop (substring string 0 (string-length string))\n \
    \             (append result (substring string 0 (string-length string)))))))\n",
  "  (let ((longest-postfix \n         (longest-postfix-of string \n             \
    \               (longest-postfix-of string \n                                \
    \              (longest-postfix-of string \n                                 \
    \                               (longest-postfix-of string \n                \
    \                                                   string))))))\n    (append\
    \ string \n            (reverse (substring string 0 (- (length string) longest-postfix)))))\n",
  "  (let ((palindrome (make-string (string-length string) #\\space)))\n    (let loop\
    \ ((i 0) (j 0))\n      (if (< i j)\n          palindrome\n          (loop (+ i\
    \ 1) (+ j 1))\n          (loop (+ i 1) j)\n          (loop (+ i 1) (+ j 1))))))\n",
  "  (let loop ((string string)\n             (result '()))\n    (cond ((null? string)\
    \ result)\n          ((equal? (string-ref string 0) (string-ref string (string-length\
    \ string)))\n           (loop (substring string 1 string-length (string-length\
    \ string))\n                 (append result (string-reverse (string-ref string\
    \ 0)))))\n          (else\n           (loop (substring string 1 string-length\
    \ (string-length string))\n                 (append result (string-reverse (string-ref\
    \ string 0))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
